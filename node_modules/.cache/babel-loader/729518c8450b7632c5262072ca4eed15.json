{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Pages/SuperAdminIntermediateScreen.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Pages/SuperAdminIntermediateScreen.vue","mtime":1645594423491},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}