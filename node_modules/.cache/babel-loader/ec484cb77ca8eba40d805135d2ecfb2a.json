{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/analytics/components/StackedBarchartNonTime.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/analytics/components/StackedBarchartNonTime.vue","mtime":1643027096188},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7CgovLwovLwovLwovLwovLwovLwovLwovLwovLwp2YXIgZDMgPSByZXF1aXJlKCJkMyIpOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJTdGFja2VkQmFyQ2hhcnROb25UaW1lIiwKICBwcm9wczogewogICAgZGF0YTogQXJyYXksCiAgICB4S2V5OiBTdHJpbmcsCiAgICB5S2V5OiBTdHJpbmcsCiAgICBwcmltYXJ5X2NvbDogU3RyaW5nLAogICAgc2Vjb25kYXJ5X2NvbDogU3RyaW5nLAogICAgY3VycmVuY3lfa2V5OiBTdHJpbmcKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmN1cnJlbmN5X2tleSkKICAgIHZhciB2bSA9IHRoaXM7CiAgICB2YXIgbWFwID0gdGhpcy5kYXRhLnJlZHVjZShmdW5jdGlvbiAociwgaSkgewogICAgICByZXR1cm4gKHJbaVt2bS5wcmltYXJ5X2NvbF1dID0gcltpW3ZtLnByaW1hcnlfY29sXV0gfHwgW10pLnB1c2goewogICAgICAgIGRhdGU6IGlbdm0uc2Vjb25kYXJ5X2NvbF0sCiAgICAgICAgc2FsZXM6IGlbdm0ueUtleV0gLy8gaQoKICAgICAgfSksIHI7CiAgICB9LCB7fSk7CiAgICB2YXIgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKG1hcCk7CiAgICB2YXIgc2Vjb25kX2RhdGEgPSBbXTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHsKICAgICAgc2Vjb25kX2RhdGEucHVzaCh7CiAgICAgICAgU3RhdGU6IGVudHJpZXNbaV1bMF0KICAgICAgfSk7CgogICAgICBmb3IgKHZhciBfaiA9IDA7IF9qIDwgZW50cmllc1tpXVsxXS5sZW5ndGg7IF9qKyspIHsKICAgICAgICB2YXIgdGVtcCA9IE9iamVjdC52YWx1ZXMoZW50cmllc1tpXVsxXVtfal0pOwogICAgICAgIHZhciBhID0gdGVtcFswXSwKICAgICAgICAgICAgYiA9IHRlbXBbMV07CiAgICAgICAgc2Vjb25kX2RhdGFbaV1bYV0gPSBiOwogICAgICB9CiAgICB9CgogICAgdmFyIGRhdGEgPSBbXTsKICAgIGRhdGEgPSBzZWNvbmRfZGF0YTsKICAgIHZhciBrZXlfZGF0YV90ZW1wID0gW10sCiAgICAgICAga2V5X2RhdGFfdGVtcF9sZW5ndGggPSBbXTsKCiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZGF0YS5sZW5ndGg7IF9pKyspIHsKICAgICAga2V5X2RhdGFfdGVtcC5wdXNoKGQzLmtleXMoZGF0YVtfaV0pLnNsaWNlKDEpKTsKICAgICAga2V5X2RhdGFfdGVtcF9sZW5ndGgucHVzaChkMy5rZXlzKGRhdGFbX2ldKS5zbGljZSgxKS5sZW5ndGgpOwogICAgfSAvLyBjb25zb2xlLmxvZyhrZXlfZGF0YV90ZW1wKTsKICAgIC8vIGNvbnNvbGUubG9nKGtleV9kYXRhX3RlbXBfbGVuZ3RoKTsKICAgIC8vIGNvbnNvbGUubG9nKE1hdGgubWF4KC4uLmtleV9kYXRhX3RlbXBfbGVuZ3RoKSkKICAgIC8vIGNvbnNvbGUubG9nKGluZGV4T2ZNYXgoa2V5X2RhdGFfdGVtcF9sZW5ndGgpKQoKCiAgICB2YXIga2V5cyA9IGtleV9kYXRhX3RlbXBbaW5kZXhPZk1heChrZXlfZGF0YV90ZW1wX2xlbmd0aCldOwoKICAgIGZ1bmN0aW9uIGluZGV4T2ZNYXgoYXJyKSB7CiAgICAgIGlmIChhcnIubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIC0xOwogICAgICB9CgogICAgICB2YXIgbWF4ID0gYXJyWzBdOwogICAgICB2YXIgbWF4SW5kZXggPSAwOwoKICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoYXJyW2ldID4gbWF4KSB7CiAgICAgICAgICBtYXhJbmRleCA9IGk7CiAgICAgICAgICBtYXggPSBhcnJbaV07CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gbWF4SW5kZXg7CiAgICB9CgogICAgdmFyIGtleV9kYXRhX3RlbXBfMiA9IFtdOwoKICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGtleV9kYXRhX3RlbXAubGVuZ3RoOyBfaTIrKykgewogICAgICBmb3IgKHZhciBfajIgPSAwOyBfajIgPCBrZXlfZGF0YV90ZW1wW19pMl0ubGVuZ3RoOyBfajIrKykgewogICAgICAgIGtleV9kYXRhX3RlbXBfMi5wdXNoKGtleV9kYXRhX3RlbXBbX2kyXVtfajJdKTsKICAgICAgfQogICAgfSAvLyB2YXIga2V5cyA9IGQzLmtleXMoZGF0YVswXSkuc2xpY2UoMSk7CiAgICAvLyBjb25zb2xlLmxvZyhrZXlfZGF0YV90ZW1wKTsKICAgIC8vIGNvbnNvbGUubG9nKGtleV9kYXRhX3RlbXBfMiwgIkhFUlJSRUVFIik7CiAgICAvLyB2YXIgeHl6ID0ga2V5X2RhdGFfdGVtcF8yLmZpbHRlcigodmFsdWUsaW5kZXgpID0+IGtleV9kYXRhX3RlbXBfMi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXgpOwoKCiAgICB2YXIgeHl6ID0ga2V5X2RhdGFfdGVtcF8yLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgewogICAgICBpZiAoYS5pbmRleE9mKGIpIDwgMCkgYS5wdXNoKGIpOwogICAgICByZXR1cm4gYTsKICAgIH0sIFtdKTsgLy8gY29uc29sZS5sb2coeHl6LCAnSEVSRSBGT1IgRElTVElOQ1QnKQogICAgLy8gY29uc29sZS5sb2coZGF0YSk7CiAgICAvLyBjb25zb2xlLmxvZyhrZXlzKTsKICAgIC8vIHZhciBrZXlzID0geHl6OwogICAgLy8gdmFyIGtleXMgPSBbIk9QRU4iLCAiQVJCSVRSQVRJT04iLCAiREVOSUVEIiwgIkRyb3BwZWQiCiAgICAvLyAsICJQQUlEIiwgIlBhaWQgSW4gRnVsbCJdCiAgICAvLyAgIlN0b3BwZWQiLCAiVG8gTGl0aWdhdGUiLCAiVHJhbnNmZXJlZCBLSCIsICJESVNDSEFSR0VEIiwgIlNUT1BQRUQiLCAiTGllbiIsICJTRU5UIFRPIExJVElHQVRJT04iLCAiVHJhbnNmZXJyZWQgdG8gS0ggIiwgIlBhaWQgSW4gRnVsbCIsIAogICAgLy8gIkRvIE5vdCBCaWxsIiwgIlRyYW5zZmVyZWQiLCAiQ09MTEVDVCIsICJEQVRBIEVOVFJZIiwgIkNvbGxlY3QiLCAiV3JpdGUgb2ZmIl07CiAgICAvLyBjb25zb2xlLmxvZyhrZXlzKTsKCiAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBkYXRhLmxlbmd0aDsgX2kzKyspIHsKICAgICAgZm9yICh2YXIgaiA9IDAsIHQgPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikgewogICAgICAgIHQgKz0gZGF0YVtfaTNdW2tleXNbal1dID0gK2RhdGFbX2kzXVtrZXlzW2pdXTsKICAgICAgfQoKICAgICAgZGF0YVtfaTNdLnRvdGFsID0gdDsKICAgIH0KCiAgICB2YXIgaXNTY3JvbGxEaXNwbGF5ZWQgPSBmYWxzZSwKICAgICAgICBudW1CYXJzID0gMjU7CiAgICB2YXIgbWFyZ2luT3ZlcnZpZXcgPSB7CiAgICAgIHRvcDogMzAsCiAgICAgIHJpZ2h0OiAxMCwKICAgICAgYm90dG9tOiAyMCwKICAgICAgbGVmdDogNzAKICAgIH07CiAgICB2YXIgaGVpZ2h0T3ZlcnZpZXcgPSA4MCAtIG1hcmdpbk92ZXJ2aWV3LnRvcCAtIG1hcmdpbk92ZXJ2aWV3LmJvdHRvbTsKCiAgICBpZiAoZW50cmllcy5sZW5ndGggPiAyNSkgewogICAgICBpc1Njcm9sbERpc3BsYXllZCA9IHRydWU7CiAgICB9IC8vIGNvbnNvbGUubG9nKGRhdGEpCgoKICAgIHZhciBzdmcgPSBkMy5zZWxlY3QoIiNTdGFja2VkQmFyQ2hhcnROb25UaW1lIiksCiAgICAgICAgbWFyZ2luID0gewogICAgICB0b3A6IDEwLAogICAgICByaWdodDogMCwKICAgICAgYm90dG9tOiAxMCwKICAgICAgbGVmdDogMzAKICAgIH0sCiAgICAgICAgd2lkdGggPSArc3ZnLmF0dHIoIndpZHRoIikgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCwKICAgICAgICBoZWlnaHQgPSArc3ZnLmF0dHIoImhlaWdodCIpIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20sCiAgICAgICAgZyA9IHN2Zy5hcHBlbmQoImciKS5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKCIgKyBtYXJnaW4ubGVmdCArICIsIiArIG1hcmdpbi50b3AgKyAiKSIpOyAvLyBzZXQgeCBzY2FsZQoKICAgIHZhciB4ID0gZDMuc2NhbGVCYW5kKCkucmFuZ2VSb3VuZChbNTAsIHdpZHRoIC0gLjE1ICogd2lkdGhdKS5wYWRkaW5nSW5uZXIoMC4wNSkuYWxpZ24oMC4xKTsgLy8gc2V0IHkgc2NhbGUKCiAgICB2YXIgeSA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2VSb3VuZChbaGVpZ2h0IC0gMTUwLCAwXSk7IC8vIHNldCB0aGUgY29sb3JzCiAgICAvLyB2YXIgeiA9IGQzLnNjYWxlT3JkaW5hbCgpCiAgICAvLyAgICAgICAgIC5yYW5nZShbIiM5OGFiYzUiLCAiIzhhODlhNiIsICIjN2I2ODg4IiwgIiM2YjQ4NmIiLCAiI2EwNWQ1NiIsICIjZDA3NDNjIiwgIiNmZjhjMDAiXSk7CiAgICAvLyB2YXIgeiA9IGQzLnNjYWxlT3JkaW5hbCgpCiAgICAvLyAgICAgICAgIC5yYW5nZShbIiM1ZDYyYjUiLCAiIzI5YzNiZSIsICIjZjE3MjZlIiwgIiNmYmM1M2YiLCAiIzYyYjU4ZiIsICIjZDA3NDNjIiwgIiNmZjhjMDAiLCIjY2EwMDIwIiwiI2Y0YTU4MiIsIiNkNWQ1ZDUiLCIjOTJjNWRlIiwiIzA1NzFiMCIsIiMwNTE5YjAiXSk7CiAgICAvLyB2YXIgeiA9IGQzLnNjYWxlT3JkaW5hbCgpCiAgICAvLyAgICAgICAgIC5yYW5nZShbIiNGRjk3NTAiLCIjM0ZCQzExIiwgIiM1ZDYyYjUiLCAiIzI5YzNiZSIsICIjZjE3MjZlIiwgIiNmYmM1M2YiLCAiIzYyYjU4ZiIsICIjZDA3NDNjIiwiI2NhMDAyMCIsIiNmNGE1ODIiLCIjOTJjNWRlIiwiIzA1NzFiMCIsICIjZDNmZTE0IiwgIiNmZWM3ZjgiLCAiIzBiN2IzZSIsICIjMGJmMGU5IiwnI0U2NjZCMycsICcjMzM5OTFBJywgJyNDQzk5OTknLCAnI0IzQjMxQScsICcjMDBFNjgwJywKICAgIC8vICAgICAgICAgJyNGRjlBQTInLCAnI0ZGQjdCMicsICcjRkZEQUMxJywgJyNCNUVBRDcnLCAnIzYzZDJhOCcsICIjMjI1YTRiIiwgIiNlNWRmNzMiLCAnIzY2NjZGRicsJyNmZjAwMDAJJywnI2EyNzk4ZicsJyNkN2M2Y2YnLCcjZTg4NzU4JywnI2IxM2ExNScsJyM2ZDM2NTYnLCcjZmZmYTkwJywnI2E0ZmZhYScsJyNhNmNiZmYnLCcjODUwMGY5JywnI2IwNzdiYScsJwkjNzY1Mjg0JywnIzk4NGI2NycsJyM5YzYyNGUnLCcjZmViOGZmJywnIzliZTNiZCcsJyM3NzU5MzQnLCcjMDA4Mzg1JywnIzZhMmNhMScsJyNlNjBlNjgnLCcjZmY2ZDAxJywnI2ZlZTlkMycKICAgIC8vICAgICAgICAgXSk7CgogICAgdmFyIHogPSBkMy5zY2FsZU9yZGluYWwoKS5yYW5nZShbIiNGQkIzMTciLCAiI0ZGOTc1MCIsICIjM0ZCQzExIiwgIiMwMEM3RTYiLCAiI0VBMzM3OSIsICIjMDE2NWZjIiwgIiM0MWZkZmUiLCAiIzI0YTBlZCIsICIjMWFjMWRkIiwgIiM3ZGY5ZmYiLCAiIzNmMDBmZiIsICIjMDhmZjA4IiwgIiNhZWZmNmUiLCAiIzU2ZmNhMiIsICIjNDVjZWEyIiwgIiMwNmMyYWMiLCAiI2ZlNjcwMCIsICIjZmYzNTAzIiwgIiNkOTAxNjYiLCAiI2JlMDNmZCIsICIjYWQwYWZkIiwgIiM2NjAwZmYiLCAiI2QwMWMxZiIsICIjZjExNzJmIiwgIiNmZmY2MDAiLCAiI2ZjZDExNiIsICIjY2ZmZjA0IiwgIiNmZmMzMjQiLCAiI2Y0YzQzMCIsICIjRkU3RDY4IiwgIiM3MTAxOTMiLCAiIzA0OTJDMiIsICIjOTg5N0E5IiwgIiM2MzJBMEQiLCAiIzlBNzk0RSIsICIjMTUxRTNEIiwgIiM1OTc4OEQiLCAiIzFFNDU2RSIsICIjMDE2MDY0IiwgIiM0OEFBQUQiLCAiIzdFN0Q5QyIsICIjMzAzMTUwIiwgIiM2MDlEOUUiLCAiIzI4N0U5RSIsICIjRTRBODM0IiwgIiMwMjg5MTAiLCAiIzM3MzczNyIsICIjNkM2MjZEIiwgIiM1ODRENUIiLCAiIzRENEM1QyJdKTsgLy8gdmFyIHogPSBbIiM1ZDYyYjUiLCAiIzI5YzNiZSIsICIjZjE3MjZlIiwgIiNmYmM1M2YiLCAiIzYyYjU4ZiIsICIjZDA3NDNjIiwiI2NhMDAyMCIsIiNmNGE1ODIiLCIjOTJjNWRlIiwiIzA1NzFiMCIsICIjZDNmZTE0IiwgIiNmZWM3ZjgiLCAiIzBiN2IzZSIsICIjMGJmMGU5IiwnI0U2NjZCMycsICcjMzM5OTFBJywgJyNDQzk5OTknLCAnI0IzQjMxQScsICcjMDBFNjgwJywKICAgIC8vICcjRkY5QUEyJywgJyNGRkI3QjInLCAnI0ZGREFDMScsICcjQjVFQUQ3JywgJyM2M2QyYTgnLCAiIzIyNWE0YiIsICIjZTVkZjczIiwgJyM2NjY2RkYnLCcJI2ZmMDAwMAknLCcjYTI3OThmJywnI2Q3YzZjZicsJyNlODg3NTgnLCcjYjEzYTE1JywnIzZkMzY1NicsJyNmZmZhOTAnLCcjYTRmZmFhJywnI2E2Y2JmZicsJyM4NTAwZjknLCcjYjA3N2JhJywnCSM3NjUyODQnLCcjOTg0YjY3JywnIzljNjI0ZScsJyNmZWI4ZmYnLCcjOWJlM2JkJywnIzc3NTkzNCcsJyMwMDgzODUnLCcjNmEyY2ExJywnI2U2MGU2OCcsJyNmZjZkMDEnLCcjZmVlOWQzJwogICAgLy8gXTsKICAgIC8vIHZhciB6ID0gIGQzLnNjYWxlT3JkaW5hbCgpCiAgICAvLyAgICAuZG9tYWluKGRhdGEubWFwKGQgPT4gZFsiT3V0Y29tZSJdKSkKICAgIC8vICAgIC5yYW5nZShkMy5xdWFudGl6ZSh0ID0+IGQzLmludGVycG9sYXRlU3BlY3RyYWwgICh0ICogMC44ICsgMC4xKSwgZGF0YS5sZW5ndGgpLnJldmVyc2UoKSk7CgogICAgZGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBiLnRvdGFsIC0gYS50b3RhbDsKICAgIH0pOwoKICAgIGlmIChpc1Njcm9sbERpc3BsYXllZCkgewogICAgICB4LmRvbWFpbihkYXRhLnNsaWNlKDAsIG51bUJhcnMpLm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBkLlN0YXRlOwogICAgICB9KSk7CiAgICB9IGVsc2UgewogICAgICB4LmRvbWFpbihkYXRhLm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBkLlN0YXRlOwogICAgICB9KSk7CiAgICB9CgogICAgeS5kb21haW4oWzAsIGQzLm1heChkYXRhLCBmdW5jdGlvbiAoZCkgewogICAgICByZXR1cm4gZC50b3RhbDsKICAgIH0pXSkubmljZSgpOwogICAgei5kb21haW4oa2V5cyk7CgogICAgaWYgKGlzU2Nyb2xsRGlzcGxheWVkKSB7CiAgICAgIHZhciBzdGFja3MgPSBnLmFwcGVuZCgiZyIpLmF0dHIoImNsYXNzIiwgInN0YWNrcyIpLnNlbGVjdEFsbCgiZyIpLmRhdGEoZDMuc3RhY2soKS5rZXlzKGtleXMpKGRhdGEuc2xpY2UoMCwgbnVtQmFycykpKS5lbnRlcigpLmFwcGVuZCgiZyIpLmF0dHIoImNsYXNzIiwgIi5iYXItcG9zaXRpdmUtc3RhY2siKS5hdHRyKCJmaWxsIiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4geihkLmtleSk7CiAgICAgIH0pLnNlbGVjdEFsbCgicmVjdCIpLmRhdGEoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZDsKICAgICAgfSkuZW50ZXIoKS5hcHBlbmQoInJlY3QiKS5hdHRyKCJjbGFzcyIsICIuYmFyLXBvc2l0aXZlLXJlY3QiKS5hdHRyKCJ4IiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4geChkLmRhdGEuU3RhdGUpOwogICAgICB9KS5hdHRyKCJoZWlnaHQiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBpc05hTih5KGRbMF0pIC0geShkWzFdKSkgPyAwIDogeShkWzBdKSAtIHkoZFsxXSk7CiAgICAgIH0pLmF0dHIoIndpZHRoIiwgeC5iYW5kd2lkdGgoKSkuYXR0cigieSIsIGZ1bmN0aW9uIChkLCBpKSB7CiAgICAgICAgcmV0dXJuIGkgKiAxMDA7CiAgICAgIH0pIC8vIC5hdHRyKCJ5IiwgZnVuY3Rpb24oZCkge3JldHVybiB5KGRbMV0pOyB9KQogICAgICAub24oIm1vdXNlb3ZlciIsIGZ1bmN0aW9uICgpIHsKICAgICAgICB0b29sdGlwLnN0eWxlKCJkaXNwbGF5IiwgbnVsbCk7CiAgICAgIH0pLm9uKCJtb3VzZW91dCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICB0b29sdGlwLnN0eWxlKCJkaXNwbGF5IiwgIm5vbmUiKTsKICAgICAgfSkub24oIm1vdXNlbW92ZSIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgdmFyIHhQb3NpdGlvbiA9IGQzLm1vdXNlKHRoaXMpWzBdIC0gNTsKICAgICAgICB2YXIgeVBvc2l0aW9uID0gZDMubW91c2UodGhpcylbMV0gLSA1OwogICAgICAgIHZhciBjdXJyZW50X3ZhbCA9IGRbMV0gLSBkWzBdOwogICAgICAgIHZhciBkYXRhX2xlbmd0aCA9IE9iamVjdC52YWx1ZXMoZC5kYXRhKS5sZW5ndGgsCiAgICAgICAgICAgIGdyb3VwbmFtZTsKCiAgICAgICAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgZGF0YV9sZW5ndGg7IF9pNCsrKSB7CiAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhkLmRhdGEpW19pNF0gPT09IGN1cnJlbnRfdmFsKSB7CiAgICAgICAgICAgIGdyb3VwbmFtZSA9IE9iamVjdC5rZXlzKGQuZGF0YSlbX2k0XTsgLy8gICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRvb2x0aXAuc3R5bGUoImxlZnQiLCBkMy5ldmVudC5wYWdlWCAtIDQwMCArICJweCIpLnN0eWxlKCJ0b3AiLCBkMy5ldmVudC5wYWdlWSAtIDI3MCArICJweCIpLnN0eWxlKCJkaXNwbGF5IiwgImlubGluZS1ibG9jayIpLmh0bWwoKE51bWJlci5pc0ludGVnZXIoZFsxXSAtIGRbMF0pID8gdm0uY3VycmVuY3lfa2V5ICsgKGRbMV0gLSBkWzBdKSA6IHZtLmN1cnJlbmN5X2tleSArIChkWzFdIC0gZFswXSkudG9GaXhlZCgyKSkgKyAiPGJyPiIgKyBkLmRhdGEuU3RhdGUgKyAiPGJyPiA8ZW0+IDxiPiIgKyBncm91cG5hbWUgKyAiPGI+PC9lbT4iKTsKICAgICAgfSk7CiAgICAgIHN0YWNrcy50cmFuc2l0aW9uKCkuZGVsYXkoZnVuY3Rpb24gKGQsIGkpIHsKICAgICAgICByZXR1cm4gaSAqIDE1MDsKICAgICAgfSkuZHVyYXRpb24oODAwKS5hdHRyKCJ5IiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4geShkWzFdKTsKICAgICAgfSk7CiAgICAgIHZhciB4T3ZlcnZpZXcgPSBkMy5zY2FsZUJhbmQoKS5kb21haW4oZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5sYWJlbDsKICAgICAgfSkpLnJhbmdlKFswLCB3aWR0aF0sIC4yKTsKICAgICAgdmFyIHlPdmVydmlldyA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoW2hlaWdodE92ZXJ2aWV3LCAwXSk7CiAgICAgIHlPdmVydmlldy5kb21haW4oeS5kb21haW4oKSk7CiAgICAgIHZhciBkaXNwbGF5ZWQgPSBkMy5zY2FsZVF1YW50aXplKCkuZG9tYWluKFswLCB3aWR0aF0pLnJhbmdlKGQzLnJhbmdlKGRhdGEubGVuZ3RoKSk7CiAgICAgIHN2Zy5hcHBlbmQoImciKS5hcHBlbmQoInJlY3QiKS5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKDU1LCAiICsgKGhlaWdodCAtIDEzNCkgKyAiKSIpLmF0dHIoImNsYXNzIiwgIm1vdmVyIikuYXR0cigieCIsIDApLmF0dHIoInkiLCAwKS5hdHRyKCJyeCIsIDUpLmF0dHIoInJ5IiwgMTApLmF0dHIoImhlaWdodCIsIDEwKS5hdHRyKCJ3aWR0aCIsIE1hdGgucm91bmQocGFyc2VGbG9hdChudW1CYXJzICogd2lkdGgpIC8gZGF0YS5sZW5ndGgpKS5hdHRyKCJwb2ludGVyLWV2ZW50cyIsICJhbGwiKS5hdHRyKCJjdXJzb3IiLCAiZXctcmVzaXplIikuY2FsbChkMy5kcmFnKCkub24oImRyYWciLCBkaXNwbGF5KSk7CiAgICB9IGVsc2UgewogICAgICB2YXIgc3RhY2tzID0gZy5hcHBlbmQoImciKS5hdHRyKCJjbGFzcyIsICJzdGFja3MiKS5zZWxlY3RBbGwoImciKS5kYXRhKGQzLnN0YWNrKCkua2V5cyhrZXlzKShkYXRhKSkuZW50ZXIoKS5hcHBlbmQoImciKS5hdHRyKCJjbGFzcyIsICIuYmFyLXBvc2l0aXZlLXN0YWNrIikuYXR0cigiZmlsbCIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIHooZC5rZXkpOwogICAgICB9KS5zZWxlY3RBbGwoInJlY3QiKS5kYXRhKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGQ7CiAgICAgIH0pLmVudGVyKCkuYXBwZW5kKCJyZWN0IikuYXR0cigieCIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIHgoZC5kYXRhLlN0YXRlKTsKICAgICAgfSkgLy8gLmF0dHIoInkiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHkoZFsxXSk7IH0pCiAgICAgIC5hdHRyKCJ5IiwgZnVuY3Rpb24gKGQsIGkpIHsKICAgICAgICByZXR1cm4gaSAqIDEwMDsKICAgICAgfSkuYXR0cigiaGVpZ2h0IiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gaXNOYU4oeShkWzBdKSAtIHkoZFsxXSkpID8gMCA6IHkoZFswXSkgLSB5KGRbMV0pOwogICAgICB9KS5hdHRyKCJ3aWR0aCIsIHguYmFuZHdpZHRoKCkpLm9uKCJtb3VzZW92ZXIiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdG9vbHRpcC5zdHlsZSgiZGlzcGxheSIsIG51bGwpOwogICAgICB9KS5vbigibW91c2VvdXQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdG9vbHRpcC5zdHlsZSgiZGlzcGxheSIsICJub25lIik7CiAgICAgIH0pLm9uKCJtb3VzZW1vdmUiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIC8vIGNvbnNvbGUubG9nKGQpOwogICAgICAgIHZhciB4UG9zaXRpb24gPSBkMy5tb3VzZSh0aGlzKVswXSAtIDU7CiAgICAgICAgdmFyIHlQb3NpdGlvbiA9IGQzLm1vdXNlKHRoaXMpWzFdIC0gNTsKICAgICAgICB2YXIgY3VycmVudF92YWwgPSBkWzFdIC0gZFswXTsgLy8gY29uc29sZS5sb2coY3VycmVudF92YWwpOwoKICAgICAgICB2YXIgZGF0YV9sZW5ndGggPSBPYmplY3QudmFsdWVzKGQuZGF0YSkubGVuZ3RoLAogICAgICAgICAgICBncm91cG5hbWU7CgogICAgICAgIGZvciAodmFyIF9pNSA9IDA7IF9pNSA8IGRhdGFfbGVuZ3RoOyBfaTUrKykgewogICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoZC5kYXRhKVtfaTVdID09PSBjdXJyZW50X3ZhbCkgewogICAgICAgICAgICBncm91cG5hbWUgPSBPYmplY3Qua2V5cyhkLmRhdGEpW19pNV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdG9vbHRpcC5zdHlsZSgibGVmdCIsIGQzLmV2ZW50LnBhZ2VYIC0gNDAwICsgInB4Iikuc3R5bGUoInRvcCIsIGQzLmV2ZW50LnBhZ2VZIC0gMjcwICsgInB4Iikuc3R5bGUoImRpc3BsYXkiLCAiaW5saW5lLWJsb2NrIikuaHRtbCgoTnVtYmVyLmlzSW50ZWdlcihkWzFdIC0gZFswXSkgPyB2bS5jdXJyZW5jeV9rZXkgKyAoZFsxXSAtIGRbMF0pIDogdm0uY3VycmVuY3lfa2V5ICsgKGRbMV0gLSBkWzBdKS50b0ZpeGVkKDIpKSArICI8YnI+IiArIGQuZGF0YS5TdGF0ZSArICI8YnI+IDxlbT4gPGI+IiArIGdyb3VwbmFtZSArICI8Yj48L2VtPiIpOwogICAgICB9KTsKICAgICAgc3RhY2tzLnRyYW5zaXRpb24oKS5kZWxheShmdW5jdGlvbiAoZCwgaSkgewogICAgICAgIHJldHVybiBpICogMTUwOwogICAgICB9KS5kdXJhdGlvbig4MDApLmF0dHIoInkiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIC8vIGNvbnNvbGUubG9nKGRbMV0sIHkoZFsxXSkpOyAKICAgICAgICBpZiAoaXNOYU4oZFsxXSkpIHsKICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0gZWxzZSBpZiAoaXNOYU4oeShkWzFdKSkpIHsKICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4geShkWzFdKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoID4gMTQpIHsKICAgICAgZy5hcHBlbmQoImciKS5hdHRyKCJjbGFzcyIsICJheGlzIikuYXR0cigidHJhbnNmb3JtIiwgInRyYW5zbGF0ZSgwLCIgKyAoaGVpZ2h0IC0gMTQwKSArICIpIikuY2FsbChkMy5heGlzQm90dG9tKHgpKS5zZWxlY3RBbGwoInRleHQiKS5hdHRyKCJ5IiwgMCkuYXR0cigieCIsIC0xMCkuYXR0cigiZHkiLCAiLjM1ZW0iKS5hdHRyKCJ0cmFuc2Zvcm0iLCAicm90YXRlKC03MCkiKS5zdHlsZSgidGV4dC1hbmNob3IiLCAiZW5kIik7CiAgICB9IGVsc2UgewogICAgICBnLmFwcGVuZCgiZyIpLmF0dHIoImNsYXNzIiwgImF4aXMiKS5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKDAsIiArIChoZWlnaHQgLSAxNDApICsgIikiKS5jYWxsKGQzLmF4aXNCb3R0b20oeCkpOwogICAgICBkMy5zZWxlY3RBbGwoIi50aWNrIHRleHQiKS5jYWxsKHdyYXAsIHguYmFuZHdpZHRoKCkpOwoKICAgICAgZnVuY3Rpb24gd3JhcCh0ZXh0LCB3aWR0aCkgewogICAgICAgIHRleHQuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgdGV4dCA9IGQzLnNlbGVjdCh0aGlzKSwKICAgICAgICAgICAgICB3b3JkcyA9IHRleHQudGV4dCgpLnNwbGl0KC9ccysvKS5yZXZlcnNlKCksCiAgICAgICAgICAgICAgd29yZCwKICAgICAgICAgICAgICBsaW5lID0gW10sCiAgICAgICAgICAgICAgbGluZU51bWJlciA9IDAsCiAgICAgICAgICAgICAgbGluZUhlaWdodCA9IDEuMSwKICAgICAgICAgICAgICAvLyBlbXMKICAgICAgICAgIHkgPSB0ZXh0LmF0dHIoInkiKSwKICAgICAgICAgICAgICBkeSA9IHBhcnNlRmxvYXQodGV4dC5hdHRyKCJkeSIpKSwKICAgICAgICAgICAgICB0c3BhbiA9IHRleHQudGV4dChudWxsKS5hcHBlbmQoInRzcGFuIikuYXR0cigieCIsIDApLmF0dHIoInkiLCB5KS5hdHRyKCJkeSIsIGR5ICsgImVtIik7CgogICAgICAgICAgd2hpbGUgKHdvcmQgPSB3b3Jkcy5wb3AoKSkgewogICAgICAgICAgICBsaW5lLnB1c2god29yZCk7CiAgICAgICAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKCIgIikpOwoKICAgICAgICAgICAgaWYgKHRzcGFuLm5vZGUoKS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKSA+IHdpZHRoKSB7CiAgICAgICAgICAgICAgbGluZS5wb3AoKTsKICAgICAgICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbigiICIpKTsKICAgICAgICAgICAgICBsaW5lID0gW3dvcmRdOwogICAgICAgICAgICAgIHRzcGFuID0gdGV4dC5hcHBlbmQoInRzcGFuIikuYXR0cigieCIsIDApLmF0dHIoInkiLCB5KS5hdHRyKCJkeSIsICsrbGluZU51bWJlciAqIGxpbmVIZWlnaHQgKyBkeSArICJlbSIpLnRleHQod29yZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIGcuYXBwZW5kKCJnIikuYXR0cigiY2xhc3MiLCAiYXhpcyIpLmF0dHIoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoMzAsMCkiKS5jYWxsKGQzLmF4aXNMZWZ0KHkpLnRpY2tzKG51bGwsICJzIikpLmFwcGVuZCgidGV4dCIpLmF0dHIoIngiLCAyKS5hdHRyKCJ5IiwgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4geSh5LnRpY2tzKCkucG9wKCkpICsgMC41OwogICAgfSkuYXR0cigiZHkiLCAiMC4zMmVtIikuYXR0cigiZmlsbCIsICIjMDAwIikuYXR0cigiZm9udC13ZWlnaHQiLCAiYm9sZCIpLmF0dHIoInRleHQtYW5jaG9yIiwgInN0YXJ0Iik7CgogICAgaWYgKGtleXMubGVuZ3RoID4gMTApIHsKICAgICAgdmFyIGxlZ2VuZF9kaXYgPSBkMy5zZWxlY3QoIiNsZWdlbmRfZGl2IikuYXBwZW5kKCJzdmciKS5zdHlsZSgid2lkdGgiLCAiMjAwJSIpLnN0eWxlKCJoZWlnaHQiLCAiMjUwJSIpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGxlZ2VuZF9kaXYgPSBkMy5zZWxlY3QoIiNsZWdlbmRfZGl2IikuYXBwZW5kKCJzdmciKS5zdHlsZSgid2lkdGgiLCAiMjAwJSIpLnN0eWxlKCJoZWlnaHQiLCAiMTAwJSIpOwogICAgfQoKICAgIHZhciBsZWdlbmRfZyA9IGxlZ2VuZF9kaXYuYXBwZW5kKCJnIikuYXR0cigidHJhbnNmb3JtIiwgInRyYW5zbGF0ZSgwLDApIik7CiAgICB2YXIgbGVnZW5kID0gbGVnZW5kX2cuYXBwZW5kKCJnIikuYXR0cigiZm9udC1mYW1pbHkiLCAic2Fucy1zZXJpZiIpLmF0dHIoImZvbnQtc2l6ZSIsIDEwKS5hdHRyKCJ0ZXh0LWFuY2hvciIsICJlbmQiKS5zZWxlY3RBbGwoImciKSAvLyAuZGF0YShrZXlzLnNsaWNlKCkucmV2ZXJzZSgpKQogICAgLmRhdGEoa2V5cy5zbGljZSgpKS5lbnRlcigpLmFwcGVuZCgiZyIpIC8vIC5hdHRyKCJ0cmFuc2Zvcm0iLCBmdW5jdGlvbihkLCBpKSB7IHJldHVybiAidHJhbnNsYXRlKDAsMCkiOyB9KTsKICAgIC5hdHRyKCJ0cmFuc2Zvcm0iLCBmdW5jdGlvbiAoZCwgaSkgewogICAgICByZXR1cm4gInRyYW5zbGF0ZSgwLCIgKyBpICogMjAgKyAiKSI7CiAgICB9KTsKICAgIGxlZ2VuZC5hcHBlbmQoInJlY3QiKS5hdHRyKCJ4IiwgMCkuYXR0cigid2lkdGgiLCAxOSkuYXR0cigiaGVpZ2h0IiwgMTkpLmF0dHIoImZpbGwiLCB6KTsKICAgIGxlZ2VuZC5hcHBlbmQoInRleHQiKS5hdHRyKCJ4IiwgMjUpLmF0dHIoInkiLCA5LjUpLmF0dHIoImNsYXNzIiwgImxlZ2VuZF90ZXh0IikuYXR0cigiZHkiLCAiMC4zMmVtIikudGV4dChmdW5jdGlvbiAoZCkgewogICAgICAvLyByZXR1cm4gZDsKICAgICAgaWYgKGQubGVuZ3RoID4gMjUpIHsKICAgICAgICByZXR1cm4gZC5zdWJzdHJpbmcoMCwgMjUpLnRvVXBwZXJDYXNlKCkgKyAnLi4uJzsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZC50b1VwcGVyQ2FzZSgpOwogICAgICB9CiAgICB9KS5zdHlsZSgidGV4dC1hbmNob3IiLCAic3RhcnQiKTsKICAgIGQzLnNlbGVjdEFsbCgnLmxlZ2VuZF90ZXh0JykuY2FsbChzaG93X2xvbmdfbGFiZWxzKTsKCiAgICBmdW5jdGlvbiBzaG93X2xvbmdfbGFiZWxzKHNlbGVjdGlvbikgewogICAgICBzZWxlY3Rpb24ub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZCwgaSkgewogICAgICAgIGlmIChkLmxlbmd0aCA+IDI1KSB7CiAgICAgICAgICB0b29sdGlwLnN0eWxlKCJsZWZ0IiwgZDMuZXZlbnQucGFnZVggLSA0MDAgKyAicHgiKS5zdHlsZSgidG9wIiwgZDMuZXZlbnQucGFnZVkgLSAyOTAgKyAicHgiKS5zdHlsZSgiZGlzcGxheSIsICJpbmxpbmUtYmxvY2siKS5odG1sKGQudG9VcHBlckNhc2UoKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgc2VsZWN0aW9uLm9uKCJtb3VzZW91dCIsIGZ1bmN0aW9uIChkLCBpKSB7CiAgICAgICAgLy8gZDMuc2VsZWN0QWxsKCIudG9vbFRpcCIpLnJlbW92ZSgpOwogICAgICAgIHRvb2x0aXAuc3R5bGUoImRpc3BsYXkiLCAibm9uZSIpOyAvLyBoaWRlIHRvb2x0aXAgZm9yIHRoYXQgZWxlbWVudAogICAgICB9KTsKICAgICAgc2VsZWN0aW9uLm9uKCJtb3VzZW1vdmUiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHRvb2x0aXAuc3R5bGUoInRvcCIsIGQzLmV2ZW50LmxheWVyWSArIDEwICsgInB4Iikuc3R5bGUoImxlZnQiLCBkMy5ldmVudC5sYXllclggKyA0MTAgKyAicHgiKTsKICAgICAgfSk7CiAgICB9IC8vIFByZXAgdGhlIHRvb2x0aXAgYml0cywgaW5pdGlhbCBkaXNwbGF5IGlzIGhpZGRlbgoKCiAgICB2YXIgdG9vbHRpcCA9IGQzLnNlbGVjdCgiI3N0YWNrZWRiYXJub250aW1lIikuYXBwZW5kKCJkaXYiKS5hdHRyKCJjbGFzcyIsICJ0b29sVGlwIik7IC8vIGQzLnNlbGVjdEFsbCgiLnRpY2sgdGV4dCIpCiAgICAvLyAgIC5vbigibW91c2VvdmVyIiwgZnVuY3Rpb24oKSB7ICB9KQogICAgLy8gICAgIC5vbigibW91c2VvdXQiLCBmdW5jdGlvbigpIHsgIH0pCiAgICAvLyAgICAgLm9uKCJtb3VzZW1vdmUiLCBmdW5jdGlvbihkKSB7IGNvbnNvbGUubG9nKGQpOyB9KTsKCiAgICB2YXIgdGV4dF93cmFwID0gZnVuY3Rpb24gdGV4dF93cmFwKCkgewogICAgICB2YXIgc2VsZiA9IGQzLnNlbGVjdCh0aGlzKSwKICAgICAgICAgIHRleHRMZW5ndGggPSBzZWxmLm5vZGUoKS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKSwKICAgICAgICAgIHRleHQgPSBzZWxmLnRleHQoKTsKCiAgICAgIHdoaWxlICh0ZXh0TGVuZ3RoID4gNTAgJiYgdGV4dC5sZW5ndGggPiAwKSB7CiAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgLTEpOwogICAgICAgIHNlbGYudGV4dCh0ZXh0ICsgJy4uLicpOwogICAgICAgIHRleHRMZW5ndGggPSBzZWxmLm5vZGUoKS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKTsKICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiBkaXNwbGF5KCkgewogICAgICAvLyBkZWJ1Z2dlcjsKICAgICAgdmFyIHh5ID0gcGFyc2VJbnQoZDMuc2VsZWN0KHRoaXMpLmF0dHIoIngiKSksCiAgICAgICAgICBueCA9IHh5ICsgZDMuZXZlbnQuZHgsCiAgICAgICAgICB3ID0gcGFyc2VJbnQoZDMuc2VsZWN0KHRoaXMpLmF0dHIoIndpZHRoIikpLAogICAgICAgICAgZiwKICAgICAgICAgIG5mLAogICAgICAgICAgbmV3X2RhdGEsCiAgICAgICAgICByZWN0czsKICAgICAgaWYgKG54IDwgMCB8fCBueCArIHcgPiB3aWR0aCAqIDAuOSkgcmV0dXJuOwogICAgICBkMy5zZWxlY3QodGhpcykuYXR0cigieCIsIG54KTsKICAgICAgZiA9IGRpc3BsYXllZCh4eSk7CiAgICAgIG5mID0gZGlzcGxheWVkKG54KTsKICAgICAgaWYgKGYgPT09IG5mKSByZXR1cm47CiAgICAgIG5ld19kYXRhID0gZGF0YS5zbGljZShuZiwgbmYgKyBudW1CYXJzKTsKICAgICAgeC5kb21haW4obmV3X2RhdGEubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGQuU3RhdGU7CiAgICAgIH0pKTsKCiAgICAgIGlmIChudW1CYXJzID4gOCkgewogICAgICAgIHN2Zy5zZWxlY3QoIi5heGlzIikuY2FsbChkMy5heGlzQm90dG9tKHgpKS5zZWxlY3RBbGwoInRleHQiKS5hdHRyKCJ5IiwgMCkuYXR0cigieCIsIC0xMCkuYXR0cigiZHkiLCAiLjM1ZW0iKS5hdHRyKCJ0cmFuc2Zvcm0iLCAicm90YXRlKC03MCkiKS5zdHlsZSgidGV4dC1hbmNob3IiLCAiZW5kIik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3ZnLnNlbGVjdCgiLmF4aXMiKS5jYWxsKGQzLmF4aXNCb3R0b20oeCkpOwogICAgICAgIGQzLnNlbGVjdEFsbCgiLnRpY2sgdGV4dCIpLmNhbGwod3JhcCwgeC5iYW5kd2lkdGgoKSk7CgogICAgICAgIGZ1bmN0aW9uIHdyYXAodGV4dCwgd2lkdGgpIHsKICAgICAgICAgIHRleHQuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB0ZXh0ID0gZDMuc2VsZWN0KHRoaXMpLAogICAgICAgICAgICAgICAgd29yZHMgPSB0ZXh0LnRleHQoKS5zcGxpdCgvXHMrLykucmV2ZXJzZSgpLAogICAgICAgICAgICAgICAgd29yZCwKICAgICAgICAgICAgICAgIGxpbmUgPSBbXSwKICAgICAgICAgICAgICAgIGxpbmVOdW1iZXIgPSAwLAogICAgICAgICAgICAgICAgbGluZUhlaWdodCA9IDEuMSwKICAgICAgICAgICAgICAgIC8vIGVtcwogICAgICAgICAgICB5ID0gdGV4dC5hdHRyKCJ5IiksCiAgICAgICAgICAgICAgICBkeSA9IHBhcnNlRmxvYXQodGV4dC5hdHRyKCJkeSIpKSwKICAgICAgICAgICAgICAgIHRzcGFuID0gdGV4dC50ZXh0KG51bGwpLmFwcGVuZCgidHNwYW4iKS5hdHRyKCJ4IiwgMCkuYXR0cigieSIsIHkpLmF0dHIoImR5IiwgZHkgKyAiZW0iKTsKCiAgICAgICAgICAgIHdoaWxlICh3b3JkID0gd29yZHMucG9wKCkpIHsKICAgICAgICAgICAgICBsaW5lLnB1c2god29yZCk7CiAgICAgICAgICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oIiAiKSk7CgogICAgICAgICAgICAgIGlmICh0c3Bhbi5ub2RlKCkuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgPiB3aWR0aCkgewogICAgICAgICAgICAgICAgbGluZS5wb3AoKTsKICAgICAgICAgICAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKCIgIikpOwogICAgICAgICAgICAgICAgbGluZSA9IFt3b3JkXTsKICAgICAgICAgICAgICAgIHRzcGFuID0gdGV4dC5hcHBlbmQoInRzcGFuIikuYXR0cigieCIsIDApLmF0dHIoInkiLCB5KS5hdHRyKCJkeSIsICsrbGluZU51bWJlciAqIGxpbmVIZWlnaHQgKyBkeSArICJlbSIpLnRleHQod29yZCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGQzLnNlbGVjdEFsbCgiLmJhci1wb3NpdGl2ZS1zdGFjayIpLnJlbW92ZSgpOwogICAgICBkMy5zZWxlY3RBbGwoIi5zdGFja3MiKS5yZW1vdmUoKTsKICAgICAgcmVjdHMgPSBzdmcuc2VsZWN0QWxsKCIuYmFyLXBvc2l0aXZlLXN0YWNrIikuZGF0YShuZXdfZGF0YSwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5sYWJlbDsKICAgICAgfSk7CiAgICAgIHJlY3RzLmF0dHIoIngiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiB4KGQuZGF0YS5TdGF0ZSk7CiAgICAgIH0pOyAvLyByZWN0cwoKICAgICAgZy5hcHBlbmQoImciKS5hdHRyKCJjbGFzcyIsICJzdGFja3MiKS5zZWxlY3RBbGwoImciKS5kYXRhKGQzLnN0YWNrKCkua2V5cyhrZXlzKShuZXdfZGF0YSkpLmVudGVyKCkuYXBwZW5kKCJnIikuYXR0cigiY2xhc3MiLCAiLmJhci1wb3NpdGl2ZS1zdGFjayIpLmF0dHIoImZpbGwiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiB6KGQua2V5KTsKICAgICAgfSkuc2VsZWN0QWxsKCJyZWN0IikuZGF0YShmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBkOwogICAgICB9KS5lbnRlcigpLmFwcGVuZCgicmVjdCIpLmF0dHIoIngiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiB4KGQuZGF0YS5TdGF0ZSk7CiAgICAgIH0pLmF0dHIoInkiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiB5KGRbMV0pOwogICAgICB9KSAvLyAuYXR0cigiaGVpZ2h0IiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geShkWzBdKSAtIHkoZFsxXSk7IH0pCiAgICAgIC5hdHRyKCJoZWlnaHQiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBpc05hTih5KGRbMF0pIC0geShkWzFdKSkgPyAwIDogeShkWzBdKSAtIHkoZFsxXSk7CiAgICAgIH0pLmF0dHIoIndpZHRoIiwgeC5iYW5kd2lkdGgoKSkub24oIm1vdXNlb3ZlciIsIGZ1bmN0aW9uICgpIHsKICAgICAgICB0b29sdGlwLnN0eWxlKCJkaXNwbGF5IiwgbnVsbCk7CiAgICAgIH0pLm9uKCJtb3VzZW91dCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICB0b29sdGlwLnN0eWxlKCJkaXNwbGF5IiwgIm5vbmUiKTsKICAgICAgfSkub24oIm1vdXNlbW92ZSIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2coZCk7CiAgICAgICAgdmFyIHhQb3NpdGlvbiA9IGQzLm1vdXNlKHRoaXMpWzBdIC0gNTsKICAgICAgICB2YXIgeVBvc2l0aW9uID0gZDMubW91c2UodGhpcylbMV0gLSA1OwogICAgICAgIHZhciBjdXJyZW50X3ZhbCA9IGRbMV0gLSBkWzBdOwogICAgICAgIHZhciBkYXRhX2xlbmd0aCA9IE9iamVjdC52YWx1ZXMoZC5kYXRhKS5sZW5ndGgsCiAgICAgICAgICAgIGdyb3VwbmFtZTsKCiAgICAgICAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgZGF0YV9sZW5ndGg7IF9pNisrKSB7CiAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhkLmRhdGEpW19pNl0gPT09IGN1cnJlbnRfdmFsKSB7CiAgICAgICAgICAgIGdyb3VwbmFtZSA9IE9iamVjdC5rZXlzKGQuZGF0YSlbX2k2XTsgLy8gICBicmVhazsgICAKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRvb2x0aXAuc3R5bGUoImxlZnQiLCBkMy5ldmVudC5wYWdlWCAtIDQwMCArICJweCIpLnN0eWxlKCJ0b3AiLCBkMy5ldmVudC5wYWdlWSAtIDI3MCArICJweCIpLnN0eWxlKCJkaXNwbGF5IiwgImlubGluZS1ibG9jayIpLmh0bWwoKE51bWJlci5pc0ludGVnZXIoZFsxXSAtIGRbMF0pID8gdm0uY3VycmVuY3lfa2V5ICsgKGRbMV0gLSBkWzBdKSA6IHZtLmN1cnJlbmN5X2tleSArIChkWzFdIC0gZFswXSkudG9GaXhlZCgyKSkgKyAiPGJyPiIgKyBkLmRhdGEuU3RhdGUgKyAiPGJyPiA8ZW0+IDxiPiIgKyBncm91cG5hbWUgKyAiPGI+PC9lbT4iKTsKICAgICAgfSk7CiAgICAgIHJlY3RzLmV4aXQoKS5yZW1vdmUoKTsKICAgIH0KCiAgICA7CiAgfQp9Ow=="},null]}