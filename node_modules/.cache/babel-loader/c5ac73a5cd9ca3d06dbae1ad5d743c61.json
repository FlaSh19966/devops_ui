{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue","mtime":1645594423479},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.filter";
import "core-js/modules/es.array.find-index";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.array.includes";
import "core-js/modules/es.array.map";
import "core-js/modules/es.array.slice";
import "core-js/modules/es.array.some";
import "core-js/modules/es.array.splice";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.set";
import "core-js/modules/es.string.includes";
import "core-js/modules/es.string.iterator";
import "core-js/modules/es.string.replace";
import "core-js/modules/web.dom-collections.for-each";
import "core-js/modules/web.dom-collections.iterator";
import _defineProperty from "/home/vimalesh/CENSE/chatbot-portal/node_modules/@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "/home/vimalesh/CENSE/chatbot-portal/node_modules/@babel/runtime/helpers/esm/toConsumableArray";
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// import { Tree, TreeNode } from "vue-tree-list";
import { VueTreeList, Tree, TreeNode } from "../../../../../public/js/vue-tree-list.umd.min.js";
import axios from "axios";
import api_calls from "@/portal/api_calls";
import Swal from "sweetalert2";
import { VueEditor } from "vue2-editor";
import Multiselect from "vue-multiselect";
import ResponseBot from "../Data Inputs/ResponseBot";
import draggable from "vuedraggable";
export default {
  components: {
    VueTreeList: VueTreeList,
    VueEditor: VueEditor,
    Multiselect: Multiselect,
    ResponseBot: ResponseBot,
    draggable: draggable
  },
  data: function data() {
    return {
      updated_node_list: "",
      spinnerOn: false,
      assistance_response_id: 0,
      assistance_response__val_index: 0,
      manage_handlers_ind: 0,
      manage_handlers_assistance_response_id: 0,
      manage_handlers_assistance_response__val_index: 0,
      slot_variable: [],
      reg_url: /https:\/\/[(www\.)?a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/i,
      reg_image: /(https:\/\/)([^\s(["<,>/]*)(\/)[^\s[",><]*(.png|.jpg)(\?[^\s[",><]*)?/,
      newTree: {},
      nodes_list: [],
      data: new Tree([]),
      load_bot_preview: false,
      drag_slots: false,
      // test_response_tree: [
      //   {
      //     id: 1623669014307,
      //     is_leaf: false,
      //     editNodeDisabled: true,
      //     name: "Hello",
      //     next_step: {
      //       behavior: "wait_for_reply",
      //       node_id: null,
      //       selector: "wait_for_user_input",
      //     },
      //     pid: 0,
      //     responses: [
      //       {
      //         condition: false,
      //         id: 0,
      //         recognizes: null,
      //         type: "text",
      //         values: ["Heyya"],
      //         variation: "random",
      //       },
      //       {
      //         condition: false,
      //         id: 1,
      //         recognizes: null,
      //         type: "text",
      //         values: ["Heyya2"],
      //         variation: "random",
      //       },
      //     ],
      //     slot_setting: false,
      //     slots: [],
      //     triggers: [
      //       {
      //         trigger_type: "intent",
      //         trigger_value: "intent",
      //       },
      //     ],
      //     webhook_id: null,
      //     webhook_integration: false,
      //     webhook_mapping: null,
      //     webhook_return_variable: null,
      //     children: [
      //       {
      //         id: 1623670999878,
      //         is_leaf: false,
      //         editNodeDisabled: true,
      //         name: "Hello child",
      //         next_step: {
      //           behavior: "wait_for_reply",
      //           node_id: null,
      //           selector: "wait_for_user_input",
      //         },
      //         pid: 1623669014307,
      //         responses: [
      //           {
      //             condition: false,
      //             id: 0,
      //             recognizes: null,
      //             type: "text",
      //             values: ["child", "node"],
      //             variation: "sequential",
      //           },
      //         ],
      //         slot_setting: false,
      //         slots: [],
      //         triggers: [
      //           {
      //             trigger_type: "intent",
      //             trigger_value: "intent",
      //           },
      //         ],
      //         webhook_id: null,
      //         webhook_integration: false,
      //         webhook_mapping: null,
      //         webhook_return_variable: null,
      //       },
      //       {
      //         id: 1623731025414,
      //         is_leaf: false,
      //         editNodeDisabled: true,
      //         name: "child_2",
      //         next_step: {
      //           behavior: "wait_for_reply",
      //           node_id: null,
      //           selector: "wait_for_user_input",
      //         },
      //         node_name: "basic_child_2",
      //         node_type: "basic",
      //         pid: 1623669014307,
      //         responses: [
      //           {
      //             condition: false,
      //             id: 0,
      //             recognizes: null,
      //             type: "text",
      //             values: ["child", "text response"],
      //             variation: "random",
      //           },
      //           {
      //             condition: false,
      //             id: 1,
      //             recognizes: null,
      //             source: "googl.com",
      //             type: "image",
      //             variation: "random",
      //           },
      //         ],
      //         slot_setting: false,
      //         slots: [],
      //         triggers: [
      //           {
      //             trigger_type: "intent",
      //             trigger_value: "intent",
      //           },
      //         ],
      //         webhook_id: null,
      //         webhook_integration: false,
      //         webhook_mapping: null,
      //         webhook_return_variable: null,
      //       },
      //     ],
      //   },
      //   {
      //     id: 1623670882130,
      //     is_leaf: false,
      //     editNodeDisabled: true,
      //     name: "World",
      //     next_step: {
      //       behavior: "wait_for_reply",
      //       node_id: null,
      //       selector: "wait_for_user_input",
      //     },
      //     node_name: "basic_World",
      //     node_type: "basic",
      //     pid: 0,
      //     responses: [
      //       {
      //         condition: false,
      //         id: "0",
      //         recognizes: null,
      //         type: "text",
      //         values: ["text"],
      //         variation: "random",
      //       },
      //       {
      //         condition: false,
      //         id: "1",
      //         recognizes: null,
      //         type: "text",
      //         values: ["resp"],
      //         variation: "random",
      //       },
      //     ],
      //     slot_setting: false,
      //     slots: [],
      //     triggers: [
      //       {
      //         trigger_type: "intent",
      //         trigger_value: "intent",
      //       },
      //     ],
      //     webhook_id: null,
      //     webhook_integration: false,
      //     webhook_mapping: null,
      //     webhook_return_variable: null,
      //   },
      //   {
      //     id: 1623671218996,
      //     is_leaf: false,
      //     editNodeDisabled: true,
      //     name: "Test node3",
      //     next_step: {
      //       behavior: "wait_for_reply",
      //       node_id: null,
      //       selector: "wait_for_user_input",
      //     },
      //     pid: 0,
      //     responses: [
      //       {
      //         condition: "unfilled",
      //         id: "0",
      //         recognizes: "$webhook_result",
      //         type: "text",
      //         values: ["webhook_variabble response"],
      //         variation: "random",
      //       },
      //     ],
      //     slot_setting: false,
      //     slots: [],
      //     triggers: [
      //       {
      //         trigger_type: "Intent",
      //         trigger_value: "Intent",
      //       },
      //     ],
      //     webhook_id: "1",
      //     webhook_integration: true,
      //     webhook_mapping: [
      //       {
      //         key: "name",
      //         value: "value",
      //       },
      //     ],
      //     webhook_return_variable: "$webhook_result",
      //     children: [
      //       {
      //         id: 1623730827206,
      //         is_leaf: false,
      //         editNodeDisabled: true,
      //         name: "test child node",
      //         next_step: {
      //           behavior: "wait_for_reply",
      //           node_id: null,
      //           selector: "wait_for_user_input",
      //         },
      //         node_name: "basic_test child node",
      //         node_type: "basic",
      //         pid: 1623671218996,
      //         responses: [
      //           {
      //             condition: false,
      //             id: 0,
      //             recognizes: null,
      //             type: "text",
      //             values: ["hello"],
      //             variation: "sequential",
      //           },
      //           {
      //             condition: false,
      //             id: 1,
      //             recognizes: null,
      //             type: "text",
      //             values: ["text", "response"],
      //             variation: "random",
      //           },
      //         ],
      //         slot_setting: false,
      //         slots: [],
      //         triggers: [
      //           {
      //             trigger_type: "Intent",
      //             trigger_value: "Intent",
      //           },
      //         ],
      //         webhook_id: "1",
      //         webhook_integration: true,
      //         webhook_mapping: [
      //           {
      //             key: "name",
      //             value: "$value",
      //           },
      //         ],
      //         webhook_return_variable: "$webhook_result",
      //       },
      //     ],
      //   },
      // ],
      new_child_node: false,
      child_node: {},
      node_id: "",
      node_name: "",
      node_type: "",
      is_root: false,
      assistant_response: [],
      assistant_response_type: ["text", "image", "video", "choices"],
      selected_response_type: "text",
      response_variation: ["sequential"],
      triggers_filter_by_options: ["intent", "entity"],
      insert_slot_variable_options: [],
      entity_operand_options: ["is", "any"],
      triggers: [{
        trigger_type: "",
        trigger_value: ""
      }],
      then_assistant_should: ["wait_for_reply", "jump_to"],
      save_then_assistant_should: "",
      next_step: {},
      jump_to_node_id: "",
      is_slot: false,
      is_webhook: false,
      is_notification: false,
      webhook_id: null,
      webhook_list: [],
      is_webhook_details: false,
      webhook_mapping: [],
      webhook_variable: "",
      webhook_assistant_response: [],
      slots: [],
      is_validation_entity: false,
      unfilled_slot_assistant_response: [],
      validation_slot_assistant_response: [],
      notification_successful_assistant_response: [],
      notification_unsuccessful_assistant_response: [],
      edit_slot_index: "",
      edit_slot_check_for: "",
      edit_slot_slot_variable: "",
      manage_handlers: [],
      notifications: {
        "notify": [{
          "type": "",
          "slot": "",
          "template_id": "",
          "template_name": ""
        }],
        "responses": []
      },
      notifications_notify_type_list: ['email'],
      notifications_notify_template_list: [// {
        //   "email": "<p>New Year Offers of 50% discount on all grocery products!!!</p>", 
        //   "sms": null, 
        //   "template_id": "435312bc-d427-497a-aece-b8b92a482e20", 
        //   "template_name": "New Year Offers"
        // }, 
        // {
        //   "email": "<p>Sale of 50 % on diwali</p>", 
        //   "sms": null, 
        //   "template_id": "e766e795-9b3a-4ad8-8ea3-59d69edf0267", 
        //   "template_name": "Diwali Template"
        // }, 
        // {
        //   "email": "<p>Hello Customers!</p><p>Christmas may be weeks ago but we are encouraging customers to shop early this year for timely delivery. COVID-19 will cause surge in online shopping, which means that there could be unexpected shipping delays with carriers. Go visit our store now: https://earthonstore.com/ </p>", 
        //   "sms": null, 
        //   "subject": "Offers", 
        //   "template_id": "0bb0ceb3-fd30-413e-8f37-b0bc59bb00e7", 
        //   "template_name": "Christmas"
        // }
      ],
      customToolbar: [["bold", "italic", "underline"], [{
        align: []
      }], [{
        color: []
      }, {
        background: []
      }], [{
        list: "ordered"
      }, {
        list: "bullet"
      }], ["link"]],
      // entity_list: ["entity1","entity2"],
      entity_list: [],
      // trigger_options: ["INtent1","Intent2","Intent3"],
      trigger_options: [],
      trigger_options_intent: [],
      trigger_options_entity: [],
      trigger_options_entity_values: [],
      is_show_edit: false,
      is_loading: false
    };
  },
  watch: {},
  computed: {
    dragOptionsSlots: function dragOptionsSlots() {
      return {
        animation: 200,
        group: "description",
        disabled: false,
        ghostClass: "ghost",
        scrollSensitivity: 200,
        forceFallback: true
      };
    } // placeholder() {
    //   if (this.triggers.length > 1){
    //     this.trigger_options = [];
    //     return "Type to search Entity"
    //   }else{
    //     return "Type to search objective"
    //   }
    // }

  },
  mounted: function mounted() {
    // $("#try_bot_btn").click(function () {
    //   alert('clicked!');
    // });
    var vm = this;
    $("#insert_variable_modal").on("hidden.bs.modal", function (e) {
      var id = vm.assistance_response_id;
      var num = vm.assistance_response__val_index;
      $("#assistance_response_".concat(id, "_").concat(num)).focus();
    });
    $("#manage_handlers_insert_variable_modal").on("hidden.bs.modal", function (e) {
      var id = vm.manage_handlers_assistance_response_id;
      var num = vm.manage_handlers_assistance_response__val_index;
      $("#manage_handlers_assistance_response_".concat(id, "_").concat(num)).focus();
    });

    document.onclick = function (e) {
      if (e.target.closest("#try_bot_response") || e.target.closest("#try_bot_btn")) {} else {
        vm.load_bot_preview = false;
      }
    }; // GET SAVED DIALOG TREE


    this.load_saved_dialog_tree(); // CHECKING WEBHOOK DETAILS

    this.load_webhook();
    this.load_intent();
    this.load_entity();
    this.load_templates(); // this.data = new Tree(this.test_response_tree)
    // this.get_nodes_list(this.data);
  },
  methods: {
    load_slot_variable: function load_slot_variable() {
      var _this = this;

      axios.post(api_calls.form_automation_dialog_tree(), {
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name,
        is_get_slot_variable: true,
        node_id: this.node_id.toString()
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        if (response.data.status == "Success") {
          _this.slot_variable = response.data.slots_list;
        } else {
          Swal({
            text: "Internal Server Error",
            toast: true,
            position: "top-end",
            type: "error",
            showConfirmButton: false,
            timer: 5000
          });
        }

        _this.add_to_insert_slot_variable_options();
      }).catch(function (e) {
        _this.add_to_insert_slot_variable_options();

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    circle_mouseover: function circle_mouseover(id, num) {
      $("#insert_variable_circle_".concat(id, "_").concat(num)).toggleClass("insert_variable_circle");
    },
    circle_mouseout: function circle_mouseout(id, num) {
      $("#insert_variable_circle_".concat(id, "_").concat(num)).toggleClass("insert_variable_circle");
    },
    manage_handlers_circle_mouseover: function manage_handlers_circle_mouseover(id, num) {
      $("#manage_handlers_insert_variable_circle_".concat(id, "_").concat(num)).toggleClass("insert_variable_circle");
    },
    manage_handlers_circle_mouseout: function manage_handlers_circle_mouseout(id, num) {
      $("#manage_handlers_insert_variable_circle_".concat(id, "_").concat(num)).toggleClass("insert_variable_circle");
    },
    insert_variable_block_off: function insert_variable_block_off(id, num) {
      $("#insert_variable_block".concat(id, "_").concat(num)).toggleClass("insert_variable_block");
    },
    insert_variable_block_on: function insert_variable_block_on(id, num) {
      $("#insert_variable_block".concat(id, "_").concat(num)).toggleClass("insert_variable_block");
    },
    manage_handlers_insert_variable_block_off: function manage_handlers_insert_variable_block_off(id, num) {
      $("#manage_handlers_insert_variable_block".concat(id, "_").concat(num)).toggleClass("insert_variable_block");
    },
    manage_handlers_insert_variable_block_on: function manage_handlers_insert_variable_block_on(id, num) {
      $("#manage_handlers_insert_variable_block".concat(id, "_").concat(num)).toggleClass("insert_variable_block");
    },
    set_assistance_response_index: function set_assistance_response_index(id, num) {
      $("#assistance_response_".concat(id, "_").concat(num)).focus();
      this.assistance_response_id = id;
      this.assistance_response__val_index = num;
      this.add_to_insert_slot_variable_options();
    },
    manage_handlers_set_assistance_response_index: function manage_handlers_set_assistance_response_index(id, num, ind) {
      $("#manage_handlers_assistance_response_".concat(id, "_").concat(num)).focus();
      this.manage_handlers_ind = ind;
      this.manage_handlers_assistance_response_id = id;
      this.manage_handlers_assistance_response__val_index = num;
      this.add_to_insert_slot_variable_options();
    },
    add_to_insert_slot_variable_options: function add_to_insert_slot_variable_options() {
      var temp1 = [];
      var temp = this.slots.map(function (slot) {
        return slot.slot;
      }).filter(function (item) {
        return item != '';
      });

      if (Boolean(this.webhook_variable)) {
        temp1.push('$' + this.webhook_variable);
      }

      function mergeNoDuplicates() {
        var mergedArray = [];

        for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
          arrays[_key] = arguments[_key];
        }

        arrays.forEach(function (array) {
          mergedArray = [].concat(_toConsumableArray(mergedArray), _toConsumableArray(array));
        });
        return _toConsumableArray(new Set(_toConsumableArray(mergedArray)));
      }

      this.insert_slot_variable_options = mergeNoDuplicates(temp, temp1, this.slot_variable);
    },
    insert_slot_variable_to_assistance_response: function insert_slot_variable_to_assistance_response(variable) {
      var id = this.assistance_response_id;
      var num = this.assistance_response__val_index;
      $("#assistance_response_".concat(id, "_").concat(num)).focus();
      var vm = this;
      var cursorPos = $("#assistance_response_".concat(id, "_").concat(num)).prop('selectionStart');
      var v = $("#assistance_response_".concat(id, "_").concat(num)).val();
      var textBefore = v.substring(0, cursorPos);
      var textAfter = v.substring(cursorPos, v.length); // $('#assistance_response_'+ id + '_' + num).val( textBefore+ am +textAfter );

      this.assistant_response[id].values[num] = textBefore + '{' + variable + '}' + textAfter;
      vm.$set(vm.assistant_response, id, vm.assistant_response[id]);
    },
    manage_handlers_insert_slot_variable_to_assistance_response: function manage_handlers_insert_slot_variable_to_assistance_response(variable) {
      var ind = this.manage_handlers_ind;
      var id = this.manage_handlers_assistance_response_id;
      var num = this.manage_handlers_assistance_response__val_index;
      $("#manage_handlers_assistance_response_".concat(id, "_").concat(num)).focus();
      var vm = this;
      var cursorPos = $("#manage_handlers_assistance_response_".concat(id, "_").concat(num)).prop('selectionStart');
      var v = $("#manage_handlers_assistance_response_".concat(id, "_").concat(num)).val();
      var textBefore = v.substring(0, cursorPos);
      var textAfter = v.substring(cursorPos, v.length); // $('#manage_handlers_assistance_response_'+ id + '_' + num).val( textBefore+ am +textAfter );

      this.manage_handlers[ind].responses[id].values[num] = textBefore + '{' + variable + '}' + textAfter;
      vm.$set(vm.manage_handlers, ind, vm.manage_handlers[ind]);
    },
    add_remove_to_manage_handler_list: function add_remove_to_manage_handler_list(func, ind) {
      if (func === 'add') {
        this.manage_handlers.push({
          id: Date.now(),
          node_type: "event_handler",
          name: "",
          triggers: [{
            "trigger_type": "",
            "trigger_value": ""
          }],
          responses: [],
          parent_node: this.node_id,
          previous_node: "",
          next_step: {
            "behavior": "skip_all_slots",
            "selector": null,
            "node_id": null
          },
          event_name: "generic"
        });
      } else if (func === 'remove') {
        this.manage_handlers.splice(ind, 1);
      }
    },
    set_webhook_return_variable: function set_webhook_return_variable(webhook_id) {
      this.webhook_variable = this.webhook_list.filter(function (id) {
        return id.id == webhook_id;
      })[0].name.replace(/\s+/g, "_");
    },
    load_saved_dialog_tree: function load_saved_dialog_tree() {
      var _this2 = this;

      this.spinnerOn = true;
      axios.post(api_calls.form_automation_dialog_tree(), {
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name,
        is_get: true
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this2.spinnerOn = false;

        if (response.data.MSG == "Node structure Received Successfully") {
          _this2.data = new Tree(response.data.node_structure[0].nodestructure);

          _this2.get_nodes_list(_this2.data);
        } else if (response.data.MSG == "Node Structure Does Not Exists") {
          Swal({
            title: "Create a Dialog Tree",
            text: "Start by Adding Nodes",
            type: "info",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
        } else {
          Swal({
            text: "Internal Server Error",
            toast: true,
            position: "top-end",
            type: "error",
            showConfirmButton: false,
            timer: 5000
          });
        }
      }).catch(function (e) {
        _this2.spinnerOn = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this2.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    load_webhook: function load_webhook() {
      var _this3 = this;

      this.spinnerOn = true;
      axios.post(api_calls.form_automation_webhook_details(), {
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name,
        is_get: true,
        page_no: 1,
        per_page: 40
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this3.spinnerOn = false;
        _this3.webhook_list = [];

        if (response.data.MSG === "Webhook Details Received Successfully") {
          _this3.is_webhook_details = true;

          for (var i in response.data.webhook[0].webhook) {
            _this3.webhook_list.push(response.data.webhook[0].webhook[i]);
          }
        } else if (response.data.MSG === "Webhook Details Does not Exists") {
          _this3.is_webhook_details = false;
          _this3.webhook_id = null;
        } else {
          Swal({
            type: "error",
            toast: true,
            position: "top-end",
            text: "Internal Server Error",
            timer: 2000
          });
        }
      }).catch(function (e) {
        console.log(e);
        _this3.spinnerOn = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this3.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    load_intent: function load_intent() {
      var _this4 = this;

      this.spinnerOn = true;
      axios.post(api_calls.form_automation_save_intent_example(), {
        is_get: true,
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name,
        email: this.$session.get("UserInformation").email,
        license_key: this.$session.get("UserInformation").license_key,
        token: this.$session.get("UserInformation").tokens,
        page_no: 1,
        per_page: 40
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this4.spinnerOn = false;

        if (response.status == 200) {
          _this4.trigger_options_intent = [];

          for (var i = 0; i < response.data.data.length; i++) {
            _this4.trigger_options_intent.push(response.data.data[i].Intent);
          }
        }
      }).catch(function (e) {
        _this4.spinnerOn = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this4.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    load_entity: function load_entity() {
      var _axios$post,
          _this5 = this;

      this.spinnerOn = true;
      axios.post(api_calls.form_automation_add_entity(), (_axios$post = {
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name,
        license_key: this.$session.get("UserInformation").license_key,
        email: this.$session.get("UserInformation").email
      }, _defineProperty(_axios$post, "license_key", this.$session.get("UserInformation").license_key), _defineProperty(_axios$post, "token", this.$session.get("UserInformation").tokens), _defineProperty(_axios$post, "subscription", this.$session.get("UserInformation").subscription), _defineProperty(_axios$post, "is_get_entity", true), _defineProperty(_axios$post, "page_no", 1), _defineProperty(_axios$post, "per_page", 40), _axios$post), {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this5.spinnerOn = false;

        if (response.data.MSG == "Entity Data Exists") {
          _this5.entity_list = [];
          _this5.trigger_options_entity_values = [];
          _this5.trigger_options_entity = [];

          for (var i = 0; i < response.data.entity_names.length; i++) {
            _this5.entity_list.push(response.data.entity_names[i].entity);

            _this5.trigger_options_entity_values.push(response.data.entity_names[i]);

            _this5.trigger_options_entity.push(response.data.entity_names[i].entity);
          }
        } else if (response.data.MSG == "Entity Does not Exists") {
          Swal({
            text: "You should add some Entities first",
            toast: true,
            position: "top-end",
            type: "warning",
            showConfirmButton: false,
            timer: 5000
          });
        }
      }).catch(function (e) {
        _this5.spinnerOn = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this5.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    load_templates: function load_templates() {
      var _this6 = this;

      this.spinnerOn = true;
      axios.post(api_calls.template_promotional_email(), {
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name,
        is_get: true,
        is_notification: true,
        page_no: 1,
        per_page: 40
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this6.spinnerOn = false;

        if (response.data != null) {
          if (response.data === "DB OPERATION UNSUCCESSFUL") {
            _this6.notifications_notify_template_list = [];
            return;
          }

          _this6.notifications_notify_template_list = response.data.data;
        }
      }).catch(function (e) {
        _this6.spinnerOn = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this6.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    check_slot_value_use_in_response: function check_slot_value_use_in_response(response) {
      if (Boolean(response.includes('{'))) {
        return true;
      } else {
        return false;
      }
    },
    visible_try_bot: function visible_try_bot() {
      if (this.load_bot_preview) {
        this.load_bot_preview = false;
      } else {
        this.load_bot_preview = true;
      }
    },
    is_entity_type_sys_pattern: function is_entity_type_sys_pattern(trigger_value) {
      if (this.trigger_options_entity_values.filter(function (item) {
        return item.entity == trigger_value;
      })[0].type === "pattern" || this.trigger_options_entity_values.filter(function (item) {
        return item.entity == trigger_value;
      })[0].type === "system") {
        return true;
      } else {
        return false;
      }
    },
    entity_value_options: function entity_value_options(trigger_value) {
      var temp = [];
      temp = this.trigger_options_entity_values.filter(function (item) {
        return item.entity == trigger_value;
      })[0].values.map(function (val) {
        return val.value;
      });
      return temp;
    },
    check_image_url: function check_image_url(url) {
      if (this.reg_image.test(url) === true) {
        return true;
      } else {
        return false;
      }
    },
    check_video_url: function check_video_url(url) {
      if (this.reg_url.test(url) === true) {
        return true;
      } else {
        return false;
      }
    },
    search_webhook: function search_webhook(query) {
      var _this7 = this;

      if (query != "") {
        axios.post(api_calls.form_automation_webhook_details(), {
          company_id: this.companyid,
          company_name: this.companyname,
          license_key: this.$session.get("UserInformation").license_key,
          email: this.$session.get("UserInformation").email,
          token: this.$session.get("UserInformation").tokens,
          subscription: "Platinum",
          is_search: true,
          search_term: this.search_name,
          per_page: 40,
          page_no: 1
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this7.spinnerOn = false;

          if (response.data.MSG === "Webhook Details Received Successfully") {
            _this7.webhook_list = [];
            _this7.is_webhook_details = true;

            for (var i in response.data.webhook[0].webhook) {
              _this7.webhook_list.push(response.data.webhook[0].webhook[i]);
            }
          } else if (response.data.MSG === "Searched webhook not found") {
            Swal({
              type: "warning",
              text: "Searched webhook not found",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 3000
            });
          } else {
            Swal({
              text: "Internal Server Error",
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2000
            });
          }
        }).catch(function (e) {
          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this7.$root.$emit("Session_Expired", e.response.data);
          }
        });
      }
    },
    search_intent_entity: function search_intent_entity(trigger_type, query) {
      var _this8 = this;

      // if(query == ""){
      //   this.trigger_options_intent = [];
      //   this.trigger_options_entity = [];
      // }
      if (this.is_root || trigger_type === 'intent') {
        if (query != "") {
          this.is_loading = true;
          axios.post(api_calls.form_automation_save_intent_example(), {
            company_id: this.$session.get("UserInformation").company_id,
            company_name: this.$session.get("UserInformation").company_name,
            license_key: this.$session.get("UserInformation").license_key,
            email: this.$session.get("UserInformation").email,
            token: this.$session.get("UserInformation").tokens,
            subscription: "Platinum",
            is_search: true,
            search_key: query,
            page_no: 1,
            per_page: 40
          }, {
            headers: {
              Authorization: "Bearer ".concat(this.$session.get("at"))
            }
          }).then(function (response) {
            _this8.spinnerOn = false;

            if (response.data.MSG == "No Results Found") {
              // toastr.error("No Results Found");
              Swal({
                text: "No Results Found",
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 5000
              });
            } else if (response.data.MSG != "Internal Server Error" && response.data.MSG != "No Intents Found") {
              _this8.trigger_options_intent = [];

              if (response.data != "token invalid") {
                for (var i = 0; i < response.data.ResponseList.length; i++) {
                  _this8.trigger_options_intent.push(response.data.ResponseList[i].Intent);
                }
              }
            } else if (response.data == "Internal Server Error") {
              // toastr.error("Intrnal Server Error");
              Swal({
                text: "Internal Server Error",
                toast: true,
                position: "top-end",
                type: "error",
                showConfirmButton: false,
                timer: 5000
              });
            } else {
              // toastr.error("Intrnal Server Error");
              Swal({
                text: "Internal Server Error",
                toast: true,
                position: "top-end",
                type: "error",
                showConfirmButton: false,
                timer: 5000
              });
            }
          }).catch(function (e) {
            if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
              _this8.$root.$emit("Session_Expired", e.response.data);
            }
          });
          this.is_loading = false;
        } else {
          this.load_intent();
        }
      } else if (trigger_type === 'entity') {
        if (query != "") {
          this.is_loading = true;
          axios.post(api_calls.form_automation_add_entity(), {
            company_id: this.$session.get("UserInformation").company_id,
            company_name: this.$session.get("UserInformation").company_name,
            license_key: this.$session.get("UserInformation").license_key,
            email: this.$session.get("UserInformation").email,
            token: this.$session.get("UserInformation").tokens,
            subscription: "Platinum",
            is_search: true,
            search_key: query,
            page_no: 1,
            per_page: 40
          }, {
            headers: {
              Authorization: "Bearer ".concat(this.$session.get("at"))
            }
          }).then(function (response) {
            _this8.spinnerOn = false;

            if (response.data.MSG == "Entities Search Successfully") {
              _this8.trigger_options_entity = [];
              _this8.trigger_options_entity_values = [];

              for (var i = 0; i < response.data.entities_search.length; i++) {
                _this8.trigger_options_entity_values.push(response.data.entities_search[i]);

                _this8.trigger_options_entity.push(response.data.entities_search[i].entity);
              }
            } else if (response.data.MSG == "Entity Does not Exists") {
              Swal({
                text: "No Results Found",
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 5000
              });
            } else {
              // toastr.error("Intrnal Server Error");
              Swal({
                text: "Internal Server Error",
                toast: true,
                position: "top-end",
                type: "error",
                showConfirmButton: false,
                timer: 5000
              });
            }
          }).catch(function (e) {
            if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
              _this8.$root.$emit("Session_Expired", e.response.data);
            }
          });
          this.is_loading = false;
        } else {
          this.load_entity();
        }
      }
    },
    search_entity: function search_entity(query) {
      var _this9 = this;

      if (query != "") {
        this.is_loading = true;
        axios.post(api_calls.form_automation_add_entity(), {
          company_id: this.$session.get("UserInformation").company_id,
          company_name: this.$session.get("UserInformation").company_name,
          license_key: this.$session.get("UserInformation").license_key,
          email: this.$session.get("UserInformation").email,
          token: this.$session.get("UserInformation").tokens,
          subscription: "Platinum",
          is_search: true,
          search_key: query,
          page_no: 1,
          per_page: 40
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this9.spinnerOn = false;

          if (response.data.MSG == "Entities Search Successfully") {
            _this9.entity_list = [];

            for (var i = 0; i < response.data.entities_search.length; i++) {
              _this9.entity_list.push(response.data.entities_search[i].entity);
            }
          } else if (response.data.MSG == "Entity Does not Exists") {
            Swal({
              text: "No Results Found",
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 5000
            });
          } else {
            // toastr.error("Intrnal Server Error");
            Swal({
              text: "Internal Server Error",
              toast: true,
              position: "top-end",
              type: "error",
              showConfirmButton: false,
              timer: 5000
            });
          }
        }).catch(function (e) {
          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this9.$root.$emit("Session_Expired", e.response.data);
          }
        });
        this.is_loading = false;
      } else {
        this.load_entity();
      }
    },
    search_for_entity_has_validation: function search_for_entity_has_validation(query) {
      var _this10 = this;

      if (query != "") {
        axios.post(api_calls.form_automation_add_entity(), {
          company_id: this.$session.get("UserInformation").company_id,
          company_name: this.$session.get("UserInformation").company_name,
          license_key: this.$session.get("UserInformation").license_key,
          email: this.$session.get("UserInformation").email,
          token: this.$session.get("UserInformation").tokens,
          subscription: "Platinum",
          is_validation_entity: true,
          entity: query
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this10.spinnerOn = false;

          if (response.data.MSG == "Entity has validation") {
            _this10.is_validation_entity = true;
          } else if (response.data.MSG == "Entity not has validation") {
            _this10.is_validation_entity = false;
          } else {
            _this10.is_validation_entity = false;
          }
        }).catch(function (e) {
          _this10.is_validation_entity = false;

          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this10.$root.$emit("Session_Expired", e.response.data);
          }
        });
      } else {
        this.is_validation_entity = false;
      }
    },
    search_template_name: function search_template_name(query) {
      var _this11 = this;

      if (query != "") {
        this.is_loading = true;
        axios.post(api_calls.template_promotional_email(), {
          company_id: this.$session.get("UserInformation").company_id,
          company_name: this.$session.get("UserInformation").company_name,
          license_key: this.$session.get("UserInformation").license_key,
          email: this.$session.get("UserInformation").email,
          token: this.$session.get("UserInformation").tokens,
          subscription: "Platinum",
          is_search: true,
          is_notification: true,
          search_key: query,
          page_no: 1,
          per_page: 40
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this11.spinnerOn = false;

          if (response.data.MSG == "Template Search Successfully") {
            _this11.notifications_notify_template_list = [];

            for (var i = 0; i < response.data.template_search.length; i++) {
              _this11.notifications_notify_template_list.push(response.data.template_search[i]);
            }
          } else if (response.data.MSG == "Template Does not Exists") {
            Swal({
              text: "No Results Found",
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 5000
            });
          } else {
            Swal({
              text: "Internal Server Error",
              toast: true,
              position: "top-end",
              type: "error",
              showConfirmButton: false,
              timer: 5000
            });
          }
        }).catch(function (e) {
          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this11.$root.$emit("Session_Expired", e.response.data);
          }
        });
        this.is_loading = false;
      } else {
        this.load_templates();
      }
    },
    manage_handlers_arrange_ids_function: function manage_handlers_arrange_ids_function(ind) {
      if (this.manage_handlers[ind].responses != []) {
        for (var i in this.assistant_response) {
          this.manage_handlers[ind].responses[i].id = i.toString();
        }
      }
    },
    arrange_ids_function: function arrange_ids_function() {
      //For responses rewrite ids
      if (this.assistant_response != []) {
        for (var i in this.assistant_response) {
          this.assistant_response[i].id = i.toString();
        }
      } //For slots rewrite ids


      if (this.slots != []) {
        for (var i in this.slots) {
          this.slots[i].responses = [];
          var temp = this.slots[i].slot;

          for (var j in this.assistant_response) {
            if (this.assistant_response[j].recognizes == temp) {
              this.slots[i].responses.push(this.assistant_response[j].id);
            }
          }
        }
      }
    },
    arrange_ids_function_for_notification: function arrange_ids_function_for_notification() {
      //For responses rewrite ids
      if (this.assistant_response != []) {
        for (var i in this.assistant_response) {
          this.assistant_response[i].id = i.toString();
        }
      } //For slots rewrite ids


      if (this.notifications.responses != []) {
        this.notifications.responses = [];

        for (var j in this.assistant_response) {
          if (this.assistant_response[j].recognizes == "successful" || this.assistant_response[j].recognizes == "unsuccessful") {
            this.notifications.responses.push(this.assistant_response[j].id);
          }
        }
      }
    },
    get_nodes_list: function get_nodes_list(oldNode) {
      if (oldNode.children && oldNode.children.length > 0) {
        for (var i = 0, len = oldNode.children.length; i < len; i++) {
          oldNode.children[i].is_root = true;
          this.nodes_list.push([{
            id: oldNode.children[i].id,
            name: oldNode.children[i].name
          }]);
          this.add_children_node_name(oldNode.children[i], i);
        }
      }
    },
    add_children_node_name: function add_children_node_name(childNode, indx) {
      if (childNode.children && childNode.children.length > 0) {
        for (var i = 0, len = childNode.children.length; i < len; i++) {
          childNode.children[i].is_root = false;
          this.nodes_list[indx].splice(indx, 0, {
            id: childNode.children[i].id,
            name: childNode.children[i].name
          });
          this.add_children_node_name(childNode.children[i], indx);
        }
      }
    },
    drop: function drop(node, src, target) {
      // console.log(node, src, target);
      this.pushNewTree();
    },
    dropAfter: function dropAfter(node, src, target) {
      // console.log(node, src, target);
      this.pushNewTree();
    },
    dropBefore: function dropBefore(node, src, target) {
      // console.log(node, src, target);
      this.pushNewTree();
    },
    close_addnodemodal: function close_addnodemodal() {
      var _this12 = this;

      Swal.fire({
        title: "Are you sure?",
        text: "If you have made any changes, please save them, else they will not be reflected!",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Save",
        cancelButtonText: "Discard"
      }).then(function (result) {
        if (result.value) {
          if (_this12.is_show_edit) {
            _this12.editNode();
          } else {
            _this12.addNode();
          }
        } else if (result.dismiss === "cancel") {
          $("#addnodemodal").modal("hide");

          _this12.empty_variable();
        }
      });
    },
    onDel: function onDel(node) {
      var _this13 = this;

      if (this.new_child_node) {
        Swal.fire({
          title: "Are you sure?",
          text: "If you have made any changes, please save them, else they will not be reflected!",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Save",
          cancelButtonText: "Discard"
        }).then(function (result) {
          if (result.value) {
            if (_this13.is_show_edit) {
              _this13.editNode();
            } else {
              _this13.addNode();
            }
          } else if (result.dismiss === "cancel") {
            $("#addnodemodal").modal("hide");

            var new_nodes = _this13.nodes_list.filter(function (select) {
              return select.id !== node.id;
            });

            _this13.nodes_list = new_nodes;
            _this13.new_child_node = false;
            node.remove();

            _this13.empty_variable();
          }
        });
      } else {
        Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, delete!!"
        }).then(function (result) {
          if (result.value) {
            var new_nodes = _this13.nodes_list.filter(function (select) {
              return select.id !== node.id;
            });

            _this13.nodes_list = new_nodes;
            node.remove();
            var vm = _this13;

            _dfs(vm.data);

            function _dfs(oldNode) {
              if (oldNode.children && oldNode.children.length > 0) {
                for (var i = 0, len = oldNode.children.length; i < len; i++) {
                  if (node.id == oldNode.children[i].next_step.node_id) {
                    oldNode.children[i].next_step.behavior = "wait_for_reply";
                    oldNode.children[i].next_step.node_id = null;
                    oldNode.children[i].next_step.selector = "wait_for_user_input";
                  }

                  _dfs(oldNode.children[i]);
                }
              }
            }

            _this13.pushNewTree("deletenode");

            _this13.empty_variable();
          }
        });
      } // this.empty_variable();

    },
    onAddNode: function onAddNode(params) {
      this.child_node = params;
      this.empty_variable();
      this.is_show_edit = true;
      this.new_child_node = true; // Node id is important, check how we are adding childnode in editNode()

      this.node_id = params.id;
      this.node_name = params.name;
      $("#addnodemodal").modal("show");
    },
    change_root: function change_root() {
      this.is_root = true;
    },
    onClick: function onClick(params) {
      var new_obj = JSON.parse(JSON.stringify({
        triggers: params.triggers,
        assistant_response: params.responses,
        slots: params.slots != null ? params.slots : [],
        notifications: params.notifications != null ? params.notifications : {
          "notify": [{
            "type": "",
            "slot": "",
            "template_id": "",
            "template_name": ""
          }],
          "responses": []
        },
        manage_handlers: params.manage_handlers != null ? params.manage_handlers : [],
        webhook_mapping: params.webhook_mapping == null ? [] : params.webhook_mapping,
        node_id: params.id,
        node_name: params.name,
        is_root: params.is_root,
        is_slot: params.slot_setting,
        is_notification: params.notification_enabled,
        next_step: params.next_step,
        save_then_assistant_should: params.next_step.behavior,
        jump_to_node_id: params.next_step.node_id,
        is_webhook: params.webhook_integration // webhook_id: this.is_webhook == true ? params.webhook_id : null,
        // webhook_variable:this.webhook_id != null ? params.webhook_return_variable : "",

      })); // new_obj = JSON.parse(JSON.stringify(new_obj));

      this.empty_variable();
      this.is_show_edit = true;
      this.node_id = new_obj.node_id;
      this.node_name = new_obj.node_name;
      this.is_root = new_obj.is_root;
      this.assistant_response = new_obj.assistant_response; // this.triggers = Object.assign(params.triggers);

      this.triggers = new_obj.triggers;
      this.slots = new_obj.slots;
      this.is_slot = new_obj.is_slot;
      this.is_notification = new_obj.is_notification;
      this.notifications = new_obj.notifications;
      this.manage_handlers = new_obj.manage_handlers;
      this.next_step = new_obj.next_step;
      this.save_then_assistant_should = new_obj.save_then_assistant_should;
      this.jump_to_node_id = new_obj.jump_to_node_id === null ? "" : new_obj.jump_to_node_id;
      this.is_webhook = new_obj.is_webhook;
      this.webhook_id = this.is_webhook == true ? params.webhook_id : null, this.webhook_variable = this.webhook_id != null ? params.webhook_return_variable : "", this.webhook_mapping = new_obj.webhook_mapping; // This condition is to check if root node is selected then don't let it add more than one trigger
      // if (this.is_root) {
      //   document.getElementById("add_trigger_btn").style.display = "none";
      // } else {
      //   document.getElementById("add_trigger_btn").style.display = "block";
      //   this.is_root = false;
      // }

      this.remove_current_node_jump_name(this.nodes_list, this.node_name);
      this.load_slot_variable();
      $("#addnodemodal").modal("show");
    },
    editNode: function editNode() {
      if (this.node_name == "") {
        Swal({
          text: "Please Enter a Node Name",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.triggers.length < 1) {
        Swal({
          text: "Add atleast one condition to recognize the node",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      } else if (this.triggers.length > 0) {
        for (var i = 0; i < this.triggers.length; i++) {
          if (this.triggers[i].trigger_value === "" || this.triggers[i].trigger_value === null) {
            Swal({
              text: "Condition's cannot be blank",
              toast: true,
              type: "warning",
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          }

          if (this.triggers[i].trigger_type === "entity") {
            if (this.triggers[i].operand === "" || this.triggers[i].operand === null) {
              Swal({
                text: "Condition's cannot be blank",
                toast: true,
                type: "warning",
                position: "top-end",
                showConfirmButton: false,
                timer: 5000
              });
              return;
            }

            if (this.triggers[i].operand === "is") {
              if (this.triggers[i].entity_value === "" || this.triggers[i].entity_value === null) {
                Swal({
                  text: "Condition's cannot be blank",
                  toast: true,
                  type: "warning",
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 5000
                });
                return;
              }
            }
          }
        }
      }

      if (this.is_slot && this.slots.length == 0) {
        Swal({
          text: "Atleast add one Slot setting",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.is_slot && this.slots.length > 0) {
        for (var l = 0; l < this.slots.length; l++) {
          var slot = this.slots[l];

          if (!Boolean(slot.slot)) {
            Swal({
              text: "Please select Entity for each slot.",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          }

          if (!Boolean(slot.responses.length)) {
            Swal({
              text: "Add atleast one Response to every slot",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          }
        }
      }

      if (this.manage_handlers.length > 0 && this.is_slot) {
        for (var ind = 0; ind < this.manage_handlers.length; ind++) {
          var handler = this.manage_handlers[ind];

          if (handler.triggers.length < 1) {
            Swal({
              text: "Add atleast one condition to recognize the node in manage handler",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          } else if (handler.triggers.length > 0) {
            for (var _i = 0; _i < handler.triggers.length; _i++) {
              if (handler.triggers[_i].trigger_value === "" || handler.triggers[_i].trigger_value === null) {
                Swal({
                  text: "Condition's cannot be blank in manage handler",
                  toast: true,
                  type: "warning",
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 5000
                });
                return;
              }

              if (handler.triggers[_i].trigger_type === "entity") {
                if (handler.triggers[_i].operand === "" || handler.triggers[_i].operand === null) {
                  Swal({
                    text: "Condition's cannot be blank manage handler",
                    toast: true,
                    type: "warning",
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 5000
                  });
                  return;
                }

                if (handler.triggers[_i].operand === "is") {
                  if (handler.triggers[_i].entity_value === "" || handler.triggers[_i].entity_value === null) {
                    Swal({
                      text: "Condition's cannot be blank manage handler",
                      toast: true,
                      type: "warning",
                      position: "top-end",
                      showConfirmButton: false,
                      timer: 5000
                    });
                    return;
                  }
                }
              }
            }
          }

          if (handler.responses.length < 1) {
            Swal({
              text: "Add atleast one Response to handler",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          } else if (handler.responses.length > 0) {
            for (var _i2 = 0; _i2 < handler.responses.length; _i2++) {
              if (handler.responses[_i2].type === "text") {
                for (var j = 0; j < handler.responses[_i2].values.length; j++) {
                  if (Boolean(handler.responses[_i2].values[j]) === false) {
                    Swal({
                      text: "Text Response cannot be empty in manage handler",
                      type: "warning",
                      toast: true,
                      position: "top-end",
                      showConfirmButton: false,
                      timer: 5000
                    });
                    return;
                  }
                }
              } else if (handler.responses[_i2].type === "image") {
                if (Boolean(handler.responses[_i2].source) === false) {
                  Swal({
                    text: "Image Response cannot be empty in manage handler",
                    type: "warning",
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 5000
                  });
                  return;
                }

                if (this.reg_image.test(handler.responses[_i2].source) === false) {
                  Swal({
                    text: "Please enter a valid image URL in png or jpg format only in manage handler",
                    type: "warning",
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 8000
                  });
                  return;
                }
              } else if (handler.responses[_i2].type === "video") {
                if (Boolean(handler.responses[_i2].source) === false) {
                  Swal({
                    text: "Video Response cannot be empty in manage handler",
                    type: "warning",
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 5000
                  });
                  return;
                }

                if (this.reg_url.test(handler.responses[_i2].source) === false) {
                  Swal({
                    text: "Please enter a valid video URL in manage handler",
                    type: "warning",
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 8000
                  });
                  return;
                }
              } else if (handler.responses[_i2].type === "choices") {
                for (var _j = 0; _j < handler.responses[_i2].choices.length; _j++) {
                  if (Boolean(handler.responses[_i2].choices[_j].title) === false || Boolean(handler.responses[_i2].choices[_j].payload) === false) {
                    Swal({
                      text: "Choice Response cannot be empty in manage handler",
                      type: "warning",
                      toast: true,
                      position: "top-end",
                      showConfirmButton: false,
                      timer: 5000
                    });
                    return;
                  }
                }
              }
            }
          }
        }
      }

      if (!this.is_webhook_details) {
        this.is_webhook = false;
        this.webhook_mapping = {};
      }

      if (this.is_webhook) {
        if (!Boolean(this.webhook_id)) {
          Swal({
            text: "Please select webhook name",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
          return;
        }

        if (!Boolean(this.webhook_variable)) {
          Swal({
            text: "Please enter webhook return variable name",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 8000
          });
          return;
        }

        if (!Boolean(this.webhook_mapping.length)) {
          Swal({
            text: "Atleast add one webhook parameter",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 8000
          });
          return;
        } else {
          for (var index = 0; index < this.webhook_mapping.length; index++) {
            if (!Boolean(this.webhook_mapping[index].key) || !Boolean(this.webhook_mapping[index].value)) {
              Swal({
                text: "Webhook parameter can not be empty",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 8000
              });
              return;
            }
          }
        }
      }

      if (this.is_notification) {
        if (this.notifications.notify[0].type == "" || this.notifications.notify[0].type == null) {
          Swal({
            text: "Please select notification type",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
          return;
        }

        if (this.notifications.notify[0].slot == "" || this.notifications.notify[0].slot == null) {
          Swal({
            text: "Please enter variable name",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
          return;
        }

        if (this.notifications.notify[0].template_name == "" || this.notifications.notify[0].template_name == null) {
          Swal({
            text: "Please select template name",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
          return;
        }

        if (this.notifications.responses.length < 1) {
          Swal({
            text: "Please add responses for the notification in both cases of notification successful & unsuccessful.",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 8000
          });
          return;
        } else {
          var check_notification_successful_response = false;
          var check_notification_unsuccessful_response = false;

          for (var _l = 0; _l < this.notifications.responses.length; _l++) {
            var notification_response_id = this.notifications.responses[_l];

            if (this.assistant_response[notification_response_id].condition === "!successful") {
              check_notification_successful_response = true;
            }

            if (this.assistant_response[notification_response_id].condition === "!unsuccessful") {
              check_notification_unsuccessful_response = true;
            }
          }

          if (!Boolean(check_notification_successful_response)) {
            Swal({
              text: "Please add responses for the notification in case of notification successful.",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 8000
            });
            return;
          } else if (!Boolean(check_notification_unsuccessful_response)) {
            Swal({
              text: "Please add responses for the notification in case of notification unsuccessful.",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 8000
            });
            return;
          }
        }
      } else {
        this.notifications = {
          "notify": [{
            "type": "",
            "slot": "",
            "template_id": "",
            "template_name": ""
          }],
          "responses": []
        };
      }

      if (this.assistant_response.length < 1) {
        Swal({
          text: "Add atleast one Response to node",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      } else if (this.assistant_response.length > 0) {
        for (var _i3 = 0; _i3 < this.assistant_response.length; _i3++) {
          if (this.assistant_response[_i3].type === "text") {
            for (var _j2 = 0; _j2 < this.assistant_response[_i3].values.length; _j2++) {
              if (Boolean(this.assistant_response[_i3].values[_j2]) === false) {
                Swal({
                  text: "Text Response cannot be empty",
                  type: "warning",
                  toast: true,
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 5000
                });
                return;
              }
            }
          } else if (this.assistant_response[_i3].type === "image") {
            if (Boolean(this.assistant_response[_i3].source) === false) {
              Swal({
                text: "Image Response cannot be empty",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 5000
              });
              return;
            }

            if (this.reg_image.test(this.assistant_response[_i3].source) === false) {
              Swal({
                text: "Please enter a valid image URL in png or jpg format only.",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 8000
              });
              return;
            }
          } else if (this.assistant_response[_i3].type === "video") {
            if (Boolean(this.assistant_response[_i3].source) === false) {
              Swal({
                text: "Video Response cannot be empty",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 5000
              });
              return;
            }

            if (this.reg_url.test(this.assistant_response[_i3].source) === false) {
              Swal({
                text: "Please enter a valid video URL.",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 8000
              });
              return;
            }
          } else if (this.assistant_response[_i3].type === "choices") {
            for (var _j3 = 0; _j3 < this.assistant_response[_i3].choices.length; _j3++) {
              if (Boolean(this.assistant_response[_i3].choices[_j3].title) === false || Boolean(this.assistant_response[_i3].choices[_j3].payload) === false) {
                Swal({
                  text: "Choice Response cannot be empty",
                  type: "warning",
                  toast: true,
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 5000
                });
                return;
              }
            }
          }
        }
      }

      if (!this.next_step.behavior) {
        Swal({
          text: "Select a Next Step for Node",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.save_then_assistant_should == "jump_to" && this.jump_to_node_id == "") {
        Swal({
          text: "Select a Node Id to jump",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.is_slot && this.slots.length != 0) {
        this.node_type = "form";
      } else {
        this.node_type = "basic";
      }

      var vm = this;

      _dfs(vm.data);

      function _dfs(oldNode) {
        if (oldNode.children && oldNode.children.length > 0) {
          for (var i = 0, len = oldNode.children.length; i < len; i++) {
            if (vm.node_id == oldNode.children[i].id) {
              oldNode.children[i].name = vm.node_name;
              oldNode.children[i].node_name = vm.node_type + "_" + vm.node_name;
              oldNode.children[i].node_type = vm.node_type;
              oldNode.children[i].is_root = vm.is_root ? true : false;
              oldNode.children[i].responses = vm.assistant_response;
              oldNode.children[i].slot_setting = vm.is_slot;
              oldNode.children[i].notification_enabled = vm.is_notification, oldNode.children[i].slots = vm.is_slot ? vm.slots : null, oldNode.children[i].notifications = vm.is_notification ? vm.notifications : null, oldNode.children[i].manage_handlers = vm.manage_handlers.length > 0 && vm.is_slot ? vm.manage_handlers : null, oldNode.children[i].triggers = vm.triggers;
              oldNode.children[i].next_step = vm.next_step;
              oldNode.children[i].webhook_id = vm.is_webhook ? vm.webhook_id : null;
              oldNode.children[i].webhook_integration = vm.is_webhook;
              oldNode.children[i].webhook_mapping = vm.is_webhook ? vm.webhook_mapping : null;
              oldNode.children[i].webhook_return_variable = vm.is_webhook ? vm.webhook_variable : null;
              oldNode.children[i].editNodeDisabled = true;
            }

            _dfs(oldNode.children[i]);
          }
        }
      }

      if (vm.new_child_node) {
        vm.nodes_list.push({
          id: vm.node_id,
          name: vm.node_name
        });
      }

      if (vm.new_child_node) {
        vm.pushNewTree("childnode");
      } else {
        vm.pushNewTree("editnode");
      }

      vm.new_child_node = false;
      vm.is_show_edit = false;
      vm.empty_variable(); // document.getElementById("add_trigger_btn").style.display = "block";

      $("#addnodemodal").modal("hide");
    },
    addNode: function addNode() {
      if (this.node_name == "") {
        Swal({
          text: "Please Enter a Node Name",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.triggers.length < 1) {
        Swal({
          text: "Add atleast one condition to recognize the node",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      } else if (this.triggers.length > 0) {
        for (var i = 0; i < this.triggers.length; i++) {
          if (this.triggers[i].trigger_value === "" || this.triggers[i].trigger_value === null) {
            Swal({
              text: "Condition's cannot be blank",
              toast: true,
              type: "warning",
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          }

          if (this.triggers[i].trigger_type === "entity") {
            if (this.triggers[i].operand === "" || this.triggers[i].operand === null) {
              Swal({
                text: "Condition's cannot be blank",
                toast: true,
                type: "warning",
                position: "top-end",
                showConfirmButton: false,
                timer: 5000
              });
              return;
            }

            if (this.triggers[i].operand === "is") {
              if (this.triggers[i].entity_value === "" || this.triggers[i].entity_value === null) {
                Swal({
                  text: "Condition's cannot be blank",
                  toast: true,
                  type: "warning",
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 5000
                });
                return;
              }
            }
          }
        }
      }

      if (this.is_slot && this.slots.length == 0) {
        Swal({
          text: "Atleast add one Slot setting",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.is_slot && this.slots.length > 0) {
        for (var l = 0; l < this.slots.length; l++) {
          var slot = this.slots[l];

          if (!Boolean(slot.slot)) {
            Swal({
              text: "Please select Entity for each slot.",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          }

          if (!Boolean(slot.responses.length)) {
            Swal({
              text: "Add atleast one Response to every slot",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          }
        }
      }

      if (this.manage_handlers.length > 0 && this.is_slot) {
        for (var ind = 0; ind < this.manage_handlers.length; ind++) {
          var handler = this.manage_handlers[ind];

          if (handler.triggers.length < 1) {
            Swal({
              text: "Add atleast one condition to recognize the node in manage handler",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          } else if (handler.triggers.length > 0) {
            for (var _i4 = 0; _i4 < handler.triggers.length; _i4++) {
              if (handler.triggers[_i4].trigger_value === "" || handler.triggers[_i4].trigger_value === null) {
                Swal({
                  text: "Condition's cannot be blank in manage handler",
                  toast: true,
                  type: "warning",
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 5000
                });
                return;
              }

              if (handler.triggers[_i4].trigger_type === "entity") {
                if (handler.triggers[_i4].operand === "" || handler.triggers[_i4].operand === null) {
                  Swal({
                    text: "Condition's cannot be blank manage handler",
                    toast: true,
                    type: "warning",
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 5000
                  });
                  return;
                }

                if (handler.triggers[_i4].operand === "is") {
                  if (handler.triggers[_i4].entity_value === "" || handler.triggers[_i4].entity_value === null) {
                    Swal({
                      text: "Condition's cannot be blank manage handler",
                      toast: true,
                      type: "warning",
                      position: "top-end",
                      showConfirmButton: false,
                      timer: 5000
                    });
                    return;
                  }
                }
              }
            }
          }

          if (handler.responses.length < 1) {
            Swal({
              text: "Add atleast one Response to handler",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
            return;
          } else if (handler.responses.length > 0) {
            for (var _i5 = 0; _i5 < handler.responses.length; _i5++) {
              if (handler.responses[_i5].type === "text") {
                for (var j = 0; j < handler.responses[_i5].values.length; j++) {
                  if (Boolean(handler.responses[_i5].values[j]) === false) {
                    Swal({
                      text: "Text Response cannot be empty in manage handler",
                      type: "warning",
                      toast: true,
                      position: "top-end",
                      showConfirmButton: false,
                      timer: 5000
                    });
                    return;
                  }
                }
              } else if (handler.responses[_i5].type === "image") {
                if (Boolean(handler.responses[_i5].source) === false) {
                  Swal({
                    text: "Image Response cannot be empty in manage handler",
                    type: "warning",
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 5000
                  });
                  return;
                }

                if (this.reg_image.test(handler.responses[_i5].source) === false) {
                  Swal({
                    text: "Please enter a valid image URL in png or jpg format only in manage handler.",
                    type: "warning",
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 8000
                  });
                  return;
                }
              } else if (handler.responses[_i5].type === "video") {
                if (Boolean(handler.responses[_i5].source) === false) {
                  Swal({
                    text: "Video Response cannot be empty in manage handler",
                    type: "warning",
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 5000
                  });
                  return;
                }

                if (this.reg_url.test(handler.responses[_i5].source) === false) {
                  Swal({
                    text: "Please enter a valid video URL in manage handler",
                    type: "warning",
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 8000
                  });
                  return;
                }
              } else if (handler.responses[_i5].type === "choices") {
                for (var _j4 = 0; _j4 < handler.responses[_i5].choices.length; _j4++) {
                  if (Boolean(handler.responses[_i5].choices[_j4].title) === false || Boolean(handler.responses[_i5].choices[_j4].payload) === false) {
                    Swal({
                      text: "Choice Response cannot be empty in manage handler",
                      type: "warning",
                      toast: true,
                      position: "top-end",
                      showConfirmButton: false,
                      timer: 5000
                    });
                    return;
                  }
                }
              }
            }
          }
        }
      }

      if (!this.is_webhook_details) {
        this.is_webhook = false;
        this.webhook_mapping = [];
      }

      if (this.is_webhook) {
        if (!Boolean(this.webhook_id)) {
          Swal({
            text: "Please select webhook name",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
          return;
        }

        if (!Boolean(this.webhook_variable)) {
          Swal({
            text: "Please enter webhook return variable name",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 8000
          });
          return;
        }

        if (!Boolean(this.webhook_mapping.length)) {
          Swal({
            text: "Atleast add one webhook parameter",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 8000
          });
          return;
        } else {
          for (var index = 0; index < this.webhook_mapping.length; index++) {
            if (!Boolean(this.webhook_mapping[index].key) || !Boolean(this.webhook_mapping[index].value)) {
              Swal({
                text: "Webhook parameter can not be empty",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 8000
              });
              return;
            }
          }
        }
      }

      if (this.is_notification) {
        if (this.notifications.notify[0].type == "" || this.notifications.notify[0].type == null) {
          Swal({
            text: "Please select notification type",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
          return;
        }

        if (this.notifications.notify[0].slot == "" || this.notifications.notify[0].slot == null) {
          Swal({
            text: "Please enter variable name",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
          return;
        }

        if (this.notifications.notify[0].template_name == "" || this.notifications.notify[0].template_name == null) {
          Swal({
            text: "Please select template name",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000
          });
          return;
        }

        if (this.notifications.responses.length < 1) {
          Swal({
            text: "Please add responses for the notification in both cases of notification successful & unsuccessful.",
            type: "warning",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 8000
          });
          return;
        } else {
          var check_notification_successful_response = false;
          var check_notification_unsuccessful_response = false;

          for (var _l2 = 0; _l2 < this.notifications.responses.length; _l2++) {
            var notification_response_id = this.notifications.responses[_l2];

            if (this.assistant_response[notification_response_id].condition === "!successful") {
              check_notification_successful_response = true;
            }

            if (this.assistant_response[notification_response_id].condition === "!unsuccessful") {
              check_notification_unsuccessful_response = true;
            }
          }

          if (!Boolean(check_notification_successful_response)) {
            Swal({
              text: "Please add responses for the notification in case of notification successful.",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 8000
            });
            return;
          } else if (!Boolean(check_notification_unsuccessful_response)) {
            Swal({
              text: "Please add responses for the notification in case of notification unsuccessful.",
              type: "warning",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 8000
            });
            return;
          }
        }
      } else {
        this.notifications = {
          "notify": [{
            "type": "",
            "slot": "",
            "template_id": "",
            "template_name": ""
          }],
          "responses": []
        };
      }

      if (this.assistant_response.length < 1) {
        Swal({
          text: "Add atleast one Response to node",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      } else if (this.assistant_response.length > 0) {
        for (var _i6 = 0; _i6 < this.assistant_response.length; _i6++) {
          if (this.assistant_response[_i6].type === "text") {
            for (var _j5 = 0; _j5 < this.assistant_response[_i6].values.length; _j5++) {
              if (Boolean(this.assistant_response[_i6].values[_j5]) === false) {
                Swal({
                  text: "Text Response cannot be empty",
                  type: "warning",
                  toast: true,
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 5000
                });
                return;
              }
            }
          } else if (this.assistant_response[_i6].type === "image") {
            if (Boolean(this.assistant_response[_i6].source) === false) {
              Swal({
                text: "Image Response cannot be empty",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 5000
              });
              return;
            }

            if (this.reg_image.test(this.assistant_response[_i6].source) === false) {
              Swal({
                text: "Please enter a valid image URL in png or jpg format only.",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 8000
              });
              return;
            }
          } else if (this.assistant_response[_i6].type === "video") {
            if (Boolean(this.assistant_response[_i6].source) === false) {
              Swal({
                text: "Video Response cannot be empty",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 5000
              });
              return;
            }

            if (this.reg_url.test(this.assistant_response[_i6].source) === false) {
              Swal({
                text: "Please enter a valid video URL.",
                type: "warning",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 8000
              });
              return;
            }
          } else if (this.assistant_response[_i6].type === "choices") {
            for (var _j6 = 0; _j6 < this.assistant_response[_i6].choices.length; _j6++) {
              if (Boolean(this.assistant_response[_i6].choices[_j6].title) === false || Boolean(this.assistant_response[_i6].choices[_j6].payload) === false) {
                Swal({
                  text: "Choice Response cannot be empty",
                  type: "warning",
                  toast: true,
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 5000
                });
                return;
              }
            }
          }
        }
      }

      if (!this.next_step.behavior) {
        Swal({
          text: "Select a Next Step for Node",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.save_then_assistant_should == "jump_to" && this.jump_to_node_id == "") {
        Swal({
          text: "Select a Node Id to jump",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.is_slot && this.slots.length != 0) {
        this.node_type = "form";
      } else {
        this.node_type = "basic";
      }

      var new_triggers = this.triggers;
      var new_assistant_response = this.assistant_response;
      var new_slots = this.slots;
      var webhook_mapping = this.webhook_mapping;
      var manage_handlers = this.manage_handlers;
      var new_next_step = this.next_step;
      var node = new TreeNode({
        name: this.node_name,
        node_name: this.node_type + "_" + this.node_name,
        node_type: this.node_type,
        is_leaf: false,
        is_root: true,
        triggers: new_triggers,
        responses: new_assistant_response,
        slot_setting: this.is_slot,
        notification_enabled: this.is_notification,
        slots: this.is_slot ? new_slots : null,
        notifications: this.is_notification ? this.notifications : null,
        next_step: new_next_step,
        webhook_integration: this.is_webhook,
        webhook_id: this.is_webhook ? this.webhook_id : null,
        webhook_return_variable: this.is_webhook ? this.webhook_variable : "",
        webhook_mapping: this.is_webhook ? webhook_mapping : null,
        editNodeDisabled: true,
        manage_handlers: manage_handlers.length > 0 && this.is_slot ? manage_handlers : null // addTreeNodeDisabled: true,
        // addLeafNodeDisabled: true

      });
      if (!this.data.children) this.data.children = [];
      this.data.addChildren(node);
      this.nodes_list.push({
        id: node.id,
        name: node.name
      });
      this.pushNewTree("addnode");
      this.empty_variable(); // document.getElementById("add_trigger_btn").style.display = "block";

      $("#addnodemodal").modal("hide");
    },
    empty_variable: function empty_variable() {
      this.node_id = "";
      this.node_name = "";
      this.node_type = "";
      this.is_root = false;
      this.is_slot = false;
      this.is_notification = false;
      this.is_webhook = false;
      this.webhook_id = null;
      this.webhook_variable = "";
      this.webhook_mapping = [];
      this.triggers = [{
        trigger_type: "",
        trigger_value: ""
      }];
      this.assistant_response = [];
      this.slots = [];
      this.manage_handlers = [];
      this.notifications = {
        "notify": [{
          "type": "",
          "slot": "",
          "template_id": "",
          "template_name": ""
        }],
        "responses": []
      }, this.next_step = {};
      this.save_then_assistant_should = "";
      this.jump_to_node_id = "";
      this.is_show_edit = false; // document.getElementById("add_trigger_btn").style.display = "block";
    },
    pushNewTree: function pushNewTree(from) {
      var _this14 = this;

      var vm = this;

      function _dfs(oldNode) {
        var newNode = {};

        for (var k in oldNode) {
          if (k !== "children" && k !== "parent") {
            newNode[k] = oldNode[k];
          }
        }

        if (oldNode.children && oldNode.children.length > 0) {
          newNode.children = [];

          for (var i = 0, len = oldNode.children.length; i < len; i++) {
            newNode.children.push(_dfs(oldNode.children[i]));
          }
        }

        return newNode;
      }

      vm.newTree = _dfs(vm.data);
      axios.post(api_calls.form_automation_dialog_tree(), {
        company_id: vm.$session.get("UserInformation").company_id,
        company_name: vm.$session.get("UserInformation").company_name,
        is_save: true,
        node_structure: vm.newTree
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        if (response.data.MSG == "Node Structure Saved Successfully") {
          if (from == "addnode") {
            Swal({
              type: "success",
              text: "Node Added Successfully",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
          } else if (from == "childnode") {
            Swal({
              type: "success",
              text: "Child Node Added Successfully",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
          } else if (from == "editnode") {
            Swal({
              type: "success",
              text: "Node Edited Successfully",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
          } else if (from == "deletenode") {
            Swal({
              type: "success",
              text: "Node Deleted Successfully",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
          } else {
            Swal({
              type: "success",
              text: "Dialog Updated Successfully",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 5000
            });
          }
        }
      }).catch(function (e) {
        _this14.spinnerOn = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this14.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    testNewTree: function testNewTree() {
      var vm = this;

      function _dfs(oldNode) {
        var newNode = {};

        for (var k in oldNode) {
          if (k !== "children" && k !== "parent") {
            newNode[k] = oldNode[k];
          }
        }

        if (oldNode.children && oldNode.children.length > 0) {
          newNode.children = [];

          for (var i = 0, len = oldNode.children.length; i < len; i++) {
            newNode.children.push(_dfs(oldNode.children[i]));
          }
        }

        return newNode;
      }

      vm.newTree = _dfs(vm.data);
    },
    remove_current_node_jump_name: function remove_current_node_jump_name(arr, value) {
      var update_list = false;

      for (var i = 0, len = arr.length; i < len; i++) {
        var found = arr[i].some(function (val) {
          return val.name === value;
        });

        if (found == true) {
          this.updated_node_list = arr[i].filter(function (item) {
            return item.name !== value;
          });
          update_list = true;
          break;
        }
      }

      if (update_list === false) {
        this.updated_node_list = [];
      }
    },
    set_next_step: function set_next_step() {
      this.next_step = {
        behavior: this.save_then_assistant_should,
        node_id: this.save_then_assistant_should == "jump_to" ? this.jump_to_node_id.toString() : null,
        selector: this.save_then_assistant_should == "jump_to" ? "respond" : "wait_for_user_input"
      };
    },
    add_to_triggers_list: function add_to_triggers_list(func, index) {
      if (func == "add") {
        this.triggers.push({
          trigger_type: "",
          trigger_value: ""
        });
      } else if (func == "remove") {
        this.triggers.splice(index, 1);
      } // if (this.is_root && this.triggers.length > 0) {
      //   document.getElementById("add_trigger_btn").style.display = "none";
      // }

    },
    manage_handlers_change_trigger_value: function manage_handlers_change_trigger_value(type, index, ind) {
      if (type === "intent") {
        this.manage_handlers[ind].triggers[index].trigger_value = "";
        delete this.manage_handlers[ind].triggers[index].operand;
        delete this.manage_handlers[ind].triggers[index].entity_value;
      } else if (type === "entity") {
        this.manage_handlers[ind].triggers[index].trigger_value = "";
        this.manage_handlers[ind].triggers[index].operand = "";
        this.manage_handlers[ind].triggers[index].entity_value = "";
      }
    },
    change_trigger_value: function change_trigger_value(type, index) {
      if (type === "intent") {
        this.triggers[index].trigger_value = "";
        delete this.triggers[index].operand;
        delete this.triggers[index].entity_value;
      } else if (type === "entity") {
        this.triggers[index].trigger_value = "";
        this.triggers[index].operand = "";
        this.triggers[index].entity_value = "";
      }
    },
    manage_handlers_change_trigger_type: function manage_handlers_change_trigger_type(type, value, index, ind) {
      if (type === "intent") {
        this.manage_handlers[ind].name = '#' + value;
        delete this.manage_handlers[ind].triggers[index].operand;
        delete this.manage_handlers[ind].triggers[index].entity_value;
      } else if (type === "entity") {
        if (value.substring(0, 1) === "@") {
          this.manage_handlers[ind].name = '#' + value.substring(1, value.length);
        } else {
          this.manage_handlers[ind].name = '#' + value;
        }

        if (this.is_entity_type_sys_pattern(value)) {
          this.manage_handlers[ind].triggers[index].operand = "any";
          this.manage_handlers[ind].triggers[index].entity_value = "";
        } else {
          this.manage_handlers[ind].triggers[index].operand = "";
          this.manage_handlers[ind].triggers[index].entity_value = "";
        }
      }
    },
    change_trigger_type: function change_trigger_type(type, value, index) {
      // @click="change_trigger_type(trigger.trigger_value, index)"
      // Here add detection of whether the value selected is intent or entity
      // if (Boolean(value.entity)) {
      //   this.triggers[index].trigger_type = "entity";
      // } else {
      //   this.triggers[index].trigger_type = "intent";
      // }
      if (this.is_root) {
        this.triggers[index].trigger_type = "intent";
      }

      if (type === "intent") {
        delete this.triggers[index].operand;
        delete this.triggers[index].entity_value;
      } else if (type === "entity") {
        if (this.is_entity_type_sys_pattern(value)) {
          this.triggers[index].operand = "any";
          this.triggers[index].entity_value = "";
        } else {
          this.triggers[index].operand = "";
          this.triggers[index].entity_value = "";
        }
      }
    },
    manage_handlers_change_trigger_entity_value: function manage_handlers_change_trigger_entity_value(operand, index, ind) {
      var vm = this;
      vm.$set(vm.manage_handlers[ind].triggers, index, vm.manage_handlers[ind].triggers[index]);
      this.manage_handlers[ind].triggers[index].entity_value = "";
    },
    change_trigger_entity_value: function change_trigger_entity_value(operand, index) {
      var vm = this;
      vm.$set(vm.triggers, index, vm.triggers[index]);
      this.triggers[index].entity_value = "";
    },
    manage_handlers_set_trigger_entity_value: function manage_handlers_set_trigger_entity_value(entity_value, index, ind) {
      var vm = this;
      vm.$set(vm.manage_handlers[ind].triggers, index, vm.manage_handlers[ind].triggers[index]);
    },
    set_trigger_entity_value: function set_trigger_entity_value(entity_value, index) {
      var vm = this;
      vm.$set(vm.triggers, index, vm.triggers[index]);
    },
    add_to_webhook_mapping: function add_to_webhook_mapping(func, index) {
      if (func == "add") {
        this.webhook_mapping.push({
          key: "",
          value: ""
        });
      } else if (func == "remove") {
        this.webhook_mapping.splice(index, 1);
      }
    },
    // set_slot_setting(index, check_for, slot) {
    //   this.edit_slot_index = index;
    //   this.edit_slot_check_for = check_for;
    //   this.edit_slot_slot_variable = slot;
    // },
    set_slot_entity_variable: function set_slot_entity_variable(index, entity) {
      entity = entity.slice(1);

      for (var i in this.slots) {
        if (i == index) {
          this.slots[i].slot = "$" + entity;
        }
      }
    },
    set_notifications_notify_template_id: function set_notifications_notify_template_id(template_name) {
      this.notifications.notify[0].template_id = this.notifications_notify_template_list.filter(function (name) {
        return name.template_name === template_name;
      }).map(function (id) {
        return id.template_id;
      })[0];
    },
    on_open_webhook_modal: function on_open_webhook_modal(variable) {
      this.webhook_assistant_response = [];

      for (var i in this.assistant_response) {
        if (this.assistant_response[i].recognizes == variable) {
          this.webhook_assistant_response.push(this.assistant_response[i]);
        }
      }
    },
    on_close_webhook_modal: function on_close_webhook_modal() {
      this.webhook_assistant_response = [];
    },
    on_open_slots_modal: function on_open_slots_modal(slot, index, check_for) {
      this.edit_slot_index = index;
      this.edit_slot_check_for = check_for;
      this.edit_slot_slot_variable = slot;
      this.unfilled_slot_assistant_response = [];
      this.validation_slot_assistant_response = [];

      for (var i in this.assistant_response) {
        if (this.assistant_response[i].recognizes == slot && this.assistant_response[i].condition === "unfilled_slot") {
          this.unfilled_slot_assistant_response.push(this.assistant_response[i]);
        }

        if (this.assistant_response[i].recognizes == slot && this.assistant_response[i].condition === "validation_response") {
          this.validation_slot_assistant_response.push(this.assistant_response[i]);
        }
      }

      this.search_for_entity_has_validation(check_for);
    },
    on_close_slots_modal: function on_close_slots_modal() {
      this.unfilled_slot_assistant_response = [];
      this.validation_slot_assistant_response = [];
      this.is_validation_entity = false;
      this.edit_slot_index = "";
      this.edit_slot_check_for = "";
      this.edit_slot_slot_variable = "";
    },
    on_open_notification_modal: function on_open_notification_modal() {
      this.notification_successful_assistant_response = [];
      this.notification_unsuccessful_assistant_response = [];

      for (var i in this.assistant_response) {
        if (this.assistant_response[i].recognizes == "successful") {
          this.notification_successful_assistant_response.push(this.assistant_response[i]);
        }
      }

      for (var i in this.assistant_response) {
        if (this.assistant_response[i].recognizes == "unsuccessful") {
          this.notification_unsuccessful_assistant_response.push(this.assistant_response[i]);
        }
      }
    },
    on_close_manage_handlers: function on_close_manage_handlers() {},
    on_close_notification_modal: function on_close_notification_modal() {
      this.notification_successful_assistant_response = [];
      this.notification_unsuccessful_assistant_response = [];
    },
    webhook_to_assistant_response: function webhook_to_assistant_response(func, webhook, index) {
      if (func == "remove") {
        index = this.assistant_response.findIndex(function (x) {
          return x.id == index;
        });

        for (var i in this.assistant_response) {
          if (this.assistant_response[i].id == index && this.assistant_response[i].recognizes == webhook) {
            // this.slots[this.edit_slot_index].responses.splice(this.assistant_response[i].id, 1);
            this.assistant_response.splice(index, 1);
          }
        }
      }

      if (func == "add" && this.selected_response_type == "text") {
        this.assistant_response.push({
          id: this.assistant_response.length,
          type: this.selected_response_type,
          condition: "unfilled",
          recognizes: webhook,
          variation: "random",
          values: [""]
        });
      } else if (func == "add" && this.selected_response_type == "image") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: "image",
          condition: "unfilled",
          recognizes: webhook,
          variation: "random",
          source: ""
        });
      } else if (func == "add" && this.selected_response_type == "video") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: "video",
          condition: "unfilled",
          recognizes: webhook,
          variation: "random",
          source: ""
        });
      } else if (func == "add" && this.selected_response_type == "choices") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: "choices",
          condition: "unfilled",
          recognizes: webhook,
          variation: "random",
          title: "",
          description: "",
          choices: [{
            title: "",
            payload: ""
          }]
        });
      }

      this.arrange_ids_function();
      this.on_open_webhook_modal(webhook);
    },
    remove_notification_to_assistant_response: function remove_notification_to_assistant_response(index, recognizes) {
      index = this.assistant_response.findIndex(function (x) {
        return x.id == index;
      });

      for (var i in this.assistant_response) {
        if (this.assistant_response[i].id == index && this.assistant_response[i].recognizes == recognizes) {
          this.assistant_response.splice(index, 1);
        }
      }

      this.on_open_notification_modal();
      this.arrange_ids_function_for_notification();
    },
    manage_handlers_add_to_assistant_response_list: function manage_handlers_add_to_assistant_response_list(func, ind, index) {
      if (func == "add" && this.selected_response_type == "text") {
        this.manage_handlers[ind].responses.push({
          id: this.manage_handlers[ind].responses.length.toString(),
          type: this.selected_response_type,
          condition: false,
          recognizes: null,
          variation: "random",
          values: [""]
        });
      } else if (func == "add" && this.selected_response_type == "image") {
        this.manage_handlers[ind].responses.push({
          id: this.manage_handlers[ind].responses.length.toString(),
          type: this.selected_response_type,
          condition: false,
          recognizes: null,
          variation: "random",
          source: ""
        });
      } else if (func == "add" && this.selected_response_type == "video") {
        this.manage_handlers[ind].responses.push({
          id: this.manage_handlers[ind].responses.length.toString(),
          type: this.selected_response_type,
          condition: false,
          recognizes: null,
          variation: "random",
          source: ""
        });
      } else if (func == "add" && this.selected_response_type == "choices") {
        this.manage_handlers[ind].responses.push({
          id: this.manage_handlers[ind].responses.length.toString(),
          type: this.selected_response_type,
          condition: false,
          recognizes: null,
          variation: "random",
          title: "",
          description: "",
          choices: [{
            title: "",
            payload: ""
          }]
        });
      } else if (func == "remove") {
        this.manage_handlers[ind].responses.splice(index, 1);
        this.manage_handlers_arrange_ids_function(ind);
      }
    },
    add_notification_successful_to_assistant_response: function add_notification_successful_to_assistant_response(type) {
      if (this.notifications.notify[0].type == "" || this.notifications.notify[0].type == null) {
        Swal({
          text: "Select notification type first",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.notifications.notify[0].slot == "" || this.notifications.notify[0].slot == null) {
        Swal({
          text: "Enter variable name first",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.notifications.notify[0].template_name == "" || this.notifications.notify[0].template_name == null) {
        Swal({
          text: "Select template name first",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (this.selected_response_type == "text") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: "text",
          condition: "!" + type,
          recognizes: type,
          variation: "random",
          values: [""]
        });
      } else if (this.selected_response_type == "image") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: "image",
          condition: "!" + type,
          recognizes: type,
          variation: "random",
          source: ""
        });
      } else if (this.selected_response_type == "video") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: "video",
          condition: "!" + type,
          recognizes: type,
          variation: "random",
          source: ""
        });
      } else if (this.selected_response_type == "choices") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: "choices",
          condition: "!" + type,
          recognizes: type,
          variation: "random",
          title: "",
          description: "",
          choices: [{
            title: "",
            payload: ""
          }]
        });
      }

      this.notifications.responses.push((this.assistant_response.length - 1).toString());
      this.on_open_notification_modal();
    },
    remove_slot_to_assistant_response: function remove_slot_to_assistant_response(index, slot, from) {
      if (from == "slotmodal") {
        index = this.assistant_response.findIndex(function (x) {
          return x.id == index;
        });

        for (var i in this.assistant_response) {
          if (this.assistant_response[i].id == index && this.assistant_response[i].recognizes == slot) {
            // this.slots[this.edit_slot_index].responses.splice(this.assistant_response[i].id, 1);
            this.assistant_response.splice(index, 1);
          }
        }

        this.on_open_slots_modal(slot, this.edit_slot_index);
      } else {
        var id = index;

        for (var i in this.assistant_response) {
          if (this.assistant_response[i].id == id && this.assistant_response[i].recognizes == slot) {
            // this.slots[index].responses.splice(this.assistant_response[i].id, 1);
            this.assistant_response.splice(this.assistant_response[i], 1);
          }
        }
      }

      this.arrange_ids_function();
    },
    add_slot_to_assistant_response: function add_slot_to_assistant_response(from, index, check_for, slot, response, condition_type) {
      if (slot == "" || slot == null) {
        Swal({
          text: "Add Entity first",
          type: "warning",
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }

      if (from == "text") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: "text",
          condition: "unfilled_slot",
          recognizes: slot,
          variation: "random",
          values: [response]
        }); // document.getElementById("checkfocus").disabled = true;

        this.slots[index].responses = [];
        this.slots[index].responses.push((this.assistant_response.length - 1).toString());
        this.on_open_slots_modal(this.edit_slot_slot_variable, this.edit_slot_index);
      }

      if (from == "Addbtn") {
        if (this.selected_response_type == "text") {
          this.assistant_response.push({
            id: this.assistant_response.length.toString(),
            type: "text",
            condition: condition_type,
            recognizes: slot,
            variation: "random",
            values: [""]
          });
        } else if (this.selected_response_type == "image") {
          this.assistant_response.push({
            id: this.assistant_response.length.toString(),
            type: "image",
            condition: condition_type,
            recognizes: slot,
            variation: "random",
            source: ""
          });
        } else if (this.selected_response_type == "video") {
          this.assistant_response.push({
            id: this.assistant_response.length.toString(),
            type: "video",
            condition: condition_type,
            recognizes: slot,
            variation: "random",
            source: ""
          });
        } else if (this.selected_response_type == "choices") {
          this.assistant_response.push({
            id: this.assistant_response.length.toString(),
            type: "choices",
            condition: condition_type,
            recognizes: slot,
            variation: "random",
            title: "",
            description: "",
            choices: [{
              title: "",
              payload: ""
            }]
          });
        }

        this.slots[this.edit_slot_index].responses.push((this.assistant_response.length - 1).toString());
        this.on_open_slots_modal(this.edit_slot_slot_variable, this.edit_slot_index);
      }
    },
    add_to_slots_list: function add_to_slots_list(func, index, response_id) {
      if (func == "add") {
        this.slots.push({
          id: this.slots.length.toString(),
          check_for: "",
          slot: "",
          responses: []
        });
      } else if (func == "remove") {
        this.slots.splice(index, 1);

        for (var i in response_id) {
          for (var j in this.assistant_response) {
            if (response_id[i] == this.assistant_response[j].id) {
              this.assistant_response.splice(j, 1);
            }
          }
        }

        this.arrange_ids_function();

        if (this.slots != []) {
          for (var i in this.slots) {
            this.slots[i].id = i.toString();
          }
        }
      }
    },
    manage_handlers_select_response_variation: function manage_handlers_select_response_variation(index, variation, ind) {
      this.manage_handlers[ind].responses[index].variation = variation;
    },
    select_response_variation: function select_response_variation(index, variation) {
      this.assistant_response[index].variation = variation;
    },
    manage_handler_add_to_assistant_response_text_list: function manage_handler_add_to_assistant_response_text_list(func, index, ind, num) {
      if (func == "add") {
        this.manage_handlers[ind].responses[index].values.push("");
      } else if (func == "remove") {
        this.manage_handlers[ind].responses[index].values.splice(num, 1);
      }
    },
    add_to_assistant_response_text_list: function add_to_assistant_response_text_list(func, index, num) {
      if (func == "add") {
        this.assistant_response[index].values.push("");
      } else if (func == "remove") {
        this.assistant_response[index].values.splice(num, 1);
      }
    },
    manage_handlers_add_to_assistant_response_choice_list: function manage_handlers_add_to_assistant_response_choice_list(func, index, ind, num) {
      if (func == "add") {
        this.manage_handlers[ind].responses[index].choices.push({
          title: "",
          payload: ""
        });
      } else if (func == "remove") {
        this.manage_handlers[ind].responses[index].choices.splice(num, 1);
      }
    },
    add_to_assistant_response_choice_list: function add_to_assistant_response_choice_list(func, index, num) {
      if (func == "add") {
        this.assistant_response[index].choices.push({
          title: "",
          payload: ""
        });
      } else if (func == "remove") {
        this.assistant_response[index].choices.splice(num, 1);
      }
    },
    add_to_assistant_response_list: function add_to_assistant_response_list(func, index) {
      if (func == "add" && this.selected_response_type == "text") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: this.selected_response_type,
          condition: false,
          recognizes: null,
          variation: "random",
          values: [""]
        });
      } else if (func == "add" && this.selected_response_type == "image") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: this.selected_response_type,
          condition: false,
          recognizes: null,
          variation: "random",
          source: ""
        });
      } else if (func == "add" && this.selected_response_type == "video") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: this.selected_response_type,
          condition: false,
          recognizes: null,
          variation: "random",
          source: ""
        });
      } else if (func == "add" && this.selected_response_type == "choices") {
        this.assistant_response.push({
          id: this.assistant_response.length.toString(),
          type: this.selected_response_type,
          condition: false,
          recognizes: null,
          variation: "random",
          title: "",
          description: "",
          choices: [{
            title: "",
            payload: ""
          }]
        });
      } else if (func == "remove") {
        this.assistant_response.splice(index, 1);
        this.arrange_ids_function();
      }
    }
  }
};"},null]}