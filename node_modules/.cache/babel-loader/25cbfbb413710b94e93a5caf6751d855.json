{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/eslint-loader/index.js??ref--13-0!/home/vimalesh/CENSE/chatbot-portal/src/portal/mixins/datafile.js","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/mixins/datafile.js","mtime":1645594423495},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJvdXRlcyA9IFt7CiAgbmFtZTogJ05ld0ludGVudFBhZ2UnLAogIHBhZ2VfcGF0aDogJy9ib3QvaW50ZW50cycsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+SW50ZW50IEhlbHA8L2gzPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvaW50ZW50aGVscC5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDc3NXB4OyBoZWlnaHQ6IDM5MHB4OyIgYWx0PSJzaW1wbGUgdGV4dCIgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGp1c3RpZnk7Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gU2VhcmNoIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBjbGlja2luZywgdGhlIHVzZXIgY2FuIHNlYXJjaCBmb3IgYSBwYXJ0aWN1bGFyIGludGVudFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXMgc2hvd24gaW4gdGhlIGxpc3QuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBBZGQgSW50ZW50IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3UgY2FuIGFkZCBpbnRlbnQgbmFtZSBhbmQgUXVlc3Rpb24gcmVsYXRlZCB0byBpbnRlbnQuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3UgY2FuIHNlbGVjdCBhbnkga2luZCBvZiByZXNwb25zZSBhbmQgb3RoZXIgZmllbGRzIHRvbyBhbmQgeW91IGNhbiBhZGRcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3NlIGRldGFpbHMgZm9yIGEgcGFydGljdWxhciBpbnRlbnQuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4zLiBVcGxvYWQgRmlsZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVyZSB5b3UgY2FuIHVwbG9hZCBvbmx5IGEgLkNTViBmaWxlLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kIHlvdSBjYW4gYWxzbyBkb3dubG9hZCBhIHNhbXBsZSBDU1YgZmlsZSB0byB2aWV3IHRoZSBmb3JtYXQgb2YgZmlsZS48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjQuIERvd25sb2FkIENTViBGaWxlIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBjbGlja2luZyBkb3dubG9hZCBidXR0b24sIHRoZSB1c2VyIHdpbGwgaGF2ZSBhIFF1ZXN0aW9uLWludGVudC5jc3YgZmlsZVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRlZCBpbiB0aGVpciBzeXN0ZW0uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGlzIGZpbGUgd2lsbCBjb250YWluIGFsbCB0aGUgZGV0YWlscyByZWdhcmRpbmcgZXZlcnkgZmllbGQgaW5jbHVkZWQgaW4gaW50ZW50cy48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjUuIFRyYWluIE1vZGVsIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlLCBpZiB5b3UgaGF2ZSB1cGRhdGVkIG9yIG1hZGUgYW55IGNoYW5nZXMgdGhlbiB5b3UgaGF2ZSB0byB0cmFpbiB5b3VyIGJvdFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gcmVmbGVjdCBhbGwgdGhvc2UgY2hhbmdlcy48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjYuIERlbGV0ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhlIHNlbGVjdGVkIGludGVudCB3aWxsIGdldCBkZWxldGVkIGRlcGVuZHMgb24gdGhlIHNpbmdsZSBvciBtdWx0aXBsZSBzZWxlY3Rpb24uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj43LiBFZGl0IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBjbGlja2luZywgYWxsIHRoZSBkZXRhaWxzIHdoaWNoIGFyZSBsaXN0ZWQgaW4gdGhlIGludGVudCBzZWN0aW9uIHdpbGwgYmUgdXBkYXRlZDwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW4gb3JkZXIgdG8gcmVmbGVjdCB0aGlzIGNoYW5nZXMsIHVzZXIgaGF2ZSB0byBjbGljayBvbiBTYXZlIGJ1dHRvbiBkb3duIGJlbG93LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogJ0Rhc2hib2FyZCcsCiAgcGFnZV9wYXRoOiAnL2JvdC9kYXNoYm9hcmQnLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkRhc2hib2FyZCBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2Rhc2hib2FyZGhlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NjVweDsgaGVpZ2h0OiAzNDBweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIE5hbWUgb2YgQ3VzdG9tZXIgd2hvIGxvZ2luIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OYW1lIG9mIHRoZSBwZXJzb24gaXMgc2hvd24gaW4gV2VsY29tZSB7PGI+WW91ciBOYW1lPC9iPn08L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjIuIFNpZGViYXIgTWVudSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VXNlcnMgY2FuIG5hdmlnYXRlIHRocm91Z2ggZGlmZmVyZW50IHNlY3Rpb25zIG9mIE1lbnUgYW5kIHRoZWlyIFN1Ym1lbnUuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CeSBjbGlja2luZyBvbiB0aGUgc3VibWVudSwgeW91IHdpbGwgYmUgcmVkaXJlY3RlZCB0byB0aGUgcmVzcGVjdGl2ZSBwYWdlLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+My4gTm90aWZpY2F0aW9uIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3Ugd2lsbCBnZXQgbm90aWZpY2F0aW9uIGZvciB5b3VyIGxhdGVzdCB1cGRhdGVzLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+NC4gUGVyc29uIExvZ2dlZCBpbiBkZXRhaWxzIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Vc2VycyBwcm9maWxlIGRldGFpbHMgYXJlIGF2YWlsYWJsZSBoZXJlLCB3aGVyZSB5b3UgaGF2ZSBhbiBvcHRpb24gdG8gZWRpdCB5b3VyIHBhcnRpY3VsYXIgZGF0YSwgQ2hhbmdlIHlvdXIgcGFzc3dvcmQgYW5kIHRoZW4gc2F2ZSBpdCBzdWNjZXNzZnVsbHkuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj41LiBRdWljayBMaW5rIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5RdWljayBsaW5rcyBhcmUgYSBjb2xsZWN0aW9uIG9mIGxpbmtzIHRvIGZyZXF1ZW50bHkgdXNlZCBhcHBsaWNhdGlvbiBwYWdlcywgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggYWxsb3cgdXNlcnMgdG8gY29tcGxldGUgY29tbW9uIGFjdGlvbnMgcmVnYXJkaW5nIGJvdC48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjYuIENoYXRib3QgUmVxdWVzdCAtIFJlc3BvbnNlIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JbiB0aGUgZ3JhcGgsIHlvdSBjYW4gY2hlY2sgdGhlIGRhdGEgZm9yIGhvdyBtYW55IFJlc3BvbnNlcyBhcmUgZ2VuZXJhdGVkIGJ5IGJvdCwgeW91IGNhbiBjaGVjayBTdWNjZXNzZnVsLyBVbnN1Y2Nlc3NmdWxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSBieSBwb2ludGluZyBvdXQgaW4gYmFyIGdyYXBoLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogIkVudGl0aWVzIiwKICBwYWdlX3BhdGg6ICIvYm90L2VudGl0aWVzIiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogJzxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5FbnRpdGllcyBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2VudGl0aWVzaGVscC5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDc0NXB4OyBoZWlnaHQ6IDMyNXB4OyIgYWx0PSJzaW1wbGUgdGV4dCIgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGp1c3RpZnk7Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gU2VhcmNoIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBjbGlja2luZywgdGhlIHVzZXIgY2FuIHNlYXJjaCBmb3IgYSBwYXJ0aWN1bGFyIGVudGl0eS48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjIuIEFkZCBFbnRpdHkgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkl0IHdpbGwgcmVkaXJlY3QgdG8gRGVtbyBhc3Npc3RhbnQgcGFnZSA9PiBFbnRpdGllcyA9PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbiB5b3UgaGF2ZSB0byBjcmVhdGUgeW91ciBlbnRpdHkuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZnRlciBjcmVhdGluZywgeW91IGhhdmUgdG8gYWRkIGFsbCB0aGUgcmVxdWlyZWQgZmllbGQgd2hpY2ggeW91IHdhbnQgYW5kIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmUgaXQgYnkgY2xpY2tpbmcgb24gc2F2ZSBidXR0b24uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4zLiBEZWxldGUgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZSBzZWxlY3RlZCBlbnRpdHkgbmFtZSBhbmQgaXRzIHZhbHVlIHdpbGwgZ2V0IGRlbGV0ZWQgZGVwZW5kcyBvbiB0aGUgc2luZ2xlIG9yIG11bHRpcGxlIHNlbGVjdGlvbi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjQuIEVkaXQgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+T24gY2xpY2tpbmcsWW91IGNhbiBlZGl0IGFsbCB0aGUgZGV0YWlscyB3aGljaCBhcmUgbGlzdGVkIGluIHRoZSBzZWN0aW9uXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGVuIHRvIHJlZmxlY3QgdGhvc2UgY2hhbmdlcywgeW91IGhhdmUgdG8gY2xpY2sgb24gU2F2ZSBidXR0b248L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JwogIH0KfSwgewogIG5hbWU6ICJORVIgVHJhaW5pbmciLAogIHBhZ2VfcGF0aDogIi9ib3QvbmVyLXRyYWluaW5nIiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogJzxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5ORVIgTW9kZWwgSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9ORVJfbW9kZWxfaGVscC5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDc1MHB4OyBoZWlnaHQ6IDM3NXB4OyIgYWx0PSJzaW1wbGUgdGV4dCIgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGp1c3RpZnk7Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gU2VhcmNoIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBjbGlja2luZywgdGhlIHVzZXIgY2FuIHNlYXJjaCBmb3IgYSBwYXJ0aWN1bGFyIGludGVudFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXMgc2hvd24gaW4gdGhlIGxpc3Q8L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjIuIEFkZCBUaGUgTkVSIFRhZ3MgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBjYW4gY3JlYXRlIHlvdXIgZW50aXRpZXMgYW5kIGl0cyBjb3JyZXNwb25kaW5nIFRhZ3Mgd2lsbCBiZSBjcmVhdGVkIGJ5IHRoYXQgbmFtZVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHdpbGwgYmUgc2hvd24gaW4gQWRkZWQgdGFncy48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjMuIEFkZCBhIFN0YXRlbWVudCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXQgd2lsbCBhc2sgeW91IHRvIGFkZCBhIFN0YXRlbWVudCB3aXRoIHJlc3BlY3QgdG8gVGFnczwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+NC4gVXBsb2FkIENTViBGaWxlIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBVcGxvYWQgYnV0dG9uLCB0aGUgdXNlciB3aWxsIGhhdmUgdG8gdXBsb2FkIG9ubHkgYSBDU1YgZmlsZTwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBhbHNvIGRvd25sb2FkIGEgc2FtcGxlIGZpbGUgdG8gc2VlIHRoZSBmb3JtYXQgb2YgdGhlIHJlcXVpcmVkIGZpbGUuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj41LiBUcmFpbiBORVIgTW9kZWwgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlcmUsIGlmIHlvdSBoYXZlIHVwZGF0ZWQgb3IgbWFkZSBhbnkgY2hhbmdlcyB0aGVuIHlvdSBoYXZlIHRvIHRyYWluIHlvdXIgYm90XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byByZWZsZWN0IGFsbCB0aG9zZSBjaGFuZ2VzLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Ni4gRGVsZXRlIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGUgc2VsZWN0ZWQgcm93IHdpbGwgZ2V0IGRlbGV0ZWQgZGVwZW5kcyBvbiB0aGUgc2luZ2xlIG9yIG11bHRpcGxlIHNlbGVjdGlvbiBmcm9tIHRoZSBsaXN0LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Ny4gU2F2ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxsIHRoZSBjaGFuZ2VzIHlvdSBoYXZlIG1hZGUgd2lsbCBiZSBzYXZlZCBvbmNlIHlvdSBjbGljayB0aGlzIGJ1dHRvbi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj44LiBFZGl0IFN0YXRlbWVudCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+T24gY2xpY2tpbmcsIHlvdSBjYW4gZWRpdCBhbGwgdGhlIGZpZWxkIGZvciBhIHBhcnRpY3VsYXIgZGF0YSBhbmQgdGhlblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgdG8gY2xpY2sgb24gc2F2ZSBidXR0b24gdG8gc2F2ZSB0aG9zZSBjaGFuZ2VzLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogIlRyYWluICYgVGVzdCBCb3QiLAogIHBhZ2VfcGF0aDogIi9ib3QvdHJhaW4tdGVzdC1ib3QiLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkltcHJvdmUgUHJlZGljdGlvbiBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2ltcHJvdmVwcmVkaWN0X2hlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NzVweDsgaGVpZ2h0OiAyOTBweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPiBTdWNjZXNzIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlLCBpZiB5b3VyIHByZWRpY3RlZCBvdXRjb21lIG1hdGNoZXMgd2l0aCB0aGUgaW50ZW50IHdoaWNoIGlzIGV4cGVjdGVkIGluIHRoZSBib3RcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW4gaXQgd2lsbCBzaG93IGluIHRoZSBzdWNjZXNzIHRhYmxlPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BIHRhYmxlIHdpbGwgYmUgc2hvd24gYmVsb3cgd2hlcmUgeW91IGNhbiBzZWUgYWxsIHRoZSBpbmZvcm1hdGlvbiBmb3IgYSBwYXJ0aWN1bGFyIHF1ZXN0aW9uLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+IEZhaWx1cmUgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlcmUsIGlmIHlvdXIgcHJlZGljdGVkIG91dGNvbWUgZG9lcyBub3QgbWF0Y2hlcyB3aXRoIHRoZSBpbnRlbnQgd2hpY2ggaXMgZXhwZWN0ZWQgaW4gdGhlIGJvdFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbiBpdCB3aWxsIHNob3cgaW4gdGhlIGZhaWx1cmUgdGFibGU8L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkEgdGFibGUgd2lsbCBiZSBzaG93biBiZWxvdyB3aGVyZSB5b3UgY2FuIHNlZSBhbGwgdGhlIGluZm9ybWF0aW9uIGZvciBhIHBhcnRpY3VsYXIgcXVlc3Rpb24uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4xLiBUcmFpbiAmIFRlc3QgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBjYW4gdHJhaW4geW91ciBtb2RlbCB0byB0ZXN0IGFsbCB0aGUgc3VjY2VzcyBhbmQgZmFpbHVyZSBpbnRlbnQgd2hpY2hcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBhZGRlZCB0byBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiBib3QuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBBZGQgYnV0dG9uIFsrXSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBhZGQgbW9yZSBxdWVzdGlvbiBmb3IgYSBwYXJ0aWN1bGFyIGludGVudCB0byBpbXByb3ZlIGl0cyByZXN1bHRcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvIHRoYXQgaXQgY2FuIG1hdGNoIHlvdXIgYm90aCBwcmVkaWN0ZWQgYW5kIGV4cGVjdGVkIG91dGNvbWVzLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogIlZlcmlmeSBCb3QgUmVzcG9uc2UiLAogIHBhZ2VfcGF0aDogIi9ib3QvdmVyaWZ5LXJlc3BvbnNlcyIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+VmVyaWZ5IFJlc3BvbnNlcyBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL3ZlcmlmeS1yZXNwb25zZWhlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NzBweDsgaGVpZ2h0OiAyOTBweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPiBVbmFuc3dlcmVkIFF1ZXN0aW9ucyA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QSBsaXN0IHdpbGwgc2hvdyB3aGVyZSB5b3UgZmluZCBxdWVzdGlvbnMgd2hpY2ggYXJlIG5vdCBhbnN3ZXJlZCBieSB0aGUgYm90XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBub3Qga25vd24gdG8gYm90LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+IFVzZXIgUmVzcG9uc2VzIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JdCB3aWxsIGdpdmUgeW91IGEgbGlzdCB3aGVyZSB5b3UgZmluZCBhIHVzZXIgcmVzcG9uc2UgZm9yIGEgcGFydGljdWxhciBxdWVzdGlvblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGl0IHdpbGwgaG93IHlvdSB0aGUgcHJlZGljdGVkIGludGVudCBhbmQgbmV3IGludGVudCBmb3IgYSBnaXZlbiBxdWVzdGlvbiBhc2tlZCBieSBhIFVzZXIuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4xLiBTZWFyY2ggOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9uIGNsaWNraW5nLCB0aGUgdXNlciBjYW4gc2VhcmNoIGZvciBhIHBhcnRpY3VsYXIgaW50ZW50XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBpcyBzaG93biBpbiB0aGUgYmVsb3cgdGFibGUgPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBUcmFpbiBUaGUgTW9kZWwgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlcmUsIGlmIHlvdSBoYXZlIHVwZGF0ZWQgb3IgbWFkZSBhbnkgY2hhbmdlcyB0aGVuIHlvdSBoYXZlIHRvIHRyYWluIHlvdXIgYm90XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byByZWZsZWN0IGFsbCB0aG9zZSBjaGFuZ2VzLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+My4gU2F2ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXQgd2lsbCBTYXZlIHRoZSBhZGRlZCBpbmZvcm1hdGlvbi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjQuIERlbGV0ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhlIHNlbGVjdGVkIGludGVudCB3aWxsIGdldCBkZWxldGVkIGRlcGVuZHMgb24gdGhlIHNpbmdsZSBvciBtdWx0aXBsZSBzZWxlY3Rpb248L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjUuIEVkaXQgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9uIGNsaWNraW5nLCB0aGUgdXNlciB3aWxsIGFibGUgdG8gbW9kaWZ5IG9yIGNoYW5nZSB0aGUgUXVlc3Rpb24gYW5kIGFmdGVyIHRoaXMgdXNlclwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSB0byBjbGljayBvbiBTYXZlIEJ1dHRvbiBpbiBvcmRlciB0byByZWZsZWN0IHRob3NlIGNoYW5nZXMuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAiU2V0dGluZ3MiLAogIHBhZ2VfcGF0aDogIi9ib3Qvc3RvcmUtY29uZmlndXJhdGlvbiIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+U3RvcmUgQ29uZmlndXJhdGlvbiBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL3NldHRpbmdoZWxwLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzcwcHg7IGhlaWdodDogNDAwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvc3RvcmVfc2V0dGluZ2hlbHAyLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzcwcHg7IGhlaWdodDogNDAwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4xLiBMaW1pdCBvZiBwcm9kdWN0cyBpbiBVcC1TZWxsIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGlzIGlzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBwcm9kdWN0cyB3aGljaCB5b3UgY2FuIG1hcCB0byBhIHBhcnRpY3VsYXJcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3QgaW4geW91ciBVcCBTZWxsIFBhZ2UuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBMaW1pdCBvZiBwcm9kdWN0cyBpbiBDcm9zcy1TZWxsIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGlzIGlzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBwcm9kdWN0cyB3aGljaCB5b3UgY2FuIG1hcCB0byBhIHBhcnRpY3VsYXJcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3QgaW4geW91ciBDcm9zcyBTZWxsIFBhZ2UuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4zLiBJbnZlbnRvcnkgTGV2ZWwgZm9yIE5vdGlmaWNhdGlvbiA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhpcyBpcyB0aGUgbnVtYmVyIGJlbG93IHdoaWNoIGlmIGFueSBvZiB5b3VyIHByb2R1Y3RzIGdvIGluIHlvdXIgc2hvcCBpbnZlbnRvcnksXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCByZWNlaXZlIGEgbWFpbCBub3RpZmljYXRpb24gZnJvbSBvdXIgc2lkZSBmb3IgcmVwbGVuaXNobWVudC48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjQuIEFsbG93IEd1ZXN0IFVzZXJzIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JZiB0aGlzIGlzIGVuYWJsZWQsIHRoZSBjdXN0b21lcnMgd2lsbCBvbmx5IGJlIGFza2VkIHRoZWlyIGVtYWlsIGFkZHJlc3MgZm9yIGZldGNoaW5nXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVpciByZXNwZWN0aXZlIG9yZGVycy4gSWYgZGlzYWJsZWQsIHVzZXIgd2lsbCBiZSBhc2tlZCB0aGVpciBlbWFpbCBhbmQgcGFzc3dvcmQuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj41LiBTaG9wIEJhc2UgQ3VycmVuY3kgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoaXMgaXMgdGhlIGRlZmF1bHQgYmFzZSBjdXJyZW5jeSBvZiB5b3VyIHNob3AgcHJvZHVjdHMuIFRoaXMgd2lsbCBiZSB0aGUgY3VycmVuY3lcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbCBkaXNwbGF5ZWQgd2l0aCBhbGwgeW91ciBwcm9kdWN0cyBvbiB0aGUgYm90LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Ni4gRmVlZGJhY2sgRnJlcXVlbmN5IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGlzIGlzIHRoZSBmcmVxdWVuY3kgb2YgaG93IG9mdGVuIGZlZWRiYWNrIHF1ZXN0aW9ucyBzaG91bGQgYmUgYXNrZWQgdG8gdGhlIGN1c3RvbWVycy5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBjYW4gc2V0IHRoZXNlIGZlZWRiYWNrIHF1ZXN0aW9ucyBpbiB0aGUgIjxiPkN1c3RvbWVyIEZlZWRiYWNrPC9iPiIgdGFiIGluIFByb2R1Y3QgQ29uZmlndXJhdGlvbiBwYWdlLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Ny4gUmV2aWV3cyAmIFJhdGluZ3MgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZXNlIGZpZWxkcyBhcmUgZm9yIG1lc3NhZ2VzIHdoaWNoIHdpbGwgYmUgc2hvd24gdG8gY3VzdG9tZXJzIHdoZW4gYXNraW5nIGZvciBhIHJldmlld1wKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXIgcHJldmlvdXNseSBwdXJjaGFzZWQgcHJvZHVjdHMuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj44LiBEaXNwbGF5IHByb2R1Y3RzIG9uIGxhbmRpbmcgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklmIGVuYWJsZWQsIHRoaXMgd291bGQgc2hvdyBwcm9kdWN0cyBhdCB0aGUgc3RhcnQgb2YgdGhlIGNvbnZlcnNhdGlvbiB3aGVuIGJvdCBpcyBvcGVuZWQuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGVyZSBhcmUgMyBwb3NzaWJsZSB0eXBlcyBvZiBwcm9kdWN0cyB3aGljaCBjYW4gYmUgc2hvd246IExhdGVzdCwgQmVzdCBTZWxsaW5nICYgUmFuZG9tLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+OS4gQ29udGFjdCBVcyBFbWFpbCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhpcyBpcyB5b3VyIDxiPnN0b3JlPC9iPiBzdXBwb3J0IGVtYWlsIHdoZXJlIHRoZSBjdXN0b21lcnMgY2FuIHJlYWNoIG91dCBpbiBhbnkga2luZCBvZiBkaWZmaWN1bHR5LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MTAuIENvbnRhY3QgVXMgUGhvbmUgTnVtYmVyIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGlzIGlzIHlvdXIgPGI+c3RvcmU8L2I+IHN1cHBvcnQgY29udGFjdCBudW1iZXIgd2hlcmUgdGhlIGN1c3RvbWVycyBjYW4gcmVhY2ggb3V0IGluIGFueSBraW5kIG9mIGRpZmZpY3VsdHkuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4xMS4gU2F2ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+T24gY2xpY2tpbmcsIEFsbCBpbmZvcm1hdGlvbiB5b3UgaGF2ZSBlbnRlcmVkIHdpbGwgZ2V0IHNhdmVkLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MTIuIE1haWxlciBDb25maWd1cmF0aW9uIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGlzIGlzIHlvdXIgPGI+c3RvcmU8L2I+IGVtYWlsIHdoaWNoIHlvdSB3b3VsZCBsaWtlIHRvIHNldCB3aGljaCB3aWxsIGJlIHVzZWQgZm9yIHNlbmRpbmcgZW1haWxzIGZyb20gb3VyIHN5c3RlbS5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvciBlZy4gUHJvbW90aW9uYWwgRW1haWwsIEJhY2sgSW4gU3RvY2sgZW1haWwgZXRjLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MTMuIFJlbW92ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXQgd2lsbCByZW1vdmUgdGhlIE1haWxlciBFbWFpbCBhZGRyZXNzPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAiUHJvZHVjdCBDb25maWd1cmF0aW9uIiwKICBwYWdlX3BhdGg6ICIvYm90L3Byb2R1Y3QtY29uZmlndXJhdGlvbiIsCiAgaXNfbXVsdGlwbGVfdGFiczogdHJ1ZSwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogInRoaXMgaXMgcHJvZHVjdCBjb25maWd1cmF0aW9uLiIKICB9Cn0sIHsKICBuYW1lOiAiYWx0ZXJuYXRlX3Byb2R1Y3RfbmFtZXMiLAogIHBhZ2VfcGF0aDogIi9ib3QvcHJvZHVjdC1jb25maWd1cmF0aW9uIiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogJzxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+QWx0ZXJuYXRlIFByb2R1Y3QgTmFtZSBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9hbHRlcl9wbmFtZV9oZWxwLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzcwcHg7IGhlaWdodDogMzY1cHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIFNZTkMgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JZiB1c2VyIGhhdmUgbWFkZSBhbnkgY2hhbmdlcyB0aGVuIHRvIGdldCB0aGUgdXBkYXRlZCBkYXRhIHRvIGhhdmUgdG8gY2xpY2sgb24gc3luYy48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjIuIFRSQUlOIE1PREVMIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWYgeW91IGhhdmUgbWFkZSBhbnkgY2hhbmdlcyB0aGVuIHlvdSBoYXZlIHRvIHNhdmUgdGhlbSBhbmQgdG8gcmVmbGVjdCB0aGVtIGluIHRoZSBCb3QsXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIHRvIHRyYWluIHRoZSBtb2RlbC48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjMuIFNBVkUgQUxMIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW55IGFjdGl2aXRpZXMgeW91IGhhdmUgcGVyZm9ybWVkIHRoZW4geW91IGhhdmUgdG8gY2xpY2sgb24gdGhpcyBidXR0b24uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj40LiBBREQgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlLCBZb3UgY2FuIGFkZCB5b3VyIHByb2R1Y3QgbmFtZTwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+NS4gRWRpdCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFmdGVyIGFkZGluZyB0aGUgcHJvZHVjdCBuYW1lLCB0aGUgdXNlciBjYW4gYWxzbyBlZGl0IG9yIGRlbGV0ZSB0aG9zZSBwcm9kdWN0IGFuZFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byByZWZsZWN0IHlvdXIgY2hhbmdlcyB5b3UgaGF2ZSB0byBzYXZlIHRoZW0uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj42LiBEZWxldGUgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBjbGlja2luZywgdGhlIHNlbGVjdGVkIHByb2R1Y3QgaXRlbSB3aWxsIGdldCBkZWxldGVkPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAicHJvZHVjdHNfdXBzZWxsIiwKICBwYWdlX3BhdGg6ICIvYm90L3Byb2R1Y3QtY29uZmlndXJhdGlvbiIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlByb2R1Y3RzIFVwLVNlbGwgSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvcHJvZHVjdF91cHNlbGxfaGVscC5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDc1MHB4OyBoZWlnaHQ6IDMyMHB4OyIgYWx0PSJzaW1wbGUgdGV4dCIgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGp1c3RpZnk7Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBQcm9kdWN0IE5hbWUgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlIGEgbGlzdCBvZiBwcm9kdWN0IG5hbWUgd2lsbCBiZSBkaXNwbGF5IGZvcm0gd2hpY2ggeW91IGNhbiBzZWxlY3RcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55IHByb2R1Y3QgYW5kIHB1dCB0aGVtIG9uIGZvciB1cC1zZWxsPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjMuIFNBVkUgQUxMIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QnkgY2xpY2tpbmcsIHRoZSBjaGFuZ2VzIHlvdSBoYXZlIGRvbmUgd2lsbCBnZXQgU2F2ZWQuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAicHJvZHVjdHNfY3Jvc3NzZWxsIiwKICBwYWdlX3BhdGg6ICIvYm90L3Byb2R1Y3QtY29uZmlndXJhdGlvbiIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlByb2R1Y3QgQ3Jvc3MtU2VsbCBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9wcm9kdWN0X2Nyb3NzLXNlbGwucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NTBweDsgaGVpZ2h0OiAzMjBweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gUHJvZHVjdCBOYW1lIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVyZSBhIGxpc3Qgb2YgcHJvZHVjdCBuYW1lIHdpbGwgYmUgZGlzcGxheSBmb3JtIHdoaWNoIHlvdSBjYW4gc2VsZWN0XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueSBwcm9kdWN0IGFuZCBwdXQgdGhlbSBvbiBmb3IgY3Jvc3Mtc2VsbDwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBTQVZFIEFMTCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJ5IGNsaWNraW5nLCB0aGUgY2hhbmdlcyB5b3UgaGF2ZSBkb25lIHdpbGwgZ2V0IFNhdmVkLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogIm1lc3NhZ2VfdGVtcGxhdGVzIiwKICBwYWdlX3BhdGg6ICIvYm90L3Byb2R1Y3QtY29uZmlndXJhdGlvbiIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk1haWxlcnMgSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvTWFpbGVyX2hlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NTBweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gU2VuZCBFbWFpbCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoaXMgd2lsbCBzZW5kIG1haWwgdG8gYWxsIGN1c3RvbWVyIG9yIHNwZWNpZmljIGN1c3RvbWVyXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHdoaWNoIHVzZXIgcmVsYXRlZCBpbmZvcm1hdGlvbiB3aWxsIGJlIHRoZXJlLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBBZGQgVGVtcGxhdGUgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3UgaGF2ZSB0byBhZGQgcHJvZHVjdCBuYW1lIGFuZCBvdGhlciBkZXRhaWxzIGluIHRoZSB0ZW1wbGF0ZS48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjMuIERlbGV0ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZSBzZWxlY3RlZCB0ZW1wbGF0ZSBvciBkYXRhIHdpbGwgZ2V0IGRlbGV0ZWQgZGVwZW5kcyBvbiB0aGUgc2luZ2xlIG9yIG11bHRpcGxlIHNlbGVjdGlvbjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+NC4gUHJldmlldyA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9uIFByZXZpZXcsIHRoZSBmb3JtYXQgb2YgRW1haWwgdGVtcGxhdGUgaXMgc2hvd24uIFlvdSBjYW4gY2hlY2sgd2hldGhlciB0aGlzIHBhcnRpY3VsYXJcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gaXMgYXBwcm9wcmlhdGUgYW5kIGlmIG5vdCB0aGVuIHlvdSBjYW4gZWRpdCB0aGVtIGJ5IHNlbGVjdGluZyB0aGVtLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+NS4gRWRpdCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9uIEVkaXQsIHlvdSBjYW4gY3VzdG9taXplIG9yIGNoYW5nZSB0aGUgY29udGVudCBvZiBlbWFpbCB0ZW1wbGF0ZSBkZXRhaWxzIGFuZCB0aGVuIHNhdmVcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbSB0byBzZWUgdGhvc2UgY2hhbmdlcy48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+JwogIH0KfSwgewogIG5hbWU6ICJhbmFseXRpY3MiLAogIHBhZ2VfcGF0aDogIi9ib3QvcHJvZHVjdC1jb25maWd1cmF0aW9uIiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogJzxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+QW5hbHl0aWNzIEhlbHA8L2gzPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2FuYWx5dGljc19oZWxwLmpwZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IGhlaWdodDogMzMwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIEdvb2dsZSBBbmFseXRpY3MgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlLCBJdCB3aWxsIGFzayB5b3UgdG8gbG9naW4gaW4gdG8geW91ciBnb29nbGUgYWNjb3VudCBmaXJzdCBhbmQgdGhlbiB3aWxsIGxpbmtcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8geW91ciBHb29nbGUgQW5hbHl0aWNzIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGRpZmZlcmVudCBhbmFseXRpY3MuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAicHJvZHVjdHNfcmFua2luZyIsCiAgcGFnZV9wYXRoOiAiL2JvdC9wcm9kdWN0LWNvbmZpZ3VyYXRpb24iLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Qcm9kdWN0IFJhbmtpbmcgSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvcHJvZHVjdF9yYW5raW5nLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IGhlaWdodDogMzMwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPiBNb3N0IFNhbGVhYmxlIFByb2R1Y3RzIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QSB0YWJsZSB3aWxsIGJlIHNob3duIHdoZXJlIHlvdSBjYW4gc2VlIHRoZSBsaXN0IG9mIG1vc3Qgc29sZCBwcm9kdWN0IGFuZCBhbmQgb3RoZXJcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gdG9vLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+IExlYXN0IFNhbGVhYmxlIFByb2R1Y3RzIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QSB0YWJsZSB3aWxsIGJlIHNob3duIHdoZXJlIHlvdSBjYW4gc2VlIHRoZSBsaXN0IG9mIGxlYXN0IHNvbGQgcHJvZHVjdCBhbmQgYW5kIG90aGVyXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uIHRvby48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPiBVbnNvbGQgUHJvZHVjdHMgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlIHlvdSBjYW4gc2VlIHNpbWlsYXIgbGlzdCB3aGljaCB3aWxsIGNvbnNpc3Qgb2YgdW5zb2xkIHByb2R1Y3RzLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gRHJvcGRvd24gTGlzdCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlcmUgeW91IGNhbiBzZWxlY3QgYW55IHBhcnRpY3VsYXIgbW9udGhzIGZyb20gdGhlIGRyb3Bkb3duIGxpc3QgYW5kIGNoZWNrXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBpbmZvcm1hdGlvbiBmb3IgdGhlIHNhbWUuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBEb3dubG9hZCBDU1YgUmVwb3J0IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBkb3dubG9hZCB0aGUgcmVwb3J0IGluIHdoaWNoIGFsbCB0aGUgZGV0YWlscyB3aWxsIGJlIHRoZXJlIHJlZ2FyZGluZyBwcm9kdWN0cyB3aGljaCBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHNvbGQgb3IgdW5zb2xkIGRlcGVuZGluZyBvbiB3aGljaCBkYXRhIHlvdSB3YW50IHRvIGRvd25sb2FkLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+My4gU2VuZCBSZXBvcnQgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BIHJlcG9ydCB3aWxsIGJlIHNlbmQgdG8gY3VzdG9tZXIgb24gdGhlaXIgcmVzcGVjdGl2ZSBtYWlsIGlkLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogImN1c3RvbWVyX2ZlZWRiYWNrIiwKICBwYWdlX3BhdGg6ICIvYm90L3Byb2R1Y3QtY29uZmlndXJhdGlvbiIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkN1c3RvbWVyIEZlZWRiYWNrIEhlbHA8L2gzPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2N1c3RvbWVyX2ZlZWRiYWNrLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIEFERCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZSBVc2VyIGNhbiBhZGQgYW55IG51bWJlciBvZiBmZWVkYmFjayBxdWVzdGlvbiB0aGV5IHdhbnQgdG8gYXNrXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGVuIHNhdmUgdGhlbSBzdWNjZXNzZnVsbHkuIEEgbGlzdCB3aWxsIGJlIG1haW50YWluZWQgcmVnYXJkaW5nIG9mIGFsbCBxdWVzdGlvbnM8L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIFNBVkUgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JdCB3aWxsIFNhdmUgdGhlIEN1c3RvbWVyIGZlZWRiYWNrIHF1ZXN0aW9uczwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogInByb2R1Y3RzX3ZhcmlhbnRzIiwKICBwYWdlX3BhdGg6ICIvYm90L3Byb2R1Y3QtY29uZmlndXJhdGlvbiIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlByb2R1Y3RzIFZhcmlhbnQgSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvcHJvZHVjdF92YXJpYW50LnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IGhlaWdodDogMzMwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIEFERCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkluIFByb2R1Y3QgVmFyaWFudCwgeW91IGNhbiBhZGQgYSB2YXJpYW50IG5hbWUgYW5kIGl0cyB2YWx1ZXMuXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBlZzogdmFyaWFudCBuYW1lOiBsaXRyZSBhbmQgaXRzIHZhbHVlIHdpbGwgYmUgMzAwIG9yIDQwMCBhbmQgdGhlbiB5b3UgY2FuIHNhdmUgaXQuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBFZGl0IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBtb2RpZnkgb3IgY2hhbmdlIHRoZSBwcm9kdWN0IHdoaWNoIHlvdSBoYXZlIGFkZGVkIGFuZCB0aGVuIGNsaWNrXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIDxiPlNBVkUgQUxMPC9iPiB0byByZWZsZWN0IHRob3NlIGNoYW5nZXMuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAicmV2aWV3X3JhdGluZyIsCiAgcGFnZV9wYXRoOiAiL2JvdC9wcm9kdWN0LWNvbmZpZ3VyYXRpb24iLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5DdXN0b21lciBSZXZpZXcgSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvY3VzdG9tZXJfcmV2aWV3LnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IGhlaWdodDogMzMwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIEZpbHRlciBCeSBDdXN0b21lciA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkl0IHdpbGwgc2hvdyB0aGUgcmV2aWV3IGRldGFpbHNcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgYSBwYXJ0aWN1bGFyIGN1c3RvbWVyIHJlZ2FyZGluZyBvbiBwcm9kdWN0cyB0aGV5IGhhdmUgcHVyY2hhc2VkLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Mi4gRmlsdGVyIEJ5IFByb2R1Y3QgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JdCB3aWxsIHNob3cgeW91IHRoZSBjdXN0b21lciByZXZpZXcgb24gYSBwYXJ0aWN1bGFyIHByb2R1Y3RzIHRoZXkgaGF2ZSBwdXJjaGFzZWRcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHdpbGwgcHJvdmlkZSBhIGRldGFpbGVkIHJldmlldyBsaXN0LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogImJhbm5lcl90ZW1wbGF0ZSIsCiAgcGFnZV9wYXRoOiAiL2JvdC9wcm9kdWN0LWNvbmZpZ3VyYXRpb24iLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5CYW5uZXIgVGVtcGxhdGUgSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvYmFubmVyX3RlbXBsYXRlX2hlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NzVweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gU2VhcmNoIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+T24gY2xpY2tpbmcsIHRoZSB1c2VyIGNhbiBzZWFyY2ggZm9yIGEgcGFydGljdWxhciBpbnRlbnRcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXMgc2hvd24gaW4gdGhlIGxpc3QuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBBZGQgQmFubmVyIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBhZGQgQmFubmVyIGRldGFpbHMgd2hpY2ggeW91IHdhbnQgdG8gZGlzcGxheSBpbiB0aGF0IGJhbm5lci5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91IGNhbiBhZGQgaW1hZ2VzLCB2aWRlb3MgYW5kIG90aGVyIGRldGFpbHMgd2hpY2ggeW91IHdhbnQgYXZhaWxhYmxlIG9uIHlvdXIgd2Vic2l0ZS48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjMuIERlbGV0ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZSBzZWxlY3RlZCBpbnRlbnQgd2lsbCBnZXQgZGVsZXRlZCBkZXBlbmRzIG9uIHRoZSBzaW5nbGUgb3IgbXVsdGlwbGUgc2VsZWN0aW9uLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+NC4gRGlzcGxheSBCYW5uZXIgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlIHlvdSBoYXZlIHRvIGNsaWNrIG9uIHJhZGlvIGJ1dHRvbiB0byBlbmFibGUgdGhlIGJhbm5lciB0byBkaXNwbGF5XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIHlvdXIgcGFnZSxidXQgY3VycmVudGx5IGl0IHdpbGwgbm90IHNob3cgYmVjYXVzZSB5b3UgaGF2ZSBlbmFibGUgaXQgZnJvbSBTdG9yZSBTZXR0aW5nIHBhZ2VcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLiBBZnRlciBtYWtpbmcgY2hhbmdlcyB5b3UgaGF2ZSB0byB2aXNpdCA8Yj5TdG9yZSBTZXR0aW5nczwvYj4gcGFnZSB3aGljaCBpcyB0aGVyZSBpbnNpZGUgPGI+U3RvcmUgc2VjdGlvbjwvYj4sXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGVyZSB5b3UgaGF2ZSB0byBzZWxlY3Qgb3B0aW9uIDxiPkRpc3BsYXkgYmFubmVycyBvbiBsYW5kaW5nPC9iPiBhbmQgZW5hYmxlIGl0LCB0aGVuIFNhdmUgY2hhbmdlcyBpbiBvcmRlclwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBkaXNwbGF5IEJhbm5lciBvbiB5b3VyIHBhZ2UuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj41LiBQcmV2aWV3IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBzZWUgeW91ciBjaGFuZ2VzIHlvdSBoYXZlIG1hZGUgYnkgY2xpY2tpbmcgb24gUHJldmlldywgeW91IGNhbiB0ZXN0IHlvdXIgYm90XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBjaGVjayBpZiBpdCBpcyB3b3JraW5nIHByb3Blcmx5IGFuZCBzaG93aW5nIGFjY3VyYXRlIHJlc3VsdHMuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj41LiBFZGl0IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+T24gY2xpY2tpbmcsIGFsbCB0aGUgZGV0YWlscyB3aGljaCBhcmUgbGlzdGVkIGluIHRoZSBpbnRlbnQgZm9yIEJhbm5lcnMgY2FuIGJlIG1vZGlmeSBvciBhZGQgbW9yZSBkZXRhaWxzLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZnRlciBkb2luZyBhbnkgY2hhbmdlcywgdXNlciBoYXZlIHRvIGNsaWNrIG9uIFNhdmUgYnV0dG9uIGRvd24gYmVsb3cgaW4gb3JkZXIgdG8gcmVmbGVjdCB0aG9zZSBpbiB5b3VyIGJvdC48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+JwogIH0KfSwgewogIG5hbWU6ICJjb3Vwb25fY29kZXMiLAogIHBhZ2VfcGF0aDogIi9ib3QvcHJvZHVjdC1jb25maWd1cmF0aW9uIiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogJzxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+Q291cG9uIENvZGVzIEhlbHA8L2gzPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2NvdXBvbl9jb2Rlcy5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDc1MHB4OyBoZWlnaHQ6IDMzMHB4OyIgYWx0PSJzaW1wbGUgdGV4dCIgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGp1c3RpZnk7Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4xLiBTWU5DIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXQgd2lsbCBnZXQgb3IgZmV0Y2ggdGhlIGRhdGEgZnJvbSB3b29jb21tZXJjZSBvciBzaG9waWZ5IGFuZCB3aWxsIGNoZWNrIGFuZCBjb21wYXJlXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW0gaW4gdGhlIGRhdGFiYXNlIGFuZCBiYXNlZCBvbiB0aGF0IGl0IHdpbGwgdXBkYXRlIHRoZSBwcm9kdWN0IGRldGFpbHMgYW5kIHdpbGwgZGlzcGxheVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgdGFibGUgbGlzdGVkIGJlbG93LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Mi4gU0FWRSBBTEwgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JdCB3aWxsIHNhdmUgYWxsIHRoZSBjaGFuZ2VzIHlvdSBoYXZlIGFkZGVkIGZvciBjb3Vwb24gZGV0YWlscyBpbiB0aGUgbGlzdC48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjMuIFZJU0lCTEUgT04gQk9UIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWYgeW91IHdhbnQgdG8gc2hvdyB0aGlzIGNvdXBvbiBkZXRhaWxzIG9uIGJvdCB0aGVuIHlvdSBoYXZlIHNlbGVjdCB2aXNpYmxlIG9uIGJvdC48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+JwogIH0KfSwgewogIG5hbWU6ICJCb3QgQ29uZmlndXJhdGlvbiIsCiAgcGFnZV9wYXRoOiAiL2JvdC9ib3QtY29uZmlndXJhdGlvbiIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+Qm90IENvbmZpZ3VyYXRpb24gSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9ib3Rjb25maWdoZWxwLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IGhlaWdodDogNDAwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvYm90Y29uZmlnMmhlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NTBweDsgaGVpZ2h0OiA0MDBweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFxkaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIFdpZGdldCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBBZGQgYW5kIERlbGV0ZSBHcmVldGluZ3MuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JbiBHcmVldGluZ3MsIFlvdSBjYW4gYWRkIHF1ZXN0aW9uIG9yIHRvIGdyZWV0IHlvdXIgdXNlciBieSBoZWxwaW5nIHRoZW0gaW4gZGlmZmVyZW50XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyaWVzLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW4gb3JkZXIgdG8gcmVmbGVjdCBjaGFuZ2VzLCB5b3UgaGF2ZSB0byBjbGljayBvbiBTYXZlIGJ1dHRvbi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjIuIEJ1dHRvbnMgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBjYW4gYWRkIG5ldyBCdXR0b24sIERlbGV0ZSBhIGJ1dHRvbiwgZHJhZyB0byBjaGFuZ2UgaXRzIHBvc2l0aW9uXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdHVybiBPZmYvT04gdG8gc2hvdyBvbiBDaGF0Ym90LlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhvc2UgYnV0dG9ucyB5b3UgaGF2ZSBhZGQgd2lsbCBkaXNwbGF5IG9uIHRoZSBib3QuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4zLiBCb3QgU3R5bGluZyA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBjaGFuZ2Ugb3IgY3VzdG9taXplIHRoZSBsYXlvdXQgb2YgY2hhdGJvdC48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlZhcmlldHkgb2Ygb3B0aW9ucyBpcyBwcm92aWRlZCB1bmRlciB0aGlzIHNlY3Rpb24uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZnRlciBjdXN0b21penRpb24sIHlvdSBjYW4gcHJldmlldyB5b3VyIEJvdCB0byBzZWUgdGhvc2UgY2hhbmdlcy48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjQuIFNhdmUgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9uY2UgeW91IG1vZGlmaWVkIG9yIGN1c3RvbWl6ZSwgeW91IGNhbiBzYXZlIGFsbCB0aGUgY2hhbmdlcyBieSBjbGlja2luZyBvbiBTYXZlIGJ1dHRvbi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjUuIFByZXZpZXcgQm90IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3UgY2FuIHNlZSB0aGUgbGF0ZXN0IGNoYW5nZXMgeW91IGhhdmUgbWFkZSB0byBhIGJvdCBieSBwcmV2aWV3LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXQgd2lsbCBub3Qgc2F2ZSB5b3VyIGNoYW5nZXMsIGJ1dCBqdXN0IHRvIHNob3cgaG93IHlvdXIgYm90IGxvb2sgbGlrZS48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JwogIH0KfSwgewogIG5hbWU6ICJDaGVjayBCb3QgUmVzcG9uc2UiLAogIHBhZ2VfcGF0aDogIi9ib3QvY2hlY2stYm90LXJlc3BvbnNlIiwKICBkYXRhOiAidGhpcyBpcyBmb3IgaW50ZW50IiwKICBpc19tdWx0aXBsZV90YWJzOiB0cnVlCn0sIHsKICBuYW1lOiAiYm90X3Jlc3BvbnNlIiwKICBwYWdlX3BhdGg6ICIvYm90L2NoZWNrLWJvdC1yZXNwb25zZSIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkJvdCBSZXNwb25zZSBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9ib3RfcmVzcG9uc2UuanBnIiBzdHlsZT0ibWF4LXdpZHRoOiA3NDVweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gRGVzY3JpcHRpb24gOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlIGFkbWluIGNhbiBjaGVjayBob3cgdGhlIGJvdCBpcyByZXNwb25kaW5nIHRvIGEgcGFydGljdWxhciBxdWVzdGlvbnMuIFdoZXRoZXIgdGhlIGFuc3dlclwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaXZlbiBpcyBhY2N1cmF0ZSBvciBub3Qga25vd24uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkEgU2FtcGxlIEJvdCBpcyBwcm92aWRlZCB3aGVyZSB5b3UgY2FuIHRlc3QgYWxsIGNhc2VzIHRvIHNlZSBpZiBwcm9wZXIgcmVzcG9uc2VcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZ2V0dGluZyB0byB0aGUgZW5kIHVzZXIuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAiYm90X2ludGVudCIsCiAgcGFnZV9wYXRoOiAiL2JvdC9jaGVjay1ib3QtcmVzcG9uc2UiLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Cb3QgaW50ZW50IEhlbHA8L2gzPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2JvdF9pbnRlbnQuanBnIiBzdHlsZT0ibWF4LXdpZHRoOiA3NTBweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gRGVzY3JpcHRpb24gOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlIGFkbWluIGNhbiBjaGVjayBpZiB0aGUgYm90IGlzIGdpdmluZyBhIHByb3BlciByZXNwb25zZSBmb3IgYSBnaXZlbiBxdWVzdGlvbi5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgdGhlIHJlc3BvbnNlIGlzIG5vdCByaWdodCBvciBhY2N1cmF0ZSB0aGVuIHRoZSBhZG1pbiBjYW4gZWRpdCBhbmQgY29ycmVjdCB0aGUgcmVzcG9uc2VcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXMgZ2l2ZW4gYnkgYm90LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Mi4gVHJhaW4gTW9kZWwgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbmNlIHRoZSBhZG1pbiBoYXMgZWRpdGVkIHRoZSBnaXZlbiBxdWVzdGlvbiBvciBhbnkgY2hhbmdlcyBoZSBoYXMgbWFkZSB0aGVuIHRvIHJlZmxlY3RcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhvc2UgY2hhbmdlcyBoZSBoYXMgdG8gdHJhaW4gdGhlIGJvdC48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+JwogIH0KfSwgewogIG5hbWU6ICJzZXR1cC1hc3Npc3RhbnQiLAogIHBhZ2VfcGF0aDogIi9ib3Qvc2V0dXAtYXNzaXN0YW50IiwKICBkYXRhOiAidGhpcyBpcyBmb3IgaW50ZW50IiwKICBpc19tdWx0aXBsZV90YWJzOiB0cnVlCn0sIHsKICBuYW1lOiAiaW50ZW50c19jb21wb25lbnQiLAogIHBhZ2VfcGF0aDogIi9ib3Qvc2V0dXAtYXNzaXN0YW50IiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogInRoaXMgaXMgZm9yIGludGVudCIKICB9Cn0sIHsKICBuYW1lOiAiZW50aXRpZXNfY29tcG9uZW50IiwKICBwYWdlX3BhdGg6ICIvYm90L3NldHVwLWFzc2lzdGFudCIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICJ0aGlzIGlzIGZvciBpbnRlbnQiCiAgfQp9LCB7CiAgbmFtZTogImRpYWxvZ19jb21wb25lbnQiLAogIHBhZ2VfcGF0aDogIi9ib3Qvc2V0dXAtYXNzaXN0YW50IiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogInRoaXMgaXMgZm9yIGludGVudCIKICB9Cn0sIHsKICBuYW1lOiAid2ViaG9va19jb21wb25lbnQiLAogIHBhZ2VfcGF0aDogIi9ib3Qvc2V0dXAtYXNzaXN0YW50IiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogInRoaXMgaXMgZm9yIGludGVudCIKICB9Cn0sIHsKICBuYW1lOiAiU2F2ZWQgQ2hhdHMiLAogIHBhZ2VfcGF0aDogIi9ib3QvdGFzay1yZXNwb25zZXMiLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkNoYXQgSGlzdG9yeSBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2NoYXRfaGlzdG9yeV9oZWxwLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzU1cHg7IGhlaWdodDogMzAwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4xLiBQb3J0YWwgVXNlciA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QSB0YWJsZSB3aWxsIGJlIGRpc3BsYXkgd2l0aCB1bmlxdWVfaWQsIERhdGUgYW5kIHZpZXcgY2hhdDwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW4gVmlldyBDaGF0ID0+IFZpZXcgQ2hhdCBIaXN0b3J5OiBBIGhpc3Rvcnkgb2YgcHJvZHVjdCBkZXRhaWxzIGlzIHNob3duIHdpdGggZGF0ZSxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJpZXMgd2l0aCBhbnN3ZXIsIGV0YzwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Mi4gQm90IFVzZXIgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkEgdGFibGUgd2lsbCBiZSBkaXNwbGF5IHdpdGggdW5pcXVlX2lkLCBEYXRlIGFuZCB2aWV3IGNoYXQ8L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkluIFZpZXcgQ2hhdCA9PiBWaWV3IENoYXQgSGlzdG9yeTogQSBoaXN0b3J5IG9mIHByb2R1Y3QgZGV0YWlscyBpcyBzaG93biB3aXRoIGRhdGUsXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyaWVzIHdpdGggYW5zd2VyLCBldGM8L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjMuIFZpZXcgQ2hhdCBIaXN0b3J5IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BIHVzZXIgaGFzIHRvIHNlbGVjdCBhIGRhdGUgYW5kIGZvciB0aGF0IGRhdGUgYSByZXNwZWN0aXZlIGluZm9ybWF0aW9uXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIHNob3duIHRvIHVzZXIgaW4gdGVybXMgb2YgUSAmIEEgd2hpY2ggd2lsbCBiZSB0aGUgcXVlc3Rpb24geW91IGhhdmUgYWxyZWFkeSBhc2tlZCB0byBib3QuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicgLy8gPC9kaXY+JwoKICB9Cn0sIHsKICBuYW1lOiAiUm9sZXMiLAogIHBhZ2VfcGF0aDogIi9ib3QvYWRkLXJvbGUiLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlJvbGUgTGlzdCBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL1JvbGVsaXN0X2hlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NjVweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIFNlYXJjaCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+T24gY2xpY2tpbmcsIHRoZSB1c2VyIGNhbiBzZWFyY2ggZm9yIGEgcGFydGljdWxhciByb2xlLlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91IGNhbiBzZWFyY2ggZm9yIGJvdGggIlVzZXIgdHlwZSIgYW5kICJSb2xlIG5hbWUiPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBBZGQgUm9sZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBTZWxlY3QgUG9ydGFsIG9yIEJvdCB1c2VyIGFuZCB0aGVuIGVudGVyIHRoZSByb2xlIG5hbWUgZm9yIGl0LlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWZ0ZXIgYWRkaW5nIHRoZSByb2xlIG5hbWUsIHRoZSB1c2VyIGRldGFpbHMgd2lsbCBiZSBhc3NpZ24gdG8gYSBwYXJ0aWN1bGFyIHJvbGUgaW4gdGhlIHVzZXIgc2VjdGlvbi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjMuIERlbGV0ZSA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhlIHNlbGVjdGVkIHJvbGUgd2lsbCBnZXQgZGVsZXRlZCBkZXBlbmRzIG9uIHRoZSBzaW5nbGUgb3IgbXVsdGlwbGUgc2VsZWN0aW9uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj40LiBFZGl0IDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBFZGl0LCBZb3UgY2FuIGNoYW5nZSB0aGUgUm9sZSBuYW1lIGZvciBhIHBhcnRpY3VsYXIgVXNlciBhbmQgdGhlbiBzYXZlIHRoZW1cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHNlZSB0aGUgY2hhbmdlcy48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyAvLyA8L2Rpdj4nCgogIH0KfSwgewogIG5hbWU6ICJVc2VycyIsCiAgcGFnZV9wYXRoOiAiL2JvdC9hZGQtdXNlciIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+VXNlciBMaXN0IEhlbHA8L2gzPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvVXNlcmxpc3RfaGVscC5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDc2MnB4OyBoZWlnaHQ6IDMxNXB4OyIgYWx0PSJzaW1wbGUgdGV4dCIgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGp1c3RpZnk7Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gU2VhcmNoIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbiBjbGlja2luZywgdGhlIHVzZXIgY2FuIHNlYXJjaCBmb3IgYSBwYXJ0aWN1bGFyIHJvbGVcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgYnkgdXNpbmcgIkVtYWlsIEFkZHJlc3MiIGFuZCAiUm9sZSBuYW1lIi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjIuIEFkZCBVc2VyIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbmNlIHRoZSByb2xlIG5hbWUgaXMgZ2l2ZW4gdGhlbiBvbmx5IHlvdSBjYW4gYWRkIHVzZXIgZGV0YWlscyB0byBpdC5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuZCBhZnRlciB0aGF0IGluIGxhdGVyIHN0YWdlIHlvdSBoYXZlIHRvIGFzc2lnbiBwZXJtaXNzaW9uIGZvciBldmVyeSB1c2VyLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+My4gRGVsZXRlIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGUgc2VsZWN0ZWQgdXNlciB3aXRoIHRoZWlyIHJvbGVzIHdpbGwgZ2V0IGRlbGV0ZWQgZGVwZW5kcyBvbiB0aGUgc2luZ2xlIG9yIG11bHRpcGxlIHNlbGVjdGlvbi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyAvLyA8L2Rpdj4nCgogIH0KfSwgewogIG5hbWU6ICJQZXJtaXNzaW9ucyIsCiAgcGFnZV9wYXRoOiAiL2JvdC9wZXJtaXNzaW9ucyIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+UGVybWlzc2lvbiBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL3Blcm1pc3Npb25faGVscC5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDc1MHB4OyBoZWlnaHQ6IDI4MHB4OyIgYWx0PSJzaW1wbGUgdGV4dCIgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGp1c3RpZnk7Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+IERlc2NyaXB0aW9uIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlLCBZb3Ugd2lsbCBhc3NpZ24gcGVybWlzc2lvbiB0byB1c2VycywgZnJvbSB0aGlzIHlvdSB3aWxsIGFibGUgdG8gbWFuYWdlIGRpZmZlcmVudFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnMgYmFzZWQgb24gdGhlaXIgcm9sZXMgYW5kIHBlcm1pc3Npb24geW91IGhhdmUgYXNzaWduZWQuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gRWRpdCA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW91IGNhbiBhZGQgbW9yZSBwZXJtaXNzaW9uIGZvciBhIHBhcnRpY3VsYXIgdXNlciB3aGljaCBhcmUgaGF2aW5nIHJvbGUgbmFtZS5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdlIGRvZXMgbm90IHByb3ZpZGUgYW55IHBlcm1pc3Npb24gdGhlbiBieSBkZWZhdWx0IG9ubHkgZGFzaGJvYXJkIHBlcm1pc3Npb24gaXMgYXNzaWduIHRvIHVzZXIgd2l0aCB0aGVpclwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcGVjdGl2ZSByb2xlIG5hbWUuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAiU2V0dGluZ3MiLAogIHBhZ2VfcGF0aDogIi9ib3QvbWlzY2VsbGFuZW91cy1zZXR0aW5ncyIsCiAgZGF0YTogInRoaXMgaXMgZm9yIGludGVudCIsCiAgaXNfbXVsdGlwbGVfdGFiczogdHJ1ZQp9LCB7CiAgbmFtZTogIm90aGVycyIsCiAgcGFnZV9wYXRoOiAiL2JvdC9taXNjZWxsYW5lb3VzLXNldHRpbmdzIiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogJzxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+R2VuZXJhbCBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9nZW5lcmFsX2hlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3NTBweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gRG93bmxvYWQgQm90IFNES3MgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb3UgY2FuIGRvd25sb2FkIEJvdCBTREsgZm9yIEFuZHJvaWQsIGlPUyBhbmQgV2ViPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4yLiBVcGxvYWQgTG9nbyA6PC9iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdSBjYW4gdXBsb2FkIHlvdXIgQ29tcGFueSBMb2dvIGZyb20gdGhpcyBwYWdlIGFuZCB3aGVuIHlvdSByZWNlaXZlIGFueVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbHMgZnJvbSBvdXIgc2lkZSB0aGlzIGxvZ28gd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGF0LjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogImludGVncmF0aW9ucyIsCiAgcGFnZV9wYXRoOiAiL2JvdC9taXNjZWxsYW5lb3VzLXNldHRpbmdzIiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogJzxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+SW50ZWdyYXRpb25zIEhlbHA8L2gzPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vc3RvcmFnZS5jZW5zZS5haS9jb2RlYXJyYXkvcG9ydGFsX3VpX2d1aWRlL2ludGVncmF0aW9uX2hlbHAucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA3MTVweDsiIGFsdD0ic2ltcGxlIHRleHQiIC8+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gTWVzc2FnaW5nIEZyYW1ld29ya3MgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlIHdlIGhhdmUgZGlmZmVyZW50IG1lc3NhZ2luZyBwbGF0Zm9ybSB0byBjb21tdW5pY2F0ZS48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjIuIFdlYiBGcmFtZXdvcmtzIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmV0YWlsIEFuZCBFLWNvbW1lcmNlIHJlbGF0ZWQgaW5mb3JtYXRpb24gaXMgcHJvdmlkZWQgdG8gdXNlcjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+My4gU29jaWFsIE1lZGlhIFNldHRpbmdzIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VXNlciBoYXZlIHRvIGdpdmUgdGhlaXIgc29jaWFsIE1lZGlhIGRldGFpbHM8L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+JwogIH0KfSwgewogIG5hbWU6ICJtb2RlbHMiLAogIHBhZ2VfcGF0aDogIi9ib3QvbWlzY2VsbGFuZW91cy1zZXR0aW5ncyIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk1vZGVscyBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9Nb2RlbHNfaGVscC5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDc1MHB4OyIgYWx0PSJzaW1wbGUgdGV4dCIgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGp1c3RpZnk7Ij5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4gRGVzY3JpcHRpb24gOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlLCBZb3UgY2FuIHRyYWluIGRpZmZlcmVudCBtb2RlbHMgb3IgeW91IGNhbiBzZWxlY3QgYW55b25lIG1vZGVsIHRvIHRyYWluIFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgaW5zaWRlIGluZGl2aWR1YWwgbW9kZWwgdGhlcmUgYXJlIG11bHRpcGxlIG9wdGlvbiBnaXZlbiBpbiB0aGUgbGlzdCB3aGVyZSB5b3UgY2FuIGNoYW5nZSB5b3VyIG1vZGVsIHRvIHRyYWluLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+MS4gVHJhaW5lZCBJbnRlbnQgTW9kZWwgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JdCB3aWxsIHRyYWluIGludGVudCBtb2RlbCBhbmQgcHJvdmlkZSBpbmZvcm1hdGlvbiByZWdhcmRpbmcgd2hpY2ggaW50ZW50IHlvdVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YW50IHRvIHRyYWluIGFuZCBhbHNvIHlvdSBjYW4gY2hhbmdlIHlvdXIgbW9kZWwgZnJvbSB0aGUgb3B0aW9uIGxpc3RlZCBiZWxvdyB0byB0cmFpbi48L2xpPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjIuIFRyYWluZWQgRGlhbG9nIE1vZGVsIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXQgd2lsbCB0cmFpbiB5b3VyIFEgYW5kIEEgbW9kZWwgYW5kIGFsc28geW91IGNhbiBjaGFuZ2UgeW91ciBtb2RlbHMgZnJvbSB0aGVcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uIGluIG9yZGVyIHRvIHRyYWluLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+My4gVHJhaW5lZCBORVIgTW9kZWwgOjwvYj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2w+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JdCB3aWxsIHRyYWluIHlvdXIgTkVSIG1vZGVsLjwvbGk+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nCiAgfQp9LCB7CiAgbmFtZTogImFjY291bnRzIiwKICBwYWdlX3BhdGg6ICIvYm90L21pc2NlbGxhbmVvdXMtc2V0dGluZ3MiLAogIGRhdGE6IHsKICAgIGNhbGxkYXRhOiAnPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5BY2NvdW50cyBIZWxwPC9oMz5cCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlwKICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9hY2NvdW50LmpwZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0b3JhZ2UuY2Vuc2UuYWkvY29kZWFycmF5L3BvcnRhbF91aV9ndWlkZS9hY2NvdW50Ml9oZWxwLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIERlc2NyaXB0aW9uIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVyZSB5b3UgY2FuIHNlZSBBY2NvdW50cyByZWxhdGVkIGluZm9ybWF0aW9uIGxpa2UgQmlsbCBkZXRhaWxzLCBpbnZvaWNlIGRldGFpbHMsXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZSB0byBwbGFuLCBldGMuPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj5TdWJzY3JpYmUgdG8gcGxhbjo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZXJlIHlvdSBoYXZlIHRvIHNlbGVjdCBhIHBsYW4gYW5kIGEgYmlsbGluZyBjeWNsZSB0byB1cGRhdGUgeW91ciBjdXJyZW50IHBsYW4uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAic3VnZ2VzdGlvbnMiLAogIHBhZ2VfcGF0aDogIi9ib3QvbWlzY2VsbGFuZW91cy1zZXR0aW5ncyIsCiAgZGF0YTogewogICAgY2FsbGRhdGE6ICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkLWljbiI+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlN1Z2dlc3Rpb24gSGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zdG9yYWdlLmNlbnNlLmFpL2NvZGVhcnJheS9wb3J0YWxfdWlfZ3VpZGUvc3VnZ2VzdGlvbl9oZWxwLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNzUwcHg7IGhlaWdodDogMzMwcHg7IiBhbHQ9InNpbXBsZSB0ZXh0IiAvPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjEuIERlc2NyaXB0aW9uIDo8L2I+XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QSB0ZXh0IEFyZWEgaXMgcHJvdmlkZWQgd2hlcmUgdGhlIGN1c3RvbWVyIGNhbiBnaXZlIHRoZWlyIHZhbHVhYmxlXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1Z2dlc3Rpb24uPC9saT5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29sPlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn0sIHsKICBuYW1lOiAic3VwcG9ydC1oZWxwIiwKICBkYXRhOiB7CiAgICBjYWxsZGF0YTogJzxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+XAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+SGVscDwvaDM+XAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPlwKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjoganVzdGlmeTsiPlwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj5JZiB5b3UgbmVlZCBhbnkgaGVscCBwbGVhc2UgY29udGFjdCB1cyBhdCA8YSBocmVmID0gIm1haWx0bzogc3VwcG9ydEBjZW5zZS5haSI+c3VwcG9ydEBjZW5zZS5haTwvYT48L2g2PlwKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XAogICAgICAgICAgICAgICAgICAgIDwvZGl2PicKICB9Cn1dOwpleHBvcnQgZGVmYXVsdCByb3V0ZXM7"},null]}