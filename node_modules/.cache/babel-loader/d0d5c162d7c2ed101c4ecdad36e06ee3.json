{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/eslint-loader/index.js??ref--13-0!/home/vimalesh/CENSE/chatbot-portal/src/portal/mixins/ResponseBot/voicerecorder.js","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/mixins/ResponseBot/voicerecorder.js","mtime":1655466514169},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/vimalesh/CENSE/chatbot-portal/src/portal/mixins/ResponseBot/voicerecorder.js"],"names":["Recorder","axios","api_calls","Socket","data","audioStream","methods","call_cloud_api","document","querySelector","classList","add","audioContext","window","AudioContext","webkitAudioContext","buffer_list","buffer_i32","recorder","onAnalysed","voice_channel","wav_parameters","recBuffers","recLength","meta_data","vm","get","voice_channel_api","then","response","voice_socket","process","env","VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT","params","company","$session","company_name","voice_channel_name","token","is_voice","connect","channel","join","blob","navigator","mediaDevices","getUserMedia","audio","stream","init","startRecording","catch","err","console","log","start","setTimeout","stopRecording","stop","buffer","getTracks","forEach","track","reader","FileReader","readAsArrayBuffer","onloadend","result","temp","Uint8Array","wav_file_processing_read_parameters","init_encoder","arrayBuffer","encData","encodeFlac","error","metaData","blob_download","exportFlacFile","readAsDataURL","reader_string","split","push","on","remove","text","results","undefined","$emit","alternatives","transcript","to_send","toastr","binData","ui8_data","sample_rate","channels","bps","total_samples","block_align","position","write_callback_fn","bytes","samples","current_frame","metadata_callback_fn","wav_file_processing_check_wav_format","status","tot_samples","compression_level","flac_ok","is_verify","flac_encoder","Flac","create_libflac_encoder","init_status","init_encoder_stream","msg","wav_file_processing_convert_16bitdata_to32bitdata","flac_return","FLAC__stream_encoder_process_interleaved","length","FLAC__stream_encoder_finish","FLAC__stream_encoder_delete","String","fromCharCode","apply","subarray","flac_file_processing_check_flac_format","view","DataView","getUint8","arraybuffer","ab_i16","buf_length","byteLength","buf32_length","Uint32Array","index","j","setInt32","getInt16","getLength","addFLACMetaData","mergeBuffers","the_blob","Blob","i","chunks","metadata","offset","setUint8","min_framesize","max_framesize","writeMd5","md5sum","channelBuffer","recordingLength","lng","set","str","parseInt","substring"],"mappings":"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","sourcesContent":["import Recorder from '@/portal/components/recorder'\nimport axios from 'axios'\nimport api_calls from '@/portal/api_calls'\nimport { Socket } from 'phoenix-socket'\n\nexport default {\n  data () {\n    return {\n      audioStream: null\n    }\n  },\n  methods: {\n    call_cloud_api () {\n      document.querySelector('#microphone').classList.add('voice-on')\n      const audioContext = new (window.AudioContext ||\n        window.webkitAudioContext)()\n      var buffer_list, buffer_i32\n      var recorder = new Recorder(audioContext, {\n        // An array of 255 Numbers\n        // You can use this to visualize the audio stream\n        // If you use react, check out react-wave-stream\n        onAnalysed: data => { }\n      })\n\n      var voice_channel,\n        wav_parameters,\n        recBuffers = [],\n        recLength,\n        meta_data\n      var vm = this\n      axios.get(api_calls.voice_channel_api()).then(response => {\n        this.voice_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {\n          params: {\n            company: this.$session.get('UserInformation').company_name,\n            voice_channel_name: response.data.voice_channel_name,\n            token: response.data.token,\n            is_voice: true\n          }\n        })\n        this.voice_socket.connect()\n\n        voice_channel = this.voice_socket.channel(\n          'voice_to_text:' + response.data.voice_channel_name\n        )\n        voice_channel.join()\n      })\n\n      let blob = null\n\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(stream => {\n          this.audioStream = stream\n          recorder.init(stream)\n          startRecording()\n        })\n        .catch(err => console.log('Uh oh... unable to get stream...', err))\n\n      function startRecording (stream) {\n        recorder.start()\n        setTimeout(() => {\n          stopRecording()\n        }, 4000)\n      }\n\n      function stopRecording () {\n        recorder.stop().then(({ blob, buffer }) => {\n          vm.audioStream.getTracks().forEach((track) => {\n            track.stop()\n          })\n          // buffer_list = buffer[0];\n          var reader = new FileReader()\n          reader.readAsArrayBuffer(blob)\n          reader.onloadend = () => {\n            buffer_list = reader.result\n            var temp = new Uint8Array(buffer_list)\n            wav_parameters = wav_file_processing_read_parameters(temp)\n            init_encoder(buffer_list)\n          }\n          // Recorder.download(blob, \"my-file\");\n          // buffer is an AudioBuffer\n        })\n      }\n\n      function init_encoder (data) {\n        var arrayBuffer = new Uint8Array(data)\n\n        var encData = []\n        var result = encodeFlac(arrayBuffer, encData)\n        // console.log(\"encoded data array: \", encData);\n\n        if (result.error) {\n          console.error('Conversion failed!!')\n        }\n\n        var metaData = result.metaData\n\n        if (!result.error) {\n          // using data-util.js utility function(s)\n          var blob_download = exportFlacFile(encData, metaData)\n          // var down_file = URL.createObjectURL(blob_download);\n          // let file = document.createElement(\"a\");\n          // file.href = down_file;\n          // file.download = \"output.flac\";\n          // file.click()\n          var reader = new FileReader()\n          reader.readAsDataURL(blob_download)\n          reader.onloadend = function () {\n            var reader_string = reader.result.split('base64,')[1]\n            voice_channel.push('voice_packets_sent', { stream: reader_string })\n            voice_channel.on('voice_to_text_reply', data => {\n              document\n                .querySelector('#microphone')\n                .classList.remove('voice-on')\n              if (data.text.results != undefined) {\n                vm.$emit('analytics_search_bar_voice_result', data.text.results[0].alternatives[0].transcript)\n                vm.to_send = data.text.results[0].alternatives[0].transcript\n              } else {\n                toastr.error(\n                  'We could not recognize your voice. Please try again or type in.'\n                )\n              }\n            })\n          }\n        }\n      }\n\n      function encodeFlac (binData, recBuffers) {\n        var ui8_data = new Uint8Array(binData)\n        var sample_rate = 0,\n          channels = 0,\n          bps = 0,\n          total_samples = 0,\n          block_align,\n          position = 0,\n          recLength = 0,\n          meta_data\n\n        /**\n         *  records/saves the output data of libflac-encode method\n         */\n        function write_callback_fn (buffer, bytes, samples, current_frame) {\n          recBuffers.push(buffer)\n          recLength += bytes\n          // recLength += buffer.byteLength;\n        }\n\n        function metadata_callback_fn (data) {\n          meta_data = data\n        }\n\n        // check: is file a compatible wav-file?\n        if (wav_file_processing_check_wav_format(ui8_data) == false) {\n          return { error: 'Wrong WAV file format', status: 0 }\n        }\n\n        // get WAV/PCM parameters from data / file\n        var wav_parameters = wav_file_processing_read_parameters(ui8_data)\n        var tot_samples = 0\n        var compression_level = 5\n        var flac_ok = 1\n        var is_verify = true\n\n        var flac_encoder = Flac.create_libflac_encoder(\n          wav_parameters.sample_rate,\n          wav_parameters.channels,\n          wav_parameters.bps,\n          compression_level,\n          tot_samples,\n          is_verify\n        )\n        if (flac_encoder != 0) {\n          var init_status = Flac.init_encoder_stream(\n            flac_encoder,\n            write_callback_fn,\n            metadata_callback_fn,\n            0\n          )\n          flac_ok &= init_status == 0\n        } else {\n          var msg = 'Error initializing the decoder.'\n          console.error(msg)\n          return { error: msg, status: 1 }\n        }\n\n        // convert the PCM-Data to the appropriate format for the libflac library methods (32-bit array of samples)\n        // creates a new array (32-bit) and stores the 16-bit data of the wav-file as 32-bit data\n        var buffer_i32 = wav_file_processing_convert_16bitdata_to32bitdata(\n          ui8_data.buffer\n        )\n\n        var flac_return = Flac.FLAC__stream_encoder_process_interleaved(\n          flac_encoder,\n          buffer_i32,\n          buffer_i32.length / wav_parameters.channels\n        )\n\n        if (flac_return != true) {\n          console.log(\n            'Error: FLAC__stream_encoder_process_interleaved returned false. ' +\n            flac_return\n          )\n        }\n\n        flac_ok &= Flac.FLAC__stream_encoder_finish(flac_encoder)\n\n        Flac.FLAC__stream_encoder_delete(flac_encoder)\n\n        return { metaData: meta_data, status: flac_ok }\n      }\n\n      function wav_file_processing_check_wav_format (ui8_data) {\n        // check: is file a compatible wav-file?\n        if (\n          ui8_data.length < 44 ||\n          String.fromCharCode.apply(null, ui8_data.subarray(0, 4)) != 'RIFF' ||\n          String.fromCharCode.apply(null, ui8_data.subarray(8, 16)) !=\n          'WAVEfmt ' ||\n          String.fromCharCode.apply(null, ui8_data.subarray(36, 40)) != 'data'\n        ) {\n          console.log('ERROR: wrong format for wav-file.')\n          return false\n        }\n        return true\n      }\n\n      /**\n       *  checks if the given ui8_data (ui8array) is of a flac-file\n       */\n      function flac_file_processing_check_flac_format (ui8_data) {\n        // check: is file a compatible flac-file?\n        if (\n          ui8_data.length < 42 ||\n          String.fromCharCode.apply(null, ui8_data.subarray(0, 4)) != 'fLaC'\n        ) {\n          console.log('ERROR: wrong format for flac-file.')\n          return false\n        }\n\n        var view = new DataView(ui8_data.buffer)\n        // check last 7 bits of 4th byte for meta-data BLOCK type: must be STREAMINFO (0)\n        if ((view.getUint8(4) & 0x7f) != 0) {\n          console.log('ERROR: wrong format for flac-file.')\n          return false\n        }\n\n        return true\n      }\n\n      function wav_file_processing_read_parameters (ui8_data) {\n        var sample_rate = 0,\n          channels = 0,\n          bps = 0,\n          total_samples = 0,\n          block_align\n\n        // get WAV/PCM parameters from data / file\n        sample_rate =\n          (((((ui8_data[27] << 8) | ui8_data[26]) << 8) | ui8_data[25]) << 8) |\n          ui8_data[24]\n        channels = ui8_data[22]\n        bps = ui8_data[34]\n        block_align = ui8_data[32]\n        total_samples =\n          ((((((ui8_data[43] << 8) | ui8_data[42]) << 8) | ui8_data[41]) << 8) |\n            ui8_data[40]) /\n          block_align\n\n        return {\n          sample_rate: sample_rate,\n          channels: channels,\n          bps: bps,\n          total_samples: total_samples,\n          block_align: block_align\n        }\n      }\n\n      /**\n       *  converts the PCM data of the wav file (each sample stored as 16 bit value) into\n       *  a format expected by the libflac-encoder method (each sample stored as 32 bit value in a 32-bit array)\n       */\n      function wav_file_processing_convert_16bitdata_to32bitdata (arraybuffer) {\n        // convert the PCM-Data to the appropriate format for the libflac library methods (32-bit array of samples)\n        // creates a new array (32-bit) and stores the 16-bit data of the wav-file as 32-bit data\n        var ab_i16 = new DataView(arraybuffer, 44)\n        var buf_length = ab_i16.byteLength\n        var buf32_length = buf_length / 2\n        var buffer_i32 = new Uint32Array(buf32_length)\n        var view = new DataView(buffer_i32.buffer)\n        var index = 0\n        for (var j = 0; j < buf_length; j += 2) {\n          view.setInt32(index, ab_i16.getInt16(j, true), true)\n          index += 4\n        }\n        return buffer_i32\n      }\n\n      function exportFlacFile (recBuffers, metaData) {\n        var recLength = getLength(recBuffers)\n        if (metaData) {\n          addFLACMetaData(recBuffers, metaData)\n        }\n        // convert buffers into one single buffer\n        var samples = mergeBuffers(recBuffers, recLength)\n        var the_blob = new Blob([samples])\n        return the_blob\n      }\n\n      function getLength (recBuffers) {\n        // get length\n        var recLength = 0\n        for (var i = recBuffers.length - 1; i >= 0; --i) {\n          recLength += recBuffers[i].byteLength\n        }\n        return recLength\n      }\n\n      function addFLACMetaData (chunks, metadata) {\n        var offset = 4\n        var data = chunks[0] // 1st data chunk should contain FLAC identifier \"fLaC\"\n        if (\n          data.length < 4 ||\n          String.fromCharCode.apply(null, data.subarray(0, 4)) != 'fLaC'\n        ) {\n          console.error(\n            'Unknown data format: cannot add additional FLAC meta data to header'\n          )\n          return\n        }\n\n        // first chunk only contains the flac identifier string?\n        if (data.length == 4) {\n          data = chunks[1] // get 2nd data chunk which should contain STREAMINFO meta-data block (and probably more)\n          offset = 0\n        }\n\n        var view = new DataView(data.buffer)\n\n        // NOTE by default, the encoder writes a 2nd meta-data block (type VORBIS_COMMENT) with encoder/version info -> do not set \"is last\" to TRUE for first one\n        //\t// write \"is last meta data block\" & type STREAMINFO type (0) as little endian combined uint1 & uint7 -> uint8:\n        //\tvar isLast = 1;//1 bit\n        //\tvar streamInfoType = 0;//7 bit\n        //\tview.setUint8(0 + offset, isLast << 7 | streamInfoType, true);//8 bit\n\n        // block-header: STREAMINFO type, block length -> already set\n\n        // block-content: min_blocksize, min_blocksize -> already set\n\n        // write min_framesize as little endian uint24:\n        view.setUint8(8 + offset, metadata.min_framesize >> 16, true) // 24 bit\n        view.setUint8(9 + offset, metadata.min_framesize >> 8, true) // 24 bit\n        view.setUint8(10 + offset, metadata.min_framesize, true) // 24 bit\n\n        // write max_framesize as little endian uint24:\n        view.setUint8(11 + offset, metadata.max_framesize >> 16, true) // 24 bit\n        view.setUint8(12 + offset, metadata.max_framesize >> 8, true) // 24 bit\n        view.setUint8(13 + offset, metadata.max_framesize, true) // 24 bit\n\n        // block-content: sampleRate, channels, bitsPerSample -> already set\n\n        // write total_samples as little endian uint36:\n        // TODO set last 4 bits to half of the value in index 17\n        view.setUint8(18 + offset, metadata.total_samples >> 24, true) // 36 bit\n        view.setUint8(19 + offset, metadata.total_samples >> 16, true) // 36 bit\n        view.setUint8(20 + offset, metadata.total_samples >> 8, true) // 36 bit\n        view.setUint8(21, metadata.total_samples, true) // 36 bit\n\n        writeMd5(view, 22 + offset, metadata.md5sum) // 16 * 8 bit\n      }\n\n      function mergeBuffers (channelBuffer, recordingLength) {\n        var result = new Uint8Array(recordingLength)\n        var offset = 0\n        var lng = channelBuffer.length\n        for (var i = 0; i < lng; i++) {\n          var buffer = channelBuffer[i]\n          result.set(buffer, offset)\n          offset += buffer.length\n        }\n        return result\n      }\n\n      function writeMd5 (view, offset, str) {\n        var index\n        for (var i = 0; i < str.length / 2; ++i) {\n          index = i * 2\n          view.setUint8(\n            i + offset,\n            parseInt(str.substring(index, index + 2), 16)\n          )\n        }\n      }\n    }\n  }\n}\n"]}]}