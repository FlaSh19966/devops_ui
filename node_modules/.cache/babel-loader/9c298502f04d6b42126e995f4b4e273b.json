{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/AlternateProductNames.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/AlternateProductNames.vue","mtime":1645594423491},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IGFwaV9jYWxscyBmcm9tICJAL3BvcnRhbC9hcGlfY2FsbHMuanMiOwppbXBvcnQgU3dhbCBmcm9tICJzd2VldGFsZXJ0MiI7CmltcG9ydCB7IGZyZWV6ZV9wb3J0YWwsIHNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbCB9IGZyb20gIkAvcG9ydGFsL21peGlucyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQWx0ZXJuYXRlUHJvZHVjdE5hbWVzUGFnZSIsCiAgbWl4aW5zOiBbZnJlZXplX3BvcnRhbCwgc2hvd19zdWJzY3JpcHRpb25fZXhwaXJlZF9zd2FsXSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc2VhcmNoUXVlcnk6IG51bGwsCiAgICAgIHNwaW5uZXJPbjogZmFsc2UsCiAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgIC8vIHByb2R1Y3RfbmFtZXNfbGlzdDogW10sCiAgICAgIGN1cnJlbnRfcHJvZHVjdF9uYW1lOiBudWxsLAogICAgICBhbHRlcm5hdGVfcHJvZHVjdF9uYW1lOiBudWxsLAogICAgICBhbHRlcm5hdGVfcHJvZHVjdF9saXN0OiBbXSwKICAgICAgaXNfZWRpdF9hbHRlcm5hdGVfbmFtZTogZmFsc2UsCiAgICAgIGN1cnJlbnRfZWRpdF9pbmRleDogbnVsbCwKICAgICAgcmV0YWlsX2JvdF90ZW1wbGF0ZV9pZDogbnVsbCwKICAgICAgcHJvZHVjdHNfbGlzdF9kYXRhOiBbXSwKICAgICAgY3VycmVudF9hY3RpdmVfcHJvZHVjdDogbnVsbCwKICAgICAgaXNWaXNpYmxlU2VhcmNoQ2xlYXI6IGZhbHNlLAogICAgICB3YW50X3N0YXR1czogdHJ1ZSwKICAgICAgaW50ZW50X25lcl9tb2RlbF9pbnByb2dyZXNzOiBmYWxzZSwKICAgICAgY2hlY2tlZF9saXN0OiBbXSwKICAgICAgZGlzYWJsZV9idG5fZXhwaXJlZDogZmFsc2UKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgcHJvZHVjdE5hbWU6IGZ1bmN0aW9uIHByb2R1Y3ROYW1lKCkgewogICAgICB2YXIgcHJvZHVjdHNfbmFtZSA9ICIiOwoKICAgICAgaWYgKHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aCAhPSAwKSB7CiAgICAgICAgdmFyIGNoZWNrID0gZmFsc2U7CgogICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5jaGVja2VkX2xpc3QpIHsKICAgICAgICAgIGlmICh0aGlzLmNoZWNrZWRfbGlzdFtpXS5wcm9kdWN0X25hbWUgPT0gdGhpcy5jdXJyZW50X2FjdGl2ZV9wcm9kdWN0LnByb2R1Y3RfbmFtZSkgewogICAgICAgICAgICBjaGVjayA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoY2hlY2spIHsKICAgICAgICAgIHZhciBsZW4gPSB0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGggLSAxOwogICAgICAgICAgcmV0dXJuIHByb2R1Y3RzX25hbWUgPSB0aGlzLmN1cnJlbnRfYWN0aXZlX3Byb2R1Y3QucHJvZHVjdF9uYW1lICsgKGxlbiA+IDAgPyAiIGFuZCAiICsgKGxlbiA+IDAgPyBsZW4gOiAnJykgKyAiIG1vcmUiIDogJycpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50X2FjdGl2ZV9wcm9kdWN0LnByb2R1Y3RfbmFtZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudF9hY3RpdmVfcHJvZHVjdC5wcm9kdWN0X25hbWU7CiAgICAgIH0KICAgIH0sCiAgICByZXN1bHRRdWVyeTogZnVuY3Rpb24gcmVzdWx0UXVlcnkoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAodGhpcy5zZWFyY2hRdWVyeSkgewogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgIHJldHVybiB0aGlzLnByb2R1Y3RzX2xpc3RfZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBfdGhpcy5zZWFyY2hRdWVyeS50b0xvd2VyQ2FzZSgpLnNwbGl0KCcgJykuZXZlcnkoZnVuY3Rpb24gKHYpIHsKICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucHJvZHVjdF9uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICByZXR1cm4gdGhpcy5wcm9kdWN0c19saXN0X2RhdGE7CiAgICAgIH0KICAgIH0sCiAgICBjaGVja19pc19lZGl0OiBmdW5jdGlvbiBjaGVja19pc19lZGl0KCkgewogICAgICByZXR1cm4gdGhpcy5pc19lZGl0X2FsdGVybmF0ZV9uYW1lID8gdGhpcy5zYXZlX2VkaXRfYWx0ZXJuYXRlX25hbWUgOiB0aGlzLmFkZF9hbHRlcm5hdGVfbmFtZTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICB2YXIgYm90X3RlbXBsYXRlc19kYXRhID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkJvdFRlbXBsYXRlcyIpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm90X3RlbXBsYXRlc19kYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChib3RfdGVtcGxhdGVzX2RhdGFbaV0uZG9tYWluID09PSAiUmV0YWlsIiAmJiBib3RfdGVtcGxhdGVzX2RhdGFbaV0uc3Vic2NyaWJlZCA9PT0gdHJ1ZSkgewogICAgICAgIHRoaXMucmV0YWlsX2JvdF90ZW1wbGF0ZV9pZCA9IGJvdF90ZW1wbGF0ZXNfZGF0YVtpXS50ZW1wbGF0ZV9pZDsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIHRoaXMuJHJvb3QuJG9uKCJzZW5kX21vZGVsX3N0YXR1cyIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGlmIChkYXRhID09IHRydWUpIHsKICAgICAgICBfdGhpczIuY2hlY2tfaW50ZW50X25lcl9tb2RlbF9zdGF0dXMoKTsKICAgICAgfQogICAgfSk7CiAgICB2YXIgdm0gPSB0aGlzOwogICAgJCgiI3NlbGVjdGFsbCIpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKCQodGhpcykuaXMoIjpjaGVja2VkIikpIHsKICAgICAgICAvLyAkKCdkaXY6aW5wdXQnKS5wcm9wKCdjaGVja2VkJyx0cnVlKTsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2bS5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgIH0KICAgIH0pOyAvLyB0aGlzLmZldGNoX3Byb2R1Y3RfbGlzdCgpOwoKICAgIHRoaXMuZmV0Y2hfYWRkZWRfc3lub255bXMoKTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBfdGhpczIuZnJlZXplX3BvcnRhbCgpOwogICAgfSwgMTAwMCk7CiAgICB0aGlzLmNoZWNrX2ludGVudF9uZXJfbW9kZWxfc3RhdHVzKCk7CiAgICB0aGlzLiRyb290LiRvbigiQWx0ZXJuYXRlUHJvZHVjdE5hbWVzUGFnZURpc2FibGVkIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHsKICAgICAgICBfdGhpczIuZGlzYWJsZV9idG5fZXhwaXJlZCA9IHRydWU7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgd2F0Y2g6IHsKICAgIHNlYXJjaFF1ZXJ5OiBmdW5jdGlvbiBzZWFyY2hRdWVyeSgpIHsKICAgICAgaWYgKHRoaXMuc2VhcmNoUXVlcnkgPT09ICcnIHx8IHRoaXMuc2VhcmNoUXVlcnkgPT09IG51bGwpIHsKICAgICAgICB0aGlzLmlzVmlzaWJsZVNlYXJjaENsZWFyID0gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZWFyY2hRdWVyeSAhPSBudWxsIHx8IHRoaXMuc2VhcmNoUXVlcnkgIT0gJycpIHsKICAgICAgICB0aGlzLmlzVmlzaWJsZVNlYXJjaENsZWFyID0gdHJ1ZTsKICAgICAgfQoKICAgICAgdGhpcy5zZXRfY3VycmVudF9wcm9kdWN0KDApOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgc2VsZWN0ZWRfc3RhdGVtZW50czogZnVuY3Rpb24gc2VsZWN0ZWRfc3RhdGVtZW50cyhpbmRleCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmIChpbmRleCA9PSAiYWxsIikgewogICAgICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gW107CiAgICAgICAgdmFyIHJvbGVfbGVuZ3RoID0gdGhpcy5yZXN1bHRRdWVyeS5sZW5ndGg7CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm9sZV9sZW5ndGg7IGkrKykgewogICAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QucHVzaCh0aGlzLnJlc3VsdFF1ZXJ5W2ldKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICAgIGlmICghdGhpcy5jaGVja2VkX2xpc3QuaW5jbHVkZXMoaW5kZXgpKSB7CiAgICAgICAgICAgIHRoaXMuY2hlY2tlZF9saXN0LnB1c2godGhpcy5yZXN1bHRRdWVyeVtpbmRleF0pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQgPT0gZmFsc2UpIHsKICAgICAgICAgIHZhciBzZWxlY3RhbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjc2VsZWN0YWxsIik7CgogICAgICAgICAgaWYgKHNlbGVjdGFsbC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICAgICAgc2VsZWN0YWxsLmNoZWNrZWQgPSBmYWxzZTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgdGVtcCA9IHRoaXMuY2hlY2tlZF9saXN0LmZpbHRlcihmdW5jdGlvbiAocm9sZSkgewogICAgICAgICAgICByZXR1cm4gcm9sZSAhPT0gX3RoaXMzLnJlc3VsdFF1ZXJ5W2luZGV4XTsKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSB0ZW1wOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGNoZWNrX2ludGVudF9uZXJfbW9kZWxfc3RhdHVzOiBmdW5jdGlvbiBjaGVja19pbnRlbnRfbmVyX21vZGVsX3N0YXR1cygpIHsKICAgICAgdGhpcy5tb2RlbF9zdGF0dXMgPSB0aGlzLiRzZXNzaW9uLmdldCgiTW9kZWxTdGF0dXMiKTsKCiAgICAgIGlmICh0aGlzLm1vZGVsX3N0YXR1cyA9PSAiTm8gRmFpbHVyZSIpIHsKICAgICAgICB0aGlzLmludGVudF9uZXJfbW9kZWxfaW5wcm9ncmVzcyA9IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKEJvb2xlYW4odGhpcy5tb2RlbF9zdGF0dXMuaW50ZW50X21vZGVsKSA9PT0gdHJ1ZSB8fCBCb29sZWFuKHRoaXMubW9kZWxfc3RhdHVzLm5lcl9tb2RlbCkgPT09IHRydWUpIHsKICAgICAgICBpZiAodGhpcy5tb2RlbF9zdGF0dXMuaW50ZW50X21vZGVsID09ICJJblByb2dyZXNzIiB8fCB0aGlzLm1vZGVsX3N0YXR1cy5uZXJfbW9kZWwgPT0gIkluUHJvZ3Jlc3MiKSB7CiAgICAgICAgICB0aGlzLmludGVudF9uZXJfbW9kZWxfaW5wcm9ncmVzcyA9IHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuaW50ZW50X25lcl9tb2RlbF9pbnByb2dyZXNzID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuaW50ZW50X25lcl9tb2RlbF9pbnByb2dyZXNzID0gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgICBzaG93X21vZGVsX3Byb2dyZXNzOiBmdW5jdGlvbiBzaG93X21vZGVsX3Byb2dyZXNzKGluZGV4KSB7CiAgICAgIGlmICh0aGlzLmludGVudF9uZXJfbW9kZWxfaW5wcm9ncmVzcyA9PSB0cnVlKSB7CiAgICAgICAgaWYgKGluZGV4ID09ICdzdHlsZScpIHsKICAgICAgICAgIHJldHVybiAiY3Vyc29yOiBub3QtYWxsb3dlZCI7CiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PSAndGl0bGUnKSB7CiAgICAgICAgICByZXR1cm4gIlRyYWluaW5nIGluIFByb2dyZXNzIChUaGlzIHByb2Nlc3MgbWlnaHQgdGFrZSBhcm91bmQgNDUgbWlucyB0byBmaW5pc2gpICI7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICB9LAogICAgY2xlYXJfc2VhcmNoX25hbWU6IGZ1bmN0aW9uIGNsZWFyX3NlYXJjaF9uYW1lKCkgewogICAgICB0aGlzLnNlYXJjaFF1ZXJ5ID0gbnVsbDsKICAgIH0sCiAgICBzeW5jX3Byb2R1Y3RzOiBmdW5jdGlvbiBzeW5jX3Byb2R1Y3RzKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIFN3YWwoewogICAgICAgIHRpdGxlOiAiQXJlIHlvdSBzdXJlPyIsCiAgICAgICAgdGV4dDogIiBZb3Ugd2FudCB0byBzeW5jIHByb2R1Y3RzIGRhdGE/IiwKICAgICAgICB0eXBlOiAicXVlc3Rpb24iLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlllcywgQ29uZmlybSEiCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgIF90aGlzNC5zcGlubmVyT24gPSB0cnVlOwogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMudGVtcGxhdGVfc3lub255bXMoKSwgewogICAgICAgICAgICBjb21wYW55X2lkOiBfdGhpczQuY29tcGFueV9pZCwKICAgICAgICAgICAgY29tcGFueV9uYW1lOiBfdGhpczQuY29tcGFueV9uYW1lLAogICAgICAgICAgICB0ZW1wbGF0ZV9pZDogX3RoaXM0LnJldGFpbF9ib3RfdGVtcGxhdGVfaWQsCiAgICAgICAgICAgIGlzX3N5bmM6IHRydWUKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXM0LiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgICAgfQogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoX3JlZikgewogICAgICAgICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTsKICAgICAgICAgICAgX3RoaXM0LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09ICJTdWNjZXNzIikgewogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdGl0bGU6ICJQcm9kdWN0cyBhcmUgYmVpbmcgc3luY2VkIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJUaGlzIG1pZ2h0IHRha2Ugc29tZSB0aW1lIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJpbmZvIiwKICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgdGltZXI6IDU1MDAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHRpdGxlOiAiU29tZSBFcnJvciBPY2N1cnJlZCEiLAogICAgICAgICAgICAgICAgdGV4dDogIlBsZWFzZSB0cnkgYWdhaW4hIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBfdGhpczQuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICBfdGhpczQuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZmV0Y2hfYWRkZWRfc3lub255bXM6IGZ1bmN0aW9uIGZldGNoX2FkZGVkX3N5bm9ueW1zKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMudGVtcGxhdGVfc3lub255bXMoKSwgewogICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueV9pZCwKICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueV9uYW1lLAogICAgICAgIHRlbXBsYXRlX2lkOiB0aGlzLnJldGFpbF9ib3RfdGVtcGxhdGVfaWQsCiAgICAgICAgaXNfZ2V0OiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7CiAgICAgICAgX3RoaXM1LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT09ICJTdWNjZXNzIikgewogICAgICAgICAgaWYgKGRhdGEuZGF0YS5TeW5vbnltcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIF90aGlzNS5wcm9kdWN0c19saXN0X2RhdGEgPSBkYXRhLmRhdGEuU3lub255bXM7CgogICAgICAgICAgICBfdGhpczUuc2V0X2N1cnJlbnRfcHJvZHVjdCgwKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXM1LmZyZWV6ZV9wb3J0YWwoKTsKICAgICAgICB9LCAxMDAwKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczUuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXM1LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8gZmV0Y2hfcHJvZHVjdF9saXN0KCkgewogICAgLy8gICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAvLyAgIGF4aW9zCiAgICAvLyAgICAgLnBvc3QoYXBpX2NhbGxzLnRlbXBsYXRlX3N5bm9ueW1zKCksIHsKICAgIC8vICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueV9pZCwKICAgIC8vICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55X25hbWUsCiAgICAvLyAgICAgICBpc19nZXRfcHJvZHVjdF9saXN0OiB0cnVlLAogICAgLy8gICAgIH0sCiAgICAvLyAgICAgewogICAgLy8gICAgICAgaGVhZGVyczogewogICAgLy8gICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgIC8vICAgICB9LAogICAgLy8gICAgIH0pCiAgICAvLyAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7CiAgICAvLyAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgLy8gICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAiU3VjY2VzcyIpIHsKICAgIC8vICAgICAgICAgdGhpcy5wcm9kdWN0X25hbWVzX2xpc3QgPSBkYXRhLnByb2R1Y3RfbmFtZXNfbGlzdDsKICAgIC8vICAgICAgICAgaWYgKHRoaXMucHJvZHVjdF9uYW1lc19saXN0Lmxlbmd0aCA+IDApIHsKICAgIC8vICAgICAgICAgICB0aGlzLmN1cnJlbnRfcHJvZHVjdF9uYW1lID0gdGhpcy5wcm9kdWN0X25hbWVzX2xpc3RbMF07CiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICAgIH0KICAgIC8vIHNldFRpbWVvdXQoKCkgPT4gewogICAgLy8gICB0aGlzLmZyZWV6ZV9wb3J0YWwoKTsKICAgIC8vIH0sIDEwMDApOwogICAgLy8gICAgIH0pCiAgICAvLyAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAvLyAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgLy8gICAgICAgICBpZiAoCiAgICAvLyAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgLy8gICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgIC8vICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAvLyAgICAgICAgICkgewogICAgLy8gICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICAgIH0pOwogICAgLy8gfSwKICAgIGFkZF9hbHRlcm5hdGVfbmFtZTogZnVuY3Rpb24gYWRkX2FsdGVybmF0ZV9uYW1lKCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5kaXNhYmxlX2J0bl9leHBpcmVkKSB7CiAgICAgICAgaWYgKEJvb2xlYW4odGhpcy5hbHRlcm5hdGVfcHJvZHVjdF9uYW1lKSA9PT0gdHJ1ZSkgewogICAgICAgICAgaWYgKHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICB0aXRsZTogIk11bHRpcGxlIHByb2R1Y3RzIGFyZSBzZWxlY3RlZCIsCiAgICAgICAgICAgICAgdGV4dDogJ1RoZSAnICsgdGhpcy5hbHRlcm5hdGVfcHJvZHVjdF9uYW1lICsgJyBzeW5vbnltIHdpbGwgYmUgYWRkZWQgaW4gYWxsIHNlbGVjdGVkIHByb2R1Y3RzJywKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiCiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gX3RoaXM2LmNoZWNrZWRfbGlzdCkgewogICAgICAgICAgICAgICAgICBmb3IgKHZhciBqIGluIF90aGlzNi5wcm9kdWN0c19saXN0X2RhdGEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM2LmNoZWNrZWRfbGlzdFtpXS5pZCA9PSBfdGhpczYucHJvZHVjdHNfbGlzdF9kYXRhW2pdLmlkKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczYucHJvZHVjdHNfbGlzdF9kYXRhW2pdLnN5bm9ueW1zLnB1c2goX3RoaXM2LmFsdGVybmF0ZV9wcm9kdWN0X25hbWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzNi5hbHRlcm5hdGVfcHJvZHVjdF9uYW1lID0gbnVsbDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3RoaXM2LmFsdGVybmF0ZV9wcm9kdWN0X25hbWUgPSBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aXZlX3Byb2R1Y3Quc3lub255bXMucHVzaCh0aGlzLmFsdGVybmF0ZV9wcm9kdWN0X25hbWUpOwogICAgICAgICAgICB0aGlzLmFsdGVybmF0ZV9wcm9kdWN0X25hbWUgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbCgpOwogICAgICB9CiAgICB9LAogICAgZWRpdF9hbHRlcm5hdGVfbmFtZTogZnVuY3Rpb24gZWRpdF9hbHRlcm5hdGVfbmFtZShpbmRleCkgewogICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0YWJsZV9pZCIpLnNjcm9sbFRvcCA9IDA7CgogICAgICBpZiAoIXRoaXMuaXNfZWRpdF9hbHRlcm5hdGVfbmFtZSkgewogICAgICAgIHRoaXMuYWx0ZXJuYXRlX3Byb2R1Y3RfbmFtZSA9IHRoaXMuY3VycmVudF9hY3RpdmVfcHJvZHVjdC5zeW5vbnltc1tpbmRleF07CiAgICAgICAgdGhpcy5jdXJyZW50X2VkaXRfaW5kZXggPSBpbmRleDsKICAgICAgICB0aGlzLmlzX2VkaXRfYWx0ZXJuYXRlX25hbWUgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMucmVzZXRfZWRpdCgpOwogICAgICB9CiAgICB9LAogICAgc2F2ZV9lZGl0X2FsdGVybmF0ZV9uYW1lOiBmdW5jdGlvbiBzYXZlX2VkaXRfYWx0ZXJuYXRlX25hbWUoKSB7CiAgICAgIHRoaXMuY3VycmVudF9hY3RpdmVfcHJvZHVjdC5zeW5vbnltc1t0aGlzLmN1cnJlbnRfZWRpdF9pbmRleF0gPSB0aGlzLmFsdGVybmF0ZV9wcm9kdWN0X25hbWU7CiAgICAgIHRoaXMucmVzZXRfZWRpdCgpOwogICAgfSwKICAgIGRlbGV0ZV9hbHRlcm5hdGVfbmFtZTogZnVuY3Rpb24gZGVsZXRlX2FsdGVybmF0ZV9uYW1lKGluZGV4KSB7CiAgICAgIHRoaXMuY3VycmVudF9hY3RpdmVfcHJvZHVjdC5zeW5vbnltcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgfSwKICAgIHJlc2V0X2VkaXQ6IGZ1bmN0aW9uIHJlc2V0X2VkaXQoKSB7CiAgICAgIHRoaXMuaXNfZWRpdF9hbHRlcm5hdGVfbmFtZSA9IGZhbHNlOwogICAgICB0aGlzLmN1cnJlbnRfZWRpdF9pbmRleCA9IG51bGw7CiAgICAgIHRoaXMuYWx0ZXJuYXRlX3Byb2R1Y3RfbmFtZSA9IG51bGw7CiAgICB9LAogICAgc2V0X2N1cnJlbnRfcHJvZHVjdDogZnVuY3Rpb24gc2V0X2N1cnJlbnRfcHJvZHVjdChpbmRleCkgewogICAgICB0aGlzLnJlc2V0X2VkaXQoKTsKICAgICAgdGhpcy5jdXJyZW50X2FjdGl2ZV9wcm9kdWN0ID0gdGhpcy5yZXN1bHRRdWVyeVtpbmRleF07CiAgICB9LAogICAgY2hlY2tfY3VycmVudF9wcm9kdWN0X2FjdGl2ZTogZnVuY3Rpb24gY2hlY2tfY3VycmVudF9wcm9kdWN0X2FjdGl2ZShpbmRleCkgewogICAgICBpZiAoQm9vbGVhbih0aGlzLmN1cnJlbnRfYWN0aXZlX3Byb2R1Y3QpID09PSB0cnVlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudF9hY3RpdmVfcHJvZHVjdC5pZCA9PT0gdGhpcy5yZXN1bHRRdWVyeVtpbmRleF0uaWQgPyAiY3VycmVudC1hY3RpdmUtcHJvZHVjdCIgOiBudWxsOwogICAgICB9CiAgICB9LAogICAgY2hlY2tfY3VycmVudF9lZGl0X3N5bm9ueW06IGZ1bmN0aW9uIGNoZWNrX2N1cnJlbnRfZWRpdF9zeW5vbnltKGluZGV4LCB0YWcpIHsKICAgICAgaWYgKEJvb2xlYW4odGhpcy5pc19lZGl0X2FsdGVybmF0ZV9uYW1lKSA9PT0gdHJ1ZSkgewogICAgICAgIGlmICh0YWcgPT09ICJzcGFuIikgewogICAgICAgICAgcmV0dXJuICJub3QtY3VycmVudC1lZGl0LXN5bm9ueW0tc3BhbiI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRfZWRpdF9pbmRleCA9PT0gaW5kZXggPyAiY3VycmVudC1lZGl0LXN5bm9ueW0iIDogIm5vdC1jdXJyZW50LWVkaXQtc3lub255bSI7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAibm90LWVkaXRpbmctc3lub255bXMiOwogICAgICB9CiAgICB9LAogICAgc2F2ZV9zeW5vbnltczogZnVuY3Rpb24gc2F2ZV9zeW5vbnltcygpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCkgewogICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICB0aXRsZTogIkFyZSB5b3Ugc3VyZT8iLAogICAgICAgICAgdGV4dDogIllvdSB3YW50IHRvIHNhdmUgdGhlc2UgU3lub255bXMgRGF0YT8iLAogICAgICAgICAgdHlwZTogInF1ZXN0aW9uIiwKICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAiI2QzMyIsCiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlllcywgQ29uZmlybSEiCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgIF90aGlzNy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy50ZW1wbGF0ZV9zeW5vbnltcygpLCB7CiAgICAgICAgICAgICAgY29tcGFueV9uYW1lOiBfdGhpczcuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgICAgY29tcGFueV9pZDogX3RoaXM3LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgICAgICBpc19hZGRfb3JfZWRpdDogdHJ1ZSwKICAgICAgICAgICAgICB0ZW1wbGF0ZV9pZDogX3RoaXM3LnJldGFpbF9ib3RfdGVtcGxhdGVfaWQsCiAgICAgICAgICAgICAgc3lub255bXM6IF90aGlzNy5wcm9kdWN0c19saXN0X2RhdGEKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXM3LiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgX3RoaXM3LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT09ICJTdWNjZXNzIikgewogICAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICAgIHRleHQ6ICJZb3VyIGRhdGEgaXMgYmVpbmcgc2F2ZWQgbm93LCBwbGVhc2UgcmV0cmFpbiB0aGUgTW9kZWwgZnJvbSBORVIgVHJhaW5pbmcgcGFnZSh1bmRlciBUcmFpbmluZyBDZW50cmUgTWVudSkgZm9yIHRoZSBjaGFuZ2VzIHRvIGJlIHJlZmxlY3RlZCEiLAogICAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiB0cnVlIC8vIHRpbWVyOiA1MDAwLAoKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdGV4dDogIlNvbWUgRXJyb3IgT2NjdXJyZWQuIFBsZWFzZSBUcnkgQWdhaW4iLAogICAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzNy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgX3RoaXM3LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdGV4dDogIlNvbWUgRXJyb3IgT2NjdXJyZWQuIFBsZWFzZSBUcnkgQWdhaW4iLAogICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGlmIChCb29sZWFuKGUucmVzcG9uc2UpID09PSB0cnVlICYmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkpIHsKICAgICAgICAgICAgICAgIF90aGlzNy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2hvd19zdWJzY3JpcHRpb25fZXhwaXJlZF9zd2FsKCk7CiAgICAgIH0KICAgIH0sCiAgICB0cmFpbl9tb2RlbDogZnVuY3Rpb24gdHJhaW5fbW9kZWwoKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLmRpc2FibGVfYnRuX2V4cGlyZWQpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRpdGxlOiAiQXJlIFlvdSBTdXJlPyIsCiAgICAgICAgICB0ZXh0OiAiWW91IHdhbnQgdG8gVHJhaW4gVGhlIE1vZGVsPyIsCiAgICAgICAgICB0eXBlOiAicXVlc3Rpb24iLAogICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiWWVzLCBDb25maXJtISIsCiAgICAgICAgICBhbGxvd091dHNpZGVDbGljazogZmFsc2UsCiAgICAgICAgICBhbGxvd0VzY2FwZUtleTogZmFsc2UKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgICAgX3RoaXM4LnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnRyYWluX2ludGVudF9uZXJfbW9kZWwoKSwgewogICAgICAgICAgICAgIGVtYWlsOiBfdGhpczguJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXM4LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgdG9rZW46IF90aGlzOC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgICBzdWJzY3JpcHRpb246IF90aGlzOC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IF90aGlzOC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgICBjb21wYW55X2lkOiBfdGhpczguJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICAgIHVwZGF0ZV9tb2RlbDogdHJ1ZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdChfdGhpczguJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICBfdGhpczguc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgICAgX3RoaXM4LndhbnRfc3RhdHVzID0gdHJ1ZTsKCiAgICAgICAgICAgICAgX3RoaXM4LiRyb290LiRlbWl0KCJ3YW50X21vZGVsX3N0YXR1cyIsIF90aGlzOC53YW50X3N0YXR1cyk7CgogICAgICAgICAgICAgIF90aGlzOC5jaGVja19pbnRlbnRfbmVyX21vZGVsX3N0YXR1cygpOwoKICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5NU0dfQ09ERSA9PT0gNDA0NikgewogICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MocmVzcG9uc2UuZGF0YS5NU0cpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0dfQ09ERSA9PT0gMTAzNCkgewogICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKHJlc3BvbnNlLmRhdGEuTVNHKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgX3RoaXM4LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICAgIF90aGlzOC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2hvd19zdWJzY3JpcHRpb25fZXhwaXJlZF9zd2FsKCk7CiAgICAgIH0KICAgIH0KICB9Cn07"},null]}