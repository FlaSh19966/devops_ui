{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/WhatsappNewpage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/WhatsappNewpage.vue","mtime":1663910265482},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.find";
import "core-js/modules/es.array.find-index";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.array.includes";
import "core-js/modules/es.array.index-of";
import "core-js/modules/es.array.join";
import "core-js/modules/es.array.map";
import "core-js/modules/es.array.splice";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.string.includes";
import "core-js/modules/es.string.iterator";
import "core-js/modules/es.string.split";
import "core-js/modules/es.string.starts-with";
import "core-js/modules/es.string.trim";
import "core-js/modules/es.string.link";
import "core-js/modules/web.dom-collections.for-each";
import "core-js/modules/web.dom-collections.iterator";
import "core-js/modules/web.url";
import _typeof from "/home/vimalesh/CENSE/chatbot-portal/node_modules/@babel/runtime/helpers/esm/typeof";
import _defineProperty from "/home/vimalesh/CENSE/chatbot-portal/node_modules/@babel/runtime/helpers/esm/defineProperty";
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
import axios from "axios";
import api_calls from "@/portal/api_calls";
import { Socket, Presence } from "phoenix";
import moment from 'moment';
import Swal from "sweetalert2";
import Multiselect from "vue-multiselect";
import VuePhoneNumberInput from "vue-phone-number-input";
import swal from 'sweetalert2';
import EmojiPicker from "vue-emoji-picker";
import { close_modal } from "@/portal/mixins";
export default {
  name: "WhatsAppChatNewpage",
  components: {
    Multiselect: Multiselect,
    VuePhoneNumberInput: VuePhoneNumberInput,
    EmojiPicker: EmojiPicker
  },
  mixins: [close_modal],
  data: function data() {
    var _ref;

    return _ref = {
      current_page_no: 1,
      latest_page_no: 1,
      show_spinner: false,
      history: [],
      contact_list: [],
      oldCursorPosition: null,
      input: "",
      search: "",
      scroll_top_called: false,
      showEmojiPicker: false,
      searched_message: [],
      phoneno: null,
      customer_name: "",
      chat_details: [],
      search_value: "",
      is_search_div_open: false,
      search_message_value: "",
      company_id: this.$session.get("UserInformation").company_id,
      company_name: this.$session.get("UserInformation").company_name,
      session_token: this.$session.get("UserInformation").tokens,
      initial_message_load: false,
      is_profile_setup: false,
      message_pagination: {
        is_scroll_up: false,
        is_scroll_down: true,
        per_page: 10,
        page_no: 1,
        total_records: 10,
        page_record_fetched: []
      },
      is_paginated_call: false,
      default_whatsapp_status: 'Hey there! I am using whatsapp',
      edit_status: false,
      scroll_spinner_chat: false,
      show_send_message: false,
      is_message_sending_enabled: false,
      is_show_message_disabled: true,
      whatsapp_profile: {},
      edit_email: false,
      edit_address: false,
      edit_description: false,
      edit_website: false,
      toggleModal: false,
      toggleModal2: false,
      searched_message_selected: null,
      email_address: '',
      business_address: '',
      description: '',
      website_url: '',
      whatsapp_phone_number: null,
      channel: null,
      chat_socket: null,
      support_channel: null,
      message_to_send: null,
      whatsapp_status: '',
      index_update: null,
      second_website: false,
      selected_files: '',
      mouse_hover_text: false,
      vertical_types: ['Automotive', 'Beauty', 'Spa and Salon', 'Clothing and Apparel', 'Education', 'Entertainment', 'Event Planning and Service', 'Finance and Banking', 'Food and Grocery', 'Public Service', 'Hotel and Lodging', 'Medical and Health', 'Non-profit', 'Professional Services', 'Shopping and Retail', 'Travel and Transportation', 'Restaurant', 'Other'],
      current_contact_number: null
    }, _defineProperty(_ref, "whatsapp_phone_number", null), _defineProperty(_ref, "is_contact_list", false), _defineProperty(_ref, "current_contact_index", null), _defineProperty(_ref, "search_in_contact_list", ''), _defineProperty(_ref, "all_contact_list", []), _defineProperty(_ref, "start_new_conv_data", {
      start_new_conv: false,
      is_message_sending_enabled: true
    }), _defineProperty(_ref, "all_contact_pagination", {
      per_page: 10,
      page_no: 1,
      total_records: 10
    }), _defineProperty(_ref, "send_attachment_detail", {
      media_file_name: null,
      media_file: null,
      show_preview: false,
      media_content_type: null,
      media_type: null,
      send_media: true,
      document_content: null,
      media_caption: null
    }), _defineProperty(_ref, "current_fullscreen_image_src", null), _defineProperty(_ref, "add_new_contact", {
      phone_number: null,
      is_add_contact: true,
      contact_name: null,
      formattedNumber: null
    }), _defineProperty(_ref, "add_new_contact_formatted_phone_number", null), _defineProperty(_ref, "file_extensions", {
      all_allowed_file_extensions: ["image/png", "image/jpeg", "application/pdf", "text/plain", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.ms-powerpoint", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "text/csv"],
      image_file_extensions: ["image/png", "image/jpeg"],
      document_file_extensions: ["application/pdf", "text/plain", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.ms-powerpoint", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "text/csv"]
    }), _defineProperty(_ref, "whatsapp_templates", {
      templates_list: [],
      pagination_data: {
        per_page: 10,
        page_no: 1,
        total_records: 10
      },
      selected_template: null,
      preview_template_data: null
    }), _defineProperty(_ref, "contact_csv", {
      file_label: 'Choose File',
      file_content: null,
      file_selected: false
    }), _defineProperty(_ref, "whatsapp_format_dict", {
      "*": ['<strong>', '</strong>'],
      "_": ['<i>', '</i>'],
      "~": ['<s>', '</s>'],
      "```": ['<tt>', '</tt>']
    }), _defineProperty(_ref, "whatsapp_formating_list", ["*", "_", "~", "```"]), _defineProperty(_ref, "show_profile_div", false), _ref;
  },
  computed: {
    // total_pages_loaded() {
    //   if ((this.message_pagination.page_no * this.message_pagination.per_page) >= this.message_pagination.total_records) {
    //     return true;
    //   }
    //   return false;
    // },
    message_text_box_placeholder: function message_text_box_placeholder() {
      return "Send a message to user";
    },
    returnValues: function returnValues() {
      return {
        legend: 'cancel_btn'
      };
    },
    total_contact_loaded: function total_contact_loaded() {
      if (this.all_contact_pagination.page_no * this.all_contact_pagination.per_page >= this.all_contact_pagination.total_records) {
        return true;
      }

      return false;
    },
    transition_data: function transition_data() {
      return {
        countrySelectorLabel: "".concat(this.tlt('country_code')),
        phoneNumberLabel: "".concat(this.tlt('phone_number'))
      };
    }
  },
  beforeRouteLeave: function beforeRouteLeave(to, from, next) {
    $('#popover').popover('dispose');
    $('#popover').popover('hide');
    this.is_open = false;
    next();
  },
  beforeRouteEnter: function beforeRouteEnter(to, from, next) {
    $('#popover').popover('dispose');
    $('#popover').popover('hide');
    next();
  },
  mounted: function mounted() {
    var _this = this;

    this.get_contact_list(true);
    this.get_profile_details();
    var vm = this;
    $(window).bind('mousewheel', function (event) {
      // console.log(event.originalEvent.wheelDelta)
      if (event.originalEvent.wheelDelta >= 0) {
        vm.message_pagination.is_scroll_up = true;
        vm.message_pagination.is_scroll_down = false;
      } else {
        vm.message_pagination.is_scroll_up = false;
        vm.message_pagination.is_scroll_down = true;
        this.scroll_top_called = false;
      }

      vm.is_paginated_call = false;
    }); // var lastScrollTop = 0;
    // document.addEventListener(
    //   "scroll",
    //   function (ev) {
    //     if (ev.target.id === "scrolling-div-whatsapp") {
    //       console.log(ev)
    //       var st = window.pageYOffset || document.documentElement.scrollTop; // Credits: "https://github.com/qeremy/so/blob/master/so.dom.js#L426"
    //       if (st > lastScrollTop){
    //         vm.message_pagination.is_scroll_up = false;
    //       } else {
    //         console.log("Scrolling Up")
    //         vm.message_pagination.is_scroll_up = true;
    //       }
    //       lastScrollTop = st <= 0 ? 0 : st;
    //       // vm.scrollPosition = ev.target["scrollTop"];
    //     }
    //   },
    //   true
    // );

    $("#showImageModal").on("hidden.bs.modal", function (e) {
      vm.current_fullscreen_image_src = null;
    });
    $("#importContactCSVModal").on("hidden.bs.modal", function (e) {
      vm.empty_upload_csv_contacts();
    }); // axios.post(api_calls.initialize_whatsapp_topic(), 
    // {
    //   company_id: this.company_id,
    //   whatsapp_phone_number: "100",
    //   test: btoa("test_paramater")
    // }).then((response) => {
    // console.log(response)
    // this.chat_group_name = response.data.chat_group_name;
    // this.live_chat_token = response.data.token;
    // this.live_chat_on = true;
    // this.chat_socket = new Socket(
    //   process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT,
    //   {
    //     params: {
    //       whatsapp: "true",
    //       elixir_token : response.data.elixir_token,
    //       token: this.session_token,
    //       username: this.$session.get("UserInformation").email
    //     },
    //   }
    // );

    this.chat_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {
      params: {
        whatsapp: "true",
        jwt: this.$session.get("at"),
        email: this.$session.get("UserInformation").email,
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name
      }
    });
    this.chat_socket.connect();
    var company_id = this.$session.get("UserInformation").company_id;
    this.channel = this.chat_socket.channel("whatsapp:" + company_id);
    this.channel.join();
    this.channel.on("new_whatsapp_message", function (res) {
      console.log(res);

      if (res.company_id === company_id) {
        // if(!res.is_bot_conversation_realtime){
        // console.log("user bot conversation")
        var contact_index = _this.contact_list.findIndex(function (item) {
          return item.whatsapp_phone_number === res.whatsapp_phone_number;
        });

        if (res.BOTResponse == undefined) {
          // let latest_message;
          // if(res.is_bot_conversation_realtime){
          //   let is_text =  res.BOTResponse.find((item) => item.text != null),
          //   is_product = res.BOTResponse.find((item) => (item.text == null && item.products));
          //   if(Boolean(is_text)) {
          //     latest_message = is_text.text;
          //   } else if(Boolean(is_product)) {
          //     latest_message = "Product bot response"
          //   } else {
          //     latest_message = null
          //   }
          // } else {
          //   latest_message = res.whatsapp_message;
          // }
          // console.log(res, "else", contact_index)
          if (contact_index != -1) {
            _this.contact_list[contact_index].last_bot_response.text = res.whatsapp_message;
            _this.contact_list[contact_index].is_new_notification = true;
            _this.contact_list[contact_index].new_message_count = 1;
            _this.contact_list = _this.array_move(_this.contact_list, contact_index, 0); // this.current_contact_index
          }

          if (_this.check_current_number(res)) {
            var current_timestamp = new Date(),
                current_date = moment().format('YYYY-MM-DD');
            var bot_response_date = current_date;

            if (_this.history.map(function (item) {
              return item.bot_response_date == bot_response_date;
            }).length > 0) {
              bot_response_date = "";
            }

            _this.history.push({
              "BOTResponse": [],
              "UserQuery": res.whatsapp_message,
              "bot_response_date": bot_response_date,
              "bot_response_time": current_timestamp,
              "user_query_date": current_date,
              "user_query_time": current_timestamp,
              "UserQuery_DateTime": current_timestamp.toISOString()
            });
          }
        } else {
          var latest_message,
              is_text = res.BOTResponse.find(function (item) {
            return item.text != null;
          }),
              is_product = res.BOTResponse.find(function (item) {
            return item.text == null && item.products;
          });

          if (Boolean(is_text)) {
            latest_message = is_text.text;
          } else if (Boolean(is_product)) {
            latest_message = "Product bot response";
          } else {
            latest_message = null;
          }

          if (contact_index != -1) {
            _this.contact_list[contact_index].last_bot_response.text = latest_message;
            _this.contact_list[contact_index].is_new_notification = true;
            _this.contact_list[contact_index].new_message_count = 1;
            _this.contact_list = _this.array_move(_this.contact_list, contact_index, 0); // this.current_contact_index
          }

          ;

          if (_this.check_current_number(res)) {
            var _current_timestamp = new Date(),
                _current_date = moment().format('YYYY-MM-DD');

            var _bot_response_date = _current_date;

            if (_this.history.map(function (item) {
              return item.bot_response_date == _bot_response_date;
            }).length > 0) {
              _bot_response_date = "";
            }

            res["bot_response_date"] = _bot_response_date;
            res["bot_response_time"] = _current_timestamp;
            res["user_query_date"] = _current_date;
            res["user_query_time"] = _current_timestamp;

            _this.history.push(res);
          }
        }

        _this.scroll_down(); // } else {
        //   console.log("realtime conversation")
        // }

      }
    }); // })
  },
  watch: {
    search_value: function search_value(newValue) {
      var _this2 = this;

      // console.log(newValue)
      if (newValue != "" && newValue.length > 2) {
        this.show_spinner = true;
        axios.post(api_calls.whatsapp_chat(), {
          company_id: this.company_id,
          company_name: this.company_name,
          is_search: true,
          search_string: newValue,
          is_get_contacts: true
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          if (_this2.api_status_code.CONTACTS_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE || _this2.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {
            _this2.contact_list = [];
          } else if (_this2.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
            _this2.contact_list = response.data.data.contacts;
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          }
        }).catch(function (e) {
          _this2.show_spinner = false;

          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this2.$root.$emit("Session_Expired", e.response.data);
          }
        });
      } else {
        this.get_contact_list(false);
      }
    },
    search_message_value: function search_message_value(newValue) {
      var _this3 = this;

      if (newValue != "") {
        this.show_spinner = true;
        axios.post(api_calls.whatsapp_chat(), {
          company_id: this.company_id,
          company_name: this.company_name,
          whatsapp_contact_number: this.current_contact_number,
          get_by_whatsapp_phone_number: true,
          is_search: true,
          search_string: newValue
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this3.show_spinner = false;

          if (_this3.api_status_code.NO_DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
            _this3.searched_message = [];
          } else if (_this3.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
            _this3.searched_message = response.data.data.search_result;
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          }
        }).catch(function (e) {
          _this3.show_spinner = false;

          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this3.$root.$emit("Session_Expired", e.response.data);
          }
        });
      } else {
        this.searched_message = [];
      }
    },
    // toggleModal(newValue){
    //   if(newValue){
    //     console.log("new value" , newValue);
    //     toggleDropdown();
    //   }
    // },
    // toggleModal: {
    //    handler: function(val, oldVal) {
    //       if(val){
    //     console.log("new value" , val , oldVal);
    //     this.toggleDropdown();
    //   }// call it in the context of your component object
    //    },
    //    deep: true
    // },
    search_in_contact_list: function search_in_contact_list(newValue) {
      var _this4 = this;

      if (newValue != "" && newValue.length > 2) {
        this.show_spinner = true;
        axios.post(api_calls.whatsapp_chat(), {
          company_id: this.company_id,
          company_name: this.company_name,
          is_search: true,
          search_string: newValue,
          is_get_all_contacts: true
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this4.show_spinner = false;

          if (response.data.message.MSG_CODE == _this4.api_status_code.CONTACTS_NOT_FOUND.MSG_CODE) {
            _this4.all_contact_list = [];
          } else if (_this4.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
            _this4.all_contact_list = response.data.data.contacts;
          } else if (_this4.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {
            _this4.all_contact_list = [];
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          }
        }).catch(function (e) {
          _this4.show_spinner = false;

          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this4.$root.$emit("Session_Expired", e.response.data);
          }
        });
      } else {
        this.get_all_contact_list();
      }
    },
    'whatsapp_templates.selected_template': {
      handler: function handler(newVal, oldVal) {
        var _this5 = this;

        if (Boolean(newVal)) {
          var current_template = this.whatsapp_templates.templates_list.find(function (item) {
            return item.template_id == newVal;
          });
          var template_id = newVal;
          var variable_dict = current_template.variable_dict;
          var is_parent_template = false;
          axios.post(api_calls.whatsapp_template(), {
            company_id: this.company_id,
            company_name: this.company_name,
            is_notification: false,
            is_preview: true,
            is_parent_template: is_parent_template,
            template_id: template_id,
            variable_dict: variable_dict
          }, {
            headers: {
              Authorization: "Bearer ".concat(this.$session.get("at"))
            }
          }).then(function (response) {
            _this5.show_spinner = false;

            if (_this5.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
              _this5.whatsapp_templates.preview_template_data = response.data.data;
            } else if (_this5.api_status_code.WHATSAPP_USER_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
              Swal({
                title: _this5.tlt('tier_specific_user_limit_reached'),
                text: _this5.tlt('tier_specific_user_limit_reached_msg'),
                type: "warning",
                showConfirmButton: false,
                timer: 4000
              });
            } else if (_this5.api_status_code.MESSAGE_SENDING_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
              Swal({
                type: "warning",
                text: "Message Sending Limit Reached",
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                confirmButtonText: _this5.tlt('email_temp_swal_upgrade_now_msg'),
                cancelButtonText: _this5.tlt('email_temp_swal_upgrade_later_msg'),
                cancelButtonColor: '#d33'
              }).then(function (result) {
                if (result.value == true) {
                  _this5.$router.push({
                    name: 'Settings',
                    params: {
                      Subscription: true
                    }
                  });
                }
              });
            } else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              });
            }
          }).catch(function (e) {
            console.log(e);
          });
        }
      },
      deep: true
    }
  },
  methods: {
    highlight_text: function highlight_text(userQuery) {
      var classname = "";

      if (userQuery === this.searched_message_selected) {
        classname = "add-highlight";
        return classname;
      }

      return classname;
    },
    refreshPopover: function refreshPopover() {
      if (this.is_open === undefined || this.is_open === false) {
        $('#popover').popover('dispose'); // $('#popover').popover('show')

        $('#popover').popover({
          html: true,
          title: "".concat(this.tlt('whatsapp_webview_legend')),
          content: "<span style='color:#25af02;font-size: larger;'>&#x25CF;</span> <span> ".concat(this.tlt('whatsapp_webview_contact_on_whatsapp'), " </span> <br>\n                        <span style='color:#ff4747;font-size: larger;'>&#x25CF;</span> <span> ").concat(this.tlt('whatsapp_webview_contact_not_on_whatsapp'), "</span> <br>\n                        <span style='color:#ffc347;font-size: larger;'>&#x25CF;</span> <span> ").concat(this.tlt('whatsapp_webview_contact_dont_know_on_whatsapp'), "</span>")
        });
        $('#popover').popover('show');
        this.is_open = true;
      } else {
        $('#popover').popover('dispose');
        $('#popover').popover('hide');
        this.is_open = false;
      }
    },
    closeModel: function closeModel(e) {
      //console.log(e.target.classList , " calling modal")
      if (!e.target.classList.contains('legend_whatsapp')) {
        $('#popover').popover('dispose');
        $('#popover').popover('hide');
        this.is_open = false;
      } // if(!e.target.classList.contains('dropdownMenuButtonOne')){
      // }


      if (!e.target.classList.contains("btn") && !e.target.classList.contains("bi-three-dots-vertical") && !e.target.classList.contains("customer-name") && !e.target.classList.contains("btn")) {
        //console.log(this.toggleModal2,"before closing modal")
        var dropdownParent2 = document.getElementById('dropdownParent2');
        var dropdownMenu2 = document.getElementById('dropdownMenu2');
        var dropdownMenuButton = document.getElementById('dropdownMenuButton2');
        var dropdownParent = document.getElementById('dropdownParent');
        var dropdownMenu = document.getElementById('dropdownMenu');
        var dropdownMenuButtonOne = document.getElementById('dropdownMenuButtonOne');

        if (dropdownParent2 && dropdownMenu2 && dropdownMenuButton && this.toggleModal2) {
          dropdownParent2.classList.remove('show');
          dropdownMenu2.classList.remove('show');
          dropdownMenuButton.removeAttribute('aria-expanded', 'true');
          dropdownMenu2.removeAttribute('style', 'position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(55px, 58px, 0px);');
          this.toggleModal2 = false; //console.log(this.toggleModal2 , "after closing modal --------")
        }

        if (dropdownMenu && dropdownParent && dropdownMenuButtonOne && this.toggleModal) {
          //console.log("---" , "inside dropdown")
          dropdownMenu.classList.remove('show');
          dropdownParent.classList.remove('show');
          dropdownMenuButtonOne.removeAttribute('data-expanded', 'true');
          dropdownMenu.removeAttribute('style', 'position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(55px, 58px, 0px);');
          this.toggleModal = false;
        }
      }
    },
    openSearchDiv: function openSearchDiv() {
      this.is_search_div_open = true;
      var chat_div = document.getElementById('chat_div');
      chat_div.classList.remove('col-sm-8');
      chat_div.classList.add('col-sm-4');
      var search_div = document.getElementById('search_div');
      search_div.style.display = "flex";
      var bot_msg = document.querySelectorAll("#msg-div");
      bot_msg.forEach(function (elem) {
        elem.classList.add("responsive-width");
      });
      var preview_btn = document.querySelectorAll("#preview-btn");
      preview_btn.forEach(function (elem) {
        elem.classList.add("col-sm-11");
      });
      var bot_card = document.querySelectorAll(".bot-resp");
      bot_card.forEach(function (elem) {
        elem.classList.add("col-7");
      });
      var emoji_fileshare = document.getElementById('emoji_fileshare');

      if (emoji_fileshare) {
        emoji_fileshare.style.width = "19%";
      }
    },
    closeSearchDiv: function closeSearchDiv() {
      this.is_search_div_open = false;
      var chat_div = document.getElementById('chat_div');
      chat_div.classList.add('col-sm-8');
      chat_div.classList.remove('col-sm-4');
      var search_div = document.getElementById('search_div');
      search_div.style.display = "none";
      this.searched_message = [];
      this.search_message_value = "";
      this.searched_message_selected = null;
      var bot_msg = document.querySelectorAll("#msg-div");
      bot_msg.forEach(function (elem) {
        elem.classList.remove("responsive-width");
      });
      var preview_btn = document.querySelectorAll("#preview-btn");
      preview_btn.forEach(function (elem) {
        elem.classList.remove("col-sm-11");
      });
      var bot_card = document.querySelectorAll(".bot-resp");
      bot_card.forEach(function (elem) {
        // console.log("---run---")
        elem.classList.remove("col-7");
      });
      var emoji_fileshare = document.getElementById('emoji_fileshare');

      if (emoji_fileshare) {
        emoji_fileshare.style.width = "8%";
      }
    },
    empty_variable: function empty_variable() {
      this.history = [], this.phoneno = null;
      this.customer_name = "";
      this.chat_details = [];
      this.message_pagination.per_page = 10;
      this.message_pagination.page_no = 1;
      this.message_pagination.total_records = 10;
      this.message_pagination.page_record_fetched = [];
      this.message_to_send = null;
      this.current_contact_index = null;
      this.all_contact_pagination.per_page = 10;
      this.all_contact_pagination.page_no = 1;
      this.all_contact_pagination.total_records = 10;
      this.send_attachment_detail = {
        media_file_name: null,
        media_file: null,
        show_preview: false,
        media_content_type: null,
        media_type: null,
        send_media: true,
        document_content: null,
        media_caption: null
      };
    },
    reset_cursor_position: function reset_cursor_position() {
      this.oldCursorPosition = null;
    },
    toggleEmojiPicker: function toggleEmojiPicker() {
      this.showEmojiPicker = !this.showEmojiPicker;
    },
    append_on_chat: function append_on_chat(emoji, id) {
      var textarea = this.$refs.textarea;
      var chat_value = document.getElementById('whatsapp_text_input_box').value;
      var cursorPos = textarea.selectionEnd; // var cursorPosition = textarea.selectionEnd
      // let v = $("#" + id).val();

      if (this.oldCursorPosition) {
        var textBefore = chat_value.substring(0, this.oldCursorPosition);
        var textAfter = chat_value.substring(this.oldCursorPosition, chat_value.length);
      } else {
        var textBefore = chat_value.substring(0, cursorPos);
        var textAfter = chat_value.substring(cursorPos, chat_value.length);
      }

      this.message_to_send = textBefore + emoji + textAfter;
      !this.oldCursorPosition ? this.oldCursorPosition = cursorPos + 2 : this.oldCursorPosition = this.oldCursorPosition + 2;
    },
    get_history_data: function get_history_data(whatsapp_no, user_name, contact_index, contact) {
      var _this6 = this;

      // console.log("runnn")
      this.empty_variable();
      this.show_spinner = true;
      this.customer_name = this.get_contact_display_name(contact); // this.customer_name = user_name;

      this.current_contact_number = whatsapp_no;
      this.show_send_message = false;
      this.current_contact_index = contact_index;
      this.contact_list[contact_index].is_new_notification = false;
      this.start_new_conv_data.start_new_conv = false;
      axios.post(api_calls.whatsapp_chat(), {
        company_id: this.company_id,
        company_name: this.company_name,
        get_by_whatsapp_phone_number: true,
        whatsapp_contact_number: whatsapp_no,
        per_page: this.message_pagination.per_page,
        page_no: 1
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this6.show_send_message = true;
        _this6.show_spinner = false;

        if (_this6.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {
          _this6.start_new_conv_data.start_new_conv = true;
          _this6.new_conv_contact_data = contact;
          _this6.phoneno = whatsapp_no;
        } else if (_this6.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
          _this6.history = _this6.format_history_response(response.data.data.chat_history);
          _this6.phoneno = response.data.data.whatsapp_phone_number || whatsapp_no; // console.log(this.phoneno, this.contact_list);

          var contact_list_index = _this6.contact_list.findIndex(function (item) {
            return item.whatsapp_phone_number == _this6.phoneno;
          });

          if (contact_list_index >= 1) {
            // this.contact_list = this.array_move(this.contact_list, contact_list_index, 0);
            _this6.current_contact_index = contact_list_index;
            _this6.current_contact_number = _this6.phoneno; // this.contact_list[contact_list_index].is_message_sending_enabled = false;
          }

          _this6.current_page_no = response.data.pagination.page;
          _this6.latest_page_no = response.data.pagination.page;
          _this6.message_pagination.total_records = response.data.pagination.total_data;

          if (response.data.pagination.total_page === response.data.pagination.page) {
            _this6.total_pages_loaded = true;
          } else {
            // console.log("else")
            _this6.total_pages_loaded = false;
          } //  console.log(this.total_pages_loaded)


          setTimeout(function () {
            _this6.scroll_down();

            _this6.initial_message_load = true;
            _this6.message_pagination.is_scroll_up = false;

            _this6.chatScrollMessages(true);

            _this6.scroll_top_called = false;
          }, 400);
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            toast: true,
            position: "top-end",
            type: "error"
          });
        }
      }).catch(function (e) {
        _this6.show_spinner = false;
        console.log(e);

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this6.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    // get_searched_chat_intermediate_function(time){
    //   console.log(time , this.current_contact_number)
    //   this.get_searched_chat_data( this.current_contact_number ,time)
    // },
    // highlight_text(){
    //        this.searched_message_selected = this.searched_message[index].search_text
    //           let text = document.querySelectorAll("#text")
    //           text.forEach(elem=>{
    //             if(elem.textContent.trim() === searched_message_selected.trim()){
    //               elem.classList.add('add_highlight')
    //               console.log("gotcha inside if" , elem.classList , searched_message_selected)
    //             }
    //           });
    // },
    get_searched_chat_data: function get_searched_chat_data(whatsapp_no, time, index) {
      var _this7 = this;

      // console.log("index",index)
      // this.empty_variable();
      this.show_spinner = false; // this.customer_name = this.get_contact_display_name(contact);
      // // this.customer_name = user_name;
      // this.current_contact_number = whatsapp_no;

      this.show_send_message = false; // this.current_contact_index = contact_index;
      // this.contact_list[contact_index].is_new_notification = false;
      // this.start_new_conv_data.start_new_conv = false;

      axios.post(api_calls.whatsapp_chat(), {
        company_id: this.company_id,
        company_name: this.company_name,
        get_by_whatsapp_phone_number: true,
        whatsapp_contact_number: whatsapp_no,
        per_page: this.message_pagination.per_page,
        is_get_search: true,
        message_datetime: time
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        // console.log("rannn");
        _this7.show_spinner = false;
        _this7.show_send_message = true;

        if (_this7.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {
          return; //   this.start_new_conv_data.start_new_conv = true;
          //   this.new_conv_contact_data = contact;
          // this.phoneno = whatsapp_no;
        } else if (_this7.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
          // console.log(this.history , "before")
          // this.history = "";
          // debugger;
          _this7.history = _this7.format_history_response(response.data.data.chat_history);
          _this7.current_page_no = response.data.pagination.page;
          _this7.latest_page_no = response.data.pagination.page; // console.log(this.current_page_no , "current set")

          _this7.message_pagination.page_record_fetched = [response.data.pagination.page]; // this.phoneno = response.data.data.whatsapp_phone_number || whatsapp_no;
          // // console.log(this.phoneno, this.contact_list);
          // let contact_list_index = this.contact_list.findIndex(item => item.whatsapp_phone_number == this.phoneno);
          // if(contact_list_index >= 1){
          //   // this.contact_list = this.array_move(this.contact_list, contact_list_index, 0);
          //   this.current_contact_index =contact_list_index;
          //   this.current_contact_number = this.phoneno;
          //   // this.contact_list[contact_list_index].is_message_sending_enabled = false;
          // }

          _this7.message_pagination.total_records = response.data.pagination.total_data;
          _this7.is_paginated_call = true;
          _this7.initial_message_load = true;
          _this7.message_pagination.is_scroll_up = true;

          _this7.chatScrollMessages(false);

          _this7.searched_message_selected = _this7.searched_message[index].search_text; //  console.log(this.searched_message[index] , "index" , index);

          if (response.data.pagination.total_page === response.data.pagination.page) {
            // console.log("if")
            _this7.total_pages_loaded = true;
            _this7.message_pagination.is_scroll_down = true;
            _this7.scroll_top_called = true;
          } else {
            // console.log("else")
            _this7.total_pages_loaded = false;
            _this7.scroll_top_called = false;
            _this7.is_paginated_call = true;
          }

          setTimeout(function () {
            // let text = document.querySelectorAll("#text")
            // text.forEach(elem=>{
            //   if(elem.textContent.trim() === this.searched_message_selected.trim()){
            //     elem.classList.add('add_highlight')
            //     console.log("gotcha inside if" , elem.classList , this.searched_message_selected)
            //   }
            // });
            var selected_msg = _this7.searched_message[index].date_time;
            var selected_div = document.getElementById(selected_msg);

            if (selected_div) {
              selected_div.scrollIntoView({
                behavior: "smooth"
              });
            } //  console.log(selected_div , selected_msg );

          }, 400);
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            toast: true,
            position: "top-end",
            type: "error"
          });
        }
      }).catch(function (e) {
        _this7.show_spinner = false;
        console.log(e, 'eeeee');

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this7.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    get_contact_list: function get_contact_list(enable_bot_responses) {
      var _this8 = this;

      this.show_spinner = true;
      axios.post(api_calls.whatsapp_chat(), {
        is_get_contacts: true,
        company_id: this.company_id,
        company_name: this.company_name,
        enable_bot_response_all: enable_bot_responses
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this8.show_spinner = false;

        if (_this8.api_status_code.CONTACTS_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE || _this8.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {
          _this8.contact_list = [];
        } else if (_this8.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
          _this8.contact_list = response.data.data.contacts;
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            toast: true,
            position: "top-end",
            type: "error"
          });
        }

        _this8.show_spinner = false; // this.contact_list = response.data.contacts;
      }).catch(function (e) {
        _this8.show_spinner = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this8.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    scroll_down: function scroll_down() {
      // console.log("----scrollll");
      setTimeout(function () {
        var container = document.querySelector(".message-table-scroll");

        if (Boolean(container.scrollHeight)) {
          setTimeout(function () {
            // console.log("here scr");
            // console.log( container.scrollTop ,  container.scrollHeight);
            container.scrollTop = container.scrollHeight - 500;
          }, 100); // this.initial_message_load = true;
        }
      }, 100);
    },
    scroll_top: function scroll_top() {
      setTimeout(function () {
        var container = document.querySelector(".message-table-scroll");

        if (Boolean(container.scrollHeight)) {
          setTimeout(function () {
            container.scrollTop = container.scrollHeight * 0.015;
          }, 100); // this.initial_message_load = true;
        }
      }, 100);
    },
    scroll_middle: function scroll_middle() {
      // console.log("middle running")
      setTimeout(function () {
        var container = document.querySelector(".message-table-scroll");

        if (Boolean(container.scrollHeight)) {
          setTimeout(function () {
            container.scrollTop = container.scrollHeight * 0.25;
          }, 100); // this.initial_message_load = true;
        }
      }, 100);
    },
    scroll_down_effect: function scroll_down_effect() {
      var container = document.querySelector(".message-table-scroll"); // console.log(container);

      if (Boolean(container)) {
        setTimeout(function () {
          container.scrollTop = 10;
        }, 0); // this.initial_message_load = true;
      }
    },
    product_variation: function product_variation(products_list) {
      var new_product_list = [];

      for (var i in products_list) {
        var components = products_list[i].template.components;
        var temp = {};

        try {
          for (var j in components) {
            if (j == 0) {
              temp["img_url"] = components[j].parameters[0].image.link;
            }

            if (j == 1) {
              temp["title"] = components[j].parameters[0].text;

              if (components[j].parameters.length == 2) {
                temp["price"] = components[j].parameters[1].text;
                temp["variation"] = components[j].parameters[1].text;
              }

              if (components[j].parameters.length == 3) {
                temp["variation"] = components[j].parameters[1].text;
                temp["price"] = components[j].parameters[2].text;
              } // components[j].parameters.length == 3 ? temp["variation"] = components[j].parameters[1].text; temp["price"] = components[j].parameters[1].text: null;

            }

            if (j == 2) {
              temp["url"] = components[j].parameters[0].text;
              temp["type"] = components[j].parameters.type;
            }
          }
        } catch (error) {}

        new_product_list.push(temp);
      }

      return new_product_list;
    },
    check_image_type: function check_image_type(image) {
      if (typeof image == "string") {
        return image;
      } else {
        if (image != null) {
          return image.src;
        } else {
          return "";
        }
      }
    },
    trim_card_description: function trim_card_description(text) {
      if (Boolean(text)) {
        if (text.length > 100) {
          var string_text = text.substring(0, 80) + "...";
          return string_text;
        }

        return text;
      }
    },
    latest_bot_text: function latest_bot_text(text) {
      if (!Boolean(text)) {
        return "Custom bot Response";
      }

      if (text.length > 35) {
        return "".concat(text.substring(0, 35), "...");
      }

      return text;
    },
    search_contact_list: function search_contact_list() {
      var _this9 = this;

      if (this.search_value == "") {
        return this.contact_list;
      } else {
        var new_val = this.search_value;

        if (new_val != this.search_value) {
          // console.log(this.search_value);
          axios.post(api_calls.whatsapp_chat(), {
            company_id: this.company_id,
            company_name: this.company_name,
            is_get_all_contacts: true,
            is_search: true,
            search_string: this.search_value
          }, {
            headers: {
              Authorization: "Bearer ".concat(this.$session.get("at"))
            }
          }).then(function (response) {
            _this9.show_spinner = false;

            if (response.data.message.MSG_CODE == _this9.api_status_code.CONTACTS_NOT_FOUND.MSG_CODE) {
              _this9.contact_list = [];
            } else if (_this9.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
              _this9.contact_list = response.data.data.contacts;
            } else if (_this9.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {
              _this9.contact_list = [];
            } else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              });
            }
          }).catch(function (e) {
            _this9.show_spinner = false;

            if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
              _this9.$root.$emit("Session_Expired", e.response.data);
            }
          });
        }

        return this.contact_list;
      }
    },
    chatScrollMessages: function chatScrollMessages(scroll_down) {
      var _this10 = this;

      // console.log(this.initial_message_load);
      if (this.initial_message_load === true) {
        if (this.is_search_div_open) {
          var bot_msg = document.querySelectorAll("#msg-div");
          bot_msg.forEach(function (elem) {
            elem.classList.add("responsive-width");
          });
          var preview_btn = document.querySelectorAll("#preview-btn");
          preview_btn.forEach(function (elem) {
            elem.classList.add("col-sm-11");
          });
          var bot_card = document.querySelectorAll(".bot-resp");
          bot_card.forEach(function (elem) {
            elem.classList.add("col-7");
          });
        } else {
          var _bot_msg = document.querySelectorAll("#msg-div");

          _bot_msg.forEach(function (elem) {
            elem.classList.remove("responsive-width");
          });

          var _preview_btn = document.querySelectorAll("#preview-btn");

          _preview_btn.forEach(function (elem) {
            elem.classList.remove("col-sm-11");
          });

          var _bot_card = document.querySelectorAll(".bot-resp");

          _bot_card.forEach(function (elem) {
            elem.classList.remove("col-7");
          });
        }

        var container_div_scroll_top = document.getElementsByClassName("message-table-scroll")[0].scrollTop;
        var container_div_scroll_height = document.getElementsByClassName("message-table-scroll")[0].scrollHeight - 493; // console.log(this.scroll_top_called , "top");
        //   console.log(this.is_paginated_call , "paginated call var ")
        // console.log(container_div_scroll_top < 20 , this.message_pagination.is_scroll_up === true , !this.is_paginated_call , !this.total_pages_loaded , "check for up")
        //  console.log(container_div_scroll_top > container_div_scroll_height , this.message_pagination.is_scroll_down === true , !this.is_paginated_call , this.current_page_no > 1 , "check for down")

        if (container_div_scroll_top < 20 && this.message_pagination.is_scroll_up === true && !this.is_paginated_call && !this.total_pages_loaded) {
          // console.log("api call paginated", this.current_page_no)
          this.is_paginated_call = true;
          this.scroll_spinner_chat = true;
          axios.post(api_calls.whatsapp_chat(), {
            company_id: this.company_id,
            company_name: this.company_name,
            get_by_whatsapp_phone_number: true,
            whatsapp_contact_number: this.current_contact_number,
            per_page: this.message_pagination.per_page,
            page_no: this.current_page_no + 1
          }, {
            headers: {
              Authorization: "Bearer ".concat(this.$session.get("at"))
            }
          }).then(function (response) {
            // console.log(response.data);
            _this10.scroll_spinner_chat = false;
            _this10.is_paginated_call = false;

            if (_this10.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
              if (!_this10.message_pagination.page_record_fetched.includes(response.data.pagination.page)) {
                var new_data = _this10.format_history_response(response.data.data.chat_history);

                _this10.history = new_data.concat(_this10.history);

                _this10.message_pagination.page_record_fetched.push(response.data.pagination.page); // console.log(this.history);


                if (response.data.pagination.total_page === response.data.pagination.page) {
                  _this10.total_pages_loaded = true;
                } else {
                  _this10.total_pages_loaded = false;
                }

                _this10.current_page_no += 1;

                if (scroll_down == true || _typeof(scroll_down) === "object") {
                  _this10.scroll_middle();
                } else {// this.scroll_down_effect()
                }
              }
            } else if (_this10.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {} else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              });
            }
          }).catch(function (e) {
            _this10.show_spinner = false;

            if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
              _this10.$root.$emit("Session_Expired", e.response.data);
            }
          });
        } else if (container_div_scroll_top > container_div_scroll_height && this.message_pagination.is_scroll_down === true && !this.is_paginated_call && this.latest_page_no > 1) {
          this.is_paginated_call = true;
          this.scroll_spinner_chat = true;
          axios.post(api_calls.whatsapp_chat(), {
            company_id: this.company_id,
            company_name: this.company_name,
            get_by_whatsapp_phone_number: true,
            whatsapp_contact_number: this.current_contact_number,
            per_page: this.message_pagination.per_page,
            page_no: this.latest_page_no - 1
          }, {
            headers: {
              Authorization: "Bearer ".concat(this.$session.get("at"))
            }
          }).then(function (response) {
            // console.log(response.data);
            _this10.scroll_spinner_chat = false;
            _this10.is_paginated_call = false;

            if (_this10.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
              if (!_this10.message_pagination.page_record_fetched.includes(response.data.pagination.page)) {
                var new_data = _this10.format_history_response(response.data.data.chat_history); // this.history = new_data.concat(this.history);


                _this10.history = _this10.history.concat(new_data);

                _this10.message_pagination.page_record_fetched.push(response.data.pagination.page);

                _this10.latest_page_no = _this10.latest_page_no - 1;
                setTimeout(function () {
                  // console.log("---" , this.scroll_top_called)
                  //    if(this.scroll_top_called){
                  //   this.scroll_top();
                  // }else{
                  if (scroll_down == true || _typeof(scroll_down) === "object") {
                    // console.log("down")
                    _this10.scroll_down();
                  } else {} // this.scroll_down_effect()
                  // }


                  _this10.scroll_top_called = false;
                }, 100);
              }
            } else if (_this10.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {} else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              });
            }
          }).catch(function (e) {
            _this10.show_spinner = false;

            if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
              _this10.$root.$emit("Session_Expired", e.response.data);
            }
          });
        }
      }
    },
    show_profile_setup: function show_profile_setup() {
      this.is_profile_setup = !this.is_profile_setup;
      this.get_profile_details();
    },
    show_all_contacts: function show_all_contacts() {
      $('#popover').popover('dispose');
      $('#popover').popover('hide');
      this.is_open = false;
      this.is_profile_setup = !this.is_profile_setup;
      this.is_contact_list = !this.is_contact_list;
      this.get_all_contact_list();
    },
    toggleDropdown: function toggleDropdown() {
      var dropdownParent2 = document.getElementById('dropdownParent2');
      var dropdownMenu2 = document.getElementById('dropdownMenu2');
      var dropdownMenuButton = document.getElementById('dropdownMenuButton2');
      dropdownParent2.classList.remove('show');
      dropdownMenu2.classList.remove('show');
      dropdownMenuButton.removeAttribute('aria-expanded', 'true');
      dropdownMenu2.removeAttribute('style', 'position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(55px, 58px, 0px);');
      this.toggleModal2 = false;
      var dropdownParent = document.getElementById('dropdownParent');
      var dropdownMenu = document.getElementById('dropdownMenu');
      var dropdownMenuButtonOne = document.getElementById('dropdownMenuButtonOne');

      if (this.toggleModal) {
        dropdownParent.classList.remove('show');
        dropdownMenu.classList.remove('show');
        dropdownMenuButtonOne.removeAttribute('data-expanded', 'true');
        dropdownMenu.removeAttribute('style', 'position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(55px, 58px, 0px);');
      } else {
        dropdownParent.classList.add('show');
        dropdownMenu.classList.add('show');
        dropdownMenuButtonOne.setAttribute('data-expanded', 'true');
        dropdownMenu.setAttribute('style', 'position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(55px, 58px, 0px);');
      }

      this.toggleModal = !this.toggleModal;
    },
    toggleTemplate: function toggleTemplate() {
      var dropdownParent = document.getElementById('dropdownParent');
      var dropdownMenu = document.getElementById('dropdownMenu');
      var dropdownMenuButtonOne = document.getElementById('dropdownMenuButtonOne');
      dropdownMenu.classList.remove('show');
      dropdownParent.classList.remove('show');
      dropdownMenuButtonOne.removeAttribute('data-expanded', 'true');
      dropdownMenu.removeAttribute('style', 'position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(55px, 58px, 0px);');
      this.toggleModal = false;
      var dropdownParent2 = document.getElementById('dropdownParent2');
      var dropdownMenu2 = document.getElementById('dropdownMenu2');
      var dropdownMenuButton = document.getElementById('dropdownMenuButton2'); //console.log(this.toggleModal2 , "deciding value")

      if (this.toggleModal2) {
        //console.log(this.toggleModal2)
        dropdownParent2.classList.remove('show');
        dropdownMenu2.classList.remove('show');
        dropdownMenuButton.removeAttribute('aria-expanded', 'true');
        dropdownMenu2.removeAttribute('style', 'position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(55px, 58px, 0px);');
        this.toggleModal2 = false; //console.log(this.toggleModal2,"after deciding");
      } else {
        dropdownParent2.classList.add('show');
        dropdownMenu2.classList.add('show');
        dropdownMenuButton.setAttribute('aria-expanded', 'true');
        dropdownMenu2.setAttribute('style', 'position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(55px, 58px, 0px);');
        this.toggleModal2 = true; //console.log(this.toggleModal2,"after deciding");
      }
    },
    format_history_response: function format_history_response(response) {
      var con_date = "";

      for (var i in response) {
        if (i == 0) {
          con_date = response[i].bot_response_date;
        }

        if (con_date == response[i].bot_response_date && i != 0) {
          response[i].bot_response_date = "";
        } else {
          con_date = response[i].bot_response_date;
        }
      }

      return response;
    },
    send_message_to_user: function send_message_to_user() {
      var _this11 = this;

      if (Boolean(this.message_to_send) === false && this.send_attachment_detail.show_preview == false) return false;
      var current_timestamp = new Date(),
          current_date = moment().format('YYYY-MM-DD');

      if (this.send_attachment_detail.show_preview == true) {
        this.send_attachment_detail.company_id = this.company_id;
        this.send_attachment_detail.company_name = this.company_name;
        this.send_attachment_detail.whatsapp_contact_number = this.current_contact_number;
        this.send_attachment_detail.document_content = null;
        this.send_attachment_detail.media_caption = this.message_to_send;
        this.show_spinner = true;
        axios.post(api_calls.whatsapp_chat(), this.send_attachment_detail, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this11.show_spinner = false;
          _this11.send_attachment_detail.show_preview = false;
          document.getElementById("send_attachment").value = '';

          if (_this11.api_status_code.WHATSAPP_MEDIA_SEND_SUCCESSFULLY.MSG_CODE === response.data.message.MSG_CODE) {
            var bot_response = [];

            if (_this11.file_extensions.document_file_extensions.includes(_this11.send_attachment_detail.media_content_type)) {
              bot_response = [{
                "text": null,
                "recipient_id": _this11.current_contact_number,
                "attachment": {
                  filename: _this11.send_attachment_detail.media_file_name,
                  link: "https://storage.cense.ai/".concat(_this11.company_id, "/WhatsappMedia/").concat(_this11.send_attachment_detail.media_file_name)
                }
              }];
            }

            ;

            if (_this11.file_extensions.image_file_extensions.includes(_this11.send_attachment_detail.media_content_type)) {
              bot_response = [{
                "text": null,
                "recipient_id": _this11.current_contact_number,
                "image": response.data.file_link
              }];
            }

            var bot_response_date = current_date;

            if (_this11.history.map(function (item) {
              return item.bot_response_date == bot_response_date;
            }).length > 0) {
              bot_response_date = "";
            }

            _this11.history.push({
              "BOTResponse": bot_response,
              "user_query_time": current_timestamp,
              "UserQuery": "",
              "bot_response_date": bot_response_date,
              "bot_response_time": current_timestamp,
              "user_query_date": current_date,
              "Chat_Datetime": current_timestamp.toISOString()
            });

            _this11.contact_list[_this11.current_contact_index].last_bot_response.text = _this11.message_to_send;
            _this11.contact_list = _this11.array_move(_this11.contact_list, _this11.current_contact_index, 0);
            _this11.message_to_send = null;
            _this11.current_contact_index = 0; // this.send_attachment_detail.show_preview = false;

            _this11.scroll_down();
          } else if (_this11.api_status_code.WHATSAPP_MEDIA_SEND_FAILURE.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: "Some Error Occurred",
              text: "Please try again",
              showCancelButton: false,
              type: "error"
            });
          } else if (_this11.api_status_code.WHATSAPP_USER_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: _this11.tlt('tier_specific_user_limit_reached'),
              text: _this11.tlt('tier_specific_user_limit_reached_msg'),
              type: "warning",
              showConfirmButton: false,
              timer: 4000
            });
          } else if (_this11.api_status_code.MESSAGE_SENDING_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              type: "warning",
              text: "Message Sending Limit Reached",
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              confirmButtonText: _this11.tlt('email_temp_swal_upgrade_now_msg'),
              cancelButtonText: _this11.tlt('email_temp_swal_upgrade_later_msg'),
              cancelButtonColor: '#d33'
            }).then(function (result) {
              if (result.value == true) {
                _this11.$router.push({
                  name: 'Settings',
                  params: {
                    Subscription: true
                  }
                });
              }
            });
          } else if (_this11.api_status_code.INVALID_WHATSAPP_CONTACT.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } else if (_this11.api_status_code.WHATSAPP_NUMBER_NONE.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } else if (_this11.api_status_code.TEXT_IS_NONE.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } else if (_this11.api_status_code.MISSING_MEDIA_INFORMATION.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } // console.log(response);


          return;
        }).catch(function (e) {
          _this11.show_spinner = false;

          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this11.$root.$emit("Session_Expired", e.response.data);
          }

          _this11.send_attachment_detail.show_preview = false;
          return;
        });
        return false;
      }

      this.show_spinner = true;

      if (this.message_to_send.trim() !== "") {
        axios.post(api_calls.whatsapp_chat(), {
          company_id: this.company_id,
          company_name: this.company_name,
          send_message: true,
          text: this.message_to_send,
          whatsapp_contact_number: this.current_contact_number
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this11.show_spinner = false;

          if (_this11.api_status_code.WHATSAPP_TEXT_SEND_SUCCESSFULLY.MSG_CODE === response.data.message.MSG_CODE) {
            if (_this11.start_new_conv_data.start_new_conv) {
              _this11.current_contact_index = 0;
              _this11.new_conv_contact_data.chat_datetime = current_timestamp.toISOString();
              _this11.new_conv_contact_data.is_message_sending_enabled = true;
              _this11.new_conv_contact_data.last_bot_response = {
                text: _this11.message_to_send,
                chat_datetime: current_timestamp.toISOString(),
                date: current_date,
                time: "".concat(current_timestamp.getUTCHours(), ":").concat(current_timestamp.getUTCMinutes())
              };

              _this11.contact_list.unshift(_this11.new_conv_contact_data);

              _this11.start_new_conv_data.start_new_conv = false;
            }

            var bot_response_date = current_date;

            if (_this11.history.map(function (item) {
              return item.bot_response_date == bot_response_date;
            }).length > 0) {
              bot_response_date = "";
            }

            _this11.history.push({
              "BOTResponse": [{
                "text": _this11.message_to_send,
                "recipient_id": _this11.current_contact_number
              }],
              "user_query_time": current_timestamp,
              "UserQuery": "",
              "bot_response_date": bot_response_date,
              "bot_response_time": current_timestamp,
              "user_query_date": current_date,
              "Chat_Datetime": current_timestamp.toISOString()
            });

            _this11.scroll_down();

            _this11.contact_list[_this11.current_contact_index].last_bot_response.text = _this11.message_to_send;
            _this11.contact_list = _this11.array_move(_this11.contact_list, _this11.current_contact_index, 0);
            _this11.message_to_send = null;
            _this11.current_contact_index = 0;
          } else if (_this11.api_status_code.WHATSAPP_USER_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: _this11.tlt('tier_specific_user_limit_reached'),
              text: _this11.tlt('tier_specific_user_limit_reached_msg'),
              type: "warning",
              showConfirmButton: false,
              timer: 4000
            });
          } else if (_this11.api_status_code.MESSAGE_SENDING_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              type: "warning",
              text: "Message Sending Limit Reached",
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              confirmButtonText: _this11.tlt('email_temp_swal_upgrade_now_msg'),
              cancelButtonText: _this11.tlt('email_temp_swal_upgrade_later_msg'),
              cancelButtonColor: '#d33'
            }).then(function (result) {
              if (result.value == true) {
                _this11.$router.push({
                  name: 'Settings',
                  params: {
                    Subscription: true
                  }
                });
              }
            });
          } else if (_this11.api_status_code.INVALID_WHATSAPP_CONTACT.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              text: _this11.api_status_code.INVALID_WHATSAPP_CONTACT.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } else if (_this11.api_status_code.WHATSAPP_NUMBER_NONE.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } else if (_this11.api_status_code.TEXT_IS_NONE.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } else if (_this11.api_status_code.MISSING_MEDIA_INFORMATION.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              toast: true,
              position: "top-end",
              type: "error"
            });
          }
        }).catch(function (e) {
          _this11.api_error_checks(e.response);

          _this11.show_spinner = false;

          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this11.$root.$emit("Session_Expired", e.response.data);
          }
        });
      } else {
        this.show_spinner = false;
        this.message_to_send = null;
        return;
      }
    },
    edit_website_value: function edit_website_value(index) {
      this.index_update = index;
      this.edit_website = true;
    },
    get_profile_details: function get_profile_details() {
      var _this12 = this;

      this.show_spinner = true;
      this.edit_email = false;
      this.edit_address = false;
      this.edit_description = false;
      this.edit_website = false;
      this.edit_status = false;
      this.index_update = null;
      axios.post(api_calls.whatsapp_profile(), {
        company_id: this.company_id,
        company_name: this.company_name,
        is_get: true
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this12.show_spinner = false;

        if (_this12.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
          _this12.whatsapp_profile = response.data.data.whatsapp_profile;
        } else if (_this12.api_status_code.NO_DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
          _this12.whatsapp_profile = response.data.data.whatsapp_profile;
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            toast: true,
            position: "top-end",
            type: "error"
          });
        }
      }).catch(function (e) {
        _this12.show_spinner = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this12.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    update_profile_details: function update_profile_details() {
      var _this13 = this;

      this.edit_email = false;
      this.edit_address = false;
      this.edit_description = false;
      this.edit_website = false;
      this.edit_status = false;
      this.index_update = null;

      if (this.whatsapp_profile.websites.length == 2) {
        this.second_website = true;
      }

      this.show_spinner = true;
      axios.post(api_calls.whatsapp_profile(), {
        company_id: this.company_id,
        company_name: this.company_name,
        is_edit: true,
        whatsapp_profile: this.whatsapp_profile
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this13.show_spinner = false;
        var resp = response.data.update_response;

        if (_this13.api_status_code.WHATSAPP_PROFILE_EDIT_SUCCESSFUL.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            text: response.data.message.MSG,
            toast: true,
            position: "top-end",
            type: "success",
            showConfirmButton: false,
            timer: 2000
          });

          _this13.get_profile_details();
        } else if (_this13.api_status_code.WHATSAPP_PROFILE_EDIT_UNSUCCESSFUL.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            text: _this13.tlt('whatsapp_profile_edited_unsuccess'),
            toast: true,
            position: "top-end",
            type: "error",
            showConfirmButton: false,
            timer: 2000
          });

          _this13.get_profile_details();
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            type: "error"
          });
        }
      }).catch(function (e) {
        console.log(e);
        _this13.show_spinner = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this13.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    update_profile_image: function update_profile_image(e) {
      var _this14 = this;

      this.selected_files = e.target.files[0];

      if (this.selected_files.type == 'image/png' || this.selected_files.type == 'image/jpg' || this.selected_files.type == 'image/jpeg') {
        if (this.selected_files.size > 5097152) {
          Swal({
            text: "Upload image with size should be less than 5MB",
            toast: true,
            position: "top-end",
            type: "error",
            showConfirmButton: false,
            timer: 2000
          });
          this.selected_files = '';
          return;
        }

        var file_to_upload = this.selected_files;
        var profile_img = {
          company_id: this.company_id,
          company_name: this.company_name,
          photo: file_to_upload,
          wa_phone_number: this.whatsapp_profile.whatsapp_phone_number
        };
        var json = JSON.stringify(profile_img);
        var blob = new Blob([json], {
          type: "application/json"
        });
        var fd = new FormData();
        fd.append('photo', this.selected_files);
        fd.append("json", blob);
        this.show_spinner = true;
        axios.post(api_calls.whatsapp_profile(), fd, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this14.show_spinner = false;
          var resp = response.data;

          if (_this14.api_status_code.UPDATED_WHATSAPP_PROFILE_PHOTO.MSG_CODE === response.data.message.MSG_CODE) {
            _this14.get_profile_details();
          } else if (_this14.api_status_code.PENDING_WHATSAPP_PROFILE_PHOTO_UPDATION.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              type: "error",
              showConfirmButton: true,
              showCancelButton: false
            });
          } else if (_this14.api_status_code.WHATSAPP_PROFILE_PICTURE_UNDER_RESOLUTION.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              type: "error",
              showConfirmButton: true,
              showCancelButton: false
            });
          } else if (_this14.api_status_code.WHATSAPP_PHOTO_UPDATION_FAILED.MSG_CODE === response.data.message.MSG_CODE) {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              type: "warning",
              showConfirmButton: true,
              showCancelButton: false
            });

            _this14.get_profile_details();
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              toast: true,
              position: "top-end",
              type: "error"
            });

            _this14.get_profile_details();
          }
        }).catch(function (e) {
          console.log(e);
          _this14.show_spinner = false;

          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this14.$root.$emit("Session_Expired", e.response.data);
          }
        });
      } else {
        Swal({
          text: "Upload image with specific formate(jpg jpeg png)",
          toast: true,
          position: "top-end",
          type: "error",
          showConfirmButton: false,
          timer: 2000
        });
      }
    },
    remove_profile_image: function remove_profile_image() {
      var _this15 = this;

      this.show_spinner = true;
      axios.post(api_calls.whatsapp_profile(), {
        company_id: this.company_id,
        company_name: this.company_name,
        is_remove_photo: true
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this15.show_spinner = false;

        if (response.data.message.MSG_CODE === _this15.api_status_code.WHATSAPP_PROFILE_PHOTO_REMOVED.MSG_CODE) {
          _this15.get_profile_details();
        } else if (response.data.message.MSG_CODE === _this15.api_status_code.FAILED_WHATSAPP_PROFILE_PHOTO_REMOVAL.MSG_CODE) {
          _this15.get_profile_details();
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            toast: true,
            position: "top-end",
            type: "error"
          });
        }
      }).catch(function (e) {
        _this15.show_spinner = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this15.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    connect_elixir_socket: function connect_elixir_socket() {
      var _this16 = this;

      axios.post(api_calls.initialize_whatsapp_topic(), {
        company_id: this.company_id,
        whatsapp_phone_number: "100"
      }).then(function (response) {
        // console.log(response)
        // this.chat_group_name = response.data.chat_group_name;
        // this.live_chat_token = response.data.token;
        // this.live_chat_on = true;
        _this16.chat_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {
          params: {
            whatsapp: "true",
            token: response.data.token
          }
        });

        _this16.chat_socket.connect();

        _this16.channel = _this16.chat_socket.channel("whatsapp:" + response.data.whatsapp_topic);

        _this16.channel.join();

        _this16.channel.on("new_whatsapp_message", function (res) {// console.log("new_whatsapp_message", res)
        });
      });
    },
    enable_sending_messages_for_user: function enable_sending_messages_for_user() {
      var _this17 = this;

      axios.post(api_calls.whatsapp_chat(), {
        update_bot_response: true,
        whatsapp_contact_number: this.current_contact_number,
        bot_response: false,
        company_name: this.company_name,
        company_id: this.company_id
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        if (_this17.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE === response.data.message.MSG_CODE) {
          if (_this17.start_new_conv_data.start_new_conv === true) {
            _this17.start_new_conv_data.is_message_sending_enabled = true;
          } else {
            _this17.contact_list[_this17.current_contact_index].is_message_sending_enabled = true;

            _this17.$set(_this17.contact_list, _this17.current_contact_index, _this17.contact_list[_this17.current_contact_index]);
          }

          _this17.$nextTick(function () {// this.$refs["message_sending_textbox"].focus();
          });
        } else if (_this17.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE === response.data.message.MSG_CODE) {
          if (_this17.start_new_conv_data.start_new_conv === true) {
            _this17.start_new_conv_data.is_message_sending_enabled = true;
          } else {
            _this17.contact_list[_this17.current_contact_index].is_message_sending_enabled = true;

            _this17.$set(_this17.contact_list, _this17.current_contact_index, _this17.contact_list[_this17.current_contact_index]);
          }

          _this17.$nextTick(function () {// this.$refs["message_sending_textbox"].focus();
          });
        } else if (_this17.api_status_code.UNSUCCESSFUL_DB_QUERY.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            text: _this17.tlt('db_operation_unsuccess'),
            showCancelButton: false,
            showConfirmButton: false,
            timer: 2500,
            type: "error"
          });
        } else if (_this17.api_status_code.MESSAGE_SENDING_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            type: "warning",
            text: "Message Sending Limit Reached",
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            confirmButtonText: _this17.tlt('email_temp_swal_upgrade_now_msg'),
            cancelButtonText: _this17.tlt('email_temp_swal_upgrade_later_msg'),
            cancelButtonColor: '#d33'
          }).then(function (result) {
            if (result.value == true) {
              _this17.$router.push({
                name: 'Settings',
                params: {
                  Subscription: true
                }
              });
            }
          });
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            toast: true,
            position: "top-end",
            type: "error",
            timer: 2500
          });
        }
      }).catch(function (e) {
        _this17.show_spinner = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this17.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    expand_textbox: function expand_textbox(id, key) {
      if (id != '#business_address') {
        this.callsearch();
      } else {
        setTimeout(function () {
          var textarea = document.querySelector(id);
          textarea.addEventListener('keydown', function (e) {
            var scroll_height = e.target.scrollHeight;
            textarea.style.height = "".concat(scroll_height, "px");
          });
        }, 10);
      }
    },
    callsearch: function callsearch() {
      if (event.keyCode === 13 && !event.shiftKey) {
        this.update_profile_details();
      }
    },
    check_current_number: function check_current_number(res) {
      return res.whatsapp_phone_number === this.current_contact_number ? true : false;
    },
    format_user_query_date: function format_user_query_date(user_query_date, index) {
      // console.log(Object.keys(this.history[index-1]))
      if (this.history[index - 1].user_query_date == user_query_date) {
        return "";
      }

      return user_query_date;
    },
    get_all_contact_list: function get_all_contact_list() {
      var _this18 = this;

      this.show_spinner = true;
      axios.post(api_calls.whatsapp_chat(), {
        is_get_all_contacts: true,
        company_id: this.company_id,
        company_name: this.company_name
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this18.show_spinner = false;

        if (response.data.message.MSG_CODE == _this18.api_status_code.CONTACTS_NOT_FOUND.MSG_CODE) {
          _this18.contact_list = [];
        } else if (_this18.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
          _this18.all_contact_list = response.data.data.contacts;
          _this18.all_contact_pagination.total_records = response.data.pagination.total_data;
        } else if (_this18.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {
          _this18.contact_list = [];
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            type: "error"
          });
        }
      }).catch(function (e) {
        _this18.show_spinner = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this18.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    //DONE
    new_contact_list: function new_contact_list() {
      var _this19 = this;

      var scroller = document.getElementsByClassName('all-contact-list')[0].scrollTop;

      if (scroller > 120 && !this.is_paginated_call && !this.total_contact_loaded) {
        this.is_paginated_call = true;
        this.scroll_spinner_chat = true;
        axios.post(api_calls.whatsapp_chat(), {
          is_get_all_contacts: true,
          company_id: this.company_id,
          company_name: this.company_name,
          per_page: this.all_contact_pagination.per_page,
          page_no: this.all_contact_pagination.page_no + 1
        }, {
          headers: {
            Authorization: "Bearer ".concat(this.$session.get("at"))
          }
        }).then(function (response) {
          _this19.scroll_spinner_chat = false;
          _this19.is_paginated_call = false;

          if (response.data.message.MSG_CODE == _this19.api_status_code.CONTACTS_NOT_FOUND.MSG_CODE) {
            _this19.contact_list = [];
          } else if (_this19.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
            if (response.data.data.contacts.length != 0) {
              _this19.all_contact_list = _this19.all_contact_list.concat(response.data.data.contacts);
              _this19.all_contact_pagination.page_no += 1;
              _this19.all_contact_pagination.total_records = response.data.pagination.total_data;
            }
          } else if (_this19.api_status_code.DATA_NOT_FOUND.MSG_CODE === response.data.message.MSG_CODE) {
            _this19.contact_list = [];
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            });
          }
        }).catch(function (e) {
          _this19.scroll_spinner_chat = false;

          if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
            _this19.$root.$emit("Session_Expired", e.response.data);
          }
        });
      }
    },
    array_move: function array_move(arr, old_index, new_index) {
      if (new_index >= arr.length) {
        var k = new_index - arr.length + 1;

        while (k--) {
          arr.push(undefined);
        }
      }

      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
      return arr; // for testing
    },
    formatUserQueryTime: function formatUserQueryTime(user_query_time, val) {
      // if (val == undefined) {
      //   return new Date(user_query_time).toLocaleTimeString(navigator.language, {
      //   hour: '2-digit',
      //   minute:'2-digit'
      //   })
      // }else{
      return moment.utc(user_query_time).local().format("h:mm a"); // return user_query_time
    },
    is_active_chat: function is_active_chat(index) {
      if (index === this.current_contact_index) {
        return "background: #f0f8ff";
      } else if (this.contact_list[index].is_new_notification || false) {
        return "background: #47a88433";
      }

      return "background: #ffffff";
    },
    formatContactLastMessageDate: function formatContactLastMessageDate(date, time) {
      if (moment(date).isSame(Date.now(), 'day')) {
        return new Date("".concat(date, " ").concat(time, "Z")).toLocaleTimeString(navigator.language, {
          hour: '2-digit',
          minute: '2-digit'
        });
      }

      return date;
    },
    formatSearchedDate: function formatSearchedDate(date) {
      var responseDate = moment(date).format('DD/MM/YYYY');
      return responseDate;
    },
    check_previous_message_date_same: function check_previous_message_date_same(index) {
      // console.log(index)
      return true; // if(index == 0) {
      //   return true; 
      // }
      // return this.history[index-1].bot_response_date == this.history[index].bot_response_date ? true : false; 
    },
    process_attachment_file: function process_attachment_file(e) {
      var files = e.target.files || e.dataTransfer.files;

      if (files[0].size > 2097152) {
        Swal({
          text: "Upload image with size less than 2MB",
          toast: true,
          position: "top-end",
          type: "error",
          showConfirmButton: false,
          timer: 10000
        });
        return;
      }

      if (this.file_extensions.all_allowed_file_extensions.includes(files[0].type)) {
        if (!files.length) return;
        this.send_attachment_detail.media_file_name = files[0].name;
        this.send_attachment_detail.media_content_type = files[0].type;
        this.send_attachment_detail.document_content = URL.createObjectURL(files[0]);
        this.send_attachment_detail.show_preview = true;
        this.send_attachment_detail.media_type = this.file_extensions.image_file_extensions.includes(files[0].type) ? 'image' : 'document';
        this.send_attachment_detail.media_caption = this.message_to_send;
        this.createAttachment(files[0]);
      } else {
        Swal({
          title: "Please Select a proper document or image having the correct filetype",
          type: "error",
          showCancelButton: false
        });
      }
    },
    createAttachment: function createAttachment(file, type) {
      var _this20 = this;

      var reader = new FileReader();

      reader.onload = function (e) {
        _this20.send_attachment_detail.media_file = e.target.result.split("base64,")[1];
      };

      reader.readAsDataURL(file);
      reader.addEventListener("load", function () {
        document.getElementById("img-preview").style.display = "flex";
        document.getElementById("img-preview").innerHTML = '<img class="custom-display-image" style="max-width:98%;height:490px; padding: 1.5rem;margin-left: auto; margin-right: auto;" src="' + this.result + '" />';
      });
    },
    is_response_image: function is_response_image(data) {
      if (data.template == null && data.text == null && Boolean(data.image) != null) {
        return true;
      }

      return false;
    },
    is_response_document: function is_response_document(data) {
      if (data.template == null && data.text == null && data.image == null && Boolean(data.attachment) != null) {
        return true;
      }

      return false;
    },
    show_image_fullscreen: function show_image_fullscreen(img_src) {
      $("#showImageModal").modal("show");
      this.current_fullscreen_image_src = img_src;
    },
    add_new_contact_modal: function add_new_contact_modal() {
      // console.log("add new contact-addContactModal")
      $("#addContactModal").modal("show");
    },
    save_new_contact: function save_new_contact() {
      var _this21 = this;

      if (this.add_new_contact.contact_name == null || this.add_new_contact.phone_number == null) {
        Swal({
          title: "Fill details",
          text: "Please enter a valid contact number",
          type: "warning",
          showCancelButton: false
        });
        return;
      }

      this.add_new_contact.company_id = this.company_id;
      this.add_new_contact.company_name = this.company_name;
      this.show_spinner = true;
      axios.post(api_calls.whatsapp_chat(), this.add_new_contact, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this21.show_spinner = false;

        if (_this21.api_status_code.WHATSAPP_CONTACT_ADDED_SUCCESSFULLY.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            title: "Success",
            text: "Contact Added Successfully",
            type: "success",
            showCancelButton: false
          });
          $("#addContactModal").modal("hide");

          _this21.clear_add_contact();

          _this21.get_all_contact_list();
        } else if (_this21.api_status_code.WHATSAPP_CONTACT_ALREADY_EXIST.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            title: "Oops!",
            text: "Provided number already exists in contacts",
            type: "error",
            showCancelButton: false
          });
        } else if (_this21.api_status_code.WHATSAPP_CONTACT_QUERY_ERROR.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            title: "Oops!",
            text: "Some Error Occurred. Please Try Again!",
            type: "error",
            showCancelButton: false
          });
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            type: "error"
          });
        }
      }).catch(function (e) {
        swal({
          title: "Oops!",
          text: "Some Error Occurred. Please Try Again!",
          type: "error",
          showCancelButton: false
        });
        _this21.show_spinner = false;

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this21.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    clear_add_contact: function clear_add_contact() {
      this.add_new_contact = {
        phone_number: null,
        is_add_contact: true,
        contact_name: null,
        formattedNumber: null
      };
    },
    download_document: function download_document(attachment) {
      // console.log(attachment)
      var aTag = document.createElement('a');
      aTag.setAttribute('id', 'abcdefg');
      aTag.setAttribute('download', 'download');
      aTag.setAttribute('href', attachment.link);
      aTag.setAttribute('target', "_blank");
      aTag.click(); // const blob = new Blob([attachment.link], { type: 'application/pdf' })
      // const link = document.createElement('a')
      // link.href = URL.createObjectURL(blob)
      // link.download = attachment.filename
      // link.click()
      // URL.revokeObjectURL(link.href)
      // link.click();
    },
    open_send_template_to_user: function open_send_template_to_user() {
      this.retrieve_all_templates();
      $("#sendTemplateModal").modal("show");
    },
    retrieve_all_templates: function retrieve_all_templates() {
      var _this22 = this;

      this.current_template = {};
      this.show_spinner = true;
      axios.post(api_calls.whatsapp_template(), {
        company_id: this.company_id,
        company_name: this.company_name,
        is_get: true,
        is_notification: this.is_notification_template,
        page_no: this.page_no,
        per_page: this.per_page
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this22.show_spinner = false;

        if (_this22.api_status_code.DATA_AVAILABLE.MSG_CODE === response.data.message.MSG_CODE) {
          _this22.whatsapp_templates.templates_list = [];
          _this22.whatsapp_templates.templates_list = response.data.data.templates;
          _this22.whatsapp_templates.pagination_data.number_of_rows = response.data.pagination.total_data;
          _this22.whatsapp_templates.pagination_data.total_pages = response.data.pagination.total_page;
        } else if (_this22.api_status_code.NO_WHATSAPP_TEMPLATE.MSG_CODE === response.data.message.MSG_CODE) {
          _this22.whatsapp_templates.templates_list = [];
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            type: "error"
          });
        }
      }).catch(function (e) {
        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this22.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    send_template_to_customer: function send_template_to_customer() {
      var _this23 = this;

      axios.post(api_calls.whatsapp_template(), {
        company_name: this.company_name,
        company_id: this.company_id,
        email: this.$session.get("UserInformation").email,
        license_key: this.$session.get("UserInformation").license_key,
        token: this.$session.get("UserInformation").tokens,
        subscription: this.$session.get("UserInformation").subscription,
        is_notification: false,
        template_id: this.whatsapp_templates.selected_template,
        contacts_list: [this.current_contact_number],
        publish_template: true
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        // console.log(response , "res")
        if (_this23.api_status_code.MESSAGE_SENDING_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            type: "warning",
            text: "Message Sending Limit Reached",
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            confirmButtonText: _this23.tlt('email_temp_swal_upgrade_now_msg'),
            cancelButtonText: _this23.tlt('email_temp_swal_upgrade_later_msg'),
            cancelButtonColor: '#d33'
          }).then(function (result) {
            if (result.value == true) {
              _this23.$router.push({
                name: 'Settings',
                params: {
                  Subscription: true
                }
              });
            }
          });
        } else if (_this23.api_status_code.SENDING_TEMPLATE.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            title: _this23.tlt('send_template_sent_msg'),
            type: "success",
            showConfirmButton: false,
            timer: 2500
          }); // console.log("----" , response.data)
          // const template =  this.whatsapp_templates.templates_list.find((item) => item.template_id == this.whatsapp_templates.selected_template);
          // console.log(this.whatsapp_templates.selected_template);
          // console.log(template.variable_dict, this.current_contact_number);

          var current_timestamp = new Date(),
              current_date = moment().format('YYYY-MM-DD');
          var bot_response = [{
            "text": null,
            "type": "template",
            "recipient_id": _this23.current_contact_number,
            "template": _this23.whatsapp_templates.preview_template_data.body
          }];

          if (_this23.start_new_conv_data.start_new_conv) {
            _this23.current_contact_index = 0;
            _this23.new_conv_contact_data.chat_datetime = current_timestamp.toISOString(); // this.new_conv_contact_data.is_message_sending_enabled = true

            _this23.new_conv_contact_data.last_bot_response = {
              text: _this23.message_to_send,
              chat_datetime: current_timestamp.toISOString(),
              date: current_date,
              time: "".concat(current_timestamp.getUTCHours(), ":").concat(current_timestamp.getUTCMinutes())
            };

            _this23.contact_list.unshift(_this23.new_conv_contact_data);

            _this23.start_new_conv_data.start_new_conv = false;
          } // console.log(bot_response)


          var bot_response_date = current_date;

          if (_this23.history.map(function (item) {
            return item.bot_response_date == bot_response_date;
          }).length > 0) {
            bot_response_date = "";
          }

          _this23.history.push({
            "BOTResponse": bot_response,
            "user_query_time": current_timestamp,
            "UserQuery": "",
            "bot_response_date": bot_response_date,
            "bot_response_time": current_timestamp,
            "user_query_date": current_date,
            "Chat_Datetime": current_timestamp.toISOString()
          });

          _this23.scroll_down();

          _this23.contact_list[_this23.current_contact_index].last_bot_response.text = _this23.message_to_send;
          _this23.contact_list = _this23.array_move(_this23.contact_list, _this23.current_contact_index, 0);
          _this23.message_to_send = null;
          _this23.current_contact_index = 0;
          _this23.send_attachment_detail.show_preview = false;
          _this23.whatsapp_templates.selected_template = null;
          $("#sendTemplateModal").modal("hide");
        } else if (_this23.api_status_code.WHATSAPP_USER_LIMIT_REACHED.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            title: _this23.tlt('tier_specific_user_limit_reached'),
            text: _this23.tlt('tier_specific_user_limit_reached_msg'),
            type: "warning",
            showConfirmButton: false,
            timer: 4000
          });
        } else if (_this23.api_status_code.WHATSAPP_OPT_OUT_CONTACTS.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            text: _this23.tlt('All_contacts_have_opted_out_of_getting_templates'),
            type: "eroor",
            showConfirmButton: false,
            timer: 4000
          });
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            type: "error"
          });
        }
      }).catch(function (e) {
        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this23.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    get_contact_display_name: function get_contact_display_name(contact) {
      if (contact.contact_name) return contact.contact_name;
      if (contact.profile_name) return contact.profile_name;
      return contact.whatsapp_phone_number;
    },
    open_import_from_csv_modal: function open_import_from_csv_modal() {
      $("#addContactModal").modal("hide");
      $("#importContactCSVModal").modal("show");
    },
    file_input_contacts_csv: function file_input_contacts_csv(e) {
      if (e.target.files[0].type == 'text/csv') {
        this.contact_csv.file_label = e.target.files[0].name;
        this.contact_csv.file_content = e.target.files[0];
        this.contact_csv.file_selected = true;
      } else {
        Swal({
          title: "Please select a proper document having CSV filetype",
          type: "error",
          showCancelButton: false
        });
      }
    },
    file_submit_upload_contacts: function file_submit_upload_contacts() {
      var _this24 = this;

      if ($("#inputGroupUploadFilecsv").val() == '') {
        Swal.fire({
          title: "Oops!",
          text: "Please Select a CSV file",
          type: "warning",
          showConfirmButton: false,
          timer: 2500
        });
        return;
      }

      var user_details = {
        email: this.$session.get("UserInformation").email,
        company_name: this.companyname,
        company_id: this.companyid,
        license_key: this.$session.get("UserInformation").license_key
      };
      var json = JSON.stringify(user_details);
      var blob = new Blob([json], {
        type: "application/json"
      });
      var fd = new FormData();
      fd.append("file", this.contact_csv.file_content, this.contact_csv.file_label); // fd.append("json", blob);

      fd.append("company_id", this.company_id);
      fd.append("company_name", this.company_name);
      fd.append("email", this.$session.get("UserInformation").email);
      axios.post(api_calls.whatsapp_import_contacts(), fd, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        if (_this24.api_status_code.FILE_UPLOAD.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            title: "Success",
            text: "Multiple contacts are being added. You will receive a mail when the processing is finished.",
            type: "success",
            showCancelButton: false
          });
          $("#importContactCSVModal").modal("hide");
        } else if (_this24.api_status_code.INCORRECT_FILE_FORMAT.MSG_CODE === response.data.message.MSG_CODE) {
          Swal({
            title: "Incorrect File Format!",
            text: "Please try again with a different csv file which matches the sample file structure",
            showCancelButton: false,
            type: "error"
          });
        } else {
          Swal({
            title: response.data.message.MSG_CODE,
            text: response.data.message.MSG,
            showCancelButton: false,
            showConfirmButton: false,
            type: "error"
          });
        }
      }).catch(function (e) {
        Swal({
          title: "Some Error Occurred!",
          text: "Please Try Again",
          showCancelButton: false,
          type: "error"
        });

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this24.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    empty_upload_csv_contacts: function empty_upload_csv_contacts() {
      this.contact_csv = {
        file_label: 'Choose File',
        file_content: null,
        file_selected: false
      };
      $("#inputGroupUploadFilecsv").val('');
    },
    download_sample_contact_file: function download_sample_contact_file() {
      var _this25 = this;

      axios({
        method: "post",
        url: api_calls.file_download(),
        responseType: "blob",
        data: {
          sample_file: "whatsapp_contacts",
          companyid: this.$session.get("UserInformation").company_id,
          company_name: this.$session.get("UserInformation").company_name,
          license_key: this.$session.get("UserInformation").license_key,
          token: this.$session.get("UserInformation").tokens,
          email: this.$session.get("UserInformation").email
        },
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (response) {
        _this25.spinnerOnFileDownload = false;

        if (response.data.message === "Not able to download file") {
          Swal({
            title: "Some Error Occurred. Please Try Again",
            type: "error",
            timer: 2500
          });
        } else {
          var url = window.URL.createObjectURL(new Blob([response.data]));
          var link = document.createElement("a");
          link.href = url; // console.log(this.companyname)

          link.setAttribute("download", "test.csv");
          document.body.appendChild(link);
          link.click();
        }
      }).catch(function (e) {
        _this25.spinnerOnFileDownload = false;
        Swal({
          title: "Some Error Occurred. Please Try Again",
          type: "error",
          timer: 2500
        });

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this25.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    textbox_height: function textbox_height(id, key) {
      if (event.keyCode === 13 && !event.shiftKey) {
        event.preventDefault();
        this.send_message_to_user();
      } else {
        var textarea = document.querySelector(id);
        textarea.addEventListener('keydown', function (e) {
          var scroll_height = e.target.scrollHeight;

          if (scroll_height > 60) {
            textarea.style.overflow = 'auto';
          } else {
            textarea.style.overflow = 'hidden';
          }
        });
      }
    },
    close_document_preview: function close_document_preview() {
      this.send_attachment_detail = {
        media_file_name: null,
        media_file: null,
        show_preview: false,
        media_content_type: null,
        media_type: null,
        send_media: true,
        document_content: null,
        media_caption: null
      };
      document.getElementById("send_attachment").value = '';
    },
    whatsapp_message_formating: function whatsapp_message_formating(a) {
      for (var i = 0; i < this.whatsapp_formating_list.length; i++) {
        var cnt = 0;
        var pos1 = -1;

        while (cnt < a.length) {
          pos1 = a.indexOf(this.whatsapp_formating_list[i], pos1 + 1);

          if (pos1 == -1) {
            break;
          }

          var replace_first_char = a.substring(0, pos1) + this.whatsapp_format_dict[this.whatsapp_formating_list[i]][0] + a.substring(pos1 + 1);
          a = replace_first_char;
          var pos2 = a.indexOf(this.whatsapp_formating_list[i]);
          var replace_second_char = a.substring(0, pos2) + this.whatsapp_format_dict[this.whatsapp_formating_list[i]][1] + a.substring(pos2 + 1);
          a = replace_second_char;
          pos1 = pos2;
          cnt = pos2;
        }
      }

      return a;
    },
    formatUserQuery: function formatUserQuery(UserQuery) {
      if (UserQuery && UserQuery.startsWith('/')) {
        try {
          var json_start = UserQuery.indexOf('{'),
              json_end = UserQuery.indexOf('}') + 1,
              json_data = JSON.parse(UserQuery.substring(json_start, json_end));
          return "Id: ".concat(json_data.order_id);
        } catch (error) {
          return UserQuery;
        }
      }

      return UserQuery;
    },
    get_order_template_formatted_text: function get_order_template_formatted_text(current_bot_response) {
      // console.log(current_bot_response);
      return this.whatsapp_message_formating(current_bot_response.template.components.find(function (item) {
        return item.type == 'BODY';
      }).text);
    },
    check_button_in_order_template: function check_button_in_order_template(current_bot_response) {
      var check_buttons = current_bot_response.template.components.find(function (item) {
        return item.type == 'BUTTONS';
      });

      if (Boolean(check_buttons)) {
        return true;
      }

      return false;
    },
    get_order_template_button_url: function get_order_template_button_url(current_bot_response, key) {
      return current_bot_response.template.components.find(function (item) {
        return item.type == 'BUTTONS';
      }).buttons.find(function (item) {
        return item.type == 'URL';
      })[key];
    },
    check_height: function check_height(id, key) {
      var textarea = document.querySelector(id);

      if (textarea.scrollTop > 90) {
        this.show_profile_div = true;
        textarea.style.height = "525px";
      } else {
        textarea.style.height = "485px";
        this.show_profile_div = false;
      }
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.channel.leave();
    this.chat_socket.disconnect();
  }
};"},null]}