{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/ProductSettings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/ProductSettings.vue","mtime":1663910265474},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IHN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwppbXBvcnQgU3dhbCBmcm9tICJzd2VldGFsZXJ0MiI7CmltcG9ydCBhcGlfY2FsbHMgZnJvbSAiQC9wb3J0YWwvYXBpX2NhbGxzIjsKaW1wb3J0IGN1cnJlbmN5IGZyb20gIkAvcG9ydGFsL2NvbXBvbmVudHMvQ3VycmVuY3kiOwppbXBvcnQgTXVsdGlzZWxlY3QgZnJvbSAidnVlLW11bHRpc2VsZWN0IjsKaW1wb3J0IHsgZnJlZXplX3BvcnRhbCwgc2hvd19zdWJzY3JpcHRpb25fZXhwaXJlZF9zd2FsIH0gZnJvbSAiQC9wb3J0YWwvbWl4aW5zIjsKaW1wb3J0IFZ1ZVBob25lTnVtYmVySW5wdXQgZnJvbSAidnVlLXBob25lLW51bWJlci1pbnB1dCI7CmltcG9ydCAidnVlLXBob25lLW51bWJlci1pbnB1dC9kaXN0L3Z1ZS1waG9uZS1udW1iZXItaW5wdXQuY3NzIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJQcm9kdWN0U2V0dGluZ3NQYWdlIiwKICBjb21wb25lbnRzOiB7CiAgICBNdWx0aXNlbGVjdDogTXVsdGlzZWxlY3QsCiAgICBWdWVQaG9uZU51bWJlcklucHV0OiBWdWVQaG9uZU51bWJlcklucHV0CiAgfSwKICBtaXhpbnM6IFtmcmVlemVfcG9ydGFsLCBzaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWxdLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwaG9uZU51bWJlcjogbnVsbCwKICAgICAgY29udGFjdF91c19waG9uZV9udW1iZXI6IG51bGwsCiAgICAgIGludmVudG9yeV9sZXZlbF9ub3RpZmljYXRpb246IDUsCiAgICAgIGN1cnJlbmN5X2NvZGU6ICIiLAogICAgICBjdXJyZW5jeV9saXN0OiBbXSwKICAgICAgZmVlZGJhY2tfcXVlc3Rpb25fZnJlcXVlbmN5OiA5MCwKICAgICAgcGhvbmVfbm9fZGlzYWJsZTogZmFsc2UsCiAgICAgIGVtYWlsX2Rpc2FibGU6IGZhbHNlLAogICAgICByZXNldF9pY29uX3BhdGg6IHJlcXVpcmUoIkAvcG9ydGFsL2Fzc2V0cy9pbWcvcmVzZXRfaWNvbi5zdmciKSwKICAgICAgdmVyaWZpY2F0aW9uX3N0YXR1czogbnVsbCwKICAgICAgYmlnX3NwaW5uZXI6IGZhbHNlLAogICAgICBjb21wYW55aWQ6IG51bGwsCiAgICAgIGNvbXBhbnluYW1lOiBudWxsLAogICAgICBpc19kaXNwbGF5X3Byb2R1Y3RzOiBmYWxzZSwKICAgICAgZGlzcGxheV9wcm9kdWN0c19pZDogdHJ1ZSwKICAgICAgZGlzcGxheV9wcm9kdWN0c190eXBlOiBudWxsLAogICAgICBvcmRlcl9ub3RpZmljYXRpb246IGZhbHNlLAogICAgICBpc193aGF0c2FwcF9pbnRlZ3JhdGVkOiBmYWxzZSwKICAgICAgZGlzcGxheV9ub3RpZmljYXRpb25fZW1haWw6IHRydWUsCiAgICAgIGRpc3BsYXlfbm90aWZpY2F0aW9uX3doYXRzYXBwOiBmYWxzZSwKICAgICAgZGlzcGxheV9ub3RpZmljYXRpb25fc3RhdHVzOiBbXSwKICAgICAgZW1haWxfcmVxdWlyZWQ6IGZhbHNlLAogICAgICBwaG9uZV9ub19kZXRhaWxzOiBudWxsLAogICAgICBlbWFpbF9kZXRhaWxzOiBudWxsLAogICAgICBlbWFpbF9yZXF1aXJlZF9pZDogdHJ1ZSwKICAgICAgcGhvbmVfbnVtYmVyX3ZhbGlkaXR5OiAvXCtbMC05XXs5LDE0fSQvLAogICAgICBlbWFpbF92YWxpZGl0eTogL14oWzAtOWEtekEtWl0oWy0uXHddKlswLTlhLXpBLVpdKSpAKFswLTlhLXpBLVpdWy1cd10qWzAtOWEtekEtWl1cLikrW2EtekEtWl17Miw5fSkkLywKICAgICAgbGltaXRfdXBfc2VsbDogMTAsCiAgICAgIGxpbWl0X2Nyb3NzX3NlbGw6IDEwLAogICAgICBjb250YWN0X3VzX2VtYWlsOiAiIiwKICAgICAgcmV2aWV3X21lc3NhZ2VfZmlyc3Q6ICIiLAogICAgICByZXZpZXdfbWVzc2FnZV9zZWNvbmQ6ICIiLAogICAgICByZXRhaWxfd2ViX2ZyYW1ld29yazogdGhpcy4kc2Vzc2lvbi5nZXQoInJldGFpbF93ZWJfZnJhbWV3b3JrIiksCiAgICAgIGlzX3doYXRzYXBwX3N1YnNjcmlwdGlvbjogdGhpcy4kc2Vzc2lvbi5nZXQoIndoYXRzYXBwX3N1YnNjcmlwdGlvbiIpLAogICAgICB2ZXJpZnlfcHJvZHVjdF9zZXR0aW5nczogW10sCiAgICAgIHZlcmlmeV9jaGVjazogZmFsc2UsCiAgICAgIGlzX2Rpc3BsYXlfYmFubmVyX29uX2xhbmRpbmc6IGZhbHNlLAogICAgICBkaXNhYmxlX2J0bl9leHBpcmVkOiBmYWxzZSwKICAgICAgdW5zdWJzY3JpYmVfbGluazogbnVsbCwKICAgICAgdW5zdWJzY3JpYmVfbGlua190eXBlOiAic3RhbmRhcmQiLAogICAgICByZWdfaG9zdDogL2h0dHBzOlwvXC9bKHd3d1wuKT9hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn1cLlthLXpdezIsNn1cYihbLWEtekEtWjAtOUA6JV9cKy5+Iz8mXC9cLz1dKikvaSwKICAgICAgdHJhY2tpbmdfdXJsOiBudWxsLAogICAgICB1cmxfcGFyYW1ldGVyOiBbXSwKICAgICAgbmV3X3RyYWNraW5nX3VybDoge30sCiAgICAgIGdldF90cmFja2luZ191cmw6IGZhbHNlLAogICAgICBtaW51dGVzX2FmdGVyX2NhcnRfYWJhbmRvbmVkOiBudWxsLAogICAgICBtYXhfbm90aWZpY2F0aW9uX2NvdW50OiBudWxsLAogICAgICBhYmFuZG9uZWRfZW1haWxfb3B0aW9uOiAnU2VsZWN0IG5vdGlmaWNhdGlvbiBwZXJpb2QnLAogICAgICBjYXJ0X25vdGlmaWNhdGlvbl9saXN0OiBbXQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICBpZiAodGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUgPT0gIlN1cGVyQWRtaW4iKSB7CiAgICAgIHRoaXMuY29tcGFueWlkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlJZCIpOwogICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlOYW1lIik7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgIH0KCiAgICB0aGlzLmxvYWRfcHJvZHVjdF9zZXR0aW5ncygpOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLmZyZWV6ZV9wb3J0YWwoKTsKICAgIH0sIDEwMDApOwogICAgdGhpcy4kcm9vdC4kb24oIlByb2R1Y3RTZXR0aW5nc1BhZ2VEaXNhYmxlZCIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGlmIChkYXRhID09PSB0cnVlKSB7CiAgICAgICAgX3RoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCA9IHRydWU7CiAgICAgIH0KICAgIH0pOwogICAgdGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9IHRoaXMuJHNlc3Npb24uZ2V0KCJyZXRhaWxfd2ViX2ZyYW1ld29yayIpOwogICAgdGhpcy5pc193aGF0c2FwcF9pbnRlZ3JhdGVkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIndoYXRzYXBwX3N1YnNjcmlwdGlvbiIpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVuY3kubGVuZ3RoOyBpKyspIHsKICAgICAgdGhpcy5jdXJyZW5jeV9saXN0LnB1c2goewogICAgICAgIGRpc3BsYXlfbmFtZTogY3VycmVuY3lbaV0uZW1vamkgKyAiICIgKyBjdXJyZW5jeVtpXS5jdXJyZW5jeV9jb2RlICsgIiAtICIgKyBjdXJyZW5jeVtpXS5jdXJyZW5jeV9uYW1lLAogICAgICAgIHZhbHVlOiBjdXJyZW5jeVtpXS5jdXJyZW5jeV9jb2RlCiAgICAgIH0pOwogICAgfSAvLyB0aGlzLnVuaXF1ZSgpOwoKCiAgICB0aGlzLmZyZWV6ZV9wb3J0YWwoKTsKICAgICQoJ1tkYXRhLXRvZ2dsZT0icG9wb3ZlciJdJykucG9wb3ZlcigpOyAvLyBsb2FkX3Byb2R1Y3Rfc2V0dGluZ3MoKTsKCiAgICB0aGlzLiRyb290LiRlbWl0KCJjaGFuZ2Vfc2lkZWJhcl9tYWluX21lbnUiLCAiU3RvcmUiKTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICB2YWxpZFBob25lTnVtYmVyOiBmdW5jdGlvbiB2YWxpZFBob25lTnVtYmVyKCkgewogICAgICBpZiAodGhpcy5waG9uZV9ub19kZXRhaWxzICE9IG51bGwpIHsKICAgICAgICBpZiAodGhpcy5waG9uZV9udW1iZXJfdmFsaWRpdHkudGVzdCh0aGlzLnBob25lX25vX2RldGFpbHMucmVwbGFjZSgvXHMrL2csICIiKSkpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3ZhbGlkX3BoX25vX21zZycpICsgIkNvdW50cnlDb2RlIE51bWJlciI7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgdmFsaWRFbWFpbDogZnVuY3Rpb24gdmFsaWRFbWFpbCgpIHsKICAgICAgaWYgKHRoaXMuY29udGFjdF91c19lbWFpbCAhPSBudWxsKSB7CiAgICAgICAgaWYgKHRoaXMuZW1haWxfdmFsaWRpdHkudGVzdCh0aGlzLmNvbnRhY3RfdXNfZW1haWwpKSB7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHRoaXMudGx0KCJwcm9kdWN0X2NvbmZpZ192YWxpZF9lbWFpbF9hZGRyZXNzX21zZyIpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHZhbGlkVXJsOiBmdW5jdGlvbiB2YWxpZFVybCgpIHsKICAgICAgaWYgKHRoaXMuY29udGFjdF91c19lbWFpbCAhPSBudWxsKSB7CiAgICAgICAgaWYgKHRoaXMudW5zdWJzY3JpYmVfbGlua190eXBlID09PSAic3RhbmRhcmQiKSB7CiAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlX2xpbmsgPSBudWxsOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlZ19ob3N0LnRlc3QodGhpcy51bnN1YnNjcmliZV9saW5rKSkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiB0aGlzLnRsdCgicHJvZHVjdF9jb25maWdfdmFsaWRfdXJsX21zZyIpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGVtYWlsX2RldGFpbHM6IGZ1bmN0aW9uIGVtYWlsX2RldGFpbHMoKSB7CiAgICAgIGlmICh0aGlzLmVtYWlsX2RldGFpbHMgPT0gbnVsbCB8fCB0aGlzLmVtYWlsX2RldGFpbHMgPT0gIiIpIHsKICAgICAgICB0aGlzLmVtYWlsX2Rpc2FibGUgPSBmYWxzZTsKICAgICAgfQogICAgfQogIH0sCiAgYmVmb3JlUm91dGVMZWF2ZTogZnVuY3Rpb24gYmVmb3JlUm91dGVMZWF2ZSh0bywgZnJvbSwgbmV4dCkgewogICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgdmFyIGNoZWNrID0gZmFsc2U7CgogICAgaWYgKHRoaXMudmVyaWZ5X2NoZWNrKSB7CiAgICAgIGlmICh0aGlzLnZlcmlmeV9wcm9kdWN0X3NldHRpbmdzLnJldmlld19tZXNzYWdlX2ZpcnN0ID09IHRoaXMucmV2aWV3X21lc3NhZ2VfZmlyc3QgJiYgdGhpcy52ZXJpZnlfcHJvZHVjdF9zZXR0aW5ncy5yZXZpZXdfbWVzc2FnZV9zZWNvbmQgPT0gdGhpcy5yZXZpZXdfbWVzc2FnZV9zZWNvbmQgJiYgdGhpcy52ZXJpZnlfcHJvZHVjdF9zZXR0aW5ncy5taW51dGVzX2FmdGVyX2NhcnRfYWJhbmRvbmVkID09IHRoaXMubWludXRlc19hZnRlcl9jYXJ0X2FiYW5kb25lZCAmJiB0aGlzLnZlcmlmeV9wcm9kdWN0X3NldHRpbmdzLm1heF9ub3RpZmljYXRpb25fY291bnQgPT0gdGhpcy5tYXhfbm90aWZpY2F0aW9uX2NvdW50ICYmIHRoaXMudmVyaWZ5X3Byb2R1Y3Rfc2V0dGluZ3MuYWJhbmRvbmVkX2VtYWlsX29wdGlvbiA9PSB0aGlzLmFiYW5kb25lZF9lbWFpbF9vcHRpb24gJiYgdGhpcy52ZXJpZnlfcHJvZHVjdF9zZXR0aW5ncy5jb250YWN0X2hlbHBfZW1haWwgPT0gdGhpcy5jb250YWN0X3VzX2VtYWlsICYmIHRoaXMudmVyaWZ5X3Byb2R1Y3Rfc2V0dGluZ3MuY29udGFjdF91c19waG9uZV9udW1iZXIgPT0gKHRoaXMuY29udGFjdF91c19waG9uZV9udW1iZXIgPyB0aGlzLnBob25lTnVtYmVyLmZvcm1hdHRlZE51bWJlciA6IHVuZGVmaW5lZCkgJiYgdGhpcy52ZXJpZnlfcHJvZHVjdF9zZXR0aW5ncy5vcmRlcl9yZXRyaWV2YWxfb25seV9lbWFpbF9yZXF1aXJlZCA9PSB0aGlzLmVtYWlsX3JlcXVpcmVkICYmIHRoaXMudmVyaWZ5X3Byb2R1Y3Rfc2V0dGluZ3MudXNlcl9mZWVkYmFja19mcmVxdWVuY3kgPT0gdGhpcy5mZWVkYmFja19xdWVzdGlvbl9mcmVxdWVuY3kgJiYgdGhpcy52ZXJpZnlfcHJvZHVjdF9zZXR0aW5ncy5sb3dfaW52ZW50b3J5X25vdGlmaWNhdGlvbiA9PSB0aGlzLmludmVudG9yeV9sZXZlbF9ub3RpZmljYXRpb24gJiYgdGhpcy52ZXJpZnlfcHJvZHVjdF9zZXR0aW5ncy5saW1pdF91cF9zZWxsID09IHRoaXMubGltaXRfdXBfc2VsbCAmJiB0aGlzLnZlcmlmeV9wcm9kdWN0X3NldHRpbmdzLmxpbWl0X2Nyb3NzX3NlbGwgPT0gdGhpcy5saW1pdF9jcm9zc19zZWxsICYmIHRoaXMudmVyaWZ5X3Byb2R1Y3Rfc2V0dGluZ3Muc2VuZGVyX2VtYWlsID09IHRoaXMuZW1haWxfZGV0YWlscyAmJiB0aGlzLnZlcmlmeV9wcm9kdWN0X3NldHRpbmdzLmRpc3BsYXlfcHJvZHVjdHNfb25fbGFuZGluZyA9PSB0aGlzLmlzX2Rpc3BsYXlfcHJvZHVjdHMgJiYgdGhpcy52ZXJpZnlfcHJvZHVjdF9zZXR0aW5ncy5pc19kaXNwbGF5X2Jhbm5lcl9vbl9sYW5kaW5nID09IHRoaXMuaXNfZGlzcGxheV9iYW5uZXJfb25fbGFuZGluZyAmJiB0aGlzLnZlcmlmeV9wcm9kdWN0X3NldHRpbmdzLmRpc3BsYXlfcHJvZHVjdHNfdHlwZSA9PSB0aGlzLmRpc3BsYXlfcHJvZHVjdHNfdHlwZSAmJiB0aGlzLnZlcmlmeV9wcm9kdWN0X3NldHRpbmdzLmNhcnRfbm90aWZpY2F0aW9uX2xpc3QgPT0gdGhpcy5jYXJ0X25vdGlmaWNhdGlvbl9saXN0KSB7CiAgICAgICAgY2hlY2sgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjaGVjayA9IHRydWU7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoY2hlY2sgJiYgIXRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCkgewogICAgICBTd2FsKHsKICAgICAgICB0aXRsZTogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3N3YWxfbXNnJyksCiAgICAgICAgdGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3N3YWxfYWxlcnRfbXNnJyksCiAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3NhdmVfbXNnJyksCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX2NhbmNlbF9tc2cnKQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICBfdGhpczIuY29uZmlndXJlX3Byb2R1Y3Rfc2V0dGluZ3MoImVtYWlsX3JlcXVpcmVkIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG5leHQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgbmV4dCgpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgdW5pcXVlOiBmdW5jdGlvbiB1bmlxdWUoKSB7CiAgICAgIHZhciBhcnIgPSB0aGlzLmN1cnJlbmN5X2xpc3Q7CiAgICAgIHZhciB1ID0ge30sCiAgICAgICAgICBhID0gW107CgogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyArK2kpIHsKICAgICAgICBpZiAoIXUuaGFzT3duUHJvcGVydHkoYXJyW2ldKSkgewogICAgICAgICAgYS5wdXNoKGFycltpXSk7CiAgICAgICAgICB1W2FycltpXV0gPSAxOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5jdXJyZW5jeV9saXN0ID0gYTsKICAgIH0sCiAgICBlbWFpbF92ZXJpZmljYXRpb25fc3RhdHVzOiBmdW5jdGlvbiBlbWFpbF92ZXJpZmljYXRpb25fc3RhdHVzKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmVtYWlsX2RldGFpbHMgIT0gbnVsbCAmJiB0aGlzLmVtYWlsX2RldGFpbHMgIT0gIiIpIHsKICAgICAgICB0aGlzLmVtYWlsX2Rpc2FibGUgPSB0cnVlOwogICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSB0cnVlOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnByb2R1Y3Rfc2V0dGluZ3MoKSwgewogICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgaXNfZW1haWxfdmVyaWZpY2F0aW9uX3N0YXR1czogdHJ1ZSwKICAgICAgICAgIGVtYWlsX2lkOiB0aGlzLmVtYWlsX2RldGFpbHMKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzMy5iaWdfc3Bpbm5lciA9IGZhbHNlOwoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXMzLmFwaV9zdGF0dXNfY29kZS5FTUFJTF9OT1RfQ09ORklHVVJFRC5NU0dfQ09ERSkgewogICAgICAgICAgICBfdGhpczMudmVyaWZpY2F0aW9uX3N0YXR1cyA9IF90aGlzMy50bHQoJ3Byb2R1Y3RfY29uZmlnX3VwZGF0ZV9lbWFpbF9tc2cnKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5kYXRhICE9IG51bGwpIHsKICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHJlc3BvbnNlLmRhdGEuZGF0YS52ZXJpZmljYXRpb25fc3RhdHVzOwogICAgICAgICAgICBfdGhpczMudmVyaWZpY2F0aW9uX3N0YXR1cyA9IHN0YXR1cyA9PSAiU3VjY2VzcyIgPyAiU3VjY2VzcyIgOiBzdGF0dXMgPT0gIlBlbmRpbmciID8gX3RoaXMzLnRsdCgncHJvZHVjdF9jb25maWdfcGVuZGluZ19lbWFpbF9tc2cnKSA6IHN0YXR1cyArIF90aGlzMy50bHQoJ3Byb2R1Y3RfY29uZmlnX3ZlcmlmaWNhdGlvbl9tc2cnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRpdGxlOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUsCiAgICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TRywKICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgX3RoaXMzLmJpZ19zcGlubmVyID0gZmFsc2U7CgogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzMy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGxvYWRfcHJvZHVjdF9zZXR0aW5nczogZnVuY3Rpb24gbG9hZF9wcm9kdWN0X3NldHRpbmdzKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHRoaXMuZW1haWxfZGV0YWlscyA9IG51bGw7CiAgICAgIHRoaXMucGhvbmVfbm9fZGV0YWlscyA9IG51bGw7CiAgICAgIHRoaXMuZW1haWxfcmVxdWlyZWQgPSBmYWxzZTsKICAgICAgdGhpcy5jdXJyZW5jeV9jb2RlID0gIiI7CiAgICAgIHRoaXMuZmVlZGJhY2tfcXVlc3Rpb25fZnJlcXVlbmN5ID0gOTA7CiAgICAgIHRoaXMuaW52ZW50b3J5X2xldmVsX25vdGlmaWNhdGlvbiA9IDU7CiAgICAgIHRoaXMubGltaXRfdXBfc2VsbCA9IDEwOwogICAgICB0aGlzLmxpbWl0X2Nyb3NzX3NlbGwgPSAxMDsKICAgICAgdGhpcy5iaWdfc3Bpbm5lciA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnByb2R1Y3Rfc2V0dGluZ3MoKSwgewogICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgaXNfZ2V0OiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczQuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICB2YXIgd2ViZnJhbWV3b3JrID0gX3RoaXM0LnJldGFpbF93ZWJfZnJhbWV3b3JrOwoKICAgICAgICBpZiAod2ViZnJhbWV3b3JrKSB7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzNC5hcGlfc3RhdHVzX2NvZGUuREFUQV9BVkFJTEFCTEUuTVNHX0NPREUpIHsKICAgICAgICAgICAgX3RoaXM0LnZlcmlmeV9wcm9kdWN0X3NldHRpbmdzID0gcmVzcG9uc2UuZGF0YS5kYXRhW3dlYmZyYW1ld29yayArICJfZGV0YWlscyJdOwogICAgICAgICAgICBfdGhpczQucmV2aWV3X21lc3NhZ2VfZmlyc3QgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0ucmV2aWV3X21lc3NhZ2VfZmlyc3Q7CiAgICAgICAgICAgIF90aGlzNC5taW51dGVzX2FmdGVyX2NhcnRfYWJhbmRvbmVkID0gcmVzcG9uc2UuZGF0YS5kYXRhW3dlYmZyYW1ld29yayArICJfZGV0YWlscyJdLm1pbnV0ZXNfYWZ0ZXJfY2FydF9hYmFuZG9uZWQ7CiAgICAgICAgICAgIF90aGlzNC5tYXhfbm90aWZpY2F0aW9uX2NvdW50ID0gcmVzcG9uc2UuZGF0YS5kYXRhW3dlYmZyYW1ld29yayArICJfZGV0YWlscyJdLm1heF9ub3RpZmljYXRpb25fY291bnQ7CiAgICAgICAgICAgIF90aGlzNC5hYmFuZG9uZWRfZW1haWxfb3B0aW9uID0gcmVzcG9uc2UuZGF0YS5kYXRhW3dlYmZyYW1ld29yayArICJfZGV0YWlscyJdLmFiYW5kb25lZF9lbWFpbF9vcHRpb247CiAgICAgICAgICAgIF90aGlzNC5yZXZpZXdfbWVzc2FnZV9zZWNvbmQgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0ucmV2aWV3X21lc3NhZ2Vfc2Vjb25kOwogICAgICAgICAgICBfdGhpczQuY29udGFjdF91c19lbWFpbCA9IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5jb250YWN0X2hlbHBfZW1haWw7CiAgICAgICAgICAgIF90aGlzNC5jb250YWN0X3VzX3Bob25lX251bWJlciA9IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5jb250YWN0X3VzX3Bob25lX251bWJlcjsKICAgICAgICAgICAgX3RoaXM0LmVtYWlsX2RldGFpbHMgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0uc2VuZGVyX2VtYWlsOwogICAgICAgICAgICBfdGhpczQucGhvbmVfbm9fZGV0YWlscyA9IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5zZW5kZXJfcGhvbmVfbm87CiAgICAgICAgICAgIF90aGlzNC5lbWFpbF9yZXF1aXJlZCA9IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5vcmRlcl9yZXRyaWV2YWxfb25seV9lbWFpbF9yZXF1aXJlZDsKICAgICAgICAgICAgX3RoaXM0LmN1cnJlbmN5X2NvZGUgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0uYmFzZV9jdXJyZW5jeTsKICAgICAgICAgICAgX3RoaXM0Lm9yZGVyX25vdGlmaWNhdGlvbiA9IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5vcmRlcl9ub3RpZmljYXRpb24gPT0gdW5kZWZpbmVkID8gZmFsc2UgOiByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0ub3JkZXJfbm90aWZpY2F0aW9uOwogICAgICAgICAgICBfdGhpczQuZmVlZGJhY2tfcXVlc3Rpb25fZnJlcXVlbmN5ID0gcmVzcG9uc2UuZGF0YS5kYXRhW3dlYmZyYW1ld29yayArICJfZGV0YWlscyJdLnVzZXJfZmVlZGJhY2tfZnJlcXVlbmN5OwogICAgICAgICAgICBfdGhpczQuaW52ZW50b3J5X2xldmVsX25vdGlmaWNhdGlvbiA9IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5sb3dfaW52ZW50b3J5X25vdGlmaWNhdGlvbjsKICAgICAgICAgICAgX3RoaXM0LmxpbWl0X3VwX3NlbGwgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0ubGltaXRfdXBfc2VsbDsKICAgICAgICAgICAgX3RoaXM0LmxpbWl0X2Nyb3NzX3NlbGwgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0ubGltaXRfY3Jvc3Nfc2VsbDsKICAgICAgICAgICAgX3RoaXM0LmlzX2Rpc3BsYXlfcHJvZHVjdHMgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0uZGlzcGxheV9wcm9kdWN0c19vbl9sYW5kaW5nOwogICAgICAgICAgICBfdGhpczQuaXNfZGlzcGxheV9iYW5uZXJfb25fbGFuZGluZyA9IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5pc19kaXNwbGF5X2Jhbm5lcl9vbl9sYW5kaW5nOwogICAgICAgICAgICBfdGhpczQuZGlzcGxheV9wcm9kdWN0c190eXBlID0gcmVzcG9uc2UuZGF0YS5kYXRhW3dlYmZyYW1ld29yayArICJfZGV0YWlscyJdLmRpc3BsYXlfcHJvZHVjdHNfdHlwZTsKICAgICAgICAgICAgX3RoaXM0LmNhcnRfbm90aWZpY2F0aW9uX2xpc3QgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0uY2FydF9ub3RpZmljYXRpb25fbGlzdDsKICAgICAgICAgICAgX3RoaXM0LnRyYWNraW5nX3VybCA9IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5zaGlwbWVudF90cmFja2luZ191cmwgPT09IHVuZGVmaW5lZCA/IG51bGwgOiByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0uc2hpcG1lbnRfdHJhY2tpbmdfdXJsLnVybDsKICAgICAgICAgICAgX3RoaXM0LnVybF9wYXJhbWV0ZXIgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0uc2hpcG1lbnRfdHJhY2tpbmdfdXJsID09PSB1bmRlZmluZWQgPyBbXSA6IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5zaGlwbWVudF90cmFja2luZ191cmwucGFyYW1zOyAvLyB0aGlzLmdldF90cmFja2luZ191cmwgPSBCb29sZWFuKHRoaXMudHJhY2tpbmdfdXJsKTsKCiAgICAgICAgICAgIF90aGlzNC5kaXNwbGF5X25vdGlmaWNhdGlvbl9zdGF0dXMgPSByZXNwb25zZS5kYXRhLmRhdGFbd2ViZnJhbWV3b3JrICsgIl9kZXRhaWxzIl0uYWJhbmRvbmVkX2NhcnRfbm90aWZpY2F0aW9uX2NoYW5uZWxzOwoKICAgICAgICAgICAgX3RoaXM0LmVtYWlsX3ZlcmlmaWNhdGlvbl9zdGF0dXMoKTsKCiAgICAgICAgICAgIF90aGlzNC52ZXJpZnlfY2hlY2sgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXM0LnZlcmlmeV9jaGVjayA9IGZhbHNlOwogICAgICAgICAgICB0b2FzdHIuZXJyb3IoX3RoaXM0LnRsdCgncHJvZHVjdF9jb25maWdfc3dhbF9pbnRlcm5hbF9zZXJ2ZXJfbXNnJykpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChfdGhpczQuZGlzcGxheV9ub3RpZmljYXRpb25fc3RhdHVzICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgICBfdGhpczQuZGlzcGxheV9ub3RpZmljYXRpb25fc3RhdHVzLmluY2x1ZGVzKCJlbWFpbCIpID8gX3RoaXM0LmRpc3BsYXlfbm90aWZpY2F0aW9uX2VtYWlsID0gdHJ1ZSA6IF90aGlzNC5kaXNwbGF5X25vdGlmaWNhdGlvbl9lbWFpbCA9IGZhbHNlOwogICAgICAgICAgICBfdGhpczQuZGlzcGxheV9ub3RpZmljYXRpb25fc3RhdHVzLmluY2x1ZGVzKCJ3aGF0c2FwcCIpID8gX3RoaXM0LmRpc3BsYXlfbm90aWZpY2F0aW9uX3doYXRzYXBwID0gdHJ1ZSA6IF90aGlzNC5kaXNwbGF5X25vdGlmaWNhdGlvbl93aGF0c2FwcCA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzNC5hcGlfc3RhdHVzX2NvZGUuREFUQV9BVkFJTEFCTEUuTVNHX0NPREUpIHsKICAgICAgICAgICAgX3RoaXM0LnZlcmlmeV9wcm9kdWN0X3NldHRpbmdzID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHM7CiAgICAgICAgICAgIF90aGlzNC5yZXZpZXdfbWVzc2FnZV9maXJzdCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLnJldmlld19tZXNzYWdlX2ZpcnN0OwogICAgICAgICAgICBfdGhpczQubWludXRlc19hZnRlcl9jYXJ0X2FiYW5kb25lZCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLm1pbnV0ZXNfYWZ0ZXJfY2FydF9hYmFuZG9uZWQ7CiAgICAgICAgICAgIF90aGlzNC5tYXhfbm90aWZpY2F0aW9uX2NvdW50ID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMubWF4X25vdGlmaWNhdGlvbl9jb3VudDsKICAgICAgICAgICAgX3RoaXM0LmFiYW5kb25lZF9lbWFpbF9vcHRpb24gPSByZXNwb25zZS5kYXRhLmRhdGEuZGV0YWlscy5hYmFuZG9uZWRfZW1haWxfb3B0aW9uOwogICAgICAgICAgICBfdGhpczQucmV2aWV3X21lc3NhZ2Vfc2Vjb25kID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMucmV2aWV3X21lc3NhZ2Vfc2Vjb25kOwogICAgICAgICAgICBfdGhpczQuY29udGFjdF91c19lbWFpbCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLmNvbnRhY3RfaGVscF9lbWFpbDsKICAgICAgICAgICAgX3RoaXM0LmNvbnRhY3RfdXNfcGhvbmVfbnVtYmVyID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMuY29udGFjdF91c19waG9uZV9udW1iZXI7CiAgICAgICAgICAgIF90aGlzNC5lbWFpbF9kZXRhaWxzID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMuc2VuZGVyX2VtYWlsOwogICAgICAgICAgICBfdGhpczQucGhvbmVfbm9fZGV0YWlscyA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLnNlbmRlcl9waG9uZV9ubzsKICAgICAgICAgICAgX3RoaXM0LmVtYWlsX3JlcXVpcmVkID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMub3JkZXJfcmV0cmlldmFsX29ubHlfZW1haWxfcmVxdWlyZWQ7CiAgICAgICAgICAgIF90aGlzNC5jdXJyZW5jeV9jb2RlID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMuYmFzZV9jdXJyZW5jeTsKICAgICAgICAgICAgX3RoaXM0Lm9yZGVyX25vdGlmaWNhdGlvbiA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLm9yZGVyX25vdGlmaWNhdGlvbiA9PSB1bmRlZmluZWQgPyBmYWxzZSA6IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLm9yZGVyX25vdGlmaWNhdGlvbjsKICAgICAgICAgICAgX3RoaXM0LmZlZWRiYWNrX3F1ZXN0aW9uX2ZyZXF1ZW5jeSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLnVzZXJfZmVlZGJhY2tfZnJlcXVlbmN5OwogICAgICAgICAgICBfdGhpczQuaW52ZW50b3J5X2xldmVsX25vdGlmaWNhdGlvbiA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLmxvd19pbnZlbnRvcnlfbm90aWZpY2F0aW9uOwogICAgICAgICAgICBfdGhpczQubGltaXRfdXBfc2VsbCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLmxpbWl0X3VwX3NlbGw7CiAgICAgICAgICAgIF90aGlzNC5saW1pdF9jcm9zc19zZWxsID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMubGltaXRfY3Jvc3Nfc2VsbDsKICAgICAgICAgICAgX3RoaXM0LmlzX2Rpc3BsYXlfcHJvZHVjdHMgPSByZXNwb25zZS5kYXRhLmRhdGEuZGV0YWlscy5kaXNwbGF5X3Byb2R1Y3RzX29uX2xhbmRpbmc7CiAgICAgICAgICAgIF90aGlzNC5pc19kaXNwbGF5X2Jhbm5lcl9vbl9sYW5kaW5nID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMuaXNfZGlzcGxheV9iYW5uZXJfb25fbGFuZGluZzsKICAgICAgICAgICAgX3RoaXM0LmRpc3BsYXlfcHJvZHVjdHNfdHlwZSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLmRpc3BsYXlfcHJvZHVjdHNfdHlwZTsKICAgICAgICAgICAgX3RoaXM0LmNhcnRfbm90aWZpY2F0aW9uX2xpc3QgPSByZXNwb25zZS5kYXRhLmRhdGEuZGV0YWlscy5jYXJ0X25vdGlmaWNhdGlvbl9saXN0OwogICAgICAgICAgICBfdGhpczQudHJhY2tpbmdfdXJsID0gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMuc2hpcG1lbnRfdHJhY2tpbmdfdXJsID09PSB1bmRlZmluZWQgPyBudWxsIDogcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMuc2hpcG1lbnRfdHJhY2tpbmdfdXJsLnVybDsKICAgICAgICAgICAgX3RoaXM0LnVybF9wYXJhbWV0ZXIgPSByZXNwb25zZS5kYXRhLmRhdGEuZGV0YWlscy5zaGlwbWVudF90cmFja2luZ191cmwgPT09IHVuZGVmaW5lZCA/IFtdIDogcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMuc2hpcG1lbnRfdHJhY2tpbmdfdXJsLnBhcmFtczsgLy8gdGhpcy5nZXRfdHJhY2tpbmdfdXJsID0gQm9vbGVhbih0aGlzLnRyYWNraW5nX3VybCk7CgogICAgICAgICAgICBfdGhpczQuZW1haWxfdmVyaWZpY2F0aW9uX3N0YXR1cygpOwoKICAgICAgICAgICAgX3RoaXM0LnZlcmlmeV9jaGVjayA9IHRydWU7CiAgICAgICAgICAgIF90aGlzNC5kaXNwbGF5X25vdGlmaWNhdGlvbl9zdGF0dXMgPSByZXNwb25zZS5kYXRhLmRhdGEuZGV0YWlscy5hYmFuZG9uZWRfY2FydF9ub3RpZmljYXRpb25fY2hhbm5lbHM7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczQuYXBpX3N0YXR1c19jb2RlLk5PX0RBVEFfQVZBSUxBQkxFLk1TR19DT0RFKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJpbmZvIiwKICAgICAgICAgICAgICB0ZXh0OiBfdGhpczQudGx0KCdub19kYXRhX3RleHQnKSwKICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzNC52ZXJpZnlfY2hlY2sgPSBmYWxzZTsKICAgICAgICAgICAgdG9hc3RyLmVycm9yKF90aGlzNC50bHQoJ3Byb2R1Y3RfY29uZmlnX3N3YWxfaW50ZXJuYWxfc2VydmVyX21zZycpKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChfdGhpczQuZGlzcGxheV9ub3RpZmljYXRpb25fc3RhdHVzICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgX3RoaXM0LmRpc3BsYXlfbm90aWZpY2F0aW9uX3N0YXR1cy5pbmNsdWRlcygiZW1haWwiKSA/IF90aGlzNC5kaXNwbGF5X25vdGlmaWNhdGlvbl9lbWFpbCA9IHRydWUgOiBfdGhpczQuZGlzcGxheV9ub3RpZmljYXRpb25fZW1haWwgPSBmYWxzZTsKICAgICAgICAgIF90aGlzNC5kaXNwbGF5X25vdGlmaWNhdGlvbl9zdGF0dXMuaW5jbHVkZXMoIndoYXRzYXBwIikgPyBfdGhpczQuZGlzcGxheV9ub3RpZmljYXRpb25fd2hhdHNhcHAgPSB0cnVlIDogX3RoaXM0LmRpc3BsYXlfbm90aWZpY2F0aW9uX3doYXRzYXBwID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgIF90aGlzNC5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgIF90aGlzNC52ZXJpZnlfY2hlY2sgPSBmYWxzZTsKICAgICAgICB0b2FzdHIuZXJyb3IoX3RoaXM0LnRsdCgncHJvZHVjdF9jb25maWdfc3dhbF9lcnJvcl9vY2N1cnJlZF9tc2cnKSk7CgogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXM0LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgY29uZmlndXJlX3Byb2R1Y3Rfc2V0dGluZ3M6IGZ1bmN0aW9uIGNvbmZpZ3VyZV9wcm9kdWN0X3NldHRpbmdzKHZhbHVlKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLmRpc2FibGVfYnRuX2V4cGlyZWQpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICBpZiAodmFsdWUgPT0gImVtYWlsIikgewogICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgdGl0bGU6IHRoaXMudGx0KCdwcm9kdWN0X2NvbmZpZ19zd2FsX21zZzEnKSwKICAgICAgICAgICAgdGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3N3YWxfYWxlcnRfbXNnMScpLAogICAgICAgICAgICB0eXBlOiAicXVlc3Rpb24iLAogICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IHRoaXMudGx0KCdwcm9kdWN0X2NvbmZpZ19zd2FsX2NvbmZpcm1fbXNnJykKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgICAgX3RoaXM1LmJpZ19zcGlubmVyID0gdHJ1ZTsKICAgICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3NldHRpbmdzKCksIHsKICAgICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogX3RoaXM1LmNvbXBhbnluYW1lLAogICAgICAgICAgICAgICAgY29tcGFueV9pZDogX3RoaXM1LmNvbXBhbnlpZCwKICAgICAgICAgICAgICAgIGVtYWlsOiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICAgIHRva2VuOiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgICBpc19lbWFpbDogdHJ1ZSwKICAgICAgICAgICAgICAgIGVtYWlsX2lkOiBfdGhpczUuZW1haWxfZGV0YWlscwogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdChfdGhpczUuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBfdGhpczUuYmlnX3NwaW5uZXIgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzNS5hcGlfc3RhdHVzX2NvZGUuU1VDQ0VTU0ZVTF9EQl9RVUVSWS5NU0dfQ09ERSkgewogICAgICAgICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczUudGx0KCdwcm9kdWN0X2NvbmZpZ19lbWFpbF9zZW5kX21zZzEnKSArICIgIiArIF90aGlzNS50bHQoJ3Byb2R1Y3RfY29uZmlnX2VtYWlsX3NlbmRfbXNnMicpICsgX3RoaXM1LnRsdCgncHJvZHVjdF9jb25maWdfZW1haWxfc2VuZF9tc2czJyksCiAgICAgICAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdGhpczUudGx0KCdwcm9kdWN0X2NvbmZpZ19zd2FsX3N1Y2Nlc3NfbXNnJyksCiAgICAgICAgICAgICAgICAgICAgYWxsb3dPdXRzaWRlQ2xpY2s6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGFsbG93RXNjYXBlS2V5OiBmYWxzZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgX3RoaXM1LmVtYWlsX2Rpc2FibGUgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgX3RoaXM1LmVtYWlsX3ZlcmlmaWNhdGlvbl9zdGF0dXMoKTsKCiAgICAgICAgICAgICAgICAgIF90aGlzNS5sb2FkX3Byb2R1Y3Rfc2V0dGluZ3MoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzNS50bHQoJ3Byb2R1Y3RfY29uZmlnX3Byb2R1Y3Rfc2VydmVyX2Vycm9yX21zZycpLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICAgICAgdGltZXI6IDIwMDAKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIF90aGlzNS5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKF90aGlzNS50bHQoJ3Byb2R1Y3RfY29uZmlnX3Byb2R1Y3RfZXJyb3Jfb2NjdXJyZWRfbXNnJykpOwoKICAgICAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgICAgICBfdGhpczUuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gInBob25lX25vIikgewogICAgICAgICAgaWYgKHRoaXMudmFsaWRQaG9uZU51bWJlciA9PSB0cnVlKSB7CiAgICAgICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSB0cnVlOwogICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3NldHRpbmdzKCksIHsKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgIGlzX3Bob25lX25vOiB0cnVlLAogICAgICAgICAgICAgIHBob25lX25vOiB0aGlzLnBob25lX25vX2RldGFpbHMKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgIF90aGlzNS5iaWdfc3Bpbm5lciA9IGZhbHNlOwoKICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzNS5hcGlfc3RhdHVzX2NvZGUuU1VDQ0VTU0ZVTF9EQl9RVUVSWS5NU0dfQ09ERSkgewogICAgICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzNS50bHQoJ3Byb2R1Y3RfY29uZmlnX3Bob25lX251bWJlcl9tc2cnKSwKICAgICAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjAwMCwKICAgICAgICAgICAgICAgICAgdGl0bGU6ICJTdWNjZXNzIgogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgX3RoaXM1LmVtcHR5X3ZhcmlhYmxlKCk7CgogICAgICAgICAgICAgICAgX3RoaXM1LmxvYWRfcHJvZHVjdF9zZXR0aW5ncygpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICAgICAgdGV4dDogX3RoaXM1LnRsdCgncHJvZHVjdF9jb25maWdfaW50ZXJuYWxfc2VydmVyX2FsZXJ0X21zZycpLAogICAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjAwMAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIF90aGlzNS5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihfdGhpczUudGx0KCdwcm9kdWN0X2NvbmZpZ19zb21lX2Vycm9yX21zZycpKTsKCiAgICAgICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgICAgICBfdGhpczUuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcih0aGlzLnRsdCgncHJvZHVjdF9jb25maWdfbW9iaWxlX25vX2FsZXJ0X21zZycpICsgIiBDb3VudHJ5Q29kZSBOdW1iZXIiKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09ICJlbWFpbF9yZXF1aXJlZCIpIHsKICAgICAgICAgIHRoaXMuY3JlYXRlX3RyYWNraW5nX3VybCgpOwoKICAgICAgICAgIGlmICh0aGlzLnZhbGlkRW1haWwgIT0gdHJ1ZSAmJiAhQm9vbGVhbih0aGlzLnBob25lTnVtYmVyKSkgewogICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgncHJvZHVjdF9jb25maWdfdmFsaWRfZGV0YWlsX2FsZXJ0X21zZycpLAogICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICB0aW1lcjogMzAwMAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfSAvLyBpZighQm9vbGVhbih0aGlzLnBob25lTnVtYmVyKSl7CiAgICAgICAgICAvLyAgIHN3YWwoewogICAgICAgICAgLy8gICAgIHRleHQ6ICJQbGVhc2UgZW50ZXIgYSB2YWxpZCBQaG9uZSBOdW1iZXIiLAogICAgICAgICAgLy8gICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgIC8vICAgICB0aW1lcjogMzAwMAogICAgICAgICAgLy8gICB9KTsKICAgICAgICAgIC8vICAgcmV0dXJuCiAgICAgICAgICAvLyB9ZWxzZQoKCiAgICAgICAgICBpZiAoQm9vbGVhbih0aGlzLnBob25lTnVtYmVyKSAmJiBCb29sZWFuKHRoaXMucGhvbmVOdW1iZXIucGhvbmVOdW1iZXIpICYmIHRoaXMucGhvbmVOdW1iZXIuaXNWYWxpZCAhPSB0cnVlKSB7CiAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCdwcm9kdWN0X2NvbmZpZ19waG9uZV9ub19tc2cnKSwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgdGltZXI6IDMwMDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5yZXZpZXdfbWVzc2FnZV9maXJzdCA9PT0gIiIgJiYgdGhpcy5yZXZpZXdfbWVzc2FnZV9zZWNvbmQgPT09ICIiKSB7CiAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCdwcm9kdWN0X2NvbmZpZ19yZXZpZXdfcmF0aW5nX2FsZXJ0X21zZycpLAogICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICB0aW1lcjogMzUwMAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh0aGlzLmlzX2Rpc3BsYXlfcHJvZHVjdHMgPT09IHRydWUgJiYgKHRoaXMuZGlzcGxheV9wcm9kdWN0c190eXBlID09PSBudWxsIHx8IHRoaXMuZGlzcGxheV9wcm9kdWN0c190eXBlID09PSAiIikpIHsKICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3Byb2R1Y3RfdHlwZV9hbGVydF9tc2cnKSwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgdGltZXI6IDUwMDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5pbnZlbnRvcnlfbGV2ZWxfbm90aWZpY2F0aW9uIDwgMCB8fCB0aGlzLmZlZWRiYWNrX3F1ZXN0aW9uX2ZyZXF1ZW5jeSA8IDApIHsKICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX251bWVyaWNfdmFsdWVfYWxlcnRfbXNnJyksCiAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh0aGlzLmN1cnJlbmN5X2NvZGUgPT0gIiIgfHwgdGhpcy5jdXJyZW5jeV9jb2RlID09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgncHJvZHVjdF9jb25maWdfYmFzZV9jdXJyZW5jeV9hbGVydF9tc2cnKSwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgdGltZXI6IDMwMDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5saW1pdF91cF9zZWxsID09IG51bGwgfHwgdGhpcy5saW1pdF91cF9zZWxsIDw9IDAgfHwgdGhpcy5saW1pdF9jcm9zc19zZWxsID09IG51bGwgfHwgdGhpcy5saW1pdF9jcm9zc19zZWxsIDw9IDApIHsKICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3Vwc2VsbF9jcm9zc19hbGVydF9tc2cnKSwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgdGltZXI6IDMwMDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmNhcnRfbm90aWZpY2F0aW9uX2xpc3QgPSBbXTsKCiAgICAgICAgICAgIGlmICh0aGlzLmRpc3BsYXlfbm90aWZpY2F0aW9uX2VtYWlsID09IHRydWUgJiYgdGhpcy5kaXNwbGF5X25vdGlmaWNhdGlvbl93aGF0c2FwcCA9PSB0cnVlKSB7CiAgICAgICAgICAgICAgdGhpcy5jYXJ0X25vdGlmaWNhdGlvbl9saXN0LnB1c2goImVtYWlsIiwgIndoYXRzYXBwIik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kaXNwbGF5X25vdGlmaWNhdGlvbl9lbWFpbCA9PSB0cnVlICYmIHRoaXMuZGlzcGxheV9ub3RpZmljYXRpb25fd2hhdHNhcHAgPT0gZmFsc2UpIHsKICAgICAgICAgICAgICB0aGlzLmNhcnRfbm90aWZpY2F0aW9uX2xpc3QucHVzaCgiZW1haWwiKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRpc3BsYXlfbm90aWZpY2F0aW9uX3doYXRzYXBwID09IHRydWUgJiYgdGhpcy5kaXNwbGF5X25vdGlmaWNhdGlvbl9lbWFpbCA9PSBmYWxzZSkgewogICAgICAgICAgICAgIHRoaXMuY2FydF9ub3RpZmljYXRpb25fbGlzdC5wdXNoKCJ3aGF0c2FwcCIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMuY2FydF9ub3RpZmljYXRpb25fbGlzdC5wdXNoKCk7CiAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5X25vdGlmaWNhdGlvbl9zdGF0dXMgPSBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5iaWdfc3Bpbm5lciA9IHRydWU7CiAgICAgICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnByb2R1Y3Rfc2V0dGluZ3MoKSwgewogICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgaXNfZW1haWxfcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICAgICAgZW1haWxfcmVxdWlyZWQ6IHsKICAgICAgICAgICAgICAgIHJldmlld19tZXNzYWdlX2ZpcnN0OiB0aGlzLnJldmlld19tZXNzYWdlX2ZpcnN0LAogICAgICAgICAgICAgICAgbWludXRlc19hZnRlcl9jYXJ0X2FiYW5kb25lZDogdGhpcy5taW51dGVzX2FmdGVyX2NhcnRfYWJhbmRvbmVkLAogICAgICAgICAgICAgICAgbWF4X25vdGlmaWNhdGlvbl9jb3VudDogdGhpcy5tYXhfbm90aWZpY2F0aW9uX2NvdW50LAogICAgICAgICAgICAgICAgYWJhbmRvbmVkX2VtYWlsX29wdGlvbjogdGhpcy5hYmFuZG9uZWRfZW1haWxfb3B0aW9uLAogICAgICAgICAgICAgICAgYWJhbmRvbmVkX2NhcnRfbm90aWZpY2F0aW9uX2NoYW5uZWxzOiB0aGlzLmNhcnRfbm90aWZpY2F0aW9uX2xpc3QsCiAgICAgICAgICAgICAgICByZXZpZXdfbWVzc2FnZV9zZWNvbmQ6IHRoaXMucmV2aWV3X21lc3NhZ2Vfc2Vjb25kLAogICAgICAgICAgICAgICAgY29udGFjdF9oZWxwX2VtYWlsOiB0aGlzLmNvbnRhY3RfdXNfZW1haWwsCiAgICAgICAgICAgICAgICBjb250YWN0X3VzX3Bob25lX251bWJlcjogQm9vbGVhbih0aGlzLnBob25lTnVtYmVyKSAmJiB0aGlzLnBob25lTnVtYmVyLmlzVmFsaWQgPT0gdHJ1ZSA/IHRoaXMucGhvbmVOdW1iZXIuZm9ybWF0dGVkTnVtYmVyIDogbnVsbCwKICAgICAgICAgICAgICAgIG9yZGVyX3JldHJpZXZhbF9vbmx5X2VtYWlsX3JlcXVpcmVkOiB0aGlzLmVtYWlsX3JlcXVpcmVkLAogICAgICAgICAgICAgICAgb3JkZXJfbm90aWZpY2F0aW9uOiB0aGlzLmlzX3doYXRzYXBwX2ludGVncmF0ZWQgPyB0aGlzLm9yZGVyX25vdGlmaWNhdGlvbiA6IGZhbHNlLAogICAgICAgICAgICAgICAgYmFzZV9jdXJyZW5jeTogdGhpcy5jdXJyZW5jeV9jb2RlLAogICAgICAgICAgICAgICAgdXNlcl9mZWVkYmFja19mcmVxdWVuY3k6IHRoaXMuZmVlZGJhY2tfcXVlc3Rpb25fZnJlcXVlbmN5LAogICAgICAgICAgICAgICAgbG93X2ludmVudG9yeV9ub3RpZmljYXRpb246IHRoaXMuaW52ZW50b3J5X2xldmVsX25vdGlmaWNhdGlvbiwKICAgICAgICAgICAgICAgIGxpbWl0X3VwX3NlbGw6IHRoaXMubGltaXRfdXBfc2VsbCwKICAgICAgICAgICAgICAgIGxpbWl0X2Nyb3NzX3NlbGw6IHRoaXMubGltaXRfY3Jvc3Nfc2VsbCwKICAgICAgICAgICAgICAgIGRpc3BsYXlfcHJvZHVjdHNfb25fbGFuZGluZzogdGhpcy5pc19kaXNwbGF5X3Byb2R1Y3RzLAogICAgICAgICAgICAgICAgaXNfZGlzcGxheV9iYW5uZXJfb25fbGFuZGluZzogdGhpcy5pc19kaXNwbGF5X2Jhbm5lcl9vbl9sYW5kaW5nLAogICAgICAgICAgICAgICAgZGlzcGxheV9wcm9kdWN0c190eXBlOiB0aGlzLmlzX2Rpc3BsYXlfcHJvZHVjdHMgPyB0aGlzLmRpc3BsYXlfcHJvZHVjdHNfdHlwZSA6IG51bGwsCiAgICAgICAgICAgICAgICBzaGlwbWVudF90cmFja2luZ191cmw6IHRoaXMubmV3X3RyYWNraW5nX3VybCwKICAgICAgICAgICAgICAgIHNob3Bfc2V0dGluZ3Nfc2F2ZWQ6IHRydWUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICBfdGhpczUuYmlnX3NwaW5uZXIgPSBmYWxzZTsKCiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczUuYXBpX3N0YXR1c19jb2RlLlNVQ0NFU1NGVUxfREJfUVVFUlkuTVNHX0NPREUpIHsKICAgICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczUudGx0KCdwcm9kdWN0X2NvbmZpZ19jaGFuZ2VzX3NhdmVkX21zZycpLAogICAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiA0MDAwCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBfdGhpczUuZW1wdHlfdmFyaWFibGUoKTsKCiAgICAgICAgICAgICAgICBfdGhpczUubG9hZF9wcm9kdWN0X3NldHRpbmdzKCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczUudGx0KCdwcm9kdWN0X2NvbmZpZ19pbnRlcm5hbF9zZXJ2ZXJfbXNnMicpLAogICAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjAwMAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIF90aGlzNS5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihfdGhpczUudGx0KCdwcm9kdWN0X2NvbmZpZ19zb21lX2Vycm9yX21zZzInKSk7CgogICAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgICAgX3RoaXM1LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSAiZW1haWxfcmVtb3ZlIikgewogICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgdGl0bGU6IHRoaXMudGx0KCdwcm9kdWN0X2NvbmZpZ19zd2FsX21zZzInKSwKICAgICAgICAgICAgdGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3N3YWxfYWxlcnRfbXNnMicpLAogICAgICAgICAgICB0eXBlOiAicXVlc3Rpb24iLAogICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IHRoaXMudGx0KCdwcm9kdWN0X2NvbmZpZ19zd2FsX3JlbW92ZV9tc2cyJykKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgICAgX3RoaXM1LmJpZ19zcGlubmVyID0gdHJ1ZTsKICAgICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3NldHRpbmdzKCksIHsKICAgICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogX3RoaXM1LmNvbXBhbnluYW1lLAogICAgICAgICAgICAgICAgY29tcGFueV9pZDogX3RoaXM1LmNvbXBhbnlpZCwKICAgICAgICAgICAgICAgIGVtYWlsOiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICAgIHRva2VuOiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgICBpc19yZW1vdmVfZW1haWw6IHRydWUsCiAgICAgICAgICAgICAgICBlbWFpbF9pZDogX3RoaXM1LmVtYWlsX2RldGFpbHMKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXM1LiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgX3RoaXM1LmJpZ19zcGlubmVyID0gZmFsc2U7CgogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczUuYXBpX3N0YXR1c19jb2RlLlNVQ0NFU1NGVUxfREJfUVVFUlkuTVNHX0NPREUpIHsKICAgICAgICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgICAgICAgdGV4dDogX3RoaXM1LnRsdCgncHJvZHVjdF9jb25maWdfc3dhbF9jb25maXJtX21zZzInKSwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgdGltZXI6IDUwMDAsCiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF90aGlzNS50bHQoJ3Byb2R1Y3RfY29uZmlnX3N3YWxfc3VjY2Vzc19sYWJlbF9tc2cnKQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgX3RoaXM1LmVtYWlsX2Rpc2FibGUgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgX3RoaXM1LmVtYWlsX2RldGFpbHMgPSBudWxsOwoKICAgICAgICAgICAgICAgICAgX3RoaXM1LmVtcHR5X3ZhcmlhYmxlKCk7CgogICAgICAgICAgICAgICAgICBfdGhpczUubG9hZF9wcm9kdWN0X3NldHRpbmdzKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczUudGx0KCdwcm9kdWN0X2NvbmZpZ19pbnRlcm5hbF9zZXJ2ZXJfbXNnMycpLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICAgICAgdGltZXI6IDIwMDAKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIF90aGlzNS5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKF90aGlzNS50bHQoJ3Byb2R1Y3RfY29uZmlnX3NvbWVfZXJyb3JfbXNnMycpKTsKCiAgICAgICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICAgICAgX3RoaXM1LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09ICJ1bnN1YnNjcmliZV9wcm9tb3Rpb25hbF9lbWFpbCIpIHsKICAgICAgICAgIGlmICh0aGlzLnZhbGlkVXJsICE9IHRydWUpIHsKICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogdGhpcy50bHQoJ3Byb2R1Y3RfY29uZmlnX3ZhbGlkX3VybF9tc2cnKSwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgdGltZXI6IDMwMDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSB0cnVlOwogICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3NldHRpbmdzKCksIHsKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgIGlzX2VtYWlsX3JlcXVpcmVkOiB0cnVlLAogICAgICAgICAgICAgIGVtYWlsX3JlcXVpcmVkOiB7CiAgICAgICAgICAgICAgICByZXZpZXdfbWVzc2FnZV9maXJzdDogdGhpcy5yZXZpZXdfbWVzc2FnZV9maXJzdCwKICAgICAgICAgICAgICAgIHJldmlld19tZXNzYWdlX3NlY29uZDogdGhpcy5yZXZpZXdfbWVzc2FnZV9zZWNvbmQsCiAgICAgICAgICAgICAgICBtaW51dGVzX2FmdGVyX2NhcnRfYWJhbmRvbmVkOiB0aGlzLm1pbnV0ZXNfYWZ0ZXJfY2FydF9hYmFuZG9uZWQsCiAgICAgICAgICAgICAgICBtYXhfbm90aWZpY2F0aW9uX2NvdW50OiB0aGlzLm1heF9ub3RpZmljYXRpb25fY291bnQsCiAgICAgICAgICAgICAgICBhYmFuZG9uZWRfZW1haWxfb3B0aW9uOiB0aGlzLmFiYW5kb25lZF9lbWFpbF9vcHRpb24sCiAgICAgICAgICAgICAgICBhYmFuZG9uZWRfY2FydF9ub3RpZmljYXRpb25fY2hhbm5lbHM6IHRoaXMuY2FydF9ub3RpZmljYXRpb25fbGlzdCwKICAgICAgICAgICAgICAgIGNvbnRhY3RfaGVscF9lbWFpbDogdGhpcy5jb250YWN0X3VzX2VtYWlsLAogICAgICAgICAgICAgICAgLy8gY29udGFjdF91c19waG9uZV9udW1iZXI6dGhpcy5waG9uZU51bWJlci5mb3JtYXR0ZWROdW1iZXIsCiAgICAgICAgICAgICAgICBvcmRlcl9yZXRyaWV2YWxfb25seV9lbWFpbF9yZXF1aXJlZDogdGhpcy5lbWFpbF9yZXF1aXJlZCwKICAgICAgICAgICAgICAgIG9yZGVyX25vdGlmaWNhdGlvbjogdGhpcy5pc193aGF0c2FwcF9pbnRlZ3JhdGVkID8gdGhpcy5vcmRlcl9ub3RpZmljYXRpb24gOiBmYWxzZSwKICAgICAgICAgICAgICAgIGJhc2VfY3VycmVuY3k6IHRoaXMuY3VycmVuY3lfY29kZSwKICAgICAgICAgICAgICAgIHVzZXJfZmVlZGJhY2tfZnJlcXVlbmN5OiB0aGlzLmZlZWRiYWNrX3F1ZXN0aW9uX2ZyZXF1ZW5jeSwKICAgICAgICAgICAgICAgIGxvd19pbnZlbnRvcnlfbm90aWZpY2F0aW9uOiB0aGlzLmludmVudG9yeV9sZXZlbF9ub3RpZmljYXRpb24sCiAgICAgICAgICAgICAgICBsaW1pdF91cF9zZWxsOiB0aGlzLmxpbWl0X3VwX3NlbGwsCiAgICAgICAgICAgICAgICBsaW1pdF9jcm9zc19zZWxsOiB0aGlzLmxpbWl0X2Nyb3NzX3NlbGwsCiAgICAgICAgICAgICAgICBkaXNwbGF5X3Byb2R1Y3RzX29uX2xhbmRpbmc6IHRoaXMuaXNfZGlzcGxheV9wcm9kdWN0cywKICAgICAgICAgICAgICAgIGlzX2Rpc3BsYXlfYmFubmVyX29uX2xhbmRpbmc6IHRoaXMuaXNfZGlzcGxheV9iYW5uZXJfb25fbGFuZGluZywKICAgICAgICAgICAgICAgIGRpc3BsYXlfcHJvZHVjdHNfdHlwZTogdGhpcy5pc19kaXNwbGF5X3Byb2R1Y3RzID8gdGhpcy5kaXNwbGF5X3Byb2R1Y3RzX3R5cGUgOiBudWxsLAogICAgICAgICAgICAgICAgc2hvcF9zZXR0aW5nc19zYXZlZDogdHJ1ZSwKICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlX2xpbms6IHRoaXMudW5zdWJzY3JpYmVfbGluaywKICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlX2xpbmtfdHlwZTogdGhpcy51bnN1YnNjcmliZV9saW5rX3R5cGUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICBfdGhpczUuYmlnX3NwaW5uZXIgPSBmYWxzZTsKCiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczUuYXBpX3N0YXR1c19jb2RlLlNVQ0NFU1NGVUxfREJfUVVFUlkuTVNHX0NPREUpIHsKICAgICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczUudGx0KCdwcm9kdWN0X2NvbmZpZ19jaGFuZ2VzX3NhdmVkX21zZzInKSwKICAgICAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICB0aW1lcjogNDAwMAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgX3RoaXM1LmVtcHR5X3ZhcmlhYmxlKCk7CgogICAgICAgICAgICAgICAgX3RoaXM1LmxvYWRfcHJvZHVjdF9zZXR0aW5ncygpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICAgICAgdGV4dDogX3RoaXM1LnRsdCgncHJvZHVjdF9jb25maWdfaW50ZXJuYWxfc2VydmVyX21zZzQnKSwKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgICAgdGltZXI6IDIwMDAKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBfdGhpczUuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoX3RoaXM1LnRsdCgncHJvZHVjdF9jb25maWdfc29tZV9lcnJvcl9tc2c0JykpOwoKICAgICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICAgIF90aGlzNS4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbCgpOwogICAgICB9CiAgICB9LAogICAgZW1wdHlfdmFyaWFibGU6IGZ1bmN0aW9uIGVtcHR5X3ZhcmlhYmxlKCkgewogICAgICB0aGlzLmVtYWlsX2RldGFpbHMgPSBudWxsOwogICAgICB0aGlzLmVtYWlsX3JlcXVpcmVkID0gZmFsc2U7CiAgICAgIHRoaXMuY3VycmVuY3lfY29kZSA9ICIiOwogICAgICB0aGlzLmZlZWRiYWNrX3F1ZXN0aW9uX2ZyZXF1ZW5jeSA9IDkwOwogICAgICB0aGlzLmludmVudG9yeV9sZXZlbF9ub3RpZmljYXRpb24gPSA1OwogICAgICB0aGlzLnBob25lX25vX2RldGFpbHMgPSBudWxsOwogICAgICB0aGlzLmxpbWl0X3VwX3NlbGwgPSAxMDsKICAgICAgdGhpcy5saW1pdF9jcm9zc19zZWxsID0gMTA7CiAgICAgIHRoaXMub3JkZXJfbm90aWZpY2F0aW9uID0gZmFsc2U7CiAgICB9LAogICAgLy8gYWRkX3BhcmFtZXRlcigpewogICAgLy8gICBsZXQgbmV4dF9pZCA9TWF0aC5yYW5kb20oKTsKICAgIC8vICAgaWYgKEJvb2xlYW4odGhpcy50cmFja2luZ191cmwpICkgewogICAgLy8gICAgIHRoaXMudXJsX3BhcmFtZXRlci5wdXNoKHsKICAgIC8vICAgICBrZXk6IG51bGwsCiAgICAvLyAgICAgaWQ6IG5leHRfaWQsCiAgICAvLyAgICAgdmFsdWU6IG51bGwKICAgIC8vICAgfQogICAgLy8gICApCiAgICAvLyAgIH1lbHNlewogICAgLy8gICAgIHN3YWwoewogICAgLy8gICAgICAgdGV4dDogIkFkZCAgU2hpcG1lbnQgdHJhY2tpbmcgVVJMICIsCiAgICAvLyAgICAgICB0b2FzdDogdHJ1ZSwKICAgIC8vICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAvLyAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAvLyAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAvLyAgICAgICB0aW1lcjogMjUwMCwKICAgIC8vICAgICB9KTsKICAgIC8vICAgICByZXR1cm47CiAgICAvLyAgIH0KICAgIC8vIH0sCiAgICAvLyBkZWxldGVfcGFyYW1ldGVyKGluZGV4KXsKICAgIC8vICAgaWYoCiAgICAvLyAgICAgdGhpcy51cmxfcGFyYW1ldGVyLmxlbmd0aCA9PT0gMAogICAgLy8gICApIHsKICAgIC8vICAgICBzd2FsKHsKICAgIC8vICAgICAgIHRleHQ6ICJBdGxlYXN0IG9uZSB1cmxfcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHRvIGFkZCBidXR0b25zIiwKICAgIC8vICAgICAgIHRvYXN0OiB0cnVlLAogICAgLy8gICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgIC8vICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgIC8vICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgIC8vICAgICAgIHRpbWVyOiAyNTAwLAogICAgLy8gICAgIH0pOwogICAgLy8gICAgIHJldHVybjsKICAgIC8vICAgfQogICAgLy8gICBsZXQgdGVtcF9pbmRleCA9IG51bGw7CiAgICAvLyAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy51cmxfcGFyYW1ldGVyLmxlbmd0aDsgaSsrKSB7CiAgICAvLyAgICAgaWYgKHRoaXMudXJsX3BhcmFtZXRlcltpXS5pZCA9PSBpbmRleCkgewogICAgLy8gICAgICAgdGVtcF9pbmRleCA9IGk7CiAgICAvLyAgICAgfQogICAgLy8gICB9CiAgICAvLyAgIHRoaXMudXJsX3BhcmFtZXRlci5zcGxpY2UodGVtcF9pbmRleCwgMSk7CiAgICAvLyB9LAogICAgY3JlYXRlX3RyYWNraW5nX3VybDogZnVuY3Rpb24gY3JlYXRlX3RyYWNraW5nX3VybCgpIHsKICAgICAgdGhpcy5uZXdfdHJhY2tpbmdfdXJsWyJ1cmwiXSA9IHRoaXMudHJhY2tpbmdfdXJsOwogICAgICB0aGlzLm5ld190cmFja2luZ191cmxbInBhcmFtcyJdID0gdGhpcy51cmxfcGFyYW1ldGVyOwogICAgfQogIH0KfTs="},null]}