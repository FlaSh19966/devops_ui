{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Integrations/WebFrameworks.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Integrations/WebFrameworks.vue","mtime":1663910265474},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}