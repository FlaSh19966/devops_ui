{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/analytics/NERTagging.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/analytics/NERTagging.vue","mtime":1643027096188},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWludGVnZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0iOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgU3dhbCBmcm9tICJzd2VldGFsZXJ0MiI7CmltcG9ydCBhcGlfY2FsbHMgZnJvbSAiQC9wb3J0YWwvYXBpX2NhbGxzIjsKaW1wb3J0IFZvZXJyb1RhZ3NJbnB1dFNlY29uZCBmcm9tICJAL3BvcnRhbC9hbmFseXRpY3MvdGFnc19pbnB1dC9Wb2Vycm9UYWdzSW5wdXQudnVlIjsKaW1wb3J0IHN3YWwgZnJvbSAnc3dlZXRhbGVydDInOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkFuYWx5dGljc05FUlRhZ2dpbmciLAogIGNvbXBvbmVudHM6IHsKICAgICJ0YWctdGFnIjogVm9lcnJvVGFnc0lucHV0U2Vjb25kCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc3Bpbm5lck9uOiBmYWxzZSwKICAgICAgZGF0YXNldF9uYW1lOiAiSGVhbHRoY2FyZSBEYXRhIiwKICAgICAgLy8gZGF0YXNldF9uYW1lOiAiRnJ1aXRodXQgdjIiLAogICAgICBxdWVzdGlvbnM6IFtdLAogICAgICBjdXJyZW50X3VuYW5zd2VyZWRfcXVlc3Rpb25fc2VsZWN0ZWQ6IG51bGwsCiAgICAgIHNob3dfcXVlc3Rpb25fbW9kYWw6IGZhbHNlLAogICAgICBjdXJyZW50X3RhZ3M6IG51bGwsCiAgICAgIHBocmFzZV9zZWxlY3RlZDogW10sCiAgICAgIGNvcnJlY3RlZF9zdWdnZXN0aW9uczogW10sCiAgICAgIHdyb25nX3BocmFzZXM6IG51bGwsCiAgICAgIHNob3dfY2hhbmdlX3N1Z2dlc3Rpb25zOiBmYWxzZSwKICAgICAgY3VycnJlbnRfc3VnZ2VzdGlvbl90b19jaGFuZ2U6IG51bGwsCiAgICAgIHNlYXJjaF9kYXRhOiBbXSwKICAgICAgc2VhcmNoX3Jlc3VsdDogW10sCiAgICAgIGNhbGxhcGk6IHRydWUsCiAgICAgIGF0dHJpYnV0ZV9zdmc6ICc8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgd2lkdGg9IjEwLjQiIGhlaWdodD0iMTAuOCIgdmlld0JveD0iMCAwIDEyNDAuMDAwMDAwIDEyODAuMDAwMDAwIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJ4TWlkWU1pZCBtZWV0IiBpZD0ic3ZnY29udGVudCIgb3ZlcmZsb3c9InZpc2libGUiIHg9IjYzMi4zOTk5OTk5OTk5OTk5IiB5PSI2NTIuOCI+PG1ldGFkYXRhPkNyZWF0ZWQgYnkgcG90cmFjZSAxLjE1LCB3cml0dGVuIGJ5IFBldGVyIFNlbGluZ2VyIDIwMDEtMjAxNzwvbWV0YWRhdGE+PGcgY2xhc3M9ImxheWVyIiBzdHlsZT0icG9pbnRlci1ldmVudHM6YWxsIj48dGl0bGUgc3R5bGU9InBvaW50ZXItZXZlbnRzOmluaGVyaXQiPkxheWVyIDE8L3RpdGxlPjxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTI4MCkgc2NhbGUoMC4xIC0wLjEpIiBmaWxsPSIjZTkxZTYzIiBzdHJva2U9Im5vbmUiIGlkPSJzdmdfMSIgZmlsbC1vcGFjaXR5PSIxIj48cGF0aCBkPSJNNTczNiwxMjEzMkM1NTUwLDExNzY1IDQ5MzMsMTA1NTQgNDM2NSw5NDQwQzM3OTcsODMyNiAyOTA4LDY1ODMgMjM5MCw1NTY1QzE4NzEsNDU0OCAxMTIxLDMwNzYgNzIzLDIyOTZMMCw4NzdMMCw3NzlDMCw2OTUgMiw2ODEgMTgsNjc2QzI3LDY3MyAyNTMsNjIyIDUyMCw1NjFDNzg3LDUwMSAxMzgzLDM2NSAxODQ1LDI2MEMyMzA3LDE1NSAyNzUzLDUzIDI4MzcsMzRDMjkzNiwxMiAzMDE1LDAgMzA2MiwwTDMxMzUsMEwzNjY0LDEyNjVMNDE5MywyNTMwTDYxMzUsMjUzMEw4MDc3LDI1MzBMODYxNSwxNDA4Qzg5MTEsNzkwIDkxODQsMjIxIDkyMjEsMTQzTDkyODksMkw5MzI3LDEwQzkzNjEsMTggMTE1MDgsNDg1IDEyMTUwLDYyNEwxMjM5NSw2NzdMMTIzOTgsNzc2TDEyNDAxLDg3NkwxMjEwMiwxNDYwQzExOTM3LDE3ODIgMTE1MjksMjU4MCAxMTE5NSwzMjM1QzEwODYxLDM4OTAgMTAzMjUsNDkzOCAxMDAwNSw1NTY1QzkyMjIsNzA5NyA3ODg5LDk3MDcgNzE3MywxMTExMEM2ODUxLDExNzQwIDY1MjUsMTIzNzggNjQ0OCwxMjUyOEw2MzA5LDEyODAwTDYxOTIsMTI4MDBMNjA3NSwxMjc5OUw1NzM2LDEyMTMyek02NTMwLDYxMjBDNjc0Niw1NjQ0IDY5MjUsNTI0OSA2OTI3LDUyNDNDNjkzMSw1MjMzIDY3NjcsNTIzMCA2MTI2LDUyMzBDNTY4Myw1MjMwIDUzMjAsNTIzNCA1MzIwLDUyMzhDNTMyMCw1MjQyIDUzNDMsNTI5NyA1MzcxLDUzNjBDNTM5OSw1NDIzIDU1NzIsNTgxNyA1NzU3LDYyMzVDNTk0MSw2NjUzIDYwOTcsNzAwNCA2MTAyLDcwMTRDNjExMiw3MDMzIDYxMTMsNzAzMiA2MTI1LDcwMDlDNjEzMiw2OTk2IDYzMTQsNjU5NiA2NTMwLDYxMjB6IiBpZD0ic3ZnXzIiIGZpbGw9IiNjY2NjY2MiPjwvcGF0aD48L2c+PC9nPjwvc3ZnPicsCiAgICAgIHZhbHVlX3N2ZzogJzxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMTAuNCIgaGVpZ2h0PSIxMC44IiB2aWV3Qm94PSIwIDAgMTI4MC4wMDAwMDAgMTI4MC4wMDAwMDAiIHByZXNlcnZlQXNwZWN0UmF0aW89InhNaWRZTWlkIG1lZXQiIGlkPSJzdmdjb250ZW50IiBvdmVyZmxvdz0idmlzaWJsZSIgeD0iNjUyLjgiIHk9IjY1Mi44Ij48bWV0YWRhdGE+Q3JlYXRlZCBieSBwb3RyYWNlIDEuMTUsIHdyaXR0ZW4gYnkgUGV0ZXIgU2VsaW5nZXIgMjAwMS0yMDE3PC9tZXRhZGF0YT48ZyBjbGFzcz0ibGF5ZXIiIHN0eWxlPSJwb2ludGVyLWV2ZW50czphbGwiPjx0aXRsZSBzdHlsZT0icG9pbnRlci1ldmVudHM6aW5oZXJpdCI+TGF5ZXIgMTwvdGl0bGU+PGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAxMjgwKSBzY2FsZSgwLjEgLTAuMSkiIGZpbGw9IiNlOTFlNjMiIHN0cm9rZT0ibm9uZSIgaWQ9InN2Z18xIiBmaWxsLW9wYWNpdHk9IjEiPjxwYXRoIGQ9Ik0xMDc1LDEyNzkzQzk0MSwxMjc3NiA3NjUsMTI3MjAgNjUxLDEyNjU5QzMyNiwxMjQ4NCAxMTAsMTIxOTcgMjQsMTE4MjVDNiwxMTc0OCA1LDExNjU4IDUsOTc0NUM1LDc4MzIgNiw3NzQyIDI0LDc2NjVDODIsNzQxMyAxODYsNzIyMyAzNjAsNzA1MEM1NDgsNjg2MyA3NjMsNjc1MiAxMDI4LDY3MDZDMTExMCw2NjkyIDEzMjksNjY5MCAzMDU1LDY2OTBDNTE2OSw2NjkwIDUwNjUsNjY4NyA1MjU1LDY3NDdDNTY5NCw2ODg2IDYwMTYsNzI1OCA2MDk0LDc3MThDNjEwOCw3Nzk5IDYxMTAsODAzMCA2MTEwLDk3NDVDNjExMCwxMTQ3MSA2MTA4LDExNjkwIDYwOTQsMTE3NzJDNjA0OCwxMjAzNyA1OTM3LDEyMjU0IDU3NTAsMTI0NDBDNTU4MiwxMjYwOSA1NDEyLDEyNzA1IDUxNjAsMTI3NzJMNTA3NSwxMjc5NUwzMDkwLDEyNzk2QzE5OTgsMTI3OTcgMTA5MiwxMjc5NSAxMDc1LDEyNzkzeiIgaWQ9InN2Z18yIiBmaWxsPSIjY2NjY2NjIj48L3BhdGg+PHBhdGggZD0iTTc3MzUsMTI3ODVDNzM0MiwxMjcyNCA3MDAzLDEyNDgxIDY4MjksMTIxMzhDNjc1OCwxMTk5NiA2NzIxLDExODc4IDY3MDAsMTE3MTdDNjY5NCwxMTY2NiA2NjkwLDEwOTc3IDY2OTAsOTc0NUM2NjkwLDg1MTMgNjY5NCw3ODI0IDY3MDAsNzc3M0M2NzcxLDcyMzUgNzE0Nyw2ODI3IDc2ODAsNjcxM0M3NzYxLDY2OTYgNzg2OCw2Njk1IDk3NDUsNjY5NUMxMTYyMiw2Njk1IDExNzI5LDY2OTYgMTE4MTAsNjcxM0MxMjA2MCw2NzY3IDEyMjcyLDY4ODEgMTI0NDQsNzA1NEMxMjYyOSw3MjQyIDEyNzQ0LDc0NzIgMTI3ODUsNzc0MEMxMjgwNyw3ODgyIDEyODA3LDExNjA4IDEyNzg1LDExNzUwQzEyNzU2LDExOTQ0IDEyNzAwLDEyMDg5IDEyNTkzLDEyMjUyQzEyNDM4LDEyNDkwIDEyMTg3LDEyNjc1IDExOTE5LDEyNzUwQzExNzM2LDEyODAxIDExNzk3LDEyODAwIDk3MzUsMTI3OTlDODI0NiwxMjc5OCA3Nzk3LDEyNzk1IDc3MzUsMTI3ODV6IiBpZD0ic3ZnXzMiIGZpbGw9IiNjY2NjY2MiPjwvcGF0aD48cGF0aCBkPSJNMTA3MCw2MDk5Qzc5OSw2MDY0IDU0OCw1OTQwIDM1Niw1NzQ2QzE3MSw1NTU4IDU2LDUzMjggMTUsNTA2MEMtNyw0OTE4IC03LDExOTIgMTUsMTA1MEM0NCw4NTYgMTAwLDcxMSAyMDcsNTQ4QzM5NywyNTcgNjk0LDY5IDEwNTAsMTVDMTE5MiwtNyA0OTE4LC03IDUwNjAsMTVDNTE5NiwzNiA1MjkwLDY0IDU0MDcsMTIwQzU3NTgsMjg3IDU5OTIsNTgyIDYwODYsOTgwQzYxMDMsMTA1MCA2MTA0LDExNzMgNjEwOCwyOTkwQzYxMTEsNTAwMiA2MTExLDUwMjcgNjA2OSw1MTkwQzU5NjksNTU4NCA1NjY3LDU5MTEgNTI4MCw2MDQzQzUwODYsNjEwOSA1MjYwLDYxMDQgMzA5NSw2MTA2QzIwMTcsNjEwNyAxMTA2LDYxMDQgMTA3MCw2MDk5eiIgaWQ9InN2Z180IiBmaWxsPSIjY2NjY2NjIj48L3BhdGg+PHBhdGggZD0iTTc3NjAsNjA5OUM3MzEwLDYwNDEgNjkyNiw1NzM1IDY3NjcsNTMwOEM2NzM3LDUyMzAgNjcxNCw1MTI5IDY3MDAsNTAyN0M2Njk0LDQ5NzYgNjY5MCw0Mjg3IDY2OTAsMzA1NUM2NjkwLDE4MjMgNjY5NCwxMTM0IDY3MDAsMTA4M0M2NzM4LDc5NCA2ODU1LDU1MyA3MDU0LDM1NkM3MjQyLDE3MSA3NDcyLDU2IDc3NDAsMTVDNzg4MiwtNyAxMTYwOCwtNyAxMTc1MCwxNUMxMjEwNiw2OSAxMjQwMywyNTcgMTI1OTMsNTQ4QzEyNzAwLDcxMSAxMjc1Niw4NTYgMTI3ODUsMTA1MEMxMjgwNywxMTkyIDEyODA3LDQ5MTggMTI3ODUsNTA2MEMxMjc2NCw1MTk2IDEyNzM2LDUyOTAgMTI2ODAsNTQwN0MxMjUxMyw1NzU4IDEyMjE4LDU5OTIgMTE4MjAsNjA4NkMxMTc0OSw2MTAzIDExNjMwLDYxMDQgOTc4NSw2MTA2Qzg3MDcsNjEwNyA3Nzk2LDYxMDQgNzc2MCw2MDk5eiIgaWQ9InN2Z181IiBmaWxsPSIjY2NjY2NjIj48L3BhdGg+PC9nPjwvZz48L3N2Zz4nLAogICAgICBtZXRyaWNzX3N2ZzogJzxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMTAuNCIgaGVpZ2h0PSIxMC40IiB2aWV3Qm94PSIwIDAgMTI4MC4wMDAwMDAgMTI4MC4wMDAwMDAiIHByZXNlcnZlQXNwZWN0UmF0aW89InhNaWRZTWlkIG1lZXQiIGlkPSJzdmdjb250ZW50IiBvdmVyZmxvdz0idmlzaWJsZSIgeD0iMTI4MCIgeT0iMTI4MCI+PG1ldGFkYXRhPkNyZWF0ZWQgYnkgcG90cmFjZSAxLjE1LCB3cml0dGVuIGJ5IFBldGVyIFNlbGluZ2VyIDIwMDEtMjAxNzwvbWV0YWRhdGE+PGcgY2xhc3M9ImxheWVyIiBzdHlsZT0icG9pbnRlci1ldmVudHM6YWxsIj48dGl0bGUgc3R5bGU9InBvaW50ZXItZXZlbnRzOmluaGVyaXQiPkxheWVyIDE8L3RpdGxlPjxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTI4MCkgc2NhbGUoMC4xIC0wLjEpIiBmaWxsPSIjZTkxZTYzIiBzdHJva2U9Im5vbmUiIGlkPSJzdmdfMSIgZmlsbC1vcGFjaXR5PSIxIj48cGF0aCBkPSJNNTE4NiwxMjA4M0M1MTgzLDEyMDczIDUxMDgsMTE3MDUgNTAyMCwxMTI2NUM0NjQ5LDk0MTggNDU0MCw4ODc2IDQ1NDAsODg3M0M0NTQwLDg4NzEgNDAyNyw4ODcwIDM0MDAsODg3MEwyMjYwLDg4NzBMMjI2MCw4MjcxQzIyNjAsNzgwNCAyMjYzLDc2NzAgMjI3Myw3NjYzQzIyNzksNzY1OCAyMzMxLDc2NDEgMjM4Nyw3NjI3TDI0ODksNzYwMEwzMzg0LDc2MDBDNDA5NCw3NjAwIDQyODAsNzU5NyA0MjgwLDc1ODhDNDI3OSw3NTgxIDQxNjgsNzAyNCA0MDMxLDYzNTBMMzc4NCw1MTI1TDMxMTQsNTEyMEwyNDQ1LDUxMTRMMjM3Niw1MDg3QzIzMzksNTA3MiAyMjk5LDUwNTUgMjI4OSw1MDQ5QzIyNzEsNTA0MCAyMjcwLDUwMTggMjI3MCw0NDQwTDIyNzAsMzg0MEwyODk1LDM4NDBDMzM4OCwzODQwIDM1MjAsMzgzNyAzNTIwLDM4MjhDMzUyMCwzODE1IDMzNzIsMzA3OSAzMDYxLDE1NTBDMjk2MywxMDY5IDI4ODYsNjcyIDI4OTAsNjY3QzI4OTMsNjYzIDMxNjYsNjYxIDM0OTYsNjYyTDQwOTUsNjY1TDQxNTIsODA1QzQyMjAsOTcyIDQyMDUsOTEyIDQzMzUsMTU1NUM0NzAxLDMzNTQgNDc4MSwzNzUwIDQ3OTEsMzc5M0w0ODAyLDM4NDBMNTg2NiwzODQwTDY5MzAsMzg0MEw2OTI1LDM4MThDNjkyMiwzODA1IDY3OTEsMzE2MiA2NjM1LDIzODdMNjM1MCw5ODBMNjM1MCw4MjBMNjM1MCw2NjBMNjk1NSw2NjBDNzI4OCw2NjAgNzU2MCw2NjIgNzU2MCw2NjRDNzU2MCw2NjggNzk2MywyNjI4IDgxMjUsMzQxNUM4MTcyLDM2NDAgODIxMCwzODI4IDgyMTAsMzgzMkM4MjEwLDM4MzYgODcyOSwzODQwIDkzNjQsMzg0MEwxMDUxOCwzODQwTDEwNTI1LDQ0MjNDMTA1MjksNDc0MyAxMDUzMSw1MDE0IDEwNTI5LDUwMjVDMTA1MjYsNTA0MCAxMDUwMCw1MDU0IDEwNDI1LDUwODJMMTAzMjUsNTExOUw5NDAzLDUxMjBDODU2Miw1MTIwIDg0ODAsNTEyMSA4NDgwLDUxMzZDODQ4MCw1MTUxIDg5NzUsNzU0NSA4OTg2LDc1ODNDODk5MSw3NTk5IDkwMzEsNzYwMCA5NjQ4LDc2MDBMMTAzMDUsNzYwMEwxMDQxMyw3NjI5QzEwNDczLDc2NDUgMTA1MjMsNzY2MCAxMDUyNiw3NjYyQzEwNTI4LDc2NjUgMTA1MzMsNzkzNyAxMDUzNyw4MjY4TDEwNTQzLDg4NzBMOTg5Nyw4ODcwQzk1NDEsODg3MCA5MjUwLDg4NzIgOTI1MCw4ODc1QzkyNTAsODg3OCA5MzU4LDk0MTEgOTQ5MSwxMDA1OEM5NjIzLDEwNzA1IDk3NzEsMTE0MzAgOTgxOSwxMTY2OEw5OTA4LDEyMTAwTDkyOTQsMTIxMDBMODY4MSwxMjEwMEw4NjY2LDEyMDczQzg2NTgsMTIwNTcgODYzMSwxMTk5MyA4NjA2LDExOTMwQzg1NTUsMTE4MDQgODU3OCwxMTkxMSA4MTc0LDk5MjVDODA3OCw5NDUyIDc5OTEsOTAyMyA3OTgwLDg5NzNDNzk2OSw4OTIyIDc5NjAsODg3OCA3OTYwLDg4NzVDNzk2MCw4ODcyIDc0NzksODg3MCA2ODkwLDg4NzBDNjI5OCw4ODcwIDU4MjAsODg3NCA1ODIwLDg4NzlDNTgyMCw4ODg3IDYyNjMsMTEwODUgNjM2NSwxMTU4M0M2NDA3LDExNzg0IDY0MTAsMTE4MTMgNjQxMCwxMTk1MEw2NDEwLDEyMTAwTDU4MDEsMTIxMDBDNTIyOSwxMjEwMCA1MTkxLDEyMDk5IDUxODYsMTIwODN6TTc3MDAsNzU5NUM3NzAwLDc1OTIgNzU4NSw3MDM2IDc0NDUsNjM1OUM3MzA1LDU2ODMgNzE5MCw1MTI3IDcxOTAsNTEyNUM3MTkwLDUxMjIgNjcxMSw1MTIwIDYxMjUsNTEyMEM1NTM5LDUxMjAgNTA2MCw1MTIzIDUwNjAsNTEyNkM1MDYwLDUxMjkgNTE3Myw1Njg1IDUzMTAsNjM2MkM1NDQ4LDcwMzggNTU2MCw3NTk0IDU1NjAsNzU5NkM1NTYwLDc1OTggNjA0Miw3NjAwIDY2MzAsNzYwMEM3MjE5LDc2MDAgNzcwMCw3NTk4IDc3MDAsNzU5NXoiIGlkPSJzdmdfMiIgZmlsbD0iI2NjY2NjYyI+PC9wYXRoPjwvZz48L2c+PC9zdmc+JywKICAgICAga2V5d29yZF9zdmc6ICc8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgd2lkdGg9IjEwLjQiIGhlaWdodD0iMTAuNCIgdmlld0JveD0iMCAwIDExNjMuMDAwMDAwIDEyODAuMDAwMDAwIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJ4TWlkWU1pZCBtZWV0IiBpZD0ic3ZnY29udGVudCIgb3ZlcmZsb3c9InZpc2libGUiIHg9IjExNjMiIHk9IjEyODAiPjxtZXRhZGF0YT5DcmVhdGVkIGJ5IHBvdHJhY2UgMS4xNSwgd3JpdHRlbiBieSBQZXRlciBTZWxpbmdlciAyMDAxLTIwMTc8L21ldGFkYXRhPjxnIGNsYXNzPSJsYXllciIgc3R5bGU9InBvaW50ZXItZXZlbnRzOmFsbCI+PHRpdGxlIHN0eWxlPSJwb2ludGVyLWV2ZW50czppbmhlcml0Ij5MYXllciAxPC90aXRsZT48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDEyODApIHNjYWxlKDAuMSAtMC4xKSIgZmlsbD0iI2U5MWU2MyIgc3Ryb2tlPSJub25lIiBpZD0ic3ZnXzEiIGZpbGwtb3BhY2l0eT0iMSI+PHBhdGggZD0iTTUyOTUsMTI3OTRDMzEzMSwxMjcyNCAxNDM4LDEyMzkzIDYwMCwxMTg3NEMzMDEsMTE2OTAgMTAzLDExNDYzIDQ1LDExMjM5QzI2LDExMTY5IDYsMTA5NjYgNywxMDg1NUM3LDEwNzMyIDI1LDEwNzA2IDMyNSwxMDM5NkM0NjksMTAyNDcgMTUyOCw5MTUzIDI2NzksNzk2NUw0NzcwLDU4MDVMNDc3MCwzMDg1QzQ3NzAsMTI2MyA0Nzc0LDM0NCA0NzgwLDMwMUM0ODA2LDE0NyA0OTEyLDM3IDUwNjUsOUM1MDk3LDMgNTM4NywxIDU4MDEsMkw2NDg1LDVMNjU1MiwzOEM2NjMyLDc3IDY2OTAsMTM5IDY3MjIsMjE5TDY3NDUsMjc1TDY3NTAsMzAyNkw2NzU1LDU3NzZMODI1MSw3MzAxQzExNjk0LDEwODExIDExNTQ5LDEwNjYxIDExNTc3LDEwNzE3QzExNTkxLDEwNzQ2IDExNjA5LDEwNzcwIDExNjE2LDEwNzcwQzExNjI4LDEwNzcwIDExNjMwLDEwODIwIDExNjMwLDExMDYwTDExNjMwLDExMzUwTDExNTk4LDExMzUwQzExNTY4LDExMzUwIDExNTYyLDExMzU1IDExNTMyLDExNDE0QzExNDI5LDExNjEzIDExMTc3LDExODIyIDEwODMxLDExOTk1Qzk5ODUsMTI0MTggODU5NywxMjY4NCA2NzM1LDEyNzgwQzY1NDAsMTI3OTEgNTQ5NCwxMjgwMCA1Mjk1LDEyNzk0eiIgaWQ9InN2Z18yIiBmaWxsPSIjY2NjY2NjIj48L3BhdGg+PC9nPjwvZz48L3N2Zz4nLAogICAgICBuZXdfZW50aXR5X21hcHBpbmdfZm9yX2N1cnJlbnRfcXVlc3Rpb246IG51bGwsCiAgICAgIGVudGl0eV90eXBlX3ByZWZpeF9tYXBwaW5nOiB7CiAgICAgICAga2V5d29yZDogJ2t3JywKICAgICAgICBmdW5jdGlvbjogJ2Z1bmN0aW9uJwogICAgICB9LAogICAgICBlbnRpdHlfc3VnZ2VzdGlvbl9tYXBwaW5nX25ldzogW10sCiAgICAgIG1hcHBlZF9waHJhc2U6ICcnLAogICAgICBtYXBwZWRfcGhyYXNlX2luZGV4OiBbXSwKICAgICAgY3VycmVudF9zdHJpbmdfc3RhcnRfaW5kZXg6IG51bGwsCiAgICAgIGN1cnJlbnRfc3RyaW5nX2VuZF9pbmRleDogbnVsbAogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIC8vIHRoaXMucXVlc3Rpb25zID0gWwogICAgLy8gICB7CiAgICAvLyAgICAgc2VhcmNoX3N0cmluZzogIlNob3cgbWUgdG9wIDEwIGJlc3QgcGVyZm9ybWluZyBjYXRlZ29yeSBieSBzYWxlcyIsCiAgICAvLyAgICAgc3VnZ2VzdGlvbnM6IFsKICAgIC8vICAgICAgIHsKICAgIC8vICAgICAgICAga2V5OiAiSzNoLTBIRUIwS1dBV2tjbEdGdWgiLAogICAgLy8gICAgICAgICB2YWx1ZTogInRvcCBOIiwKICAgIC8vICAgICAgICAgdHlwZTogImtleXdvcmQiLAogICAgLy8gICAgICAgICBvcGVyYXRpb246IG51bGwsCiAgICAvLyAgICAgICAgIGRhdGFzZXQ6IG51bGwsCiAgICAvLyAgICAgICAgIGNvbHVtbjogbnVsbCwKICAgIC8vICAgICAgICAgb3BlcmF0aW9uX29uOiBbXSwKICAgIC8vICAgICAgICAgbWV0YWRhdGE6ICd7ImtleXdvcmRfdHlwZSI6ICJnZW5lcmFsIn0nLAogICAgLy8gICAgICAgICBrZXl3b3JkX3R5cGU6ICJnZW5lcmFsIiwKICAgIC8vICAgICAgICAgY29tcGFueV9pZDogImNlbnNlIiwKICAgIC8vICAgICAgICAgaW5wdXQ6IDEwLAogICAgLy8gICAgICAgfSwKICAgIC8vICAgICAgIHsKICAgIC8vICAgICAgICAga2V5OiAiTUhoLTBIRUIwS1dBV2tjbEdGdWoiLAogICAgLy8gICAgICAgICB2YWx1ZTogImJldHdlZW4gLi4uIGFuZCAuLi4iLAogICAgLy8gICAgICAgICB0eXBlOiAia2V5d29yZCIsCiAgICAvLyAgICAgICAgIG9wZXJhdGlvbjogbnVsbCwKICAgIC8vICAgICAgICAgZGF0YXNldDogbnVsbCwKICAgIC8vICAgICAgICAgY29sdW1uOiBudWxsLAogICAgLy8gICAgICAgICBvcGVyYXRpb25fb246IFtdLAogICAgLy8gICAgICAgICBtZXRhZGF0YTogJ3sia2V5d29yZF90eXBlIjogImNvbXBhcmF0aXZlIn0nLAogICAgLy8gICAgICAgICBrZXl3b3JkX3R5cGU6ICJjb21wYXJhdGl2ZSIsCiAgICAvLyAgICAgICAgIGNvbXBhbnlfaWQ6ICJjZW5zZSIsCiAgICAvLyAgICAgICB9LAogICAgLy8gICAgICAgewogICAgLy8gICAgICAgICBrZXk6ICJMbmgtMEhFQjBLV0FXa2NsR0Z1aiIsCiAgICAvLyAgICAgICAgIHZhbHVlOiAiYnkiLAogICAgLy8gICAgICAgICB0eXBlOiAia2V5d29yZCIsCiAgICAvLyAgICAgICAgIG9wZXJhdGlvbjogbnVsbCwKICAgIC8vICAgICAgICAgZGF0YXNldDogbnVsbCwKICAgIC8vICAgICAgICAgY29sdW1uOiBudWxsLAogICAgLy8gICAgICAgICBvcGVyYXRpb25fb246IFtdLAogICAgLy8gICAgICAgICBtZXRhZGF0YTogJ3sia2V5d29yZF90eXBlIjogImdlbmVyYWwifScsCiAgICAvLyAgICAgICAgIGtleXdvcmRfdHlwZTogImdlbmVyYWwiLAogICAgLy8gICAgICAgICBjb21wYW55X2lkOiAiY2Vuc2UiLAogICAgLy8gICAgICAgfSwKICAgIC8vICAgICAgIHsKICAgIC8vICAgICAgICAga2V5OiAiWUZBVXQzSUJqUFJzWnlfUngyYzMiLAogICAgLy8gICAgICAgICB2YWx1ZTogIkpPTUFSIEFVVE8gU0FMRVMgSU5DLiIsCiAgICAvLyAgICAgICAgIHR5cGU6ICJ2YWx1ZSIsCiAgICAvLyAgICAgICAgIG9wZXJhdGlvbjogImZpbHRlciIsCiAgICAvLyAgICAgICAgIGRhdGFzZXQ6ICJIZWFsdGhjYXJlIERhdGEiLAogICAgLy8gICAgICAgICBjb2x1bW46ICJQb2xpY3kgSG9sZGVyIiwKICAgIC8vICAgICAgICAgb3BlcmF0aW9uX29uOiBbXSwKICAgIC8vICAgICAgICAgbWV0YWRhdGE6ICIiLAogICAgLy8gICAgICAgICBrZXl3b3JkX3R5cGU6IG51bGwsCiAgICAvLyAgICAgICAgIGNvbXBhbnlfaWQ6ICJnb2d5YjQ1MCIsCiAgICAvLyAgICAgICB9LAogICAgLy8gICAgIF0sCiAgICAvLyAgIH0sCiAgICAvLyBdOwogICAgLy8gbGV0IHggPSAKICAgIC8vICAgICAgICAgICBbCiAgICAvLyAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICJzZWFyY2hfc3RyaW5nIjogIlNob3cgbWUgdG9wIDEwIGJlc3QgUHJvdmlkZXIgYnkgT3V0c3RhbmRpbmcgQW1vdW50IiwKICAgIC8vICAgICAgICAgICAgICAgInN1Z2dlc3Rpb25zIjogWwogICAgLy8gICAgICAgICAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgICAgICAgICJrZXkiOiAiSzNoLTBIRUIwS1dBV2tjbEdGdWgiLAogICAgLy8gICAgICAgICAgICAgICAgICAgInZhbHVlIjogInRvcCBOIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImtleXdvcmQiLAogICAgLy8gICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiZGF0YXNldCI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29sdW1uIjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb25fb24iOiBbXSwKICAgIC8vICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICJ7XCJrZXl3b3JkX3R5cGVcIjogXCJnZW5lcmFsXCJ9IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJrZXl3b3JkX3R5cGUiOiAiZ2VuZXJhbCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJjZW5zZSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiaW5wdXQiOiAxMAogICAgLy8gICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgICAgICAgImtleSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiYmVzdCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAidmFsdWVfdG9fZGlzcGxheSI6ICJiZXN0IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJjb2x1bW4iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgImNvbXBhbnlfaWQiOiAiZ29neWI0NTAiLAogICAgLy8gICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiAiIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImlucHV0IgogICAgLy8gICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgICAgICAgImtleSI6ICJDUGRJS25RQnRiVE44OU9sb3FwWCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiUHJvdmlkZXIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXR0cmlidXRlIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb24iOiAiZ3JvdXBieSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiZGF0YXNldCI6ICJIZWFsdGhjYXJlIERhdGEiLAogICAgLy8gICAgICAgICAgICAgICAgICAgImNvbHVtbiI6ICJQcm92aWRlciIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAib3BlcmF0aW9uX29uIjogW10sCiAgICAvLyAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiAiIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJrZXl3b3JkX3R5cGUiOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgImNvbXBhbnlfaWQiOiAiZ29neWI0NTAiCiAgICAvLyAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAia2V5IjogIkxuaC0wSEVCMEtXQVdrY2xHRnVqIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJieSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJrZXl3b3JkIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb24iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgImRhdGFzZXQiOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgImNvbHVtbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAib3BlcmF0aW9uX29uIjogW10sCiAgICAvLyAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiAie1wia2V5d29yZF90eXBlXCI6IFwiZ2VuZXJhbFwifSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAia2V5d29yZF90eXBlIjogImdlbmVyYWwiLAogICAgLy8gICAgICAgICAgICAgICAgICAgImNvbXBhbnlfaWQiOiAiY2Vuc2UiCiAgICAvLyAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAia2V5IjogIkV2ZElLblFCdGJUTjg5T2xvcXFhIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJPdXRzdGFuZGluZyBBbW91bnQiLAogICAgLy8gICAgICAgICAgICAgICAgICAgInR5cGUiOiAibWV0cmljIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb24iOiAiU1VNIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJkYXRhc2V0IjogIkhlYWx0aGNhcmUgRGF0YSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29sdW1uIjogIk91dFN0YW5kaW5nIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb25fb24iOiBbXSwKICAgIC8vICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJnb2d5YjQ1MCIKICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgICAgIF0sCiAgICAvLyAgICAgICAgICAgICAgICJlbnRpdHlfc3VnZ2VzdGlvbl9tYXAiOiBbCiAgICAvLyAgICAgICAgICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgICAgICAgImVudGl0eSI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImVudGl0eSI6ICJrd19nZW5lcmFsIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogInRvcCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDgsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJlbmQiOiAxMQogICAgLy8gICAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICAgICJzdWdnZXN0aW9uIjogewogICAgLy8gICAgICAgICAgICAgICAgICAgICAia2V5IjogIkszaC0wSEVCMEtXQVdrY2xHRnVoIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogInRvcCBOIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAia2V5d29yZCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb24iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZGF0YXNldCI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb2x1bW4iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAib3BlcmF0aW9uX29uIjogW10sCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICJ7XCJrZXl3b3JkX3R5cGVcIjogXCJnZW5lcmFsXCJ9IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6ICJnZW5lcmFsIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImNvbXBhbnlfaWQiOiAiY2Vuc2UiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiaW5wdXQiOiAxMAogICAgLy8gICAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgICAgICAgImVudGl0eSI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImVudGl0eSI6ICJpbnB1dCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIxMCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDEyLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW5kIjogMTQKICAgIC8vICAgICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgICAic3VnZ2VzdGlvbiI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIxMCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZV90b19kaXNwbGF5IjogIjEwIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImNvbHVtbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb21wYW55X2lkIjogImdvZ3liNDUwIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnB1dCIKICAgIC8vICAgICAgICAgICAgICAgICAgIH0KICAgIC8vICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgICAgICAgICJlbnRpdHkiOiB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJlbnRpdHkiOiAiaW5wdXQiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiYmVzdCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDE1LAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW5kIjogMTkKICAgIC8vICAgICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgICAic3VnZ2VzdGlvbiI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJiZXN0IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInZhbHVlX3RvX2Rpc3BsYXkiOiAiYmVzdCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb2x1bW4iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJnb2d5YjQ1MCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJrZXl3b3JkX3R5cGUiOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiAiIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW5wdXQiCiAgICAvLyAgICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAiZW50aXR5IjogewogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW50aXR5IjogImF0dHJpYnV0ZSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJwcm92aWRlciIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDIwLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW5kIjogMjgKICAgIC8vICAgICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgICAic3VnZ2VzdGlvbiI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleSI6ICJDUGRJS25RQnRiVE44OU9sb3FwWCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJQcm92aWRlciIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImF0dHJpYnV0ZSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb24iOiAiZ3JvdXBieSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJkYXRhc2V0IjogIkhlYWx0aGNhcmUgRGF0YSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb2x1bW4iOiAiUHJvdmlkZXIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAib3BlcmF0aW9uX29uIjogW10sCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAia2V5d29yZF90eXBlIjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImNvbXBhbnlfaWQiOiAiZ29neWI0NTAiCiAgICAvLyAgICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAiZW50aXR5IjogewogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW50aXR5IjogImt3X2dlbmVyYWwiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiYnkiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAic3RhcnQiOiAyOSwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImVuZCI6IDMxCiAgICAvLyAgICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgICAgInN1Z2dlc3Rpb24iOiB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJrZXkiOiAiTG5oLTBIRUIwS1dBV2tjbEdGdWoiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiYnkiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJrZXl3b3JkIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJkYXRhc2V0IjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImNvbHVtbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb25fb24iOiBbXSwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIm1ldGFkYXRhIjogIntcImtleXdvcmRfdHlwZVwiOiBcImdlbmVyYWxcIn0iLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAia2V5d29yZF90eXBlIjogImdlbmVyYWwiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJjZW5zZSIKICAgIC8vICAgICAgICAgICAgICAgICAgIH0KICAgIC8vICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgICAgICAgICJlbnRpdHkiOiB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJlbnRpdHkiOiAibWVhc3VyZSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJvdXRzdGFuZGluZyBhbW91bnQiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAic3RhcnQiOiAzMiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImVuZCI6IDUwCiAgICAvLyAgICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgICAgInN1Z2dlc3Rpb24iOiB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJrZXkiOiAiRXZkSUtuUUJ0YlROODlPbG9xcWEiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiT3V0c3RhbmRpbmcgQW1vdW50IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibWV0cmljIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbiI6ICJTVU0iLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZGF0YXNldCI6ICJIZWFsdGhjYXJlIERhdGEiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiY29sdW1uIjogIk91dFN0YW5kaW5nIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbl9vbiI6IFtdLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiAiIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb21wYW55X2lkIjogImdvZ3liNDUwIgogICAgLy8gICAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgICAgICAgICAgICAgIH0KICAgIC8vICAgICAgICAgICAgICAgXSwKICAgIC8vICAgICAgICAgICAgICAgIm9yaWdpbmFsX3N0cmluZyI6ICJTaG93IG1lIHRvcCAxMCBiZXN0IFByb3ZpZGVyIGJ5IE91dHN0YW5kaW5nIEFtb3VudCIKICAgIC8vICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICJzZWFyY2hfc3RyaW5nIjogIlNob3cgbWUgdG9wIDEwIGJlc3QgUHJvdmlkZXIgYnkgc2FsZXMiLAogICAgLy8gICAgICAgICAgICAgICAic3VnZ2VzdGlvbnMiOiBbCiAgICAvLyAgICAgICAgICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgICAgICAgImtleSI6ICJLM2gtMEhFQjBLV0FXa2NsR0Z1aCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAidG9wIE4iLAogICAgLy8gICAgICAgICAgICAgICAgICAgInR5cGUiOiAia2V5d29yZCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAib3BlcmF0aW9uIjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICJkYXRhc2V0IjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICJjb2x1bW4iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbl9vbiI6IFtdLAogICAgLy8gICAgICAgICAgICAgICAgICAgIm1ldGFkYXRhIjogIntcImtleXdvcmRfdHlwZVwiOiBcImdlbmVyYWxcIn0iLAogICAgLy8gICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6ICJnZW5lcmFsIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJjb21wYW55X2lkIjogImNlbnNlIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJpbnB1dCI6IDEwCiAgICAvLyAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAia2V5IjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJiZXN0IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ2YWx1ZV90b19kaXNwbGF5IjogImJlc3QiLAogICAgLy8gICAgICAgICAgICAgICAgICAgImNvbHVtbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJnb2d5YjQ1MCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAia2V5d29yZF90eXBlIjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW5wdXQiCiAgICAvLyAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAia2V5IjogIkNQZElLblFCdGJUTjg5T2xvcXBYIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJQcm92aWRlciIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJhdHRyaWJ1dGUiLAogICAgLy8gICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbiI6ICJncm91cGJ5IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJkYXRhc2V0IjogIkhlYWx0aGNhcmUgRGF0YSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29sdW1uIjogIlByb3ZpZGVyIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb25fb24iOiBbXSwKICAgIC8vICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJnb2d5YjQ1MCIKICAgIC8vICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgICAgICAgICJrZXkiOiAiTG5oLTBIRUIwS1dBV2tjbEdGdWoiLAogICAgLy8gICAgICAgICAgICAgICAgICAgInZhbHVlIjogImJ5IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImtleXdvcmQiLAogICAgLy8gICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiZGF0YXNldCI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29sdW1uIjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb25fb24iOiBbXSwKICAgIC8vICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICJ7XCJrZXl3b3JkX3R5cGVcIjogXCJnZW5lcmFsXCJ9IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJrZXl3b3JkX3R5cGUiOiAiZ2VuZXJhbCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJjZW5zZSIKICAgIC8vICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgICAgICAgICJrZXkiOiAiZ3lXZkRISUJGQXlKTDhRck5UeDQiLAogICAgLy8gICAgICAgICAgICAgICAgICAgInZhbHVlIjogIlNBTEVTIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm1ldHJpYyIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAib3BlcmF0aW9uIjogIlNVTSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiZGF0YXNldCI6ICJGcnVpdGh1dCB2MiIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29sdW1uIjogIlNhbGVzIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb25fb24iOiBbXSwKICAgIC8vICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJnb2d5YjQ1MCIKICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgICAgIF0sCiAgICAvLyAgICAgICAgICAgICAgICJlbnRpdHlfc3VnZ2VzdGlvbl9tYXAiOiBbCiAgICAvLyAgICAgICAgICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgICAgICAgImVudGl0eSI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImVudGl0eSI6ICJrd19nZW5lcmFsIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogInRvcCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDgsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJlbmQiOiAxMQogICAgLy8gICAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICAgICJzdWdnZXN0aW9uIjogewogICAgLy8gICAgICAgICAgICAgICAgICAgICAia2V5IjogIkszaC0wSEVCMEtXQVdrY2xHRnVoIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogInRvcCBOIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAia2V5d29yZCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb24iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZGF0YXNldCI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb2x1bW4iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAib3BlcmF0aW9uX29uIjogW10sCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICJ7XCJrZXl3b3JkX3R5cGVcIjogXCJnZW5lcmFsXCJ9IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6ICJnZW5lcmFsIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImNvbXBhbnlfaWQiOiAiY2Vuc2UiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiaW5wdXQiOiAxMAogICAgLy8gICAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgewogICAgLy8gICAgICAgICAgICAgICAgICAgImVudGl0eSI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImVudGl0eSI6ICJpbnB1dCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIxMCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDEyLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW5kIjogMTQKICAgIC8vICAgICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgICAic3VnZ2VzdGlvbiI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIxMCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZV90b19kaXNwbGF5IjogIjEwIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImNvbHVtbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb21wYW55X2lkIjogImdvZ3liNDUwIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnB1dCIKICAgIC8vICAgICAgICAgICAgICAgICAgIH0KICAgIC8vICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgICAgICAgICJlbnRpdHkiOiB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJlbnRpdHkiOiAiaW5wdXQiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiYmVzdCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDE1LAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW5kIjogMTkKICAgIC8vICAgICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgICAic3VnZ2VzdGlvbiI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJiZXN0IiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInZhbHVlX3RvX2Rpc3BsYXkiOiAiYmVzdCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb2x1bW4iOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJnb2d5YjQ1MCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJrZXl3b3JkX3R5cGUiOiBudWxsLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiAiIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW5wdXQiCiAgICAvLyAgICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAiZW50aXR5IjogewogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW50aXR5IjogImF0dHJpYnV0ZSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJwcm92aWRlciIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDIwLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW5kIjogMjgKICAgIC8vICAgICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgICAic3VnZ2VzdGlvbiI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleSI6ICJDUGRJS25RQnRiVE44OU9sb3FwWCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJQcm92aWRlciIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImF0dHJpYnV0ZSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb24iOiAiZ3JvdXBieSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJkYXRhc2V0IjogIkhlYWx0aGNhcmUgRGF0YSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb2x1bW4iOiAiUHJvdmlkZXIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAib3BlcmF0aW9uX29uIjogW10sCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJtZXRhZGF0YSI6ICIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAia2V5d29yZF90eXBlIjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImNvbXBhbnlfaWQiOiAiZ29neWI0NTAiCiAgICAvLyAgICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgICAgICAgICB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAiZW50aXR5IjogewogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW50aXR5IjogImt3X2dlbmVyYWwiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiYnkiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAic3RhcnQiOiAyOSwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImVuZCI6IDMxCiAgICAvLyAgICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgICAgInN1Z2dlc3Rpb24iOiB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJrZXkiOiAiTG5oLTBIRUIwS1dBV2tjbEdGdWoiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiYnkiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJrZXl3b3JkIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJkYXRhc2V0IjogbnVsbCwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImNvbHVtbiI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb25fb24iOiBbXSwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIm1ldGFkYXRhIjogIntcImtleXdvcmRfdHlwZVwiOiBcImdlbmVyYWxcIn0iLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAia2V5d29yZF90eXBlIjogImdlbmVyYWwiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiY29tcGFueV9pZCI6ICJjZW5zZSIKICAgIC8vICAgICAgICAgICAgICAgICAgIH0KICAgIC8vICAgICAgICAgICAgICAgICB9LAogICAgLy8gICAgICAgICAgICAgICAgIHsKICAgIC8vICAgICAgICAgICAgICAgICAgICJlbnRpdHkiOiB7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJlbnRpdHkiOiAibWVhc3VyZSIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJzYWxlcyIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJzdGFydCI6IDMyLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiZW5kIjogMzcKICAgIC8vICAgICAgICAgICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgICAgICAgICAgICAic3VnZ2VzdGlvbiI6IHsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleSI6ICJneVdmREhJQkZBeUpMOFFyTlR4NCIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJTQUxFUyIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm1ldHJpYyIsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJvcGVyYXRpb24iOiAiU1VNIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImRhdGFzZXQiOiAiRnJ1aXRodXQgdjIiLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAiY29sdW1uIjogIlNhbGVzIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIm9wZXJhdGlvbl9vbiI6IFtdLAogICAgLy8gICAgICAgICAgICAgICAgICAgICAibWV0YWRhdGEiOiAiIiwKICAgIC8vICAgICAgICAgICAgICAgICAgICAgImtleXdvcmRfdHlwZSI6IG51bGwsCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICJjb21wYW55X2lkIjogImdvZ3liNDUwIgogICAgLy8gICAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgICAgICAgICAgICAgIH0KICAgIC8vICAgICAgICAgICAgICAgXQogICAgLy8gICAgICAgICAgICAgfQogICAgLy8gICAgICAgICAgIF0KICAgIC8vIGZvcihsZXQgaSA9IDA7IGk8eC5sZW5ndGg7IGkrKyl7CiAgICAvLyAgIHguc2hvd19tYXBwaW5ncyA9IGZhbHNlOwogICAgLy8gfQogICAgLy8gdGhpcy5xdWVzdGlvbnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHgpKTsKICAgIC8vIGNvbnNvbGUubG9nKHRoaXMucXVlc3Rpb25zKQogICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgYXhpb3MuZ2V0KGFwaV9jYWxscy5iaV91bmFuc3dlcmVkX3NlYXJjaGVzKCksIHsKICAgICAgcGFyYW1zOiB7CiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICBkYXRhc2V0X25hbWU6IHRoaXMuZGF0YXNldF9uYW1lCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIF90aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09PSAiU3VjY2VzcyIpIHsKICAgICAgICBfdGhpcy5xdWVzdGlvbnMgPSByZXNwb25zZS5kYXRhLnVuYW5zd2VyZWRfc2VhcmNoZXMubWFwKGZ1bmN0aW9uIChzZWFyY2gpIHsKICAgICAgICAgIHZhciBvID0gT2JqZWN0LmFzc2lnbih7fSwgc2VhcmNoKTsKICAgICAgICAgIG8uc2hvd19tYXBwaW5ncyA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIG87CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgIHRleHQ6ICJTb21lIEVycm9yIE9jY3VycmVkLiBQbGVhc2UgVHJ5IEFnYWluLiIsCiAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgIH0pOwogICAgICB9CgogICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7CiAgICB9KTsKICB9LAogIHdhdGNoOiB7CiAgICBxdWVzdGlvbnM6IGZ1bmN0aW9uIHF1ZXN0aW9ucyhuZXdWYWwsIG9sZFZhbCkgewogICAgICBjb25zb2xlLmxvZyhuZXdWYWwsIG9sZFZhbCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICB0YWdfcXVlc3Rpb246IGZ1bmN0aW9uIHRhZ19xdWVzdGlvbihpbmRleCkgewogICAgICB0aGlzLmN1cnJlbnRfdW5hbnN3ZXJlZF9xdWVzdGlvbl9zZWxlY3RlZCA9IHRoaXMucXVlc3Rpb25zW2luZGV4XTsKICAgICAgdGhpcy5jdXJyZW50X3VuYW5zd2VyZWRfcXVlc3Rpb25fc2VsZWN0ZWQuZW50aXR5X3N1Z2dlc3Rpb25fbWFwID0gdGhpcy5xdWVzdGlvbnNbaW5kZXhdLmVudGl0eV9zdWdnZXN0aW9uX21hcDsKICAgICAgdGhpcy5jdXJyZW50X3VuYW5zd2VyZWRfcXVlc3Rpb25fc2VsZWN0ZWQub3JpZ2luYWxfc3RyaW5nID0gdGhpcy5xdWVzdGlvbnNbaW5kZXhdLnNlYXJjaF9zdHJpbmc7CiAgICAgIHRoaXMuc2hvd19xdWVzdGlvbl9tb2RhbCA9IHRydWU7CiAgICAgIHRoaXMuY3VycmVudF90YWdzID0gdGhpcy5jdXJyZW50X3VuYW5zd2VyZWRfcXVlc3Rpb25fc2VsZWN0ZWQuc2VhcmNoX3N0cmluZy5zcGxpdCgiICIpOyAvLyBjb25zb2xlLmxvZyh0aGlzLmN1cnJlbnRfdGFncykKICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jdXJyZW50X3VuYW5zd2VyZWRfcXVlc3Rpb25fc2VsZWN0ZWQpCgogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAkKCIjbXlNb2RhbCIpLm1vZGFsKCk7CiAgICAgIH0sIDApOwogICAgfSwKICAgIHNlbGVjdGVkX3RleHQ6IGZ1bmN0aW9uIHNlbGVjdGVkX3RleHQoKSB7CiAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uICYmICF0aGlzLnNob3dfY2hhbmdlX3N1Z2dlc3Rpb25zKSB7CiAgICAgICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpLnRyaW0oKSAhPSAiIikgewogICAgICAgICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5mb2N1c09mZnNldCAtIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5hbmNob3JPZmZzZXQgPCAwKSB7CiAgICAgICAgICAgIHN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJywKICAgICAgICAgICAgICB0ZXh0OiAnUGxlYXNlIFNlbGVjdCBXb3JkIGZyb20gTGVmdCB0byBSaWdodCcsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5jdXJyZW50X3N0cmluZ19zdGFydF9pbmRleCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5hbmNob3JPZmZzZXQ7CiAgICAgICAgICAgIHRoaXMuY3VycmVudF9zdHJpbmdfZW5kX2luZGV4ID0gd2luZG93LmdldFNlbGVjdGlvbigpLmZvY3VzT2Zmc2V0OwoKICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tfaWZfd29yZF9hbHJlYWR5X21hcHBlZCh3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKS50cmltKCkpKSB7CiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cod2luZG93LmdldFNlbGVjdGlvbigpLnRvU3RyaW5nKCkpOwogICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpLnRyaW0oKSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5jdXJyZW50X3VuYW5zd2VyZWRfcXVlc3Rpb25fc2VsZWN0ZWQuc2VhcmNoX3N0cmluZy5pbmRleE9mKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpLnRyaW0oKSkpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGgpOwogICAgICAgICAgICAgIHRoaXMuY3VycnJlbnRfc3VnZ2VzdGlvbl90b19jaGFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKS50cmltKCk7IC8vIHRoaXMuY3VycmVudF9zdHJpbmdfc3RhcnRfaW5kZXggPSB0aGlzLmN1cnJlbnRfdW5hbnN3ZXJlZF9xdWVzdGlvbl9zZWxlY3RlZC5zZWFyY2hfc3RyaW5nLmluZGV4T2Yod2luZG93LmdldFNlbGVjdGlvbigpLnRvU3RyaW5nKCkudHJpbSgpKTsKICAgICAgICAgICAgICAvLyB0aGlzLmN1cnJlbnRfc3RyaW5nX2VuZF9pbmRleCA9IHRoaXMuY3VycmVudF91bmFuc3dlcmVkX3F1ZXN0aW9uX3NlbGVjdGVkLnNlYXJjaF9zdHJpbmcuaW5kZXhPZih3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKS50cmltKCkpICsgd2luZG93LmdldFNlbGVjdGlvbigpLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aDsKCiAgICAgICAgICAgICAgdGhpcy5uZXdfZW50aXR5X21hcHBpbmdfZm9yX2N1cnJlbnRfcXVlc3Rpb24gPSB7CiAgICAgICAgICAgICAgICBlbnRpdHk6IHsKICAgICAgICAgICAgICAgICAgc3RhcnQ6IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5hbmNob3JPZmZzZXQsCiAgICAgICAgICAgICAgICAgIGVuZDogd2luZG93LmdldFNlbGVjdGlvbigpLmZvY3VzT2Zmc2V0LAogICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jdXJycmVudF9zdWdnZXN0aW9uX3RvX2NoYW5nZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgdGhpcy5zaG93X2NoYW5nZV9zdWdnZXN0aW9ucyA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2Ugey8vIHRoaXMuaGlnaGxpZ2h0ZWRfdGV4dCA9ICIiOwogICAgICAgICAgLy8gJCgiLnBvcG92ZXJEaXYiKS5jc3MoImRpc3BsYXkiLCAibm9uZSIpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHsKICAgICAgICBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKS50ZXh0OwogICAgICB9CiAgICB9LAogICAgY2xvc2VfY3VycmVudF9xdWVzdGlvbl9tb2RhbDogZnVuY3Rpb24gY2xvc2VfY3VycmVudF9xdWVzdGlvbl9tb2RhbCgpIHsKICAgICAgdGhpcy5jdXJyZW50X3VuYW5zd2VyZWRfcXVlc3Rpb25fc2VsZWN0ZWQgPSBudWxsOwogICAgICB0aGlzLnNob3dfcXVlc3Rpb25fbW9kYWwgPSBmYWxzZTsKICAgICAgdGhpcy5zZWFyY2hfZGF0YSA9IFtdOwogICAgICB0aGlzLnNlYXJjaF9yZXN1bHQgPSBbXTsKICAgICAgdGhpcy5zaG93X2NoYW5nZV9zdWdnZXN0aW9ucyA9IGZhbHNlOwogICAgICB0aGlzLm5ld19lbnRpdHlfbWFwcGluZ19mb3JfY3VycmVudF9xdWVzdGlvbiA9IG51bGw7CiAgICAgIHRoaXMuY3VycmVudF9zdHJpbmdfc3RhcnRfaW5kZXggPSBudWxsOwogICAgICB0aGlzLmN1cnJlbnRfc3RyaW5nX2VuZF9pbmRleCA9IG51bGw7CiAgICAgIHRoaXMuZW50aXR5X3N1Z2dlc3Rpb25fbWFwcGluZ19uZXcgPSBbXTsKICAgICAgdGhpcy5tYXBwZWRfcGhyYXNlX2luZGV4ID0gW107CiAgICB9LAogICAgYWRkX3N1Z2dlc3Rpb246IGZ1bmN0aW9uIGFkZF9zdWdnZXN0aW9uKCkgewogICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnNlYXJjaF9kYXRhKTsKICAgICAgLy8gY29uc29sZS5sb2codGhpcy5uZXdfZW50aXR5X21hcHBpbmdfZm9yX2N1cnJlbnRfcXVlc3Rpb24pCiAgICAgIHRoaXMubmV3X2VudGl0eV9tYXBwaW5nX2Zvcl9jdXJyZW50X3F1ZXN0aW9uLnN1Z2dlc3Rpb24gPSB0aGlzLnNlYXJjaF9kYXRhOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5ld19lbnRpdHlfbWFwcGluZ19mb3JfY3VycmVudF9xdWVzdGlvbi5zdWdnZXN0aW9uLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMubmV3X2VudGl0eV9tYXBwaW5nX2Zvcl9jdXJyZW50X3F1ZXN0aW9uLnN1Z2dlc3Rpb25baV0udHlwZSA9PT0gImtleXdvcmQiKSB7CiAgICAgICAgICB0aGlzLm5ld19lbnRpdHlfbWFwcGluZ19mb3JfY3VycmVudF9xdWVzdGlvbi5lbnRpdHkuZW50aXR5ID0gdGhpcy5lbnRpdHlfdHlwZV9wcmVmaXhfbWFwcGluZy5rZXl3b3JkICsgJ18nICsgdGhpcy5uZXdfZW50aXR5X21hcHBpbmdfZm9yX2N1cnJlbnRfcXVlc3Rpb24uc3VnZ2VzdGlvbltpXS5rZXl3b3JkX3R5cGU7CgogICAgICAgICAgaWYgKHRoaXMubmV3X2VudGl0eV9tYXBwaW5nX2Zvcl9jdXJyZW50X3F1ZXN0aW9uLnN1Z2dlc3Rpb25baV0ua2V5d29yZF90eXBlID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIHRoaXMubmV3X2VudGl0eV9tYXBwaW5nX2Zvcl9jdXJyZW50X3F1ZXN0aW9uLmVudGl0eS5lbnRpdHkgPSB0aGlzLmVudGl0eV90eXBlX3ByZWZpeF9tYXBwaW5nLmZ1bmN0aW9uOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5tYXBwZWRfcGhyYXNlID0gdGhpcy5tYXBwZWRfcGhyYXNlICsgJyAnICsgdGhpcy5uZXdfZW50aXR5X21hcHBpbmdfZm9yX2N1cnJlbnRfcXVlc3Rpb24uZW50aXR5LnZhbHVlOwogICAgICB0aGlzLm1hcHBlZF9waHJhc2VfaW5kZXgucHVzaCh7CiAgICAgICAgc3RhcnQ6IHRoaXMuY3VycmVudF9zdHJpbmdfc3RhcnRfaW5kZXgsCiAgICAgICAgZW5kOiB0aGlzLmN1cnJlbnRfc3RyaW5nX2VuZF9pbmRleAogICAgICB9KTsKICAgICAgdGhpcy5lbnRpdHlfc3VnZ2VzdGlvbl9tYXBwaW5nX25ldy5wdXNoKHRoaXMubmV3X2VudGl0eV9tYXBwaW5nX2Zvcl9jdXJyZW50X3F1ZXN0aW9uKTsKICAgICAgdGhpcy5zZWFyY2hfZGF0YSA9IFtdOwogICAgICB0aGlzLnNlYXJjaF9yZXN1bHQgPSBbXTsKICAgICAgdGhpcy5zaG93X2NoYW5nZV9zdWdnZXN0aW9ucyA9IGZhbHNlOwogICAgICB0aGlzLm5ld19lbnRpdHlfbWFwcGluZ19mb3JfY3VycmVudF9xdWVzdGlvbiA9IG51bGw7CiAgICAgIHRoaXMuY3VycmVudF9zdHJpbmdfc3RhcnRfaW5kZXggPSBudWxsOwogICAgICB0aGlzLmN1cnJlbnRfc3RyaW5nX2VuZF9pbmRleCA9IG51bGw7IC8vIGNvbnNvbGUubG9nKCdjb3JyZWN0JyxpbmRleCk7CiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuY3VycmVudF91bmFuc3dlcmVkX3F1ZXN0aW9uX3NlbGVjdGVkLmVudGl0eV9zdWdnZXN0aW9uX21hcFtpbmRleF0pOwogICAgICAvLyB0aGlzLmNvcnJlY3RlZF9zdWdnZXN0aW9ucy5wdXNoKHRoaXMuY3VycmVudF91bmFuc3dlcmVkX3F1ZXN0aW9uX3NlbGVjdGVkLmVudGl0eV9zdWdnZXN0aW9uX21hcFtpbmRleF0pOwogICAgfSwKICAgIGRpc2NhcmRfc3VnZ2VzdGlvbjogZnVuY3Rpb24gZGlzY2FyZF9zdWdnZXN0aW9uKGluZGV4KSB7CiAgICAgIHRoaXMuc2VhcmNoX2RhdGEgPSBbXTsKICAgICAgdGhpcy5zZWFyY2hfcmVzdWx0ID0gW107CiAgICAgIHRoaXMuc2hvd19jaGFuZ2Vfc3VnZ2VzdGlvbnMgPSBmYWxzZTsKICAgICAgdGhpcy5uZXdfZW50aXR5X21hcHBpbmdfZm9yX2N1cnJlbnRfcXVlc3Rpb24gPSBudWxsOwogICAgICB0aGlzLmN1cnJlbnRfc3RyaW5nX3N0YXJ0X2luZGV4ID0gbnVsbDsKICAgICAgdGhpcy5jdXJyZW50X3N0cmluZ19lbmRfaW5kZXggPSBudWxsOyAvLyB0aGlzLndyb25nX3BocmFzZXMgPSAodGhpcy53cm9uZ19waHJhc2VzID09IG51bGwgPyAnJyA6IHRoaXMud3JvbmdfcGhyYXNlcykgKyAnICcgKyB0aGlzLmN1cnJlbnRfdW5hbnN3ZXJlZF9xdWVzdGlvbl9zZWxlY3RlZC5lbnRpdHlfc3VnZ2VzdGlvbl9tYXBbaW5kZXhdLmVudGl0eS52YWx1ZTsKICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jdXJyZW50X3VuYW5zd2VyZWRfcXVlc3Rpb25fc2VsZWN0ZWQuZW50aXR5X3N1Z2dlc3Rpb25fbWFwW2luZGV4XS5lbnRpdHkudmFsdWUpOwogICAgICAvLyBjb25zb2xlLmxvZygnd3JvbmcnLGluZGV4KTsKICAgIH0sCiAgICBzZWFyY2g6IGZ1bmN0aW9uIHNlYXJjaCh2YWx1ZSkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlKTsgIAogICAgICB0aGlzLnNlYXJjaF9yZXN1bHQgPSBbXTsKICAgICAgYXhpb3MuZ2V0KGFwaV9jYWxscy5iaV9zZWFyY2hfZGF0YSgpLCB7CiAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgIC8vIGNvbXBhbnlfbmFtZTogImNlbnNlX2JpIiwKICAgICAgICAgIC8vIGNvbXBhbnlfaWQ6ICJjZW5zZV9iaSIsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgcTogdmFsdWUsCiAgICAgICAgICBkYXRhc2V0X25hbWU6IHRoaXMuZGF0YXNldF9uYW1lCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyA9PSAiU3VjY2VzcyIpIHsKICAgICAgICAgIF90aGlzMi5zZWFyY2hfcmVzdWx0ID0gcmVzcG9uc2UuZGF0YS5zdWdnZXN0aW9uczsKCiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzMi5zZWFyY2hfcmVzdWx0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChfdGhpczIuc2VhcmNoX3Jlc3VsdFtpXS50eXBlID09PSAia2V5d29yZCIpIHsKICAgICAgICAgICAgICBpZiAoX3RoaXMyLnNlYXJjaF9yZXN1bHRbaV0udmFsdWUgPT09ICJiZXR3ZWVuIC4uLiBhbmQgLi4uIikgewogICAgICAgICAgICAgICAgX3RoaXMyLnNlYXJjaF9yZXN1bHRbaV0udmFsdWVfdG9fZGlzcGxheSA9ICJiZXR3ZWVuIjsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzMi5zZWFyY2hfcmVzdWx0W2ldLnZhbHVlID09PSAidG9wIE4iKSB7CiAgICAgICAgICAgICAgICBfdGhpczIuc2VhcmNoX3Jlc3VsdFtpXS52YWx1ZV90b19kaXNwbGF5ID0gInRvcCI7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuc2VhcmNoX3Jlc3VsdFtpXS52YWx1ZSA9PT0gImJvdHRvbSBOIikgewogICAgICAgICAgICAgICAgX3RoaXMyLnNlYXJjaF9yZXN1bHRbaV0udmFsdWVfdG9fZGlzcGxheSA9ICJib3R0b20iOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfdGhpczIuc2VhcmNoX3Jlc3VsdFtpXS52YWx1ZV90b19kaXNwbGF5ID0gX3RoaXMyLnNlYXJjaF9yZXN1bHRbaV0udmFsdWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF90aGlzMi5zZWFyY2hfcmVzdWx0W2ldLnZhbHVlX3RvX2Rpc3BsYXkgPSBfdGhpczIuc2VhcmNoX3Jlc3VsdFtpXS52YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgIGNvbnNvbGUubG9nKCJFcnJvciIsIGVycik7CiAgICAgIH0pOwogICAgfSwKICAgIHRhZ19hZGRlZDogZnVuY3Rpb24gdGFnX2FkZGVkKCkgewogICAgICBjb25zb2xlLmxvZygnYWRkZWQnKTsKICAgICAgdGhpcy5jYWxsYXBpID0gdHJ1ZTsKCiAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRoaXMuY2FsbGFwaSA9IGZhbHNlOwogICAgICB9CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2VhcmNoX2RhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy5zZWFyY2hfZGF0YVtpXS50eXBlICE9IHVuZGVmaW5lZCAmJiB0aGlzLnNlYXJjaF9kYXRhW2ldLnR5cGUgPT09ICJrZXl3b3JkIikgewogICAgICAgICAgaWYgKHRoaXMuc2VhcmNoX2RhdGFbaV0ua2V5d29yZF90eXBlID09PSAiZGF0ZSIpIHsKICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoX2RhdGFbaV0udmFsdWUgPT09ICJhZnRlciAuLi4iIHx8IHRoaXMuc2VhcmNoX2RhdGFbaV0udmFsdWUgPT09ICJiZWZvcmUgLi4uIikgewogICAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXSAmJiB0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXS5rZXkgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrX2RhdGVfdmFsaWRpdHkodGhpcy5zZWFyY2hfZGF0YVtpICsgMV0udmFsdWUsIGkpKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuYWRkX2RldGFpbHNfdG9fb2JqZWN0KGkgKyAxLCBpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhW2ldLnZhbHVlID09PSAiYmV0d2VlbiAuLi4gYW5kIC4uLiIpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5zZWFyY2hfZGF0YVtpICsgMV0gJiYgdGhpcy5zZWFyY2hfZGF0YVtpICsgMV0ua2V5ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja19kYXRlX3ZhbGlkaXR5KHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdLnZhbHVlLCBpKSkgewogICAgICAgICAgICAgICAgICB0aGlzLmFkZF9kZXRhaWxzX3RvX29iamVjdChpICsgMSwgaSk7CiAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdLnZhbHVlX3RvX2Rpc3BsYXkgPSB0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXS52YWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhW2kgKyAyXSAmJiB0aGlzLnNlYXJjaF9kYXRhW2kgKyAyXS5rZXkgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrX2RhdGVfdmFsaWRpdHkodGhpcy5zZWFyY2hfZGF0YVtpICsgMl0udmFsdWUsIGkpKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuYWRkX2RldGFpbHNfdG9fb2JqZWN0KGkgKyAyLCBpKTsKICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hfZGF0YVtpICsgMl0udmFsdWVfdG9fZGlzcGxheSA9ICJhbmQiICsgIiAiICsgdGhpcy5zZWFyY2hfZGF0YVtpICsgMl0udmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRoaXMuc2VhcmNoX2RhdGFbaV0ua2V5d29yZF90eXBlID09PSAiZ2VuZXJhbCIpIHsKICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoX2RhdGFbaV0udmFsdWUgPT09ICJ0b3AgTiIgfHwgdGhpcy5zZWFyY2hfZGF0YVtpXS52YWx1ZSA9PT0gImJvdHRvbSBOIikgewogICAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXSAmJiB0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXS5rZXkgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrX251bWJlcl92YWxpZGl0eSh0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXS52YWx1ZSwgaSkpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hfZGF0YVtpXS5pbnB1dCA9IE51bWJlcih0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoX2RhdGFbaV0udmFsdWVfdG9fZGlzcGxheSA9IHRoaXMuc2VhcmNoX2RhdGFbaV0udmFsdWVfdG9fZGlzcGxheSArICIgIiArIHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdLnZhbHVlOwogICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaF9kYXRhID0gdGhpcy5zZWFyY2hfZGF0YS5zbGljZSgwLCBpICsgMSkuY29uY2F0KHRoaXMuc2VhcmNoX2RhdGEuc2xpY2UoaSArIDIsIHRoaXMuc2VhcmNoX2RhdGEubGVuZ3RoKSk7IC8vIHRoaXMuY2hlY2tfZHVwbGljYXRlID0gaSArIDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRoaXMuc2VhcmNoX2RhdGFbaV0ua2V5d29yZF90eXBlID09PSAiY29tcGFyYXRpdmUiKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhW2ldLnZhbHVlID09PSAibGVzc2VyIHRoYW4iIHx8IHRoaXMuc2VhcmNoX2RhdGFbaV0udmFsdWUgPT09ICJncmVhdGVyIHRoYW4iIHx8IHRoaXMuc2VhcmNoX2RhdGFbaV0udmFsdWUgPT09ICJncmVhdGVyIHRoYW4gZXF1YWwgdG8iIHx8IHRoaXMuc2VhcmNoX2RhdGFbaV0udmFsdWUgPT09ICJsZXNzZXIgdGhhbiBlcXVhbCB0byIgfHwgdGhpcy5zZWFyY2hfZGF0YVtpXS52YWx1ZSA9PT0gImVxdWFsIHRvIiB8fCB0aGlzLnNlYXJjaF9kYXRhW2ldLnZhbHVlID09PSAibm90IGVxdWFsIHRvIikgewogICAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXSAmJiB0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXS5rZXkgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHRoaXMuYWRkX2RldGFpbHNfdG9fb2JqZWN0KGkgKyAxLCBpKTsKICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdLnZhbHVlX3RvX2Rpc3BsYXkgPSB0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXS52YWx1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhW2ldLnZhbHVlID09PSAiYmV0d2VlbiAuLi4gYW5kIC4uLiIpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5zZWFyY2hfZGF0YVtpICsgMV0gJiYgdGhpcy5zZWFyY2hfZGF0YVtpICsgMV0ua2V5ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICB0aGlzLmFkZF9kZXRhaWxzX3RvX29iamVjdChpICsgMSwgaSk7CiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaF9kYXRhW2kgKyAxXS52YWx1ZV90b19kaXNwbGF5ID0gdGhpcy5zZWFyY2hfZGF0YVtpICsgMV0udmFsdWU7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAodGhpcy5zZWFyY2hfZGF0YVtpICsgMl0gJiYgdGhpcy5zZWFyY2hfZGF0YVtpICsgMl0ua2V5ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICB0aGlzLmFkZF9kZXRhaWxzX3RvX29iamVjdChpICsgMiwgaSk7CiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaF9kYXRhW2kgKyAyXS52YWx1ZV90b19kaXNwbGF5ID0gImFuZCIgKyAiICIgKyB0aGlzLnNlYXJjaF9kYXRhW2kgKyAyXS52YWx1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5zZWFyY2hfZGF0YVtpXS5rZXl3b3JkX3R5cGUgPT09ICJ0ZXh0IikgewogICAgICAgICAgICBpZiAoIXRoaXMuc2VhcmNoX2RhdGFbaSAtIDFdKSB7CiAgICAgICAgICAgICAgdGhpcy50ZXh0X2tleXdvcmRzX3ZhbGlkaXR5KCdhdHRyaWJ1dGUnLCBpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoX2RhdGFbaSAtIDFdICYmIHRoaXMuc2VhcmNoX2RhdGFbaSAtIDFdLnR5cGUgIT09ICJhdHRyaWJ1dGUiKSB7CiAgICAgICAgICAgICAgdGhpcy50ZXh0X2tleXdvcmRzX3ZhbGlkaXR5KCdhdHRyaWJ1dGUnLCBpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoX2RhdGFbaSAtIDFdICYmIHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdICYmIHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdLmtleSA9PT0gbnVsbCkgewogICAgICAgICAgICAgIC8vIGlmKHRoaXMuc2VhcmNoX2RhdGFbaSsxXS5rZXkgPT09IG51bGwpewogICAgICAgICAgICAgIGlmICh0aGlzLnRleHRfa2V5d29yZHNfdmFsaWRpdHkoJ2JlZ2luc19lbmRzX3dpdGgnLCBpKSkgewogICAgICAgICAgICAgICAgLy8gaWYodGhpcy5zZWFyY2hfZGF0YVtpKzFdLnZhbHVlLmNoYXJBdCh0aGlzLnNlYXJjaF9kYXRhW2krMV0udmFsdWUubGVuZ3RoLTEpID09IGAnYCl7CiAgICAgICAgICAgICAgICAvLyBpZih0aGlzLnRleHRfa2V5d29yZHNfdmFsaWRpdHkoJ2xlbmd0aCcsaSkpewogICAgICAgICAgICAgICAgdGhpcy5hZGRfZGV0YWlsc190b19vYmplY3QoaSArIDEsIGkpOwogICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hfZGF0YVtpICsgMV0udmFsdWUgPSB0aGlzLnJlbW92ZV9xdW90ZXNfZnJvbV9zdHJpbmcodGhpcy5zZWFyY2hfZGF0YVtpICsgMV0udmFsdWUpOwogICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hfZGF0YVtpICsgMV0udmFsdWVfdG9fZGlzcGxheSA9IHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdLnZhbHVlOyAvLyB0aGlzLnNlYXJjaF9kYXRhW2krMV0udmFsdWVfdG9fZGlzcGxheSA9IHRoaXMuc2VhcmNoX2RhdGFbaSsxXS52YWx1ZTsKICAgICAgICAgICAgICAgIC8vIH0KCiAgICAgICAgICAgICAgICB0aGlzLnRleHRfa2V5d29yZHNfdmFsaWRpdHkoJ2xlbmd0aCcsIGkgKyAxKTsKICAgICAgICAgICAgICB9IGVsc2Uge30gLy8gdGhpcy5lcnJvcl90ZXh0X3Nob3cgPSB0cnVlIDsKICAgICAgICAgICAgICAvLyB0aGlzLmVycm9yX3RleHQgPSAiUGxlYXNlIEVuZCBZb3VyIHdvcmQgd2l0aCAnICI7CiAgICAgICAgICAgICAgLy8gdGhpcy5jYWxsYXBpID0gZmFsc2U7CiAgICAgICAgICAgICAgLy8gdmFyIHggPSB0aGlzLnNlYXJjaF9kYXRhW2krMV0udmFsdWUKICAgICAgICAgICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2VhcmNoYmFyIikudmFsdWUgPSB4OwogICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHgpOwogICAgICAgICAgICAgIC8vIHRoaXMuc2VhcmNoX2RhdGEgPSB0aGlzLnNlYXJjaF9kYXRhLnNsaWNlKDAsIGkrMSk7CiAgICAgICAgICAgICAgLy8gdGhpcy5jaGVja19kdXBsaWNhdGUgPSBpICsgMTsKICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh4KTsKICAgICAgICAgICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2VhcmNoX2RhdGEiKS5wcmV2aW91c1NpYmxpbmcudmFsdWUgPSAiIit4KyIiOwogICAgICAgICAgICAgIC8vIH0KCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5zZWFyY2hfZGF0YVtpXS5rZXl3b3JkX3R5cGUgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdICYmIHRoaXMuc2VhcmNoX2RhdGFbaSArIDFdLmtleSA9PT0gbnVsbCkgewogICAgICAgICAgICAgIHRoaXMuYWRkX2RldGFpbHNfdG9fb2JqZWN0KGkgKyAxLCBpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgY29uc29sZS5sb2codGhpcy5zZWFyY2hfZGF0YSk7CiAgICB9LAogICAgY2hlY2tfZGF0ZV92YWxpZGl0eTogZnVuY3Rpb24gY2hlY2tfZGF0ZV92YWxpZGl0eShkYXRlLCBpbmRleCkgewogICAgICB2YXIgeCA9IG5ldyBEYXRlKGRhdGUpOwoKICAgICAgaWYgKHggPT09ICJJbnZhbGlkIERhdGUiKSB7CiAgICAgICAgdGhpcy5zZWFyY2hfZGF0YVtpbmRleCArIDFdLnZhbHVlID0gIiI7CiAgICAgICAgdGhpcy5jYWxsYXBpID0gZmFsc2U7CiAgICAgICAgdGhpcy5zZWFyY2hfZGF0YSA9IHRoaXMuc2VhcmNoX2RhdGEuc2xpY2UoMCwgaW5kZXggKyAxKTsKICAgICAgICB0aGlzLmNoZWNrX2R1cGxpY2F0ZSA9IGluZGV4ICsgMTsKICAgICAgICB0aGlzLmVycm9yX3RleHRfc2hvdyA9IHRydWU7CiAgICAgICAgdGhpcy5lcnJvcl90ZXh0ID0gIlBsZWFzZSBFbnRlciBEYXRlIGluIEZvcm1hdDogWVlZWS1NTS1ERCBvciBERC1NTS1ZWVlZIjsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0sCiAgICBhZGRfZGV0YWlsc190b19vYmplY3Q6IGZ1bmN0aW9uIGFkZF9kZXRhaWxzX3RvX29iamVjdCh0b19iZV9zZXQsIHRvX2JlX3NldF9mcm9tKSB7CiAgICAgIHRoaXMuc2VhcmNoX2RhdGFbdG9fYmVfc2V0XS5jb2x1bW4gPSB0aGlzLnNlYXJjaF9kYXRhW3RvX2JlX3NldF9mcm9tXS5jb2x1bW47CiAgICAgIHRoaXMuc2VhcmNoX2RhdGFbdG9fYmVfc2V0XS5jb21wYW55X2lkID0gdGhpcy5zZWFyY2hfZGF0YVt0b19iZV9zZXRfZnJvbV0uY29tcGFueV9pZDsKICAgICAgdGhpcy5zZWFyY2hfZGF0YVt0b19iZV9zZXRdLmtleXdvcmRfdHlwZSA9IG51bGw7CiAgICAgIHRoaXMuc2VhcmNoX2RhdGFbdG9fYmVfc2V0XS5tZXRhZGF0YSA9ICIiOwogICAgICB0aGlzLnNlYXJjaF9kYXRhW3RvX2JlX3NldF0udHlwZSA9ICJpbnB1dCI7CiAgICB9LAogICAgY2hlY2tfbnVtYmVyX3ZhbGlkaXR5OiBmdW5jdGlvbiBjaGVja19udW1iZXJfdmFsaWRpdHkobnVtYmVyLCBpbmRleCkgewogICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoTnVtYmVyKG51bWJlcikpKSB7CiAgICAgICAgdGhpcy5zZWFyY2hfZGF0YVtpbmRleCArIDFdLmlucHV0ID0gIiI7CiAgICAgICAgdGhpcy5jYWxsYXBpID0gZmFsc2U7CiAgICAgICAgdGhpcy5zZWFyY2hfZGF0YSA9IHRoaXMuc2VhcmNoX2RhdGEuc2xpY2UoMCwgaW5kZXggKyAxKTsKICAgICAgICB0aGlzLmNoZWNrX2R1cGxpY2F0ZSA9IGluZGV4ICsgMTsKICAgICAgICB0aGlzLmVycm9yX3RleHRfc2hvdyA9IHRydWU7CiAgICAgICAgdGhpcy5lcnJvcl90ZXh0ID0gIlBsZWFzZSBFbnRlciBhIFZhbGlkIE51bWJlciI7IC8vIGFsZXJ0KCJOb3QgTnVtYmVyIik7CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBhbGVydCgiTnVtYmVyIik7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0sCiAgICB0ZXh0X2tleXdvcmRzX3ZhbGlkaXR5OiBmdW5jdGlvbiB0ZXh0X2tleXdvcmRzX3ZhbGlkaXR5KHR5cGUsIGluZGV4KSB7CiAgICAgIGlmICh0eXBlID09PSAnYXR0cmlidXRlJykgewogICAgICAgIHRoaXMuZXJyb3JfdGV4dF9zaG93ID0gdHJ1ZTsKICAgICAgICB0aGlzLmVycm9yX3RleHQgPSAiWW91IHNob3VsZCB1c2UgYW4gYXR0cmlidXRlIGJlZm9yZSB1c2luZyB0aGlzIGtpbmQgb2Yga2V5d29yZCI7CiAgICAgICAgdGhpcy5jYWxsYXBpID0gZmFsc2U7CiAgICAgICAgdGhpcy5zZWFyY2hfZGF0YSA9IHRoaXMuc2VhcmNoX2RhdGEuc2xpY2UoMCwgaW5kZXgpOwogICAgICAgIHRoaXMuY2hlY2tfZHVwbGljYXRlID0gaW5kZXg7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBpZiAodHlwZSA9PT0gJ2JlZ2luc19lbmRzX3dpdGgnKSB7CiAgICAgICAgaWYgKCEodGhpcy5zZWFyY2hfZGF0YVtpbmRleCArIDFdLnZhbHVlLmNoYXJBdCh0aGlzLnNlYXJjaF9kYXRhW2luZGV4ICsgMV0udmFsdWUubGVuZ3RoIC0gMSkgPT0gIiciIHx8IHRoaXMuc2VhcmNoX2RhdGFbaW5kZXggKyAxXS52YWx1ZS5jaGFyQXQodGhpcy5zZWFyY2hfZGF0YVtpbmRleCArIDFdLnZhbHVlLmxlbmd0aCAtIDEpID09ICJcIiIpKSB7CiAgICAgICAgICB0aGlzLmVycm9yX3RleHRfc2hvdyA9IHRydWU7CiAgICAgICAgICB0aGlzLmVycm9yX3RleHQgPSAiUGxlYXNlIFN0YXJ0IGFuZCBFbmQgWW91ciB3b3JkIHdpdGggUXVvdGVzICI7CiAgICAgICAgICB0aGlzLmNhbGxhcGkgPSBmYWxzZTsgLy8gdmFyIHggPSB0aGlzLnNlYXJjaF9kYXRhW2krMV0udmFsdWUKICAgICAgICAgIC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZWFyY2hiYXIiKS52YWx1ZSA9IHg7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh4KTsKCiAgICAgICAgICB0aGlzLnNlYXJjaF9kYXRhID0gdGhpcy5zZWFyY2hfZGF0YS5zbGljZSgwLCBpbmRleCArIDEpOwogICAgICAgICAgdGhpcy5jaGVja19kdXBsaWNhdGUgPSBpbmRleCArIDE7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHR5cGUgPT09ICdsZW5ndGgnKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2coJ2xlbmdodCcpOwogICAgICAgIGlmICh0aGlzLnNlYXJjaF9kYXRhW2luZGV4XS52YWx1ZS5sZW5ndGggPCAzKSB7CiAgICAgICAgICB2YXIgeCA9IHRoaXMuYWRkX3F1b3Rlc190b19zdHJpbmcodGhpcy5zZWFyY2hfZGF0YVtpbmRleF0udmFsdWUpOwogICAgICAgICAgdGhpcy5zZWFyY2hfZGF0YSA9IHRoaXMuc2VhcmNoX2RhdGEuc2xpY2UoMCwgaW5kZXgpOwogICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgnYWRkX3RleHRfdG9fc2VhcmNoX2JhcicsIHgpOyAvLyBjb25zb2xlLmxvZyh4KTsKCiAgICAgICAgICB0aGlzLmVycm9yX3RleHRfc2hvdyA9IHRydWU7CiAgICAgICAgICB0aGlzLmVycm9yX3RleHQgPSAiUGxlYXNlIFNlYXJjaCB3aXRoIEF0bGVhc3QgMyBDaGFyYWN0ZXJzIGZvciB0aGlzIEtleXdvcmQiOwogICAgICAgICAgdGhpcy5jYWxsYXBpID0gZmFsc2U7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuY2FsbGFwaSA9IHRydWU7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICByZW1vdmVfcXVvdGVzX2Zyb21fc3RyaW5nOiBmdW5jdGlvbiByZW1vdmVfcXVvdGVzX2Zyb21fc3RyaW5nKHN0cikgewogICAgICByZXR1cm4gc3RyLnN1YnN0cmluZygxKS5zbGljZSgwLCAtMSk7CiAgICB9LAogICAgc2hvd19tYXBwaW5nc19vZl9xdWVzdGlvbjogZnVuY3Rpb24gc2hvd19tYXBwaW5nc19vZl9xdWVzdGlvbihpbmRleCkgewogICAgICAvLyBjb25zb2xlLmxvZygnaGknLGluZGV4KQogICAgICAvLyBjb25zb2xlLmxvZygnaGknLGluZGV4KQogICAgICB0aGlzLnF1ZXN0aW9uc1tpbmRleF0uc2hvd19tYXBwaW5ncyA9IHRydWU7CiAgICB9LAogICAgY2hlY2tfaWZfd29yZF9hbHJlYWR5X21hcHBlZDogZnVuY3Rpb24gY2hlY2tfaWZfd29yZF9hbHJlYWR5X21hcHBlZCh3b3JkKSB7CiAgICAgIGlmICh0aGlzLm1hcHBlZF9waHJhc2UgIT0gJycpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmQuc3BsaXQoJyAnKS5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgaWYgKHRoaXMubWFwcGVkX3BocmFzZS5pbmNsdWRlcyh3b3JkLnNwbGl0KCcgJylbaV0pKSB7CiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5tYXBwZWRfcGhyYXNlX2luZGV4Lmxlbmd0aDsgaiArPSAxKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMubWFwcGVkX3BocmFzZV9pbmRleFtqXS5zdGFydCA8PSB0aGlzLmN1cnJlbnRfc3RyaW5nX3N0YXJ0X2luZGV4ICYmIHRoaXMuY3VycmVudF9zdHJpbmdfc3RhcnRfaW5kZXggPD0gdGhpcy5tYXBwZWRfcGhyYXNlX2luZGV4W2pdLmVuZCkgewogICAgICAgICAgICAgICAgc3dhbC5maXJlKHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJywKICAgICAgICAgICAgICAgICAgdGV4dDogJ1RoaXMgd29yZCBoYXMgYWxyZWFkeSBiZWVuIG1hcHBlZC4gUGxlYXNlIHNlbGVjdCBzb21ldGhpbmcgZWxzZScsCiAgICAgICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIGlnbm9yZV9waHJhc2U6IGZ1bmN0aW9uIGlnbm9yZV9waHJhc2UoKSB7CiAgICAgIHRoaXMubmV3X2VudGl0eV9tYXBwaW5nX2Zvcl9jdXJyZW50X3F1ZXN0aW9uLnN1Z2dlc3Rpb24gPSBbewogICAgICAgIHR5cGU6ICdpZ25vcmUnLAogICAgICAgIHZhbHVlOiAnSWdub3JlJwogICAgICB9XTsKICAgICAgdGhpcy5tYXBwZWRfcGhyYXNlID0gdGhpcy5tYXBwZWRfcGhyYXNlICsgJyAnICsgdGhpcy5uZXdfZW50aXR5X21hcHBpbmdfZm9yX2N1cnJlbnRfcXVlc3Rpb24uZW50aXR5LnZhbHVlOwogICAgICB0aGlzLm1hcHBlZF9waHJhc2VfaW5kZXgucHVzaCh7CiAgICAgICAgc3RhcnQ6IHRoaXMuY3VycmVudF9zdHJpbmdfc3RhcnRfaW5kZXgsCiAgICAgICAgZW5kOiB0aGlzLmN1cnJlbnRfc3RyaW5nX2VuZF9pbmRleAogICAgICB9KTsKICAgICAgdGhpcy5lbnRpdHlfc3VnZ2VzdGlvbl9tYXBwaW5nX25ldy5wdXNoKHRoaXMubmV3X2VudGl0eV9tYXBwaW5nX2Zvcl9jdXJyZW50X3F1ZXN0aW9uKTsKICAgICAgdGhpcy5zZWFyY2hfZGF0YSA9IFtdOwogICAgICB0aGlzLnNlYXJjaF9yZXN1bHQgPSBbXTsKICAgICAgdGhpcy5zaG93X2NoYW5nZV9zdWdnZXN0aW9ucyA9IGZhbHNlOwogICAgICB0aGlzLm5ld19lbnRpdHlfbWFwcGluZ19mb3JfY3VycmVudF9xdWVzdGlvbiA9IG51bGw7CiAgICAgIHRoaXMuY3VycmVudF9zdHJpbmdfc3RhcnRfaW5kZXggPSBudWxsOwogICAgICB0aGlzLmN1cnJlbnRfc3RyaW5nX2VuZF9pbmRleCA9IG51bGw7CiAgICB9LAogICAgc2F2ZV9tYXBwaW5nX2Zvcl9jdXJyZW50X3F1ZXN0aW9uOiBmdW5jdGlvbiBzYXZlX21hcHBpbmdfZm9yX2N1cnJlbnRfcXVlc3Rpb24oKSB7CiAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgdGl0bGU6ICJBcmUgeW91IHN1cmU/IiwKICAgICAgICB0ZXh0OiAiWW91IHdhbnQgdG8gc2F2ZSB0aGlzIG1hcHBpbmciLAogICAgICAgIHR5cGU6ICJxdWVzdGlvbiIsCiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiWWVzLCBDb25maXJtISIKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHRleHQ6ICdQbGVhc2Ugd2FpdCB3aGlsZSB3ZSBhcmUgc3VibWl0dGluZyB5b3VyIGRldGFpbHMuLi4nLAogICAgICAgICAgICB0eXBlOiAnaW5mbycsCiAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UKICAgICAgICAgIH0pOyAvLyBheGlvcy5wb3N0KGFwaV9jYWxscy5iaV91bmFuc3dlcmVkX3NlYXJjaGVzKCksIHsKICAgICAgICAgIC8vICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIC8vICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAvLyAgIGNvbXBhbnlfbmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgIC8vICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAvLyAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAvLyAgIGRhdGFzZXRfbmFtZTogdGhpcy5kYXRhc2V0X25hbWUsCiAgICAgICAgICAvLyAgIHNlYXJjaF9zdHJpbmc6IHRoaXMuY3VycmVudF91bmFuc3dlcmVkX3F1ZXN0aW9uX3NlbGVjdGVkLnNlYXJjaF9zdHJpbmcsCiAgICAgICAgICAvLyAgIHN1Z2dlc3Rpb25zOiB0aGlzLmVudGl0eV9zdWdnZXN0aW9uX21hcHBpbmdfbmV3CiAgICAgICAgICAvLyB9KS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICAgIC8vICAgaWYocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT09ICJTdWNjZXNzIil7CiAgICAgICAgICAvLyAgICAgU3dhbCh7CiAgICAgICAgICAvLyAgICAgICB0ZXh0OiAnU1VDQ0VTU0ZVTExZIFJFLU1BUFBFRCBVTkFOU1dFUkVEIFFVRVNUSU9OJywKICAgICAgICAgIC8vICAgICAgIHR5cGU6ICdpbmZvJywKICAgICAgICAgIC8vICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgLy8gICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgLy8gICAgIH0pOwogICAgICAgICAgLy8gICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgLy8gICAgICAgdGhpcy4kcm91dGVyLmdvKCk7CiAgICAgICAgICAvLyAgICAgfSwgMTUwMCk7CiAgICAgICAgICAvLyAgIH0gZWxzZSB7CiAgICAgICAgICAvLyAgICAgU3dhbCh7CiAgICAgICAgICAvLyAgICAgICB0ZXh0OiAnU29tZSBFcnJvciBPY2N1cnJlZC4gUGxlYXNlIFRyeSBBZ2FpbicsCiAgICAgICAgICAvLyAgICAgICB0eXBlOiAnaW5mbycsCiAgICAgICAgICAvLyAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIC8vICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIC8vICAgICB9KTsKICAgICAgICAgIC8vICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIC8vICAgICAgIHRoaXMuJHJvdXRlci5nbygpOwogICAgICAgICAgLy8gICAgIH0sIDE1MDApOwogICAgICAgICAgLy8gICB9CiAgICAgICAgICAvLyB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAvLyAgIFN3YWwoewogICAgICAgICAgLy8gICAgIHRleHQ6ICdTb21lIEVycm9yIE9jY3VycmVkLiBQbGVhc2UgVHJ5IEFnYWluJywKICAgICAgICAgIC8vICAgICB0eXBlOiAnaW5mbycsCiAgICAgICAgICAvLyAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAvLyAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgLy8gICB9KTsKICAgICAgICAgIC8vICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAvLyAgICAgdGhpcy4kcm91dGVyLmdvKCk7CiAgICAgICAgICAvLyAgIH0sIDE1MDApOwogICAgICAgICAgLy8gfSkKICAgICAgICB9CiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyh0aGlzLmVudGl0eV9zdWdnZXN0aW9uX21hcHBpbmdfbmV3KTsKICAgIH0sCiAgICBkZWxldGVfdW5hbnN3ZXJlZF9xdWVzdGlvbjogZnVuY3Rpb24gZGVsZXRlX3VuYW5zd2VyZWRfcXVlc3Rpb24oaW5kZXgpIHsKICAgICAgU3dhbC5maXJlKHsKICAgICAgICB0aXRsZTogIkFyZSB5b3Ugc3VyZT8iLAogICAgICAgIHRleHQ6ICJZb3Ugd2FudCB0byBkZWxldGUgdGhpcyBxdWVzdGlvbiIsCiAgICAgICAgdHlwZTogInF1ZXN0aW9uIiwKICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAiI2QzMyIsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICJZZXMsIENvbmZpcm0hIgogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgdGV4dDogJ1BsZWFzZSB3YWl0IHdoaWxlIHdlIGFyZSBzdWJtaXR0aW5nIHlvdXIgZGV0YWlscy4uLicsCiAgICAgICAgICAgIHR5cGU6ICdpbmZvJywKICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9Cn07"},null]}