{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/User Management/AddRole.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/User Management/AddRole.vue","mtime":1663910265478},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIi9ob21lL3ZpbWFsZXNoL0NFTlNFL2NoYXRib3QtcG9ydGFsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBTd2FsIGZyb20gInN3ZWV0YWxlcnQyIjsKaW1wb3J0IGFwaV9jYWxscyBmcm9tICJAL3BvcnRhbC9hcGlfY2FsbHMiOwppbXBvcnQgeyBjbG9zZV9tb2RhbCB9IGZyb20gIkAvcG9ydGFsL21peGlucyI7CmV4cG9ydCBkZWZhdWx0IHsKICBtaXhpbnM6IFtjbG9zZV9tb2RhbF0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHZhciBfcmVmOwoKICAgIHJldHVybiBfcmVmID0gewogICAgICBjaGVja2VkVXNlcjogZmFsc2UsCiAgICAgIGNoZWNrZWRfbGlzdDogW10sCiAgICAgIHJvbGVfbmFtZXM6ICIiLAogICAgICBkZWxldGVfbGlzdDogW10sCiAgICAgIHJvbGVfbmFtZTogW10sCiAgICAgIHVzZXJfdHlwZV9saXN0OiBbXSwKICAgICAgdXNlcl90eXBlOiAiUG9ydGFsIFVzZXIiLAogICAgICBwYWdlX25vOiAxLAogICAgICBwZXJfcGFnZTogMTAsCiAgICAgIHRvdGFsX3BhZ2VzOiAwLAogICAgICBhZGRfZWRpdDogInRydWUiLAogICAgICBvbGRfcm9sZV9uYW1lOiAiIgogICAgfSwgX2RlZmluZVByb3BlcnR5KF9yZWYsICJkZWxldGVfbGlzdCIsIFtdKSwgX2RlZmluZVByb3BlcnR5KF9yZWYsICJwYWdlX2FycmF5IiwgW10pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgInNlYXJjaF9uYW1lIiwgIiIpLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgInNwaW5uZXJPbiIsIGZhbHNlKSwgX2RlZmluZVByb3BlcnR5KF9yZWYsICJpc1Zpc2libGVTZWFyY2hDbGVhciIsIGZhbHNlKSwgX3JlZjsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgdm0gPSB0aGlzOwogICAgJCgiI3NlbGVjdGFsbCIpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKCQodGhpcykuaXMoIjpjaGVja2VkIikpIHsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2bS5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgIH0KICAgIH0pOwogICAgJCgiI3VzZXJtb2RlbCIpLm9uKCJoaWRkZW4uYnMubW9kYWwiLCBmdW5jdGlvbiAoZSkgewogICAgICB2bS5hZGRfZWRpdCA9ICJ0cnVlIjsKICAgICAgdm0udXNlcl90eXBlID0gIlBvcnRhbCBVc2VyIjsKICAgICAgdm0ucm9sZV9uYW1lcyA9ICIiOwogICAgfSk7CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5sb2FkX3JvbGUoKTsKICB9LAogIHdhdGNoOiB7CiAgICBzZWFyY2hfbmFtZTogZnVuY3Rpb24gc2VhcmNoX25hbWUoKSB7CiAgICAgIGlmICh0aGlzLnNlYXJjaF9uYW1lID09PSAiIikgewogICAgICAgIHRoaXMubG9hZF9yb2xlKCk7CiAgICAgICAgdGhpcy5pc1Zpc2libGVTZWFyY2hDbGVhciA9IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKHRoaXMuc2VhcmNoX25hbWUgIT09ICIiKSB7CiAgICAgICAgdGhpcy5pc1Zpc2libGVTZWFyY2hDbGVhciA9IHRydWU7CiAgICAgIH0KICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGNsZWFyX3NlYXJjaF9uYW1lOiBmdW5jdGlvbiBjbGVhcl9zZWFyY2hfbmFtZSgpIHsKICAgICAgdGhpcy5zZWFyY2hfbmFtZSA9ICIiOwogICAgfSwKICAgIGxvYWRfcm9sZTogZnVuY3Rpb24gbG9hZF9yb2xlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICB0aGlzLmRlbGV0ZV9saXN0ID0gW107CiAgICAgIHRoaXMuYWRkX2VkaXQgPSAidHJ1ZSI7CiAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMubWFpbl9yb2xlX3VybCgpLCB7CiAgICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICBwYWdlX25vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgaXNTaG93OiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpcy5hcGlfc3RhdHVzX2NvZGUuREFUQV9BVkFJTEFCTEUuTVNHX0NPREUpIHsKICAgICAgICAgIF90aGlzLm9yZ2FuaXplX3JvbGVzKHJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzLmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgIFN3YWwoewogICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICB0ZXh0OiBfdGhpcy50bHQoJ2FkZF9yb2xlX2ludGVybmFsX3NlcnZlcl9tc2cnKSwKICAgICAgICAgICAgdGltZXI6IDMwMDAKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzLmFwaV9zdGF0dXNfY29kZS5FTVBUWV9EQVRBLk1TR19DT0RFKSB7CiAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgdHlwZTogImluZm8iLAogICAgICAgICAgICB0ZXh0OiBfdGhpcy50bHQoJ25vX2RhdGFfdGV4dCcpLAogICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKGUpOwoKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgY2hlY2tfbGlzdF9hcnJheTogZnVuY3Rpb24gY2hlY2tfbGlzdF9hcnJheShpbmRleCkgewogICAgICBpZiAoaW5kZXggPT0gImFsbCIpIHsKICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgIHZhciByb2xlX2xlbmd0aCA9IHRoaXMucm9sZV9uYW1lLmxlbmd0aDsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb2xlX2xlbmd0aDsgaSsrKSB7CiAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdC5wdXNoKGkpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQgPT0gdHJ1ZSkgewogICAgICAgICAgaWYgKCF0aGlzLmNoZWNrZWRfbGlzdC5pbmNsdWRlcyhpbmRleCkpIHsKICAgICAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QucHVzaChpbmRleCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCA9PSBmYWxzZSkgewogICAgICAgICAgdmFyIHNlbGVjdGFsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzZWxlY3RhbGwiKTsKCiAgICAgICAgICBpZiAoc2VsZWN0YWxsLmNoZWNrZWQgPT0gdHJ1ZSkgewogICAgICAgICAgICBzZWxlY3RhbGwuY2hlY2tlZCA9IGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciB0ZW1wID0gdGhpcy5jaGVja2VkX2xpc3QuZmlsdGVyKGZ1bmN0aW9uIChyb2xlKSB7CiAgICAgICAgICAgIHJldHVybiByb2xlICE9PSBpbmRleDsKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSB0ZW1wOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGVkaXRfcm9sZTogZnVuY3Rpb24gZWRpdF9yb2xlKGluZGV4KSB7CiAgICAgIHRoaXMub2xkX3JvbGVfbmFtZSA9IHRoaXMucm9sZV9uYW1lW2luZGV4XTsKICAgICAgdGhpcy5yb2xlX25hbWVzID0gdGhpcy5yb2xlX25hbWVbaW5kZXhdOwogICAgICB0aGlzLnVzZXJfdHlwZSA9IHRoaXMudXNlcl90eXBlX2xpc3RbaW5kZXhdOwogICAgICB0aGlzLmFkZF9lZGl0ID0gImZhbHNlIjsKICAgIH0sCiAgICBkZWxldGVfcm9sZTogZnVuY3Rpb24gZGVsZXRlX3JvbGUoaW5kZXgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB0aGlzLmRlbGV0ZV9saXN0ID0gW107CiAgICAgIHRoaXMuZGVsZXRlX2xpc3QucHVzaCh0aGlzLnJvbGVfbmFtZVtpbmRleF0pOwogICAgICB0aGlzLnJvbGVfbmFtZXMgPSB0aGlzLnJvbGVfbmFtZVtpbmRleF0sIHRoaXMudXNlcl90eXBlID0gdGhpcy51c2VyX3R5cGVfbGlzdFtpbmRleF07CiAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgdGl0bGU6IHRoaXMudGx0KCdhZGRfcm9sZV9kZWxldGVfc3dhbF9hbGVydF9tc2cnKSwKICAgICAgICB0ZXh0OiB0aGlzLnRsdCgnYWRkX3JvbGVfbm9fcmV2ZXJ0X21zZycpLAogICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAiI2QzMyIsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IHRoaXMudGx0KCdhZGRfcm9sZV9zd2FsX2RlbGV0ZV9tc2cnKQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7CiAgICAgICAgICBfdGhpczIuZGVsZXRlX2xpc3QgPSBbXTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMubWFpbl9yb2xlX3VybCgpLCB7CiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IF90aGlzMi4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogX3RoaXMyLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXMyLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIGVtYWlsOiBfdGhpczIuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgdG9rZW46IF90aGlzMi4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgZGVsZXRlX3JvbGVzOiBbewogICAgICAgICAgICAgIFJvbGU6IF90aGlzMi5yb2xlX25hbWVzLAogICAgICAgICAgICAgIFVzZXJUeXBlOiBfdGhpczIudXNlcl90eXBlCiAgICAgICAgICAgIH1dLAogICAgICAgICAgICBpc0RlbGV0ZTogdHJ1ZQogICAgICAgICAgfSwgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdChfdGhpczIuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICB9CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBfdGhpczIuZGVsZXRlX2xpc3QgPSBbXTsKCiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXMyLmFwaV9zdGF0dXNfY29kZS5VU0VSX1JPTEVTX0RFTEVURURfU1VDQ0VTU0ZVTExZXzIwMDIuTVNHX0NPREUpIHsKICAgICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgICAgdGl0bGU6IF90aGlzMi50bHQoJ2FkZF9yb2xlX3N3YWxfZGVsZXRlZF9tc2cnKSwKICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzMi50bHQoJ2FkZF9yb2xlX3lvdXJfcm9sZV9kZWxldGVkX21zZycpLAogICAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgdGltZXI6IDIwMDAKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaWYgKF90aGlzMi5yb2xlX25hbWUubGVuZ3RoID09PSAxICYmIF90aGlzMi5kZWxldGVfbGlzdC5sZW5ndGggPT09IDEgJiYgX3RoaXMyLnBhZ2Vfbm8gPiAxKSB7CiAgICAgICAgICAgICAgICBfdGhpczIucGFnZV9ubyA9IF90aGlzMi5wYWdlX25vIC0gMTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzMi5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXMyLmFwaV9zdGF0dXNfY29kZS5VU0VSX0VYSVNULk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgdGV4dDogX3RoaXMyLnRsdCgnYWRkX3JvbGVfdXNlcl9leGlzdF9naXZlbl9yb2xlX21zZycpLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgX3RoaXMyLmxvYWRfcm9sZSgpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczIuYXBpX3N0YXR1c19jb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUi5NU0dfQ09ERSkgewogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzMi50bHQoJ2FkZF9yb2xlX2ludGVybmFsX3NlcnZlcl9tc2cnKSwKICAgICAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIF90aGlzMi5kZWxldGVfbGlzdCA9IFtdOwoKICAgICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgICAgX3RoaXMyLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGRlbGV0ZV9tdWx0aXBsZV9yb2xlOiBmdW5jdGlvbiBkZWxldGVfbXVsdGlwbGVfcm9sZSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLmRlbGV0ZV9saXN0ID0gW107CiAgICAgIHZhciBsZW4gPSB0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGg7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jaGVja2VkX2xpc3RbaV07CiAgICAgICAgdGhpcy5kZWxldGVfbGlzdC5wdXNoKHsKICAgICAgICAgIFJvbGU6IHRoaXMucm9sZV9uYW1lW2luZGV4XSwKICAgICAgICAgIFVzZXJUeXBlOiB0aGlzLnVzZXJfdHlwZV9saXN0W2luZGV4XQogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAodGhpcy5kZWxldGVfbGlzdC5sZW5ndGggIT0gMCkgewogICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICB0aXRsZTogdGhpcy50bHQoJ2FkZF9yb2xlX3N3YWxfZGVsZXRlX21zZycpLAogICAgICAgICAgdGV4dDogdGhpcy50bHQoJ2FkZF9yb2xlX25vX3JldmVydF9tc2cyJyksCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IHRoaXMudGx0KCdhZGRfcm9sZV9zd2FsX2RlbGV0ZV9tc2cyJykKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHsKICAgICAgICAgICAgX3RoaXMzLmRlbGV0ZV9saXN0ID0gW107CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgICBfdGhpczMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMubWFpbl9yb2xlX3VybCgpLCB7CiAgICAgICAgICAgICAgY29tcGFueV9pZDogX3RoaXMzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IF90aGlzMy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXMzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgZW1haWw6IF90aGlzMy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIHRva2VuOiBfdGhpczMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgZGVsZXRlX3JvbGVzOiBfdGhpczMuZGVsZXRlX2xpc3QsCiAgICAgICAgICAgICAgaXNEZWxldGU6IHRydWUKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXMzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgX3RoaXMzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICAgIF90aGlzMy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICAgICAgICBfdGhpczMuZGVsZXRlX2xpc3QgPSBbXTsKCiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczMuYXBpX3N0YXR1c19jb2RlLlVTRVJfUk9MRVNfREVMRVRFRF9TVUNDRVNTRlVMTFlfMjAwMi5NU0dfQ09ERSkgewogICAgICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgICAgdGl0bGU6IF90aGlzMy50bHQoJ2FkZF9yb2xlX3N3YWxfZGVsZXRlZF9tc2cyJyksCiAgICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzMy50bHQoJ2FkZF9yb2xlX3lvdXJfcm9sZV9kZWxldGVkX21zZzInKSwKICAgICAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjAwMAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKF90aGlzMy5kZWxldGVfbGlzdC5sZW5ndGggPT09IF90aGlzMy5yb2xlX25hbWUubGVuZ3RoICYmIF90aGlzMy5wYWdlX25vID4gMSkgewogICAgICAgICAgICAgICAgICBfdGhpczMucGFnZV9ubyA9IF90aGlzMy5wYWdlX25vIC0gMTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpczMubG9hZF9yb2xlKCk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXMzLmFwaV9zdGF0dXNfY29kZS5VU0VSX0VYSVNULk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgICBfdGhpczMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgICAgICBfdGhpczMuY2hlY2tlZF9saXN0ID0gW107CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgICAgdGV4dDogX3RoaXMzLnRsdCgnYWRkX3JvbGVfdXNlcl9leGlzdF9naXZlbl9yb2xlX21zZzInKSwKICAgICAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIF90aGlzMy5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgX3RoaXMzLmRlbGV0ZV9saXN0ID0gW107CgogICAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgICAgX3RoaXMzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgIHRpdGxlOiB0aGlzLnRsdCgnYWRkX3JvbGVfbm9fcm9sZV9zZWxlY3RlZF9tc2cnKSwKICAgICAgICAgIHRleHQ6ICIiLAogICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIHRpbWVyOiAyMDAwCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBhZGRfcm9sZXM6IGZ1bmN0aW9uIGFkZF9yb2xlcygpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgaWYgKHRoaXMuYWRkX2VkaXQgPT0gInRydWUiKSB7CiAgICAgICAgaWYgKHRoaXMudXNlcl90eXBlID09PSBudWxsKSB7CiAgICAgICAgICB0b2FzdHIuZXJyb3IodGhpcy50bHQoJ2FkZF9yb2xlX3NlbGVjdF91c2VyX3R5cGVfbXNnJykpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5yb2xlX25hbWVzID09ICIiKSB7CiAgICAgICAgICB0b2FzdHIuZXJyb3IodGhpcy50bHQoJ2FkZF9yb2xlX2VudGVyX3JvbGVfbXNnJykpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5yb2xlX25hbWVzLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gImFkbWluIikgewogICAgICAgICAgdG9hc3RyLmVycm9yKHRoaXMudGx0KCdhZGRfcm9sZV9jYW5ub3RfYWRkX3JvbGVfbXNnJykpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5yb2xlX25hbWVzLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gInN1cGVyYWRtaW5jZW5zZSIpIHsKICAgICAgICAgIHRvYXN0ci5lcnJvcih0aGlzLnRsdCgnYWRkX3JvbGVfY2Fubm90X2FkZF9yb2xlX3N1cGVyX2FkbWluX21zZycpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKHRoaXMudXNlcl90eXBlID09ICJQb3J0YWwgVXNlciIpIHsKICAgICAgICAgICAgdGhpcy5yb2xlX25hbWVzID0gdGhpcy5yb2xlX25hbWVzLnRvTG9jYWxlTG93ZXJDYXNlKCkuaW5jbHVkZXMoInN1cHBvcnQiKSA/ICJzdXBwb3J0IGFnZW50IiA6IHRoaXMucm9sZV9uYW1lczsKICAgICAgICAgIH0KCiAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5tYWluX3JvbGVfdXJsKCksIHsKICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIHVzZXJfdHlwZTogdGhpcy51c2VyX3R5cGUsCiAgICAgICAgICAgIHJvbGVfbmFtZTogdGhpcy5yb2xlX25hbWVzLAogICAgICAgICAgICBpc0luc2VydDogdHJ1ZQogICAgICAgICAgfSwgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgICAgfQogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSAhPSBfdGhpczQuYXBpX3N0YXR1c19jb2RlLlVTRVJfUk9MRV9TRVRfQUxSRUFEWV9FWElTVFNfMjAwMi5NU0dfQ09ERSAmJiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgIT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUgJiYgcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFICE9IF90aGlzNC5hcGlfc3RhdHVzX2NvZGUuRU1QVFlfREFUQS5NU0dfQ09ERSAmJiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgIT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5TVVBFUl9BRE1JTl9FWElTVFNfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzNC5hcGlfc3RhdHVzX2NvZGUuVVNFUl9ST0xFX1NFVF9TVUNDRVNTRlVMTFlfMjAwMi5NU0dfQ09ERSkgewogICAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzNC50bHQoJ2FkZF9yb2xlX2FkZGVkX3N1Y2Nlc3NmdWxfbXNnJyksCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgdGltZXI6IDIwMDAKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIF90aGlzNC5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzNC5hcGlfc3RhdHVzX2NvZGUuVVNFUl9ST0xFX1NFVF9BTFJFQURZX0VYSVNUU18yMDAyLk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczQudGx0KCdhZGRfcm9sZV9hbHJlYWR5X2V4aXN0c19tc2cnKSwKICAgICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF90aGlzNC5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5TVVBFUl9BRE1JTl9FWElTVFNfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzNC50bHQoJ2FkZF9yb2xlX3N1cGVyX2FkbWluX3JvbGVfY2Fubm90X2FkZF9tc2cnKSwKICAgICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF90aGlzNC5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczQudGx0KCdhZGRfcm9sZV9pbnRlcm5hbF9zZXJ2ZXJfbXNnJyksCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBfdGhpczQubG9hZF9yb2xlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgIF90aGlzNC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLmNsb3NlX21vZGFsKCdzYXZlX2FuZF9jbG9zZV9idG4nKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodGhpcy5hZGRfZWRpdCA9PSAiZmFsc2UiKSB7CiAgICAgICAgaWYgKHRoaXMucm9sZV9uYW1lcyA9PSAiIikgewogICAgICAgICAgdG9hc3RyLmVycm9yKHRoaXMudGx0KCdhZGRfcm9sZV9lbnRlcl9yb2xlX21zZzInKSk7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJvbGVfbmFtZXMudG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAiYWRtaW4iKSB7CiAgICAgICAgICB0b2FzdHIuZXJyb3IodGhpcy50bHQoJ2FkZF9yb2xlX2Nhbm5vdF9hZGRfcm9sZV9tc2cyJykpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5yb2xlX25hbWVzLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gInN1cGVyYWRtaW5jZW5zZSIpIHsKICAgICAgICAgIHRvYXN0ci5lcnJvcih0aGlzLnRsdCgnYWRkX3JvbGVfY2Fubm90X2FkZF9yb2xlX3N1cGVyX2FkbWluX21zZzInKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmICh0aGlzLnVzZXJfdHlwZSA9PSAiUG9ydGFsIFVzZXIiKSB7CiAgICAgICAgICAgIHRoaXMucm9sZV9uYW1lcyA9IHRoaXMucm9sZV9uYW1lcy50b0xvY2FsZUxvd2VyQ2FzZSgpLmluY2x1ZGVzKCJzdXBwb3J0IikgPyAic3VwcG9ydCBhZ2VudCIgOiB0aGlzLnJvbGVfbmFtZXM7CiAgICAgICAgICB9CgogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMubWFpbl9yb2xlX3VybCgpLCB7CiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICB1c2VyX3R5cGU6IHRoaXMudXNlcl90eXBlLAogICAgICAgICAgICByb2xlX25hbWU6IHRoaXMucm9sZV9uYW1lcywKICAgICAgICAgICAgb2xkX3JvbGVfbmFtZTogdGhpcy5vbGRfcm9sZV9uYW1lLAogICAgICAgICAgICBpc0VkaXQ6IHRydWUKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIF90aGlzNC5hZGRfZWRpdCA9ICJ0cnVlIjsKCiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgIT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5VU0VSX1JPTEVfU0VUX0FMUkVBRFlfRVhJU1RTXzIwMDIuTVNHX0NPREUgJiYgcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFICE9IF90aGlzNC5hcGlfc3RhdHVzX2NvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SLk1TR19DT0RFICYmIHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSAhPSBfdGhpczQuYXBpX3N0YXR1c19jb2RlLkVNUFRZX0RBVEEuTVNHX0NPREUgJiYgcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFICE9IF90aGlzNC5hcGlfc3RhdHVzX2NvZGUuU1VQRVJfQURNSU5fRVhJU1RTX0VSUk9SLk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczQuYXBpX3N0YXR1c19jb2RlLlVTRVJfUk9MRV9FRElURURfU1VDQ0VTU0ZVTExZXzIwMDIuTVNHX0NPREUpIHsKICAgICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczQudGx0KCdhZGRfcm9sZV9lZGl0ZWRfc3VjY2Vzc2Z1bF9tc2cnKSwKICAgICAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjAwMAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgX3RoaXM0LmxvYWRfcm9sZSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5VU0VSX1JPTEVfU0VUX0FMUkVBRFlfRVhJU1RTXzIwMDIuTVNHX0NPREUpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzNC50bHQoJ2FkZF9yb2xlX2FscmVhZHlfZXhpc3RzX21zZzInKSwKICAgICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF90aGlzNC5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5TVVBFUl9BRE1JTl9FWElTVFNfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzNC50bHQoJ2FkZF9yb2xlX3N1cGVyX2FkbWluX21zZzInKSwKICAgICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF90aGlzNC5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpczQudGx0KCdhZGRfcm9sZV9pbnRlcm5hbF9zZXJ2ZXJfbXNnMicpLAogICAgICAgICAgICAgICAgdGltZXI6IDMwMDAKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgX3RoaXM0LmxvYWRfcm9sZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICBfdGhpczQuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5jbG9zZV9tb2RhbCgnc2F2ZV9hbmRfY2xvc2VfYnRuJyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHRoaXMudXNlcl90eXBlID09IG51bGwpIHsKICAgICAgICB0b2FzdHIuZXJyb3IodGhpcy50bHQoJ2FkZF9yb2xlX3NlbGVjdF91c2VyX3R5cGVfbXNnMicpKTsKICAgICAgfQogICAgfSwKICAgIHBhZ2VfY2hhbmdlOiBmdW5jdGlvbiBwYWdlX2NoYW5nZShwYWdlbm8pIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICB0aGlzLmRlbGV0ZV9saXN0ID0gW107CiAgICAgIHRoaXMuYWRkX2VkaXQgPSAidHJ1ZSI7CiAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKCiAgICAgIGlmIChwYWdlbm8gPT0gMCB8fCBwYWdlbm8gPT0gdGhpcy50b3RhbF9wYWdlcyArIDEpIHt9IGVsc2UgewogICAgICAgIGlmICh0aGlzLnNlYXJjaF9uYW1lID09ICIiKSB7CiAgICAgICAgICBpZiAocGFnZW5vID09ICIuLi5zIikgewogICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKDEgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgICB9IGVsc2UgaWYgKHBhZ2VubyA9PSAiLi4ubCIpIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCh0aGlzLnRvdGFsX3BhZ2VzICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gcGFnZW5vOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLm1haW5fcm9sZV91cmwoKSwgewogICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICAgICAgaXNTaG93OiB0cnVlCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICB9CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBfdGhpczUuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFICE9IF90aGlzNS5hcGlfc3RhdHVzX2NvZGUuRU1QVFlfREFUQS5NU0dfQ09ERSkgewogICAgICAgICAgICAgIF90aGlzNS5vcmdhbml6ZV9yb2xlcyhyZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM1LmFwaV9zdGF0dXNfY29kZS5FTVBUWV9EQVRBLk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKF90aGlzNS50bHQoJ2FkZF9yb2xlX25vX3JvbGVfZm91bmRfbXNnJykpOwoKICAgICAgICAgICAgICBfdGhpczUubG9hZF9yb2xlKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzNS5hcGlfc3RhdHVzX2NvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SLk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKF90aGlzNS50bHQoJ2FkZF9yb2xlX2ludGVybmFsX3NlcnZlcl9tc2czJykpOwoKICAgICAgICAgICAgICBfdGhpczUubG9hZF9yb2xlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgIF90aGlzNS4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChwYWdlbm8gPT0gIi4uLnMiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgoMSArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSBpZiAocGFnZW5vID09ICIuLi5sIikgewogICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKHRoaXMudG90YWxfcGFnZXMgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBwYWdlbm87CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMubWFpbl9yb2xlX3VybCgpLCB7CiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICBwYWdlX25vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgICAgICBpc3NlYXJjaDogdHJ1ZSwKICAgICAgICAgICAgc2VhcmNoc3RyaW5nOiB0aGlzLnNlYXJjaF9uYW1lCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICB9CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBfdGhpczUuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFICE9IF90aGlzNS5hcGlfc3RhdHVzX2NvZGUuRU1QVFlfREFUQS5NU0dfQ09ERSkgewogICAgICAgICAgICAgIF90aGlzNS5vcmdhbml6ZV9yb2xlcyhyZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgICAgX3RoaXM1LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczUuYXBpX3N0YXR1c19jb2RlLkVNUFRZX0RBVEEuTVNHX0NPREUpIHsKICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoX3RoaXM1LnRsdCgnYWRkX3JvbGVfbm9fcm9sZV9mb3VuZF9tc2cnKSk7CgogICAgICAgICAgICAgIF90aGlzNS5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM1LmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoX3RoaXM1LnRsdCgnYWRkX3JvbGVfaW50ZXJuYWxfc2VydmVyX21zZzMnKSk7CgogICAgICAgICAgICAgIF90aGlzNS5sb2FkX3JvbGUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgb3JnYW5pemVfcm9sZXM6IGZ1bmN0aW9uIG9yZ2FuaXplX3JvbGVzKHJvbGVzX2xpc3QpIHsKICAgICAgLy8gdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJvbGVzX2xpc3QubnVtYmVyX29mX3Jvd3M7CiAgICAgIHRoaXMucm9sZV9uYW1lID0gW107CiAgICAgIHRoaXMudXNlcl90eXBlX2xpc3QgPSBbXTsKICAgICAgdGhpcy50b3RhbF9wYWdlcyA9IHJvbGVzX2xpc3QucGFnaW5hdGlvbi50b3RhbF9wYWdlID09IHVuZGVmaW5lZCA/IDAgOiByb2xlc19saXN0LnBhZ2luYXRpb24udG90YWxfcGFnZTsKICAgICAgdmFyIHBvcnRhbF9sZW4gPSByb2xlc19saXN0LmRhdGEuUG9ydGFsLmxlbmd0aDsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9ydGFsX2xlbjsgaSsrKSB7CiAgICAgICAgdGhpcy51c2VyX3R5cGVfbGlzdC5wdXNoKCJQb3J0YWwgVXNlciIpOwogICAgICAgIHRoaXMucm9sZV9uYW1lLnB1c2gocm9sZXNfbGlzdC5kYXRhLlBvcnRhbFtpXSk7CiAgICAgIH0KCiAgICAgIHZhciBib3RfbGVuID0gcm9sZXNfbGlzdC5kYXRhLkJvdC5sZW5ndGg7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdF9sZW47IGkrKykgewogICAgICAgIHRoaXMudXNlcl90eXBlX2xpc3QucHVzaCgiQm90IFVzZXIiKTsKICAgICAgICB0aGlzLnJvbGVfbmFtZS5wdXNoKHJvbGVzX2xpc3QuZGF0YS5Cb3RbaV0pOwogICAgICB9CgogICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgIH0sCiAgICBwYWdpbmF0aW9uX2NsYXNzOiBmdW5jdGlvbiBwYWdpbmF0aW9uX2NsYXNzKGluZGV4KSB7CiAgICAgIGlmIChpbmRleCA9PSB0aGlzLnBhZ2Vfbm8pIHsKICAgICAgICByZXR1cm4gIiBhY3RpdmUiOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAiIjsKICAgICAgfQogICAgfSwKICAgIGNhbGxzZWFyY2g6IGZ1bmN0aW9uIGNhbGxzZWFyY2goKSB7CiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMykgewogICAgICAgIHRoaXMuc2VhcmNoX3Byb2R1Y3QoKTsKICAgICAgfQogICAgfSwKICAgIHNlYXJjaF9wcm9kdWN0OiBmdW5jdGlvbiBzZWFyY2hfcHJvZHVjdCgpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSAhPSAiIikgewogICAgICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gW107CiAgICAgICAgdGhpcy5kZWxldGVfbGlzdCA9IFtdOwogICAgICAgIHRoaXMuYWRkX2VkaXQgPSAidHJ1ZSI7CiAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5tYWluX3JvbGVfdXJsKCksIHsKICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIGlzc2VhcmNoOiB0cnVlLAogICAgICAgICAgc2VhcmNoc3RyaW5nOiB0aGlzLnNlYXJjaF9uYW1lLAogICAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgICBwYWdlX25vOiAxCiAgICAgICAgfSwgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczYuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICBfdGhpczYuc2hvd19sb2FkZXIgPSBmYWxzZTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFICE9IF90aGlzNi5hcGlfc3RhdHVzX2NvZGUuRU1QVFlfREFUQS5NU0dfQ09ERSAmJiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgIT0gX3RoaXM2LmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgX3RoaXM2LnBhZ2Vfbm8gPSAxOwoKICAgICAgICAgICAgX3RoaXM2Lm9yZ2FuaXplX3JvbGVzKHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM2LmFwaV9zdGF0dXNfY29kZS5FTVBUWV9EQVRBLk1TR19DT0RFKSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcihfdGhpczYudGx0KCdhZGRfcm9sZV9ub19yb2xlX2ZvdW5kX21zZycpKTsKCiAgICAgICAgICAgIF90aGlzNi5sb2FkX3JvbGUoKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzNi5hcGlfc3RhdHVzX2NvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SLk1TR19DT0RFKSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcihfdGhpczYudGx0KCdhZGRfcm9sZV9pbnRlcm5hbF9zZXJ2ZXJfbXNnMycpKTsKCiAgICAgICAgICAgIF90aGlzNi5sb2FkX3JvbGUoKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0b2FzdHIuZXJyb3IodGhpcy50bHQoJ2FkZF9yb2xlX2RhdGFfZm9yX3NlYXJjaF9tc2cnKSk7CiAgICAgIH0KICAgIH0sCiAgICBzZXRwYWdpbmF0aW9uOiBmdW5jdGlvbiBzZXRwYWdpbmF0aW9uKHBhZ2Vfbm8pIHsKICAgICAgdGhpcy5wYWdlX2FycmF5ID0gW107CgogICAgICBpZiAodGhpcy50b3RhbF9wYWdlcyA8PSA3KSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvdGFsX3BhZ2VzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSAxKSB7CiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IDQ7IF9pKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKF9pICsgMSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPT0gdGhpcy50b3RhbF9wYWdlcykgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICAgIGZvciAodmFyIF9pMiA9IHRoaXMudG90YWxfcGFnZXMgLSA0OyBfaTIgPCB0aGlzLnRvdGFsX3BhZ2VzOyBfaTIrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2kyICsgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPD0gNCkgewogICAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IHBhZ2Vfbm8gKyAzOyBfaTMrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2kzICsgMSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPj0gdGhpcy50b3RhbF9wYWdlcyAtIDQpIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwoKICAgICAgICBmb3IgKHZhciBfaTQgPSBwYWdlX25vIC0gNDsgX2k0IDwgdGhpcy50b3RhbF9wYWdlczsgX2k0KyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKF9pNCArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwoKICAgICAgICBmb3IgKHZhciBfaTUgPSBwYWdlX25vIC0gMzsgX2k1IDw9IHBhZ2Vfbm8gKyAzOyBfaTUrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2k1KTsKICAgICAgICB9CgogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0KICAgIH0KICB9Cn07"},null]}