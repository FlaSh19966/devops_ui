{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Settings/GeneralTab.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Settings/GeneralTab.vue","mtime":1663910265478},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIudXJsIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFZ1ZVBob25lTnVtYmVySW5wdXQgZnJvbSAndnVlLXBob25lLW51bWJlci1pbnB1dCc7CmltcG9ydCAndnVlLXBob25lLW51bWJlci1pbnB1dC9kaXN0L3Z1ZS1waG9uZS1udW1iZXItaW5wdXQuY3NzJzsKaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IFN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwppbXBvcnQgYXBpX2NhbGxzIGZyb20gIkAvcG9ydGFsL2FwaV9jYWxscyI7CmltcG9ydCB7IGZyZWV6ZV9wb3J0YWwsIHNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbCB9IGZyb20gIkAvcG9ydGFsL21peGlucyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTWlzY2VsbGFuZW91c1BhZ2UiLAogIGNvbXBvbmVudHM6IHsKICAgIFZ1ZVBob25lTnVtYmVySW5wdXQ6IFZ1ZVBob25lTnVtYmVySW5wdXQKICB9LAogIG1peGluczogW2ZyZWV6ZV9wb3J0YWwsIHNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbF0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGVtYWlsX2RldGFpbHM6IG51bGwsCiAgICAgIGVtYWlsX2Rpc2FibGU6IGZhbHNlLAogICAgICBjb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgZmlsZV9sYWJlbDogIkNob29zZSBmaWxlIiwKICAgICAgY3VycmVudF9saWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICBzcGlubmVyT24xOiBmYWxzZSwKICAgICAgc3Bpbm5lck9uMjogZmFsc2UsCiAgICAgIG9sZF9pbWFnZV9uYW1lOiBudWxsLAogICAgICBkaXNhYmxlX2J0bl9leHBpcmVkOiBmYWxzZSwKICAgICAgdmVyaWZpY2F0aW9uX3N0YXR1czogbnVsbCwKICAgICAgcmVzZXRfaWNvbl9wYXRoOiByZXF1aXJlKCJAL3BvcnRhbC9hc3NldHMvaW1nL3Jlc2V0X2ljb24uc3ZnIiksCiAgICAgIGlzX3JldGFpbDogZmFsc2UsCiAgICAgIGNvbnRhY3RfdXNfcGhvbmVfbnVtYmVyOiBudWxsLAogICAgICByZXRhaWxfd2ViX2ZyYW1ld29yazogdGhpcy4kc2Vzc2lvbi5nZXQoInJldGFpbF93ZWJfZnJhbWV3b3JrIiksCiAgICAgIHBob25lTnVtYmVyOiBudWxsLAogICAgICBjb250YWN0X3VzX2VtYWlsOiAiIiwKICAgICAgZW1haWxfdmFsaWRpdHk6IC9eKFswLTlhLXpBLVpdKFstLlx3XSpbMC05YS16QS1aXSkqQChbMC05YS16QS1aXVstXHddKlswLTlhLXpBLVpdXC4pK1thLXpBLVpdezIsOX0pJC8KICAgIH07CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB2YXIgYm90X3RlbXBsYXRlc19kYXRhID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkJvdFRlbXBsYXRlcyIpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm90X3RlbXBsYXRlc19kYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChib3RfdGVtcGxhdGVzX2RhdGFbaV0uZG9tYWluID09PSAiUmV0YWlsIiAmJiBib3RfdGVtcGxhdGVzX2RhdGFbaV0uc3Vic2NyaWJlZCA9PT0gdHJ1ZSkgewogICAgICAgIHRoaXMuaXNfcmV0YWlsID0gdHJ1ZTsKICAgICAgfQogICAgfQoKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5mcmVlemVfcG9ydGFsKCk7CiAgICB9LCAxMDAwKTsKICAgIHRoaXMuJHJvb3QuJG9uKCJNaXNjZWxsYW5lb3VzUGFnZURpc2FibGVkIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHsKICAgICAgICBfdGhpcy5kaXNhYmxlX2J0bl9leHBpcmVkID0gdHJ1ZTsKICAgICAgfQogICAgfSk7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgaWYgKHRoaXMuaXNfcmV0YWlsID09IHRydWUpIHsKICAgICAgdGhpcy5sb2FkX3Byb2R1Y3Rfc2V0dGluZ3MoKTsKICAgIH0KCiAgICB0aGlzLmdldF9jb21wYW55X2xvZ28oKTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICB2YWxpZEVtYWlsOiBmdW5jdGlvbiB2YWxpZEVtYWlsKCkgewogICAgICBpZiAodGhpcy5jb250YWN0X3VzX2VtYWlsICE9IG51bGwpIHsKICAgICAgICBpZiAodGhpcy5lbWFpbF92YWxpZGl0eS50ZXN0KHRoaXMuY29udGFjdF91c19lbWFpbCkpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gdGhpcy50bHQoIm90aGVyX2VudGVyX3ZhbGlkX2VtYWlsX21zZyIpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgY29uZmlndXJlX3Byb2R1Y3Rfc2V0dGluZ3M6IGZ1bmN0aW9uIGNvbmZpZ3VyZV9wcm9kdWN0X3NldHRpbmdzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICBpZiAodGhpcy52YWxpZEVtYWlsICE9IHRydWUgJiYgIUJvb2xlYW4odGhpcy5waG9uZU51bWJlcikpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCdvdGhlcl92YWxpZF9lbWFpbF9vcl9udW1iZXJfbXNnJyksCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICB0aW1lcjogMzAwMAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfSAvLyBpZiAoIUJvb2xlYW4odGhpcy5waG9uZU51bWJlcikpIHsKICAgICAgLy8gICBTd2FsKHsKICAgICAgLy8gICAgIHRleHQ6ICJQbGVhc2UgZW50ZXIgYSB2YWxpZCBQaG9uZSBOdW1iZXIiLAogICAgICAvLyAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAvLyAgICAgdGltZXI6IDMwMDAsCiAgICAgIC8vICAgfSk7CiAgICAgIC8vICAgcmV0dXJuOwogICAgICAvLyBlbHNlIGlmICh0aGlzLnBob25lTnVtYmVyLmlzVmFsaWQgIT0gdHJ1ZSkgewogICAgICAvLyAgIFN3YWwoewogICAgICAvLyAgICAgdGV4dDogIlBsZWFzZSBlbnRlciBhIHZhbGlkIFBob25lIE51bWJlciIsCiAgICAgIC8vICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgIC8vICAgICB0aW1lcjogMzAwMCwKICAgICAgLy8gICB9KTsKICAgICAgLy8gICByZXR1cm47CiAgICAgIC8vIH0KCgogICAgICB0aGlzLmJpZ19zcGlubmVyID0gdHJ1ZTsKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMucHJvZHVjdF9zZXR0aW5ncygpLCB7CiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICBpc19lbWFpbF9yZXF1aXJlZDogdHJ1ZSwKICAgICAgICBlbWFpbF9yZXF1aXJlZDogewogICAgICAgICAgY29udGFjdF9oZWxwX2VtYWlsOiB0aGlzLmNvbnRhY3RfdXNfZW1haWwsCiAgICAgICAgICBjb250YWN0X3VzX3Bob25lX251bWJlcjogQm9vbGVhbih0aGlzLnBob25lTnVtYmVyKSAmJiB0aGlzLnBob25lTnVtYmVyLmlzVmFsaWQgPT0gdHJ1ZSA/IHRoaXMucGhvbmVOdW1iZXIuZm9ybWF0dGVkTnVtYmVyIDogbnVsbAogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzMi5iaWdfc3Bpbm5lciA9IGZhbHNlOwoKICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczIuYXBpX3N0YXR1c19jb2RlLlNVQ0NFU1NGVUxfREJfUVVFUlkuTVNHX0NPREUpIHsKICAgICAgICAgIFN3YWwoewogICAgICAgICAgICB0ZXh0OiBfdGhpczIudGx0KCdvdGhlcl9jaGFuZ2VzX3NhdmVkX21zZycpLAogICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgIHRpbWVyOiA0MDAwCiAgICAgICAgICB9KTsKCiAgICAgICAgICBfdGhpczIuZW1wdHlfdmFyaWFibGUoKTsKCiAgICAgICAgICBfdGhpczIubG9hZF9wcm9kdWN0X3NldHRpbmdzKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIFN3YWwoewogICAgICAgICAgICB0aXRsZTogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHLAogICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzMi5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgIHRvYXN0ci5lcnJvcihfdGhpczIudGx0KCdvdGhlcl9lcnJvcl9vY2N1cl9tc2c0JykpOwoKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzMi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGxvYWRfcHJvZHVjdF9zZXR0aW5nczogZnVuY3Rpb24gbG9hZF9wcm9kdWN0X3NldHRpbmdzKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSB0cnVlOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3NldHRpbmdzKCksIHsKICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgIGlzX2dldDogdHJ1ZQogICAgICB9LCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXMzLmFwaV9zdGF0dXNfY29kZS5EQVRBX0FWQUlMQUJMRS5NU0dfQ09ERSkgewogICAgICAgICAgX3RoaXMzLmJpZ19zcGlubmVyID0gZmFsc2U7CiAgICAgICAgICB2YXIgd2ViZnJhbWV3b3JrID0gX3RoaXMzLnJldGFpbF93ZWJfZnJhbWV3b3JrOwoKICAgICAgICAgIGlmICh3ZWJmcmFtZXdvcmsgPT09IG51bGwgfHwgd2ViZnJhbWV3b3JrID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgd2ViZnJhbWV3b3JrID0gdW5kZWZpbmVkOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgIT0gX3RoaXMzLmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUgJiYgcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFICE9IF90aGlzMy5hcGlfc3RhdHVzX2NvZGUuRU1QVFlfREFUQS5NU0dfQ09ERSkgewogICAgICAgICAgICBfdGhpczMuY29udGFjdF91c19lbWFpbCA9IHdlYmZyYW1ld29yayA9PT0gdW5kZWZpbmVkID8gcmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbHMuY29udGFjdF9oZWxwX2VtYWlsIDogcmVzcG9uc2UuZGF0YS5kYXRhW3dlYmZyYW1ld29yayArICJfZGV0YWlscyJdLmNvbnRhY3RfaGVscF9lbWFpbDsKICAgICAgICAgICAgX3RoaXMzLmNvbnRhY3RfdXNfcGhvbmVfbnVtYmVyID0gd2ViZnJhbWV3b3JrID09PSB1bmRlZmluZWQgPyByZXNwb25zZS5kYXRhLmRhdGEuZGV0YWlscy5jb250YWN0X3VzX3Bob25lX251bWJlciA6IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5jb250YWN0X3VzX3Bob25lX251bWJlcjsKICAgICAgICAgICAgX3RoaXMzLmVtYWlsX2RldGFpbHMgPSB3ZWJmcmFtZXdvcmsgPT09IHVuZGVmaW5lZCA/IHJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWxzLnNlbmRlcl9lbWFpbCA6IHJlc3BvbnNlLmRhdGEuZGF0YVt3ZWJmcmFtZXdvcmsgKyAiX2RldGFpbHMiXS5zZW5kZXJfZW1haWw7CgogICAgICAgICAgICBfdGhpczMuZW1haWxfdmVyaWZpY2F0aW9uX3N0YXR1cygpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSwKICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TRywKICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczMuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICB0b2FzdHIuZXJyb3IoX3RoaXMzLnRsdCgib3RoZXJfZXJyb3Jfb2NjdXJfbXNnIikpOwoKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzMy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGVtYWlsX3ZlcmlmaWNhdGlvbl9zdGF0dXM6IGZ1bmN0aW9uIGVtYWlsX3ZlcmlmaWNhdGlvbl9zdGF0dXMoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuZW1haWxfZGV0YWlscyAhPSBudWxsICYmIHRoaXMuZW1haWxfZGV0YWlscyAhPSAiIikgewogICAgICAgIHRoaXMuZW1haWxfZGlzYWJsZSA9IHRydWU7CiAgICAgICAgdGhpcy5iaWdfc3Bpbm5lciA9IHRydWU7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMucHJvZHVjdF9zZXR0aW5ncygpLCB7CiAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBpc19lbWFpbF92ZXJpZmljYXRpb25fc3RhdHVzOiB0cnVlLAogICAgICAgICAgZW1haWxfaWQ6IHRoaXMuZW1haWxfZGV0YWlscwogICAgICAgIH0sIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXM0LmJpZ19zcGlubmVyID0gZmFsc2U7CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSAhPSBfdGhpczQuYXBpX3N0YXR1c19jb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUi5NU0dfQ09ERSAmJiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgIT0gX3RoaXM0LmFwaV9zdGF0dXNfY29kZS5OT19EQVRBX0FWQUlMQUJMRS5NU0dfQ09ERSkgewogICAgICAgICAgICB2YXIgc3RhdHVzID0gcmVzcG9uc2UuZGF0YS5kYXRhLnZlcmlmaWNhdGlvbl9zdGF0dXM7CiAgICAgICAgICAgIF90aGlzNC52ZXJpZmljYXRpb25fc3RhdHVzID0gc3RhdHVzID09ICJTdWNjZXNzIiA/ICJTdWNjZXNzIiA6IHN0YXR1cyA9PSAiUGVuZGluZyIgPyBfdGhpczQudGx0KCJvdGhlcl9wZW5kaW5nX3ZlcmlmeV9lbWFpbF9tc2ciKSA6IHN0YXR1cyArIF90aGlzNC50bHQoIm90aGVyX2xpbmtfZXhwaXJlZF9tc2ciKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRpdGxlOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUsCiAgICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TRywKICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgX3RoaXM0LmJpZ19zcGlubmVyID0gZmFsc2U7CgogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGluaXRpYWxpemVfdG9vbHRpcHM6IGZ1bmN0aW9uIGluaXRpYWxpemVfdG9vbHRpcHMoKSB7CiAgICAgICQoJ1tkYXRhLXRvb2x0aXA9InRvb2x0aXAiXScpLnRvb2x0aXAoewogICAgICAgIHRyaWdnZXI6ICJtYW51YWwiCiAgICAgIH0pOwogICAgfSwKICAgIGNvcHlfbGljZW5zZV9rZXk6IGZ1bmN0aW9uIGNvcHlfbGljZW5zZV9rZXkoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdGhpcy4kcmVmcy5saWNlbnNlX2tleV90ZXh0YXJlYS5zZWxlY3QoKTsKICAgICAgdGhpcy4kcmVmcy5saWNlbnNlX2tleV90ZXh0YXJlYS5zZXRTZWxlY3Rpb25SYW5nZSgwLCA5OTk5OSk7CiAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCJjb3B5Iik7CiAgICAgICQoIiNjb3B5X2xpY25zZV9rZXlfdG9vbHRpcCIpLnRvb2x0aXAoInNob3ciKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgiI2NvcHlfbGljbnNlX2tleV90b29sdGlwIikudG9vbHRpcCgiZGlzcG9zZSIpOwoKICAgICAgICBfdGhpczUuaW5pdGlhbGl6ZV90b29sdGlwcygpOwogICAgICB9LCA1MDAwKTsKICAgIH0sCiAgICBmaWxlaW5wdXQ6IGZ1bmN0aW9uIGZpbGVpbnB1dChlKSB7CiAgICAgIHZhciBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzIHx8IGUuZGF0YVRyYW5zZmVyLmZpbGVzOwoKICAgICAgaWYgKGZpbGVzWzBdLnNpemUgPiAyMDk3MTUyKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgib3RoZXJfdXBsb2FkX2NvbXBhbnlfbG9nb19tc2ciKSwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMTAwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChmaWxlc1swXS50eXBlID09PSAiaW1hZ2UvcG5nIiB8fCBmaWxlc1swXS50eXBlID09PSAiaW1hZ2UvanBlZyIpIHsKICAgICAgICBpZiAoIWZpbGVzLmxlbmd0aCkgcmV0dXJuOwogICAgICAgIHRoaXMub2xkX2ltYWdlX25hbWUgPSB0aGlzLmZpbGVfbGFiZWw7CiAgICAgICAgdGhpcy5maWxlX2xhYmVsID0gZmlsZXNbMF0ubmFtZTsKICAgICAgICB0aGlzLmNyZWF0ZUltYWdlKGZpbGVzWzBdKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCJvdGhlcl9zZWxlY3RfaW1nX3R5cGVfbXNnIiksCiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGNyZWF0ZUltYWdlOiBmdW5jdGlvbiBjcmVhdGVJbWFnZShmaWxlLCB0eXBlKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczYuaW1hZ2VfZmlsZSA9IGUudGFyZ2V0LnJlc3VsdC5zcGxpdCgiYmFzZTY0LCIpWzFdOwogICAgICB9OwoKICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICB9LAogICAgZ2V0X2NvbXBhbnlfbG9nbzogZnVuY3Rpb24gZ2V0X2NvbXBhbnlfbG9nbygpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy51cGxvYWRfY29tcGFueV9sb2dvKCksIHsKICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgIGlzX2dldDogdHJ1ZQogICAgICB9LCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXM3LmFwaV9zdGF0dXNfY29kZS5DT01QQU5ZX0lNQUdFX1VSTF9SRUNFSVZFRC5NU0dfQ09ERSkgewogICAgICAgICAgX3RoaXM3LmZpbGVfbGFiZWwgPSByZXNwb25zZS5kYXRhLmRhdGEuY29tcGFueV9pbWFnZV91cmwuc3BsaXQoIi8iKS5yZXZlcnNlKClbMF07CiAgICAgICAgICBfdGhpczcuZmlsZV9sYWJlbCA9IGRlY29kZVVSSShfdGhpczcuZmlsZV9sYWJlbCk7CiAgICAgICAgICBfdGhpczcub2xkX2ltYWdlX25hbWUgPSBfdGhpczcuZmlsZV9sYWJlbDsKCiAgICAgICAgICBpZiAoX3RoaXM3LmZpbGVfbGFiZWwgPT0gIiIpIHsKICAgICAgICAgICAgX3RoaXM3LmZpbGVfbGFiZWwgPSAiQ2hvb3NlIGZpbGUiOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczcuYXBpX3N0YXR1c19jb2RlLkRBVEFfTk9UX0ZPVU5ELk1TR19DT0RFKSB7fSBlbHNlIHsKICAgICAgICAgIFN3YWwoewogICAgICAgICAgICB0aXRsZTogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHLAogICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgIF90aGlzNy5maWxlX2xhYmVsID0gIkNob29zZSBmaWxlIjsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRfY29tcGFueV9maWxlIikudmFsdWUgPSAiIjsKCiAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICBfdGhpczcuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICB1cGxvYWRfY29tcGFueV9sb2dvX2ZpbGU6IGZ1bmN0aW9uIHVwbG9hZF9jb21wYW55X2xvZ29fZmlsZSgpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICBpZiAodGhpcy5maWxlX2xhYmVsID09IHRoaXMub2xkX2ltYWdlX25hbWUgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImlucHV0X2NvbXBhbnlfZmlsZSIpLnZhbHVlID09ICIiKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgib3RoZXJfc2VsZWN0X2ZpbGVfbXNnIiksCiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmJpZ19zcGlubmVyID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy51cGxvYWRfY29tcGFueV9sb2dvKCksIHsKICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIGltYWdlX25hbWU6IHRoaXMuZmlsZV9sYWJlbCwKICAgICAgICAgIGNvbXBhbnlfbG9nb19maWxlOiB0aGlzLmltYWdlX2ZpbGUsCiAgICAgICAgICBpc19pbWFnZV9lZGl0OiB0aGlzLmZpbGVfbGFiZWwgIT0gdGhpcy5vbGRfaW1hZ2VfbmFtZSA/IHRydWUgOiBmYWxzZSwKICAgICAgICAgIG9sZF9pbWFnZV9uYW1lOiB0aGlzLm9sZF9pbWFnZV9uYW1lID09ICJDaG9vc2UgRmlsZSIgPyBudWxsIDogdGhpcy5vbGRfaW1hZ2VfbmFtZQogICAgICAgIH0sIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXM4LmJpZ19zcGlubmVyID0gZmFsc2U7CgogICAgICAgICAgX3RoaXM4LmdldF9jb21wYW55X2xvZ28oKTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczguYXBpX3N0YXR1c19jb2RlLklNR19EVVBMSUNBVEUuTVNHX0NPREUpIHsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImlucHV0X2NvbXBhbnlfZmlsZSIpLnZhbHVlID0gIiI7IC8vIHRvYXN0ci5lcnJvcigKICAgICAgICAgICAgLy8gICAiSW1hZ2UgYWxyZWFkeSBmb3VuZC4gUGxlYXNlIHVwbG9hZCBhbm90aGVyIGltYWdlIG9yIHJlbmFtZSBpdC4iCiAgICAgICAgICAgIC8vICk7CgogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0ZXh0OiBfdGhpczgudGx0KCJvdGhlcl9pbWdfYWxyZWFkeV9mb3VuZF9tc2ciKSwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT09IF90aGlzOC5hcGlfc3RhdHVzX2NvZGUuQ09NUEFOWV9MT0dPX1VQREFURUQuTVNHX0NPREUpIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogX3RoaXM4LnRsdCgib3RoZXJfbG9nb191cGxvYWRfc3VjY2Vzc2Z1bF9tc2ciKSwKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRfY29tcGFueV9maWxlIikudmFsdWUgPSAiIjsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSwKICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHLAogICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgdGV4dDogX3RoaXM4LnRsdCgib3RoZXJfZXJyb3Jfb2NjdXJfbXNnMyIpLAogICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgfSk7CgogICAgICAgICAgX3RoaXM4LmdldF9jb21wYW55X2xvZ28oKTsKCiAgICAgICAgICBfdGhpczguYmlnX3NwaW5uZXIgPSBmYWxzZTsKCiAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgX3RoaXM4LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgZG93bmxvYWRfc2RrOiBmdW5jdGlvbiBkb3dubG9hZF9zZGsoZGF0YV90eXBlKSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwoKICAgICAgaWYgKGRhdGFfdHlwZSA9PSAibGljZW5zZV9rZXkiKSB7CiAgICAgICAgdGhpcy5zcGlubmVyT24xID0gdHJ1ZTsKICAgICAgICBheGlvcyh7CiAgICAgICAgICBtZXRob2Q6ICJwb3N0IiwKICAgICAgICAgIHVybDogYXBpX2NhbGxzLmdldF9saWNlbnNlX2tleSgpLAogICAgICAgICAgcmVzcG9uc2VUeXBlOiAiYmxvYiIsCiAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsCiAgICAgICAgICB9LAogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICB2YXIgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW3Jlc3BvbnNlLmRhdGFdKSk7CiAgICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgICAgIGxpbmsuaHJlZiA9IHVybDsKICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCJkb3dubG9hZCIsIGRhdGFfdHlwZSArICIudHh0Iik7CiAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspOwogICAgICAgICAgbGluay5jbGljaygpOwogICAgICAgICAgX3RoaXM5LnNwaW5uZXJPbjEgPSBmYWxzZTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzOS4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNwaW5uZXJPbjIgPSB0cnVlOwogICAgICAgIGF4aW9zKHsKICAgICAgICAgIG1ldGhvZDogInBvc3QiLAogICAgICAgICAgdXJsOiBhcGlfY2FsbHMuZmlsZV9kb3dubG9hZF91cmwoKSwKICAgICAgICAgIHJlc3BvbnNlVHlwZTogImJsb2IiLAogICAgICAgICAgZGF0YTogewogICAgICAgICAgICBkb3dubG9hZF9zZGtfdHlwZTogZGF0YV90eXBlLAogICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbAogICAgICAgICAgfSwKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXM5LnNwaW5uZXJPbjIgPSBmYWxzZTsgLy8gaWYgKAogICAgICAgICAgLy8gICByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT09CiAgICAgICAgICAvLyAgIHRoaXMuYXBpX3N0YXR1c19jb2RlLlNUQVRVU19TVUNDRVNTLk1TR19DT0RFCiAgICAgICAgICAvLyApIHsKICAgICAgICAgIC8vIHRvYXN0ci5lcnJvcih0aGlzLnRsdCgib3RoZXJfaW50ZXJuYWxfZXJyb3JfbXNnMSIpKTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczkuYXBpX3N0YXR1c19jb2RlLklOVkFMSURfUEFSQU1FVEVSLk1TR19DT0RFKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRleHQ6IF90aGlzOS50bHQoIm90aGVyX2Vycm9yX29jY3VyX21zZzMiKSwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXM5LmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogX3RoaXM5LnRsdCgib3RoZXJfZXJyb3Jfb2NjdXJfbXNnMyIpLAogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbcmVzcG9uc2UuZGF0YV0pKTsKICAgICAgICAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICAgICAgICAgIGxpbmsuaHJlZiA9IHVybDsKICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoImRvd25sb2FkIiwgZGF0YV90eXBlICsgIl9TREsuemlwIik7CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7CiAgICAgICAgICAgIGxpbmsuY2xpY2soKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgX3RoaXM5LnNwaW5uZXJPbjIgPSBmYWxzZTsKICAgICAgICAgIHRvYXN0ci5lcnJvcihfdGhpczkudGx0KCJvdGhlcl9pbnRlcm5hbF9lcnJvcl9tc2cyIikpOwoKICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICBfdGhpczkuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBjb25maWd1cmVfc2VuZGVyX2VtYWlsOiBmdW5jdGlvbiBjb25maWd1cmVfc2VuZGVyX2VtYWlsKHZhbHVlKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIGlmICh2YWx1ZSA9PSAiZW1haWwiKSB7CiAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgIHRpdGxlOiB0aGlzLnRsdCgib3RoZXJfY29uZmlndXJlX2VtYWlsX3N3YWxfbXNnIiksCiAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgib3RoZXJfdmVyaWZpY2F0aW9uX2xpbmtfbXNnIiksCiAgICAgICAgICB0eXBlOiAicXVlc3Rpb24iLAogICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiB0aGlzLnRsdCgib3RoZXJfc3dhbF9wcm9jZWVkX21zZyIpCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgIF90aGlzMTAuYmlnX3NwaW5uZXIgPSB0cnVlOwogICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3NldHRpbmdzKCksIHsKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IF90aGlzMTAuY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgY29tcGFueV9pZDogX3RoaXMxMC5jb21wYW55aWQsCiAgICAgICAgICAgICAgZW1haWw6IF90aGlzMTAuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXMxMC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICAgIHRva2VuOiBfdGhpczEwLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgIGlzX2VtYWlsOiB0cnVlLAogICAgICAgICAgICAgIGVtYWlsX2lkOiBfdGhpczEwLmVtYWlsX2RldGFpbHMKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXMxMC4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgIF90aGlzMTAuYmlnX3NwaW5uZXIgPSBmYWxzZTsKCiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczEwLmFwaV9zdGF0dXNfY29kZS5TVUNDRVNTRlVMX0RCX1FVRVJZLk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdGV4dDogX3RoaXMxMC50bHQoIm90aGVyX2VtYWlsX3NlbmRfdG9fbXNnIikgKyAiICIgKyBfdGhpczEwLnRsdCgib3RoZXJfdXNlcl9lbWFpbF9kZXRhaWxzX21zZyIpICsgX3RoaXMxMC50bHQoIm90aGVyX2NoZWNrX3lvdXJfZW1haWxfbXNnIiksCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgdGl0bGU6IF90aGlzMTAudGx0KCJvdGhlcl9zdWNjZXNzX3N3YWxfYnRuMSIpLAogICAgICAgICAgICAgICAgICBhbGxvd091dHNpZGVDbGljazogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGFsbG93RXNjYXBlS2V5OiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfdGhpczEwLmVtYWlsX2Rpc2FibGUgPSB0cnVlOwoKICAgICAgICAgICAgICAgIF90aGlzMTAuZW1haWxfdmVyaWZpY2F0aW9uX3N0YXR1cygpOwoKICAgICAgICAgICAgICAgIF90aGlzMTAubG9hZF9wcm9kdWN0X3NldHRpbmdzKCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgICB0aXRsZTogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHLAogICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIF90aGlzMTAuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoX3RoaXMxMC50bHQoIm90aGVyX2Vycm9yX29jY3VyX21zZyIpKTsKCiAgICAgICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgICAgICBfdGhpczEwLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gImVtYWlsX3JlbW92ZSIpIHsKICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgdGl0bGU6IHRoaXMudGx0KCJvdGhlcl9zd2FsX2FsZXJ0X21zZzEiKSwKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCJvdGhlcl9yZW1vdmVkX3NhdmVkX2VtYWlsX21zZyIpLAogICAgICAgICAgdHlwZTogInF1ZXN0aW9uIiwKICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAiI2QzMyIsCiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogdGhpcy50bHQoIm90aGVyX3N3YWxfcmVtb3ZlX21zZyIpCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgIF90aGlzMTAuYmlnX3NwaW5uZXIgPSB0cnVlOwogICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3NldHRpbmdzKCksIHsKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IF90aGlzMTAuY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgY29tcGFueV9pZDogX3RoaXMxMC5jb21wYW55aWQsCiAgICAgICAgICAgICAgZW1haWw6IF90aGlzMTAuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXMxMC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICAgIHRva2VuOiBfdGhpczEwLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgIGlzX3JlbW92ZV9lbWFpbDogdHJ1ZSwKICAgICAgICAgICAgICBlbWFpbF9pZDogX3RoaXMxMC5lbWFpbF9kZXRhaWxzCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KF90aGlzMTAuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICBfdGhpczEwLmJpZ19zcGlubmVyID0gZmFsc2U7CgogICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgIT0gX3RoaXMxMC5hcGlfc3RhdHVzX2NvZGUuU1VDQ0VTU0ZVTF9EQl9RVUVSWS5NU0dfQ09ERSkgewogICAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzMTAudGx0KCJvdGhlcl9lbWFpbF9yZW1vdmVkX3N3YWxfbXNnIiksCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgdGltZXI6IDUwMDAsCiAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdGhpczEwLnRsdCgib3RoZXJfc3VjY2Vzc19zd2FsX2J0bjIiKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfdGhpczEwLmVtYWlsX2Rpc2FibGUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIF90aGlzMTAuZW1haWxfZGV0YWlscyA9IG51bGw7CgogICAgICAgICAgICAgICAgX3RoaXMxMC5lbXB0eV92YXJpYWJsZSgpOwoKICAgICAgICAgICAgICAgIF90aGlzMTAubG9hZF9wcm9kdWN0X3NldHRpbmdzKCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgICB0aXRsZTogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHLAogICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIF90aGlzMTAuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoX3RoaXMxMC50bHQoIm90aGVyX2Vycm9yX29jY3VyX21zZzIiKSk7CgogICAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgICAgX3RoaXMxMC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfQp9Ow=="},null]}