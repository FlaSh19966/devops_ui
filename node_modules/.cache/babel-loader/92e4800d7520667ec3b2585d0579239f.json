{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Integrations/Components/WhatsappDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Integrations/Components/WhatsappDetails.vue","mtime":1663910265470},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvaG9tZS92aW1hbGVzaC9MZWFybmluZy9kZXZvcHNfdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IFN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwppbXBvcnQgYXBpX2NhbGxzIGZyb20gIkAvcG9ydGFsL2FwaV9jYWxscyI7CmltcG9ydCBNdWx0aXNlbGVjdCBmcm9tICJ2dWUtbXVsdGlzZWxlY3QiOwppbXBvcnQgVnVlUGhvbmVOdW1iZXJJbnB1dCBmcm9tICJ2dWUtcGhvbmUtbnVtYmVyLWlucHV0IjsKaW1wb3J0ICJ2dWUtcGhvbmUtbnVtYmVyLWlucHV0L2Rpc3QvdnVlLXBob25lLW51bWJlci1pbnB1dC5jc3MiOwppbXBvcnQgeyBjbG9zZV9tb2RhbCB9IGZyb20gIkAvcG9ydGFsL21peGlucyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTWVzc2FnaW5nRnJhbWV3b3JrcyIsCiAgY29tcG9uZW50czogewogICAgTXVsdGlzZWxlY3Q6IE11bHRpc2VsZWN0LAogICAgVnVlUGhvbmVOdW1iZXJJbnB1dDogVnVlUGhvbmVOdW1iZXJJbnB1dAogIH0sCiAgbWl4aW5zOiBbY2xvc2VfbW9kYWxdLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBiaWdfc3Bpbm5lcjogZmFsc2UsCiAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgIGZiX2FjY2Vzc190b2tlbjogIiIsCiAgICAgIGZiX3VzZXJfaWQ6ICIiLAogICAgICB1c2VyX2FjY2Vzc190b2tlbjogbnVsbCwKICAgICAgd2hhdHNhcHBfYnVzaW5lc3NfaWRzX2RhdGE6IFtdLAogICAgICB3aGF0c2FwcF9idXNpbmVzc19pZHM6IFtdLAogICAgICB3YWJhX2lkOiBudWxsLAogICAgICB3aGF0c2FwcF9kaXNwbGF5X25hbWU6ICIiLAogICAgICB3aGF0c2FwcF9idXNpbmVzc19jYXRlZ29yeTogIiIsCiAgICAgIGNhdGVnb3J5X2xpc3Q6IFsiQXV0b21vdGl2ZSIsICJCZWF1dHkgYW5kIFNhbG9uIiwgIkNsb3RoaW5nIGFuZCBBcHBhcmVsIiwgIkVkdWNhdGlvbiIsICJFbnRlcnRhaW5tZW50IiwgIkV2ZW50IFBsYW5uaW5nIGFuZCBTZXJ2aWNlIiwgIkZpbmFuY2UgYW5kIEJhbmtpbmciLCAiRm9vZCBhbmQgR3JvY2VyeSIsICJQdWJsaWMgU2VydmljZSIsICJIb3RlbCBhbmQgTG9kZ2luZyIsICJNZWRpY2FsIGFuZCBIZWFsdGgiLCAiTm9uLXByb2ZpdCIsICJQcm9mZXNzaW9uYWwgU2VydmljZXMiLCAiU2hvcHBpbmcgYW5kIFJldGFpbCIsICJUcmF2ZWwgYW5kIFRyYW5zcG9ydGF0aW9uIiwgIlJlc3RhdXJhbnQiLCAiT3RoZXIiXSwKICAgICAgd2hhdHNhcHBfYnVzaW5lc3NfZGVzY3JpcHRpb246ICIiLAogICAgICB3aGF0c2FwcF9idXNpbmVzc19udW1iZXI6IG51bGwsCiAgICAgIHdoYXRzYXBwX2J1c2luZXNzX3Bob25lTnVtYmVyX2NoZWNrOiBudWxsLAogICAgICBidXNpbmVzc19jb250YWN0X251bWJlcjogbnVsbCwKICAgICAgYnVzaW5lc3NfY29udGFjdF9waG9uZU51bWJlcl9jaGVjazogbnVsbCwKICAgICAgd2hhdHNhcHBfYnVzaW5lc3NfZGV0YWlsczogW10sCiAgICAgIHdoYXRzYXBwX2RldGFpbHNfc3RhdHVzOiAiIiwKICAgICAgd2hhdHNhcHBfZGV0YWlsc19zdGF0dXNfbWVzc2FnZTogIiIKICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5nZXRfaW50ZWdyYXRpb25fZGV0YWlscygpOwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0X2ludGVncmF0aW9uX2RldGFpbHM6IGZ1bmN0aW9uIGdldF9pbnRlZ3JhdGlvbl9kZXRhaWxzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5iaWdfc3Bpbm5lciA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfaW50ZWdyYXRpb25fZGV0YWlscygpLCB7CiAgICAgICAgaXNfZ2V0OiB0cnVlLAogICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55X25hbWUsCiAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55X2lkLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucwogICAgICB9LCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTsKICAgICAgICBfdGhpcy5iaWdfc3Bpbm5lciA9IGZhbHNlOwoKICAgICAgICBpZiAoZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpcy5hcGlfc3RhdHVzX2NvZGUuREFUQV9BVkFJTEFCTEUuTVNHX0NPREUpIHsKICAgICAgICAgIGlmICgnd2hhdHNhcHBfcmVxdWVzdF9mb3JtJyBpbiBkYXRhLmRhdGEpIHsKICAgICAgICAgICAgLy8gZm9yICh2YXIgaSBpbiBkYXRhLmRhdGEud2hhdHNhcHBfZGV0YWlscykgewogICAgICAgICAgICBfdGhpcy53aGF0c2FwcF9kZXRhaWxzX3N0YXR1cyA9IGRhdGEuZGF0YS53aGF0c2FwcF9yZXF1ZXN0X2Zvcm1bInN0YXR1cyJdOwogICAgICAgICAgICBfdGhpcy53aGF0c2FwcF9kZXRhaWxzX3N0YXR1c19tZXNzYWdlID0gZGF0YS5kYXRhLndoYXRzYXBwX3JlcXVlc3RfZm9ybVsic3RhdHVzX21lc3NhZ2UiXTsKICAgICAgICAgICAgX3RoaXMud2hhdHNhcHBfZGlzcGxheV9uYW1lID0gZGF0YS5kYXRhLndoYXRzYXBwX3JlcXVlc3RfZm9ybVsid2hhdHNhcHBfZGlzcGxheV9uYW1lIl0sIF90aGlzLndoYXRzYXBwX2J1c2luZXNzX2NhdGVnb3J5ID0gZGF0YS5kYXRhLndoYXRzYXBwX3JlcXVlc3RfZm9ybVsid2hhdHNhcHBfYnVzaW5lc3NfY2F0ZWdvcnkiXSwgX3RoaXMud2hhdHNhcHBfYnVzaW5lc3NfZGVzY3JpcHRpb24gPSBkYXRhLmRhdGEud2hhdHNhcHBfcmVxdWVzdF9mb3JtWyJ3aGF0c2FwcF9idXNpbmVzc19kZXNjcmlwdGlvbiJdLCBfdGhpcy53aGF0c2FwcF9idXNpbmVzc19udW1iZXIgPSBkYXRhLmRhdGEud2hhdHNhcHBfcmVxdWVzdF9mb3JtWyJ3aGF0c2FwcF9idXNpbmVzc19udW1iZXIiXSwgX3RoaXMuYnVzaW5lc3NfY29udGFjdF9udW1iZXIgPSBkYXRhLmRhdGEud2hhdHNhcHBfcmVxdWVzdF9mb3JtWyJidXNpbmVzc19jb250YWN0X251bWJlciJdOyAvLyB9CiAgICAgICAgICAgIC8vIHRoaXMuZmJfc2F2ZWRfcGFnZV9kYXRhLmlzX3Zpc2libGVfb25fYm90ID09PSB0cnVlID8gdGhpcy5mYl9zYXZlZF9wYWdlX2RhdGEuaXNfaW50ZWdyYXRlZCA9IHRydWUgOgogICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZiX3NhdmVkX3BhZ2VfZGF0YS5pc19pbnRlZ3JhdGVkID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT09IF90aGlzLmFwaV9zdGF0dXNfY29kZS5FTVBUWV9EQVRBLk1TR19DT0RFKSB7fSBlbHNlIHsKICAgICAgICAgIFN3YWwoewogICAgICAgICAgICB0aXRsZTogZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICB0ZXh0OiBkYXRhLm1lc3NhZ2UuTVNHLAogICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpcy5iaWdfc3Bpbm5lciA9IGZhbHNlOwoKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgY2hlY2tMb2dpblN0YXRlOiBmdW5jdGlvbiBjaGVja0xvZ2luU3RhdGUoKSB7CiAgICAgIHZhciB2bSA9IHRoaXM7CiAgICAgIEZCLmdldExvZ2luU3RhdHVzKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHZtLnN0YXR1c0NoYW5nZUNhbGxiYWNrKHJlc3BvbnNlKTsKICAgICAgfSk7CiAgICB9LAogICAgc3RhdHVzQ2hhbmdlQ2FsbGJhY2s6IGZ1bmN0aW9uIHN0YXR1c0NoYW5nZUNhbGxiYWNrKHJlc3BvbnNlKSB7CiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09ICJjb25uZWN0ZWQiKSB7CiAgICAgICAgdGhpcy5mYl9hY2Nlc3NfdG9rZW4gPSByZXNwb25zZS5hdXRoUmVzcG9uc2UuYWNjZXNzVG9rZW47CiAgICAgICAgdGhpcy5mYl91c2VyX2lkID0gcmVzcG9uc2UuYXV0aFJlc3BvbnNlLnVzZXJJRDsKICAgICAgICAkKCIjbG9naW4iKS5oaWRlKCk7CiAgICAgICAgJCgiI2xvZ291dCIpLnNob3coKTsKICAgICAgICB0aGlzLmZldGNoVXNlclByb2ZpbGUoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmZhY2Vib29rTG9naW5CeURpYWxvZygpOwogICAgICB9CiAgICB9LAogICAgZmFjZWJvb2tMb2dvdXQ6IGZ1bmN0aW9uIGZhY2Vib29rTG9nb3V0KCkgewogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICAkKCIjbG9nb3V0IikuaGlkZSgpOwogICAgICAkKCIjbG9naW4iKS5zaG93KCk7CiAgICAgICQoIiNzdGF0dXMiKS5lbXB0eSgpOwogICAgICBGQi5sb2dvdXQoZnVuY3Rpb24gKHJlc3BvbnNlKSB7Ly8gdm0uc3RhdHVzQ2hhbmdlQ2FsbGJhY2socmVzcG9uc2UpOwogICAgICB9KTsKICAgICAgdGhpcy5mYl9wYWdlX2RhdGEgPSBbXTsKICAgICAgdGhpcy5mYl9hY2Nlc3NfdG9rZW4gPSAiIjsKICAgICAgdGhpcy5mYl91c2VyX2lkID0gIiI7CiAgICAgIHRoaXMuZ2V0X2ludGVncmF0aW9uX2RldGFpbHMoKTsKICAgICAgdGhpcy53aGF0c2FwcF9idXNpbmVzc19pZHMgPSBbXTsKICAgICAgdGhpcy53aGF0c2FwcF9idXNpbmVzc19pZHNfZGF0YSA9IFtdOwogICAgfSwKICAgIGZhY2Vib29rTG9naW5CeURpYWxvZzogZnVuY3Rpb24gZmFjZWJvb2tMb2dpbkJ5RGlhbG9nKCkgewogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICBGQi5sb2dpbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICB2bS5zdGF0dXNDaGFuZ2VDYWxsYmFjayhyZXNwb25zZSk7CiAgICAgIH0sIHsKICAgICAgICBzY29wZTogInB1YmxpY19wcm9maWxlLHdoYXRzYXBwX2J1c2luZXNzX21hbmFnZW1lbnQsYnVzaW5lc3NfbWFuYWdlbWVudCx3aGF0c2FwcF9idXNpbmVzc19tZXNzYWdpbmciIC8vIGV4dHJhczogewogICAgICAgIC8vICAgZmVhdHVyZTogJ3doYXRzYXBwX2VtYmVkZGVkX3NpZ251cCcsCiAgICAgICAgLy8gfQoKICAgICAgfSk7CiAgICB9LAogICAgc3VibWl0X2RldGFpbHM6IGZ1bmN0aW9uIHN1Ym1pdF9kZXRhaWxzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGlmICh0aGlzLndoYXRzYXBwX2Rpc3BsYXlfbmFtZSA9PSAiIikgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGV4dDogIkRpc3BsYXkgbmFtZSBjYW5ub3QgYmUgYmxhbmsiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDIwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSBpZiAodGhpcy53aGF0c2FwcF9idXNpbmVzc19jYXRlZ29yeSA9PSAiIikgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGV4dDogIlNlbGVjdCB5b3VyIGJ1c2luZXNzIGNhdGVnb3J5IiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAyMDAwCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgaWYgKHRoaXMud2hhdHNhcHBfYnVzaW5lc3NfZGVzY3JpcHRpb24gPT0gIiIpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6ICJUZWxsIHVzIGFib3V0IHlvdXIgYnVzaW5lc3MgZGVzY3JpcHRpb24iLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDIwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLndoYXRzYXBwX2J1c2luZXNzX3Bob25lTnVtYmVyX2NoZWNrLmlzVmFsaWQgPT0gdHJ1ZSAmJiB0aGlzLmJ1c2luZXNzX2NvbnRhY3RfcGhvbmVOdW1iZXJfY2hlY2suaXNWYWxpZCA9PSB0cnVlKSB7CiAgICAgICAgdGhpcy53aGF0c2FwcF9idXNpbmVzc19kZXRhaWxzID0gewogICAgICAgICAgd2hhdHNhcHBfZGlzcGxheV9uYW1lOiB0aGlzLndoYXRzYXBwX2Rpc3BsYXlfbmFtZSwKICAgICAgICAgIHdoYXRzYXBwX2J1c2luZXNzX2NhdGVnb3J5OiB0aGlzLndoYXRzYXBwX2J1c2luZXNzX2NhdGVnb3J5LAogICAgICAgICAgd2hhdHNhcHBfYnVzaW5lc3NfZGVzY3JpcHRpb246IHRoaXMud2hhdHNhcHBfYnVzaW5lc3NfZGVzY3JpcHRpb24sCiAgICAgICAgICB3aGF0c2FwcF9idXNpbmVzc19udW1iZXI6IHRoaXMud2hhdHNhcHBfYnVzaW5lc3NfcGhvbmVOdW1iZXJfY2hlY2suZm9ybWF0dGVkTnVtYmVyLAogICAgICAgICAgYnVzaW5lc3NfY29udGFjdF9udW1iZXI6IHRoaXMuYnVzaW5lc3NfY29udGFjdF9waG9uZU51bWJlcl9jaGVjay5mb3JtYXR0ZWROdW1iZXIsCiAgICAgICAgICBzdGF0dXNfbWVzc2FnZTogIldlIGhhdmUgbm90aWZpZWQgb3VyIHRlYW0sIHdlIHdpbGwgZ2V0IGluIHRvdWNoIHdpdGggeW91IHNob3J0bHkuIiwKICAgICAgICAgIHN0YXR1czogIkluLXByb2dyZXNzIgogICAgICAgIH07IC8vICdpbnRlZ3JhdGlvbl9zdWNjZXNzJwogICAgICAgIC8vICdkaXNwbGF5X25hbWVfZXJyb3InCgogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfaW50ZWdyYXRpb25fZGV0YWlscygpLCB7CiAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgIHdhX2lzX3RoaXJkX3BhcnR5OiBmYWxzZSwKICAgICAgICAgIHdoYXRzYXBwX2J1c2luZXNzX2RldGFpbHM6IHRoaXMud2hhdHNhcHBfYnVzaW5lc3NfZGV0YWlscywKICAgICAgICAgIGlzX21lc3NhZ2luZ19wbGF0Zm9ybTogZmFsc2UsCiAgICAgICAgICBpc193aGF0c2FwcF9yZXF1ZXN0OiB0cnVlLAogICAgICAgICAgaXNfc2F2ZTogdHJ1ZSwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT09IF90aGlzMi5hcGlfc3RhdHVzX2NvZGUuU1VDQ0VTU0ZVTF9EQl9RVUVSWS5NU0dfQ09ERSkgewogICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgIHRpdGxlOiAiV2hhdHNhcHAgSW50ZWdyYXRpb24gU3VjY2Vzc2Z1bGx5IiwKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBfdGhpczIuZ2V0X2ludGVncmF0aW9uX2RldGFpbHMoKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczIuYXBpX3N0YXR1c19jb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUi5NU0dfQ09ERSkgewogICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgIHRpdGxlOiAiSW50ZXJuYWwgU2VydmVyIEVycm9yIiwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT09IF90aGlzMi5hcGlfc3RhdHVzX2NvZGUuVU5TVUNDRVNTRlVMX0RCX09QRVJBVElPTi5NU0dfQ09ERSkgewogICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TRwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSwKICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHLAogICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIF90aGlzMi5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgX3RoaXMyLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHRoaXMuY2xvc2VfbW9kYWwoJ3doYXRzYXBwX3NhdmVfYnRuJyk7CiAgICAgIH0KICAgIH0sCiAgICBmZXRjaFVzZXJQcm9maWxlOiBmdW5jdGlvbiBmZXRjaFVzZXJQcm9maWxlKCkgewogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICB2YXIgYWNjZXNzX3Rva2VuID0gdGhpcy5mYl9hY2Nlc3NfdG9rZW47CiAgICAgIHZhciBmYl93cF9zeXN0ZW1fYWNjZXNzX3Rva2VuID0gcHJvY2Vzcy5lbnYuVlVFX0FQUF9GQl9XUF9TWVNURU1fQUNDRVNTX1RPS0VOOwogICAgICB2YXIgdGVtcF93YWJhID0gbnVsbDsKICAgICAgdmFyIHN5c3RlbV91c2VyX2lkID0gbnVsbDsKICAgICAgdmFyIHBhdGgxID0gIi9kZWJ1Z190b2tlbj9pbnB1dF90b2tlbj0iICsgYWNjZXNzX3Rva2VuICsgIiZhY2Nlc3NfdG9rZW49IiArIGZiX3dwX3N5c3RlbV9hY2Nlc3NfdG9rZW47CiAgICAgIEZCLmFwaShwYXRoMSwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICB0ZW1wX3dhYmEgPSBkYXRhLmRhdGE7CgogICAgICAgIGZvciAodmFyIGkgaW4gdGVtcF93YWJhLmdyYW51bGFyX3Njb3BlcykgewogICAgICAgICAgaWYgKHRlbXBfd2FiYS5ncmFudWxhcl9zY29wZXNbaV0uc2NvcGUgPT0gIndoYXRzYXBwX2J1c2luZXNzX21hbmFnZW1lbnQiKSB7CiAgICAgICAgICAgIHZtLndoYXRzYXBwX2J1c2luZXNzX2lkcyA9IHRlbXBfd2FiYS5ncmFudWxhcl9zY29wZXNbaV0udGFyZ2V0X2lkczsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyB2YXIgcGF0aDMgPSAnLzQyNzM5NjIxMTYwMzY3OS9zeXN0ZW1fdXNlcnM/YWNjZXNzX3Rva2VuPScgKyBmYl93cF9zeXN0ZW1fYWNjZXNzX3Rva2VuOwogICAgICAgIC8vIEZCLmFwaShwYXRoMywgZnVuY3Rpb24oZGF0YSkgewogICAgICAgIC8vICAgY29uc29sZS5sb2coIlBhdGggMyIsIGRhdGEuZGF0YSk7CiAgICAgICAgLy8gICBzeXN0ZW1fdXNlcl9pZCA9IGRhdGEuZGF0YVswXS5pZDsKICAgICAgICAvLyAgIGNvbnNvbGUubG9nKCJzeXN0ZW1fdXNlcl9pZCIsIGRhdGEuZGF0YSk7CiAgICAgICAgLy8gICBmb3IodmFyIGkgaW4gdm0ud2hhdHNhcHBfYnVzaW5lc3NfaWRzKSB7CiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCJyZWFjaGUgaGVyZSIpOwogICAgICAgIC8vICAgICB2YXIgcGF0aDQgPSAnLycrIHZtLndoYXRzYXBwX2J1c2luZXNzX2lkc1tpXSArICcvYXNzaWduZWRfdXNlcnM/dXNlcj0nICsgc3lzdGVtX3VzZXJfaWQgKyAnJnRhc2tzPVtNQU5BR0VdJmFjY2Vzc190b2tlbj0nICsgZmJfd3Bfc3lzdGVtX2FjY2Vzc190b2tlbjsKICAgICAgICAvLyAgICAgRkIuYXBpKHBhdGg0LCBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgLy8gICAgICAgY29uc29sZS5sb2coIlBhdGggNCIsIGRhdGEpOwogICAgICAgIC8vICAgICB9KQogICAgICAgIC8vICAgfQogICAgICAgIC8vIH0pCiAgICAgICAgZm9yICh2YXIgaSBpbiB2bS53aGF0c2FwcF9idXNpbmVzc19pZHMpIHsKICAgICAgICAgIHZhciB3YWJhX2lkID0gdm0ud2hhdHNhcHBfYnVzaW5lc3NfaWRzW2ldOwogICAgICAgICAgdmFyIHBhdGgyID0gIi8iICsgd2FiYV9pZCArICIvcGhvbmVfbnVtYmVycz9hY2Nlc3NfdG9rZW49IiArIGFjY2Vzc190b2tlbjsKICAgICAgICAgIEZCLmFwaShwYXRoMiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgdm0ud2hhdHNhcHBfYnVzaW5lc3NfaWRzX2RhdGEucHVzaChfZGVmaW5lUHJvcGVydHkoe30sIHdhYmFfaWQsIGRhdGEuZGF0YVswXSkpOwogICAgICAgICAgICB2bS5zdWJtaXRfZGV0YWlscygpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LCAyMDAwKTsKICAgIH0KICB9Cn07"},null]}