{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/BotOutput/BotConfiguration.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/BotOutput/BotConfiguration.vue","mtime":1661252053819},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBzd2FsIGZyb20gInN3ZWV0YWxlcnQyIjsKaW1wb3J0IFN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwppbXBvcnQgeyBzZXRUaW1lb3V0IH0gZnJvbSAidGltZXJzIjsKaW1wb3J0IGFwaV9jYWxscyBmcm9tICJAL3BvcnRhbC9hcGlfY2FsbHMiOwppbXBvcnQgTXVsdGlzZWxlY3QgZnJvbSAidnVlLW11bHRpc2VsZWN0IjsKaW1wb3J0IFJlc3BvbnNlQm90IGZyb20gIi4uL0RhdGEgSW5wdXRzL1Jlc3BvbnNlQm90IjsKaW1wb3J0IGRyYWdnYWJsZSBmcm9tICJ2dWVkcmFnZ2FibGUiOwppbXBvcnQgRW1vamlQaWNrZXIgZnJvbSAidnVlLWVtb2ppLXBpY2tlciI7CmltcG9ydCB7IFZ1ZUVkaXRvciB9IGZyb20gInZ1ZTItZWRpdG9yIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJCb3RDb25maWd1cmF0aW9uIiwKICBjb21wb25lbnRzOiB7CiAgICBNdWx0aXNlbGVjdDogTXVsdGlzZWxlY3QsCiAgICBSZXNwb25zZUJvdDogUmVzcG9uc2VCb3QsCiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSwKICAgIEVtb2ppUGlja2VyOiBFbW9qaVBpY2tlciwKICAgIFZ1ZUVkaXRvcjogVnVlRWRpdG9yCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaW5wdXQ6ICIiLAogICAgICBzZWFyY2g6ICIiLAogICAgICBvbGRDdXJzb3JQb3NpdGlvbjogbnVsbCwKICAgICAgYmlnX3NwaW5uZXI6IGZhbHNlLAogICAgICBib3RfZ3JlZXRpbmdzOiBbXSwKICAgICAgYm90X2JhY2tncm91bmRfdHlwZTogIm5vbmUiLAogICAgICByZXNldF9pY29uX3BhdGg6IHJlcXVpcmUoIkAvcG9ydGFsL2Fzc2V0cy9pbWcvcmVzZXRfaWNvbi5zdmciKSwKICAgICAgaXNfUHJlbWl1bTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgaXNfbGFuZ3VhZ2U6IHRoaXMuJHNlc3Npb24uZ2V0KCJQcmVmZXJyZWRMYW5ndWFnZSIpLAogICAgICBkZWZhdWx0X2JvdF9zdHlsaW5nX3ZhbHVlOiBbewogICAgICAgIG5hbWU6ICJib3Rfc3R5bGluZy5idXR0b25fdGhlbWUiLAogICAgICAgIHZhbHVlOiAiIzI3MzY3OSIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJib3Rfc3R5bGluZy5ib3RfdGhlbWUiLAogICAgICAgIHZhbHVlOiAiIzI3MzY3OSIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJib3Rfc3R5bGluZy5idXR0b25fYm9yZGVyX3RoZW1lIiwKICAgICAgICB2YWx1ZTogIiMyNzM2NzkiCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiYm90X3N0eWxpbmcudXNlcl9yZXNwb25zZV9iZ19jb2xvciIsCiAgICAgICAgdmFsdWU6ICIjMjczNjc5IgogICAgICB9LCB7CiAgICAgICAgbmFtZTogImJvdF9zdHlsaW5nLmRlbGl2ZXJ5X25vdGVfY29sb3IiLAogICAgICAgIHZhbHVlOiAiIzI3MzY3OSIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJib3Rfc3R5bGluZy5ib3RfcmVzcG9uc2VfYmdfY29sb3IiLAogICAgICAgIHZhbHVlOiAiI2ZmZmZmZiIKICAgICAgfSwgLy8gewogICAgICAvLyAgIG5hbWU6ICJib3Rfc3R5bGluZy5pc19wb3dlcmVkX2J5X2NlbnNlIiwKICAgICAgLy8gICB2YWx1ZTogInRydWUiLAogICAgICAvLyB9LAogICAgICB7CiAgICAgICAgbmFtZTogImJvdF9idXR0b25zX2FsaWdubWVudCIsCiAgICAgICAgdmFsdWU6IHsKICAgICAgICAgIG5hbWU6ICJDZW50ZXIiLAogICAgICAgICAgdmFsdWU6ICJjZW50ZXIiCiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgbmFtZTogImJvdF9zdHlsaW5nLmhvcml6b250YWxfc3BhY2luZyIsCiAgICAgICAgdmFsdWU6ICIzIgogICAgICB9LCB7CiAgICAgICAgbmFtZTogImJvdF9zdHlsaW5nLnZlcnRpY2FsX3NwYWNpbmciLAogICAgICAgIHZhbHVlOiAiNSIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJib3RfaGVhZGVyX2JhY2tncm91bmQiLAogICAgICAgIHZhbHVlOiAiI2ZmZmZmZiIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJib3RfaGVhZGVyX2FsaWdubWVudCIsCiAgICAgICAgdmFsdWU6IHsKICAgICAgICAgIG5hbWU6ICJDZW50ZXIiLAogICAgICAgICAgdmFsdWU6ICJjZW50ZXIiCiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgbmFtZTogImJvdF9hbGlnbm1lbnQiLAogICAgICAgIHZhbHVlOiB7CiAgICAgICAgICBuYW1lOiAiUmlnaHQiLAogICAgICAgICAgdmFsdWU6ICJyaWdodCIKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiYm90X2hvcml6b250YWxfcG9zaXRpb24iLAogICAgICAgIHZhbHVlOiAzMAogICAgICB9LCB7CiAgICAgICAgbmFtZTogImJvdF92ZXJ0aWNhbF9wb3NpdGlvbiIsCiAgICAgICAgdmFsdWU6IDEyCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiYm90X2ZvbnRfc3R5bGUiLAogICAgICAgIHZhbHVlOiB7CiAgICAgICAgICBuYW1lOiAiUm9ib3RvIiwKICAgICAgICAgIHZhbHVlOiAiUm9ib3RvIgogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIG5hbWU6ICJib3RfZm9udF9jb2xvcl9zZW5kZXIiLAogICAgICAgIHZhbHVlOiAiI2ZmZmZmZiIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJib3RfZm9udF9jb2xvcl9yZWNlaXZlciIsCiAgICAgICAgdmFsdWU6ICIjMDAwMDAwIgogICAgICB9LCB7CiAgICAgICAgbmFtZTogImJvdF9mb250X2NvbG9yX2J1dHRvbnMiLAogICAgICAgIHZhbHVlOiAiI2ZmZmZmZiIKICAgICAgfV0sCiAgICAgIGlzX2JnX2ltYWdlX2NoYW5nZWQ6IGZhbHNlLAogICAgICBib3RfaGVhZGVyX2JhY2tncm91bmQ6ICIiLAogICAgICBib3RfaGVhZGVyX2FsaWdubWVudDogbnVsbCwKICAgICAgYm90X2ZvbnRfc3R5bGU6ICIiLAogICAgICBib3RfZm9udF9jb2xvcl9zZW5kZXI6ICIiLAogICAgICBib3RfZm9udF9jb2xvcl9yZWNlaXZlcjogIiIsCiAgICAgIGJvdF9mb250X2NvbG9yX2J1dHRvbnM6ICIiLAogICAgICBib3RfZm9udF9vcHRpb25zOiBbewogICAgICAgIG5hbWU6ICJBcmlhbCIsCiAgICAgICAgdmFsdWU6ICJhcmlhbCxzYW5zLXNlcmlmIgogICAgICB9LCB7CiAgICAgICAgbmFtZTogIlJvYm90byIsCiAgICAgICAgdmFsdWU6ICJSb2JvdG8iCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiT3BlbiBTYW5zIiwKICAgICAgICB2YWx1ZTogIk9wZW4gU2FucyIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJUaW1lcyBOZXcgUm9tYW4iLAogICAgICAgIHZhbHVlOiAiVGltZXMgTmV3IFJvbWFuIgogICAgICB9LCB7CiAgICAgICAgbmFtZTogIkdlb3JnaWEiLAogICAgICAgIHZhbHVlOiAiR2VvcmdpYSIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJNaWNyb3NvZnQgSmhlbmdIZWkiLAogICAgICAgIHZhbHVlOiAiJ01pY3Jvc29mdCBKaGVuZ0hlaScsIFNhbnMtc2VyaWYiCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiTWVycml3ZWF0aGVyIiwKICAgICAgICB2YWx1ZTogIidNZXJyaXdlYXRoZXInLCBTYW5zLXNlcmlmIgogICAgICB9XSwKICAgICAgYm90X2hvcml6b250YWxfcG9zaXRpb246IDMwLAogICAgICBib3RfdmVydGljYWxfcG9zaXRpb246IDEyLAogICAgICBib3RfYWxpZ25tZW50OiB7CiAgICAgICAgdmFsdWU6ICJyaWdodCIsCiAgICAgICAgbmFtZTogIlJpZ2h0IgogICAgICB9LAogICAgICBib3RfYWxpZ25tZW50X29wdGlvbnM6IFt7CiAgICAgICAgbmFtZTogIkxlZnQiLAogICAgICAgIHZhbHVlOiAibGVmdCIKICAgICAgfSwgewogICAgICAgIHZhbHVlOiAicmlnaHQiLAogICAgICAgIG5hbWU6ICJSaWdodCIKICAgICAgfV0sCiAgICAgIGJvdF9oZWFkZXJfYWxpZ25tZW50X29wdGlvbnM6IFt7CiAgICAgICAgbmFtZTogIkNlbnRlciIsCiAgICAgICAgdmFsdWU6ICJjZW50ZXIiCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiTGVmdCIsCiAgICAgICAgdmFsdWU6ICJsZWZ0IgogICAgICB9LCB7CiAgICAgICAgdmFsdWU6ICJyaWdodCIsCiAgICAgICAgbmFtZTogIlJpZ2h0IgogICAgICB9XSwKICAgICAgYm90X2J1dHRvbnNfYWxpZ25tZW50X29wdGlvbnM6IFt7CiAgICAgICAgbmFtZTogIkNlbnRlciIsCiAgICAgICAgdmFsdWU6ICJjZW50ZXIiCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiTGVmdCIsCiAgICAgICAgdmFsdWU6ICJmbGV4LXN0YXJ0IgogICAgICB9LCB7CiAgICAgICAgdmFsdWU6ICJmbGV4LWVuZCIsCiAgICAgICAgbmFtZTogIlJpZ2h0IgogICAgICB9XSwKICAgICAgYm90X2J1dHRvbnNfYWxpZ25tZW50OiB7fSwKICAgICAgaW1hZ2VfZmlsZV8yOiBudWxsLAogICAgICBpbWFnZV9maWxlXzM6IG51bGwsCiAgICAgIGltYWdlX2ZpbGVfNDogbnVsbCwKICAgICAgaW1hZ2VfZmlsZV81OiBudWxsLAogICAgICB3aWRnZXRfYnV0dG9uc19kZXRhaWxzOiBbXSwKICAgICAgZmlsZV9sYWJlbDogIkNob29zZSBmaWxlIiwKICAgICAgZmlsZV9sYWJlbF8yOiAiQ2hvb3NlIGZpbGUiLAogICAgICBmaWxlX2xhYmVsXzM6ICJDaG9vc2UgZmlsZSIsCiAgICAgIGZpbGVfbGFiZWxfNDogIkNob29zZSBmaWxlIiwKICAgICAgZmlsZV9sYWJlbF81OiAiQ2hvb3NlIGZpbGUiLAogICAgICBib3Rfc3R5bGluZzogewogICAgICAgIGJvdF90aGVtZTogIiIsCiAgICAgICAgYnV0dG9uX2JvcmRlcl90aGVtZTogIiIsCiAgICAgICAgdXNlcl9yZXNwb25zZV9iZ19jb2xvcjogIiIsCiAgICAgICAgYm90X3Jlc3BvbnNlX2JnX2NvbG9yOiAiIiwKICAgICAgICBkZWxpdmVyeV9ub3RlX2NvbG9yOiAiIiwKICAgICAgICBidXR0b25fdGhlbWU6ICIiLAogICAgICAgIGhvcml6b250YWxfc3BhY2luZzogIiIsCiAgICAgICAgdmVydGljYWxfc3BhY2luZzogIiIsCiAgICAgICAgaXNfcG93ZXJlZF9ieV9jZW5zZTogdHJ1ZSwKICAgICAgICBib3Rfb3Blbl9ieV9kZWZhdWx0OiBmYWxzZSwKICAgICAgICBib3Rfc2hvd25fb25fd2Vic2l0ZTogZmFsc2UsCiAgICAgICAgc2hvd19ib3RfaGlzdG9yeTogdHJ1ZSwKICAgICAgICBpc19jb25mdXNpb25fbXNnOiAiIgogICAgICB9LAogICAgICBpbnRlbnRsaXN0OiBbXSwKICAgICAgY29tcGFueWlkOiBudWxsLAogICAgICBjb21wYW55bmFtZTogbnVsbCwKICAgICAgbG9hZF9ib3RfcHJldmlldzogZmFsc2UsCiAgICAgIGRyYWdfYnV0dG9uczogZmFsc2UsCiAgICAgIGRyYWdfZ3JlZXRpbmdzOiBmYWxzZSwKICAgICAgZGVmYXVsdF9yZXRhaWxfZ3JlZXRpbmdzOiBbIi9vcmRlcl9yZXR1cm4iLCAib3JkZXJfcmV0dXJuIl0sCiAgICAgIHZlcmlmeV9ib3Rfc2V0dGluZ3M6IFtdLAogICAgICB2ZXJpZnlfY2hlY2s6IGZhbHNlLAogICAgICBncmVldGluZ3Nfa2V5OiAwLAogICAgICBidXR0b25zX2tleTogMCwKICAgICAgY3VzdG9tVG9vbGJhcjogW1siYm9sZCIsICJpdGFsaWMiLCAidW5kZXJsaW5lIl0sIFt7CiAgICAgICAgY29sb3I6IFtdCiAgICAgIH0sIHsKICAgICAgICBiYWNrZ3JvdW5kOiBbXQogICAgICB9XSwgW3sKICAgICAgICBsaXN0OiAib3JkZXJlZCIKICAgICAgfSwgewogICAgICAgIGxpc3Q6ICJidWxsZXQiCiAgICAgIH1dLCBbImxpbmsiXV0sCiAgICAgIHdpZGdldF9pY29uX3R5cGU6ICJub25lIiwKICAgICAgZGVmYXVsX3dpZGdldF9pY29uOiB0cnVlLAogICAgICBsYW5ndWFnZV9jb2RlOiBudWxsLAogICAgICBjb3VudHJ5X2xpc3Q6IFt7CiAgICAgICAgZGlzcGxheV9uYW1lOiAi8J+HuvCfh7ggRW5nbGlzaCIsCiAgICAgICAgdmFsdWU6ICJlbiIsCiAgICAgICAgbGFuZzogImVuZ2xpc2giCiAgICAgIH0sIHsKICAgICAgICBkaXNwbGF5X25hbWU6ICLwn4eu8J+HsyBIaW5kaSIsCiAgICAgICAgdmFsdWU6ICJoaSIsCiAgICAgICAgbGFuZzogImhpbmRpIgogICAgICB9LCAvLyB7CiAgICAgIC8vICAgZGlzcGxheV9uYW1lOiAi8J+HqvCfh7ggU3BhbmlzaCIsCiAgICAgIC8vICAgdmFsdWU6ICJlcyIsCiAgICAgIC8vICAgbGFuZzogInNwYW5pc2giCiAgICAgIC8vIH0sCiAgICAgIHsKICAgICAgICBkaXNwbGF5X25hbWU6ICLwn4e18J+HuSBQb3J0dWd1ZXNlIiwKICAgICAgICB2YWx1ZTogInB0IiwKICAgICAgICBsYW5nOiAicG9ydHVndWVzZSIKICAgICAgfV0KICAgIH07CiAgfSwKICBwcm9wczogewogICAgZnJvbV9zZXR1cDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGJvdF9iYWNrZ3JvdW5kX3R5cGU6IGZ1bmN0aW9uIGJvdF9iYWNrZ3JvdW5kX3R5cGUobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgaWYgKG5ld1ZhbCA9PT0gIm5vbmUiKSB7CiAgICAgICAgdGhpcy5maWxlX2xhYmVsXzMgPSAiQ2hvb3NlIEZpbGUiOwogICAgICAgIHRoaXMuaW1hZ2VfZmlsZV8zID0gbnVsbDsKICAgICAgICB0aGlzLmlzX2JnX2ltYWdlX2NoYW5nZWQgPSB0cnVlOyAvLyB0aGlzLm9sZF9pbWFnZV9uYW1lXzMgPSBudWxsOwoKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRHcm91cEZpbGUwMyIpLnZhbHVlID0gIiI7CiAgICAgIH0KICAgIH0sCiAgICB3aWRnZXRfaWNvbl90eXBlOiBmdW5jdGlvbiB3aWRnZXRfaWNvbl90eXBlKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIGlmIChuZXdWYWwgPT0gIm5vbmUiKSB7CiAgICAgICAgdGhpcy5kZWZhdWxfd2lkZ2V0X2ljb24gPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZGVmYXVsX3dpZGdldF9pY29uID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICBpZiAodGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUgPT0gIlN1cGVyQWRtaW4iKSB7CiAgICAgIHRoaXMuY29tcGFueWlkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlJZCIpOwogICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlOYW1lIik7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgIH0KCiAgICB0aGlzLmdldF9pbnRlbnRzKCk7CiAgICB0aGlzLmdldF93aWRnZXRfc2V0dGluZ3MoKTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBib3RfYWxpZ25tZW50X3RleHQ6IGZ1bmN0aW9uIGJvdF9hbGlnbm1lbnRfdGV4dCgpIHsKICAgICAgcmV0dXJuIHRoaXMuYm90X2FsaWdubWVudC5uYW1lOwogICAgfSwKICAgIHNldHVwX2NzczogZnVuY3Rpb24gc2V0dXBfY3NzKCkgewogICAgICBpZiAodGhpcy5mcm9tX3NldHVwID09IHRydWUpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgIi0tZGFzaC1jb250LW1hcmdpbiI6ICIwcHgiLAogICAgICAgICAgIi0tZGFzaC1jb250LXBhZGRpbmciOiAiMHB4IiwKICAgICAgICAgICItLWNvbnRhaW5lci1mbHVpZC1tYXJnaW4iOiAiMHB4IiwKICAgICAgICAgICItLWNvbnRhaW5lci1mbHVpZC1wYWRkaW5nIjogIjBweCIsCiAgICAgICAgICAiLS1jYXJkLWJvcmRlciI6ICJub25lIiwKICAgICAgICAgICItLWNhcmQtYm9keS1wYWRkaW5nIjogIjBweCIsCiAgICAgICAgICAiLS1jYXJkLWhlYWRlci1wYWRkaW5nIjogIjIwcHggMHB4IgogICAgICAgIH07CiAgICAgIH0KICAgIH0sCiAgICBkcmFnT3B0aW9uc0dyZWV0aW5nczogZnVuY3Rpb24gZHJhZ09wdGlvbnNHcmVldGluZ3MoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYW5pbWF0aW9uOiAyMDAsCiAgICAgICAgZ3JvdXA6ICJkZXNjcmlwdGlvbiIsCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGdob3N0Q2xhc3M6ICJnaG9zdCIsCiAgICAgICAgc2Nyb2xsU2Vuc2l0aXZpdHk6IDIwMCwKICAgICAgICBmb3JjZUZhbGxiYWNrOiB0cnVlCiAgICAgIH07CiAgICB9LAogICAgZHJhZ09wdGlvbnNCdXR0b25zOiBmdW5jdGlvbiBkcmFnT3B0aW9uc0J1dHRvbnMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYW5pbWF0aW9uOiAyMDAsCiAgICAgICAgZ3JvdXA6ICJkZXNjcmlwdGlvbiIsCiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICAgIGdob3N0Q2xhc3M6ICJnaG9zdCIsCiAgICAgICAgc2Nyb2xsU2Vuc2l0aXZpdHk6IDIwMCwKICAgICAgICBmb3JjZUZhbGxiYWNrOiB0cnVlCiAgICAgIH07CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAkKCIjcHJldmlld19ib3RfdmlzaWJsZSIpLm9uKCJzaG93LmJzLm1vZGFsIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5sb2FkX2JvdF9wcmV2aWV3ID0gdHJ1ZTsKICAgIH0pOwogICAgJCgiI3ByZXZpZXdfYm90X3Zpc2libGUiKS5vbigiaGlkZS5icy5tb2RhbCIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMubG9hZF9ib3RfcHJldmlldyA9IGZhbHNlOwogICAgfSk7CiAgICB0aGlzLiRyb290LiRlbWl0KCJjaGFuZ2Vfc2lkZWJhcl9tYWluX21lbnUiLCAiU2ltdWxhdGUgSW50ZXJhY3Rpb24iKTsKICAgIHRoaXMubGFuZ3VhZ2VfY29kZSA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jaGF0Ym90X2xhbmd1YWdlOwoKICAgIGlmICh0aGlzLmxhbmd1YWdlX2NvZGUgIT0gdW5kZWZpbmVkIHx8IHRoaXMubGFuZ3VhZ2VfY29kZSAhPSAiIiB8fCB0aGlzLmxhbmd1YWdlX2NvZGUgIT0gbnVsbCkgewogICAgICB0aGlzLmxhbmd1YWdlX2NvZGUgPSB0aGlzLmNvdW50cnlfbGlzdC5maW5kKGZ1bmN0aW9uIChjbCkgewogICAgICAgIHJldHVybiBjbC5sYW5nID09IF90aGlzLmxhbmd1YWdlX2NvZGU7CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5sYW5ndWFnZV9jb2RlID0gdGhpcy5jb3VudHJ5X2xpc3QuZmluZChmdW5jdGlvbiAoY2wpIHsKICAgICAgICByZXR1cm4gJ2VuZ2xpc2gnID09IF90aGlzLmxhbmd1YWdlX2NvZGU7CiAgICAgIH0pOwogICAgfQogIH0sCiAgYmVmb3JlUm91dGVMZWF2ZTogZnVuY3Rpb24gYmVmb3JlUm91dGVMZWF2ZSh0bywgZnJvbSwgbmV4dCkgewogICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgdmFyIGNoZWNrID0gZmFsc2U7CgogICAgaWYgKHRoaXMudmVyaWZ5X2NoZWNrKSB7CiAgICAgIGlmICgodGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJnSW1hZ2VOYW1lID09IHRoaXMuZmlsZV9sYWJlbF8zIHx8IHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5CZ0ltYWdlTmFtZSA9PSAiIikgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJvdEZvbnQuRm9udENvbG9yQnV0dG9ucyA9PSB0aGlzLmJvdF9mb250X2NvbG9yX2J1dHRvbnMgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJvdEZvbnQuRm9udENvbG9yUmVjZWl2ZXIgPT0gdGhpcy5ib3RfZm9udF9jb2xvcl9yZWNlaXZlciAmJiB0aGlzLnZlcmlmeV9ib3Rfc2V0dGluZ3MuQm90Rm9udC5Gb250Q29sb3JTZW5kZXIgPT0gdGhpcy5ib3RfZm9udF9jb2xvcl9zZW5kZXIgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJvdEZvbnQuRm9udFN0eWxlID09IHRoaXMuYm90X2ZvbnRfc3R5bGUgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJvdEltYWdlTmFtZSA9PSB0aGlzLmZpbGVfbGFiZWxfMiAmJiB0aGlzLnZlcmlmeV9ib3Rfc2V0dGluZ3MuQm90T3BlbkJ5RGVmYXVsdCA9PSB0aGlzLmJvdF9zdHlsaW5nLmJvdF9vcGVuX2J5X2RlZmF1bHQgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJvdFNob3duT25XZWJzaXRlID09IHRoaXMuYm90X3N0eWxpbmcuYm90X3Nob3duX29uX3dlYnNpdGUgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLklzUG93ZXJlZEJ5Q2Vuc2UgPT0gdGhpcy5ib3Rfc3R5bGluZy5pc19wb3dlcmVkX2J5X2NlbnNlICYmIHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5Cb3RTdHlsaW5nLnZhbHVlID09IHRoaXMuYm90X2J1dHRvbnNfYWxpZ25tZW50LnZhbHVlICYmIHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5Cb3RUaGVtZSA9PSB0aGlzLmJvdF9zdHlsaW5nLmJvdF90aGVtZSAmJiB0aGlzLnZlcmlmeV9ib3Rfc2V0dGluZ3MuVXNlclJlc3BvbnNlQmdDb2xvciA9PSB0aGlzLmJvdF9zdHlsaW5nLnVzZXJfcmVzcG9uc2VfYmdfY29sb3IgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJvdFJlc3BvbnNlQmdDb2xvciA9PSB0aGlzLmJvdF9zdHlsaW5nLmJvdF9yZXNwb25zZV9iZ19jb2xvciAmJiB0aGlzLnZlcmlmeV9ib3Rfc2V0dGluZ3MuRGVsaXZlcnlOb3RlQ29sb3IgPT0gdGhpcy5ib3Rfc3R5bGluZy5kZWxpdmVyeV9ub3RlX2NvbG9yICYmIHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5CdXR0b25Cb3JkZXJUaGVtZSA9PSB0aGlzLmJvdF9zdHlsaW5nLmJ1dHRvbl9ib3JkZXJfdGhlbWUgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJ1dHRvblN0eWxpbmcuaG9yaXpvbnRhbCA9PSB0aGlzLmJvdF9zdHlsaW5nLmhvcml6b250YWxfc3BhY2luZyAmJiB0aGlzLnZlcmlmeV9ib3Rfc2V0dGluZ3MuQnV0dG9uU3R5bGluZy52ZXJ0aWNhbCA9PSB0aGlzLmJvdF9zdHlsaW5nLnZlcnRpY2FsX3NwYWNpbmcgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkJ1dHRvblRoZW1lID09IHRoaXMuYm90X3N0eWxpbmcuYnV0dG9uX3RoZW1lICYmIHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5IZWFkZXJTdHlsaW5nLnZhbHVlID09IHRoaXMuYm90X2hlYWRlcl9hbGlnbm1lbnQudmFsdWUgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLkhlYWRlclRoZW1lID09IHRoaXMuYm90X2hlYWRlcl9iYWNrZ3JvdW5kICYmIHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5JbWFnZU5hbWUgPT0gdGhpcy5maWxlX2xhYmVsICYmIHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5XaWRnZXRQb3NpdGlvbi52ZXJ0aWNhbCA9PSB0aGlzLmJvdF92ZXJ0aWNhbF9wb3NpdGlvbiAmJiB0aGlzLnZlcmlmeV9ib3Rfc2V0dGluZ3MuV2lkZ2V0UG9zaXRpb24uaG9yaXpvbnRhbCA9PSB0aGlzLmJvdF9ob3Jpem9udGFsX3Bvc2l0aW9uICYmIHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5TaG93Qm90SGlzdG9yeSA9PSB0aGlzLmJvdF9zdHlsaW5nLnNob3dfYm90X2hpc3RvcnkgJiYgdGhpcy52ZXJpZnlfYm90X3NldHRpbmdzLmNvbmZ1c2lvbl9tc2cudGV4dCA9PSB0aGlzLmJvdF9zdHlsaW5nLmlzX2NvbmZ1c2lvbl9tc2cudGV4dCkgewogICAgICAgIGNoZWNrID0gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2hlY2sgPSB0cnVlOwogICAgICB9CiAgICB9CgogICAgaWYgKGNoZWNrKSB7CiAgICAgIFN3YWwoewogICAgICAgIHRpdGxlOiB0aGlzLnRsdCgic3dhbF9hcmVfdV9zdXJlX3RleHQiKSwKICAgICAgICB0ZXh0OiB0aGlzLnRsdCgiYm90X2NvbmZpZ19jb25maXJtX3RleHQiKSwKICAgICAgICB0eXBlOiB0aGlzLnRsdCgiYWxlcnRfd2FybmluZ190ZXh0IiksCiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiB0aGlzLnRsdCgiYm90X2NvbmZpZ19zd2FsX3NhdmVfYnRuIiksCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogdGhpcy50bHQoImJvdF9jb25maWdfc3dhbF9jYW5jZWxfYnRuIikKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgX3RoaXMyLnVwbG9hZF9pbWFnZSgpOwoKICAgICAgICAgIF90aGlzMi5zdWJtaXRfZ3JlZXRpbmdzKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG5leHQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgbmV4dCgpOwogICAgfQogIH0sCiAgZGlyZWN0aXZlczogewogICAgZm9jdXM6IHsKICAgICAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkKGVsKSB7CiAgICAgICAgZWwuZm9jdXMoKTsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ3JlZXRpbmdfZW1vamlfb2ZmOiBmdW5jdGlvbiBncmVldGluZ19lbW9qaV9vZmYoaWQpIHsKICAgICAgJCgiI2Vtb2ppXyIuY29uY2F0KGlkKSkudG9nZ2xlQ2xhc3MoInZpc2libGVfZW1vamkiKTsKICAgIH0sCiAgICBncmVldGluZ19lbW9qaV9vbjogZnVuY3Rpb24gZ3JlZXRpbmdfZW1vamlfb24oaWQpIHsKICAgICAgJCgiI2Vtb2ppXyIuY29uY2F0KGlkKSkudG9nZ2xlQ2xhc3MoInZpc2libGVfZW1vamkiKTsKICAgIH0sCiAgICBidXR0b25fZW1vamlfb2ZmOiBmdW5jdGlvbiBidXR0b25fZW1vamlfb2ZmKGlkKSB7CiAgICAgICQoIiNlbW9qaV90aXRsZV8iLmNvbmNhdChpZCkpLnRvZ2dsZUNsYXNzKCJ2aXNpYmxlX2Vtb2ppX2J0bl90aXRsZSIpOwogICAgfSwKICAgIGJ1dHRvbl9lbW9qaV9vbjogZnVuY3Rpb24gYnV0dG9uX2Vtb2ppX29uKGlkKSB7CiAgICAgICQoIiNlbW9qaV90aXRsZV8iLmNvbmNhdChpZCkpLnRvZ2dsZUNsYXNzKCJ2aXNpYmxlX2Vtb2ppX2J0bl90aXRsZSIpOwogICAgfSwKICAgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKGVtb2ppLCBpZCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIC8vIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib3RfZ3JlZXRpbmdzLmxlbmd0aDsgaSsrKSB7CiAgICAgIC8vICAgaWYgKHRoaXMuYm90X2dyZWV0aW5nc1tpXS5pZCA9PT0gaWQpIHsKICAgICAgLy8gICAgIHZhciBjdXJzb3JQb3MgPSAkKCIjIiArIGlkKS5wcm9wKCJzZWxlY3Rpb25TdGFydCIpOwogICAgICAvLyAgICAgbGV0IHYgPSAkKCIjIiArIGlkKS52YWwoKTsKICAgICAgLy8gICAgIHZhciB0ZXh0QmVmb3JlID0gdi5zdWJzdHJpbmcoMCwgY3Vyc29yUG9zKTsKICAgICAgLy8gICAgIHZhciB0ZXh0QWZ0ZXIgPSB2LnN1YnN0cmluZyhjdXJzb3JQb3MsIHYubGVuZ3RoKTsKICAgICAgLy8gICAgIHRoaXMuYm90X2dyZWV0aW5nc1tpXS50ZXh0ID0gdGV4dEJlZm9yZSArIGVtb2ppICsgdGV4dEFmdGVyOwogICAgICAvLyAgIH0KICAgICAgLy8gfQogICAgICB0aGlzLmJvdF9ncmVldGluZ3MubWFwKGZ1bmN0aW9uIChncmVldGluZykgewogICAgICAgIGlmIChncmVldGluZy5pZCA9PT0gaWQpIHsKICAgICAgICAgIHZhciBjdXJzb3JQb3MgPSAkKCIjIiArIGlkKS5wcm9wKCJzZWxlY3Rpb25FbmQiKTsKICAgICAgICAgIHZhciB2ID0gJCgiIyIgKyBpZCkudmFsKCk7CgogICAgICAgICAgaWYgKF90aGlzMy5vbGRDdXJzb3JQb3NpdGlvbikgewogICAgICAgICAgICB2YXIgdGV4dEJlZm9yZSA9IHYuc3Vic3RyaW5nKDAsIF90aGlzMy5vbGRDdXJzb3JQb3NpdGlvbik7CiAgICAgICAgICAgIHZhciB0ZXh0QWZ0ZXIgPSB2LnN1YnN0cmluZyhfdGhpczMub2xkQ3Vyc29yUG9zaXRpb24sIHYubGVuZ3RoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciB0ZXh0QmVmb3JlID0gdi5zdWJzdHJpbmcoMCwgY3Vyc29yUG9zKTsKICAgICAgICAgICAgdmFyIHRleHRBZnRlciA9IHYuc3Vic3RyaW5nKGN1cnNvclBvcywgdi5sZW5ndGgpOwogICAgICAgICAgfQoKICAgICAgICAgIGdyZWV0aW5nLnRleHQgPSB0ZXh0QmVmb3JlICsgZW1vamkgKyB0ZXh0QWZ0ZXI7IC8vIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CgogICAgICAgICAgIV90aGlzMy5vbGRDdXJzb3JQb3NpdGlvbiA/IF90aGlzMy5vbGRDdXJzb3JQb3NpdGlvbiA9IGN1cnNvclBvcyArIDIgOiBfdGhpczMub2xkQ3Vyc29yUG9zaXRpb24gPSBfdGhpczMub2xkQ3Vyc29yUG9zaXRpb24gKyAyOyAvLyBub2RlLmZvY3VzKCk7CiAgICAgICAgICAvLyBjb25zdCB0ZXh0Tm9kZSA9IG5vZGUuZmlyc3RDaGlsZDsKICAgICAgICAgIC8vIGNvbnN0IGNhcmV0ID0gY3Vyc29yUG9zICsgMTsKICAgICAgICAgIC8vIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsKICAgICAgICAgIC8vIHJhbmdlLnNldFN0YXJ0KHRleHROb2RlLCBjYXJldCk7CiAgICAgICAgICAvLyByYW5nZS5zZXRFbmQodGV4dE5vZGUsIGNhcmV0KTsKICAgICAgICAgIC8vIGNvbnN0IHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTsKICAgICAgICAgIC8vIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTsKICAgICAgICAgIC8vIHNlbC5hZGRSYW5nZShyYW5nZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICByZXNldF9jdXJzb3JfcG9zaXRpb246IGZ1bmN0aW9uIHJlc2V0X2N1cnNvcl9wb3NpdGlvbigpIHsKICAgICAgdGhpcy5vbGRDdXJzb3JQb3NpdGlvbiA9IG51bGw7CiAgICB9LAogICAgYXBwZW5kX29uX3RpdGxlOiBmdW5jdGlvbiBhcHBlbmRfb25fdGl0bGUoZW1vamksIGlkKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgLy8gZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHMubGVuZ3RoOyBpKyspIHsKICAgICAgLy8gICBpZiAodGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzW2ldLmlkID09PSBpZCkgewogICAgICAvLyAgICAgdmFyIGN1cnNvclBvcyA9ICQoIiMiICsgaWQpLnByb3AoInNlbGVjdGlvblN0YXJ0Iik7CiAgICAgIC8vICAgICBsZXQgdiA9ICQoIiMiICsgaWQpLnZhbCgpOwogICAgICAvLyAgICAgdmFyIHRleHRCZWZvcmUgPSB2LnN1YnN0cmluZygwLCBjdXJzb3JQb3MpOwogICAgICAvLyAgICAgdmFyIHRleHRBZnRlciA9IHYuc3Vic3RyaW5nKGN1cnNvclBvcywgdi5sZW5ndGgpOwogICAgICAvLyAgICAgdGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzW2ldLnRpdGxlID0gdGV4dEJlZm9yZSArIGVtb2ppICsgdGV4dEFmdGVyOwogICAgICAvLyAgIH0KICAgICAgLy8gfQogICAgICB0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHMubWFwKGZ1bmN0aW9uICh3aWRnZXRfYnV0dG9uc19kZXRhaWwpIHsKICAgICAgICBpZiAod2lkZ2V0X2J1dHRvbnNfZGV0YWlsLmlkID09PSBpZCkgewogICAgICAgICAgdmFyIGN1cnNvclBvcyA9ICQoIiMiICsgaWQpLnByb3AoInNlbGVjdGlvbkVuZCIpOwogICAgICAgICAgdmFyIHYgPSAkKCIjIiArIGlkKS52YWwoKTsKCiAgICAgICAgICBpZiAoX3RoaXM0Lm9sZEN1cnNvclBvc2l0aW9uKSB7CiAgICAgICAgICAgIHZhciB0ZXh0QmVmb3JlID0gdi5zdWJzdHJpbmcoMCwgX3RoaXM0Lm9sZEN1cnNvclBvc2l0aW9uKTsKICAgICAgICAgICAgdmFyIHRleHRBZnRlciA9IHYuc3Vic3RyaW5nKF90aGlzNC5vbGRDdXJzb3JQb3NpdGlvbiwgdi5sZW5ndGgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHRleHRCZWZvcmUgPSB2LnN1YnN0cmluZygwLCBjdXJzb3JQb3MpOwogICAgICAgICAgICB2YXIgdGV4dEFmdGVyID0gdi5zdWJzdHJpbmcoY3Vyc29yUG9zLCB2Lmxlbmd0aCk7CiAgICAgICAgICB9CgogICAgICAgICAgd2lkZ2V0X2J1dHRvbnNfZGV0YWlsLnRpdGxlID0gdGV4dEJlZm9yZSArIGVtb2ppICsgdGV4dEFmdGVyOyAvLyBjb25zdCBub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOwoKICAgICAgICAgICFfdGhpczQub2xkQ3Vyc29yUG9zaXRpb24gPyBfdGhpczQub2xkQ3Vyc29yUG9zaXRpb24gPSBjdXJzb3JQb3MgKyAyIDogX3RoaXM0Lm9sZEN1cnNvclBvc2l0aW9uID0gX3RoaXM0Lm9sZEN1cnNvclBvc2l0aW9uICsgMjsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdldF9pbnRlbnRzOiBmdW5jdGlvbiBnZXRfaW50ZW50cygpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5zaG93X2ludGVudF91cmwoKSwgewogICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uLAogICAgICAgIHNob3dpbnRlbnQ6ICJUcnVlIgogICAgICB9LCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczUuYXBpX3N0YXR1c19jb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUi5NU0dfQ09ERSkgewogICAgICAgICAgdG9hc3RyLmVycm9yKF90aGlzNS50bHQoImJvdF9jb25maWdfZ2V0X2ludGVudF9lcnJvcl9tc2ciKSk7CiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3BvbnNlLmRhdGEuZGF0YSkgJiYgcmVzcG9uc2UuZGF0YS5kYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVzcG9uc2UuZGF0YS5kYXRhKSB7CiAgICAgICAgICAgIF90aGlzNS5pbnRlbnRsaXN0LnB1c2gocmVzcG9uc2UuZGF0YS5kYXRhW2ldKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHRpdGxlOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUsCiAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzNS4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdG9hc3RyLmVycm9yKF90aGlzNS50bHQoImJvdF9jb25maWdfZ2V0X2ludGVudF9lcnJvcl9tc2cyIikpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgYWRkX2JvdF9ncmVldGluZ3M6IGZ1bmN0aW9uIGFkZF9ib3RfZ3JlZXRpbmdzKCkgewogICAgICB2YXIgbmV4dF9pZCA9IHRoaXMuZ2VuZXJhdGVVVUlEKCk7CiAgICAgIHRoaXMuYm90X2dyZWV0aW5ncy5wdXNoKHsKICAgICAgICB0ZXh0OiBudWxsLAogICAgICAgIGlkOiBuZXh0X2lkLAogICAgICAgIHZpc2libGU6IHRydWUKICAgICAgfSk7CiAgICB9LAogICAgZGVsZXRlX2dyZWV0aW5nOiBmdW5jdGlvbiBkZWxldGVfZ3JlZXRpbmcoaW5kZXgpIHsKICAgICAgaWYgKHRoaXMuYm90X2dyZWV0aW5ncy5sZW5ndGggPT09IDEgJiYgdGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzLmxlbmd0aCA+IDApIHsKICAgICAgICBzd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCJib3RfY29uZmlnX2RlbGV0ZV9tc2ciKSwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgdGVtcF9pbmRleCA9IG51bGw7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYm90X2dyZWV0aW5ncy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0aGlzLmJvdF9ncmVldGluZ3NbaV0uaWQgPT0gaW5kZXgpIHsKICAgICAgICAgIHRlbXBfaW5kZXggPSBpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5ib3RfZ3JlZXRpbmdzLnNwbGljZSh0ZW1wX2luZGV4LCAxKTsKICAgIH0sCiAgICBnZXRfd2lkZ2V0X3NldHRpbmdzOiBmdW5jdGlvbiBnZXRfd2lkZ2V0X3NldHRpbmdzKCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIHRoaXMuYm90X2dyZWV0aW5ncyA9IFtdOwogICAgICB0aGlzLmJpZ19zcGlubmVyID0gdHJ1ZTsgLy8gdGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzID0gW107CgogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy53aWRnZXRfc2V0dGluZ191cmwoKSwgewogICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgaXNTaG93OiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczYuYmlnX3NwaW5uZXIgPSBmYWxzZTsKCiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczYuYXBpX3N0YXR1c19jb2RlLkRBVEFfQVZBSUxBQkxFLk1TR19DT0RFKSB7CiAgICAgICAgICBfdGhpczYudGl0bGUgPSByZXNwb25zZS5kYXRhLmRhdGEuV2lkZ2V0VGl0bGU7CiAgICAgICAgICBfdGhpczYub2xkX3dpZGdldF90aXRsZSA9IF90aGlzNi50aXRsZTsKICAgICAgICAgIF90aGlzNi5maWxlX2xhYmVsID0gcmVzcG9uc2UuZGF0YS5kYXRhLkltYWdlTmFtZTsKICAgICAgICAgIF90aGlzNi5maWxlX2xhYmVsXzIgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90SW1hZ2VOYW1lOwogICAgICAgICAgX3RoaXM2LmZpbGVfbGFiZWxfMyA9IHJlc3BvbnNlLmRhdGEuZGF0YS5CZ0ltYWdlTmFtZTsKICAgICAgICAgIF90aGlzNi5pbWFnZV9maWxlXzMgPSByZXNwb25zZS5kYXRhLmRhdGEuQmdJbWFnZVVybDsKICAgICAgICAgIF90aGlzNi5maWxlX2xhYmVsXzQgPSByZXNwb25zZS5kYXRhLmRhdGEuV2lkZ2V0SWNvbkltYWdlTmFtZTsKICAgICAgICAgIF90aGlzNi5maWxlX2xhYmVsXzUgPSByZXNwb25zZS5kYXRhLmRhdGEuV2lkZ2V0SWNvbkltYWdlTmFtZU9uQ2xvc2U7CiAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcuYm90X3RoZW1lID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdFRoZW1lLmxlbmd0aCA8IDYgPyAocmVzcG9uc2UuZGF0YS5kYXRhLkJvdFRoZW1lICsgcmVzcG9uc2UuZGF0YS5kYXRhLkJvdFRoZW1lLnNsaWNlKDEsIHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RUaGVtZS5sZW5ndGgpKS5zdWJzdHIoMCwgNykgOiByZXNwb25zZS5kYXRhLmRhdGEuQm90VGhlbWU7CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25Cb3JkZXJUaGVtZSAhPSBudWxsKSB7CiAgICAgICAgICAgIF90aGlzNi5ib3Rfc3R5bGluZy5idXR0b25fYm9yZGVyX3RoZW1lID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvbkJvcmRlclRoZW1lLmxlbmd0aCA8IDYgPyAocmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvbkJvcmRlclRoZW1lICsgcmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvbkJvcmRlclRoZW1lLnNsaWNlKDEsIHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25Cb3JkZXJUaGVtZS5sZW5ndGgpKS5zdWJzdHIoMCwgNykgOiByZXNwb25zZS5kYXRhLmRhdGEuQnV0dG9uQm9yZGVyVGhlbWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcuYnV0dG9uX2JvcmRlcl90aGVtZSA9IF90aGlzNi5kZWZhdWx0X2JvdF9zdHlsaW5nX3ZhbHVlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09ICJib3Rfc3R5bGluZy5idXR0b25fYm9yZGVyX3RoZW1lIjsKICAgICAgICAgICAgfSlbMF0udmFsdWU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5Vc2VyUmVzcG9uc2VCZ0NvbG9yICE9IG51bGwpIHsKICAgICAgICAgICAgX3RoaXM2LmJvdF9zdHlsaW5nLnVzZXJfcmVzcG9uc2VfYmdfY29sb3IgPSByZXNwb25zZS5kYXRhLmRhdGEuVXNlclJlc3BvbnNlQmdDb2xvci5sZW5ndGggPCA2ID8gKHJlc3BvbnNlLmRhdGEuZGF0YS5Vc2VyUmVzcG9uc2VCZ0NvbG9yICsgcmVzcG9uc2UuZGF0YS5kYXRhLlVzZXJSZXNwb25zZUJnQ29sb3Iuc2xpY2UoMSwgcmVzcG9uc2UuZGF0YS5kYXRhLlVzZXJSZXNwb25zZUJnQ29sb3IubGVuZ3RoKSkuc3Vic3RyKDAsIDcpIDogcmVzcG9uc2UuZGF0YS5kYXRhLlVzZXJSZXNwb25zZUJnQ29sb3I7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcudXNlcl9yZXNwb25zZV9iZ19jb2xvciA9IF90aGlzNi5kZWZhdWx0X2JvdF9zdHlsaW5nX3ZhbHVlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09ICJib3Rfc3R5bGluZy51c2VyX3Jlc3BvbnNlX2JnX2NvbG9yIjsKICAgICAgICAgICAgfSlbMF0udmFsdWU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RSZXNwb25zZUJnQ29sb3IgIT0gbnVsbCkgewogICAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcuYm90X3Jlc3BvbnNlX2JnX2NvbG9yID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdFJlc3BvbnNlQmdDb2xvci5sZW5ndGggPCA2ID8gKHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RSZXNwb25zZUJnQ29sb3IgKyByZXNwb25zZS5kYXRhLmRhdGEuQm90UmVzcG9uc2VCZ0NvbG9yLnNsaWNlKDEsIHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RSZXNwb25zZUJnQ29sb3IubGVuZ3RoKSkuc3Vic3RyKDAsIDcpIDogcmVzcG9uc2UuZGF0YS5kYXRhLkJvdFJlc3BvbnNlQmdDb2xvcjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzNi5ib3Rfc3R5bGluZy5ib3RfcmVzcG9uc2VfYmdfY29sb3IgPSBfdGhpczYuZGVmYXVsdF9ib3Rfc3R5bGluZ192YWx1ZS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09PSAiYm90X3N0eWxpbmcuYm90X3Jlc3BvbnNlX2JnX2NvbG9yIjsKICAgICAgICAgICAgfSlbMF0udmFsdWU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5EZWxpdmVyeU5vdGVDb2xvciAhPSBudWxsKSB7CiAgICAgICAgICAgIF90aGlzNi5ib3Rfc3R5bGluZy5kZWxpdmVyeV9ub3RlX2NvbG9yID0gcmVzcG9uc2UuZGF0YS5kYXRhLkRlbGl2ZXJ5Tm90ZUNvbG9yLmxlbmd0aCA8IDYgPyAocmVzcG9uc2UuZGF0YS5kYXRhLkRlbGl2ZXJ5Tm90ZUNvbG9yICsgcmVzcG9uc2UuZGF0YS5kYXRhLkRlbGl2ZXJ5Tm90ZUNvbG9yLnNsaWNlKDEsIHJlc3BvbnNlLmRhdGEuZGF0YS5EZWxpdmVyeU5vdGVDb2xvci5sZW5ndGgpKS5zdWJzdHIoMCwgNykgOiByZXNwb25zZS5kYXRhLmRhdGEuRGVsaXZlcnlOb3RlQ29sb3I7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcuZGVsaXZlcnlfbm90ZV9jb2xvciA9IF90aGlzNi5kZWZhdWx0X2JvdF9zdHlsaW5nX3ZhbHVlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09ICJib3Rfc3R5bGluZy5kZWxpdmVyeV9ub3RlX2NvbG9yIjsKICAgICAgICAgICAgfSlbMF0udmFsdWU7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXM2LmJvdF9zdHlsaW5nLmJ1dHRvbl90aGVtZSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25UaGVtZS5sZW5ndGggPCA2ID8gKHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25UaGVtZSArIHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25UaGVtZS5zbGljZSgxLCByZXNwb25zZS5kYXRhLmRhdGEuQnV0dG9uVGhlbWUubGVuZ3RoKSkuc3Vic3RyKDAsIDcpIDogcmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvblRoZW1lOwoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGEuQm90R3JlZXRpbmdzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgX3RoaXM2LmJvdF9ncmVldGluZ3MgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90R3JlZXRpbmdzOwogICAgICAgICAgICBfdGhpczYud2lkZ2V0X2J1dHRvbnNfZGV0YWlscyA9IF90aGlzNi5ib3RfZ3JlZXRpbmdzW190aGlzNi5ib3RfZ3JlZXRpbmdzLmxlbmd0aCAtIDFdLmJ1dHRvbnM7CgogICAgICAgICAgICBfdGhpczYuYm90X2dyZWV0aW5ncy5tYXAoZnVuY3Rpb24gKGN2LCBpbmQsIGFycikgewogICAgICAgICAgICAgIGRlbGV0ZSBfdGhpczYuYm90X2dyZWV0aW5nc1tpbmRdLmJ1dHRvbnM7CiAgICAgICAgICAgICAgX3RoaXM2LmJvdF9ncmVldGluZ3NbaW5kXS5pZCA9IF90aGlzNi5nZW5lcmF0ZVVVSUQoKTsKICAgICAgICAgICAgICBfdGhpczYuYm90X2dyZWV0aW5nc1tpbmRdLnZpc2libGUgPSBfdGhpczYuYm90X2dyZWV0aW5nc1tpbmRdLnZpc2libGUgIT09IHVuZGVmaW5lZCA/IF90aGlzNi5ib3RfZ3JlZXRpbmdzW2luZF0udmlzaWJsZSA6IHRydWU7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKF90aGlzNi53aWRnZXRfYnV0dG9uc19kZXRhaWxzID09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIF90aGlzNi53aWRnZXRfYnV0dG9uc19kZXRhaWxzID0gW107CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXM2LndpZGdldF9idXR0b25zX2RldGFpbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBfdGhpczYud2lkZ2V0X2J1dHRvbnNfZGV0YWlsc1tpXS5pZCA9IF90aGlzNi5nZW5lcmF0ZVVVSUQoKTsgLy8gdGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzWwogICAgICAgICAgICAgIC8vICAgaQogICAgICAgICAgICAgIC8vIF0udmFsdWUgPSB0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHNbaV0udmFsdWUucmVwbGFjZSgKICAgICAgICAgICAgICAvLyAgIHRoaXMuY29tcGFueWlkICsgIl8iLAogICAgICAgICAgICAgIC8vICAgIiIKICAgICAgICAgICAgICAvLyApOwoKICAgICAgICAgICAgICBfdGhpczYud2lkZ2V0X2J1dHRvbnNfZGV0YWlsc1tpXS52YWx1ZSA9IF90aGlzNi53aWRnZXRfYnV0dG9uc19kZXRhaWxzW2ldLnZhbHVlOwogICAgICAgICAgICAgIF90aGlzNi53aWRnZXRfYnV0dG9uc19kZXRhaWxzW2ldLnZhbHVlID0gX3RoaXM2LndpZGdldF9idXR0b25zX2RldGFpbHNbaV0udmFsdWUucmVwbGFjZSgiLyIsICIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzNi5ib3RfZm9udF9zdHlsZSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RGb250LkZvbnRTdHlsZTsKICAgICAgICAgIF90aGlzNi5ib3RfZm9udF9jb2xvcl9zZW5kZXIgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90Rm9udC5Gb250Q29sb3JTZW5kZXI7CiAgICAgICAgICBfdGhpczYuYm90X2ZvbnRfY29sb3JfcmVjZWl2ZXIgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90Rm9udC5Gb250Q29sb3JSZWNlaXZlcjsKICAgICAgICAgIF90aGlzNi5ib3RfZm9udF9jb2xvcl9idXR0b25zID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdEZvbnQuRm9udENvbG9yQnV0dG9uczsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvblN0eWxpbmcpIHsKICAgICAgICAgICAgX3RoaXM2LmJvdF9zdHlsaW5nLmhvcml6b250YWxfc3BhY2luZyA9IHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25TdHlsaW5nLmhvcml6b250YWw7CiAgICAgICAgICAgIF90aGlzNi5ib3Rfc3R5bGluZy52ZXJ0aWNhbF9zcGFjaW5nID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvblN0eWxpbmcudmVydGljYWw7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5XaWRnZXRQb3NpdGlvbikgewogICAgICAgICAgICBfdGhpczYuYm90X2FsaWdubWVudCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5XaWRnZXRQb3NpdGlvbi5hbGlnbjsKICAgICAgICAgICAgX3RoaXM2LmJvdF92ZXJ0aWNhbF9wb3NpdGlvbiA9IHJlc3BvbnNlLmRhdGEuZGF0YS5XaWRnZXRQb3NpdGlvbi52ZXJ0aWNhbDsKICAgICAgICAgICAgX3RoaXM2LmJvdF9ob3Jpem9udGFsX3Bvc2l0aW9uID0gcmVzcG9uc2UuZGF0YS5kYXRhLldpZGdldFBvc2l0aW9uLmhvcml6b250YWw7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RTdHlsaW5nKSB7CiAgICAgICAgICAgIF90aGlzNi5ib3RfYnV0dG9uc19hbGlnbm1lbnQgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90U3R5bGluZzsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5kYXRhLkhlYWRlclN0eWxpbmcpIHsKICAgICAgICAgICAgX3RoaXM2LmJvdF9oZWFkZXJfYWxpZ25tZW50ID0gcmVzcG9uc2UuZGF0YS5kYXRhLkhlYWRlclN0eWxpbmc7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5IZWFkZXJUaGVtZSkgewogICAgICAgICAgICBfdGhpczYuYm90X2hlYWRlcl9iYWNrZ3JvdW5kID0gcmVzcG9uc2UuZGF0YS5kYXRhLkhlYWRlclRoZW1lOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChfdGhpczYuZmlsZV9sYWJlbF8zICE9ICIiKSB7CiAgICAgICAgICAgIF90aGlzNi5ib3RfYmFja2dyb3VuZF90eXBlID0gImltYWdlIjsKICAgICAgICAgIH0KCiAgICAgICAgICBfdGhpczYub2xkX2ltYWdlX25hbWUgPSBfdGhpczYuZmlsZV9sYWJlbDsKCiAgICAgICAgICBpZiAoX3RoaXM2LmZpbGVfbGFiZWwgPT0gIiIpIHsKICAgICAgICAgICAgX3RoaXM2LmZpbGVfbGFiZWwgPSAiQ2hvb3NlIGZpbGUiOwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzNi5vbGRfaW1hZ2VfbmFtZV8yID0gX3RoaXM2LmZpbGVfbGFiZWxfMjsKCiAgICAgICAgICBpZiAoX3RoaXM2LmZpbGVfbGFiZWxfMiA9PSAiIiB8fCBfdGhpczYuZmlsZV9sYWJlbF8yID09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBfdGhpczYuZmlsZV9sYWJlbF8yID0gIkNob29zZSBmaWxlIjsKICAgICAgICAgIH0KCiAgICAgICAgICBfdGhpczYub2xkX2ltYWdlX25hbWVfMyA9IF90aGlzNi5maWxlX2xhYmVsXzM7CgogICAgICAgICAgaWYgKF90aGlzNi5maWxlX2xhYmVsXzMgPT0gIiIgfHwgX3RoaXM2LmZpbGVfbGFiZWxfMyA9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgX3RoaXM2LmZpbGVfbGFiZWxfMyA9ICJDaG9vc2UgZmlsZSI7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXM2Lm9sZF9pbWFnZV9uYW1lXzQgPSBfdGhpczYuZmlsZV9sYWJlbF80OwoKICAgICAgICAgIGlmIChfdGhpczYuZmlsZV9sYWJlbF80ID09ICIiIHx8IF90aGlzNi5maWxlX2xhYmVsXzQgPT0gdW5kZWZpbmVkIHx8IF90aGlzNi5maWxlX2xhYmVsXzQgPT0gIkNob29zZSBGaWxlIikgewogICAgICAgICAgICBfdGhpczYuZmlsZV9sYWJlbF80ID0gIkNob29zZSBmaWxlIjsKICAgICAgICAgICAgX3RoaXM2Lm9sZF9pbWFnZV9uYW1lXzQgPSBudWxsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXM2LndpZGdldF9pY29uX3R5cGUgPSAiaW1hZ2UiOwogICAgICAgICAgICBfdGhpczYuZGVmYXVsX3dpZGdldF9pY29uID0gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXM2Lm9sZF9pbWFnZV9uYW1lXzUgPSBfdGhpczYuZmlsZV9sYWJlbF81OwoKICAgICAgICAgIGlmIChfdGhpczYuZmlsZV9sYWJlbF81ID09ICIiIHx8IF90aGlzNi5maWxlX2xhYmVsXzUgPT0gdW5kZWZpbmVkIHx8IF90aGlzNi5maWxlX2xhYmVsXzUgPT0gIkNob29zZSBGaWxlIikgewogICAgICAgICAgICBfdGhpczYuZmlsZV9sYWJlbF81ID0gIkNob29zZSBmaWxlIjsKICAgICAgICAgICAgX3RoaXM2Lm9sZF9pbWFnZV9uYW1lXzUgPSBudWxsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXM2LndpZGdldF9pY29uX3R5cGUgPSAiaW1hZ2UiOwogICAgICAgICAgICBfdGhpczYuZGVmYXVsX3dpZGdldF9pY29uID0gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5XaWRnZXRJY29uVXJsID09IG51bGwgJiYgcmVzcG9uc2UuZGF0YS5kYXRhLldpZGdldEljb25VcmxPbkNsb3NlID09IG51bGwpIHsKICAgICAgICAgICAgX3RoaXM2LndpZGdldF9pY29uX3R5cGUgPSAibm9uZSI7CiAgICAgICAgICAgIF90aGlzNi5kZWZhdWxfd2lkZ2V0X2ljb24gPSB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzNi5ib3Rfc3R5bGluZy5ib3Rfb3Blbl9ieV9kZWZhdWx0ID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdE9wZW5CeURlZmF1bHQ7CiAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcuaXNfcG93ZXJlZF9ieV9jZW5zZSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5Jc1Bvd2VyZWRCeUNlbnNlID09PSB1bmRlZmluZWQgPyBfdGhpczYuYm90X3N0eWxpbmcuaXNfcG93ZXJlZF9ieV9jZW5zZSA6IHJlc3BvbnNlLmRhdGEuZGF0YS5Jc1Bvd2VyZWRCeUNlbnNlOwogICAgICAgICAgX3RoaXM2LmJvdF9zdHlsaW5nLmJvdF9zaG93bl9vbl93ZWJzaXRlID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdFNob3duT25XZWJzaXRlID09IG51bGwgfHwgcmVzcG9uc2UuZGF0YS5kYXRhLkJvdFNob3duT25XZWJzaXRlID09IHVuZGVmaW5lZCA/IHRydWUgOiByZXNwb25zZS5kYXRhLmRhdGEuQm90U2hvd25PbldlYnNpdGU7CiAgICAgICAgICB2YXIgY2hhdF9wYXJhbXMgPSB7CiAgICAgICAgICAgIGxvZ286IHJlc3BvbnNlLmRhdGEuZGF0YS5JbWFnZVVybCwKICAgICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEuZGF0YS5XaWRnZXRUaXRsZSwKICAgICAgICAgICAgYnV0dG9uX3RoZW1lOiByZXNwb25zZS5kYXRhLmRhdGEuQnV0dG9uVGhlbWUsCiAgICAgICAgICAgIGJvdF90aGVtZTogcmVzcG9uc2UuZGF0YS5kYXRhLkJvdFRoZW1lLAogICAgICAgICAgICBidXR0b25fYm9yZGVyX3RoZW1lOiByZXNwb25zZS5kYXRhLmRhdGEuQnV0dG9uQm9yZGVyVGhlbWUsCiAgICAgICAgICAgIHVzZXJfcmVzcG9uc2VfYmdfY29sb3I6IHJlc3BvbnNlLmRhdGEuZGF0YS5Vc2VyUmVzcG9uc2VCZ0NvbG9yLAogICAgICAgICAgICBib3RfcmVzcG9uc2VfYmdfY29sb3I6IHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RSZXNwb25zZUJnQ29sb3IsCiAgICAgICAgICAgIGRlbGl2ZXJ5X25vdGVfY29sb3I6IHJlc3BvbnNlLmRhdGEuZGF0YS5EZWxpdmVyeU5vdGVDb2xvciwKICAgICAgICAgICAgYm90X2ljb246IHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RJbWFnZVVybCwKICAgICAgICAgICAgYm90X2JhY2tncm91bmRfaW1hZ2U6IHJlc3BvbnNlLmRhdGEuZGF0YS5CZ0ltYWdlVXJsLAogICAgICAgICAgICBidXR0b25faG9yaXpvbnRhbF9zcGFjaW5nOiByZXNwb25zZS5kYXRhLmRhdGEuQnV0dG9uU3R5bGluZy5ob3Jpem9udGFsLAogICAgICAgICAgICBidXR0b25fdmVydGljYWxfc3BhY2luZzogcmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvblN0eWxpbmcudmVydGljYWwsCiAgICAgICAgICAgIGJ1dHRvbl9hbGlnbm1lbnQ6IHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RTdHlsaW5nLAogICAgICAgICAgICBpc19wb3dlcmVkX2J5X2NlbnNlOiByZXNwb25zZS5kYXRhLmRhdGEuSXNQb3dlcmVkQnlDZW5zZQogICAgICAgICAgfTsKCiAgICAgICAgICBfdGhpczYuJHNlc3Npb24uc2V0KCJDaGF0Qm90SW1hZ2VQYXJhbWV0ZXJzIiwgY2hhdF9wYXJhbXMpOwoKICAgICAgICAgIF90aGlzNi5ib3Rfc3R5bGluZy5kZWxpdmVyeV9ub3RlX2NvbG9yID0gcmVzcG9uc2UuZGF0YS5kYXRhLkRlbGl2ZXJ5Tm90ZUNvbG9yID09PSBudWxsID8gX3RoaXM2LmJvdF9zdHlsaW5nLmRlbGl2ZXJ5X25vdGVfY29sb3IgOiByZXNwb25zZS5kYXRhLmRhdGEuRGVsaXZlcnlOb3RlQ29sb3I7CiAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcuYnV0dG9uX2JvcmRlcl90aGVtZSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25Cb3JkZXJUaGVtZSA9PT0gbnVsbCA/IF90aGlzNi5ib3Rfc3R5bGluZy5idXR0b25fYm9yZGVyX3RoZW1lIDogcmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvbkJvcmRlclRoZW1lOwogICAgICAgICAgX3RoaXM2LmJvdF9zdHlsaW5nLnVzZXJfcmVzcG9uc2VfYmdfY29sb3IgPSByZXNwb25zZS5kYXRhLmRhdGEuVXNlclJlc3BvbnNlQmdDb2xvciA9PT0gbnVsbCA/IF90aGlzNi5ib3Rfc3R5bGluZy51c2VyX3Jlc3BvbnNlX2JnX2NvbG9yIDogcmVzcG9uc2UuZGF0YS5kYXRhLlVzZXJSZXNwb25zZUJnQ29sb3I7CiAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcuYm90X3Jlc3BvbnNlX2JnX2NvbG9yID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdFJlc3BvbnNlQmdDb2xvciA9PT0gbnVsbCA/IF90aGlzNi5ib3Rfc3R5bGluZy5ib3RfcmVzcG9uc2VfYmdfY29sb3IgOiByZXNwb25zZS5kYXRhLmRhdGEuQm90UmVzcG9uc2VCZ0NvbG9yOwogICAgICAgICAgX3RoaXM2LmJvdF9zdHlsaW5nLnNob3dfYm90X2hpc3RvcnkgPSByZXNwb25zZS5kYXRhLmRhdGEuU2hvd0JvdEhpc3RvcnkgPT09IHVuZGVmaW5lZCA/IHRydWUgOiByZXNwb25zZS5kYXRhLmRhdGEuU2hvd0JvdEhpc3Rvcnk7CiAgICAgICAgICBfdGhpczYuYm90X3N0eWxpbmcuaXNfY29uZnVzaW9uX21zZyA9IHJlc3BvbnNlLmRhdGEuZGF0YS5jb25mdXNpb25fbXNnID09PSB1bmRlZmluZWQgPyAiIiA6IHJlc3BvbnNlLmRhdGEuZGF0YS5jb25mdXNpb25fbXNnOwogICAgICAgICAgX3RoaXM2LnZlcmlmeV9ib3Rfc2V0dGluZ3MgPSByZXNwb25zZS5kYXRhLmRhdGE7IC8vIHRoaXMudmVyaWZ5X2JvdF9zZXR0aW5ncy5Cb3RHcmVldGluZ3NbdGhpcy5ib3RfZ3JlZXRpbmdzLmxlbmd0aCAtIDFdLmJ1dHRvbnMgPSB0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHM7CgogICAgICAgICAgX3RoaXM2LnZlcmlmeV9jaGVjayA9IHRydWU7CiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXM2LmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgIFN3YWwoewogICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICB0ZXh0OiBfdGhpczYudGx0KCdhZGRfcm9sZV9pbnRlcm5hbF9zZXJ2ZXJfbXNnJyksCiAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSBfdGhpczYuYXBpX3N0YXR1c19jb2RlLkVNUFRZX0RBVEEuTVNHX0NPREUpIHsvLyBTd2FsKHsKICAgICAgICAgIC8vICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIC8vICAgdGV4dDogdGhpcy50bHQoJ25vX2RhdGFfdGV4dCcpLAogICAgICAgICAgLy8gICB0aW1lcjozMDAwLCAgICAgCiAgICAgICAgICAvLyB9KTsgIAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSwKICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TRywKICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzNi5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgIF90aGlzNi52ZXJpZnlfY2hlY2sgPSBmYWxzZTsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKCiAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICBfdGhpczYuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICByZXNldF90b19kZWZhdWx0OiBmdW5jdGlvbiByZXNldF90b19kZWZhdWx0KHZhbHVlKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kZWZhdWx0X2JvdF9zdHlsaW5nX3ZhbHVlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdF9ib3Rfc3R5bGluZ192YWx1ZVtpXS5uYW1lID09PSB2YWx1ZSkgewogICAgICAgICAgaWYgKHZhbHVlID09PSAiYm90X3N0eWxpbmcuYnV0dG9uX3RoZW1lIikgewogICAgICAgICAgICB0aGlzLmJvdF9zdHlsaW5nLmJ1dHRvbl90aGVtZSA9IHRoaXMuZGVmYXVsdF9ib3Rfc3R5bGluZ192YWx1ZVtpXS52YWx1ZTsKICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICJib3Rfc3R5bGluZy5ib3RfdGhlbWUiKSB7CiAgICAgICAgICAgIHRoaXMuYm90X3N0eWxpbmcuYm90X3RoZW1lID0gdGhpcy5kZWZhdWx0X2JvdF9zdHlsaW5nX3ZhbHVlW2ldLnZhbHVlOwogICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gImJvdF9zdHlsaW5nLmJ1dHRvbl9ib3JkZXJfdGhlbWUiKSB7CiAgICAgICAgICAgIHRoaXMuYm90X3N0eWxpbmcuYnV0dG9uX2JvcmRlcl90aGVtZSA9IHRoaXMuZGVmYXVsdF9ib3Rfc3R5bGluZ192YWx1ZVtpXS52YWx1ZTsKICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICJib3Rfc3R5bGluZy51c2VyX3Jlc3BvbnNlX2JnX2NvbG9yIikgewogICAgICAgICAgICB0aGlzLmJvdF9zdHlsaW5nLnVzZXJfcmVzcG9uc2VfYmdfY29sb3IgPSB0aGlzLmRlZmF1bHRfYm90X3N0eWxpbmdfdmFsdWVbaV0udmFsdWU7CiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAiYm90X3N0eWxpbmcuZGVsaXZlcnlfbm90ZV9jb2xvciIpIHsKICAgICAgICAgICAgdGhpcy5ib3Rfc3R5bGluZy5kZWxpdmVyeV9ub3RlX2NvbG9yID0gdGhpcy5kZWZhdWx0X2JvdF9zdHlsaW5nX3ZhbHVlW2ldLnZhbHVlOwogICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gImJvdF9zdHlsaW5nLmJvdF9yZXNwb25zZV9iZ19jb2xvciIpIHsKICAgICAgICAgICAgdGhpcy5ib3Rfc3R5bGluZy5ib3RfcmVzcG9uc2VfYmdfY29sb3IgPSB0aGlzLmRlZmF1bHRfYm90X3N0eWxpbmdfdmFsdWVbaV0udmFsdWU7CiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAiYm90X3N0eWxpbmcuaG9yaXpvbnRhbF9zcGFjaW5nIikgewogICAgICAgICAgICB0aGlzLmJvdF9zdHlsaW5nLmhvcml6b250YWxfc3BhY2luZyA9IHRoaXMuZGVmYXVsdF9ib3Rfc3R5bGluZ192YWx1ZVtpXS52YWx1ZTsKICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICJib3Rfc3R5bGluZy52ZXJ0aWNhbF9zcGFjaW5nIikgewogICAgICAgICAgICB0aGlzLmJvdF9zdHlsaW5nLnZlcnRpY2FsX3NwYWNpbmcgPSB0aGlzLmRlZmF1bHRfYm90X3N0eWxpbmdfdmFsdWVbaV0udmFsdWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzW3ZhbHVlXSA9IHRoaXMuZGVmYXVsdF9ib3Rfc3R5bGluZ192YWx1ZVtpXS52YWx1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBhZGRfYnV0dG9uc19mb3Jfd2lkZ2V0OiBmdW5jdGlvbiBhZGRfYnV0dG9uc19mb3Jfd2lkZ2V0KCkgewogICAgICBpZiAodGhpcy5ib3RfZ3JlZXRpbmdzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHN3YWwoewogICAgICAgICAgdGV4dDogdGhpcy50bHQoImJvdF9jb25maWdfemVyb19idG5fbXNnIiksCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHRlbXBfaWQgPSB0aGlzLmdlbmVyYXRlVVVJRCgpOwogICAgICB0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHMucHVzaCh7CiAgICAgICAgdGl0bGU6IG51bGwsCiAgICAgICAgdmFsdWU6IHRoaXMuaW50ZW50bGlzdFswXSwKICAgICAgICBpZDogdGVtcF9pZCwKICAgICAgICB2aXNpYmxlOiB0cnVlCiAgICAgIH0pOwogICAgfSwKICAgIGRlbGV0ZV93aWRnZXRfYnV0dG9uOiBmdW5jdGlvbiBkZWxldGVfd2lkZ2V0X2J1dHRvbihidXR0b25fZGV0KSB7CiAgICAgIGlmIChidXR0b25fZGV0LmRpc2FibGVkID09PSB0cnVlKSB7CiAgICAgICAgc3dhbCh7CiAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgiYm90X2NvbmZpZ19kZWZhdWx0X2J0biIpLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciB0ZW1wX2luZGV4ID0gbnVsbDsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmICh0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHNbaV0uaWQgPT0gYnV0dG9uX2RldC5pZCkgewogICAgICAgICAgICB0ZW1wX2luZGV4ID0gaTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRoaXMud2lkZ2V0X2J1dHRvbnNfZGV0YWlscy5zcGxpY2UodGVtcF9pbmRleCwgMSk7CiAgICAgIH0KICAgIH0sCiAgICBmaWxlaW5wdXQ6IGZ1bmN0aW9uIGZpbGVpbnB1dChlKSB7CiAgICAgIHZhciBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzIHx8IGUuZGF0YVRyYW5zZmVyLmZpbGVzOwoKICAgICAgaWYgKGZpbGVzWzBdLnNpemUgPiAyMDk3MTUyKSB7CiAgICAgICAgc3dhbCh7CiAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgiYm90X2NvbmZpZ19pbWdfc2l6ZV9tc2cxIiksCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDEwMDAwCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoZmlsZXNbMF0udHlwZSA9PT0gImltYWdlL3BuZyIgfHwgZmlsZXNbMF0udHlwZSA9PT0gImltYWdlL2pwZWciKSB7CiAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHJldHVybjsKICAgICAgICB0aGlzLm9sZF9pbWFnZV9uYW1lID0gdGhpcy5maWxlX2xhYmVsOwogICAgICAgIHRoaXMuZmlsZV9sYWJlbCA9IGZpbGVzWzBdLm5hbWU7CiAgICAgICAgdGhpcy5jcmVhdGVJbWFnZShmaWxlc1swXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdG9hc3RyLmVycm9yKHRoaXMudGx0KCJib3RfY29uZmlnX2ltZ190eXBlX21zZzEiKSk7CiAgICAgIH0KICAgIH0sCiAgICBmaWxlaW5wdXQyOiBmdW5jdGlvbiBmaWxlaW5wdXQyKGUpIHsKICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXMgfHwgZS5kYXRhVHJhbnNmZXIuZmlsZXM7CgogICAgICBpZiAoZmlsZXNbMF0uc2l6ZSA+IDIwOTcxNTIpIHsKICAgICAgICBzd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCJib3RfY29uZmlnX2ltZ19zaXplX21zZzIiKSwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMTAwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChmaWxlc1swXS50eXBlID09PSAiaW1hZ2UvcG5nIiB8fCBmaWxlc1swXS50eXBlID09PSAiaW1hZ2UvanBlZyIpIHsKICAgICAgICBpZiAoIWZpbGVzLmxlbmd0aCkgcmV0dXJuOwogICAgICAgIHRoaXMub2xkX2ltYWdlX25hbWVfMiA9IHRoaXMuZmlsZV9sYWJlbF8yOwogICAgICAgIHRoaXMuZmlsZV9sYWJlbF8yID0gZmlsZXNbMF0ubmFtZTsKICAgICAgICB0aGlzLmNyZWF0ZUltYWdlMihmaWxlc1swXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdG9hc3RyLmVycm9yKHRoaXMudGx0KCJib3RfY29uZmlnX2ltZ190eXBlX21zZzIiKSk7CiAgICAgIH0KICAgIH0sCiAgICBmaWxlaW5wdXQzOiBmdW5jdGlvbiBmaWxlaW5wdXQzKGUpIHsKICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXMgfHwgZS5kYXRhVHJhbnNmZXIuZmlsZXM7CiAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47CgogICAgICBpZiAoZmlsZXNbMF0uc2l6ZSA+IDIwOTcxNTIpIHsKICAgICAgICBzd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCJib3RfY29uZmlnX2ltZ19zaXplX21zZzMiKSwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMTAwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChmaWxlc1swXS50eXBlID09PSAiaW1hZ2UvcG5nIiB8fCBmaWxlc1swXS50eXBlID09PSAiaW1hZ2UvanBlZyIpIHsKICAgICAgICBpZiAoIXRoaXMuaXNfYmdfaW1hZ2VfY2hhbmdlZCkgewogICAgICAgICAgdGhpcy5vbGRfaW1hZ2VfbmFtZV8zID0gdGhpcy5maWxlX2xhYmVsXzM7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmZpbGVfbGFiZWxfMyA9IGZpbGVzWzBdLm5hbWU7CiAgICAgICAgdGhpcy5jcmVhdGVJbWFnZTMoZmlsZXNbMF0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRvYXN0ci5lcnJvcih0aGlzLnRsdCgiYm90X2NvbmZpZ19pbWdfdHlwZV9tc2czIikpOwogICAgICB9CiAgICB9LAogICAgZmlsZWlucHV0NDogZnVuY3Rpb24gZmlsZWlucHV0NChlKSB7CiAgICAgIHZhciBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzIHx8IGUuZGF0YVRyYW5zZmVyLmZpbGVzOwogICAgICBpZiAoIWZpbGVzLmxlbmd0aCkgcmV0dXJuOwoKICAgICAgaWYgKGZpbGVzWzBdLnNpemUgPiAxMDk3MTUyKSB7CiAgICAgICAgc3dhbCh7CiAgICAgICAgICB0ZXh0OiAiVXBsb2FkIGltYWdlIHdpdGggc2l6ZSBsZXNzIHRoYW4gMU1CIiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMTAwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChmaWxlc1swXS50eXBlID09PSAiaW1hZ2UvcG5nIiB8fCBmaWxlc1swXS50eXBlID09PSAiaW1hZ2UvanBlZyIpIHsKICAgICAgICBpZiAoIXRoaXMuaXNfYmdfaW1hZ2VfY2hhbmdlZCkgewogICAgICAgICAgdGhpcy5vbGRfaW1hZ2VfbmFtZV80ID0gdGhpcy5maWxlX2xhYmVsXzQ7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmZpbGVfbGFiZWxfNCA9IGZpbGVzWzBdLm5hbWU7CiAgICAgICAgdGhpcy5jcmVhdGVJbWFnZTQoZmlsZXNbMF0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRvYXN0ci5lcnJvcigiUGxlYXNlIFNlbGVjdCBhbiBJbWFnZSBvZiB0eXBlIFBORyBvciBKUEVHIik7CiAgICAgIH0KICAgIH0sCiAgICBmaWxlaW5wdXQ1OiBmdW5jdGlvbiBmaWxlaW5wdXQ1KGUpIHsKICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXMgfHwgZS5kYXRhVHJhbnNmZXIuZmlsZXM7CiAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47CgogICAgICBpZiAoZmlsZXNbMF0uc2l6ZSA+IDEwOTcxNTIpIHsKICAgICAgICBzd2FsKHsKICAgICAgICAgIHRleHQ6ICJVcGxvYWQgaW1hZ2Ugd2l0aCBzaXplIGxlc3MgdGhhbiAxTUIiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAxMDAwMAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKGZpbGVzWzBdLnR5cGUgPT09ICJpbWFnZS9wbmciIHx8IGZpbGVzWzBdLnR5cGUgPT09ICJpbWFnZS9qcGVnIikgewogICAgICAgIGlmICghdGhpcy5pc19iZ19pbWFnZV9jaGFuZ2VkKSB7CiAgICAgICAgICB0aGlzLm9sZF9pbWFnZV9uYW1lXzUgPSB0aGlzLmZpbGVfbGFiZWxfNTsKICAgICAgICB9CgogICAgICAgIHRoaXMuZmlsZV9sYWJlbF81ID0gZmlsZXNbMF0ubmFtZTsKICAgICAgICB0aGlzLmNyZWF0ZUltYWdlNShmaWxlc1swXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdG9hc3RyLmVycm9yKCJQbGVhc2UgU2VsZWN0IGFuIEltYWdlIG9mIHR5cGUgUE5HIG9yIEpQRUciKTsKICAgICAgfQogICAgfSwKICAgIGNyZWF0ZUltYWdlOiBmdW5jdGlvbiBjcmVhdGVJbWFnZShmaWxlLCB0eXBlKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczcuaW1hZ2VfZmlsZSA9IGUudGFyZ2V0LnJlc3VsdC5zcGxpdCgiYmFzZTY0LCIpWzFdOwogICAgICB9OwoKICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICB9LAogICAgY3JlYXRlSW1hZ2UyOiBmdW5jdGlvbiBjcmVhdGVJbWFnZTIoZmlsZSwgdHlwZSkgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXM4LmltYWdlX2ZpbGVfMiA9IGUudGFyZ2V0LnJlc3VsdC5zcGxpdCgiYmFzZTY0LCIpWzFdOwogICAgICB9OwoKICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICB9LAogICAgY3JlYXRlSW1hZ2UzOiBmdW5jdGlvbiBjcmVhdGVJbWFnZTMoZmlsZSwgdHlwZSkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXM5LmltYWdlX2ZpbGVfMyA9IGUudGFyZ2V0LnJlc3VsdC5zcGxpdCgiYmFzZTY0LCIpWzFdOwogICAgICB9OwoKICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICB9LAogICAgY3JlYXRlSW1hZ2U0OiBmdW5jdGlvbiBjcmVhdGVJbWFnZTQoZmlsZSwgdHlwZSkgewogICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKCiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzMTAuaW1hZ2VfZmlsZV80ID0gZS50YXJnZXQucmVzdWx0LnNwbGl0KCJiYXNlNjQsIilbMV07CiAgICAgIH07CgogICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTsKICAgIH0sCiAgICBjcmVhdGVJbWFnZTU6IGZ1bmN0aW9uIGNyZWF0ZUltYWdlNShmaWxlLCB0eXBlKSB7CiAgICAgIHZhciBfdGhpczExID0gdGhpczsKCiAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXMxMS5pbWFnZV9maWxlXzUgPSBlLnRhcmdldC5yZXN1bHQuc3BsaXQoImJhc2U2NCwiKVsxXTsKICAgICAgfTsKCiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpOwogICAgfSwKICAgIHVwbG9hZF9pbWFnZTogZnVuY3Rpb24gdXBsb2FkX2ltYWdlKCkgewogICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CgogICAgICBjb25zb2xlLmxvZyh0aGlzLmltYWdlX2ZpbGVfMyk7CgogICAgICBpZiAodGhpcy5ib3RfdmVydGljYWxfcG9zaXRpb24gPiAxNTApIHsKICAgICAgICBzd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCJib3RfY29uZmlnX3ZlcnRpY2FsX3Bvc19tc2ciKSwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMTAwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmJvdF9ob3Jpem9udGFsX3Bvc2l0aW9uID4gMzIpIHsKICAgICAgICBzd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCJib3RfY29uZmlnX2hvcml6b250YWxfcG9zX21zZyIpLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAxMDAwMAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuZGVmYXVsX3dpZGdldF9pY29uID09IHRydWUpIHsKICAgICAgICB0aGlzLmZpbGVfbGFiZWxfNCA9ICJDaG9vc2UgZmlsZSI7CiAgICAgICAgdGhpcy5pbWFnZV9maWxlXzQgPSBudWxsOwogICAgICAgIHRoaXMub2xkX2ltYWdlX25hbWVfNCA9IG51bGw7CiAgICAgICAgdGhpcy5maWxlX2xhYmVsXzUgPSAiQ2hvb3NlIGZpbGUiOwogICAgICAgIHRoaXMuaW1hZ2VfZmlsZV81ID0gbnVsbDsKICAgICAgICB0aGlzLm9sZF9pbWFnZV9uYW1lXzUgPSBudWxsOwogICAgICB9IGVsc2UgaWYgKCAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRXaWRnZXRGaWxlMDEiKS52YWx1ZSA9PSAiIiB8fAogICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRXaWRnZXRGaWxlMDIiKS52YWx1ZSA9PSAiIgogICAgICB0aGlzLmZpbGVfbGFiZWxfNCA9PSAiIiB8fCB0aGlzLmZpbGVfbGFiZWxfNSA9PSAiIikgewogICAgICAgIHRvYXN0ci5lcnJvcigiUGxlYXNlIFNlbGVjdCBCb3RoIEltYWdlIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5ib3RfaGVhZGVyX2FsaWdubWVudCA9PT0gbnVsbCkgewogICAgICAgIHN3YWwoewogICAgICAgICAgdGV4dDogdGhpcy50bHQoImJvdF9jb25maWdfaGVhZGVyX2FsaWduX21zZyIpLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgaWYgKHRoaXMuYm90X2J1dHRvbnNfYWxpZ25tZW50ID09PSBudWxsKSB7CiAgICAgICAgc3dhbCh7CiAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgiYm90X2NvbmZpZ19idG5fYWxpZ25fbXNnIiksCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSBpZiAodGhpcy5maWxlX2xhYmVsICE9IHRoaXMub2xkX2ltYWdlX25hbWUgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImlucHV0R3JvdXBGaWxlMDEiKS52YWx1ZSA9PSAiIikgewogICAgICAgIHRvYXN0ci5lcnJvcih0aGlzLnRsdCgiYm90X2NvbmZpZ19zZWxlY3RfaW1nX2ZpbGVfbXNnMSIpKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmZpbGVfbGFiZWwgIT0gdGhpcy5vbGRfaW1hZ2VfbmFtZSAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRHcm91cEZpbGUwMSIpLnZhbHVlID09ICIiKSB7CiAgICAgICAgdG9hc3RyLmVycm9yKHRoaXMudGx0KCJib3RfY29uZmlnX3NlbGVjdF9pbWdfZmlsZV9tc2cyIikpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuZmlsZV9sYWJlbCAhPSB0aGlzLm9sZF9pbWFnZV9uYW1lICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJpbnB1dEdyb3VwRmlsZTAxIikudmFsdWUgPT0gIiIpIHsKICAgICAgICB0b2FzdHIuZXJyb3IodGhpcy50bHQoImJvdF9jb25maWdfc2VsZWN0X2ltZ19maWxlX21zZzMiKSk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbWFnZV9maWxlXzMgPT09IG51bGwpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCdib3RfYmFja2dyb3VuZF9pbWdfdGV4dCcpLAogICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAiaW5mbyIsCiAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSB0cnVlOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLndpZGdldF9zZXR0aW5nX3VybCgpLCB7CiAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICB3aWRnZXRfdGl0bGU6IHRoaXMudGl0bGUsCiAgICAgICAgICBpc0ltYWdlRWRpdDogdGhpcy5maWxlX2xhYmVsICE9IHRoaXMub2xkX2ltYWdlX25hbWUgPyB0cnVlIDogZmFsc2UsCiAgICAgICAgICBpc0JvdEltYWdlRWRpdDogdGhpcy5maWxlX2xhYmVsXzIgIT0gdGhpcy5vbGRfaW1hZ2VfbmFtZV8yID8gdHJ1ZSA6IGZhbHNlLAogICAgICAgICAgaW1hZ2VfbmFtZTogdGhpcy5maWxlX2xhYmVsLAogICAgICAgICAgd2lkZ2V0X2ltYWdlOiB0aGlzLmltYWdlX2ZpbGUsCiAgICAgICAgICBvbGRfaW1hZ2VfbmFtZTogdGhpcy5vbGRfaW1hZ2VfbmFtZSA9PSAiQ2hvb3NlIEZpbGUiID8gbnVsbCA6IHRoaXMub2xkX2ltYWdlX25hbWUsCiAgICAgICAgICBpc0VkaXQ6IHRydWUsCiAgICAgICAgICBib3RfaW1hZ2VfbmFtZTogdGhpcy5maWxlX2xhYmVsXzIsCiAgICAgICAgICBvbGRfYm90X2ltYWdlX25hbWU6IHRoaXMub2xkX2ltYWdlX25hbWVfMiA9PSAiQ2hvb3NlIEZpbGUiID8gbnVsbCA6IHRoaXMub2xkX2ltYWdlX25hbWVfMiwKICAgICAgICAgIGJvdF9pbWFnZTogdGhpcy5pbWFnZV9maWxlXzIsCiAgICAgICAgICBvbGRfYmdfaW1hZ2VfbmFtZTogdGhpcy5vbGRfaW1hZ2VfbmFtZV8zID09ICJDaG9vc2UgRmlsZSIgJiYgIXRoaXMuaXNfYmdfaW1hZ2VfY2hhbmdlZCA/IG51bGwgOiB0aGlzLm9sZF9pbWFnZV9uYW1lXzMsCiAgICAgICAgICBiZ19pbWFnZTogdGhpcy5ib3RfYmFja2dyb3VuZF90eXBlID09PSAibm9uZSIgPyAiTm9faW1hZ2UiIDogdGhpcy5pbWFnZV9maWxlXzMsCiAgICAgICAgICBiZ19pbWFnZV9uYW1lOiB0aGlzLmZpbGVfbGFiZWxfMywKICAgICAgICAgIGlzQmdJbWFnZUVkaXQ6IHRoaXMuZmlsZV9sYWJlbF8zICE9IHRoaXMub2xkX2ltYWdlX25hbWVfMyB8fCB0aGlzLmJvdF9iYWNrZ3JvdW5kX3R5cGUgPT09ICJub25lIiA/IHRydWUgOiBmYWxzZSwKICAgICAgICAgIGhlYWRlcl90aGVtZTogdGhpcy5ib3RfaGVhZGVyX2JhY2tncm91bmQsCiAgICAgICAgICBoZWFkZXJfY3VzdG9tX3N0eWxlOiB0aGlzLmJvdF9oZWFkZXJfYWxpZ25tZW50LAogICAgICAgICAgYm90X3RoZW1lOiB0aGlzLmJvdF9zdHlsaW5nLmJvdF90aGVtZSwKICAgICAgICAgIGJ1dHRvbl9ib3JkZXJfdGhlbWU6IHRoaXMuYm90X3N0eWxpbmcuYnV0dG9uX2JvcmRlcl90aGVtZSwKICAgICAgICAgIHVzZXJfcmVzcG9uc2VfYmdfY29sb3I6IHRoaXMuYm90X3N0eWxpbmcudXNlcl9yZXNwb25zZV9iZ19jb2xvciwKICAgICAgICAgIGJvdF9yZXNwb25zZV9iZ19jb2xvcjogdGhpcy5ib3Rfc3R5bGluZy5ib3RfcmVzcG9uc2VfYmdfY29sb3IsCiAgICAgICAgICBkZWxpdmVyeV9ub3RlX2NvbG9yOiB0aGlzLmJvdF9zdHlsaW5nLmRlbGl2ZXJ5X25vdGVfY29sb3IsCiAgICAgICAgICBidXR0b25fdGhlbWU6IHRoaXMuYm90X3N0eWxpbmcuYnV0dG9uX3RoZW1lLAogICAgICAgICAgYm90X2N1c3RvbV9zdHlsZTogdGhpcy5ib3RfYnV0dG9uc19hbGlnbm1lbnQsCiAgICAgICAgICBib3RfZm9udDogewogICAgICAgICAgICBGb250U3R5bGU6IHRoaXMuYm90X2ZvbnRfc3R5bGUsCiAgICAgICAgICAgIEZvbnRDb2xvclNlbmRlcjogdGhpcy5ib3RfZm9udF9jb2xvcl9zZW5kZXIsCiAgICAgICAgICAgIEZvbnRDb2xvclJlY2VpdmVyOiB0aGlzLmJvdF9mb250X2NvbG9yX3JlY2VpdmVyLAogICAgICAgICAgICBGb250Q29sb3JCdXR0b25zOiB0aGlzLmJvdF9mb250X2NvbG9yX2J1dHRvbnMKICAgICAgICAgIH0sCiAgICAgICAgICBib3RfcG9zaXRpb246IHsKICAgICAgICAgICAgYWxpZ246IHRoaXMuYm90X2FsaWdubWVudCwKICAgICAgICAgICAgdmVydGljYWw6IHRoaXMuYm90X3ZlcnRpY2FsX3Bvc2l0aW9uLAogICAgICAgICAgICBob3Jpem9udGFsOiB0aGlzLmJvdF9ob3Jpem9udGFsX3Bvc2l0aW9uCiAgICAgICAgICB9LAogICAgICAgICAgYnV0dG9uX2N1c3RvbV9zdHlsZTogewogICAgICAgICAgICB2ZXJ0aWNhbDogdGhpcy5ib3Rfc3R5bGluZy52ZXJ0aWNhbF9zcGFjaW5nLAogICAgICAgICAgICBob3Jpem9udGFsOiB0aGlzLmJvdF9zdHlsaW5nLmhvcml6b250YWxfc3BhY2luZwogICAgICAgICAgfSwKICAgICAgICAgIGJvdF9vcGVuX2J5X2RlZmF1bHQ6IHRoaXMuYm90X3N0eWxpbmcuYm90X29wZW5fYnlfZGVmYXVsdCwKICAgICAgICAgIGJvdF9zaG93bl9vbl93ZWJzaXRlOiB0aGlzLmJvdF9zdHlsaW5nLmJvdF9zaG93bl9vbl93ZWJzaXRlLAogICAgICAgICAgaXNfcG93ZXJlZF9ieV9jZW5zZTogdGhpcy5ib3Rfc3R5bGluZy5pc19wb3dlcmVkX2J5X2NlbnNlLAogICAgICAgICAgc2hvd19ib3RfaGlzdG9yeTogdGhpcy5ib3Rfc3R5bGluZy5zaG93X2JvdF9oaXN0b3J5LAogICAgICAgICAgd2lkZ2V0X2ljb25faW1hZ2VfbmFtZTogdGhpcy5maWxlX2xhYmVsXzQgPT0gIkNob29zZSBmaWxlIiA/ICIiIDogdGhpcy5maWxlX2xhYmVsXzQsCiAgICAgICAgICB3aWRnZXRfaWNvbl9pbWFnZTogdGhpcy5pbWFnZV9maWxlXzQsCiAgICAgICAgICBvbGRfd2lkZ2V0X2ljb25fbmFtZTogdGhpcy5vbGRfaW1hZ2VfbmFtZV80ID09ICJDaG9vc2UgZmlsZSIgPyBudWxsIDogdGhpcy5vbGRfaW1hZ2VfbmFtZV80LAogICAgICAgICAgaXNXaWRnZXRJY29uRWRpdDogdGhpcy5maWxlX2xhYmVsXzQgIT0gdGhpcy5vbGRfaW1hZ2VfbmFtZV80ID8gdHJ1ZSA6IGZhbHNlLAogICAgICAgICAgd2lkZ2V0X2ljb25faW1hZ2VfbmFtZV9vbmNsb3NlOiB0aGlzLmZpbGVfbGFiZWxfNSA9PSAiQ2hvb3NlIGZpbGUiID8gIiIgOiB0aGlzLmZpbGVfbGFiZWxfNSwKICAgICAgICAgIHdpZGdldF9pY29uX2ltYWdlX29uY2xvc2U6IHRoaXMuaW1hZ2VfZmlsZV81LAogICAgICAgICAgb2xkX3dpZGdldF9pbWFnZV9uYW1lX29uY2xvc2U6IHRoaXMub2xkX2ltYWdlX25hbWVfNSA9PSAiQ2hvb3NlIGZpbGUiID8gbnVsbCA6IHRoaXMub2xkX2ltYWdlX25hbWVfNSwKICAgICAgICAgIGlzV2lkZ2V0SWNvbkVkaXRPbkNsb3NlOiB0aGlzLmZpbGVfbGFiZWxfNSAhPSB0aGlzLm9sZF9pbWFnZV9uYW1lXzUgPyB0cnVlIDogZmFsc2UKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzMTIuYmlnX3NwaW5uZXIgPSBmYWxzZTsKCiAgICAgICAgICBfdGhpczEyLmdldF93aWRnZXRfc2V0dGluZ3MoKTsKCiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRXaWRnZXRGaWxlMDEiKS52YWx1ZSA9ICIiOwogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImlucHV0V2lkZ2V0RmlsZTAyIikudmFsdWUgPSAiIjsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IF90aGlzMTIuYXBpX3N0YXR1c19jb2RlLklNR19EVVBMSUNBVEUuTVNHX0NPREUpIHsKICAgICAgICAgICAgLy8gdG9hc3RyLmVycm9yKAogICAgICAgICAgICAvLyAgICJJbWFnZSBhbHJlYWR5IGZvdW5kLiBQbGVhc2UgdXBsb2FkIGFub3RoZXIgaW1hZ2Ugb3IgcmVuYW1lIGl0LiIKICAgICAgICAgICAgLy8gKTsKICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogIkltYWdlIGFscmVhZHkgZm91bmQuIFBsZWFzZSB1cGxvYWQgYW5vdGhlciBpbWFnZSBvciByZW5hbWUgaXQuIiwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXMxMi5hcGlfc3RhdHVzX2NvZGUuQURERURfV0lER0VUX1NFVFRJTkdTX1NVQ0NFU1NGVUxMWV80MDE4Lk1TR19DT0RFKSB7CiAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgIHRleHQ6IF90aGlzMTIudGx0KCJib3RfY29uZmlnX3NldHRpbmdzX3VwZGF0ZWRfdGV4dDIiKSwKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0aXRsZTogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIF90aGlzMTIuZ2V0X3dpZGdldF9zZXR0aW5ncygpOwoKICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICBfdGhpczEyLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgc3VibWl0X2dyZWV0aW5nczogZnVuY3Rpb24gc3VibWl0X2dyZWV0aW5ncygpIHsKICAgICAgdmFyIF90aGlzMTMgPSB0aGlzOwoKICAgICAgZm9yICh2YXIgZGF0YSA9IDA7IGRhdGEgPCB0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHMubGVuZ3RoOyBkYXRhKyspIHsKICAgICAgICBpZiAodGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzW2RhdGFdLnRpdGxlLmxlbmd0aCA+IDIwKSB7CiAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgdGV4dDogdGhpcy50bHQoImJvdF9jb25maWdfYnRuX2xlbmd0aF9tc2ciKSwKICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSwKICAgICAgICAgICAgdGltZXI6IDUwMDAKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIGludGVudF92YWxzID0gdGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzLmZpbHRlcihmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgcmV0dXJuIHZhbC52YWx1ZSA9PT0gbnVsbCB8fCB2YWwudGl0bGUgPT09IG51bGw7CiAgICAgIH0pOwoKICAgICAgaWYgKGludGVudF92YWxzLmxlbmd0aCA+IDApIHsKICAgICAgICBzd2FsKHsKICAgICAgICAgIHRleHQ6IHRoaXMudGx0KCJib3RfY29uZmlnX3NlbGVjdF9pbnRlbnRfbXNnIiksCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciB3aWRnZXRfZGV0YWlscyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzKSk7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpZGdldF9kZXRhaWxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgLy8gd2lkZ2V0X2RldGFpbHNbaV0udmFsdWUgPQogICAgICAgIC8vICAgIi8iICsgdGhpcy5jb21wYW55aWQgKyAiXyIgKyB3aWRnZXRfZGV0YWlsc1tpXS52YWx1ZTsKICAgICAgICB3aWRnZXRfZGV0YWlsc1tpXS52YWx1ZSA9ICIvIiArIHdpZGdldF9kZXRhaWxzW2ldLnZhbHVlOyAvLyBpZiAodGhpcy5kZWZhdWx0X3JldGFpbF9ncmVldGluZ3MuaW5jbHVkZXMod2lkZ2V0X2RldGFpbHNbaV0udmFsdWUpKSB7CiAgICAgICAgLy8gICB3aWRnZXRfZGV0YWlsc1tpXS52YWx1ZSA9ICIvIiArICB3aWRnZXRfZGV0YWlsc1tpXS52YWx1ZTsKICAgICAgICAvLyB9IGVsc2UgewogICAgICAgIC8vICAgd2lkZ2V0X2RldGFpbHNbaV0udmFsdWUgPQogICAgICAgIC8vICAgICAiLyIgKyB0aGlzLmNvbXBhbnlpZCArICJfIiArIHdpZGdldF9kZXRhaWxzW2ldLnZhbHVlOwogICAgICAgIC8vIH0KICAgICAgfQoKICAgICAgaWYgKHdpZGdldF9kZXRhaWxzLmxlbmd0aCA+IDApIHsKICAgICAgICBpZiAodGhpcy5ib3RfZ3JlZXRpbmdzLmxlbmd0aCA+IDApIHsKICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGlzLmJvdF9ncmVldGluZ3MubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmJvdF9ncmVldGluZ3NbX2ldLmJ1dHRvbnM7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5ib3RfZ3JlZXRpbmdzW3RoaXMuYm90X2dyZWV0aW5ncy5sZW5ndGggLSAxXS5idXR0b25zID0gd2lkZ2V0X2RldGFpbHM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuYm90X2dyZWV0aW5ncy5wdXNoKHsKICAgICAgICAgICAgYnV0dG9uczogd2lkZ2V0X2RldGFpbHMKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5iaWdfc3Bpbm5lciA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLndpZGdldF9zZXR0aW5nX3VybCgpLCB7CiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICBlZGl0X2dyZWV0aW5nczogdHJ1ZSwKICAgICAgICBib3RfZ3JlZXRpbmdzOiB0aGlzLmJvdF9ncmVldGluZ3MsCiAgICAgICAgY29uZnVzaW9uX21zZzogdGhpcy5ib3Rfc3R5bGluZy5pc19jb25mdXNpb25fbXNnCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczEzLmJpZ19zcGlubmVyID0gZmFsc2U7CgogICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXMxMy5hcGlfc3RhdHVzX2NvZGUuQURERURfV0lER0VUX1NFVFRJTkdTX1NVQ0NFU1NGVUxMWV80MDE4Lk1TR19DT0RFKSB7CiAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgdGV4dDogX3RoaXMxMy50bHQoImJvdF9jb25maWdfc2V0dGluZ3NfdXBkYXRlZF90ZXh0MiIpLAogICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHRpdGxlOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUsCiAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMxMy5nZXRfd2lkZ2V0X3NldHRpbmdzKCk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXMxMy5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgIHN3YWwoewogICAgICAgICAgdGV4dDogX3RoaXMxMy50bHQoImJvdF9jb25maWdfZXJyX21zZ190ZXh0MiIpLAogICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMTMuZ2V0X3dpZGdldF9zZXR0aW5ncygpOwoKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzMTMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBnZW5lcmF0ZVVVSUQ6IGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpIHsKICAgICAgLy8gUHVibGljIERvbWFpbi9NSVQKICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgLy9UaW1lc3RhbXAKCiAgICAgIHZhciBkMiA9IHBlcmZvcm1hbmNlICYmIHBlcmZvcm1hbmNlLm5vdyAmJiBwZXJmb3JtYW5jZS5ub3coKSAqIDEwMDAgfHwgMDsgLy9UaW1lIGluIG1pY3Jvc2Vjb25kcyBzaW5jZSBwYWdlLWxvYWQgb3IgMCBpZiB1bnN1cHBvcnRlZAoKICAgICAgcmV0dXJuICJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHsKICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNjsgLy9yYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgMTYKCiAgICAgICAgaWYgKGQgPiAwKSB7CiAgICAgICAgICAvL1VzZSB0aW1lc3RhbXAgdW50aWwgZGVwbGV0ZWQKICAgICAgICAgIHIgPSAoZCArIHIpICUgMTYgfCAwOwogICAgICAgICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy9Vc2UgbWljcm9zZWNvbmRzIHNpbmNlIHBhZ2UtbG9hZCBpZiBzdXBwb3J0ZWQKICAgICAgICAgIHIgPSAoZDIgKyByKSAlIDE2IHwgMDsKICAgICAgICAgIGQyID0gTWF0aC5mbG9vcihkMiAvIDE2KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoYyA9PT0gIngiID8gciA6IHIgJiAweDMgfCAweDgpLnRvU3RyaW5nKDE2KTsKICAgICAgfSk7CiAgICB9LAogICAgY2hlY2tfYWN0aXZlX2J0bl9mb3JfZ3JlZXRpbmc6IGZ1bmN0aW9uIGNoZWNrX2FjdGl2ZV9idG5fZm9yX2dyZWV0aW5nKGlkKSB7CiAgICAgIHZhciBidG5fZ3JlZXRpbmdzX3N0YXR1cyA9IHRoaXMuZ2V0X2J0bl9ncmVldGluZ192aXNpYmxlX3N0YXR1cygpOwoKICAgICAgaWYgKGJ0bl9ncmVldGluZ3Nfc3RhdHVzWzBdID09PSB0cnVlICYmIGJ0bl9ncmVldGluZ3Nfc3RhdHVzWzFdID09PSBmYWxzZSkgewogICAgICAgIHRoaXMub25lX2dyZWV0aW5nX3N3YWwoKTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoaXMuYm90X2dyZWV0aW5nc1t0aGlzLmJvdF9ncmVldGluZ3MuZmluZEluZGV4KGZ1bmN0aW9uIChpKSB7CiAgICAgICAgICAgIHJldHVybiBpLmlkID09PSBpZDsKICAgICAgICAgIH0pXS52aXNpYmxlID0gdHJ1ZTsKICAgICAgICAgIHRoaXMuZ3JlZXRpbmdzX2tleSArPSAxOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGNoZWNrX29uZV9ncmVldGluZ19lbmFibGVkOiBmdW5jdGlvbiBjaGVja19vbmVfZ3JlZXRpbmdfZW5hYmxlZChpZCkgewogICAgICB2YXIgYnRuX2dyZWV0aW5nc19zdGF0dXMgPSB0aGlzLmdldF9idG5fZ3JlZXRpbmdfdmlzaWJsZV9zdGF0dXMoKTsKCiAgICAgIGlmIChidG5fZ3JlZXRpbmdzX3N0YXR1c1swXSA9PT0gdHJ1ZSAmJiBidG5fZ3JlZXRpbmdzX3N0YXR1c1sxXSA9PT0gZmFsc2UpIHsKICAgICAgICB0aGlzLm9uZV9ncmVldGluZ19zd2FsKCk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICB0aGlzLndpZGdldF9idXR0b25zX2RldGFpbHNbdGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzLmZpbmRJbmRleChmdW5jdGlvbiAoaSkgewogICAgICAgICAgICByZXR1cm4gaS5pZCA9PT0gaWQ7CiAgICAgICAgICB9KV0udmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgdGhpcy5idXR0b25zX2tleSArPSAxOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdldF9idG5fZ3JlZXRpbmdfdmlzaWJsZV9zdGF0dXM6IGZ1bmN0aW9uIGdldF9idG5fZ3JlZXRpbmdfdmlzaWJsZV9zdGF0dXMoKSB7CiAgICAgIHJldHVybiBbdGhpcy53aWRnZXRfYnV0dG9uc19kZXRhaWxzLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtLnZpc2libGU7CiAgICAgIH0pLmluY2x1ZGVzKHRydWUpLCB0aGlzLmJvdF9ncmVldGluZ3MubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0udmlzaWJsZTsKICAgICAgfSkuaW5jbHVkZXModHJ1ZSldOwogICAgfSwKICAgIG9uZV9ncmVldGluZ19zd2FsOiBmdW5jdGlvbiBvbmVfZ3JlZXRpbmdfc3dhbCgpIHsKICAgICAgc3dhbCh7CiAgICAgICAgdGV4dDogdGhpcy50bHQoImJvdF9jb25maWdfb25lX2dyZWV0aW5nX21zZyIpLAogICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgdGltZXI6IDU1MDAKICAgICAgfSk7CiAgICB9LAogICAgc2F2ZV9sYW5ndWFnZV9jaGF0Ym90OiBmdW5jdGlvbiBzYXZlX2xhbmd1YWdlX2NoYXRib3QoKSB7CiAgICAgIHZhciBfdGhpczE0ID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmxhbmd1YWdlX2NvZGUgPT0gbnVsbCkgewogICAgICAgIHN3YWwoewogICAgICAgICAgdGV4dDogIlBsZWFzZSBzZWxlY3QgbGFuZ3VhZ2UiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDMwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBsYW5ndWFnZSA9IHRoaXMubGFuZ3VhZ2VfY29kZS5sYW5nOwogICAgICB2YXIgbGFuZ19jb2RlID0gdGhpcy5sYW5ndWFnZV9jb2RlLnZhbHVlOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wb3J0YWxfbGFuZ3VhZ2VfZGF0YSgpLCB7CiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICBjaGF0Ym90X2xhbmd1YWdlX2NvZGU6IGxhbmdfY29kZSwKICAgICAgICBjaGF0Ym90X2xhbmd1YWdlOiBsYW5ndWFnZSwKICAgICAgICBzYXZlX2NoYXRib3RfbGFuZ3VhZ2U6IHRydWUKICAgICAgfSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXMxNC5hcGlfc3RhdHVzX2NvZGUuTEFOR1VBR0VfVVBEQVRFRC5NU0dfQ09ERSkgewogICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgIHRleHQ6ICJCb3QgTGFuZ3VhZ2UgVXBkYXRlIFN1Y2Nlc3NmdWxseSIsCiAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgdGltZXI6IDMwMDAKICAgICAgICAgIH0pOwoKICAgICAgICAgIHZhciB1c2VyaW5mbyA9IF90aGlzMTQuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKTsKCiAgICAgICAgICB1c2VyaW5mb1siaXNfc2V0X2RlZmF1bHRfbGFuZ3VhZ2UiXSA9IGZhbHNlOwogICAgICAgICAgdXNlcmluZm9bImNoYXRib3RfbGFuZ3VhZ2UiXSA9IGxhbmd1YWdlOwogICAgICAgICAgdXNlcmluZm9bImNoYXRib3RfbGFuZ3VhZ2VfY29kZSJdID0gbGFuZ19jb2RlOwoKICAgICAgICAgIF90aGlzMTQuJHNlc3Npb24uc2V0KCJVc2VySW5mb3JtYXRpb24iLCB1c2VyaW5mbyk7CiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gX3RoaXMxNC5hcGlfc3RhdHVzX2NvZGUuVU5TVUNDRVNTRlVMX0RCX09QRVJBVElPTi5NU0dfQ09ERSkgewogICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgIHRleHQ6ICJVbmFibGUgdG8gdXBkYXRlIEJvdCBMYW5ndWFnZSIsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHRpdGxlOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUsCiAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzMTQuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9Cn07"},null]}