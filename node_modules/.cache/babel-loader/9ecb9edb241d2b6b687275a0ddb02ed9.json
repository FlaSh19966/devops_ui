{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NER.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NER.vue","mtime":1645594423487},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnVybCI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiL2hvbWUvdmltYWxlc2gvQ0VOU0UvY2hhdGJvdC1wb3J0YWwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IFN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwppbXBvcnQgYXBpX2NhbGxzIGZyb20gIkAvcG9ydGFsL2FwaV9jYWxscyI7CmltcG9ydCB7IHNldFRpbWVvdXQgfSBmcm9tICJ0aW1lcnMiOwppbXBvcnQgeyBmcmVlemVfcG9ydGFsLCBzaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWwgfSBmcm9tICJAL3BvcnRhbC9taXhpbnMiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIk5lclRyYWluaW5nUGFnZSIsCiAgbWl4aW5zOiBbZnJlZXplX3BvcnRhbCwgc2hvd19zdWJzY3JpcHRpb25fZXhwaXJlZF9zd2FsXSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc3ViX2VudGl0aWVzOiB7CiAgICAgICAgc3RhcnQ6IDAsCiAgICAgICAgZW5kOiAwLAogICAgICAgIHZhbHVlOiAiIiwKICAgICAgICBlbnRpdHk6ICIiCiAgICAgIH0sCiAgICAgIHBhZ2Vfbm86IDEsCiAgICAgIHBlcl9wYWdlOiAxNSwKICAgICAgdG90YWxfcGFnZXM6IG51bGwsCiAgICAgIHBhZ2VfYXJyYXk6IFtdLAogICAgICBwYWdlbm86ICIiLAogICAgICBudW1iZXJfb2Zfcm93czogbnVsbCwKICAgICAgZHJvcF9kb3duX3NlbGVjdDogIiIsCiAgICAgIHdvcmRfc2VsZWN0ZWQ6IGZhbHNlLAogICAgICBoaWdobGlnaHRlZF90ZXh0OiAiIiwKICAgICAgc3RhdGVtZW50czogW10sCiAgICAgIHNlbGVjdGVkX3N0YXRlbWVudDogIiIsCiAgICAgIHN0YXRlbWVudF9hcnJheTogW10sCiAgICAgIG1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3Q6IFtdLAogICAgICBjdXJyZW50X3BhZ2U6IDEsCiAgICAgIGRvbmVfZW50aXRpZXM6IFtdLAogICAgICBlbnRpdGllc19saXN0OiBbXSwKICAgICAgZW50aXRpZXNfbGlzdF9zdHJpbmc6ICIiLAogICAgICBmaWxlX2xhYmVsOiAiQ2hvb3NlIGZpbGUiLAogICAgICBjc3ZfZmlsZTogIiIsCiAgICAgIHNwaW5uZXJPbjogZmFsc2UsCiAgICAgIHdvcmRfaW5mbzogW10sCiAgICAgIGNoZWNrZWRfbGlzdDogW10sCiAgICAgIGJ1ZmZlcl93b3JkX2xpc3Q6IFtdLAogICAgICBkZWxldGVfbmVyX3RhZ3M6IFtdLAogICAgICByb2xlOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSwKICAgICAgY29tcGFueV9uYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICBub3RUcmFpbmVkUXVlc3Rpb25zOiBbXSwKICAgICAgaW5mb19pY29uOiByZXF1aXJlKCJAL3BvcnRhbC9hc3NldHMvaW1nL2luZm9faWNvbi5zdmciKSwKICAgICAgbmV3X3N0YXRlbWVudDogIiIsCiAgICAgIGVkaXRfc3RhdGVtZW50OiAiIiwKICAgICAgd2FudF9zdGF0dXM6IHRydWUsCiAgICAgIG5lcl9tb2RlbF9pbnByb2dyZXNzOiBmYWxzZSwKICAgICAgY3VycmVudF9zZWxlY3RlZDogbnVsbCwKICAgICAgc2VhcmNoX25hbWU6ICIiLAogICAgICBpc1Zpc2libGVTZWFyY2hDbGVhcjogZmFsc2UsCiAgICAgIGRpc2FibGVfYnRuX2V4cGlyZWQ6IGZhbHNlCiAgICB9OwogIH0sCiAgY29tcG9uZW50czoge30sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMubG9hZF9uZXJfc3RhdGVtZW50cygpOyAvLyBheGlvcwogICAgLy8gICAuZ2V0KGFwaV9jYWxscy5nZXRfbmVyX3RhZygpLCB7CiAgICAvLyAgICAgcGFyYW1zOiB7CiAgICAvLyAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgIC8vICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAvLyAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgLy8gICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgIC8vICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgLy8gICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uLAogICAgLy8gICAgIH0sCiAgICAvLyAgICAgaGVhZGVyczogewogICAgLy8gICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAvLyAgICAgfSwKICAgIC8vICAgfSkKICAgIC8vICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAvLyAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT09IG51bGwpIHsKICAgIC8vICAgICAgIHRoaXMud29yZF9pbmZvID0gcmVzcG9uc2UuZGF0YTsKICAgIC8vICAgICAgIHRoaXMuYnVmZmVyX3dvcmRfbGlzdCA9IHJlc3BvbnNlLmRhdGE7CiAgICAvLyAgICAgfQogICAgLy8gICB9KTsKCiAgICB0aGlzLmNoZWNrX25lcl9tb2RlbF9zdGF0dXMoKTsgLy8gYXhpb3MKICAgIC8vICAgLnBvc3QoCiAgICAvLyAgICAgYXBpX2NhbGxzLmxvYWRfdGFnX3VybCgpLAogICAgLy8gICAgIHsKICAgIC8vICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAvLyAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgIC8vICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAvLyAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgLy8gICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAvLyAgICAgICBnZXRfdGFnZ2VkX3N0YXRlbWVudHM6IHRydWUsCiAgICAvLyAgICAgfSwKICAgIC8vICAgICB7CiAgICAvLyAgICAgICBoZWFkZXJzOiB7CiAgICAvLyAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgLy8gICAgICAgfSwKICAgIC8vICAgICB9CiAgICAvLyAgICkKICAgIC8vICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAvLyAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT09IG51bGwpIHsKICAgIC8vICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiTmVyIFRhZyBDb21wbGV0ZWQiKSB7CiAgICAvLyAgICAgICAgIC8vIHRoaXMubG9hZF9zdGF0ZW1lbnRzKHJlc3BvbnNlLmRhdGEuUmVzcG9uc2UpOwogICAgLy8gICAgICAgICB0aGlzLm5vdFRyYWluZWRRdWVzdGlvbnMgPSByZXNwb25zZS5kYXRhLlJlc3BvbnNlOwogICAgLy8gICAgICAgfQogICAgLy8gICAgICAgLy8gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIkFzc2lnbiBOZXIgVGFnIikgewogICAgLy8gICAgICAgLy8gICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgLy8gICAgICAgLy8gfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiTm8gRGF0YSBBdmFpbGFibGUiKSB7CiAgICAvLyAgICAgICAvLyAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAvLyAgICAgICAvLyB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIkludGVybmFsIFNlcnZlciBFcnJvciIpIHsKICAgIC8vICAgICAgIC8vICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgIC8vICAgICAgIC8vIH0KICAgIC8vICAgICB9CiAgICAvLyAgIH0pCiAgICAvLyAgIC5jYXRjaCgoZSkgPT4gewogICAgLy8gICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAvLyAgICAgaWYgKAogICAgLy8gICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgLy8gICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgLy8gICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgLy8gICAgICkgewogICAgLy8gICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgIC8vICAgICB9CiAgICAvLyAgIH0pOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLmZyZWV6ZV9wb3J0YWwoKTsKICAgIH0sIDEwMDApOwogICAgdGhpcy4kcm9vdC4kb24oIk5lclRyYWluaW5nUGFnZURpc2FibGVkIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHsKICAgICAgICBfdGhpcy5kaXNhYmxlX2J0bl9leHBpcmVkID0gdHJ1ZTsKICAgICAgfQogICAgfSk7CiAgICAkKCdbZGF0YS10b2dnbGU9InBvcG92ZXIiXScpLnBvcG92ZXIoewogICAgICBodG1sOiB0cnVlLAogICAgICBjb250ZW50OiAkKCIjcG9wb3Zlcl9jb250ZW50IikKICAgIH0pLm9uKCJzaG93LmJzLnBvcG92ZXIiLCBmdW5jdGlvbiAoKSB7CiAgICAgICQoIiNwb3BvdmVyX2NvbnRlbnQiKS5hZGRDbGFzcygiZC1ibG9jayIpOwogICAgfSkub24oInNob3duLmJzLnBvcG92ZXIiLCBmdW5jdGlvbiAoKSB7fSkub24oImhpZGUuYnMucG9wb3ZlciIsIGZ1bmN0aW9uICgpIHsKICAgICAgJCgiI3BvcG92ZXJfY29udGVudCIpLmFkZENsYXNzKCJkLW5vbmUiKTsKICAgIH0pOwogICAgJCgiI3BvcG92ZXJfY29udGVudCIpLmNzcygiekluZGV4IiwgOTk5OSk7CiAgICB2YXIgdm0gPSB0aGlzOwogICAgJCgiI3NlbGVjdGFsbCIpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKCQodGhpcykuaXMoIjpjaGVja2VkIikpIHsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2bS5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgIH0KICAgIH0pOwogICAgdGhpcy4kcm9vdC4kb24oInNlbmRfbW9kZWxfc3RhdHVzIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgaWYgKGRhdGEgPT0gdHJ1ZSkgewogICAgICAgIF90aGlzLmNoZWNrX25lcl9tb2RlbF9zdGF0dXMoKTsKICAgICAgfQogICAgfSk7CiAgfSwKICB3YXRjaDogewogICAgc2VhcmNoX25hbWU6IGZ1bmN0aW9uIHNlYXJjaF9uYW1lKCkgewogICAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSA9PT0gIiIpIHsKICAgICAgICB0aGlzLmxvYWRfbmVyX3N0YXRlbWVudHMoKTsKICAgICAgICB0aGlzLmlzVmlzaWJsZVNlYXJjaENsZWFyID0gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZWFyY2hfbmFtZSAhPT0gIiIpIHsKICAgICAgICB0aGlzLmlzVmlzaWJsZVNlYXJjaENsZWFyID0gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgdXBsb2FkX25lcl9maWxlOiBmdW5jdGlvbiB1cGxvYWRfbmVyX2ZpbGUoKSB7CiAgICAgIGlmICghdGhpcy5kaXNhYmxlX2J0bl9leHBpcmVkKSB7CiAgICAgICAgJCgiI3VwbG9hZF9jc3ZfZmlsZSIpLm1vZGFsKCdzaG93Jyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWwoKTsKICAgICAgfQogICAgfSwKICAgIGFkZF9uZXJfc3RhdGVtbmVudDogZnVuY3Rpb24gYWRkX25lcl9zdGF0ZW1uZW50KCkgewogICAgICBpZiAoIXRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCkgewogICAgICAgICQoIiNzdGF0ZW1lbnRtb2RhbCIpLm1vZGFsKCdzaG93Jyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWwoKTsKICAgICAgfQogICAgfSwKICAgIGFkZF9uZXJfdGFnOiBmdW5jdGlvbiBhZGRfbmVyX3RhZygpIHsKICAgICAgaWYgKCF0aGlzLmRpc2FibGVfYnRuX2V4cGlyZWQpIHsKICAgICAgICAkKCIjZXhhbXBsZU1vZGFsQ2VudGVyIikubW9kYWwoJ3Nob3cnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbCgpOwogICAgICB9CiAgICB9LAogICAgbG9hZF9uZXJfc3RhdGVtZW50czogZnVuY3Rpb24gbG9hZF9uZXJfc3RhdGVtZW50cygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gW107CiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgYXhpb3MuZ2V0KGFwaV9jYWxscy5nZXRfbmVyX3RhZygpLCB7CiAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uCiAgICAgICAgfSwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczIuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9PSBudWxsKSB7CiAgICAgICAgICBfdGhpczIud29yZF9pbmZvID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgIF90aGlzMi5idWZmZXJfd29yZF9saXN0ID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXMyLnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzMi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmxvYWRfdGFnX3VybCgpLCB7CiAgICAgICAgY29tcGFueWlkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgZ2V0X2FsbF9uZXJfc3RhdGVtZW50czogdHJ1ZSwKICAgICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICBwYWdlX25vOiB0aGlzLnBhZ2Vfbm8KICAgICAgfSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9PSBudWxsKSB7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIkFsbCBOZXIgVGFncyIpIHsKICAgICAgICAgICAgX3RoaXMyLmxvYWRfc3RhdGVtZW50cyhyZXNwb25zZS5kYXRhLlJlc3BvbnNlKTsKCiAgICAgICAgICAgIF90aGlzMi5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEucGFnZWNvdW50OwogICAgICAgICAgICBfdGhpczIudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwoX3RoaXMyLm51bWJlcl9vZl9yb3dzIC8gX3RoaXMyLnBlcl9wYWdlKTsKCiAgICAgICAgICAgIF90aGlzMi5zZXRwYWdpbmF0aW9uKF90aGlzMi5wYWdlX25vKTsKCiAgICAgICAgICAgIF90aGlzMi5ub3RUcmFpbmVkUXVlc3Rpb25zID0gcmVzcG9uc2UuZGF0YS5SZXNwb25zZTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIkFzc2lnbiBOZXIgVGFnIikgewogICAgICAgICAgICBfdGhpczIuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJObyBEYXRhIEF2YWlsYWJsZSIpIHsKICAgICAgICAgICAgX3RoaXMyLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgIF90aGlzMi5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMyLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczIuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXMyLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZW1wdHlfdmFyaWFibGU6IGZ1bmN0aW9uIGVtcHR5X3ZhcmlhYmxlKCkgewogICAgICB0aGlzLm5ld19zdGF0ZW1lbnQgPSAiIjsKICAgICAgdGhpcy5lZGl0X3N0YXRlbWVudCA9ICIiOwogICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWQgPSBudWxsOwogICAgICB0aGlzLmVudGl0aWVzX2xpc3Rfc3RyaW5nID0gIiI7CiAgICB9LAogICAgYXNzaWduX3ZhcmlhYmxlOiBmdW5jdGlvbiBhc3NpZ25fdmFyaWFibGUoaW5kZXgpIHsKICAgICAgdGhpcy5lZGl0X3N0YXRlbWVudCA9IHRoaXMuc3RhdGVtZW50c1tpbmRleF0uU3RhdGVtZW50OwogICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWQgPSB0aGlzLnN0YXRlbWVudHNbaW5kZXhdOwogICAgfSwKICAgIGNoZWNrX25lcl9tb2RlbF9zdGF0dXM6IGZ1bmN0aW9uIGNoZWNrX25lcl9tb2RlbF9zdGF0dXMoKSB7CiAgICAgIHRoaXMubW9kZWxfc3RhdHVzID0gdGhpcy4kc2Vzc2lvbi5nZXQoIk1vZGVsU3RhdHVzIik7CgogICAgICBpZiAodGhpcy5tb2RlbF9zdGF0dXMgPT0gIk5vIEZhaWx1cmUiKSB7CiAgICAgICAgdGhpcy5uZXJfbW9kZWxfaW5wcm9ncmVzcyA9IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKEJvb2xlYW4odGhpcy5tb2RlbF9zdGF0dXMubmVyX21vZGVsKSA9PT0gdHJ1ZSkgewogICAgICAgIGlmICh0aGlzLm1vZGVsX3N0YXR1cy5uZXJfbW9kZWwgPT0gIkluUHJvZ3Jlc3MiKSB7CiAgICAgICAgICB0aGlzLm5lcl9tb2RlbF9pbnByb2dyZXNzID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5uZXJfbW9kZWxfaW5wcm9ncmVzcyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLm5lcl9tb2RlbF9pbnByb2dyZXNzID0gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgICBzaG93X21vZGVsX3Byb2dyZXNzOiBmdW5jdGlvbiBzaG93X21vZGVsX3Byb2dyZXNzKGluZGV4KSB7CiAgICAgIGlmICh0aGlzLm5lcl9tb2RlbF9pbnByb2dyZXNzID09IHRydWUpIHsKICAgICAgICBpZiAoaW5kZXggPT0gJ3N0eWxlJykgewogICAgICAgICAgcmV0dXJuICJjdXJzb3I6IG5vdC1hbGxvd2VkIjsKICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09ICd0aXRsZScpIHsKICAgICAgICAgIHJldHVybiAiVHJhaW5pbmcgaW4gUHJvZ3Jlc3MoVGhpcyBwcm9jZXNzIG1pZ2h0IHRha2UgYXJvdW5kIDQ1IG1pbnMgdG8gZmluaXNoKSAiOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfSwKICAgIGFkZF9zdGF0ZW1lbnQ6IGZ1bmN0aW9uIGFkZF9zdGF0ZW1lbnQoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMubmV3X3N0YXRlbWVudCA9PSAiIikgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGV4dDogIlBsZWFzZSBlbnRlciBhIFN0YXRlbWVudCBmaXJzdCIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfSBlbHNlIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6ICJQbGVhc2Ugd2FpdCB3aGlsZSB3ZSBhcmUgc3VibWl0dGluZyB5b3VyIGRldGFpbHMuLi4iLAogICAgICAgICAgdHlwZTogImluZm8iLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UKICAgICAgICB9KTsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuYWRkX25lcl9zdGF0ZW1lbnQoKSwgewogICAgICAgICAgY29tcGFueWlkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIG5ld19zdGF0ZW1lbnQ6IHRoaXMubmV3X3N0YXRlbWVudAogICAgICAgIH0sIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXMzLnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1zZyA9PSAiUXVlcnkgRXhlY3V0ZWQgU3VjY2Vzc2Z1bGx5IikgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgdGV4dDogIk5FUiBTdGF0ZW1lbnQgYWRkZWQgc3VjY2Vzc2Z1bGx5IiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAkKCIjc3RhdGVtZW50bW9kYWwiKS5tb2RhbCgiaGlkZSIpOwoKICAgICAgICAgICAgICBfdGhpczMuZW1wdHlfdmFyaWFibGUoKTsKCiAgICAgICAgICAgICAgX3RoaXMzLmxvYWRfbmVyX3N0YXRlbWVudHMoKTsgLy8gdGhpcy5wYWdlX3JlcXVpcmUoMSk7CiAgICAgICAgICAgICAgLy8gdGhpcy4kcm91dGVyLmdvKCk7CgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5Nc2cgPT0gIkVycm9yIHdoaWxlIGFkZGluZyBzdGF0ZW1lbnQiKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgdGV4dDogIlNvbWV0aGluZyB3ZW50IHdyb25nIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgX3RoaXMzLnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICBfdGhpczMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBlZGl0X3N0YXRlbWVudHM6IGZ1bmN0aW9uIGVkaXRfc3RhdGVtZW50cygpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICBpZiAodGhpcy5lZGl0X3N0YXRlbWVudCA9PSB0aGlzLmN1cnJlbnRfc2VsZWN0ZWQuU3RhdGVtZW50KSB7CiAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgIHRleHQ6ICJQbGVhc2UgbW9kaWZ5IHRoZSBzdGF0ZW1lbnQgZmlyc3QiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgZmluYWxfc3RhdGVtZW50c19saXN0ID0gW107IC8vIGNvbnNvbGUubG9nKCJzdGF0ZW1lbnQgaW5kZXggYmVmb3JlLS0tIiwgdGhpcy5jdXJyZW50X3NlbGVjdGVkKTsKCiAgICAgICAgdmFyIHZhbGlkX3N0YXRlbWVudCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY3VycmVudF9zZWxlY3RlZCk7CiAgICAgICAgdmFyIGtleSA9IHZhbGlkX3N0YXRlbWVudC5rZXk7CiAgICAgICAgdmFsaWRfc3RhdGVtZW50LklzVGFnQ29tcGxldGVkID0gIk5PIjsKICAgICAgICB2YWxpZF9zdGF0ZW1lbnQuU3RhdGVtZW50ID0gdGhpcy5lZGl0X3N0YXRlbWVudDsKICAgICAgICB2YWxpZF9zdGF0ZW1lbnQuVGFnID0gW107CiAgICAgICAgZGVsZXRlIHZhbGlkX3N0YXRlbWVudC5rZXk7CiAgICAgICAgZGVsZXRlIHZhbGlkX3N0YXRlbWVudC5zZWxlY3RlZF9saXN0OwogICAgICAgIGRlbGV0ZSB2YWxpZF9zdGF0ZW1lbnQud29yZHNfbGlzdDsKICAgICAgICBmaW5hbF9zdGF0ZW1lbnRzX2xpc3QucHVzaChfZGVmaW5lUHJvcGVydHkoe30sIGtleSwgdmFsaWRfc3RhdGVtZW50KSk7CiAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnRhZ19zZW50ZW5jZXNfdXJsKCksIHsKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBuZXJfdGFnX3N0YXRlbWVudDogZmluYWxfc3RhdGVtZW50c19saXN0CiAgICAgICAgfSwgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczQuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIlF1ZXJ5IEV4ZWN1dGVkIFN1Y2Nlc3NmdWxseSIpIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogIllvdXIgdGFncyBoYXZlIGJlZW4gc3VibWl0dGVkIHN1Y2Nlc3NmdWxseSIsCiAgICAgICAgICAgICAgLy8gdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgLy8gcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsCiAgICAgICAgICAgICAgdGltZXI6IDU1MDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQoIiNlZGl0c3RhdGVtZW50bW9kYWwiKS5tb2RhbCgiaGlkZSIpOwoKICAgICAgICAgICAgX3RoaXM0LmVtcHR5X3ZhcmlhYmxlKCk7CgogICAgICAgICAgICBfdGhpczQubG9hZF9uZXJfc3RhdGVtZW50cygpOyAvLyB0aGlzLnBhZ2VfcmVxdWlyZSgxKTsKICAgICAgICAgICAgLy8gdGhpcy4kcm91dGVyLmdvKCk7CgogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBfdGhpczQuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGRlbGV0ZV90YWdzOiBmdW5jdGlvbiBkZWxldGVfdGFncyhpbmRleCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgdGl0bGU6ICJBcmUgeW91IHN1cmU/IiwKICAgICAgICB0ZXh0OiAiWW91IHdvbid0IGJlIGFibGUgdG8gcmV2ZXJ0IHRoaXMhIiwKICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiWWVzLCBEZWxldGUhISIKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgJCgiI2V4YW1wbGVNb2RhbENlbnRlciIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICBfdGhpczUuc3Bpbm5lck9uID0gdHJ1ZTsKCiAgICAgICAgICBfdGhpczUuZGVsZXRlX25lcl90YWdzLnB1c2goX3RoaXM1LndvcmRfaW5mb1tpbmRleF0pOwoKICAgICAgICAgIF90aGlzNS53b3JkX2luZm8uc3BsaWNlKGluZGV4LCAxKTsKCiAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5kZWxldGVfbmVyX3RhZ3MoKSwgewogICAgICAgICAgICBjb21wYW55aWQ6IF90aGlzNS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgIGNvbXBhbnluYW1lOiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgIGVtYWlsOiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IF90aGlzNS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogX3RoaXM1LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICB0YWdfbmFtZTogX3RoaXM1LmRlbGV0ZV9uZXJfdGFncwogICAgICAgICAgfSwgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdChfdGhpczUuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICB9CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBfdGhpczUuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5Nc2cgPT0gIlF1ZXJ5IEV4ZWN1dGVkIFN1Y2Nlc3NmdWxseSIpIHsKICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcygiWW91ciB0YWcgaGFzIGJlZW4gcmVtb3ZlZCBzdWNjZXNzZnVsbHkuIik7IC8vIHNldFRpbWVvdXQoKCkgPT4gewoKICAgICAgICAgICAgICBfdGhpczUuZGVsZXRlX25lcl90YWdzID0gW107IC8vIHRoaXMuJHJvdXRlci5nbygpOwoKICAgICAgICAgICAgICBfdGhpczUubG9hZF9uZXJfc3RhdGVtZW50cygpOyAvLyB9LCA1MDApOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoIlNvbWUgRXJyb3IgT2NjdXJyZWQuIFBsZWFzZSBUcnkgQWdhaW4uIik7CiAgICAgICAgICAgICAgX3RoaXM1LmRlbGV0ZV9uZXJfdGFncyA9IFtdOwogICAgICAgICAgICB9CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBfdGhpczUuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiU29tZSBFcnJvciBPY2N1cnJlZC4gUGxlYXNlIFRyeSBBZ2Fpbi4iKTsKICAgICAgICAgICAgX3RoaXM1LmRlbGV0ZV9uZXJfdGFncyA9IFtdOwoKICAgICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgICAgX3RoaXM1LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIHN0YXJ0X3RhZ2dpbmc6IGZ1bmN0aW9uIHN0YXJ0X3RhZ2dpbmcoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5sb2FkX3RhZ191cmwoKSwgewogICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgIGdldFRhZzogZmFsc2UKICAgICAgfSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzNi5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJOZXIgVGFnIEluQ29tcGxldGVkIikgewogICAgICAgICAgdG9hc3RyLmVycm9yKCJQbGVhc2UgY29tcGxldGUgdGhlIHRhZ3Mgd2hpY2ggYXJlIGFzc2lnbmVkIHRvIHlvdS4iKTsKICAgICAgICAgIF90aGlzNi5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJBc3NpZ24gTmVyIFRhZyIpIHsKICAgICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgLy8gdGhpcy4kcm91dGVyLmdvKCk7CiAgICAgICAgICBfdGhpczYubG9hZF9uZXJfc3RhdGVtZW50cygpOyAvLyB9LCAxNTAwKTsKCiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiTm8gRGF0YSBBdmFpbGFibGUiKSB7CiAgICAgICAgICB0b2FzdHIuZXJyb3IoIlRoZXJlIGlzIG5vIGRhdGEgYXZhaWxhYmxlLiBQbGVhc2UgdXBsb2FkIHRoZSBkYXRhIHRvIHRhZy4iKTsKICAgICAgICAgIF90aGlzNi5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIkludGVybmFsIFNlcnZlciBFcnJvciIpIHsKICAgICAgICAgIHRvYXN0ci5lcnJvcigiRHVlIHRvIHNvbWUgaW50ZXJuYWwgc2VydmVyIGVycm9yLCB3ZSB3ZXJlIHVuYWJsZSB0byBwcm9jZXNzIHRoaXMgcmVxdWVzdC4gUGxlYXNlIHRyeSBsYXRlci4iKTsKICAgICAgICAgIF90aGlzNi5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXM2LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzNi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIHBhZ2VfcmVxdWlyZTogZnVuY3Rpb24gcGFnZV9yZXF1aXJlKHBhZ2UpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gW107CgogICAgICBpZiAocGFnZSA9PSAwIHx8IHBhZ2UgPT0gdGhpcy50b3RhbF9wYWdlcyArIDEpIHt9IGVsc2UgewogICAgICAgIGlmICh0aGlzLnNlYXJjaF9uYW1lICE9ICIiKSB7CiAgICAgICAgICBpZiAocGFnZSA9PSAiLi4ucyIpIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCgxICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgICAgfSBlbHNlIGlmIChwYWdlID09ICIuLi5sIikgewogICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKHRoaXMudG90YWxfcGFnZXMgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBwYWdlOwogICAgICAgICAgfQoKICAgICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICAgIHRoaXMuc2VhcmNoX25lcl9zdGF0bWVudF9wYWdlX2NoYW5nZSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CgogICAgICAgICAgaWYgKHBhZ2UgPT0gIi4uLnMiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgoMSArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSBpZiAocGFnZSA9PSAiLi4ubCIpIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCh0aGlzLnRvdGFsX3BhZ2VzICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gcGFnZTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5sb2FkX3RhZ191cmwoKSwgewogICAgICAgICAgICBjb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIGdldF9hbGxfbmVyX3N0YXRlbWVudHM6IHRydWUsCiAgICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgICAgICBwYWdlX25vOiB0aGlzLnBhZ2Vfbm8KICAgICAgICAgIH0sIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJBbGwgTmVyIFRhZ3MiKSB7CiAgICAgICAgICAgICAgICBfdGhpczcuc3RhdGVtZW50cyA9IFtdOwoKICAgICAgICAgICAgICAgIF90aGlzNy5sb2FkX3N0YXRlbWVudHMocmVzcG9uc2UuZGF0YS5SZXNwb25zZSk7IC8vIHRoaXMubnVtYmVyX29mX3Jvd3MgPSByZXNwb25zZS5kYXRhLnBhZ2Vjb3VudDsKICAgICAgICAgICAgICAgIC8vIHRoaXMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwodGhpcy5udW1iZXJfb2Zfcm93cyAvIHRoaXMucGVyX3BhZ2UpOwoKCiAgICAgICAgICAgICAgICBfdGhpczcuc2V0cGFnaW5hdGlvbihfdGhpczcucGFnZV9ubyk7CgogICAgICAgICAgICAgICAgX3RoaXM3Lm5vdFRyYWluZWRRdWVzdGlvbnMgPSByZXNwb25zZS5kYXRhLlJlc3BvbnNlOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIkFzc2lnbiBOZXIgVGFnIikgewogICAgICAgICAgICAgICAgX3RoaXM3LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIk5vIERhdGEgQXZhaWxhYmxlIikgewogICAgICAgICAgICAgICAgX3RoaXM3LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YSA9PSAiSW50ZXJuYWwgU2VydmVyIEVycm9yIikgewogICAgICAgICAgICAgICAgX3RoaXM3LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBfdGhpczcuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIF90aGlzNy5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgIF90aGlzNy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgY2xlYXJfc2VhcmNoX25hbWU6IGZ1bmN0aW9uIGNsZWFyX3NlYXJjaF9uYW1lKCkgewogICAgICB0aGlzLnNlYXJjaF9uYW1lID0gIiI7CiAgICAgIHRoaXMucGFnZV9yZXF1aXJlKDEpOwogICAgfSwKICAgIHNlYXJjaF9uZXJfc3RhdG1lbnQ6IGZ1bmN0aW9uIHNlYXJjaF9uZXJfc3RhdG1lbnQoKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuc2VhcmNoX25hbWUgIT0gIiIpIHsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICB0aGlzLnBhZ2Vfbm8gPSAxOwogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5sb2FkX3RhZ191cmwoKSwgewogICAgICAgICAgY29tcGFueWlkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIGlzX3NlYXJjaDogdHJ1ZSwKICAgICAgICAgIHNlYXJjaF90ZXJtOiB0aGlzLnNlYXJjaF9uYW1lLAogICAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgICBwYWdlX25vOiB0aGlzLnBhZ2Vfbm8KICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9PSBudWxsKSB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiQWxsIE5lciBUYWdzIikgewogICAgICAgICAgICAgIF90aGlzOC5sb2FkX3N0YXRlbWVudHMocmVzcG9uc2UuZGF0YS5SZXNwb25zZSk7IC8vIHRoaXMubnVtYmVyX29mX3Jvd3MgPSByZXNwb25zZS5kYXRhLnBhZ2Vjb3VudDsKCgogICAgICAgICAgICAgIF90aGlzOC50b3RhbF9wYWdlcyA9IHJlc3BvbnNlLmRhdGEucGFnZWNvdW50OwoKICAgICAgICAgICAgICBfdGhpczguc2V0cGFnaW5hdGlvbihfdGhpczgucGFnZV9ubyk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIkFzc2lnbiBOZXIgVGFnIikgewogICAgICAgICAgICAgIF90aGlzOC5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiTm8gRGF0YSBBdmFpbGFibGUiKSB7CiAgICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiTm8gRGF0YSBGb3VuZCIsCiAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgX3RoaXM4LnN0YXRlbWVudHMgPSBbXTsKICAgICAgICAgICAgICBfdGhpczgudG90YWxfcGFnZXMgPSAxOwoKICAgICAgICAgICAgICBfdGhpczguc2V0cGFnaW5hdGlvbihfdGhpczgucGFnZV9ubyk7CgogICAgICAgICAgICAgIF90aGlzOC5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgICAgX3RoaXM4LnN0YXRlbWVudHMgPSBbXTsKICAgICAgICAgICAgICBfdGhpczgudG90YWxfcGFnZXMgPSAxOwoKICAgICAgICAgICAgICBfdGhpczguc2V0cGFnaW5hdGlvbihfdGhpczgucGFnZV9ubyk7CgogICAgICAgICAgICAgIF90aGlzOC5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXM4LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBfdGhpczguc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzOC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6ICJQbGVhc2UgdHlwZSBzb21ldGhpbmcgaW4gdGhlIHNlYXJjaCBiYXIiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0sCiAgICBzZWFyY2hfbmVyX3N0YXRtZW50X3BhZ2VfY2hhbmdlOiBmdW5jdGlvbiBzZWFyY2hfbmVyX3N0YXRtZW50X3BhZ2VfY2hhbmdlKCkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIGlmICh0aGlzLnNlYXJjaF9uYW1lICE9ICIiKSB7CiAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmxvYWRfdGFnX3VybCgpLCB7CiAgICAgICAgICBjb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgaXNfc2VhcmNoOiB0cnVlLAogICAgICAgICAgc2VhcmNoX3Rlcm06IHRoaXMuc2VhcmNoX25hbWUsCiAgICAgICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICAgIHBhZ2Vfbm86IHRoaXMucGFnZV9ubwogICAgICAgIH0sIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT09IG51bGwpIHsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJBbGwgTmVyIFRhZ3MiKSB7CiAgICAgICAgICAgICAgX3RoaXM5LmxvYWRfc3RhdGVtZW50cyhyZXNwb25zZS5kYXRhLlJlc3BvbnNlKTsgLy8gdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEucGFnZWNvdW50OwoKCiAgICAgICAgICAgICAgX3RoaXM5LnRvdGFsX3BhZ2VzID0gcmVzcG9uc2UuZGF0YS5wYWdlY291bnQ7CgogICAgICAgICAgICAgIF90aGlzOS5zZXRwYWdpbmF0aW9uKF90aGlzOS5wYWdlX25vKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiQXNzaWduIE5lciBUYWciKSB7CiAgICAgICAgICAgICAgX3RoaXM5LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJObyBEYXRhIEF2YWlsYWJsZSIpIHsKICAgICAgICAgICAgICBfdGhpczkuc3RhdGVtZW50cyA9IFtdOwogICAgICAgICAgICAgIF90aGlzOS50b3RhbF9wYWdlcyA9IDE7CgogICAgICAgICAgICAgIF90aGlzOS5zZXRwYWdpbmF0aW9uKF90aGlzOS5wYWdlX25vKTsKCiAgICAgICAgICAgICAgX3RoaXM5LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIkludGVybmFsIFNlcnZlciBFcnJvciIpIHsKICAgICAgICAgICAgICBfdGhpczkuc3RhdGVtZW50cyA9IFtdOwogICAgICAgICAgICAgIF90aGlzOS50b3RhbF9wYWdlcyA9IDE7CgogICAgICAgICAgICAgIF90aGlzOS5zZXRwYWdpbmF0aW9uKF90aGlzOS5wYWdlX25vKTsKCiAgICAgICAgICAgICAgX3RoaXM5LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczkuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIF90aGlzOS5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgX3RoaXM5LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGV4dDogIlBsZWFzZSB0eXBlIHNvbWV0aGluZyBpbiB0aGUgc2VhcmNoIGJhciIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfSwKICAgIHNldHBhZ2luYXRpb246IGZ1bmN0aW9uIHNldHBhZ2luYXRpb24ocGFnZV9ubykgewogICAgICB0aGlzLnBhZ2VfYXJyYXkgPSBbXTsKCiAgICAgIGlmICh0aGlzLnRvdGFsX3BhZ2VzIDw9IDcpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudG90YWxfcGFnZXM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChwYWdlX25vID09IDEpIHsKICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgNDsgX2krKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2kgKyAxKTsKICAgICAgICB9CgogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSB0aGlzLnRvdGFsX3BhZ2VzKSB7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLnMiKTsKCiAgICAgICAgZm9yICh2YXIgX2kyID0gdGhpcy50b3RhbF9wYWdlcyAtIDQ7IF9pMiA8IHRoaXMudG90YWxfcGFnZXM7IF9pMisrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChfaTIgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA8PSA0KSB7CiAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgcGFnZV9ubyArIDM7IF9pMysrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChfaTMgKyAxKTsKICAgICAgICB9CgogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA+PSB0aGlzLnRvdGFsX3BhZ2VzIC0gNCkgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICAgIGZvciAodmFyIF9pNCA9IHBhZ2Vfbm8gLSA0OyBfaTQgPCB0aGlzLnRvdGFsX3BhZ2VzOyBfaTQrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2k0ICsgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICAgIGZvciAodmFyIF9pNSA9IHBhZ2Vfbm8gLSAzOyBfaTUgPD0gcGFnZV9ubyArIDM7IF9pNSsrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChfaTUpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCh0aGlzLnRvdGFsX3BhZ2VzKTsKICAgICAgfQogICAgfSwKICAgIHBhZ2luYXRpb25fY2xhc3M6IGZ1bmN0aW9uIHBhZ2luYXRpb25fY2xhc3MoaW5kZXgpIHsKICAgICAgaWYgKGluZGV4ID09IHRoaXMucGFnZV9ubykgewogICAgICAgIHJldHVybiAiIGFjdGl2ZSI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICIiOwogICAgICB9CiAgICB9LAogICAgbG9hZF9zdGF0ZW1lbnRzOiBmdW5jdGlvbiBsb2FkX3N0YXRlbWVudHMoc3RhdGVtZW50cykgewogICAgICB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3QgPSBbXTsKICAgICAgdGhpcy5zdGF0ZW1lbnRzID0gW107IC8vIGNvbnNvbGUubG9nKHRoaXMuc3RhdGVtZW50cyk7CgogICAgICBmb3IgKHZhciBpIGluIHN0YXRlbWVudHMpIHsKICAgICAgICB2YXIga2V5ID0gT2JqZWN0LmtleXMoc3RhdGVtZW50c1tpXSlbMF07CgogICAgICAgIGlmIChzdGF0ZW1lbnRzW2ldW2tleV0uSXNUYWdDb21wbGV0ZWQgIT0gIllFUyIpIHsKICAgICAgICAgIHZhciBrZXkgPSBPYmplY3Qua2V5cyhzdGF0ZW1lbnRzW2ldKVswXTsKICAgICAgICAgIHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdC5wdXNoKHN0YXRlbWVudHNbaV1ba2V5XSk7CiAgICAgICAgICB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0ud29yZHNfbGlzdCA9IHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5TdGF0ZW1lbnQuc3BsaXQoIiAiKTsKICAgICAgICAgIHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5rZXkgPSBrZXk7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3RhdGVtZW50c1tpXVtrZXldLklzVGFnQ29tcGxldGVkICE9ICJOTyIpIHsKICAgICAgICAgIHZhciBrZXkgPSBPYmplY3Qua2V5cyhzdGF0ZW1lbnRzW2ldKVswXTsKICAgICAgICAgIHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdC5wdXNoKHN0YXRlbWVudHNbaV1ba2V5XSk7CiAgICAgICAgICB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0ud29yZHNfbGlzdCA9IHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5TdGF0ZW1lbnQuc3BsaXQoIiAiKTsKICAgICAgICAgIHZhciBkZXNjID0gW107CiAgICAgICAgICB2YXIgdmFsdWVzOwogICAgICAgICAgdmFyIGluZGV4OwoKICAgICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgdGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLlRhZy5sZW5ndGg7IGErKykgewogICAgICAgICAgICBpZiAodGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLlRhZ1thXSAhPSAiTyIpIHsKICAgICAgICAgICAgICB2YXIgY2hlY2sgPSB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0uVGFnLmluZGV4T2YodGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLlRhZ1thXSk7CgogICAgICAgICAgICAgIGlmICh0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0uVGFnW2FdLmluY2x1ZGVzKCJCLSIpKSB7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygiY3VycmVudCIsIHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5UYWdbYV0pOwogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIm5leHQiLCB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0uVGFnW2EgKyAxXSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLlRhZ1thICsgMV0gIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgIGlmIChjaGVjayA8IHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5UYWcubGVuZ3RoIC0gMSAmJiB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0uVGFnW2EgKyAxXS5pbmNsdWRlcygiSS0iKSkgewogICAgICAgICAgICAgICAgICAgIGluZGV4ID0gYTsgLy8gY29uc29sZS5sb2coImluZGV4IiwgaW5kZXgpOwoKICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0ud29yZHNfbGlzdFtpbmRleF07CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICBpbmRleCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBhOwogICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS53b3Jkc19saXN0W2luZGV4XTsKICAgICAgICAgICAgICAgICAgICBkZXNjLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgdGV4dDogdmFsdWVzLAogICAgICAgICAgICAgICAgICAgICAgd29yZF90eXBlOiB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0uVGFnW2FdLnNsaWNlKDIpCiAgICAgICAgICAgICAgICAgICAgfSk7IC8vIGNvbnNvbGUubG9nKGRlc2MpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBudWxsOwogICAgICAgICAgICAgICAgICBpbmRleCA9IG51bGw7CiAgICAgICAgICAgICAgICAgIGluZGV4ID0gYTsKICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLndvcmRzX2xpc3RbaW5kZXhdOwogICAgICAgICAgICAgICAgICBkZXNjLnB1c2goewogICAgICAgICAgICAgICAgICAgIHRleHQ6IHZhbHVlcywKICAgICAgICAgICAgICAgICAgICB3b3JkX3R5cGU6IHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5UYWdbYV0uc2xpY2UoMikKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0uVGFnW2FdLmluY2x1ZGVzKCJJLSIpKSB7CiAgICAgICAgICAgICAgICB2YXIgY2hlY2sgPSB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0uVGFnLmluZGV4T2YodGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLlRhZ1thXSk7CiAgICAgICAgICAgICAgICBpbmRleCA9IGE7CgogICAgICAgICAgICAgICAgaWYgKHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5UYWdbYSArIDFdICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLlRhZ1thICsgMV0uaW5jbHVkZXMoIkktIikpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMgKyAiICIgKyB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0ud29yZHNfbGlzdFtpbmRleF07CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzICsgIiAiICsgdGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLndvcmRzX2xpc3RbaW5kZXhdOwogICAgICAgICAgICAgICAgICAgIGRlc2MucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB2YWx1ZXMsCiAgICAgICAgICAgICAgICAgICAgICB3b3JkX3R5cGU6IHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5UYWdbYV0uc2xpY2UoMikKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBpbmRleCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gbnVsbDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzICsgIiAiICsgdGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0W2ldLndvcmRzX2xpc3RbaW5kZXhdOwogICAgICAgICAgICAgICAgICBkZXNjLnB1c2goewogICAgICAgICAgICAgICAgICAgIHRleHQ6IHZhbHVlcywKICAgICAgICAgICAgICAgICAgICB3b3JkX3R5cGU6IHRoaXMubWFzdGVyX3N0YXRlbWVudHNfbGlzdFtpXS5UYWdbYV0uc2xpY2UoMikKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIGluZGV4ID0gbnVsbDsKICAgICAgICAgICAgICAgICAgdmFsdWVzID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV1bInNlbGVjdGVkX2xpc3QiXSA9IGRlc2M7CiAgICAgICAgICB0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbaV0ua2V5ID0ga2V5OwogICAgICAgIH0KICAgICAgfQoKICAgICAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgdGhpcy5tYXN0ZXJfc3RhdGVtZW50c19saXN0Lmxlbmd0aDsgX2k2KyspIHsKICAgICAgICB0aGlzLnN0YXRlbWVudHMucHVzaCh0aGlzLm1hc3Rlcl9zdGF0ZW1lbnRzX2xpc3RbX2k2XSk7CiAgICAgIH0KCiAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICB9LAogICAgbG9hZF9wb3BvdmVyOiBmdW5jdGlvbiBsb2FkX3BvcG92ZXIodGFyZ2V0KSB7CiAgICAgICQoIi5wb3BvdmVyRGl2IikuY3NzKCJkaXNwbGF5IiwgImJsb2NrIik7CiAgICAgICQoIi5wb3BvdmVyRGl2IikuY3NzKCJwb3NpdGlvbiIsICJhYnNvbHV0ZSIpOwogICAgICAkKCIucG9wb3ZlckRpdiIpLmNzcygibGVmdCIsIHRhcmdldC5jbGllbnRYKTsKICAgICAgJCgiLnBvcG92ZXJEaXYiKS5jc3MoInRvcCIsIHRhcmdldC5jbGllbnRZICsgd2luZG93LnBhZ2VZT2Zmc2V0KTsKICAgIH0sCiAgICBzZWxlY3RlZF90ZXh0OiBmdW5jdGlvbiBzZWxlY3RlZF90ZXh0KGluZGV4KSB7CiAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7CiAgICAgICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpICE9ICIiICYmIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpLnNwbGl0KCIgIikuam9pbigiIikgIT0gIiIpIHsKICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRfdGV4dCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpLnRyaW0oKTsKICAgICAgICAgIHRoaXMud29yZF9zZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICB0aGlzLnNlbGVjdGVkX3N0YXRlbWVudCA9IHRoaXMuc3RhdGVtZW50c1tpbmRleF0uU3RhdGVtZW50OwogICAgICAgICAgdGhpcy5sb2FkX3BvcG92ZXIoZXZlbnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkX3RleHQgPSAiIjsKICAgICAgICAgICQoIi5wb3BvdmVyRGl2IikuY3NzKCJkaXNwbGF5IiwgIm5vbmUiKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7CiAgICAgICAgZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkudGV4dDsKICAgICAgfQogICAgfSwKICAgIHVwZGF0ZV9zdGF0ZW1lbnRzOiBmdW5jdGlvbiB1cGRhdGVfc3RhdGVtZW50cyhlbnRpdHkpIHsKICAgICAgdmFyIHdvcmRzX2xpc3QgPSBlbnRpdHkudmFsdWUuc3BsaXQoIiAiKTsKICAgICAgdmFyIHRhZ3MgPSBbXTsKCiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5zdGF0ZW1lbnRzKSB7CiAgICAgICAgdmFyIG1hc3Rlcl93b3Jkc19saXN0ID0gdGhpcy5zdGF0ZW1lbnRzW2ldLlN0YXRlbWVudC5zcGxpdCgiICIpOwoKICAgICAgICBpZiAodGhpcy5zdGF0ZW1lbnRzW2ldLnNlbGVjdGVkX2xpc3QgPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aGlzLnN0YXRlbWVudHNbaV0uc2VsZWN0ZWRfbGlzdCA9IFtdOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuc3RhdGVtZW50c1tpXS5UYWcubGVuZ3RoID09IDApIHsKICAgICAgICAgIGZvciAodmFyIGogaW4gbWFzdGVyX3dvcmRzX2xpc3QpIHsKICAgICAgICAgICAgdGhpcy5zdGF0ZW1lbnRzW2ldLlRhZy5wdXNoKCIiKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLnN0YXRlbWVudHNbaV0uU3RhdGVtZW50ID09IHRoaXMuc2VsZWN0ZWRfc3RhdGVtZW50KSB7CiAgICAgICAgICB0aGlzLnN0YXRlbWVudHNbaV0uSXNUYWdDb21wbGV0ZWQgPSAiTk8iOwogICAgICAgICAgdGhpcy5zdGF0ZW1lbnRzW2ldLnNlbGVjdGVkX2xpc3QucHVzaCh7CiAgICAgICAgICAgIHRleHQ6IGVudGl0eS52YWx1ZSwKICAgICAgICAgICAgd29yZF90eXBlOiBlbnRpdHkuZW50aXR5CiAgICAgICAgICB9KTsKCiAgICAgICAgICBmb3IgKHZhciBqIGluIG1hc3Rlcl93b3Jkc19saXN0KSB7CiAgICAgICAgICAgIGlmICh3b3Jkc19saXN0LmluY2x1ZGVzKG1hc3Rlcl93b3Jkc19saXN0W2pdKSkgewogICAgICAgICAgICAgIHZhciBpbmRleCA9IHdvcmRzX2xpc3QuaW5kZXhPZihtYXN0ZXJfd29yZHNfbGlzdFtqXSk7CgogICAgICAgICAgICAgIGlmIChpbmRleCA9PSAwKSB7CiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlbWVudHNbaV0uVGFnW2pdID0gIkItIiArIGVudGl0eS5lbnRpdHk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVtZW50c1tpXS5UYWdbal0gPSAiSS0iICsgZW50aXR5LmVudGl0eTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVtZW50c1tpXS5UYWdbal0gPT0gIiIpIHsKICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVtZW50c1tpXS5UYWdbal0gPSAiTyI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZW50aXR5OiBmdW5jdGlvbiBlbnRpdHkodmFsdWUxLCB2YWx1ZTIpIHsKICAgICAgZm9yICh2YXIgaSBpbiBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbikgewogICAgICAgIGlmIChldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZSAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIiOwogICAgICAgICAgZXZlbnQudGFyZ2V0LmNoaWxkcmVuWzBdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIiOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGV2ZW50LnRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPT0gInllbGxvdyIpIHsKICAgICAgICBldmVudC50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZXZlbnQudGFyZ2V0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICJ5ZWxsb3ciOwogICAgICAgIHZhciBmbGFnID0gZmFsc2U7CgogICAgICAgIGlmICh0aGlzLmRvbmVfZW50aXRpZXMubGVuZ3RoICE9IDApIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kb25lX2VudGl0aWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmRvbmVfZW50aXRpZXNbaV0udmFsdWUgPT0gdmFsdWUxKSB7CiAgICAgICAgICAgICAgZmxhZyA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChmbGFnID09IGZhbHNlKSB7CiAgICAgICAgICB0aGlzLndvcmRfc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgICAgdGhpcy5zdWJfZW50aXRpZXMudmFsdWUgPSB2YWx1ZTE7CiAgICAgICAgICB0aGlzLnN0YXRlbWVudF9hcnJheSA9IHZhbHVlMjsKICAgICAgICAgIHZhciBqb2ludCA9IHRoaXMuc3RhdGVtZW50X2FycmF5LmpvaW4oKTsKICAgICAgICAgIHZhciBhID0gam9pbnQubGFzdEluZGV4T2YodmFsdWUxKTsKICAgICAgICAgIHZhciBiID0gdmFsdWUxLmxlbmd0aCArIGEgLSAyOwogICAgICAgICAgdGhpcy5zdWJfZW50aXRpZXMuc3RhcnQgPSBhOwogICAgICAgICAgdGhpcy5zdWJfZW50aXRpZXMuZW5kID0gYjsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzYXZlX3N0YXRlbWVudDogZnVuY3Rpb24gc2F2ZV9zdGF0ZW1lbnQoaW5kZXgpIHsKICAgICAgdmFyIF90aGlzMTAgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuc3RhdGVtZW50c1tpbmRleF0uVGFnLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiUGxlYXNlIGFkZCBzb21lIHRhZ3MgZmlyc3QiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGZpbmFsX3N0YXRlbWVudHNfbGlzdCA9IFtdOwogICAgICAgIHZhciB2YWxpZF9zdGF0ZW1lbnQgPSB0aGlzLnN0YXRlbWVudHNbaW5kZXhdOyAvLyBjb25zb2xlLmxvZygiYmVmb3JlLS0tIiwgdGhpcy5zdGF0ZW1lbnRzW2luZGV4XSk7CgogICAgICAgIHZhciBrZXkgPSB2YWxpZF9zdGF0ZW1lbnQua2V5OwogICAgICAgIHZhbGlkX3N0YXRlbWVudC5Jc1RhZ0NvbXBsZXRlZCA9ICJZRVMiOwogICAgICAgIGRlbGV0ZSB2YWxpZF9zdGF0ZW1lbnQua2V5OwogICAgICAgIGRlbGV0ZSB2YWxpZF9zdGF0ZW1lbnQuc2VsZWN0ZWRfbGlzdDsKICAgICAgICBkZWxldGUgdmFsaWRfc3RhdGVtZW50LndvcmRzX2xpc3Q7CiAgICAgICAgZmluYWxfc3RhdGVtZW50c19saXN0LnB1c2goX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIHZhbGlkX3N0YXRlbWVudCkpOyAvLyBjb25zb2xlLmxvZygic2luZ3VsYXIgZmluYWwiLGZpbmFsX3N0YXRlbWVudHNfbGlzdCk7CgogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy50YWdfc2VudGVuY2VzX3VybCgpLCB7CiAgICAgICAgICBjb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgbmVyX3RhZ19zdGF0ZW1lbnQ6IGZpbmFsX3N0YXRlbWVudHNfbGlzdAogICAgICAgIH0sIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXMxMC5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSA9PSAiUXVlcnkgRXhlY3V0ZWQgU3VjY2Vzc2Z1bGx5IikgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0ZXh0OiAiWW91ciB0YWdzIGhhdmUgYmVlbiBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5IiwKICAgICAgICAgICAgICAvLyB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAvLyBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSwKICAgICAgICAgICAgICB0aW1lcjogMzUwMAogICAgICAgICAgICB9KTsgLy8gdGhpcy5wYWdlX3JlcXVpcmUoMSk7CgogICAgICAgICAgICBfdGhpczEwLmxvYWRfbmVyX3N0YXRlbWVudHMoKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgX3RoaXMxMC5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgX3RoaXMxMC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIHN1Ym1pdF9uZXJfbW9kZWw6IGZ1bmN0aW9uIHN1Ym1pdF9uZXJfbW9kZWwoKSB7CiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgdmFyIGZpbmFsX3N0YXRlbWVudHNfbGlzdCA9IFtdOwogICAgICB2YXIgdmFsaWRfbGlzdCA9IHRoaXMuc3RhdGVtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHN0YXRlbWVudCkgewogICAgICAgIHJldHVybiBzdGF0ZW1lbnQuSXNUYWdDb21wbGV0ZWQgIT0gIiI7CiAgICAgIH0pOwoKICAgICAgaWYgKHZhbGlkX2xpc3QubGVuZ3RoID09IDApIHsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgIHRvYXN0ci5lcnJvcigiWW91IGhhdmUgbm90IHRhZ2dlZCBhbnkgc3RhdGVtZW50LiBQbGVhc2UgY29tcGxldGUgYW5kIHNlbmQgcmVxdWVzdCBhZ2Fpbi4iKTsKICAgICAgfSBlbHNlIGlmICh2YWxpZF9saXN0Lmxlbmd0aCA8IDUgJiYgdGhpcy5zdGF0ZW1lbnRzLmxlbmd0aCA+IDUpIHsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgIHRvYXN0ci5lcnJvcigiWW91IGhhdmUgdG8gdGFnIG1pbmltdW0gNSBzdGF0ZW1lbnRzLiBQbGVhc2UgY29tcGxldGUgYW5kIHNlbmQgcmVxdWVzdCBhZ2Fpbi4iKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmb3IgKHZhciBpIGluIHZhbGlkX2xpc3QpIHsKICAgICAgICAgIHZhciBrZXkgPSB2YWxpZF9saXN0W2ldLmtleTsKICAgICAgICAgIGRlbGV0ZSB2YWxpZF9saXN0W2ldLmtleTsKICAgICAgICAgIGRlbGV0ZSB2YWxpZF9saXN0W2ldLnNlbGVjdGVkX2xpc3Q7CiAgICAgICAgICBkZWxldGUgdmFsaWRfbGlzdFtpXS53b3Jkc19saXN0OwogICAgICAgICAgZmluYWxfc3RhdGVtZW50c19saXN0LnB1c2goX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIHZhbGlkX2xpc3RbaV0pKTsKICAgICAgICB9IC8vIGNvbnNvbGUubG9nKGZpbmFsX3N0YXRlbWVudHNfbGlzdCk7CgoKICAgICAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbigpLmVtcHR5KSB7CiAgICAgICAgICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZW1wdHkoKTsKICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMpIHsKICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTsKICAgICAgICB9IC8vIGF4aW9zCiAgICAgICAgLy8gICAucG9zdCgKICAgICAgICAvLyAgICAgYXBpX2NhbGxzLnRhZ19zZW50ZW5jZXNfdXJsKCksCiAgICAgICAgLy8gICAgIHsKICAgICAgICAvLyAgICAgICBjb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgIC8vICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgIC8vICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgLy8gICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAvLyAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAvLyAgICAgICBuZXJfdGFnX3N0YXRlbWVudDogZmluYWxfc3RhdGVtZW50c19saXN0LAogICAgICAgIC8vICAgICB9LAogICAgICAgIC8vICAgICB7CiAgICAgICAgLy8gICAgICAgaGVhZGVyczogewogICAgICAgIC8vICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgLy8gICAgICAgfSwKICAgICAgICAvLyAgICAgfQogICAgICAgIC8vICAgKQogICAgICAgIC8vICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgLy8gICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgLy8gICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJRdWVyeSBFeGVjdXRlZCBTdWNjZXNzZnVsbHkiKSB7CiAgICAgICAgLy8gICAgICAgdG9hc3RyLnN1Y2Nlc3MoIkFsbCB5b3VyIHRhZ3MgaGF2ZSBiZWVuIHN1Ym1pdHRlZCBzdWNjZXNzZnVsbHkuIik7CiAgICAgICAgLy8gICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgLy8gICAgICAgICB0aGlzLiRyb3V0ZXIuZ28oKTsKICAgICAgICAvLyAgICAgICB9LCAyMDAwKTsKICAgICAgICAvLyAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgLy8gICAgICAgdG9hc3RyLmVycm9yKCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKTsKICAgICAgICAvLyAgICAgfQogICAgICAgIC8vICAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbigpLmVtcHR5KSB7CiAgICAgICAgLy8gICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLmVtcHR5KCk7CiAgICAgICAgLy8gICAgIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcykgewogICAgICAgIC8vICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTsKICAgICAgICAvLyAgICAgfQogICAgICAgIC8vICAgfSkKICAgICAgICAvLyAgIC5jYXRjaCgoKSA9PiB7CiAgICAgICAgLy8gICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgLy8gICAgIHRvYXN0ci5lcnJvcigiSW50ZXJuYWwgU2VydmVyIEVycm9yIik7CiAgICAgICAgLy8gICB9KTsKCiAgICAgIH0KICAgIH0sCiAgICByZW1vdmVfdGFnOiBmdW5jdGlvbiByZW1vdmVfdGFnKGluZGV4KSB7CiAgICAgIHZhciBfdGhpczExID0gdGhpczsKCiAgICAgIGlmICh0aGlzLnN0YXRlbWVudHNbaW5kZXhdLlRhZy5sZW5ndGggPT0gMCkgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGV4dDogIlN0YXRlbWVudCBoYXZlIG5vIHRhZ3MiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgdGl0bGU6ICJBcmUgeW91IHN1cmU/IiwKICAgICAgICB0ZXh0OiAiSWYgeW91IHVudGFnIHRoZSBzdGF0ZW1lbnQsIHlvdSB3aWxsIGhhdmUgdG8gdGFnIGl0IGFnYWluISIsCiAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlllcywgRGVsZXRlISEiCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc3VsdCk7CiAgICAgICAgaWYgKHJlc3VsdC5kaXNtaXNzKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBfdGhpczExLnN0YXRlbWVudHNbaW5kZXhdLklzVGFnQ29tcGxldGVkID0gIk5PIjsKICAgICAgICBfdGhpczExLnN0YXRlbWVudHNbaW5kZXhdLlRhZyA9IFtdOwogICAgICAgIF90aGlzMTEuc3RhdGVtZW50c1tpbmRleF0uc2VsZWN0ZWRfbGlzdCA9IFtdOwoKICAgICAgICBfdGhpczExLiRzZXQoX3RoaXMxMS5zdGF0ZW1lbnRzLCBpbmRleCwgX3RoaXMxMS5zdGF0ZW1lbnRzW2luZGV4XSk7CgogICAgICAgIHZhciBmaW5hbF9zdGF0ZW1lbnRzX2xpc3QgPSBbXTsKICAgICAgICB2YXIgdmFsaWRfc3RhdGVtZW50ID0gX3RoaXMxMS5zdGF0ZW1lbnRzW2luZGV4XTsKICAgICAgICB2YXIga2V5ID0gdmFsaWRfc3RhdGVtZW50LmtleTsKICAgICAgICBkZWxldGUgdmFsaWRfc3RhdGVtZW50LmtleTsKICAgICAgICBkZWxldGUgdmFsaWRfc3RhdGVtZW50LnNlbGVjdGVkX2xpc3Q7CiAgICAgICAgZGVsZXRlIHZhbGlkX3N0YXRlbWVudC53b3Jkc19saXN0OwogICAgICAgIGZpbmFsX3N0YXRlbWVudHNfbGlzdC5wdXNoKF9kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCB2YWxpZF9zdGF0ZW1lbnQpKTsgLy8gY29uc29sZS5sb2coInNpbmd1bGFyIGZpbmFsIixmaW5hbF9zdGF0ZW1lbnRzX2xpc3QpOwoKICAgICAgICBfdGhpczExLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMudGFnX3NlbnRlbmNlc191cmwoKSwgewogICAgICAgICAgY29tcGFueWlkOiBfdGhpczExLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgIGNvbXBhbnluYW1lOiBfdGhpczExLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgZW1haWw6IF90aGlzMTEuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiBfdGhpczExLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogX3RoaXMxMS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIG5lcl90YWdfc3RhdGVtZW50OiBmaW5hbF9zdGF0ZW1lbnRzX2xpc3QKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXMxMS4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzMTEuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIlF1ZXJ5IEV4ZWN1dGVkIFN1Y2Nlc3NmdWxseSIpIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogIllvdXIgdGFncyBoYXZlIGJlZW4gcmVtb3ZlZCBzdWNjZXNzZnVsbHkiLAogICAgICAgICAgICAgIC8vIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgIC8vIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLAogICAgICAgICAgICAgIHRpbWVyOiAzNTAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBfdGhpczExLnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICBfdGhpczExLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBlbnRpdHlfc2VsZWN0ZWQ6IGZ1bmN0aW9uIGVudGl0eV9zZWxlY3RlZCh3b3JkKSB7CiAgICAgIGlmICh0aGlzLmhpZ2hsaWdodGVkX3RleHQgIT0gIiIpIHsKICAgICAgICB0aGlzLnN1Yl9lbnRpdGllcy52YWx1ZSA9IHRoaXMuaGlnaGxpZ2h0ZWRfdGV4dDsKICAgICAgfQoKICAgICAgdmFyIHBvcG92ZXJfaWQgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuaWQ7IC8vIHRoaXMud29yZF9zZWxlY3RlZCA9IGZhbHNlOwoKICAgICAgdGhpcy5zdWJfZW50aXRpZXMuZW50aXR5ID0gdGhpcy5kcm9wX2Rvd25fc2VsZWN0OwogICAgICB0aGlzLmRvbmVfZW50aXRpZXMucHVzaCh0aGlzLnN1Yl9lbnRpdGllcyk7CiAgICAgICQoIiMiICsgcG9wb3Zlcl9pZCkucG9wb3ZlcigiaGlkZSIpOwogICAgICAkKCIucG9wb3ZlckRpdiIpLmNzcygiZGlzcGxheSIsICJub25lIik7CiAgICAgIHRoaXMuZHJvcF9kb3duX3NlbGVjdCA9ICIiOwogICAgICB0aGlzLmhpZ2hsaWdodGVkX3RleHQgPSAiIjsKICAgICAgdGhpcy51cGRhdGVfc3RhdGVtZW50cyh0aGlzLnN1Yl9lbnRpdGllcyk7CiAgICAgIHRoaXMuc3ViX2VudGl0aWVzID0ge307CgogICAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbigpLmVtcHR5KSB7CiAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLmVtcHR5KCk7CiAgICAgIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcykgewogICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTsKICAgICAgfQogICAgfSwKICAgIGZpbGVpbnB1dDogZnVuY3Rpb24gZmlsZWlucHV0KGUpIHsKICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXMgfHwgZS5kYXRhVHJhbnNmZXIuZmlsZXM7CgogICAgICBpZiAoZmlsZXNbMF0uc2l6ZSA8IDEwMDAwMDApIHsKICAgICAgICBpZiAoZmlsZXNbMF0ubmFtZS5pbmNsdWRlcygiY3N2IikgfHwgZmlsZXNbMF0ubmFtZS5pbmNsdWRlcygidHh0IikgfHwgZmlsZXNbMF0ubmFtZS5pbmNsdWRlcygieGxzIikgfHwgZmlsZXNbMF0udHlwZS5pbmNsdWRlcygidGV4dCIpKSB7CiAgICAgICAgICB0aGlzLmZpbGVfbGFiZWwgPSBmaWxlc1swXS5uYW1lOwogICAgICAgICAgdGhpcy5jcmVhdGVDU1YoZmlsZXNbMF0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0b2FzdHIuZXJyb3IoIlVwbG9hZCBvbmx5IC5jc3YgZmlsZSB3aXRoIHNpemUgbGVzcyB0aGFuIDFNQiIpOwogICAgICB9CgogICAgICBpZiAoIWZpbGVzLmxlbmd0aCkgcmV0dXJuOwogICAgfSwKICAgIGNyZWF0ZUNTVjogZnVuY3Rpb24gY3JlYXRlQ1NWKGZpbGUsIHR5cGUpIHsKICAgICAgdmFyIF90aGlzMTIgPSB0aGlzOwoKICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczEyLmNzdl9maWxlID0gZS50YXJnZXQucmVzdWx0LnNwbGl0KCJiYXNlNjQiKVsxXTsKICAgICAgfTsKCiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpOwogICAgfSwKICAgIHNlbmRfY3N2OiBmdW5jdGlvbiBzZW5kX2NzdigpIHsKICAgICAgdmFyIF90aGlzMTMgPSB0aGlzOwoKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgIGlmICgkKCIjaW5wdXRHcm91cEZpbGUwMSIpLnZhbCgpID09ICcnKSB7CiAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgIHRpdGxlOiAiVGhlIGlucHV0IGZpZWxkIGlzIGVtcHR5IiwKICAgICAgICAgIHRleHQ6ICJQbGVhc2UgVXBsb2FkIGEgQ1NWIGZpbGUiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMudXBsb2FkX25lcl9maWxlX3VybCgpLCB7CiAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgZmlsZV9kYXRhOiB0aGlzLmNzdl9maWxlLAogICAgICAgICAgZmlsZV9uYW1lOiB0aGlzLmZpbGVfbGFiZWwKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIGRlYnVnZ2VyOwogICAgICAgICAgX3RoaXMxMy5zcGlubmVyT24gPSBmYWxzZTsgLy8gY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YS5Nc2cpOwoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1zZyA9PSAiRXJyb3Igd2hpbGUgdXBsb2FkaW5nIikgewogICAgICAgICAgICB0b2FzdHIuZXJyb3IoIkVycm9yIHdoaWxlIHVwbG9hZGluZyIpOwogICAgICAgICAgICBfdGhpczEzLmZpbGVfbGFiZWwgPSAiIjsKICAgICAgICAgICAgX3RoaXMxMy5jc3ZfZmlsZSA9ICIiOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhID09ICJOZXIgVGFnIEluQ29tcGxldGVkIikgewogICAgICAgICAgICB0b2FzdHIuZXJyb3IoIlRoZXJlIGFyZSBjZXJ0YWluIHRhZ3Mgd2hpY2ggaGF2ZSBiZWVuIGFzc2lnbmVkLiBQbGVhc2UgY29tcGxldGUgdGhlbSIpOwogICAgICAgICAgICBfdGhpczEzLmZpbGVfbGFiZWwgPSAiIjsKICAgICAgICAgICAgX3RoaXMxMy5jc3ZfZmlsZSA9ICIiOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1zZyA9PSAiSW52YWxpZCBIZWFkZXIiKSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW52YWxpZCBIZWFkZXIiKTsKICAgICAgICAgICAgX3RoaXMxMy5maWxlX2xhYmVsID0gIiI7CiAgICAgICAgICAgIF90aGlzMTMuY3N2X2ZpbGUgPSAiIjsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIlVua25vd24gVGFncyBmb3VuZCwgcGxlYXNlIGNoZWNrIHRoZSBjc3YgZmlsZS4iKSB7CiAgICAgICAgICAgIC8vIHRvYXN0ci5lcnJvcigiVW5rbm93biBUYWdzIGZvdW5kISBTdGF0ZW1lbnRzIGhhcyBiZWVuIHVwbG9hZGVkLCBQbGVhc2UgdGFnIHRoZSBzdGF0ZW1lbnRzIG1hbnVhbGx5LiIpCiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRleHQ6ICJVbmtub3duIFRhZ3MgZm91bmQhIFN0YXRlbWVudHMgaGFzIGJlZW4gdXBsb2FkZWQsIFBsZWFzZSB0YWcgdGhlIHN0YXRlbWVudHMgbWFudWFsbHkuIiwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLAogICAgICAgICAgICAgIHRpbWVyOiAxMDAwMAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX3RoaXMxMy5maWxlX2xhYmVsID0gIiI7CiAgICAgICAgICAgIF90aGlzMTMuY3N2X2ZpbGUgPSAiIjsgLy8gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIC8vIHRoaXMuJHJvdXRlci5nbygpOwoKICAgICAgICAgICAgX3RoaXMxMy5sb2FkX25lcl9zdGF0ZW1lbnRzKCk7IC8vIH0sIDI1MDApOyAKCiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZSA9PSAiSW5jb3JyZWN0IGZpbGUgZm9ybWF0IikgewogICAgICAgICAgICB0b2FzdHIuZXJyb3IoIkluY29ycmVjdCBmaWxlIGZvcm1hdCIpOwogICAgICAgICAgICBfdGhpczEzLmZpbGVfbGFiZWwgPSAiIjsKICAgICAgICAgICAgX3RoaXMxMy5jc3ZfZmlsZSA9ICIiOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT0gIkZpbGUgdHlwZSBub3Qgc3VwcG9ydGVkIikgewogICAgICAgICAgICB0b2FzdHIuZXJyb3IoIkZpbGUgdHlwZSBub3Qgc3VwcG9ydGVkIik7CiAgICAgICAgICAgIF90aGlzMTMuZmlsZV9sYWJlbCA9ICIiOwogICAgICAgICAgICBfdGhpczEzLmNzdl9maWxlID0gIiI7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTXNnID09ICJmaWxlIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseSIpIHsKICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoImZpbGUgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5Iik7IC8vIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAvLyB0aGlzLiRyb3V0ZXIuZ28oKTsKCiAgICAgICAgICAgIF90aGlzMTMubG9hZF9uZXJfc3RhdGVtZW50cygpOyAvLyB9LCAyNTAwKTsKCiAgICAgICAgICB9IC8vIGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIkludGVybmFsIFNlcnZlciBFcnJvciIpIHsKICAgICAgICAgIC8vICAgdGhpcy5maWxlX2xhYmVsID0gIiI7CiAgICAgICAgICAvLyAgIHRoaXMuY3N2X2ZpbGUgPSAiIjsKICAgICAgICAgIC8vICAgdG9hc3RyLmVycm9yKAogICAgICAgICAgLy8gICAgICJEdWUgdG8gc29tZSBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IsIHdlIHdlcmUgdW5hYmxlIHRvIHByb2Nlc3MgdGhpcyByZXF1ZXN0LiBQbGVhc2UgdHJ5IGxhdGVyLiIKICAgICAgICAgIC8vICAgKTsKICAgICAgICAgIC8vIH0KCgogICAgICAgICAgJCgiI3VwbG9hZF9jc3ZfZmlsZSIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIF90aGlzMTMuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzMTMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBjb21tYV90b19saXN0OiBmdW5jdGlvbiBjb21tYV90b19saXN0KCkgewogICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7CgogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgaWYgKHRoaXMuZW50aXRpZXNfbGlzdF9zdHJpbmcgPT0gIiIpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6ICJQbGVhc2UgZW50ZXIgTkVSIFRhZyBmaXJzdCIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgIH0pOwogICAgICB9CgogICAgICB0aGlzLmVudGl0aWVzX2xpc3QgPSB0aGlzLmVudGl0aWVzX2xpc3Rfc3RyaW5nLnNwbGl0KCIsIik7CgogICAgICBpZiAodGhpcy5lbnRpdGllc19saXN0X3N0cmluZyAhPSAiIikgewogICAgICAgICQoIiNleGFtcGxlTW9kYWxDZW50ZXIiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5hZGRfbmVyX3RhZygpLCB7CiAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdGFnbGlzdDogdGhpcy5lbnRpdGllc19saXN0CiAgICAgICAgfSwgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczE0LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJOZXIgVGFnIEFkZGVkIFN1Y2Nlc3NmdWxseSIpIHsKICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoIllvdXIgTkVSIHRhZyBhZGRlZCBzdWNjZXNzZnVsbHkiKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiU29tZSBFcnJvciBPY2N1cnJlZC4gUGxlYXNlIFRyeSBBZ2FpbiIpOwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzMTQuZW1wdHlfdmFyaWFibGUoKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgX3RoaXMxNC5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgIHRvYXN0ci5lcnJvcigiU29tZSBFcnJvciBPY2N1cnJlZC4gUGxlYXNlIFRyeSBBZ2FpbiIpOwogICAgICAgICAgX3RoaXMxNC5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgX3RoaXMxNC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuZGVsZXRlX25lcl90YWdzLmxlbmd0aCA+IDApIHsvLyBheGlvcwogICAgICAgIC8vICAgLnBvc3QoYXBpX2NhbGxzLmRlbGV0ZV9uZXJfdGFncygpLCB7CiAgICAgICAgLy8gICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgLy8gICAgIGNvbXBhbnluYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgIC8vICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIC8vICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIC8vICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAvLyAgICAgdGFnX25hbWU6IHRoaXMuZGVsZXRlX25lcl90YWdzLAogICAgICAgIC8vICAgfSkKICAgICAgICAvLyAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgIC8vICAgICBpZiAocmVzcG9uc2UuZGF0YS5Nc2cgPT0gIlF1ZXJ5IEV4ZWN1dGVkIFN1Y2Nlc3NmdWxseSIpIHsKICAgICAgICAvLyAgICAgICB0b2FzdHIuc3VjY2VzcygiWW91ciB0YWcgaGFzIGJlZW4gcmVtb3ZlZCBzdWNjZXNzZnVsbHkuIik7CiAgICAgICAgLy8gICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgLy8gICAgICAgICB0aGlzLiRyb3V0ZXIuZ28oKTsKICAgICAgICAvLyAgICAgICB9LCAyNTAwKTsKICAgICAgICAvLyAgICAgfQogICAgICAgIC8vICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgLy8gdGhpcy4kcm91dGVyLmdvKCk7CiAgICAgICAgdGhpcy5sb2FkX25lcl9zdGF0ZW1lbnRzKCk7IC8vIH0sIDI1MDApOwogICAgICB9CiAgICB9LAogICAgZGVsZXRlX25lcjogZnVuY3Rpb24gZGVsZXRlX25lcihpbmRleCkgewogICAgICB2YXIgX3RoaXMxNSA9IHRoaXM7CgogICAgICAvLyBjb25zb2xlLmxvZygic3RhdGVtZW50cyBsZW5ndGgiLHRoaXMuc3RhdGVtZW50cy5sZW5ndGgpOwogICAgICB2YXIgZGVsZXRlX3N0YXRlbWVudF9saXN0ID0gW107CiAgICAgIHZhciB2YWxpZF9saXN0ID0gdGhpcy5zdGF0ZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoc3RhdGVtZW50KSB7CiAgICAgICAgcmV0dXJuIHN0YXRlbWVudC5TdGF0ZW1lbnQgPT0gX3RoaXMxNS5zdGF0ZW1lbnRzW2luZGV4XS5TdGF0ZW1lbnQ7CiAgICAgIH0pOyAvLyBjb25zb2xlLmxvZyh2YWxpZF9saXN0KTsKCiAgICAgIGZvciAodmFyIGkgaW4gdmFsaWRfbGlzdCkgewogICAgICAgIHZhciBrZXkgPSB2YWxpZF9saXN0W2ldLmtleTsKICAgICAgICBkZWxldGUgdmFsaWRfbGlzdFtpXS5rZXk7CiAgICAgICAgZGVsZXRlIHZhbGlkX2xpc3RbaV0uc2VsZWN0ZWRfbGlzdDsKICAgICAgICBkZWxldGUgdmFsaWRfbGlzdFtpXS53b3Jkc19saXN0OwogICAgICAgIGRlbGV0ZV9zdGF0ZW1lbnRfbGlzdC5wdXNoKF9kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCB2YWxpZF9saXN0W2ldKSk7CiAgICAgIH0gLy8gY29uc29sZS5sb2coZGVsZXRlX3N0YXRlbWVudF9saXN0KTsKCgogICAgICBTd2FsLmZpcmUoewogICAgICAgIHRpdGxlOiAiQXJlIHlvdSBzdXJlPyIsCiAgICAgICAgdGV4dDogIllvdSB3b24ndCBiZSBhYmxlIHRvIHJldmVydCB0aGlzISIsCiAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlllcywgRGVsZXRlISEiCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgIF90aGlzMTUuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmRlbGV0ZV9uZXIoKSwgewogICAgICAgICAgICBjb21wYW55aWQ6IF90aGlzMTUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICBjb21wYW55bmFtZTogX3RoaXMxNS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IF90aGlzMTUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgZW1haWw6IF90aGlzMTUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgdG9rZW46IF90aGlzMTUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIG5lcl90YWdfc3RhdG1lbnQ6IGRlbGV0ZV9zdGF0ZW1lbnRfbGlzdAogICAgICAgICAgfSwgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdChfdGhpczE1LiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgICAgfQogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgX3RoaXMxNS5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJRdWVyeSBFeGVjdXRlZCBTdWNjZXNzZnVsbHkiKSB7CiAgICAgICAgICAgICAgLy8gdG9hc3RyLnN1Y2Nlc3MoIllvdXIgTkVSIHRhZyBkZWxldGVkIHN1Y2Nlc3NmdWxseSIpOwogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdGV4dDogIllvdXIgTkVSIHRhZyBkZWxldGVkIHN1Y2Nlc3NmdWxseSIsCiAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICB0aW1lcjogNTUwMAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBpZiAoX3RoaXMxNS5zdGF0ZW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBkZWxldGVfc3RhdGVtZW50X2xpc3QubGVuZ3RoID09PSAxICYmIF90aGlzMTUucGFnZV9ubyA+IDEpIHsKICAgICAgICAgICAgICAgIF90aGlzMTUucGFnZV9ubyA9IF90aGlzMTUucGFnZV9ubyAtIDE7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpczE1LmNsZWFyX2ZpZWxkcygpOyAvLyBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAvLyB0aGlzLiRyb3V0ZXIuZ28oKTsKCgogICAgICAgICAgICAgIF90aGlzMTUubG9hZF9uZXJfc3RhdGVtZW50cygpOyAvLyB9LCAxNTAwKTsKCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIF90aGlzMTUuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICBfdGhpczE1LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIHNlbGVjdGVkX3N0YXRlbWVudHM6IGZ1bmN0aW9uIHNlbGVjdGVkX3N0YXRlbWVudHMoaW5kZXgpIHsKICAgICAgdmFyIF90aGlzMTYgPSB0aGlzOwoKICAgICAgaWYgKGluZGV4ID09ICJhbGwiKSB7CiAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICB2YXIgcm9sZV9sZW5ndGggPSB0aGlzLnN0YXRlbWVudHMubGVuZ3RoOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvbGVfbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHRoaXMuY2hlY2tlZF9saXN0LnB1c2godGhpcy5zdGF0ZW1lbnRzW2ldKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICAgIGlmICghdGhpcy5jaGVja2VkX2xpc3QuaW5jbHVkZXMoaW5kZXgpKSB7CiAgICAgICAgICAgIHRoaXMuY2hlY2tlZF9saXN0LnB1c2godGhpcy5zdGF0ZW1lbnRzW2luZGV4XSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCA9PSBmYWxzZSkgewogICAgICAgICAgdmFyIHNlbGVjdGFsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzZWxlY3RhbGwiKTsKCiAgICAgICAgICBpZiAoc2VsZWN0YWxsLmNoZWNrZWQgPT0gdHJ1ZSkgewogICAgICAgICAgICBzZWxlY3RhbGwuY2hlY2tlZCA9IGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciB0ZW1wID0gdGhpcy5jaGVja2VkX2xpc3QuZmlsdGVyKGZ1bmN0aW9uIChyb2xlKSB7CiAgICAgICAgICAgIHJldHVybiByb2xlICE9PSBfdGhpczE2LnN0YXRlbWVudHNbaW5kZXhdOwogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IHRlbXA7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZGVsZXRlX25lcl9tdWx0aXBsZTogZnVuY3Rpb24gZGVsZXRlX25lcl9tdWx0aXBsZSgpIHsKICAgICAgdmFyIF90aGlzMTcgPSB0aGlzOwoKICAgICAgdmFyIG51bSA9IHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aDsKICAgICAgdmFyIG11bHRpcGxlX2RlbGV0ZV9zdGF0ZW1lbnRfbGlzdCA9IFtdOwoKICAgICAgaWYgKHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aCA9PSAwKSB7CiAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgIHRpdGxlOiAiTm8gc3RhdGVtZW50IHNlbGVjdGVkISIsCiAgICAgICAgICB0ZXh0OiAiIiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICB0aW1lcjogMjAwMAogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bTsgaSsrKSB7CiAgICAgICAgICB2YXIgdmFsaWRfbGlzdCA9IHRoaXMuc3RhdGVtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHN0YXRlbWVudCkgewogICAgICAgICAgICByZXR1cm4gc3RhdGVtZW50LlN0YXRlbWVudCA9PSBfdGhpczE3LmNoZWNrZWRfbGlzdFtpXS5TdGF0ZW1lbnQ7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBrZXkgPSB2YWxpZF9saXN0WzBdLmtleTsKICAgICAgICAgIGRlbGV0ZSB2YWxpZF9saXN0WzBdLmtleTsKICAgICAgICAgIG11bHRpcGxlX2RlbGV0ZV9zdGF0ZW1lbnRfbGlzdC5wdXNoKF9kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCB2YWxpZF9saXN0KSk7CiAgICAgICAgfQoKICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgdGl0bGU6ICJBcmUgeW91IHN1cmU/IiwKICAgICAgICAgIHRleHQ6ICJZb3Ugd29uJ3QgYmUgYWJsZSB0byByZXZlcnQgdGhpcyEiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiWWVzLCBEZWxldGUhISIKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgICAgX3RoaXMxNy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5kZWxldGVfbmVyKCksIHsKICAgICAgICAgICAgICBjb21wYW55aWQ6IF90aGlzMTcuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICAgIGNvbXBhbnluYW1lOiBfdGhpczE3LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiBfdGhpczE3LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgZW1haWw6IF90aGlzMTcuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICB0b2tlbjogX3RoaXMxNy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgICBuZXJfdGFnX3N0YXRtZW50OiBtdWx0aXBsZV9kZWxldGVfc3RhdGVtZW50X2xpc3QKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXMxNy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgIF90aGlzMTcuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJRdWVyeSBFeGVjdXRlZCBTdWNjZXNzZnVsbHkiKSB7CiAgICAgICAgICAgICAgICAvLyB0b2FzdHIuc3VjY2VzcygiWW91ciBORVIgdGFnIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5Iik7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdGV4dDogIllvdXIgTkVSIHRhZyBkZWxldGVkIHN1Y2Nlc3NmdWxseSIsCiAgICAgICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgdGltZXI6IDU1MDAKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmIChtdWx0aXBsZV9kZWxldGVfc3RhdGVtZW50X2xpc3QubGVuZ3RoID09PSBfdGhpczE3LnN0YXRlbWVudHMubGVuZ3RoICYmIF90aGlzMTcucGFnZV9ubyA+IDEpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMxNy5wYWdlX25vID0gX3RoaXMxNy5wYWdlX25vIC0gMTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpczE3LmNsZWFyX2ZpZWxkcygpOyAvLyBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgIC8vIHRoaXMuJHJvdXRlci5nbygpOwoKCiAgICAgICAgICAgICAgICBfdGhpczE3LmxvYWRfbmVyX3N0YXRlbWVudHMoKTsgLy8gfSwgMTUwMCk7CgogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfdGhpczE3LmNsZWFyX2ZpZWxkcygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBfdGhpczE3LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICAgIF90aGlzMTcuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIHRyYWluX25lcl9tb2RlbDogZnVuY3Rpb24gdHJhaW5fbmVyX21vZGVsKCkgewogICAgICB2YXIgX3RoaXMxOCA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCkgewogICAgICAgIGlmICh0aGlzLm5vdFRyYWluZWRRdWVzdGlvbnMubGVuZ3RoID4gMCkgewogICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgdGl0bGU6ICJBcmUgeW91IHN1cmUsIHdhbnQgdG8gc2V0dXAgVHJhaW5pbmc/ICIsCiAgICAgICAgICAgIHRleHQ6ICJUcmFpbmluZyBtYXkgdGFrZSBzZXZlcmFsIG1pbnV0ZXMiLAogICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlllcywgVHJhaW4gRW50aXR5IG1vZGVsIiwKICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogIkdvIEJhY2siCiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgICAgIC8vIGlmICh0aGlzLnN0YXRlbWVudHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIC8vIGF4aW9zCiAgICAgICAgICAgICAgLy8gICAucG9zdChhcGlfY2FsbHMubm90aWZ5X3N1cGVyYWRtaW5fdXJsKCksIHsKICAgICAgICAgICAgICAvLyAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgLy8gICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgICAgLy8gICAgIG5vdGlmeV90eXBlOiAiTmVyTW9kZWwiLAogICAgICAgICAgICAgIC8vICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIC8vICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgICAvLyAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICAvLyAgICAgc3ViamVjdDogIk5vdGlmaWNhdGlvbiB0byB0cmFpbiB0aGUgbmVyIG1vZGVsIiwKICAgICAgICAgICAgICAvLyAgICAgYm9keToKICAgICAgICAgICAgICAvLyAgICAgICB0aGlzLmNvbXBhbnluYW1lICsKICAgICAgICAgICAgICAvLyAgICAgICAiaGFzIHJlcXVlc3RlZCB0byB0cmFpbiB0aGUgbmVyIG1vZGVsIG9mIGVudGl0aWVzLiIsCiAgICAgICAgICAgICAgLy8gICB9KQogICAgICAgICAgICAgIC8vICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgICAgLy8gICAgIGFsZXJ0KHJlc3BvbnNlLmRhdGEuTXNnKTsKICAgICAgICAgICAgICAvLyAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTXNnID09ICJBIG1haWwgaGFzIGJlZW4gc2VudCB0byB5b3VyIGVtYWlsIikgewogICAgICAgICAgICAgIC8vICAgICAgIHRvYXN0ci5zdWNjZXNzKAogICAgICAgICAgICAgIC8vICAgICAgICAgIllvdXIgTmVyICBtb2RlbCBpcyBzdWNjZXNzZnVsbHkgc2NoZWR1bGVkIGZvciBmdXJ0aGVyIHRyYWluaW5nLiIKICAgICAgICAgICAgICAvLyAgICAgICApOwogICAgICAgICAgICAgIC8vICAgICAgIHRoaXMubmV3X3F1ZXN0aW9ucyA9IDA7CiAgICAgICAgICAgICAgLy8gICAgIH0KICAgICAgICAgICAgICAvLyAgIH0pOwogICAgICAgICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnRyYWluX25lcl9tb2RlbHMoKSwgewogICAgICAgICAgICAgICAgY29tcGFueW5hbWU6IF90aGlzMTguJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgICAgICBjb21wYW55aWQ6IF90aGlzMTguJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICAgICAgZW1haWw6IF90aGlzMTguJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiBfdGhpczE4LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgICB0b2tlbjogX3RoaXMxOC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogX3RoaXMxOC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgICAgICAgICAgIGNvbXBhbnlfZGV0YWlsczogewogICAgICAgICAgICAgICAgICBjb21wYW55X25hbWU6IF90aGlzMTguJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgICAgICAgIGNvbXBhbnlfaWQ6IF90aGlzMTguJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkCiAgICAgICAgICAgICAgICB9IC8vIGVwb2NoczogMTAwLAogICAgICAgICAgICAgICAgLy8gYmF0Y2hfc2l6ZTogNjQKCiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIF90aGlzMTgud2FudF9zdGF0dXMgPSB0cnVlOwoKICAgICAgICAgICAgICAgIF90aGlzMTguJHJvb3QuJGVtaXQoIndhbnRfbW9kZWxfc3RhdHVzIiwgX3RoaXMxOC53YW50X3N0YXR1cyk7CgogICAgICAgICAgICAgICAgX3RoaXMxOC5jaGVja19uZXJfbW9kZWxfc3RhdHVzKCk7CgogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHX0NPREUgPT09IDQwNDYpIHsKICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MocmVzcG9uc2UuZGF0YS5NU0cpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TR19DT0RFID09PSAxMDM0KSB7CiAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihyZXNwb25zZS5kYXRhLk1TRyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoIkludGVybmFsIFNlcnZlciBFcnJvciIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoIkludGVybmFsIFNlcnZlciBFcnJvciIpOwoKICAgICAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgICAgICBfdGhpczE4LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOyAvLyB9IGVsc2UgewogICAgICAgICAgICAgIC8vICAgdG9hc3RyLmVycm9yKCJUaGVyZSBhcmUgbm8gdGFncyB0byB0cmFpbi4gUGxlYXNlIGFkZCBzb21lIHRhZ3MgYW5kIik7CiAgICAgICAgICAgICAgLy8gfQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdG9hc3RyLmVycm9yKCJUaGVyZSBhcmUgbm8gdGFncyB0byB0cmFpbi4gUGxlYXNlIGFkZCBzb21lIHRhZ3MgYW5kIFRyeSBBZ2Fpbi4iKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWwoKTsKICAgICAgfQogICAgfSwKICAgIGNsZWFyX2ZpZWxkczogZnVuY3Rpb24gY2xlYXJfZmllbGRzKCkgewogICAgICB0aGlzLndvcmRfaW5mbyA9IHRoaXMuYnVmZmVyX3dvcmRfbGlzdDsKICAgICAgdGhpcy5lbnRpdGllc19saXN0X3N0cmluZyA9ICIiOwogICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgfSwKICAgIGRvd25sb2FkX3NhbXBsZTogZnVuY3Rpb24gZG93bmxvYWRfc2FtcGxlKCkgewogICAgICB2YXIgX3RoaXMxOSA9IHRoaXM7CgogICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmNvbXBhbnluYW1lKTsKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICBheGlvcyh7CiAgICAgICAgbWV0aG9kOiAicG9zdCIsCiAgICAgICAgdXJsOiBhcGlfY2FsbHMuZmlsZV9kb3dubG9hZCgpLAogICAgICAgIHJlc3BvbnNlVHlwZTogImJsb2IiLAogICAgICAgIGRhdGE6IHsKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgc2FtcGxlX2ZpbGU6ICJuZXIiCiAgICAgICAgfSwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczE5LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlID09PSAiTm90IGFibGUgdG8gZG93bmxvYWQgZmlsZSIpIHsKICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgIHRpdGxlOiAiU29tZSBFcnJvciBPY2N1cnJlZC4gUGxlYXNlIFRyeSBBZ2FpbiIsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtyZXNwb25zZS5kYXRhXSkpOwogICAgICAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICAgICAgICBsaW5rLmhyZWYgPSB1cmw7IC8vIGNvbnNvbGUubG9nKHRoaXMuY29tcGFueW5hbWUpCgogICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoImRvd25sb2FkIiwgX3RoaXMxOS5jb21wYW55X25hbWUgKyAiTmVyRmlsZS5jc3YiKTsKICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7CiAgICAgICAgICBsaW5rLmNsaWNrKCk7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzMTkuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgIHRpdGxlOiAiU29tZSBFcnJvciBPY2N1cnJlZC4gUGxlYXNlIFRyeSBBZ2FpbiIsCiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKCiAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICBfdGhpczE5LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},null]}