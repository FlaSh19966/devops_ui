{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Data Inputs/ResponseBot.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Data Inputs/ResponseBot.vue","mtime":1663910265466},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lmxhc3QtaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9ob21lL3ZpbWFsZXNoL0xlYXJuaW5nL2Rldm9wc191aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3ZpbWFsZXNoL0xlYXJuaW5nL2Rldm9wc191aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiL2hvbWUvdmltYWxlc2gvTGVhcm5pbmcvZGV2b3BzX3VpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7Cgp2YXIgX25hbWUkY29tcG9uZW50cyRtaXhpOwoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IGFwaV9jYWxscyBmcm9tICJAL3BvcnRhbC9hcGlfY2FsbHMiOwppbXBvcnQgZmluZ2VycHJpbnQgZnJvbSAiQC9wb3J0YWwvY29tcG9uZW50cy9maW5nZXJwcmludCI7CmltcG9ydCB7IGJ1cyB9IGZyb20gIkAvcG9ydGFsL21haW4iOwppbXBvcnQgeyBzZXRUaW1lb3V0IH0gZnJvbSAidGltZXJzIjsKaW1wb3J0IE11bHRpc2VsZWN0IGZyb20gInZ1ZS1tdWx0aXNlbGVjdCI7CmltcG9ydCBWaWRlb1ZpZXdlciBmcm9tICJAL3BvcnRhbC9jb21wb25lbnRzL1Jlc3BvbnNlIEJvdC9WaWRlb1ZpZXdlci52dWUiOwppbXBvcnQgZGVib3VuY2UgZnJvbSAidnVlLWRlYm91bmNlL2Rpc3QvZGVib3VuY2UubWluLmpzIjsgLy8gaW1wb3J0IHsgU29ja2V0IH0gZnJvbSAicGhvZW5peC1zb2NrZXQiOwoKaW1wb3J0IHsgU29ja2V0LCBQcmVzZW5jZSB9IGZyb20gInBob2VuaXgiOwppbXBvcnQgU3RhclJhdGluZyBmcm9tICJ2dWUtc3Rhci1yYXRpbmciOwppbXBvcnQgeyB2b2ljZXJlY29yZGVyLCBzdGFydF92b2ljZV9jb21tdW5pY2F0aW9uLCBmb3JlaWdueGNoYW5nZV9jdXN0b20sIGdlbmVyYXRlX3RpbWUgfSBmcm9tICJAL3BvcnRhbC9taXhpbnMiOwppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudCI7CmltcG9ydCBzd2FsIGZyb20gInN3ZWV0YWxlcnQyIjsKaW1wb3J0IENlbnNlQ2FydCBmcm9tICIuL0NlbnNlQ2FydC52dWUiOwppbXBvcnQgVnVlTnVtZXJpY0lucHV0IGZyb20gInZ1ZS1udW1lcmljLWlucHV0IjsKaW1wb3J0IHNvdW5kIGZyb20gIkAvcG9ydGFsL2Fzc2V0cy9hdWRpby9taXhraXQtYWRkLXRvLWNhcnQud2F2IjsKaW1wb3J0ICJAL3BvcnRhbC9hc3NldHMvanMvc2hvcGlmeS5taW4uanMiOwpleHBvcnQgZGVmYXVsdCAoX25hbWUkY29tcG9uZW50cyRtaXhpID0gewogIG5hbWU6ICJyZXNwb25zZS1ib3QiLAogIGNvbXBvbmVudHM6IHsKICAgIE11bHRpc2VsZWN0OiBNdWx0aXNlbGVjdCwKICAgIFZpZGVvVmlld2VyOiBWaWRlb1ZpZXdlciwKICAgIFN0YXJSYXRpbmc6IFN0YXJSYXRpbmcsCiAgICBDZW5zZUNhcnQ6IENlbnNlQ2FydCwKICAgIFZ1ZU51bWVyaWNJbnB1dDogVnVlTnVtZXJpY0lucHV0CiAgfSwKICBtaXhpbnM6IFt2b2ljZXJlY29yZGVyLCBzdGFydF92b2ljZV9jb21tdW5pY2F0aW9uLCBmb3JlaWdueGNoYW5nZV9jdXN0b20sIGdlbmVyYXRlX3RpbWVdLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgcG9wdXBfbXNnOiAiWW91IGNhbiB0eXBlICdSZXN0YXJ0J+KAnSAgYXQgPC9icj5hbnkgIHRpbWUgdG8gZ2V0IGJhY2s8L2JyPiB0byB0aGUgTWFpbiBNZW51IiwKICAgICAgcmVmcmVzaGVkX29yX2Nsb3NlZDogdHJ1ZSwKICAgICAgcXVzX2FuczogImFuc3dlcnMiLAogICAgICB0b19zZW5kOiAiIiwKICAgICAgY2Vuc2VfZW5xdWlyeTogZmFsc2UsCiAgICAgIGlzX2FnZW50X3R5cGluZzogZmFsc2UsCiAgICAgIHVzZXJfbmFtZTogIiIsCiAgICAgIHNob3c6IGZhbHNlLAogICAgICBjaGF0OiBbXSwKICAgICAgZmluZ2VycHJpbnQ6IG51bGwsCiAgICAgIGJvdF9yZXNwb25zZV90b2tlbl92YWx1ZTogdGhpcy4kc2Vzc2lvbi5nZXQoIkJvdFRva2VuIiksCiAgICAgIGxldmVsOiAwLAogICAgICByZWNvZ25pdGlvbjogbnVsbCwKICAgICAganNvbl9kYXRhOiB7CiAgICAgICAgY3JlYXRlX2FwcG9pbnRtZW50OiAneyJVc2VyIjogeyJQaHlzaWNpYW4iOiB7IklEIjogIkRUMDAwMDAwMDAwMDAwMDAwMjM3In0sIlVzZXJOYW1lIjoiYWMiLCJJRCI6IlVTMDAwMDAwMDAwMDAwMDAwMTM4IiwiQWNjb3VudCI6IHsiSUQiOiAiQ08wMDAyMyJ9LCJUb2tlbiI6ICJaMXJTR0dtMFhwTVdqdDNnaUFFclBQV1o4NFRRTjlGc0ZNQkxzVSsvTEF1Nnl1YWxNZzZFUDJic3J3WmpMUHdtM2o0RHBQY0djNUxjSXAzTmpnZlVzQT09IiwiU3BlY2lhbHR5IjogeyJJRCI6ICJQRzAwMDAwMDAwMDAwMDAwMDE0MSIsICJOYW1lIjogIkFDIiwgIkNvZGUiOiAiQUMifSwiRG9tYWluIjogImdvZ3JlZW5iaWxscy5jb20ifSwiQXBwb2ludG1lbnQiOiB7IkRhdGUiOiAiMDgvMzAvMjAxOCIsICJJc0pTT05Ob3RlIjogMCwgIlBhdGllbnQiOiB7IkNhc2VJRCI6ICIifX19JywKICAgICAgICB2aXNpdHNfZmluYWxpemVkOiAneyJVc2VyIjogeyJQaHlzaWNpYW4iOiB7IklEIjogIkRUMDAwMDAwMDAwMDAwMDExODg2In0sIlVzZXJOYW1lIjogImNoIiwiSUQiOiAiVVMwMDAwMDAwMDAwMDAwMDAxNDMiLCJBY2NvdW50Ijp7IklEIjoiQ08wMDAyMyJ9LCJUb2tlbiI6ImV5SjBlWEFpT2lKS1YxUWlMQ0poYkdjaU9pSklVekkxTmlKOS5leUoxYzJWeUlqb2lZWFprYUhWMElpd2laWGh3SWpveE5USTVORGd5TmpZemZRLnYxYzBIYnVXdVpYWHBKZkRyWFZjMUhQVnVmZmJuR2NMcWtwZzB6bTZBb1EiLCJTcGVjaWFsdHkiOiB7IklEIjogIlBHMDAwMDAwMDAwMDAwMDAwMTQyIiwiQ29kZSI6ICJjaCJ9LCJEb21haW4iOiAiZ3JlZW55b3VyYmlsbHMuY29tIn0sIlNlYXJjaFBhcmFtZXRlcnMiOiB7IlN0YXR1cyI6ICIiLCJPcmRlckJ5IjogIiIsIkZyb21EYXRlIjogIjAxLzAxLzIwMTgiLCJDb3VudCI6ICIxMCIsIlNlYXJjaFRleHQiOiAiIiwiVHlwZU9mVmlzaXQiOiAiQUxMIiwiU29ydE9yZGVyIjogImFwcG9pbnRtZW50IiwiU3RhcnRJbmRleCI6ICIxIiwiRW5kSW5kZXgiOiAiMTAiLCJUb0RhdGUiOiAiMDgvMDYvMjAxOCJ9fScsCiAgICAgICAgYXBwb2ludG1lbnRzX2NvdW50OiAneyJVc2VyIjogeyJQaHlzaWNpYW4iOiB7IklEIjogIkRUMDAwMDAwMDAwMDAwMDExODg2In0sIlVzZXJOYW1lIjogImNoIiwiSUQiOiAiVVMwMDAwMDAwMDAwMDAwMDAxNDMiLCJBY2NvdW50Ijp7IklEIjoiQ08wMDAyMyJ9LCJUb2tlbiI6ImV5SjBlWEFpT2lKS1YxUWlMQ0poYkdjaU9pSklVekkxTmlKOS5leUoxYzJWeUlqb2lZWFprYUhWMElpd2laWGh3SWpveE5USTVORGd5TmpZemZRLnYxYzBIYnVXdVpYWHBKZkRyWFZjMUhQVnVmZmJuR2NMcWtwZzB6bTZBb1EiLCJTcGVjaWFsdHkiOiB7IklEIjogIlBHMDAwMDAwMDAwMDAwMDAwMTQyIiwiQ29kZSI6ICJjaCJ9LCJEb21haW4iOiAiZ3JlZW55b3VyYmlsbHMuY29tIn0sIlNlYXJjaFBhcmFtZXRlcnMiOiB7IlN0YXR1cyI6ICIiLCJPcmRlckJ5IjogIiIsIkZyb21EYXRlIjogIjAxLzAxLzIwMTgiLCJDb3VudCI6ICIxMCIsIlNlYXJjaFRleHQiOiAiIiwiVHlwZU9mVmlzaXQiOiAiQUxMIiwiU29ydE9yZGVyIjogImFwcG9pbnRtZW50IiwiU3RhcnRJbmRleCI6ICIxIiwiRW5kSW5kZXgiOiAiMTAiLCJUb0RhdGUiOiAiMDgvMDYvMjAxOCJ9fScsCiAgICAgICAgY3JlYXRlX3RpY2tldDogJ3siQWNjb3VudE5hbWUiOm51bGwsIkNhbGxiYWNrUGhvbmUiOiIiLCJDb21wYW55SUQiOiJDTzAwMDIzIiwiRGVzY3JpcHRpb24iOiJEZSIsIkRvbWFpbk5hbWUiOm51bGwsIkVtYWlsQ0MiOiJhYmhheS53QGNvZGVhcnJheS50ZWNoIiwiRW1haWxEZWZhdWx0IjoibWFuaXNoLnlAY29kZWFycmF5LnRlY2giLCJQcmlvcml0eSI6IjMiLCJQcmlvcml0eUlEIjowLCJSYWlzZWRCeSI6Imxhd3VzZXIiLCJTdGF0dXMiOjAsIlN0YXR1c0NvZGUiOm51bGwsIlN0YXR1c1RleHQiOm51bGwsIlNUeXBlIjoiV1AiLCJTdWJqZWN0IjoiRGUiLCJTdWJUeXBlIjoiU0FNRC1QIiwiVGlja2V0SUQiOjAsIlRpY2tldE51bWJlciI6bnVsbCwiVHlwZSI6MCwiVHlwZVRleHQiOiJXZWJzaXRlIFByb2JsZW0iLCJsaXN0RmlsZXMxIjpbImNocTEucGRmIl19JywKICAgICAgICBnZXRfcmVwb3J0OiAneyJjb21wYW55SWQiOiAiQ08wMDAyMyJ9JwogICAgICB9LAogICAgICBzdG9wOiB0cnVlLAogICAgICBkZW1vdXJsYmluZDogZmFsc2UsCiAgICAgIHJldmlld3N1cmxiaW5kOiBmYWxzZSwKICAgICAgcmV2aWV3c3VybDogImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL3BhQWVXODZlUVo0IiwKICAgICAgZGVtb3VybDogWyJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC92aWRlb3Nlcmllcz9LY3JKbTlVeFczcyZpbmRleD0xMyZsaXN0PVBMX2pYbGloOGRna1RFOENyUHBpV2NBOUt4UWVLSFpBbnQmdD0wcyIsICJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC92aWRlb3Nlcmllcz9xelMycUlOSTZJTSZsaXN0PVBMX2pYbGloOGRna1J1NWRkR1hBR3FaNHVMTGtvSnpDajgmaW5kZXg9MiJdLAogICAgICBjaGF0X3dpZGdldDogewogICAgICAgIGxvZ286ICIiLAogICAgICAgIHRpdGxlOiAiIiwKICAgICAgICBzdHlsZTogIiIsCiAgICAgICAgYm90X3RoZW1lOiAiIiwKICAgICAgICBidXR0b25fYm9yZGVyX3RoZW1lOiAiIzI3MzY3OSIsCiAgICAgICAgdXNlcl9yZXNwb25zZV9iZ19jb2xvcjogIiMyNzM2NzkiLAogICAgICAgIGJvdF9yZXNwb25zZV9iZ19jb2xvcjogIiNmZmZmZmYiLAogICAgICAgIGRlbGl2ZXJ5X25vdGVfY29sb3I6ICIjMjczNjc5IiwKICAgICAgICBidXR0b25fdGhlbWU6ICIiLAogICAgICAgIGJ1dHRvbl9hbGlnbm1lbnQ6ICIiLAogICAgICAgIGJvdF9pY29uOiAiIiwKICAgICAgICBib3RfYmFja2dyb3VuZF9pbWFnZTogIiIsCiAgICAgICAgYnV0dG9uX2hvcml6b250YWxfc3BhY2luZzogIjMiLAogICAgICAgIGJ1dHRvbl92ZXJ0aWNhbF9zcGFjaW5nOiAiNSIsCiAgICAgICAgaGVhZGVyX2JhY2tncm91bmQ6ICIiLAogICAgICAgIGJvdF9mb250X3N0eWxlOiAiIiwKICAgICAgICBib3RfZm9udF9jb2xvcl9zZW5kZXI6ICIiLAogICAgICAgIGJvdF9mb250X2NvbG9yX3JlY2VpdmVyOiAiIiwKICAgICAgICBib3RfZm9udF9jb2xvcl9idXR0b25zOiAiIiwKICAgICAgICBpc19wb3dlcmVkX2J5X2NlbnNlOiB0cnVlCiAgICAgIH0sCiAgICAgIHNlbGVjdGVkX2RhdGU6ICIiLAogICAgICBzZWxlY3RlZF90aW1lOiAiIiwKICAgICAgcmVhc29uX29mX3Zpc2l0OiAiIiwKICAgICAgcGF0aWVudF9uYW1lOiAiIiwKICAgICAgdmlzaXRvcl9udW1iZXI6ICIiLAogICAgICBmdWxsX3RpbWVfc2xvdHM6IFtdLAogICAgICB0aW1lX3Nsb3RzOiBbXSwKICAgICAgVE9EQVlfREFURTogIiIsCiAgICAgIGNoYW5uZWw6IG51bGwsCiAgICAgIGNoYXRfc29ja2V0OiBudWxsLAogICAgICB2b2ljZV9zb2NrZXQ6IG51bGwsCiAgICAgIGxpdmVfY2hhdF9vbjogZmFsc2UsCiAgICAgIGxpdmVfY2hhdF90b2tlbjogbnVsbCwKICAgICAgY2hhdF9ncm91cF9uYW1lOiBudWxsLAogICAgICB0b19zY3JvbGw6IGZhbHNlLAogICAgICBmb3JtX3BheWxvYWQ6IG51bGwsCiAgICAgIHBob25lX251bWJlcl92YWxpZGl0eTogL1swLTldezEwLDExfSQvLAogICAgICB1cmxfbWF0Y2hfcmVnZXg6IC9eaHR0cHM/OlwvXC8uKltcXFwvXS4rXC5bKHBkZnxjc3Z8eGxzeCldezIsNH0vLAogICAgICBjdXJyZW5jeWV4Y2hhbmdlX2xpc3Q6IG51bGwsCiAgICAgIHNlbGVjdGVkX2luZGljYXRpb246IFtdLAogICAgICB3ZWxjb21lX21lc3NhZ2Vfbm90X3lldF9yZWNlaXZlZDogdHJ1ZSwKICAgICAgcmVzOiB7fSwKICAgICAgaXNfdHlwaW5nX2luZGljYXRvcl9vbjogZmFsc2UsCiAgICAgIHRodW1ic191cF9pY29uOiByZXF1aXJlKCJAL3BvcnRhbC9hc3NldHMvaW1nL0dyb3VwIDcuc3ZnIiksCiAgICAgIHRodW1ic19kb3duX2ljb246IHJlcXVpcmUoIkAvcG9ydGFsL2Fzc2V0cy9pbWcvR3JvdXAgNi5zdmciKSwKICAgICAgc2hvcGlmeV91aTogbnVsbCwKICAgICAgc2hvcGlmeV9jdXN0b21lcl9pZDogbnVsbCwKICAgICAgLy8gcmVmdW5kX29yZGVyX3ZpZXdfZGV0YWlsczoge30sCiAgICAgIC8vIHJlZnVuZF9zZWxlY3RlZF9pdGVtczogW10sCiAgICAgIHNob3BpZnlfcmV0YWlsX3Nob3BfbmFtZTogbnVsbCwKICAgICAgc2hvcF91cmw6IG51bGwsCiAgICAgIGlzX3JldGFpbF9ib3Q6IGZhbHNlLAogICAgICBzaG9waWZ5X3JlYXNvbl9mb3JfcmVmdW5kOiBudWxsLAogICAgICBzaG93X3Nob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmRfZXJyb3I6IGZhbHNlLAogICAgICBzdXBwb3J0X2NoYW5uZWw6IG51bGwsCiAgICAgIGlzX3N1cHBvcnRfYWdlbnRfcHJlc2VudDogZmFsc2UsCiAgICAgIHN1cHBvcnRfYWdlbnRfaW5mbzogbnVsbCwKICAgICAgcmV0YWlsX29yZGVyX3JldHJlaXZhbF9vbmx5X2VtYWlsX3JlcXVpcmVkOiBmYWxzZSwKICAgICAgcmV0YWlsX3Nob3BfY3VycmVuY3k6IG51bGwsCiAgICAgIHByb2R1Y3RfbGlzdDogW10sCiAgICAgIHByb2R1Y3Rfb3V0X29mX3N0b2NrX2xpc3Q6IFtdLAogICAgICBjaGVja2VkX2xpc3Q6IFtdLAogICAgICBjdXJyZW50X3Byb2R1Y3Q6ICIiLAogICAgICBjdXN0b21lcl9lbWFpbDogIiIsCiAgICAgIHJlZ19lbWFpbDogL14oWzAtOWEtekEtWl0oWy0uXHddKlswLTlhLXpBLVpdKSpAKFswLTlhLXpBLVpdWy1cd10qWzAtOWEtekEtWl1cLikrW2EtekEtWl17Miw5fSkkLywKICAgICAgc2Nyb2xsUG9zaXRpb246IDAsCiAgICAgIHZpc2libGVfY3VzdG9tX2dyZWV0aW5nc19idXR0b206IGZhbHNlLAogICAgICByZXZpZXdfbWVzc2FnZV9maXJzdDogIiIsCiAgICAgIHJldmlld19tZXNzYWdlX3NlY29uZDogIiIsCiAgICAgIHJldmlld19yZXNwb25zZV9tZXNzYWdlOiAiIiwKICAgICAgZGlzcGxheV9wcm9kdWN0c19vbl9sYW5kaW5nOiBmYWxzZSwKICAgICAgcmV0YWlsX3dlYl9mcmFtZXdvcms6ICIiLAogICAgICBpc19jZW5zZV9jYXJ0OiBmYWxzZSwKICAgICAgc2hvd19jdXN0b21fY2FydDogZmFsc2UsCiAgICAgIGFkZHRvQ2FydGRhdGE6IFtdLAogICAgICB0b3RhbF9wcm9kdWN0c19xdHk6IDAsCiAgICAgIG92ZXJfcXR5X3dhcm5pbmc6IGZhbHNlLAogICAgICBjb250YWN0X2hlbHBfZW1haWw6IG51bGwsCiAgICAgIHNob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmRfbGlzdDogbnVsbCwKICAgICAgc2hvcGlmeV9yZWFzb25fZm9yX3JlZnVuZF9vcHRpb246IFsiT3JkZXJlZCBieSBtaXN0YWtlIiwgIk9yZGVyZWQgd3JvbmcgcHJvZHVjdCIsICJPcmRlciBub3QgUmVjZWl2ZWQiLCAiTm8gbG9uZ2VyIG5lZWRlZCIsICJCZXR0ZXIgcHJpY2UgYXZhaWxhYmxlIiwgIlJlY2VpdmVkIGRhbWFnZWQgcHJvZHVjdHMiLCAiT3RoZXJzIl0sCiAgICAgIG9yZGVyX25vdGVzX2RhdGE6IFtdLAogICAgICBzZWxlY3RlZF9vcmRlcl9uYW1lOiAiIiwKICAgICAgaXNfd29vY29tbWVyY2Vfb3JkZXI6IGZhbHNlLAogICAgICB2aXNpdG9yc19jdXJyZW50X2xvY2F0aW9uOiBudWxsLAogICAgICBpc19kaXNwbGF5X2Jhbm5lcl9vbl9sYW5kaW5nOiBmYWxzZSwKICAgICAgdmlzaXRvcnNfY3VycmVudF9sb2NhdGlvbl91cmw6ICJodHRwczovL2lwZ2VvbG9jYXRpb24uYWJzdHJhY3RhcGkuY29tL3YxLz9hcGlfa2V5PSIuY29uY2F0KHByb2Nlc3MuZW52LlZVRV9BUFBfQ1VSUkVOVF9MT0NBVElPTl9UT0tFTiksCiAgICAgIGdyZWV0aW5nX2J1dHRvbnNfcG9zaXRpb246IG51bGwsCiAgICAgIC8vIGN1c3RvbV9wcm9kdWN0X2J1dHRvbl9rZXk6IFt7J25hbWUnOiAnY3VzdG9taXplIGl0JywgJ2Z1bmN0aW9uJzoncm91dGUnLCAnb25fa2V5JzogJ3Byb2R1Y3RfdHlwZScsICdvbl92YWx1ZSc6J2N1c3RvbSd9XSwKICAgICAgY3VzdG9tX3Byb2R1Y3RfYnV0dG9uX2tleTogW10KICAgIH07CiAgfSwKICBwcm9wczogewogICAgaXNQcmV2aWV3Qm90OiBCb29sZWFuLAogICAgaXNEaWFsb2dCb3Q6IEJvb2xlYW4sCiAgICBjdXJyZW50X3ByZXZpZXdfYmFubmVyX2lkOiBTdHJpbmcsCiAgICBpc1RleHRUb0JvdDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB0cnVlCiAgICB9LAogICAgaXNDYWxsZWRGcm9tU2V0dXA6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBjYXJ0X2J1dHRvbl9hbGlnbm1lbnQ6IGZ1bmN0aW9uIGNhcnRfYnV0dG9uX2FsaWdubWVudCgpIHsKICAgICAgaWYgKHRoaXMuaXNfcmV0YWlsX2JvdCkgewogICAgICAgIHJldHVybiAiY29sLXNtLTIgcHgtMCI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0sCiAgICBpbnB1dF9kaXNhYmxlZDogZnVuY3Rpb24gaW5wdXRfZGlzYWJsZWQoKSB7CiAgICAgIHJldHVybiB0aGlzLnJlZnJlc2hlZF9vcl9jbG9zZWQgfHwgdGhpcy53ZWxjb21lX21lc3NhZ2Vfbm90X3lldF9yZWNlaXZlZDsKICAgIH0sCiAgICBjc3NQcm9wczogZnVuY3Rpb24gY3NzUHJvcHMoKSB7CiAgICAgIHZhciBib3RBdHRyaWJ1dGVzID0gewogICAgICAgIGhlYWRfY29sb3I6IHRoaXMuY2hhdF93aWRnZXQuaGVhZGVyX2JhY2tncm91bmQKICAgICAgfTsKICAgICAgcmV0dXJuIHsKICAgICAgICAiLS1ib3QtaGVhZC1jb2xvciI6IGJvdEF0dHJpYnV0ZXMuaGVhZF9jb2xvciwKICAgICAgICAiLS1ib3Qtc2VuZGVyLWNvbG9yIjogdGhpcy5jaGF0X3dpZGdldC5ib3RfdGhlbWUsCiAgICAgICAgIi0tYm90LWJ1dHRvbi1jb2xvciI6IHRoaXMuY2hhdF93aWRnZXQuYm90X3RoZW1lLAogICAgICAgICItLWJvdC1saW5rLWNvbG9yIjogdGhpcy5jaGF0X3dpZGdldC5ib3RfdGhlbWUsCiAgICAgICAgIi0tYm90LWJ1dHRvbi1ib3JkZXIiOiB0aGlzLmNoYXRfd2lkZ2V0LmJ1dHRvbl9ib3JkZXJfdGhlbWUsCiAgICAgICAgIi0tdXNlci1yZXNwb25zZS1iZy1jb2xvciI6IHRoaXMuY2hhdF93aWRnZXQudXNlcl9yZXNwb25zZV9iZ19jb2xvciwKICAgICAgICAiLS1ib3QtcmVzcG9uc2UtYmctY29sb3IiOiB0aGlzLmNoYXRfd2lkZ2V0LmJvdF9yZXNwb25zZV9iZ19jb2xvciwKICAgICAgICAiLS1kZWxpdmVyeS1ub3RlLWNvbG9yIjogdGhpcy5jaGF0X3dpZGdldC5kZWxpdmVyeV9ub3RlX2NvbG9yLAogICAgICAgICItLWJvdC1idXR0b24tYmFja2dyb3VuZCI6IHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX3RoZW1lLAogICAgICAgICItLWJvdC1idXR0b25zLWFsaWdubWVudCI6IHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX2FsaWdubWVudC52YWx1ZSwKICAgICAgICAiLS1ib3QtYnV0dG9ucy12ZXJ0aWNhbC1zcGFjaW5nIjogIiIuY29uY2F0KHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX3ZlcnRpY2FsX3NwYWNpbmcsICIlIiksCiAgICAgICAgIi0tYm90LWJ1dHRvbnMtaG9yaXpvbnRhbC1zcGFjaW5nIjogIiIuY29uY2F0KHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX2hvcml6b250YWxfc3BhY2luZywgIiUiKSwKICAgICAgICAiLS1ib3QtZm9udC1zdHlsZSI6IHRoaXMuY2hhdF93aWRnZXQuYm90X2ZvbnRfc3R5bGUudmFsdWUsCiAgICAgICAgIi0tYm90LWZvbnQtY29sb3Itc2VuZGVyIjogdGhpcy5jaGF0X3dpZGdldC5ib3RfZm9udF9jb2xvcl9zZW5kZXIsCiAgICAgICAgIi0tYm90LWZvbnQtY29sb3ItcmVjZWl2ZXIiOiB0aGlzLmNoYXRfd2lkZ2V0LmJvdF9mb250X2NvbG9yX3JlY2VpdmVyLAogICAgICAgICItLWJvdC1mb250LWNvbG9yLWJ1dHRvbnMiOiB0aGlzLmNoYXRfd2lkZ2V0LmJvdF9mb250X2NvbG9yX2J1dHRvbnMKICAgICAgfTsKICAgIH0sCiAgICBib3RfaW1nX2ljb246IGZ1bmN0aW9uIGJvdF9pbWdfaWNvbigpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6ICJ1cmwoIi5jb25jYXQodGhpcy5jaGF0X3dpZGdldC5ib3RfaWNvbiwgIikiKQogICAgICB9OwogICAgfSwKICAgIGNoYXRfYm90X2JhY2tncm91bmRfaW1hZ2U6IGZ1bmN0aW9uIGNoYXRfYm90X2JhY2tncm91bmRfaW1hZ2UoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOiAidXJsKCIuY29uY2F0KHRoaXMuY2hhdF93aWRnZXQuYm90X2JhY2tncm91bmRfaW1hZ2UsICIpIikKICAgICAgfTsKICAgIH0sCiAgICBzaG9waWZ5X2xvZ2luX2J1dHRvbl90ZXh0OiBmdW5jdGlvbiBzaG9waWZ5X2xvZ2luX2J1dHRvbl90ZXh0KCkgewogICAgICBpZiAodGhpcy5yZXRhaWxfb3JkZXJfcmV0cmVpdmFsX29ubHlfZW1haWxfcmVxdWlyZWQpIHsKICAgICAgICByZXR1cm4gIkdvIjsKICAgICAgfQoKICAgICAgcmV0dXJuICJMb2dpbiI7CiAgICB9LAogICAgY2FydF9pY29uX3N2ZzogZnVuY3Rpb24gY2FydF9pY29uX3N2ZygpIHsKICAgICAgcmV0dXJuICI8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4wXCIgd2lkdGg9XCIxOC4wMDAwMDBwdFwiIGhlaWdodD1cIjE4LjAwMDAwMHB0XCIgdmlld0JveD1cIjAgMCA1MTIuMDAwMDAwIDUxMi4wMDAwMDBcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiPjxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLjAwMDAwMCw1MTIuMDAwMDAwKSBzY2FsZSgwLjEwMDAwMCwtMC4xMDAwMDApXCIgZmlsbD1cIiIuY29uY2F0KHRoaXMuY2hhdF93aWRnZXQuYm90X2ZvbnRfY29sb3JfYnV0dG9ucywgIlwiIHN0cm9rZT1cIm5vbmVcIj48cGF0aCBkPVwiTTgxIDUwMDIgYy0xMDAgLTUwIC0xMDYgLTE4NiAtMTIgLTI0OSAzMyAtMjMgMzkgLTIzIDMxNyAtMjMgbDI4NCAwIDUgLTIyIGMzIC0xMyAxNzIgLTc0NSAzNzUgLTE2MjggMjc5IC0xMjA5IDM3NiAtMTYxMiAzOTIgLTE2MzYgNDcgLTY5IC03MiAtNjQgMTU5OSAtNjQgMTM2NyAwIDE1MTQgMiAxNTQ1IDE2IDM3IDE4IDY4IDYyIDc5IDExMSA5IDQ1IC0yNCAxMTcgLTY3IDE0MyAtMzMgMjAgLTQ1IDIwIC0xNDc1IDIwIC0xMzY0IDAgLTE0NDIgMSAtMTQ0NyAxOCAtMTIgMzcgLTEwNiA0NTQgLTEwNiA0NjggMCAxMiAyMDYgMTQgMTUwMyAxNCAxNDcyIDAgMTUwMyAwIDE1MzQgMjAgMTggMTAgMzkgMzMgNDggNTAgMjYgNTAgNDY4IDIwMzAgNDYxIDIwNjggLTcgNDQgLTM5IDg2IC04MCAxMDYgLTMxIDE1IC0yMDggMTYgLTIwMTQgMTYgbC0xOTgwIDAgLTI3IDExOCBjLTczIDMxOSAtOTQgMzk1IC0xMTcgNDE5IC00OSA1MyAtNTEgNTMgLTQzMCA1MyAtMzE2IDAgLTM1NyAtMiAtMzg3IC0xOHogbTQ3MDIgLTg2OSBjMiAtNSAtODEgLTM4MSAtMTg0IC04MzggLTEwNCAtNDU2IC0xODggLTgzMSAtMTg5IC04MzMgMCAtMSAtNjU2IC0xIC0xNDU3IDAgbC0xNDU4IDMgLTE5MiA4MzAgYy0xMDUgNDU3IC0xOTIgODMzIC0xOTIgODM4IC0xIDkgMzY2NyA5IDM2NzIgMHpcIi8+PHBhdGggZD1cIk0yMDM4IDExNjUgYy0xOTAgLTQ4IC0zNTYgLTIxNiAtMzk4IC00MDAgLTE1IC02NCAtMTUgLTE4NiAwIC0yNTAgMzEgLTEzNyAxNTEgLTI5MCAyNzcgLTM1NCAxNzMgLTg3IDM4NyAtNzggNTM4IDIzIDIxOSAxNDYgMzA2IDQwNyAyMTYgNjQ3IC01NSAxNDQgLTE4MSAyNjggLTMyNiAzMjAgLTc4IDI3IC0yMjcgMzQgLTMwNyAxNHogbTIxNyAtMjk1IGM0OCAtMTkgMTA0IC03MSAxMjkgLTEyMSAxMTEgLTIyMyAtMTQ3IC00NDkgLTM1NCAtMzEwIC0xNzYgMTE4IC0xMzAgMzgyIDc4IDQzNyA0NSAxMiAxMDUgOSAxNDcgLTZ6XCIvPjxwYXRoIGQ9XCJNMzgwNiAxMTY0IGMtMTMzIC0zMiAtMjc4IC0xNDYgLTM0MyAtMjcwIC0xMTMgLTIxMyAtNzUgLTQ2MiA5NyAtNjM0IDIxMyAtMjEzIDU0MiAtMjE0IDc1NCAtNCAzNSAzNSA3OCA4OCA5NSAxMTggMzggNjYgNzEgMTkwIDcxIDI2NiAwIDc2IC0zMyAyMDAgLTcxIDI2NiAtMTcgMzAgLTYwIDgzIC05NSAxMTggLTEzNCAxMzMgLTMyMyAxODUgLTUwOCAxNDB6IG0xOTUgLTI4OCBjNDggLTggMTEyIC01NiAxNDYgLTEwOCAyNSAtMzggMjggLTUyIDI4IC0xMjggMCAtNzYgLTMgLTkwIC0yNyAtMTI3IC01MSAtNzggLTExOCAtMTE1IC0yMDkgLTExNSAtMTA5IDAgLTIwMyA2OSAtMjMzIDE3MyAtMjAgNjUgLTIwIDczIDAgMTM4IDE2IDU2IDY5IDEyMyAxMTcgMTQ3IDMyIDE3IDEwNCAzMyAxMjcgMjkgOCAtMiAzMSAtNiA1MSAtOXpcIi8+PC9nPjwvc3ZnPiIpOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIHNjcm9sbFBvc2l0aW9uOiBmdW5jdGlvbiBzY3JvbGxQb3NpdGlvbigpIHsKICAgICAgaWYgKHRoaXMuc2Nyb2xsUG9zaXRpb24gPiAxNTApIHsKICAgICAgICB0aGlzLnZpc2libGVfY3VzdG9tX2dyZWV0aW5nc19idXR0b20gPSB0cnVlOwogICAgICB9IGVsc2UgaWYgKHRoaXMuc2Nyb2xsUG9zaXRpb24gPCAxNTApIHsKICAgICAgICB0aGlzLnZpc2libGVfY3VzdG9tX2dyZWV0aW5nc19idXR0b20gPSBmYWxzZTsKICAgICAgfQogICAgfSwKICAgIHRvX3NlbmQ6IGZ1bmN0aW9uIHRvX3NlbmQoKSB7CiAgICAgIHRoaXMuYnV0dG9uX2ZpbGwoKTsKICAgIH0sCiAgICBjaGF0OiBmdW5jdGlvbiBjaGF0KCkgewogICAgICB0aGlzLnNjcm9sbF9kb3duKCk7CiAgICB9CiAgfSwKICBiZWZvcmVDcmVhdGVkOiBmdW5jdGlvbiBiZWZvcmVDcmVhdGVkKCkgewogICAgdmFyIHJvdXRlX3BhcmFtcyA9IHRoaXMuJHJvdXRlLnBhcmFtczsKCiAgICBpZiAocm91dGVfcGFyYW1zLnJlbG9hZCA9PT0gdHJ1ZSkgewogICAgICB0aGlzLiRyb3V0ZXIuZ28oKTsKICAgIH0KICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICBpZiAodGhpcy5saXZlX2NoYXRfb24pIHRoaXMuZGlzY29ubmVjdF9zdXBwb3J0X2NoYXQoKTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzLAogICAgICAgIF9heGlvcyRwb3N0OwoKICAgIHRoaXMubG9hZF93aWRnZXRfc2V0dGluZ3MoKTsKICAgIHZhciBib3RfdGVtcGxhdGVzX2RhdGEgPSB0aGlzLiRzZXNzaW9uLmdldCgiQm90VGVtcGxhdGVzIik7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3RfdGVtcGxhdGVzX2RhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKGJvdF90ZW1wbGF0ZXNfZGF0YVtpXS5kb21haW4gPT09ICJSZXRhaWwiICYmIGJvdF90ZW1wbGF0ZXNfZGF0YVtpXS5zdWJzY3JpYmVkID09PSB0cnVlKSB7CiAgICAgICAgdGhpcy5pc19yZXRhaWxfYm90ID0gdHJ1ZTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIGlmICh0aGlzLiRzZXNzaW9uLmhhcygiQm90UmVzcG9uc2VfQ29udmVyc2F0aW9uIikpIHt9IC8vIHRoaXMuY2hhdCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJCb3RSZXNwb25zZV9Db252ZXJzYXRpb24iKTsKICAgIC8vIGlmICghdGhpcy4kc2Vzc2lvbi5oYXMoIkNoYXRCb3RJbWFnZVBhcmFtZXRlcnMiKSkgewogICAgLy8gfSBlbHNlIHsKICAgIC8vICAgdGhpcy5jaGF0X3dpZGdldCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJDaGF0Qm90SW1hZ2VQYXJhbWV0ZXJzIik7CiAgICAvLyAgIHRoaXMuY2hhdF93aWRnZXQuc3R5bGUgPSAibWFyZ2luLXRvcDogNXB4O2hlaWdodDozMHB4O3dpZHRoOmF1dG87bWFyZ2luLWxlZnQ6IGF1dG87bWFyZ2luLXJpZ2h0OiAwOyI7CiAgICAvLyB9CgoKICAgIGlmICghdGhpcy5pc1ByZXZpZXdCb3QpIHsKICAgICAgaWYgKCF0aGlzLiRzZXNzaW9uLmhhcygiQm90VG9rZW4iKSkgewogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmJvdF9yZXNwb25zZV90b2tlbigpLCB7CiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbAogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBpZiAoX3RoaXMuYXBpX3N0YXR1c19jb2RlLlNUQVRVU19TVUNDRVNTX0NPUkUuTVNHX0NPREUgPT09IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSkgewogICAgICAgICAgICBfdGhpcy4kc2Vzc2lvbi5zZXQoIkJvdFRva2VuIiwgcmVzcG9uc2UuZGF0YS5kYXRhKTsKCiAgICAgICAgICAgIF90aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSA9IHJlc3BvbnNlLmRhdGEuZGF0YTsKCiAgICAgICAgICAgIF90aGlzLnJlZnJlc2hfY2hhdGJvdCgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkJvdFRva2VuIik7CiAgICAgICAgdGhpcy5yZWZyZXNoX2NoYXRib3QoKTsKICAgICAgfQogICAgfQoKICAgIHZhciBkID0gbmV3IERhdGUoKTsKICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmJvdF91c2VyX2RhdGEoKSwgKF9heGlvcyRwb3N0ID0gewogICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICB0ejogSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lLAogICAgICBkYXRldGltZTogZC50b0lTT1N0cmluZygpLAogICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgIHNvdXJjZTogIldlYiIKICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdCwgInRva2VuIiwgdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3QsICJyb2xlIiwgdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUpLCBfYXhpb3MkcG9zdCkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7fSk7CiAgfQp9LCBfZGVmaW5lUHJvcGVydHkoX25hbWUkY29tcG9uZW50cyRtaXhpLCAiYmVmb3JlRGVzdHJveSIsIGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgdGhpcy4kZm9yY2VVcGRhdGUoKTsKfSksIF9kZWZpbmVQcm9wZXJ0eShfbmFtZSRjb21wb25lbnRzJG1peGksICJtb3VudGVkIiwgZnVuY3Rpb24gbW91bnRlZCgpIHsKICB2YXIgdm0gPSB0aGlzOwogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoInNjcm9sbCIsIGZ1bmN0aW9uIChldikgewogICAgaWYgKGV2LnRhcmdldC5pZCA9PT0gInBvcnRhbF9jaGF0X2JvZHlfaWQiKSB7CiAgICAgIHZtLnNjcm9sbFBvc2l0aW9uID0gZXYudGFyZ2V0WyJzY3JvbGxUb3AiXTsKICAgIH0KICB9LCB0cnVlKTsgLy8gbGV0IHJlY2FwdGNoYVNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpCiAgLy8gcmVjYXB0Y2hhU2NyaXB0LnNldEF0dHJpYnV0ZSgnc3JjJywgJ2h0dHBzOi8vc2Rrcy5zaG9waWZ5Y2RuLmNvbS9idXktYnV0dG9uL2xhdGVzdC9idXlidXR0b24uanMnKQogIC8vIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocmVjYXB0Y2hhU2NyaXB0KQogIC8vIGNvbnN0IHBsdWdpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogIC8vIHBsdWdpbi5zZXRBdHRyaWJ1dGUoCiAgLy8gICAic3JjIiwKICAvLyAgICJodHRwczovL3Nka3Muc2hvcGlmeWNkbi5jb20vYnV5LWJ1dHRvbi9sYXRlc3QvYnV5YnV0dG9uLmpzIgogIC8vICk7CiAgLy8gcGx1Z2luLmFzeW5jID0gdHJ1ZTsKICAvLyBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHBsdWdpbik7CgogIHRoaXMuc2hvdyA9IGZhbHNlOwoKICBpZiAodGhpcy4kcm91dGUubmFtZSA9PSAiVHJhaW4gdGhlIEJvdCIpIHsKICAgICQoIi5jaGF0LXdyYXAiKS5jc3MoInJpZ2h0IiwgImF1dG8iKTsKICB9CgogIGlmICh0aGlzLiRyb3V0ZS5uYW1lID09ICJEaXJlY3QgUmVzcG9uc2UgQm90IikgewogICAgJCgiLmNoYXQtd3JhcCIpLmNzcygibWFyZ2luVG9wIiwgIjUlIik7CiAgfQoKICB3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24gPSB3aW5kb3cud2Via2l0U3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93LlNwZWVjaFJlY29nbml0aW9uOwogIHdpbmRvdy5BdWRpb0NvbnRleHQgPSB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQ7CiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgfHwgbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fCBuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhIHx8IG5hdmlnYXRvci5tc0dldFVzZXJNZWRpYTsKICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHNvbWVMaXN0ZW5lcik7CgogIGZ1bmN0aW9uIHNvbWVMaXN0ZW5lcihldmVudCkgewogICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQ7CgogICAgaWYgKChlbGVtZW50LnRhZ05hbWUgPT0gIkkiIHx8IGVsZW1lbnQudGFnTmFtZSA9PSAiQSIpICYmIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCJmYS1jbGlwYm9hcmQiKSkgewogICAgICB2YXIgbXNnID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoImRhdGEtY29weS1jb250ZW50Iik7CiAgICAgIHZhciB0ZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGV4dGFyZWEiKTsKICAgICAgdmFyIHRlbXBNc2cgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShtc2cpOwogICAgICB0ZW1wLmFwcGVuZENoaWxkKHRlbXBNc2cpOwogICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRlbXApOwogICAgICB0ZW1wLnNlbGVjdCgpOwogICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgiY29weSIpOwogICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRlbXApOwogICAgfQogIH0KCiAgdGhpcy4kcm9vdC4kZW1pdCgiY2hhbmdlX3NpZGViYXJfbWFpbl9tZW51IiwgIlNpbXVsYXRlIEludGVyYWN0aW9uIik7IC8vVG8gaGlkZSBjZW5zZSBjYXJ0IGlmIGNsaWNrZWQgb3V0c2lkZQoKICBkb2N1bWVudC5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHsKICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KCIjY2FydC1ib3giKSB8fCBlLnRhcmdldC5jbG9zZXN0KCIjY3VzdG9tLWNhcnQiKSkge30gZWxzZSB7CiAgICAgIHZtLmlzX2NlbnNlX2NhcnQgPSBmYWxzZTsKICAgIH0KICB9Owp9KSwgX2RlZmluZVByb3BlcnR5KF9uYW1lJGNvbXBvbmVudHMkbWl4aSwgIm1ldGhvZHMiLCB7CiAgbG9hZF93aWRnZXRfc2V0dGluZ3M6IGZ1bmN0aW9uIGxvYWRfd2lkZ2V0X3NldHRpbmdzKCkgewogICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgYXhpb3MucG9zdChhcGlfY2FsbHMuZ2V0X3dpZGdldF9zZXR0aW5ncygpLCB7CiAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICBpc1Nob3c6IHRydWUKICAgIH0sIHsKICAgICAgaGVhZGVyczogewogICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIGlmIChfdGhpczIuYXBpX3N0YXR1c19jb2RlLkRBVEFfQVZBSUxBQkxFLk1TR19DT0RFID09PSByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUpIHsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQudGl0bGUgPSByZXNwb25zZS5kYXRhLmRhdGEuV2lkZ2V0VGl0bGU7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmxvZ28gPSByZXNwb25zZS5kYXRhLmRhdGEuSW1hZ2VVcmw7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJ1dHRvbl90aGVtZSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25UaGVtZTsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuYnV0dG9uX2JvcmRlcl90aGVtZSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5CdXR0b25Cb3JkZXJUaGVtZSA9PT0gbnVsbCA/IF90aGlzMi5jaGF0X3dpZGdldC5idXR0b25fYm9yZGVyX3RoZW1lIDogcmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvbkJvcmRlclRoZW1lOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC51c2VyX3Jlc3BvbnNlX2JnX2NvbG9yID0gcmVzcG9uc2UuZGF0YS5kYXRhLlVzZXJSZXNwb25zZUJnQ29sb3IgPT09IG51bGwgPyBfdGhpczIuY2hhdF93aWRnZXQudXNlcl9yZXNwb25zZV9iZ19jb2xvciA6IHJlc3BvbnNlLmRhdGEuZGF0YS5Vc2VyUmVzcG9uc2VCZ0NvbG9yOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5ib3RfcmVzcG9uc2VfYmdfY29sb3IgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90UmVzcG9uc2VCZ0NvbG9yID09PSBudWxsID8gX3RoaXMyLmNoYXRfd2lkZ2V0LmJvdF9yZXNwb25zZV9iZ19jb2xvciA6IHJlc3BvbnNlLmRhdGEuQm90UmVzcG9uc2VCZ0NvbG9yOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5kZWxpdmVyeV9ub3RlX2NvbG9yID0gcmVzcG9uc2UuZGF0YS5kYXRhLkRlbGl2ZXJ5Tm90ZUNvbG9yID09PSBudWxsID8gX3RoaXMyLmNoYXRfd2lkZ2V0LmRlbGl2ZXJ5X25vdGVfY29sb3IgOiByZXNwb25zZS5kYXRhLmRhdGEuRGVsaXZlcnlOb3RlQ29sb3I7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJvdF9mb250X3N0eWxlID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdEZvbnQuRm9udFN0eWxlOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5ib3RfZm9udF9jb2xvcl9zZW5kZXIgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90Rm9udC5Gb250Q29sb3JTZW5kZXI7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJvdF9mb250X2NvbG9yX3JlY2VpdmVyID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdEZvbnQuRm9udENvbG9yUmVjZWl2ZXI7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJvdF9mb250X2NvbG9yX2J1dHRvbnMgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90Rm9udC5Gb250Q29sb3JCdXR0b25zOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5ib3RfdGhlbWUgPSByZXNwb25zZS5kYXRhLkJvdFRoZW1lOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5pc19wb3dlcmVkX2J5X2NlbnNlID0gcmVzcG9uc2UuZGF0YS5kYXRhLklzUG93ZXJlZEJ5Q2Vuc2UgPT09IHVuZGVmaW5lZCA/IF90aGlzMi5jaGF0X3dpZGdldC5pc19wb3dlcmVkX2J5X2NlbnNlIDogcmVzcG9uc2UuZGF0YS5kYXRhLklzUG93ZXJlZEJ5Q2Vuc2U7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJ1dHRvbl9hbGlnbm1lbnQgPSByZXNwb25zZS5kYXRhLmRhdGEuQm90U3R5bGluZzsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuYm90X2ljb24gPSByZXNwb25zZS5kYXRhLmRhdGEuQm90SW1hZ2VVcmw7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJ1dHRvbl92ZXJ0aWNhbF9zcGFjaW5nID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJ1dHRvblN0eWxpbmcudmVydGljYWw7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJ1dHRvbl9ob3Jpem9udGFsX3NwYWNpbmcgPSByZXNwb25zZS5kYXRhLmRhdGEuQnV0dG9uU3R5bGluZy5ob3Jpem9udGFsOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5ib3RfYmFja2dyb3VuZF9pbWFnZSA9IHJlc3BvbnNlLmRhdGEuZGF0YS5CZ0ltYWdlVXJsOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5oZWFkZXJfYmFja2dyb3VuZCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5IZWFkZXJUaGVtZTsKCiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MuZGF0YS5yZXNwb25zZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgdmFyIGlzX3Zpc2libGVfZ3JlZXRpbmdzID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdEdyZWV0aW5ncy5kYXRhLnJlc3BvbnNlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgcmV0dXJuIGl0ZW0udmlzaWJsZSAhPT0gdW5kZWZpbmVkID8gaXRlbS52aXNpYmxlIDogdHJ1ZTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGlmIChpc192aXNpYmxlX2dyZWV0aW5ncy5pbmNsdWRlcyh0cnVlKSkgewogICAgICAgICAgICBfdGhpczIuZ3JlZXRpbmdfYnV0dG9uc19wb3NpdGlvbiA9IHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MuZGF0YS5yZXNwb25zZXMubGVuZ3RoIC0gMTsKCiAgICAgICAgICAgIGlmIChCb29sZWFuKHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MuZGF0YS5yZXNwb25zZXNbX3RoaXMyLmdyZWV0aW5nX2J1dHRvbnNfcG9zaXRpb25dWyJidXR0b25zIl0pKSB7CiAgICAgICAgICAgICAgdmFyIHZpc2libGVfYnV0dG9ucyA9IHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MuZGF0YS5yZXNwb25zZXNbX3RoaXMyLmdyZWV0aW5nX2J1dHRvbnNfcG9zaXRpb25dWyJidXR0b25zIl07CiAgICAgICAgICAgICAgdmlzaWJsZV9idXR0b25zID0gdmlzaWJsZV9idXR0b25zLmZpbHRlcihmdW5jdGlvbiAoYnV0dG9uKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uWyJ2aXNpYmxlIl0gPT09IHRydWU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5kYXRhLkJvdEdyZWV0aW5ncy5kYXRhLnJlc3BvbnNlc1tfdGhpczIuZ3JlZXRpbmdfYnV0dG9uc19wb3NpdGlvbl1bImJ1dHRvbnMiXSA9IHZpc2libGVfYnV0dG9uczsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHZpc2libGVfZ3JlZXRpbmdzX21hcCA9IGlzX3Zpc2libGVfZ3JlZXRpbmdzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGFjYy5zZXQoZSwgKGFjYy5nZXQoZSkgfHwgMCkgKyAxKTsKICAgICAgICAgICAgfSwgbmV3IE1hcCgpKTsKICAgICAgICAgICAgdmFyIHNwbGljZV9pbmRleCA9IFtdOwoKICAgICAgICAgICAgaWYgKHZpc2libGVfZ3JlZXRpbmdzX21hcC5nZXQodHJ1ZSkgIT09IHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MuZGF0YS5yZXNwb25zZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MuZGF0YS5yZXNwb25zZXNbX3RoaXMyLmdyZWV0aW5nX2J1dHRvbnNfcG9zaXRpb25dLnZpc2libGUgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdEdyZWV0aW5ncy5kYXRhLnJlc3BvbnNlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGEuQm90R3JlZXRpbmdzLmRhdGEucmVzcG9uc2VzW2ldLnZpc2libGUgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLmRhdGEuQm90R3JlZXRpbmdzLmRhdGEucmVzcG9uc2VzW2kgLSAxIDwgMCA/IGkgOiBpIC0gMV1bImJ1dHRvbnMiXSA9IHZpc2libGVfYnV0dG9uczsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5ncmVldGluZ19idXR0b25zX3Bvc2l0aW9uID0gX3RoaXMyLmdyZWV0aW5nX2J1dHRvbnNfcG9zaXRpb24gLSAxIDwgMCA/IF90aGlzMi5ncmVldGluZ19idXR0b25zX3Bvc2l0aW9uIDogX3RoaXMyLmdyZWV0aW5nX2J1dHRvbnNfcG9zaXRpb24gLSAxOwogICAgICAgICAgICAgICAgICAgICAgc3BsaWNlX2luZGV4LnB1c2goaSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gcmVzcG9uc2UuZGF0YS5kYXRhLkJvdEdyZWV0aW5ncy5kYXRhLnJlc3BvbnNlcy5sZW5ndGggLSAxOyBfaSA+PSAwOyBfaS0tKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGEuQm90R3JlZXRpbmdzLmRhdGEucmVzcG9uc2VzW19pXS52aXNpYmxlID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgIF90aGlzMi5ncmVldGluZ19idXR0b25zX3Bvc2l0aW9uID0gX3RoaXMyLmdyZWV0aW5nX2J1dHRvbnNfcG9zaXRpb24gLSAxIDwgMCA/IF90aGlzMi5ncmVldGluZ19idXR0b25zX3Bvc2l0aW9uIDogX3RoaXMyLmdyZWV0aW5nX2J1dHRvbnNfcG9zaXRpb24gLSAxOwogICAgICAgICAgICAgICAgICAgIHNwbGljZV9pbmRleC5wdXNoKF9pKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHNwbGljZV9pbmRleC5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MuZGF0YS5yZXNwb25zZXMuc3BsaWNlKHNwbGljZV9pbmRleFtpbmRleF0sIDEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgX3RoaXMyLnB1c2hfbXNnKHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MsIHJlc3BvbnNlLmRhdGEuZGF0YS5Cb3RHcmVldGluZ3MuZGF0YS5yZXNwb25zZXMpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoX3RoaXMyLmlzX3JldGFpbF9ib3QpIHsKICAgICAgICAgICAgX3RoaXMyLmxvYWRfY2hhdGJvdF9pbnRlZ3JhdGlvbl9kZXRhaWxzKCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoX3RoaXMyLmNoYXRfd2lkZ2V0LmJ1dHRvbl9hbGlnbm1lbnQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJ1dHRvbl9hbGlnbm1lbnQgPSAiZmxleC1lbmQiOwogICAgICAgIH0KCiAgICAgICAgaWYgKF90aGlzMi5jaGF0X3dpZGdldC5ib3RfaWNvbiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuYm90X2ljb24gPSAiL2ltZy9Cb3RfaW1nLnBuZyI7CiAgICAgICAgfQoKICAgICAgICBfdGhpczIuJHNlc3Npb24uc2V0KCJDaGF0Qm90SW1hZ2VQYXJhbWV0ZXJzIiwgX3RoaXMyLmNoYXRfd2lkZ2V0KTsKCiAgICAgICAgdmFyIHN0eWxpbmdfdmFsdWUgPSByZXNwb25zZS5kYXRhLmRhdGEuSGVhZGVyU3R5bGluZy52YWx1ZTsKICAgICAgICB2YXIgdGVtcF9zdHJpbmcgPSAiIjsKCiAgICAgICAgaWYgKHN0eWxpbmdfdmFsdWUgPT09ICJsZWZ0IikgewogICAgICAgICAgdGVtcF9zdHJpbmcgPSAibWFyZ2luLWxlZnQ6IDA7bWFyZ2luLXJpZ2h0OiBhdXRvOyI7CiAgICAgICAgfSBlbHNlIGlmIChzdHlsaW5nX3ZhbHVlID09PSAicmlnaHQiKSB7CiAgICAgICAgICB0ZW1wX3N0cmluZyA9ICJtYXJnaW4tbGVmdDogYXV0bzttYXJnaW4tcmlnaHQ6IDA7IjsKICAgICAgICB9IGVsc2UgaWYgKHN0eWxpbmdfdmFsdWUgPT09ICJjZW50ZXIiKSB7CiAgICAgICAgICB0ZW1wX3N0cmluZyA9ICJtYXJnaW4tbGVmdDogYXV0bzttYXJnaW4tcmlnaHQ6IGF1dG87IjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGVtcF9zdHJpbmcgPSAibWFyZ2luLWxlZnQ6IGF1dG87bWFyZ2luLXJpZ2h0OiBhdXRvOyI7CiAgICAgICAgfQoKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuc3R5bGUgPSAibWFyZ2luLXRvcDogNXB4O2hlaWdodDozMHB4O3dpZHRoOmF1dG87bWF4LXdpZHRoOjEwMCUgIWltcG9ydGFudDsiICsgdGVtcF9zdHJpbmc7CiAgICAgIH0KICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmIChfdGhpczIuaXNfcmV0YWlsX2JvdCkgewogICAgICAgIF90aGlzMi5sb2FkX2NoYXRib3RfaW50ZWdyYXRpb25fZGV0YWlscygpOwogICAgICB9CgogICAgICBjb25zb2xlLmxvZyhlLnJlc3BvbnNlLmRhdGEpOwoKICAgICAgaWYgKGUucmVzcG9uc2UpIHsKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzMi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmxvZ28gPSAiL2ltZy9jZW5zZV9pbWFnZS5wbmciOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5zdHlsZSA9ICJtYXJnaW4tdG9wOiA1cHg7aGVpZ2h0OjMwcHg7d2lkdGg6NjBweDttYXJnaW4tbGVmdDogYXV0bzttYXJnaW4tcmlnaHQ6IGF1dG87IjsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuYm90X2ljb24gPSAiL2ltZy9Cb3RfaW1nLnBuZyI7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJ1dHRvbl92ZXJ0aWNhbF9zcGFjaW5nID0gIjUiOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5idXR0b25faG9yaXpvbnRhbF9zcGFjaW5nID0gIjMiOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5ib3RfYmFja2dyb3VuZF9pbWFnZSA9ICIiOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5oZWFkZXJfYmFja2dyb3VuZCA9ICIjZmZmZmZmIjsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuYnV0dG9uX3RoZW1lID0gIiMxZGFhZTEiOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5ib3RfdGhlbWUgPSAiIzI3MzY3OSI7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJ1dHRvbl9ib3JkZXJfdGhlbWUgPSAiIzI3MzY3OSI7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LnVzZXJfcmVzcG9uc2VfYmdfY29sb3IgPSAiIzI3MzY3OSI7CiAgICAgICAgX3RoaXMyLmNoYXRfd2lkZ2V0LmJvdF9yZXNwb25zZV9iZ19jb2xvciA9ICIjZmZmZmZmIjsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuZGVsaXZlcnlfbm90ZV9jb2xvciA9ICIjMjczNjc5IjsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuYm90X2ZvbnRfc3R5bGUgPSAiUm9ib3RvIjsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuYm90X2ZvbnRfY29sb3Jfc2VuZGVyID0gIiNmZmZmZmYiOwogICAgICAgIF90aGlzMi5jaGF0X3dpZGdldC5ib3RfZm9udF9jb2xvcl9yZWNlaXZlciA9ICIjMDAwMDAwIjsKICAgICAgICBfdGhpczIuY2hhdF93aWRnZXQuYm90X2ZvbnRfY29sb3JfYnV0dG9ucyA9ICIjZmZmZmZmIjsKCiAgICAgICAgX3RoaXMyLiRzZXNzaW9uLnNldCgiQ2hhdEJvdEltYWdlUGFyYW1ldGVycyIsIF90aGlzMi5jaGF0X3dpZGdldCk7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgbG9hZF9jaGF0Ym90X2ludGVncmF0aW9uX2RldGFpbHM6IGZ1bmN0aW9uIGxvYWRfY2hhdGJvdF9pbnRlZ3JhdGlvbl9kZXRhaWxzKCkgewogICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9pbnRlZ3JhdGlvbl9kZXRhaWxzKCksIHsKICAgICAgaXNfZ2V0OiB0cnVlLAogICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucwogICAgfSwgewogICAgICBoZWFkZXJzOiB7CiAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgfQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXMzLmFwaV9zdGF0dXNfY29kZS5EQVRBX0FWQUlMQUJMRS5NU0dfQ09ERSkgewogICAgICAgIF90aGlzMy5jaGF0Ym90X2ludGVncmF0aW9uX2RldGFpbHNfcmVzcG9uc2UocmVzcG9uc2UpOwogICAgICB9IGVsc2UgaWYgKF90aGlzMy5hcGlfc3RhdHVzX2NvZGUuRU1QVFlfREFUQS5NU0dfQ09ERSA9PSByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUpIHt9IGVsc2UgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSwKICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICB9KTsKICAgICAgfQogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgLy8gdGhpcy5zaG9waWZ5X3JldGFpbF9zaG9wX25hbWUgPSAiZWFydGhvbiI7CiAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgIF90aGlzMy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X2ludGVncmF0aW9uX2RldGFpbHMoKSwgewogICAgICAgICAgICBpc19nZXQ6IHRydWUsCiAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogX3RoaXMzLmNvbXBhbnluYW1lLAogICAgICAgICAgICBjb21wYW55X2lkOiBfdGhpczMuY29tcGFueWlkLAogICAgICAgICAgICBlbWFpbDogX3RoaXMzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiBfdGhpczMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IF90aGlzMy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucwogICAgICAgICAgfSwgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdChfdGhpczMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICB9CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczMuYXBpX3N0YXR1c19jb2RlLkRBVEFfQVZBSUxBQkxFLk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgX3RoaXMzLmNoYXRib3RfaW50ZWdyYXRpb25fZGV0YWlsc19yZXNwb25zZShyZXNwb25zZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMzLmFwaV9zdGF0dXNfY29kZS5FTVBUWV9EQVRBLk1TR19DT0RFID09IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSkge30gZWxzZSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0aXRsZTogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TRywKICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9LCAxMDAwKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBjaGF0Ym90X2ludGVncmF0aW9uX2RldGFpbHNfcmVzcG9uc2U6IGZ1bmN0aW9uIGNoYXRib3RfaW50ZWdyYXRpb25fZGV0YWlsc19yZXNwb25zZShyZXNwb25zZSkgewogICAgdGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9IHJlc3BvbnNlLmRhdGEuZGF0YS5yZXRhaWxfd2ViX2ZyYW1ld29yazsKICAgIHZhciB3ZWJmcmFtZXdvcmsgPSByZXNwb25zZS5kYXRhLmRhdGFbdGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayArICJfZGV0YWlscyJdOwogICAgdGhpcy5zaG93X2N1c3RvbV9jYXJ0ID0gdGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayAhPSBudWxsID8gdHJ1ZSA6IGZhbHNlOwoKICAgIGlmICh3ZWJmcmFtZXdvcmsgIT09IG51bGwgJiYgd2ViZnJhbWV3b3JrICE9PSB7fSkgewogICAgICB0aGlzLnJldGFpbF9zaG9wX2N1cnJlbmN5ID0gd2ViZnJhbWV3b3JrLmJhc2VfY3VycmVuY3kudmFsdWUgfHwgIlVTRCI7CiAgICAgIHRoaXMucmV0YWlsX29yZGVyX3JldHJlaXZhbF9vbmx5X2VtYWlsX3JlcXVpcmVkID0gd2ViZnJhbWV3b3JrLm9yZGVyX3JldHJpZXZhbF9vbmx5X2VtYWlsX3JlcXVpcmVkIHx8IGZhbHNlOwogICAgICB0aGlzLmNvbnRhY3RfaGVscF9lbWFpbCA9IHdlYmZyYW1ld29yay5jb250YWN0X2hlbHBfZW1haWw7CiAgICAgIHRoaXMucmV2aWV3X3Jlc3BvbnNlX21lc3NhZ2UgPSB3ZWJmcmFtZXdvcmsucmV2aWV3X3Jlc3BvbnNlX21lc3NhZ2U7CiAgICAgIHRoaXMucmV2aWV3X21lc3NhZ2VfZmlyc3QgPSB3ZWJmcmFtZXdvcmsucmV2aWV3X21lc3NhZ2VfZmlyc3Q7CiAgICAgIHRoaXMucmV2aWV3X21lc3NhZ2Vfc2Vjb25kID0gd2ViZnJhbWV3b3JrLnJldmlld19tZXNzYWdlX3NlY29uZDsKICAgICAgdGhpcy5kaXNwbGF5X3Byb2R1Y3RzX29uX2xhbmRpbmcgPSB3ZWJmcmFtZXdvcmsuZGlzcGxheV9wcm9kdWN0c19vbl9sYW5kaW5nOwogICAgICB0aGlzLmlzX2Rpc3BsYXlfYmFubmVyX29uX2xhbmRpbmcgPSB3ZWJmcmFtZXdvcmsuaXNfZGlzcGxheV9iYW5uZXJfb25fbGFuZGluZzsKCiAgICAgIGlmICh0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJzaG9waWZ5IikgewogICAgICAgIHRoaXMuc2hvcGlmeV9yZXRhaWxfc2hvcF9uYW1lID0gd2ViZnJhbWV3b3JrLnNob3BpZnlfc2hvcF9uYW1lOwogICAgICAgIHRoaXMuY3VzdG9tX3Byb2R1Y3RfYnV0dG9uX2tleSA9IHdlYmZyYW1ld29yay5jdXN0b21fcHJvZHVjdF9idXR0b25fa2V5ID09IHVuZGVmaW5lZCB8fCBudWxsID8gW10gOiB3ZWJmcmFtZXdvcmsuY3VzdG9tX3Byb2R1Y3RfYnV0dG9uX2tleTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNob3BfdXJsID0gd2ViZnJhbWV3b3JrW3RoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgKyAiX3Nob3BfdXJsIl07CiAgICAgIH0KICAgIH0gLy8gc2V0VGltZW91dCgoKSA9PiB7CgoKICAgIGlmICghdGhpcy5pc1ByZXZpZXdCb3QpIHsKICAgICAgdGhpcy5nZXRfdmlzaXRvcnNfY3VycmVudF9sb2NhdGlvbigpOwogICAgfSBlbHNlIGlmIChCb29sZWFuKHRoaXMuY3VycmVudF9wcmV2aWV3X2Jhbm5lcl9pZCkpIHsKICAgICAgdGhpcy5wcmV2aWV3X2Jhbm5lcigpOwogICAgfSAvLyB9LCAzMDAwKTsKCiAgfSwKICB1cGRhdGVfdmFyaWF0aW9uOiBmdW5jdGlvbiB1cGRhdGVfdmFyaWF0aW9uKGNoYXRfaWQsIHByb2R1Y3RfaW5kZXgsIHRpdGxlKSB7CiAgICBmb3IgKHZhciBpIGluIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnZhcmlhdGlvbnMpIHsKICAgICAgaWYgKHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnZhcmlhdGlvbnNbaV0udmFyaWFudF90aXRsZSA9PSB0aXRsZSkgewogICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLmltZ191cmwgPSB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtwcm9kdWN0X2luZGV4XS52YXJpYXRpb25zW2ldLmltZ191cmw7CgogICAgICAgIGlmICh0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICdiaWdjb21tZXJjZScpIHsKICAgICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnNrdSA9IHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnZhcmlhdGlvbnNbaV0uc2t1OwogICAgICAgIH0KCiAgICAgICAgdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbcHJvZHVjdF9pbmRleF0uaWQgPSB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtwcm9kdWN0X2luZGV4XS52YXJpYXRpb25zW2ldLmlkOwogICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnBlcm1hbGluayA9IHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnZhcmlhdGlvbnNbaV0ucGVybWFsaW5rOwogICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnByaWNlID0gdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbcHJvZHVjdF9pbmRleF0udmFyaWF0aW9uc1tpXS5wcmljZTsKICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtwcm9kdWN0X2luZGV4XS5yZWd1bGFyX3ByaWNlID0gdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbcHJvZHVjdF9pbmRleF0udmFyaWF0aW9uc1tpXS5yZWd1bGFyX3ByaWNlOwogICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnN0b2NrX3F1YW50aXR5ID0gdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbcHJvZHVjdF9pbmRleF0udmFyaWF0aW9uc1tpXS5zdG9ja19xdWFudGl0eTsKICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtwcm9kdWN0X2luZGV4XS5zdG9ja19zdGF0dXMgPSB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtwcm9kdWN0X2luZGV4XS52YXJpYXRpb25zW2ldLnN0b2NrX3N0YXR1czsKICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtwcm9kdWN0X2luZGV4XS52YXJpYW50X3RpdGxlID0gdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbcHJvZHVjdF9pbmRleF0udmFyaWF0aW9uc1tpXS52YXJpYW50X3RpdGxlOwogICAgICB9CiAgICB9IC8vIGNvbnN0IGZvdW5kID0gdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbcHJvZHVjdF9pbmRleF0udmFyaWF0aW9ucy5zb21lKGVsID0+IGVsLnZhcmlhbnRfdGl0bGUgPT0gIkRlZmF1bHQiKTsKICAgIC8vIGlmICghZm91bmQpIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W3Byb2R1Y3RfaW5kZXhdLnZhcmlhdGlvbnMucHVzaChkZWZhdWx0X3ZhbHVlcyk7CgogIH0sCiAgY3VzdG9tX2dyZWV0aW5nc19idXR0b21fYWxpZ25tZW50OiBmdW5jdGlvbiBjdXN0b21fZ3JlZXRpbmdzX2J1dHRvbV9hbGlnbm1lbnQoc2hvd19jdXN0b21fY2FydCkgewogICAgaWYgKHNob3dfY3VzdG9tX2NhcnQpIHsKICAgICAgcmV0dXJuICJjb2wtc20tMTAgcHgtMCI7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gImNvbC1zbS0xMiBweC0wIjsKICAgIH0KICB9LAogIGdldF92aXNpdG9yc19jdXJyZW50X2xvY2F0aW9uOiBmdW5jdGlvbiBnZXRfdmlzaXRvcnNfY3VycmVudF9sb2NhdGlvbigpIHsKICAgIGlmICh0aGlzLmlzX2Rpc3BsYXlfYmFubmVyX29uX2xhbmRpbmcgPT09IHRydWUpIHsKICAgICAgdmFyIGN1dG9mZiA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBkYXRlX3RpbWUgPSBtb21lbnQudXRjKGN1dG9mZiwgWyJZWVlZLU1NLUREIEhIOm1tOnNzIl0pLmZvcm1hdCgiWVlZWS1NTS1ERCBISDptbTpzcyIpOwogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICAkLmdldEpTT04odm0udmlzaXRvcnNfY3VycmVudF9sb2NhdGlvbl91cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgaWYgKGRhdGEpIHsKICAgICAgICAgIHZtLnZpc2l0b3JzX2N1cnJlbnRfbG9jYXRpb24gPSB7CiAgICAgICAgICAgIGlwX2FkZHJlc3M6IGRhdGEuaXBfYWRkcmVzcywKICAgICAgICAgICAgY2l0eTogZGF0YS5jaXR5LAogICAgICAgICAgICBjaXR5X2dlb25hbWVfaWQ6IGRhdGEuY2l0eV9nZW9uYW1lX2lkLAogICAgICAgICAgICByZWdpb246IGRhdGEucmVnaW9uLAogICAgICAgICAgICByZWdpb25faXNvX2NvZGU6IGRhdGEucmVnaW9uX2lzb19jb2RlLAogICAgICAgICAgICByZWdpb25fZ2VvbmFtZV9pZDogZGF0YS5yZWdpb25fZ2VvbmFtZV9pZCwKICAgICAgICAgICAgcG9zdGFsX2NvZGU6IGRhdGEucG9zdGFsX2NvZGUsCiAgICAgICAgICAgIGNvdW50cnk6IGRhdGEuY291bnRyeSwKICAgICAgICAgICAgY291bnRyeV9jb2RlOiBkYXRhLmNvdW50cnlfY29kZSwKICAgICAgICAgICAgY291bnRyeV9nZW9uYW1lX2lkOiBkYXRhLmNvdW50cnlfZ2VvbmFtZV9pZCwKICAgICAgICAgICAgY291bnRyeV9pc19ldTogZGF0YS5jb3VudHJ5X2lzX2V1LAogICAgICAgICAgICBjb250aW5lbnQ6IGRhdGEuY29udGluZW50LAogICAgICAgICAgICBjb250aW5lbnRfY29kZTogZGF0YS5jb250aW5lbnRfY29kZSwKICAgICAgICAgICAgY29udGluZW50X2dlb25hbWVfaWQ6IGRhdGEuY29udGluZW50X2dlb25hbWVfaWQsCiAgICAgICAgICAgIGxvbmdpdHVkZTogZGF0YS5sb25naXR1ZGUsCiAgICAgICAgICAgIGxhdGl0dWRlOiBkYXRhLmxhdGl0dWRlLAogICAgICAgICAgICBzZWN1cml0eTogZGF0YS5zZWN1cml0eSwKICAgICAgICAgICAgZGF0ZV90aW1lOiBkYXRlX3RpbWUKICAgICAgICAgIH07CiAgICAgICAgICB2bS5pc19kaXNwbGF5X2Jhbm5lcigpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2bS5pc19kaXNwbGF5X3Byb2R1Y3RzKCk7CiAgICAgICAgfQogICAgICB9KS5lcnJvcihmdW5jdGlvbiAoKSB7CiAgICAgICAgdm0uaXNfZGlzcGxheV9wcm9kdWN0cygpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuaXNfZGlzcGxheV9wcm9kdWN0cygpOwogICAgfQogIH0sCiAgcHJldmlld19iYW5uZXI6IGZ1bmN0aW9uIHByZXZpZXdfYmFubmVyKCkgewogICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgYXhpb3MucG9zdChhcGlfY2FsbHMuYmFubmVyX3RlbXBsYXRlKCksIHsKICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgIHN1YnNjcmlwdGlvbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgaXNfcHJldmlld19iYW5uZXI6IHRydWUsCiAgICAgIGJhbm5lcl9pZDogdGhpcy5jdXJyZW50X3ByZXZpZXdfYmFubmVyX2lkCiAgICB9LCB7CiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICB9CiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczQuYXBpX3N0YXR1c19jb2RlLkRBVEFfQVZBSUxBQkxFX01PREVMUy5NU0dfQ09ERSkgewogICAgICAgIGlmIChCb29sZWFuKHJlc3BvbnNlLmRhdGEuZGF0YS5yZXNwb25zZXMubGVuZ3RoID4gMCkpIHsKICAgICAgICAgIF90aGlzNC5yZXNwb25zZV9oYW5kbGluZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgIF90aGlzNC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBpc19kaXNwbGF5X2Jhbm5lcjogZnVuY3Rpb24gaXNfZGlzcGxheV9iYW5uZXIoKSB7CiAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICBheGlvcy5nZXQoYXBpX2NhbGxzLmJhbm5lcl90ZW1wbGF0ZSgpLCB7CiAgICAgIHBhcmFtczogewogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIHRva2VuOiB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICBpc19kaXNwbGF5X2Jhbm5lcjogdHJ1ZSwKICAgICAgICB2aXNpdG9yc19jdXJyZW50X2xvY2F0aW9uOiB0aGlzLnZpc2l0b3JzX2N1cnJlbnRfbG9jYXRpb24KICAgICAgfQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXM1LmFwaV9zdGF0dXNfY29kZS5EQVRBX0FWQUlMQUJMRV9NT0RFTFMuTVNHX0NPREUpIHsKICAgICAgICBpZiAoQm9vbGVhbihyZXNwb25zZS5kYXRhLmRhdGEucmVzcG9uc2VzLmxlbmd0aCA+IDApKSB7CiAgICAgICAgICBfdGhpczUucmVzcG9uc2VfaGFuZGxpbmcocmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBfdGhpczUuaXNfZGlzcGxheV9wcm9kdWN0cygpOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgX3RoaXM1LmlzX2Rpc3BsYXlfcHJvZHVjdHMoKTsKCiAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgIF90aGlzNS4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBpc19kaXNwbGF5X3Byb2R1Y3RzOiBmdW5jdGlvbiBpc19kaXNwbGF5X3Byb2R1Y3RzKCkgewogICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgaWYgKHRoaXMuZGlzcGxheV9wcm9kdWN0c19vbl9sYW5kaW5nID09PSB0cnVlKSB7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmRpc3BsYXlfbGFuZGluZ19wcm9kdWN0cygpLCB7CiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBzb3VyY2U6ICJXZWIiCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXM2LmFwaV9zdGF0dXNfY29kZS5EQVRBX0FWQUlMQUJMRV9NT0RFTFMuTVNHX0NPREUpIHsKICAgICAgICAgIHZhciBwcm9kdWN0c19jb3VudCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5yZXNwb25zZXNbMF0ucHJvZHVjdHMucHJvZHVjdHNfbGlzdC5sZW5ndGg7CgogICAgICAgICAgaWYgKHByb2R1Y3RzX2NvdW50ID4gMCkgewogICAgICAgICAgICBfdGhpczYucmVzcG9uc2VfaGFuZGxpbmcocmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXM2LmlzX3Jldmlld19yYXRpbmcoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHRpdGxlOiByZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUsCiAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczYuaXNfcmV2aWV3X3JhdGluZygpOwoKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzNi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5pc19yZXZpZXdfcmF0aW5nKCk7CiAgICB9CiAgfSwKICBpc19yZXZpZXdfcmF0aW5nOiBmdW5jdGlvbiBpc19yZXZpZXdfcmF0aW5nKCkgewogICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgaWYgKEJvb2xlYW4odGhpcy4kc2Vzc2lvbi5nZXQoInNob3BpZnlfY3VzdG9tZXJfaWQiKSkgfHwgQm9vbGVhbih0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIpKSkgewogICAgICB2YXIgc3RyaW5naWZpZWRfY3VzdG9tZXJfcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBjdXN0b21lcklkOiB0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl9pZCIpLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIpCiAgICAgIH0pOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X3Jlc3BvbnNlX2NlbnNlKCksIHsKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIHRva2VuOiB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICB1c2VybmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgY2hhdDogIi9yZXRyaWV2ZV9jdXN0b21lcl9vcmRlcnMiLmNvbmNhdChzdHJpbmdpZmllZF9jdXN0b21lcl9wYXlsb2FkKSwKICAgICAgICByb2xlOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSwKICAgICAgICByZWZyZXNoZWRfb3JfY2xvc2VkOiBmYWxzZQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmIChCb29sZWFuKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbSkpIHsKICAgICAgICAgIGlmIChCb29sZWFuKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbS5vcmRlcnNfbGlzdC5sZW5ndGggPiAwKSkgewogICAgICAgICAgICBfdGhpczcuY2FsbF9yZXZpZXdfcmF0aW5nKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbS5vcmRlcnNfbGlzdCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAogIGNhbGxfcmV2aWV3X3JhdGluZzogZnVuY3Rpb24gY2FsbF9yZXZpZXdfcmF0aW5nKGRhdGEpIHsKICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgIHZhciBmdWxmaWxsZWRfb3JkZXJzID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGZ1bGZpbGxlZF9vcmRlcikgewogICAgICByZXR1cm4gZnVsZmlsbGVkX29yZGVyLmZ1bGZpbGxtZW50X3N0YXR1cyA9PT0gImZ1bGZpbGxlZCI7CiAgICB9KTsKICAgIHZhciBzb3J0ZWRfZnVsZmlsbGVkX29yZGVycyA9IGZ1bGZpbGxlZF9vcmRlcnMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgIHJldHVybiBpdGVtLmxpbmVfaXRlbXMubWFwKGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgcmV0dXJuIHByb2R1Y3Q7CiAgICAgIH0pOwogICAgfSk7CiAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3Jldmlld19yYXRpbmcoKSwgewogICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgIHdlYl9mcmFtZXdvcms6IHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmssCiAgICAgIGlzX2dldF9yZXZpZXdlZF9wcm9kdWN0X2lkOiB0cnVlLAogICAgICByZXZpZXdfcmF0aW5nX2N1c3RvbWVyX2lkOiB0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl9pZCIpLAogICAgICByZXZpZXdfcmF0aW5nX2N1c3RvbWVyX2VtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIpCiAgICB9LCB7CiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICB9CiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBpZiAoX3RoaXM4LmFwaV9zdGF0dXNfY29kZS5EQVRBX0FWQUlMQUJMRS5NU0dfQ09ERSA9PT0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZGF0YS5pc19yZXZpZXcgPT09IHRydWUpIHsKICAgICAgICAgIHZhciByZXZpZXdlZF9wcm9kdWN0X2RldGFpbHMgPSBbXTsKICAgICAgICAgIHZhciBub3RfcmV2aWV3ZWRfcHJvZHVjdF9kZXRhaWxzID0gW107CiAgICAgICAgICB2YXIgcmV2aWV3ZWRfcHJvZHVjdF9pZF9saXN0ID0gcmVzcG9uc2UuZGF0YS5kYXRhLnByb2R1Y3RfaWRfbGlzdDsKCiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvcnRlZF9mdWxmaWxsZWRfb3JkZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc29ydGVkX2Z1bGZpbGxlZF9vcmRlcnNbaV0ubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICBpZiAocmV2aWV3ZWRfcHJvZHVjdF9pZF9saXN0LmluY2x1ZGVzKHNvcnRlZF9mdWxmaWxsZWRfb3JkZXJzW2ldW2pdLnByb2R1Y3RfaWQpKSB7CiAgICAgICAgICAgICAgICByZXZpZXdlZF9wcm9kdWN0X2RldGFpbHMucHVzaChzb3J0ZWRfZnVsZmlsbGVkX29yZGVyc1tpXVtqXSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5vdF9yZXZpZXdlZF9wcm9kdWN0X2RldGFpbHMucHVzaChzb3J0ZWRfZnVsZmlsbGVkX29yZGVyc1tpXVtqXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG5vdF9yZXZpZXdlZF9wcm9kdWN0X2RldGFpbHMubGVuZ3RoID4gMCAmJiBCb29sZWFuKF90aGlzOC5yZXZpZXdfbWVzc2FnZV9maXJzdCkgPT09IHRydWUgJiYgQm9vbGVhbihfdGhpczgucmV2aWV3X21lc3NhZ2Vfc2Vjb25kKSA9PT0gdHJ1ZSAmJiBCb29sZWFuKF90aGlzOC5yZXZpZXdfcmVzcG9uc2VfbWVzc2FnZSkgPT09IHRydWUpIHsKICAgICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMucHJvZHVjdF9yZXZpZXdfcmF0aW5nKCksIHsKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IF90aGlzOC5jb21wYW55bmFtZSwKICAgICAgICAgICAgICBjb21wYW55X2lkOiBfdGhpczguY29tcGFueWlkLAogICAgICAgICAgICAgIGVtYWlsOiBfdGhpczguJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXM4LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgdG9rZW46IF90aGlzOC5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgICAgICAgICAgdXNlcm5hbWU6IF90aGlzOC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIHdlYl9mcmFtZXdvcms6IF90aGlzOC5yZXRhaWxfd2ViX2ZyYW1ld29yaywKICAgICAgICAgICAgICBpc19nZXRfcHJvZHVjdF9pbWFnZTogdHJ1ZSwKICAgICAgICAgICAgICBwcm9kdWN0X2lkOiBub3RfcmV2aWV3ZWRfcHJvZHVjdF9kZXRhaWxzWzBdLnByb2R1Y3RfaWQKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXM4LiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXM4LmFwaV9zdGF0dXNfY29kZS5JTUFHRV9SRUNFSVZFRF9TVUNDRVNTRlVMTFkuTVNHX0NPREUpIHsKICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0X3Jldmlld19pbWdfdXJsID0gcmVzcG9uc2UuZGF0YS5kYXRhLmltYWdlX3NyYzsKICAgICAgICAgICAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgICAgICAgICAgIGlzX3Jldmlld19yYXRpbmdfcHJvZHVjdDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgbm90X3Jldmlld2VkX3Byb2R1Y3RfZGV0YWlsczogbm90X3Jldmlld2VkX3Byb2R1Y3RfZGV0YWlsc1swXSwKICAgICAgICAgICAgICAgICAgcmV2aWV3X21lc3NhZ2VfZmlyc3Q6IF90aGlzOC5yZXZpZXdfbWVzc2FnZV9maXJzdCwKICAgICAgICAgICAgICAgICAgcmV2aWV3X21lc3NhZ2Vfc2Vjb25kOiBfdGhpczgucmV2aWV3X21lc3NhZ2Vfc2Vjb25kLAogICAgICAgICAgICAgICAgICBwcm9kdWN0X3Jldmlld19pbWdfdXJsOiBwcm9kdWN0X3Jldmlld19pbWdfdXJsLAogICAgICAgICAgICAgICAgICBwcm9kdWN0X3JhdGluZzogbnVsbCwKICAgICAgICAgICAgICAgICAgcHJvZHVjdF9yZXZpZXc6ICIiLAogICAgICAgICAgICAgICAgICB0aW1lOiBfdGhpczguZ2VuZXJhdGVfdGltZSgpCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIF90aGlzOC5jaGF0LnB1c2gobXNnKTsKCiAgICAgICAgICAgICAgICBfdGhpczgudXBkYXRlX3Njcm9sbGJhcigidXB0b19lbmQiLCAicmVzcG9uc2UiKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXM4LmFwaV9zdGF0dXNfY29kZS5JTUFHRV9OT1RfRk9VTkQuTVNHX0NPREUpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0cpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSwKICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICB9KTsKICAgICAgfQogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgdG9hc3RyLmVycm9yKCJTb21lIEVycm9yIE9jY3VycmVkLiIpOwoKICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgX3RoaXM4LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICB9CiAgICB9KTsKICB9LAogIHN1Ym1pdF9yZXZpZXdfcmF0aW5nOiBmdW5jdGlvbiBzdWJtaXRfcmV2aWV3X3JhdGluZyhpbmRleCkgewogICAgdmFyIF90aGlzOSA9IHRoaXM7CgogICAgaWYgKEJvb2xlYW4odGhpcy5jaGF0W2luZGV4XS5wcm9kdWN0X3JhdGluZykgPT09IGZhbHNlKSB7CiAgICAgIHN3YWwoewogICAgICAgIHRleHQ6ICJQbGVhc2UgZ2l2ZSByYXRpbmciLAogICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICB0aW1lcjogNTAwMAogICAgICB9KTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0ucHJvZHVjdF9yZXZpZXcpID09PSBmYWxzZSkgewogICAgICBzd2FsKHsKICAgICAgICB0ZXh0OiAiUGxlYXNlIHdyaXRlIHJldmlldyIsCiAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsCiAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgIHRpbWVyOiA1MDAwCiAgICAgIH0pOwogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIHByb2R1Y3RfZGV0YWlscyA9IHsKICAgICAgcHJvZHVjdF9pZDogdGhpcy5jaGF0W2luZGV4XS5ub3RfcmV2aWV3ZWRfcHJvZHVjdF9kZXRhaWxzLnByb2R1Y3RfaWQsCiAgICAgIG5hbWU6IHRoaXMuY2hhdFtpbmRleF0ubm90X3Jldmlld2VkX3Byb2R1Y3RfZGV0YWlscy5uYW1lLAogICAgICBpbWFnZV9zcmM6IHRoaXMuY2hhdFtpbmRleF0ucHJvZHVjdF9yZXZpZXdfaW1nX3VybCwKICAgICAgcHJpY2U6IHRoaXMuY2hhdFtpbmRleF0ubm90X3Jldmlld2VkX3Byb2R1Y3RfZGV0YWlscy5wcmljZSwKICAgICAgcXVhbnRpdHk6IHRoaXMuY2hhdFtpbmRleF0ubm90X3Jldmlld2VkX3Byb2R1Y3RfZGV0YWlscy5xdWFudGl0eSwKICAgICAgdmFyaWFudF9pZDogdGhpcy5jaGF0W2luZGV4XS5ub3RfcmV2aWV3ZWRfcHJvZHVjdF9kZXRhaWxzLnZhcmlhbnRfaWQKICAgIH07CgogICAgaWYgKHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gIm1hZ2VudG8iKSB7CiAgICAgIHByb2R1Y3RfZGV0YWlscy52YXJpYW50X2lkID0gdGhpcy5jaGF0W2luZGV4XS5ub3RfcmV2aWV3ZWRfcHJvZHVjdF9kZXRhaWxzLnNrdTsKICAgIH0KCiAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5wcm9kdWN0X3Jldmlld19yYXRpbmcoKSwgewogICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgIGlzX3NhdmVfcmV2aWV3X3JhdGluZzogdHJ1ZSwKICAgICAgcmV2aWV3X3JhdGluZ19jdXN0b21lcl9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoInNob3BpZnlfY3VzdG9tZXJfaWQiKSwKICAgICAgcmV2aWV3X3JhdGluZ19jdXN0b21lcl9lbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iKSwKICAgICAgcHJvZHVjdF9yYXRpbmc6IHRoaXMuY2hhdFtpbmRleF0ucHJvZHVjdF9yYXRpbmcsCiAgICAgIHByb2R1Y3RfcmV2aWV3OiB0aGlzLmNoYXRbaW5kZXhdLnByb2R1Y3RfcmV2aWV3LAogICAgICBwcm9kdWN0X2RldGFpbHM6IHByb2R1Y3RfZGV0YWlscwogICAgfSwgewogICAgICBoZWFkZXJzOiB7CiAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgfQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXM5LmFwaV9zdGF0dXNfY29kZS5SRVZJRVdfU0FWRURfU1VDQ0VTU0ZVTExZLk1TR19DT0RFKSB7CiAgICAgICAgX3RoaXM5LmNoYXRbaW5kZXhdLmlzX3Jldmlld19yYXRpbmdfcHJvZHVjdCA9IGZhbHNlOwogICAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgICByZWNlaXZlZDogX3RoaXM5LnJldmlld19yZXNwb25zZV9tZXNzYWdlLAogICAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgICByZWNlaXZpbmc6IHRydWUsCiAgICAgICAgICB0aW1lOiBfdGhpczkuZ2VuZXJhdGVfdGltZSgpCiAgICAgICAgfTsKCiAgICAgICAgX3RoaXM5LmNoYXQucHVzaChtc2cpOwoKICAgICAgICBfdGhpczkudXBkYXRlX3Njcm9sbGJhcigidXB0b19lbmQiLCAicmVzcG9uc2UiKTsKCiAgICAgICAgc3dhbCh7CiAgICAgICAgICB0ZXh0OiBfdGhpczkucmV2aWV3X3Jlc3BvbnNlX21lc3NhZ2UsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHRpbWVyOiA1MDAwCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczkuYXBpX3N0YXR1c19jb2RlLlJFVklFV19OT1RfU0FWRUQuTVNHX0NPREUpIHsKICAgICAgICBzd2FsKHsKICAgICAgICAgIHRleHQ6ICJTb21lIEVycm9yIE9jY3VycmVkLiIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0aW1lcjogNTAwMAogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSwKICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICB9KTsKICAgICAgfQogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgX3RoaXM5LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICB9CiAgICB9KTsKICB9LAogIGNsb3NlY2FydDogZnVuY3Rpb24gY2xvc2VjYXJ0KGNsb3NlX2NhcnQpIHsKICAgIHRoaXMuaXNfY2Vuc2VfY2FydCA9IGNsb3NlX2NhcnQ7CiAgfSwKICBjYXJ0X2NvbW11bmljYXRpb246IGZ1bmN0aW9uIGNhcnRfY29tbXVuaWNhdGlvbihjYXJ0X2RhdGEpIHsKICAgIHRoaXMuYWRkdG9DYXJ0ZGF0YSA9IFtdOwogICAgdGhpcy50b3RhbF9wcm9kdWN0c19xdHkgPSAwOwoKICAgIGZvciAodmFyIGkgaW4gY2FydF9kYXRhKSB7CiAgICAgIHRoaXMuYWRkdG9DYXJ0ZGF0YS5wdXNoKGNhcnRfZGF0YVtpXSk7CiAgICB9CgogICAgZm9yICh2YXIgaiBpbiB0aGlzLmFkZHRvQ2FydGRhdGEpIHsKICAgICAgdGhpcy50b3RhbF9wcm9kdWN0c19xdHkgPSB0aGlzLnRvdGFsX3Byb2R1Y3RzX3F0eSArIHRoaXMuYWRkdG9DYXJ0ZGF0YVtqXS5vcmRlcl9xdHk7CiAgICB9CiAgfSwKICB1cGRhdGVfcXVhbnRpdHk6IGZ1bmN0aW9uIHVwZGF0ZV9xdWFudGl0eShmdW5jLCBjaGF0X2lkLCBpbmRleCwgcHJvZHVjdCkgewogICAgdmFyIHZtID0gdGhpczsKICAgIHRoaXMub3Zlcl9xdHlfd2FybmluZyA9IGZhbHNlOwogICAgdmFyIGJ1eSA9IHBhcnNlSW50KHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W2luZGV4XS5idXlfcXR5KTsKICAgIHZhciBvcmRlciA9IHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W2luZGV4XS5vcmRlcl9xdHk7CiAgICB2YXIgc3RvY2sgPSB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtpbmRleF0uc3RvY2tfcXVhbnRpdHk7CgogICAgaWYgKHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT09ICJiaWdjb21tZXJjZSIpIHsKICAgICAgaWYgKHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W2luZGV4XS5zdG9ja19zdGF0dXMgPT09ICJpbnN0b2NrIiAmJiB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtpbmRleF0uc3RvY2tfcXVhbnRpdHkgPT09IDApIHsKICAgICAgICBzdG9jayA9IG51bGw7CiAgICAgIH0KICAgIH0KCiAgICBpZiAodGhpcy5hZGR0b0NhcnRkYXRhLmxlbmd0aCAhPT0gMCAmJiBzdG9jayAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5hZGR0b0NhcnRkYXRhKSB7CiAgICAgICAgaWYgKHRoaXMuYWRkdG9DYXJ0ZGF0YVtpXS5pZCA9PSBwcm9kdWN0LmlkKSB7CiAgICAgICAgICB2YXIgY2FydF9vcmRlcl9xdHkgPSB0aGlzLmFkZHRvQ2FydGRhdGFbaV0ub3JkZXJfcXR5OwogICAgICAgICAgc3RvY2sgPSBzdG9jayAtIGNhcnRfb3JkZXJfcXR5OwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHZhciB0b3RhbCA9IGJ1eSArIG9yZGVyOwoKICAgIGlmIChmdW5jID09PSAiKyIpIHsKICAgICAgdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbaW5kZXhdLm9yZGVyX3F0eSA9IDE7CgogICAgICBpZiAodG90YWwgPD0gc3RvY2sgfHwgc3RvY2sgPT0gbnVsbCAmJiAhaXNOYU4odG90YWwpKSB7CiAgICAgICAgdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbaW5kZXhdLmJ1eV9xdHkgKz0gMTsKICAgICAgICB2bS4kc2V0KHZtLmNoYXQsIGNoYXRfaWQsIHZtLmNoYXRbY2hhdF9pZF0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W2luZGV4XS5vcmRlcl9xdHkgPSAyOwoKICAgICAgICBpZiAoc3RvY2sgPT09IDApIHsKICAgICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W2luZGV4XS5idXlfcXR5ID0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbaW5kZXhdLmJ1eV9xdHkgPSBzdG9jazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAoZnVuYyA9PT0gIi0iKSB7CiAgICAgIGlmIChidXkgPiAxICYmICFpc05hTih0b3RhbCkpIHsKICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtpbmRleF0ub3JkZXJfcXR5ID0gMTsKICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtpbmRleF0uYnV5X3F0eSAtPSAxOwogICAgICAgIHZtLiRzZXQodm0uY2hhdCwgY2hhdF9pZCwgdm0uY2hhdFtjaGF0X2lkXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbaW5kZXhdLmJ1eV9xdHkgPSAxOwogICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W2luZGV4XS5vcmRlcl9xdHkgPSAxOwogICAgICB9CiAgICB9CgogICAgaWYgKGZ1bmMgPT09ICJtYW51YWwiKSB7CiAgICAgIHZhciBxdWFudGl0eSA9IE1hdGguYWJzKHBhcnNlSW50KHByb2R1Y3QuYnV5X3F0eSkpOwoKICAgICAgaWYgKCFpc05hTihxdWFudGl0eSkpIHsKICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtpbmRleF0ub3JkZXJfcXR5ID0gMTsKCiAgICAgICAgaWYgKHF1YW50aXR5KSB7CiAgICAgICAgICBpZiAocXVhbnRpdHkgPD0gc3RvY2sgfHwgc3RvY2sgPT0gbnVsbCkgewogICAgICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtpbmRleF0uYnV5X3F0eSA9IHF1YW50aXR5OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbaW5kZXhdLm9yZGVyX3F0eSA9IDI7CgogICAgICAgICAgICBpZiAoc3RvY2sgPT09IDApIHsKICAgICAgICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtpbmRleF0uYnV5X3F0eSA9IDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5jaGF0W2NoYXRfaWRdLnByb2R1Y3RzX2xpc3RbaW5kZXhdLmJ1eV9xdHkgPSBzdG9jazsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHZtLiRzZXQodm0uY2hhdCwgY2hhdF9pZCwgdm0uY2hhdFtjaGF0X2lkXSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGlzTmFOKHRvdGFsKSkgewogICAgICAgIHRoaXMuY2hhdFtjaGF0X2lkXS5wcm9kdWN0c19saXN0W2luZGV4XS5idXlfcXR5ID0gMTsKICAgICAgICB0aGlzLmNoYXRbY2hhdF9pZF0ucHJvZHVjdHNfbGlzdFtpbmRleF0ub3JkZXJfcXR5ID0gMTsKICAgICAgICB2bS4kc2V0KHZtLmNoYXQsIGNoYXRfaWQsIHZtLmNoYXRbY2hhdF9pZF0pOwogICAgICB9CiAgICB9CiAgfSwKICBhZGRwcm9kdWN0OiBmdW5jdGlvbiBhZGRwcm9kdWN0KHByb2R1Y3QpIHsKICAgIHRoaXMudG90YWxfcHJvZHVjdHNfcXR5ID0gMDsKICAgIHRoaXMub3Zlcl9xdHlfd2FybmluZyA9IGZhbHNlOwogICAgdmFyIGF1ZGlvID0gbmV3IEF1ZGlvKHNvdW5kKTsKICAgIGF1ZGlvLnBsYXkoKTsKICAgIHZhciBjYXJ0ID0gJCgiI2NlbnNlLWNhcnQtYnRuIik7CiAgICB2YXIgY2FydF9xdHkgPSAkKCIjY2FydC1xdHktbnVtIik7CiAgICB2YXIgY2FydF9pbWcgPSAkKCIjY2FydC1pbWciKTsKCiAgICBpZiAodGhpcy5hZGR0b0NhcnRkYXRhLmxlbmd0aCAhPSAwICYmIHByb2R1Y3QuYnV5X3F0eSAhPT0gIiIpIHsKICAgICAgdmFyIGNoZWNrID0gZmFsc2U7CgogICAgICBmb3IgKHZhciBpIGluIHRoaXMuYWRkdG9DYXJ0ZGF0YSkgewogICAgICAgIGlmICh0aGlzLmFkZHRvQ2FydGRhdGFbaV0uaWQgPT0gcHJvZHVjdC5pZCkgewogICAgICAgICAgY2hlY2sgPSB0cnVlOwogICAgICAgICAgdmFyIGJ1eSA9IHByb2R1Y3QuYnV5X3F0eSArIHRoaXMuYWRkdG9DYXJ0ZGF0YVtpXS5vcmRlcl9xdHk7CgogICAgICAgICAgaWYgKHByb2R1Y3Quc3RvY2tfcXVhbnRpdHkgPiB0aGlzLmFkZHRvQ2FydGRhdGFbaV0ub3JkZXJfcXR5ICYmIGJ1eSA8PSBwcm9kdWN0LnN0b2NrX3F1YW50aXR5KSB7CiAgICAgICAgICAgIHRoaXMuYWRkdG9DYXJ0ZGF0YVtpXS5vcmRlcl9xdHkgPSBidXk7CiAgICAgICAgICAgIHByb2R1Y3Qub3JkZXJfcXR5ID0gMTsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgY2FydF9xdHkuYWRkQ2xhc3MoImNhcnQtcXR5Iik7CiAgICAgICAgICAgICAgY2FydF9pbWcuYWRkQ2xhc3MoImNhcnQtaW1nIik7CiAgICAgICAgICAgICAgY2FydC5hZGRDbGFzcygic2hha2UiKTsKICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGNhcnRfcXR5LnJlbW92ZUNsYXNzKCJjYXJ0LXF0eSIpOwogICAgICAgICAgICAgICAgY2FydF9pbWcucmVtb3ZlQ2xhc3MoImNhcnQtaW1nIik7CiAgICAgICAgICAgICAgICBjYXJ0LnJlbW92ZUNsYXNzKCJzaGFrZSIpOwogICAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgfSBlbHNlIGlmIChwcm9kdWN0LnN0b2NrX3F1YW50aXR5ID09IG51bGwgfHwgcHJvZHVjdC5zdG9ja19xdWFudGl0eSA9PSAwICYmIHByb2R1Y3Quc3RvY2tfc3RhdHVzID09PSAiaW5zdG9jayIpIHsKICAgICAgICAgICAgdGhpcy5hZGR0b0NhcnRkYXRhW2ldLm9yZGVyX3F0eSA9IGJ1eTsKICAgICAgICAgICAgcHJvZHVjdC5vcmRlcl9xdHkgPSAxOwogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBjYXJ0X3F0eS5hZGRDbGFzcygiY2FydC1xdHkiKTsKICAgICAgICAgICAgICBjYXJ0X2ltZy5hZGRDbGFzcygiY2FydC1pbWciKTsKICAgICAgICAgICAgICBjYXJ0LmFkZENsYXNzKCJzaGFrZSIpOwogICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgY2FydF9xdHkucmVtb3ZlQ2xhc3MoImNhcnQtcXR5Iik7CiAgICAgICAgICAgICAgICBjYXJ0X2ltZy5yZW1vdmVDbGFzcygiY2FydC1pbWciKTsKICAgICAgICAgICAgICAgIGNhcnQucmVtb3ZlQ2xhc3MoInNoYWtlIik7CiAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwcm9kdWN0Lm9yZGVyX3F0eSA9IDI7CiAgICAgICAgICAgIHZhciByZXMgPSBwcm9kdWN0LnN0b2NrX3F1YW50aXR5IC0gdGhpcy5hZGR0b0NhcnRkYXRhW2ldLm9yZGVyX3F0eTsKICAgICAgICAgICAgcHJvZHVjdC5idXlfcXR5ID0gcmVzID09PSAwID8gMSA6IHJlczsKICAgICAgICAgICAgdGhpcy5vdmVyX3F0eV93YXJuaW5nID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChjaGVjayAhPSB0cnVlICYmIChwcm9kdWN0LmJ1eV9xdHkgPD0gcHJvZHVjdC5zdG9ja19xdWFudGl0eSB8fCBwcm9kdWN0LnN0b2NrX3F1YW50aXR5ID09IG51bGwgfHwgcHJvZHVjdC5zdG9ja19xdWFudGl0eSA9PSAwICYmIHByb2R1Y3Quc3RvY2tfc3RhdHVzID09PSAiaW5zdG9jayIpKSB7CiAgICAgICAgdGhpcy5hZGR0b0NhcnRkYXRhLnB1c2goewogICAgICAgICAgaWQ6IHByb2R1Y3QuaWQsCiAgICAgICAgICBpbWdfdXJsOiBwcm9kdWN0LmltZ191cmwsCiAgICAgICAgICBwcmljZTogcHJvZHVjdC5wcmljZSwKICAgICAgICAgIHN0b2NrX3F1YW50aXR5OiBwcm9kdWN0LnN0b2NrX3F1YW50aXR5LAogICAgICAgICAgb3JkZXJfcXR5OiBwcm9kdWN0LmJ1eV9xdHksCiAgICAgICAgICBza3U6IHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gJ2JpZ2NvbW1lcmNlJyA/IHByb2R1Y3Quc2t1IDogJycsCiAgICAgICAgICBidXlfcXR5OiAxLAogICAgICAgICAgdmFyaWFudF90aXRsZTogcHJvZHVjdC52YXJpYW50X3RpdGxlLAogICAgICAgICAgc3RvY2tfc3RhdHVzOiBwcm9kdWN0LnN0b2NrX3N0YXR1cywKICAgICAgICAgIHRpdGxlOiBwcm9kdWN0LnRpdGxlCiAgICAgICAgfSk7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjYXJ0X3F0eS5hZGRDbGFzcygiY2FydC1xdHkiKTsKICAgICAgICAgIGNhcnRfaW1nLmFkZENsYXNzKCJjYXJ0LWltZyIpOwogICAgICAgICAgY2FydC5hZGRDbGFzcygic2hha2UiKTsKICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjYXJ0X3F0eS5yZW1vdmVDbGFzcygiY2FydC1xdHkiKTsKICAgICAgICAgICAgY2FydF9pbWcucmVtb3ZlQ2xhc3MoImNhcnQtaW1nIik7CiAgICAgICAgICAgIGNhcnQucmVtb3ZlQ2xhc3MoInNoYWtlIik7CiAgICAgICAgICB9LCA1MDApOwogICAgICAgIH0sIDApOwogICAgICB9IGVsc2UgaWYgKGNoZWNrICE9IHRydWUgJiYgcHJvZHVjdC5idXlfcXR5ID4gcHJvZHVjdC5zdG9ja19xdWFudGl0eSkgewogICAgICAgIHRoaXMub3Zlcl9xdHlfd2FybmluZyA9IHRydWU7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAocHJvZHVjdC5idXlfcXR5IDw9IHByb2R1Y3Quc3RvY2tfcXVhbnRpdHkgJiYgcHJvZHVjdC5idXlfcXR5ICE9PSAiIiB8fCBwcm9kdWN0LnN0b2NrX3F1YW50aXR5ID09IG51bGwgfHwgcHJvZHVjdC5zdG9ja19xdWFudGl0eSA9PSAwICYmIHByb2R1Y3Quc3RvY2tfc3RhdHVzID09PSAiaW5zdG9jayIpIHsKICAgICAgdGhpcy5hZGR0b0NhcnRkYXRhLnB1c2goewogICAgICAgIGlkOiBwcm9kdWN0LmlkLAogICAgICAgIGltZ191cmw6IHByb2R1Y3QuaW1nX3VybCwKICAgICAgICBwcmljZTogcHJvZHVjdC5wcmljZSwKICAgICAgICBzdG9ja19xdWFudGl0eTogcHJvZHVjdC5zdG9ja19xdWFudGl0eSwKICAgICAgICBvcmRlcl9xdHk6IHByb2R1Y3QuYnV5X3F0eSwKICAgICAgICBza3U6IHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gJ2JpZ2NvbW1lcmNlJyA/IHByb2R1Y3Quc2t1IDogJycsCiAgICAgICAgYnV5X3F0eTogMSwKICAgICAgICB2YXJpYW50X3RpdGxlOiBwcm9kdWN0LnZhcmlhbnRfdGl0bGUsCiAgICAgICAgc3RvY2tfc3RhdHVzOiBwcm9kdWN0LnN0b2NrX3N0YXR1cywKICAgICAgICB0aXRsZTogcHJvZHVjdC50aXRsZQogICAgICB9KTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgY2FydF9xdHkuYWRkQ2xhc3MoImNhcnQtcXR5Iik7CiAgICAgICAgY2FydF9pbWcuYWRkQ2xhc3MoImNhcnQtaW1nIik7CiAgICAgICAgY2FydC5hZGRDbGFzcygic2hha2UiKTsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGNhcnRfcXR5LnJlbW92ZUNsYXNzKCJjYXJ0LXF0eSIpOwogICAgICAgICAgY2FydF9pbWcucmVtb3ZlQ2xhc3MoImNhcnQtaW1nIik7CiAgICAgICAgICBjYXJ0LnJlbW92ZUNsYXNzKCJzaGFrZSIpOwogICAgICAgIH0sIDUwMCk7CiAgICAgIH0sIDApOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5vdmVyX3F0eV93YXJuaW5nID0gdHJ1ZTsKICAgIH0KCiAgICBmb3IgKHZhciBqIGluIHRoaXMuYWRkdG9DYXJ0ZGF0YSkgewogICAgICB0aGlzLnRvdGFsX3Byb2R1Y3RzX3F0eSA9IHRoaXMudG90YWxfcHJvZHVjdHNfcXR5ICsgdGhpcy5hZGR0b0NhcnRkYXRhW2pdLm9yZGVyX3F0eTsKICAgIH0KICB9LAogIHNlbGVjdGVkX3Byb2R1Y3Q6IGZ1bmN0aW9uIHNlbGVjdGVkX3Byb2R1Y3QodmFsdWUpIHsKICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCkgewogICAgICBpZiAodmFsdWUgPT0gImFsbCIpIHsKICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwoKICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMucHJvZHVjdF9vdXRfb2Zfc3RvY2tfbGlzdCkgewogICAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QucHVzaCh0aGlzLnByb2R1Y3Rfb3V0X29mX3N0b2NrX2xpc3RbaV0pOwogICAgICAgIH0KCiAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwoKICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGg7IF9pMisrKSB7CiAgICAgICAgICAkKCIjcHJvZHVjdF9jaGVja2JveF8iICsgdGhpcy5wcm9kdWN0X291dF9vZl9zdG9ja19saXN0W19pMl0ucHJvZHVjdF9pZCkucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICAgICAgJCgiI3NlbGVjdGFsbCIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QucHVzaCh2YWx1ZSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoIWV2ZW50LnRhcmdldC5jaGVja2VkKSB7CiAgICAgIGlmICh2YWx1ZSAhPSAiYWxsIikgewogICAgICAgIHZhciBzZWxlY3RhbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjc2VsZWN0YWxsIik7CgogICAgICAgIGlmIChzZWxlY3RhbGwuY2hlY2tlZCkgewogICAgICAgICAgc2VsZWN0YWxsLmNoZWNrZWQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHZhciB0ZW1wID0gdGhpcy5jaGVja2VkX2xpc3QuZmlsdGVyKGZ1bmN0aW9uIChwcm9kdWN0X2lkKSB7CiAgICAgICAgICByZXR1cm4gcHJvZHVjdF9pZCAhPSB2YWx1ZTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IHRlbXA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwoKICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCB0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGg7IF9pMysrKSB7CiAgICAgICAgICAkKCIjcHJvZHVjdF9jaGVja2JveF8iICsgdGhpcy5wcm9kdWN0X291dF9vZl9zdG9ja19saXN0W19pM10ucHJvZHVjdF9pZCkucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICAgICQoIiNzZWxlY3RhbGwiKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgfQogICAgfQogIH0sCiAgY2hlY2tfY3VycmVudF9wcm9kdWN0X2FjdGl2ZTogZnVuY3Rpb24gY2hlY2tfY3VycmVudF9wcm9kdWN0X2FjdGl2ZShpbmRleCkgewogICAgaWYgKEJvb2xlYW4odGhpcy5wcm9kdWN0X291dF9vZl9zdG9ja19saXN0W2luZGV4XSkgPT09IHRydWUpIHsKICAgICAgcmV0dXJuIHRoaXMucHJvZHVjdF9vdXRfb2Zfc3RvY2tfbGlzdFtpbmRleF0ucHJvZHVjdF9pZCA9PT0gdGhpcy5jdXJyZW50X3Byb2R1Y3QucHJvZHVjdF9pZCA/ICJjdXJyZW50LWFjdGl2ZS10ZW1wbGF0ZSIgOiBudWxsOwogICAgfQogIH0sCiAgc2hvd19wcm9kdWN0OiBmdW5jdGlvbiBzaG93X3Byb2R1Y3QoaW5kZXgpIHsKICAgIHRoaXMuY3VycmVudF9wcm9kdWN0ID0gdGhpcy5wcm9kdWN0X291dF9vZl9zdG9ja19saXN0W2luZGV4XTsKICB9LAogIGFkZF90b19vdXRfb2Zfc3RvY2tfbGlzdDogZnVuY3Rpb24gYWRkX3RvX291dF9vZl9zdG9ja19saXN0KGl0ZW1zKSB7CiAgICB0aGlzLnByb2R1Y3Rfb3V0X29mX3N0b2NrX2xpc3QgPSBpdGVtczsKICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gW107CiAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgfSwKICBzdWJtaXRfb3V0X29mX3N0b2NrX3Byb2R1Y3RzOiBmdW5jdGlvbiBzdWJtaXRfb3V0X29mX3N0b2NrX3Byb2R1Y3RzKCkgewogICAgdmFyIF90aGlzMTAgPSB0aGlzOwoKICAgIGlmICh0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGggPT0gMCkgewogICAgICBzd2FsKHsKICAgICAgICB0ZXh0OiAiUGxlYXNlIHNlbGVjdCBzb21lIHByb2R1Y3RzIiwKICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgdGltZXI6IDI1MDAKICAgICAgfSk7CiAgICAgIHJldHVybjsKICAgIH0gZWxzZSBpZiAodGhpcy5jdXN0b21lcl9lbWFpbCA9PSAiIiB8fCAhdGhpcy5yZWdfZW1haWwudGVzdCh0aGlzLmN1c3RvbWVyX2VtYWlsKSkgewogICAgICBzd2FsKHsKICAgICAgICB0ZXh0OiAiUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcyIsCiAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgIHRpbWVyOiAyNTAwCiAgICAgIH0pOwogICAgICByZXR1cm47CiAgICB9CgogICAgc3dhbCh7CiAgICAgIHRleHQ6ICJQbGVhc2Ugd2FpdCB3aGlsZSB3ZSBhcmUgc3VibWl0dGluZyB5b3VyIGRldGFpbHMuLi4iLAogICAgICB0eXBlOiAiaW5mbyIsCiAgICAgIHRvYXN0OiB0cnVlLAogICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UKICAgIH0pOwogICAgJCgiI25vdGlmeWVtYWlsIikubW9kYWwoImhpZGUiKTsKICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLm91dG9mc3RvY2tlbWFpbG5vdGlmaWNhdGlvbigpLCB7CiAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgIGVtYWlsOiB0aGlzLmN1c3RvbWVyX2VtYWlsLAogICAgICBwcm9kdWN0X2xpc3Q6IHRoaXMuY2hlY2tlZF9saXN0LAogICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwKICAgIH0sIHsKICAgICAgaGVhZGVyczogewogICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIF90aGlzMTAuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSBfdGhpczEwLmFwaV9zdGF0dXNfY29kZS5TVUNDRVNTRlVMX0RCX1FVRVJZX01PREVMUy5NU0dfQ09ERSkgewogICAgICAgIHN3YWwoewogICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgdGV4dDogIllvdSdsbCBiZSBub3RpZmllZCB0aHJvdWdoIGVtYWlsIHdoZW4gdGhlIHByb2R1Y3RzIGdldCBiYWNrIGluIHN0b2NrIiwKICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBfdGhpczEwLmN1c3RvbWVyX2VtYWlsID0gIiI7CiAgICAgICAgICBfdGhpczEwLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0cpOwogICAgICB9CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICBfdGhpczEwLnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgX3RoaXMxMC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgfQogICAgfSk7CiAgfSwKICByZWZyZXNoX2NoYXRib3Q6IGZ1bmN0aW9uIHJlZnJlc2hfY2hhdGJvdCh0eXBlKSB7CiAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CgogICAgdGhpcy5yZWZyZXNoZWRfb3JfY2xvc2VkID0gdHJ1ZTsKICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgewogICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgIGNoYXQ6ICIiLAogICAgICBkYXRhOiAiIiwKICAgICAgcm9sZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUsCiAgICAgIHJlZnJlc2hlZF9vcl9jbG9zZWQ6IHRoaXMucmVmcmVzaGVkX29yX2Nsb3NlZAogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICBfdGhpczExLnJlZnJlc2hlZF9vcl9jbG9zZWQgPSBmYWxzZTsKICAgICAgdmFyIHdlbGNvbWVfbXNnX2NvbXBhbmllcyA9IFsiQ3VzdG9tZXJIYXBwaW5lc3M5NTE4NSIsICIzeDVpdmU5OTUzNCIsICJGb3JlaWdueGNoYW5nZTE3NDkxIiwgIjM2MF90ZWNobm9sb2d5Il07CgogICAgICBpZiAodHlwZSA9PSAic3VwcG9ydCIpIHsKICAgICAgICBfdGhpczExLmNoYXQucHVzaCh7CiAgICAgICAgICByZWNlaXZpbmc6IHRydWUsCiAgICAgICAgICByZWNlaXZlZDogIklzIHRoZXJlIGFueXRoaW5nIGVsc2UgSSBjYW4gaGVscCB5b3Ugd2l0aD8iLAogICAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgICB0aW1lOiBfdGhpczExLmdlbmVyYXRlX3RpbWUoKQogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAod2VsY29tZV9tc2dfY29tcGFuaWVzLmluY2x1ZGVzKF90aGlzMTEuY29tcGFueWlkKSkgewogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgewogICAgICAgICAgY2hhdDogIi93ZWxjb21lX21lc3NhZ2UiLAogICAgICAgICAgdG9rZW46IF90aGlzMTEuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlLAogICAgICAgICAgdXNlcm5hbWU6IF90aGlzMTEuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXMxMS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgZGF0YTogIiIsCiAgICAgICAgICByb2xlOiBfdGhpczExLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSwKICAgICAgICAgIHJlZnJlc2hlZF9vcl9jbG9zZWQ6IGZhbHNlCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzMTEucHVzaF9tc2cocmVzcG9uc2UsIHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBfdGhpczExLndlbGNvbWVfbWVzc2FnZV9ub3RfeWV0X3JlY2VpdmVkID0gZmFsc2U7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgZG93bmxvYWRfZmlsZTogZnVuY3Rpb24gZG93bmxvYWRfZmlsZSh1cmwsIGZpbGVfbmFtZSkgewogICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgbGluay5ocmVmID0gdXJsOwogICAgbGluay5zZXRBdHRyaWJ1dGUoImRvd25sb2FkIiwgZmlsZV9uYW1lKTsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7CiAgICBsaW5rLmNsaWNrKCk7CiAgfSwKICBzY3JvbGxfZGl2OiBmdW5jdGlvbiBzY3JvbGxfZGl2KCkgewogICAgdmFyIGRvYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5idXktcHJvZHVjdHMiKTsKCiAgICBpZiAoZXZlbnQuZGVsdGFYID4gZXZlbnQuZGVsdGFZKSB7CiAgICAgIGRvYy5zY3JvbGxMZWZ0ICs9IDEwOwogICAgfSBlbHNlIGlmIChldmVudC5kZWx0YVggPCBldmVudC5kZWx0YVkpIHsKICAgICAgZG9jLnNjcm9sbExlZnQgLT0gMTA7CiAgICB9CiAgfSwKICBzY3JvbGxfZGl2MTogZnVuY3Rpb24gc2Nyb2xsX2RpdjEoaXRlbSkgewogICAgdmFyIGRvYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNidXlfcHJvZHVjdF9pZF8iLmNvbmNhdChpdGVtKSk7CgogICAgaWYgKGV2ZW50LmRlbHRhWCA+IGV2ZW50LmRlbHRhWSkgewogICAgICBkb2Muc2Nyb2xsTGVmdCArPSAxMDsKICAgIH0gZWxzZSBpZiAoZXZlbnQuZGVsdGFYIDwgZXZlbnQuZGVsdGFZKSB7CiAgICAgIGRvYy5zY3JvbGxMZWZ0IC09IDEwOwogICAgfQogIH0sCiAgc2Nyb2xsX2Rpdl9yaWdodDogZnVuY3Rpb24gc2Nyb2xsX2Rpdl9yaWdodChpdGVtKSB7CiAgICB2YXIgZG9jID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2J1eV9wcm9kdWN0X2lkXyIuY29uY2F0KGl0ZW0pKTsKICAgIGRvYy5zY3JvbGxMZWZ0ICs9IDEwMDsKICB9LAogIHNjcm9sbF9kaXZfbGVmdDogZnVuY3Rpb24gc2Nyb2xsX2Rpdl9sZWZ0KGl0ZW0pIHsKICAgIHZhciBkb2MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjYnV5X3Byb2R1Y3RfaWRfIi5jb25jYXQoaXRlbSkpOwogICAgZG9jLnNjcm9sbExlZnQgLT0gMTAwOwogIH0sCiAgY2FsbF9zdXBwb3J0OiBmdW5jdGlvbiBjYWxsX3N1cHBvcnQodHlwZSkgewogICAgdmFyIF90aGlzMTIgPSB0aGlzOwoKICAgIGlmICh0eXBlID09ICJZZXMiKSB7CiAgICAgIHZhciBfYXhpb3MkcG9zdDI7CgogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X3Jlc3BvbnNlX2NlbnNlKCksIChfYXhpb3MkcG9zdDIgPSB7CiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBzb3VyY2U6ICJXZWIiLAogICAgICAgIGNoYXQ6ICIvY2FsbF9zdXBwb3J0IgogICAgICB9LCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3QyLCAidG9rZW4iLCB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDIsICJyb2xlIiwgdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3QyLCAicmVmcmVzaGVkX29yX2Nsb3NlZCIsIHRoaXMucmVmcmVzaGVkX29yX2Nsb3NlZCksIF9heGlvcyRwb3N0MikpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICBfdGhpczEyLmNoYXQucHVzaCh7CiAgICAgICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgICAgIHJlY2VpdmVkOiByZXNwLmRhdGEucmVzcG9uc2VzWzBdLnRleHQsCiAgICAgICAgICB0aW1lOiBfdGhpczEyLmdlbmVyYXRlX3RpbWUoKQogICAgICAgIH0pOyAvLyB0aGlzLiRzZXNzaW9uLnNldCgiQm90UmVzcG9uc2VfQ29udmVyc2F0aW9uIiwgdGhpcy5jaGF0KTsKCgogICAgICAgIF90aGlzMTIudXBkYXRlX3Njcm9sbGJhcigidXB0b19lbmQiLCAicmVzcG9uc2UiKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gIk5vIikgewogICAgICB0aGlzLmNoYXQucHVzaCh0aGlzLmNoYXRbMF0pOwogICAgICB0aGlzLmNoYXQucHVzaCh0aGlzLmNoYXRbMV0pOwogICAgICB0aGlzLnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInJlc3BvbnNlIik7IC8vIHRoaXMucmVmcmVzaF9jaGF0Ym90KCJzdXBwb3J0Iik7CiAgICB9CiAgfSwKICBwYXJzZTogZnVuY3Rpb24gcGFyc2Uoc3RyaW5nKSB7CiAgICB2YXIgX3RoaXMxMyA9IHRoaXM7CgogICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC97ey4qP319L2csIGZ1bmN0aW9uIChtYXRjaCkgewogICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpOwogICAgICB2YXIgZGQgPSB0b2RheS5nZXREYXRlKCk7CiAgICAgIHZhciBtbSA9IHRvZGF5LmdldE1vbnRoKCkgKyAxOwogICAgICB2YXIgeXl5eSA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7CgogICAgICBpZiAoZGQgPCAxMCkgewogICAgICAgIGRkID0gIjAiICsgZGQ7CiAgICAgIH0KCiAgICAgIGlmIChtbSA8IDEwKSB7CiAgICAgICAgbW0gPSAiMCIgKyBtbTsKICAgICAgfQoKICAgICAgdG9kYXkgPSBkZCArICItIiArIG1tICsgIi0iICsgeXl5eTsKICAgICAgdmFyIGV4cHJlc3Npb24gPSBtYXRjaC5zbGljZSgyLCAtMik7CiAgICAgIF90aGlzMTMuJGRhdGFbZXhwcmVzc2lvbl0gPSB0b2RheTsKICAgICAgcmV0dXJuIF90aGlzMTMuJGRhdGFbZXhwcmVzc2lvbl07CiAgICB9KTsKICB9LAogIHNob3dfcG9wdXA6IGZ1bmN0aW9uIHNob3dfcG9wdXAoKSB7CiAgICB0aGlzLnNob3cgPSBmYWxzZTsKICAgIHRoaXMuc3RvcCA9IGZhbHNlOwogIH0sCiAgc3ViX2xlYWZfbm9kZV9jYWxsOiBmdW5jdGlvbiBzdWJfbGVhZl9ub2RlX2NhbGwoZGl2Y2xpY2spIHsKICAgIHZhciBfdGhpczE0ID0gdGhpczsKCiAgICAvLyB2YXIgZGl2Y2xpY2sgPSBldmVudC50YXJnZXQuaW5uZXJUZXh0CiAgICBpZiAoZGl2Y2xpY2sgPT0gIldhdGNoIERlbW8gVmlkZW8iKSB7CiAgICAgIHRoaXMuZGVtb3VybGJpbmQgPSB0cnVlOwogICAgICB0aGlzLnJldmlld3N1cmxiaW5kID0gZmFsc2U7CiAgICB9IGVsc2UgaWYgKGRpdmNsaWNrID09ICJVc2VyIFJldmlld3MvVGVzdGltb25pYWxzIikgewogICAgICB0aGlzLnJldmlld3N1cmxiaW5kID0gdHJ1ZTsKICAgICAgdGhpcy5kZW1vdXJsYmluZCA9IGZhbHNlOwogICAgfQoKICAgIGlmIChkaXZjbGljayA9PSAiV2F0Y2ggRGVtbyBWaWRlbyIgfHwgZGl2Y2xpY2sgPT0gIlVzZXIgUmV2aWV3cy9UZXN0aW1vbmlhbHMiKSB7CiAgICAgIHRoaXMuc2hvdyA9ICF0aGlzLnNob3c7CiAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczE0LmlzX3R5cGluZ19pbmRpY2F0b3Jfb24gPSBmYWxzZTsKICAgICAgfSwgMTAwMCk7CiAgICB9IGVsc2UgaWYgKGRpdmNsaWNrID09ICJCdXkgVHV0b3JpYWwiKSB7CiAgICAgIHRoaXMuY2Vuc2VfZW5xdWlyeSA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgewogICAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgdG9rZW46IHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlLAogICAgICAgIGNoYXQ6ICIvcGVyc29uYWxfZGV0YWlscyIsCiAgICAgICAgc291cmNlOiAiV2ViIiwKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIHJvbGU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlLAogICAgICAgIHJlZnJlc2hlZF9vcl9jbG9zZWQ6ICIiCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgdmFyIG1zZyA9IHsKICAgICAgICAgIHJlY2VpdmVkOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1swXS50ZXh0LAogICAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgICByZWNlaXZpbmc6IHRydWUsCiAgICAgICAgICB0aW1lOiBfdGhpczE0LmdlbmVyYXRlX3RpbWUoKQogICAgICAgIH07CgogICAgICAgIF90aGlzMTQuY2hhdC5wdXNoKG1zZyk7CgogICAgICAgIF90aGlzMTQudXBkYXRlX3Njcm9sbGJhcigpOwoKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMTQuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICAgIH0sIDEwMDApOyAvLyB0aGlzLiRzZXNzaW9uLnNldCgiQm90UmVzcG9uc2VfQ29udmVyc2F0aW9uIiwgdGhpcy5jaGF0KTsKICAgICAgfSk7CiAgICB9CiAgfSwKICB0aWNrZXRfbnVtYmVyOiBmdW5jdGlvbiB0aWNrZXRfbnVtYmVyKCkgewogICAgdmFyIHJhbmRvbV9udW0gPSBNYXRoLmZsb29yKDEwMDAwMDAgKyBNYXRoLnJhbmRvbSgpICogOTAwMDAwMCk7CiAgICB2YXIgY29tcGFueSA9IHRoaXMuY29tcGFueW5hbWUuc2xpY2UoMCwgMSkudG9VcHBlckNhc2UoKTsKICAgIHJldHVybiAiIi5jb25jYXQoY29tcGFueSwgIl8iKS5jb25jYXQocmFuZG9tX251bSk7CiAgfSwKICByZW1vdmVfY3VzdG9tX2J1dHRvbjogZnVuY3Rpb24gcmVtb3ZlX2N1c3RvbV9idXR0b24oaW5kZXgpIHsKICAgIHZhciB2bSA9IHRoaXM7CgogICAgaWYgKHZtLmNoYXRbaW5kZXhdICYmIHZtLmNoYXRbaW5kZXhdLnJlbW92YWJsZSA9PSB0cnVlKSB7CiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNjaGF0IiArIGluZGV4KS5jbGFzc0xpc3QuYWRkKCItLWRlbGV0ZSIpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICB2bS5jaGF0LnNwbGljZShpbmRleCwgMSk7CiAgICAgIH0sIDg1MCk7CiAgICB9CiAgfSwKICBjdXN0b21fYnV0dG9uX2NsaWNrOiBmdW5jdGlvbiBjdXN0b21fYnV0dG9uX2NsaWNrKGJ1dHRvbiwgaW5kZXgpIHsKICAgIGlmIChCb29sZWFuKGJ1dHRvbi50eXBlKSAmJiBCb29sZWFuKGJ1dHRvbi50eXBlID09PSAnd2ViX3VybCcpKSB7CiAgICAgIHRoaXMucmVtb3ZlX2N1c3RvbV9idXR0b24oaW5kZXgpOwogICAgICB3aW5kb3cub3BlbihidXR0b24udmFsdWUsICJfYmxhbmsiKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuc2VuZF9tZXNzYWdlKCdpc19idXR0b24nLCBidXR0b24sIGluZGV4KTsKICAgIH0KICB9LAogIHNlbmRfbWVzc2FnZTogZnVuY3Rpb24gc2VuZF9tZXNzYWdlKHR5cGUsIG1lc3NhZ2UsIHRvX2JlX2Rpc3BsYXllZCkgewogICAgdmFyIF90aGlzMTUgPSB0aGlzOwoKICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgaWYgKHRoaXMuc2VsZWN0ZWRfaW5kaWNhdGlvblswXSAhPSB1bmRlZmluZWQpIHsKICAgICAgaWYgKHR5cGUgPT0gImlzX2J1dHRvbiIpIHsKICAgICAgICB0aGlzLnRvX3NlbmQgPSBtZXNzYWdlLnZhbHVlICsgSlNPTi5zdHJpbmdpZnkodGhpcy5yZXMpOwogICAgICB9IGVsc2UgewogICAgICAgIHR5cGUgPSAiaXNfcHJvbXB0IjsKICAgICAgICB0b19iZV9kaXNwbGF5ZWQgPSB0aGlzLnRvX3NlbmQ7CiAgICAgICAgdGhpcy50b19zZW5kID0gdGhpcy5zZWxlY3RlZF9pbmRpY2F0aW9uWzBdLnZhbHVlLnNwbGl0KCJ7IilbMF0gKyBKU09OLnN0cmluZ2lmeSh0aGlzLnJlcyk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAodHlwZSA9PSAiaXNfYnV0dG9uIikgewogICAgICBpZiAobWVzc2FnZS52YWx1ZSA9PSAiaXNkaXNhYmxlZCIgJiYgdGhpcy5jb21wYW55aWQgPT0gImNsaW5pY2FsdHJpYWxzODEzNTIiICYmIG1lc3NhZ2UudGl0bGUgPT0gIk5vIikge30gZWxzZSBpZiAobWVzc2FnZS52YWx1ZSA9PT0gIi9saXZlX2NoYXQiKSB7CiAgICAgICAgdGhpcy5zdGFydF9saXZlX2NoYXQoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgdm0gPSB0aGlzOwoKICAgICAgICBmdW5jdGlvbiBfc2VuZF9tc2codG9TZW5kLCBjdXN0b21EaXNwbGF5TXNnKSB7CiAgICAgICAgICB2bS5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKICAgICAgICAgIHZtLnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInNlbmRlciIpOwogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZtLmNoYXQucHVzaCh7CiAgICAgICAgICAgICAgc2VudDogY3VzdG9tRGlzcGxheU1zZyA/ICIiLmNvbmNhdChtZXNzYWdlLnRpdGxlLCAiICIpLmNvbmNhdChjdXN0b21EaXNwbGF5TXNnKSA6IG1lc3NhZ2UudGl0bGUsCiAgICAgICAgICAgICAgc2VuZGluZzogdHJ1ZSwKICAgICAgICAgICAgICB0aW1lOiB2bS5nZW5lcmF0ZV90aW1lKCksCiAgICAgICAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgICAgICAgZGVsaXZlcmVkOiB0cnVlLAogICAgICAgICAgICAgIGRyb3Bkb3duOiAiIgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sIDg1MCk7CiAgICAgICAgICB2bS5yZW1vdmVfY3VzdG9tX2J1dHRvbih0b19iZV9kaXNwbGF5ZWQpOwoKICAgICAgICAgIGlmICh2bS5jaGF0W3RvX2JlX2Rpc3BsYXllZCAtIDFdICYmIHZtLmNoYXRbdG9fYmVfZGlzcGxheWVkIC0gMV0uaXNfbXVsdGlzZWxlY3QgJiYgKG1lc3NhZ2UudGl0bGUgPT0gIkFwcHJvdmUiIHx8IG1lc3NhZ2UudGl0bGUgPT0gIlJlamVjdCIgfHwgbWVzc2FnZS50aXRsZSA9PSAiQ29tbWVudCBhbmQgUmV0dXJuIikpIHsKICAgICAgICAgICAgdm0uY2hhdFt0b19iZV9kaXNwbGF5ZWQgLSAxXS5kaXNhYmxlZCA9IHRydWU7CiAgICAgICAgICB9CgogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9yZXNwb25zZV9jZW5zZSgpLCB7CiAgICAgICAgICAgIGNoYXQ6IHRvU2VuZCwKICAgICAgICAgICAgdG9rZW46IHZtLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICAgICAgdXNlcm5hbWU6IHZtLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB2bS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICByb2xlOiB2bS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUsCiAgICAgICAgICAgIHJlZnJlc2hlZF9vcl9jbG9zZWQ6IHZtLnJlZnJlc2hlZF9vcl9jbG9zZWQKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIHZtLnJlc3BvbnNlX2hhbmRsaW5nKHJlc3BvbnNlKTsKICAgICAgICAgIH0pOwogICAgICAgICAgdm0uc2VsZWN0ZWRfaW5kaWNhdGlvbiA9IFtdOwogICAgICAgICAgdm0udG9fc2VuZCA9ICIiOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuY29tcGFueWlkID09ICIzNjBfdGVjaG5vbG9neSIpIHsKICAgICAgICAgIGlmICh0aGlzLmNoYXRbdG9fYmVfZGlzcGxheWVkIC0gMV0gJiYgdGhpcy5jaGF0W3RvX2JlX2Rpc3BsYXllZCAtIDFdLnZhbHVlX21hcHBpbmcpIHsKICAgICAgICAgICAgdmFyIHZhbHVlTWFwcGluZ0RhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY2hhdFt0b19iZV9kaXNwbGF5ZWQgLSAxXS52YWx1ZV9tYXBwaW5nKSk7CiAgICAgICAgICAgIHRoaXMuYWRkZHJvcGRvd252YWx1ZSh2YWx1ZU1hcHBpbmdEYXRhKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBfdGhpczE1LnRvX3NlbmQgPSBtZXNzYWdlLnZhbHVlICsgSlNPTi5zdHJpbmdpZnkoX3RoaXMxNS5yZXMpOwoKICAgICAgICAgICAgICBpZiAoX3RoaXMxNS5jaGF0W3RvX2JlX2Rpc3BsYXllZCAtIDFdLnZhbHVlX21hcHBpbmcpIHsKICAgICAgICAgICAgICAgIGlmICh2YWx1ZU1hcHBpbmdEYXRhLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBfc2VuZF9tc2cobWVzc2FnZS52YWx1ZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBfc2VuZF9tc2coX3RoaXMxNS50b19zZW5kLCAiZm9yICIuY29uY2F0KF90aGlzMTUuc2VsZWN0ZWRfaW5kaWNhdGlvbi5tYXAoZnVuY3Rpb24gKG9iaikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmoudGl0bGU7CiAgICAgICAgICAgICAgICAgIH0pLnRvU3RyaW5nKCkpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnZhbHVlLnNwbGl0KCJ7IikubGVuZ3RoID4gMSkgewogICAgICAgICAgICB2YXIgY3VzdG9tRGlzcGxheU1zZyA9IE9iamVjdC52YWx1ZXMoSlNPTi5wYXJzZSgieyIuY29uY2F0KG1lc3NhZ2UudmFsdWUuc3BsaXQoInsiKVsxXSkpKVswXTsKCiAgICAgICAgICAgIF9zZW5kX21zZyhtZXNzYWdlLnZhbHVlLCAiZm9yICIuY29uY2F0KGN1c3RvbURpc3BsYXlNc2cpKTsKICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jaGF0W3RvX2JlX2Rpc3BsYXllZCAtIDFdICYmIHRoaXMuY2hhdFt0b19iZV9kaXNwbGF5ZWQgLSAxXS5zaG93X3RleHRfYXJlYSkgewogICAgICAgICAgICBfc2VuZF9tc2cobWVzc2FnZS52YWx1ZSk7CgogICAgICAgICAgICB0aGlzLmNoYXRbdG9fYmVfZGlzcGxheWVkIC0gMV0uZGlzYWJsZWQgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3NlbmRfbXNnKG1lc3NhZ2UudmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfc2VuZF9tc2cobWVzc2FnZS52YWx1ZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gImlzX3Byb21wdCIpIHsKICAgICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKICAgICAgdGhpcy5jaGF0LnB1c2goewogICAgICAgIHNlbnQ6IHRvX2JlX2Rpc3BsYXllZCwKICAgICAgICBzZW5kaW5nOiB0cnVlLAogICAgICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpLAogICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgIGRlbGl2ZXJlZDogdHJ1ZQogICAgICB9KTsKICAgICAgdGhpcy51cGRhdGVfc2Nyb2xsYmFyKCJ1cHRvX2VuZCIsICJzZW5kZXIiKTsKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9yZXNwb25zZV9jZW5zZSgpLCB7CiAgICAgICAgLy8gaG9zdDogdGhpcy51c2VyX2RhdGEuaG9zdCwKICAgICAgICByb2xlOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSwKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIHRva2VuOiB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICB1c2VybmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgY2hhdDogdGhpcy50b19zZW5kCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXMxNS5yZXNwb25zZV9oYW5kbGluZyhyZXNwb25zZSk7CgogICAgICAgIF90aGlzMTUuZXgxKCk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmICh0aGlzLnRvX3NlbmQgPT0gIlJlc3RhcnQiIHx8IHRoaXMudG9fc2VuZCA9PSAicmVzdGFydCIpIHsKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMucHJvbXB0X3VybCgpLCB7CiAgICAgICAgdWlkOiAiY2Vuc2UiLAogICAgICAgIC8vIHRoaXMuZmluZ2VycHJpbnQKICAgICAgICBjb21wYW55X2lkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIGNoYXQ6ICIiCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXMxNS5jaGF0LnB1c2gocmVzcG9uc2UuZGF0YSk7CgogICAgICAgIF90aGlzMTUudXBkYXRlX3Njcm9sbGJhcigidXB0b19lbmQiLCAicmVzcG9uc2UiKTsgLy8gdGhpcy4kc2Vzc2lvbi5zZXQoIkJvdFJlc3BvbnNlX0NvbnZlcnNhdGlvbiIsIHRoaXMuY2hhdCk7CgoKICAgICAgICBfdGhpczE1LmxldmVsID0gcmVzcG9uc2UuZGF0YS5sZXZlbDsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHt9KTsKICAgIH0gZWxzZSBpZiAodGhpcy5jZW5zZV9lbnF1aXJ5ID09IHRydWUgJiYgQm9vbGVhbih0aGlzLnRvX3NlbmQpKSB7CiAgICAgIHRoaXMuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IHRydWU7CiAgICAgIHZhciBzZW5kX21zZyA9IHsKICAgICAgICBzZW50OiB0aGlzLnRvX3NlbmQsCiAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgc2VuZGluZzogdHJ1ZSwKICAgICAgICB0aW1lOiB0aGlzLmdlbmVyYXRlX3RpbWUoKQogICAgICB9OwogICAgICB0aGlzLmNoYXQucHVzaChzZW5kX21zZyk7IC8vIHRoaXMuJHNlc3Npb24uc2V0KCJCb3RSZXNwb25zZV9Db252ZXJzYXRpb24iLCB0aGlzLmNoYXQpOwoKICAgICAgdGhpcy51cGRhdGVfc2Nyb2xsYmFyKCJ1cHRvX2VuZCIpOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X3Jlc3BvbnNlX2NlbnNlKCksIHsKICAgICAgICB1c2VybmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIHRva2VuOiB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICBjaGF0OiAiL3BlcnNvbmFsX2RldGFpbHMiLAogICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgY29tcGFueV9pZDogIkNPMDAwMjMiLAogICAgICAgIGRhdGE6ICIiLAogICAgICAgIHJvbGU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlLAogICAgICAgIHJlZnJlc2hlZF9vcl9jbG9zZWQ6ICIiLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXkKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICB2YXIgbXNnID0gewogICAgICAgICAgcmVjZWl2ZWQ6IHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzWzBdLnRleHQsCiAgICAgICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgICAgIHRpbWU6IF90aGlzMTUuZ2VuZXJhdGVfdGltZSgpCiAgICAgICAgfTsKCiAgICAgICAgX3RoaXMxNS5jaGF0LnB1c2gobXNnKTsgLy8gdGhpcy4kc2Vzc2lvbi5zZXQoIkJvdFJlc3BvbnNlX0NvbnZlcnNhdGlvbiIsIHRoaXMuY2hhdCk7CgoKICAgICAgICBfdGhpczE1LnJlZnJlc2hlZF9vcl9jbG9zZWQgPSBmYWxzZTsKCiAgICAgICAgX3RoaXMxNS51cGRhdGVfc2Nyb2xsYmFyKCJ1cHRvX2VuZCIsICJyZXNwb25zZSIpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzMTUuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAodGhpcy5saXZlX2NoYXRfb24pIHsKICAgICAgLy8gTElWRSBDSEFUIE9OIENVU1RPTUVSIE1FU1NBR0VTCiAgICAgIGlmIChCb29sZWFuKHRoaXMudG9fc2VuZCkpIHsKICAgICAgICBpZiAoQm9vbGVhbih0aGlzLnVzZXJfbmFtZSkgPT09IGZhbHNlKSB7CiAgICAgICAgICB0aGlzLmNoYW5uZWwucHVzaCgibmV3X25hbWUiLCB7CiAgICAgICAgICAgIG5hbWU6IHRoaXMudG9fc2VuZAogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLnVzZXJfbmFtZSA9IHRoaXMudG9fc2VuZDsKICAgICAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigidXB0b19lbmQiLCAicmVzcG9uc2UiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5jaGFubmVsLnB1c2goIm5ld19uYW1lIiwgewogICAgICAgICAgICBuYW1lOiB0aGlzLnVzZXJfbmFtZQogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLmNoYW5uZWwucHVzaCgibmV3X2NoYXRfbWVzc2FnZSIsIHsKICAgICAgICAgICAgbWVzc2FnZTogdGhpcy50b19zZW5kCiAgICAgICAgICB9KTsKICAgICAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigidXB0b19lbmQiLCAicmVzcG9uc2UiKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuY2hhdC5wdXNoKHsKICAgICAgICAgIHNlbnQ6IHRoaXMudG9fc2VuZCwKICAgICAgICAgIHNlbmRpbmc6IHRydWUsCiAgICAgICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpCiAgICAgICAgfSk7IC8vIHRoaXMuJHNlc3Npb24uc2V0KCJCb3RSZXNwb25zZV9Db252ZXJzYXRpb24iLCB0aGlzLmNoYXQpOwoKICAgICAgICB0aGlzLnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInNlbmRlciIpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKEJvb2xlYW4odGhpcy50b19zZW5kKSAmJiB0aGlzLmNlbnNlX2VucXVpcnkgIT0gdHJ1ZSkgewogICAgICB2YXIgX2F4aW9zJHBvc3QzOwoKICAgICAgdGhpcy5jaGF0LnB1c2goewogICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgIHNlbmRpbmc6IHRydWUsCiAgICAgICAgc2VudDogdGhpcy50b19zZW5kLAogICAgICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpCiAgICAgIH0pOyAvLyB0aGlzLiRzZXNzaW9uLnNldCgiQm90UmVzcG9uc2VfQ29udmVyc2F0aW9uIiwgdGhpcy5jaGF0KTsKCiAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigidXB0b19lbmQiLCAic2VuZGVyIik7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgKF9heGlvcyRwb3N0MyA9IHsKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIHRva2VuOiB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICB1c2VybmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgY2hhdDogdGhpcy50b19zZW5kCiAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDMsICJ0b2tlbiIsIHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0MywgInJvbGUiLCB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDMsICJyZWZyZXNoZWRfb3JfY2xvc2VkIiwgdGhpcy5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2F4aW9zJHBvc3QzKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczE1LnJlc3BvbnNlX2hhbmRsaW5nKHJlc3BvbnNlKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczE1LnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInJlc3BvbnNlIik7CiAgICAgIH0pOwogICAgfQoKICAgIHRoaXMudG9fc2VuZCA9ICIiOwogIH0sCiAgaW5pdGlhdGVfc3VwcG9ydF9jaGF0OiBmdW5jdGlvbiBpbml0aWF0ZV9zdXBwb3J0X2NoYXQoKSB7CiAgICB0aGlzLmNoYXQucHVzaCh7CiAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgcmVjZWl2ZWQ6ICJTb3JyeSBJIGFtIG5vdCBnZXR0aW5nIHlvdXIgcXVlc3Rpb24iLAogICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZQogICAgfSk7CiAgICB0aGlzLmNoYXQucHVzaCh7CiAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgcmVjZWl2ZWQ6ICJXb3VsZCB5b3UgbGlrZSB0byB0YWxrIHdpdGggc3VwcG9ydCB0ZWFtPyIsCiAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICBzaG93X2J1dHRvbnM6IHRydWUsCiAgICAgIHN1cHBvcnRfYnV0dG9uczogdHJ1ZSwKICAgICAgdGltZTogdGhpcy5nZW5lcmF0ZV90aW1lKCkKICAgIH0pOwogICAgdGhpcy51cGRhdGVfc2Nyb2xsYmFyKCJ1cHRvX2VuZCIsICJyZXNwb25zZSIpOwogIH0sCiAgZGlzY29ubmVjdF9zdXBwb3J0X2NoYXQ6IGZ1bmN0aW9uIGRpc2Nvbm5lY3Rfc3VwcG9ydF9jaGF0KCkgewogICAgdGhpcy5jaGFubmVsLnB1c2goInN0b3BwZWRfY2hhdCIsIHsKICAgICAgbmFtZTogdGhpcy51c2VyX25hbWUsCiAgICAgIG1lc3NhZ2U6ICIgaGFzIGVuZGVkIHRoZSBjb252ZXJzYXRpb24uIgogICAgfSk7CiAgICB0aGlzLmNoYW5uZWwubGVhdmUoKTsKICAgIHRoaXMubGl2ZV9jaGF0X3Rva2VuID0gbnVsbDsKICAgIHRoaXMuY2hhdF9ncm91cF9uYW1lID0gbnVsbDsKICAgIHRoaXMuc3VwcG9ydF9hZ2VudF9pbmZvID0gbnVsbDsKICAgIHRoaXMudXNlcl9uYW1lID0gIiI7CiAgICB0aGlzLmNoYXRfc29ja2V0LmRpc2Nvbm5lY3QoKTsKICAgIHRoaXMubGl2ZV9jaGF0X29uID0gZmFsc2U7CiAgfSwKICBnZW5lcmF0ZV9wYXltZW50OiBmdW5jdGlvbiBnZW5lcmF0ZV9wYXltZW50KHByaWNlLCBuYW1lKSB7CiAgICB2YXIgdm0gPSB0aGlzOwogICAgdmFyIG9wdGlvbnMgPSB7CiAgICAgIGtleTogInJ6cF90ZXN0X1NuRFRhUG5uY2ZsaUR0IiwKICAgICAgYW1vdW50OiBwcmljZSAqIDEwMCwKICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgbmFtZTogIkNlbnNlIEFJIiwKICAgICAgY3VycmVuY3k6ICJJTlIiLAogICAgICBkZXNjcmlwdGlvbjogIkluc3RpbGwgSW50ZWxsaWdlbmNlIiwKICAgICAgaW1hZ2U6ICIvaW1nL2NlbnNlX2ltYWdlLnBuZyIsCiAgICAgIC8vIENPTVBBTlkgTE9HTwogICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJlc3BvbnNlKSB7CiAgICAgICAgdmFyIGNvbnRhY3QgPSAkKCcjY29udGFjdFt0eXBlPSJ0ZWwiXScpLnZhbHVlOwogICAgICAgIHZhciBlbWFpbCA9ICQoJyNlbWFpbFt0eXBlPSJlbWFpbCJdJykudmFsdWU7CiAgICAgICAgdm0ucGF5bWVudGlkID0gcmVzcG9uc2UucmF6b3JwYXlfcGF5bWVudF9pZDsKCiAgICAgICAgaWYgKHRyYW5zZmVyX2FjY291bnQgIT0gbnVsbCkgewogICAgICAgICAgdm0udHJhbnNmZXJfcGF5bWVudCh0cmFuc2Zlcl9hY2NvdW50LCBwcmljZSAqIDEwMCwgIklOUiIsIG5hbWUpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcHJlZmlsbDogewogICAgICAgIG5hbWU6ICIiLAogICAgICAgIC8vIHBhc3MgY3VzdG9tZXIgbmFtZQogICAgICAgIGVtYWlsOiAiIiwKICAgICAgICAvLyBjdXN0b21lciBlbWFpbAogICAgICAgIGNvbnRhY3Q6ICIiIC8vIGN1c3RvbWVyIHBob25lIG5vLgoKICAgICAgfSwKICAgICAgbm90ZXM6IHsKICAgICAgICBhZGRyZXNzOiAiYWRkcmVzcyIgLy8gY3VzdG9tZXIgYWRkcmVzcwoKICAgICAgfSwKICAgICAgdGhlbWU6IHsKICAgICAgICBjb2xvcjogIiMyODM3NzciIC8vIHNjcmVlbiBjb2xvcgoKICAgICAgfQogICAgfTsKICAgIHZhciByenAxID0gbmV3IFJhem9ycGF5KG9wdGlvbnMpOwogICAgcnpwMS5vcGVuKCk7CiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogIH0sCiAgY2hhdF9yZXNwb25zZV9lcnJvcjogZnVuY3Rpb24gY2hhdF9yZXNwb25zZV9lcnJvcigpIHsKICAgIHRoaXMuY2hhdC5wdXNoKHsKICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgcmVjZWl2ZWQ6ICJTb3JyeSBJJ20gbm90IGdldHRpbmcgeW91ciBxdWVzdGlvbiIsCiAgICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpCiAgICB9KTsgLy8gdGhpcy4kc2Vzc2lvbi5zZXQoIkJvdFJlc3BvbnNlX0NvbnZlcnNhdGlvbiIsIHRoaXMuY2hhdCk7CgogICAgdGhpcy51cGRhdGVfc2Nyb2xsYmFyKCJ1cHRvX2VuZCIsICJyZXNwb25zZSIpOwogIH0sCiAgc2VuZF9yZXF1ZXN0X2pzb246IGZ1bmN0aW9uIHNlbmRfcmVxdWVzdF9qc29uKG1lc3NhZ2UpIHsKICAgIHZhciBfYXhpb3MkcG9zdDQsCiAgICAgICAgX3RoaXMxNiA9IHRoaXM7CgogICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9yZXNwb25zZV9jZW5zZSgpLCAoX2F4aW9zJHBvc3Q0ID0gewogICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwKICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDQsICJ0b2tlbiIsIHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0NCwgInJvbGUiLCB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDQsICJyZWZyZXNoZWRfb3JfY2xvc2VkIiwgdGhpcy5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0NCwgImNoYXQiLCAiIiksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDQsICJzb3VyY2UiLCAiV2ViIiksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDQsICJkYXRhIiwgdGhpcy5qc29uX2RhdGFbbWVzc2FnZS5yZXNwb25zZXNbMF0uaW50ZW50XSksIF9heGlvcyRwb3N0NCkpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgX3RoaXMxNi5jaGF0LnB1c2goewogICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgICByZWNlaXZlZDogcmVzcC5kYXRhLnJlc3BvbnNlcy5sZW5ndGggPT0gMCA/ICJTb3JyeSBJJ20gbm90IGdldHRpbmcgeW91ciBxdWVzdGlvbiIgOiByZXNwLmRhdGEucmVzcG9uc2VzWzBdLnRleHQsCiAgICAgICAgdGltZTogX3RoaXMxNi5nZW5lcmF0ZV90aW1lKCksCiAgICAgICAgaW1hZ2U6IHJlc3AuZGF0YS5yZXNwb25zZXNbMF0uaW1nID09ICIiID8gbnVsbCA6IHJlc3AuZGF0YS5yZXNwb25zZXNbMF0uaW1nCiAgICAgIH0pOyAvLyB0aGlzLiRzZXNzaW9uLnNldCgiQm90UmVzcG9uc2VfQ29udmVyc2F0aW9uIiwgdGhpcy5jaGF0KTsKCgogICAgICBfdGhpczE2LnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInJlc3BvbnNlIik7CiAgICB9KTsKICB9LAogIHJlc3BvbnNlX2hhbmRsaW5nOiBmdW5jdGlvbiByZXNwb25zZV9oYW5kbGluZyhyZXNwb25zZSwgdHlwZSkgewogICAgdmFyIGkgPSAwOwogICAgdmFyIGRlbGF5ID0gNTA7CiAgICB2YXIgdm0gPSB0aGlzOwogICAgdm0uaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IHRydWU7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgaGFuZGxlX3Jlc3BvbnNlKCk7CiAgICB9LCBkZWxheSk7CgogICAgZnVuY3Rpb24gaGFuZGxlX3Jlc3BvbnNlKCkgewogICAgICB2YXIgX3RoaXMxNyA9IHRoaXM7CgogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICB2bS5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CgogICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09IG51bGwgfHwgcmVzcG9uc2UuZGF0YS5yZXNwb25zZXMubGVuZ3RoID09IDApIHsKICAgICAgICAgIHZtLmNoYXRfcmVzcG9uc2VfZXJyb3IoKTsKICAgICAgICB9IGVsc2UgaWYgKEJvb2xlYW4ocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0ucmVxdWVzdF9qc29uKSA9PSB0cnVlKSB7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0udGV4dCAhPSBudWxsKSB7CiAgICAgICAgICAgIHZtLmNoYXQucHVzaCh7CiAgICAgICAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgICAgICAgcmVjZWl2aW5nOiB0cnVlLAogICAgICAgICAgICAgIHJlY2VpdmVkOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS50ZXh0LAogICAgICAgICAgICAgIHRpbWU6IHZtLmdlbmVyYXRlX3RpbWUoKSwKICAgICAgICAgICAgICBpbWFnZTogcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uaW1nLAogICAgICAgICAgICAgIHZpZGVvOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS52aWRlbwogICAgICAgICAgICB9KTsgLy8gdm0uJHNlc3Npb24uc2V0KCJCb3RSZXNwb25zZV9Db252ZXJzYXRpb24iLCB2bS5jaGF0KTsKCiAgICAgICAgICAgIHZtLnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInJlc3BvbnNlIik7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmludGVudCA9PSAiZ29neWI0NTBfY3JlYXRlX3RpY2tldCIpIHsKICAgICAgICAgICAgdmFyIF9heGlvcyRwb3N0NTsKCiAgICAgICAgICAgIHZhciBuYW1lID0gIiIuY29uY2F0KHZtLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZmlyc3RfbmFtZSwgIiAiKS5jb25jYXQodm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5sYXN0X25hbWUpOwogICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHsKICAgICAgICAgICAgICB1c2VybmFtZTogbmFtZSwKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IHZtLmNvbXBhbnluYW1lLAogICAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHZtLmNvbXBhbnlpZCwKICAgICAgICAgICAgICB1c2VyX3JvbGU6IHZtLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSwKICAgICAgICAgICAgICBlbWFpbDogdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICB0b2tlbjogdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgdGlja2V0X2lzc3VlOiAiIiwKICAgICAgICAgICAgICB0aWNrZXRfbnVtYmVyOiB2bS50aWNrZXRfbnVtYmVyKCksCiAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgICAgICAgIGZpbGVfY29udGVudDogbnVsbCwKICAgICAgICAgICAgICBmaWxlX25hbWU6IG51bGwsCiAgICAgICAgICAgICAgaXNFZGl0OiBmYWxzZQogICAgICAgICAgICB9OwogICAgICAgICAgICBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7CiAgICAgICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgKF9heGlvcyRwb3N0NSA9IHsKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICB0b2tlbjogdm0uYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlLAogICAgICAgICAgICAgIHVzZXJuYW1lOiB2bS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsCiAgICAgICAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDUsICJ0b2tlbiIsIHZtLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDUsICJyb2xlIiwgdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0NSwgInJlZnJlc2hlZF9vcl9jbG9zZWQiLCB2bS5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0NSwgImNoYXQiLCAiIiksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDUsICJzb3VyY2UiLCAiV2ViIiksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDUsICJkYXRhIiwgcGF5bG9hZCksIF9heGlvcyRwb3N0NSkpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICAgICAgICB2bS5jaGF0LnB1c2goewogICAgICAgICAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgICAgICAgICByZWNlaXZpbmc6IHRydWUsCiAgICAgICAgICAgICAgICByZWNlaXZlZDogcmVzcC5kYXRhLnJlc3BvbnNlcy5sZW5ndGggPT0gMCA/ICJTb3JyeSBJJ20gbm90IGdldHRpbmcgeW91ciBxdWVzdGlvbiIgOiByZXNwLmRhdGEucmVzcG9uc2VzW2ldLnRleHQsCiAgICAgICAgICAgICAgICB0aW1lOiB2bS5nZW5lcmF0ZV90aW1lKCksCiAgICAgICAgICAgICAgICBpbWFnZTogcmVzcC5kYXRhLnJlc3BvbnNlc1tpXS5pbWcsCiAgICAgICAgICAgICAgICB2aWRlbzogcmVzcC5kYXRhLnJlc3BvbnNlc1tpXS52aWRlbyB8fCBudWxsCiAgICAgICAgICAgICAgfSk7IC8vIHZtLiRzZXNzaW9uLnNldCgiQm90UmVzcG9uc2VfQ29udmVyc2F0aW9uIiwgdm0uY2hhdCk7CgogICAgICAgICAgICAgIHZtLm5ld191cGRhdGVfcmVzcG9uc2UoaSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5pbnRlbnQgPT0gImNyZWF0ZV9hcHBvaW50bWVudCIpIHsKICAgICAgICAgICAgdmFyIHRvZGF5X2RhdGUgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5zY2hlZHVsZV9hcHBvaW50bWVudF91cmwoKSwgewogICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdm0uY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgY29tcGFueV9pZDogdm0uY29tcGFueWlkLAogICAgICAgICAgICAgIERhdGU6IHRvZGF5X2RhdGUuZ2V0RnVsbFllYXIoKSArICItIiArICh0b2RheV9kYXRlLmdldE1vbnRoKCkgPCA5ID8gIjAiICsgKHRvZGF5X2RhdGUuZ2V0TW9udGgoKSArIDEpIDogdG9kYXlfZGF0ZS5nZXRNb250aCgpICsgMSkgKyAiLSIgKyB0b2RheV9kYXRlLmdldERhdGUoKSAvLyBNb250aCBvYmplY3QgZG9jdW1lbnQgaXQKICAgICAgICAgICAgICAvLyBEYXRlOiBzdGFydF90aW1lLAoKICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsvLyBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICAvLyB0aGlzLnRpbWVfc2xvdHMgPSB0aGlzLmZ1bGxfdGltZV9zbG90czsKICAgICAgICAgICAgICAvLyBpZiAocmVzcG9uc2UuZGF0YS5TbG90ICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIC8vICAgaWYgKHJlc3BvbnNlLmRhdGEuU2xvdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgLy8gICAgIGxldCBpbmRleDsKICAgICAgICAgICAgICAvLyAgICAgZm9yICh2YXIgaSBpbiByZXNwb25zZS5kYXRhLlNsb3QpIHsKICAgICAgICAgICAgICAvLyAgICAgICBpbmRleCA9IHRoaXMudGltZV9zbG90cy5pbmRleE9mKHJlc3BvbnNlLmRhdGEuU2xvdFtpXSk7CiAgICAgICAgICAgICAgLy8gICAgICAgaWYgKGluZGV4ICE9IC0xKSB7CiAgICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLnRpbWVfc2xvdHMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgICAvLyAgICAgICB9CiAgICAgICAgICAgICAgLy8gICAgIH0KICAgICAgICAgICAgICAvLyAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gICB9CiAgICAgICAgICAgICAgLy8gfQogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZtLnNlbmRfcmVxdWVzdF9qc29uKHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uaW50ZW50ID09ICJyZV9vcmRlcl9wcm9kdWN0c19hY3Rpb24iKSB7CiAgICAgICAgICAvLyB2bS5zZW5kX3JldGFpbF9jdXN0b21lcl9pZCgpOwogICAgICAgICAgdmFyIF9tc2cgPSB7CiAgICAgICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgICAgICB0aW1lOiBpID09IHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzLmxlbmd0aCAtIDEgPyB2bS5nZW5lcmF0ZV90aW1lKCkgOiBudWxsLAogICAgICAgICAgICBhc2tfZmVlZGJhY2s6IEJvb2xlYW4ocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uYXNrX2ZlZWRiYWNrKQogICAgICAgICAgfTsKICAgICAgICAgIF9tc2cucmVjZWl2aW5nID0gdHJ1ZTsKICAgICAgICAgIF9tc2cuZmV0Y2hfc2hvcGlmeV9kZXRhaWxzID0gdHJ1ZTsKICAgICAgICAgIF9tc2cuaXNfcmVmdW5kID0gZmFsc2U7CiAgICAgICAgICBfbXNnLnJldHVybl9zaG9waWZ5X2VtYWlsID0gdHJ1ZTsKICAgICAgICAgIF9tc2cucmVjZWl2ZWQgPSAiUGxlYXNlIGxvZ2luIHdpdGggeW91ciBjcmVkZW50aWFscyBmb3IgYmV0dGVyIGV4cGVyaWVuY2UgOikiOwogICAgICAgICAgX21zZy5tZXRhZGF0YSA9IHsKICAgICAgICAgICAgZW50aXR5OiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5lbnRpdHksCiAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLnRleHQKICAgICAgICAgIH07CiAgICAgICAgICB2bS5jaGF0LnB1c2goX21zZyk7IC8vIHZtLnNlbmRfcmV0YWlsX2N1c3RvbWVyX2lkKG51bGwsZmFsc2UscmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0pOwogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uaW50ZW50ID09ICJzdXBwb3J0X3N1YnNjcmlwdGlvbl9kYXRhIikgewogICAgICAgICAgLy8gdm0uc2VuZF9yZXRhaWxfY3VzdG9tZXJfaWQoKTsKICAgICAgICAgIHZtLnN1cHBvcnRfc3Vic2NyaXB0aW9uX2RhdGEoKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmludGVudCA9PSAicHJvZHVjdF9ieV9kYXRlIikgewogICAgICAgICAgdmFyIF9heGlvcyRwb3N0NjsKCiAgICAgICAgICB2bS5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKICAgICAgICAgIHZhciBjdXRvZmYgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgdmFyIGN1cnJlbnRfZGF0ZV90aW1lID0gbW9tZW50KGN1dG9mZikuZm9ybWF0KCJZWVlZLU1NLUREIEhIOm1tOnNzIik7CiAgICAgICAgICB2YXIgZm9ybV9wYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICB1c3JfbXNnOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS51c3JfbXNnLAogICAgICAgICAgICBjdXJyZW50X3VzZXJfZGF0ZTogY3VycmVudF9kYXRlX3RpbWUKICAgICAgICAgIH0pOwogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9yZXNwb25zZV9jZW5zZSgpLCAoX2F4aW9zJHBvc3Q2ID0gewogICAgICAgICAgICBsaWNlbnNlX2tleTogdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IHZtLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICAgICAgdXNlcm5hbWU6IHZtLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwKICAgICAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDYsICJ0b2tlbiIsIHZtLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDYsICJyb2xlIiwgdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0NiwgInJlZnJlc2hlZF9vcl9jbG9zZWQiLCB2bS5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0NiwgImNoYXQiLCAiL3Byb2R1Y3RfYnlfZGF0ZSIuY29uY2F0KGZvcm1fcGF5bG9hZCkpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3Q2LCAic291cmNlIiwgIldlYiIpLCBfYXhpb3MkcG9zdDYpKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICB2bS5yZXNwb25zZV9oYW5kbGluZyhyZXNwb25zZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKEJvb2xlYW4ocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0ucmV0dXJuX2ludGVudCkgPT0gdHJ1ZSkgewogICAgICAgICAgdmFyIF9heGlvcyRwb3N0NzsKCiAgICAgICAgICBfdGhpczE3LmlzX3R5cGluZ19pbmRpY2F0b3Jfb24gPSB0cnVlOwogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9yZXNwb25zZV9jZW5zZSgpLCAoX2F4aW9zJHBvc3Q3ID0gewogICAgICAgICAgICBsaWNlbnNlX2tleTogdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IHZtLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICAgICAgdXNlcm5hbWU6IHZtLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwKICAgICAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDcsICJ0b2tlbiIsIHZtLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDcsICJyb2xlIiwgdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0NywgInJlZnJlc2hlZF9vcl9jbG9zZWQiLCB2bS5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0NywgImNoYXQiLCAiLyIgKyByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5pbnRlbnQpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3Q3LCAic291cmNlIiwgIldlYiIpLCBfYXhpb3MkcG9zdDcpKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICB2bS5oYW5kbGVfcmVzcG9uc2UocmVzcG9uc2UpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmICh2bS5jb21wYW55aWQgPT0gIjN4NWl2ZTk5NTM0IiAmJiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5pbnRlbnQgIT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmludGVudCA9PSAiY29uZnVzaW9uIikgewogICAgICAgICAgdm0uY29uZnVzaW9uX21lc3NhZ2UoIi9uZWVkX2hlbHAiKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmJ1dHRvbnMgIT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmJ1dHRvbnMubGVuZ3RoID4gMCkgewogICAgICAgICAgdm0ubG9hZF9idXR0b25zKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLCBpLCB0eXBlKTsKICAgICAgICB9IGVsc2UgaWYgKEJvb2xlYW4ocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uY3VzdG9tKSAmJiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5jdXN0b20udHlwZSkgewogICAgICAgICAgLy8gQ0hhbmdlICB0aGUgY29uZGl0aW9uIGhlcmUKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5jdXN0b20udHlwZSAhPSB1bmRlZmluZWQgJiYgcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uY3VzdG9tLnR5cGUgPT0gIm11bHRpc2VsZWN0X2Ryb3Bkb3duIikgewogICAgICAgICAgICB2bS5tdWx0aXNlbGVjdF9sb2FkKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLCBpKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uY3VzdG9tLnR5cGUgIT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmN1c3RvbS50eXBlID09ICJ0YWJsZSIpIHsKICAgICAgICAgICAgdm0ubG9hZF90YWJsZShyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXSwgaSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmN1c3RvbS50eXBlICE9IHVuZGVmaW5lZCAmJiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5jdXN0b20udHlwZSA9PSAicmV0YWlsIikgewogICAgICAgICAgICB2bS5kaXNwbGF5X3Byb2R1Y3RzX2NoYXQocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0sIGksIHR5cGUpOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5jdXN0b20uc2hvd190ZXh0X2FyZWEpIHsKICAgICAgICAgICAgdm0ubG9hZF90ZXh0X2FyZWEocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0sIGkpOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5jdXN0b20uYnV0dG9ucyAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdm0ubG9hZF9idXR0b25zKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmN1c3RvbSwgaSwgdHlwZSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChCb29sZWFuKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLm1lc3NhZ2luZ19wbGF0Zm9ybXMpICYmIHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLm1lc3NhZ2luZ19wbGF0Zm9ybXMubGVuZ3RoID4gMCkgewogICAgICAgICAgdmFyIG1zZyA9IHsKICAgICAgICAgICAgLy8gY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgICAgIHRpbWU6IGkgPT0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZXMubGVuZ3RoIC0gMSA/IHZtLmdlbmVyYXRlX3RpbWUoKSA6IG51bGwsCiAgICAgICAgICAgIGFza19mZWVkYmFjazogQm9vbGVhbihyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5hc2tfZmVlZGJhY2spLAogICAgICAgICAgICBzaG93X21lc3NhZ2luZ19wbGF0Zm9ybXM6IHRydWUsCiAgICAgICAgICAgIG1lc3NhZ2luZ19wbGF0Zm9ybXNfZGF0YTogcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0ubWVzc2FnaW5nX3BsYXRmb3JtcwogICAgICAgICAgfTsKICAgICAgICAgIHZtLmNoYXQucHVzaChtc2cpOwogICAgICAgIH0gZWxzZSBpZiAoQm9vbGVhbihyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5pc19wcmV2aWV3X2Jhbm5lcikpIHsKICAgICAgICAgIHZtLmRpc3BsYXlfYmFubmVyKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzLCBpKTsKICAgICAgICB9IGVsc2UgaWYgKEJvb2xlYW4ocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uaXNfZGlzcGxheV9iYW5uZXIpKSB7CiAgICAgICAgICB2bS5kaXNwbGF5X2Jhbm5lcihyZXNwb25zZS5kYXRhLnJlc3BvbnNlcywgaSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgICAgICB0aW1lOiBpID09IHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzLmxlbmd0aCAtIDEgPyB2bS5nZW5lcmF0ZV90aW1lKCkgOiBudWxsLAogICAgICAgICAgICBhc2tfZmVlZGJhY2s6IEJvb2xlYW4ocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uYXNrX2ZlZWRiYWNrKQogICAgICAgICAgfTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXMubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgbXNnLnJlY2VpdmVkID0gIlNvcnJ5IHdlIGFyZSBub3QgZ2V0dGluZyB5b3VyIHF1ZXN0aW9uLiI7CiAgICAgICAgICAgIG1zZy5yZWNlaXZpbmcgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS50ZW1wbGF0ZSA9PT0gInV0dGVyX2RlZmF1bHQiKSB7CiAgICAgICAgICAgIG1zZy5yZWNlaXZpbmcgPSB0cnVlOwogICAgICAgICAgICBtc2cucmVjZWl2ZWQgPSByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5tZXNzYWdlLnNwbGl0KCJ7ZW1haWx9Iikuam9pbih2bS5jb250YWN0X2hlbHBfZW1haWwpOwogICAgICAgICAgICB2bS5jaGF0LnB1c2gobXNnKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0udGV4dCAhPSB1bmRlZmluZWQgJiYgdm0udXJsX21hdGNoX3JlZ2V4LnRlc3QocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0udGV4dCkpIHsKICAgICAgICAgICAgdm0uZGlzcGxheV9maWxlX2NoYXQocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0udGV4dCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmdldF9jb21wYW55X2RldGFpbHMgPT09ICJUcnVlIiAmJiByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5pbnRlbnQgPT09ICJjZW5zZV9zdXBwb3J0X3RpY2tldCIpIHsKICAgICAgICAgICAgdmFyIF9heGlvcyRwb3N0ODsKCiAgICAgICAgICAgIHZhciBjX2lkID0gdm0ucmV0dXJuX2RvY3VtZW50X2Nvb2tpZXMoImNvbXBhbnlfaWQiKTsKICAgICAgICAgICAgdmFyIGNfbmFtZSA9IHZtLnJldHVybl9kb2N1bWVudF9jb29raWVzKCJjb21wYW55X25hbWUiKTsKICAgICAgICAgICAgdmFyIGNfZW1haWwgPSB2bS5yZXR1cm5fZG9jdW1lbnRfY29va2llcygiY29tcGFueV9lbWFpbCIpOwogICAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X3Jlc3BvbnNlX2NlbnNlKCksIChfYXhpb3MkcG9zdDggPSB7CiAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHZtLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgdG9rZW46IHZtLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICAgICAgICB1c2VybmFtZTogdm0uJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbAogICAgICAgICAgICB9LCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3Q4LCAidG9rZW4iLCB2bS5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3Q4LCAicm9sZSIsIHZtLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDgsICJyZWZyZXNoZWRfb3JfY2xvc2VkIiwgdm0ucmVmcmVzaGVkX29yX2Nsb3NlZCksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDgsICJjaGF0IiwgSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgIGNvbXBhbnlfaWQ6IGNfaWQsCiAgICAgICAgICAgICAgY29tcGFueV9uYW1lOiBjX25hbWUsCiAgICAgICAgICAgICAgZW1haWw6IGNfZW1haWwKICAgICAgICAgICAgfSkpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3Q4LCAic291cmNlIiwgIldlYiIpLCBfYXhpb3MkcG9zdDgpKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgIHZtLnJlc3BvbnNlX2hhbmRsaW5nKHJlc3BvbnNlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLnRleHQgIT0gdW5kZWZpbmVkICYmICFyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS50ZXh0LmluY2x1ZGVzKCJEb3dubG9hZCB5b3VyIG1hbmlmZXN0IGhlcmUiKSkgewogICAgICAgICAgICBtc2cucmVjZWl2ZWQgPSByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS50ZXh0OwogICAgICAgICAgICBtc2cucmVjZWl2aW5nID0gdHJ1ZTsKICAgICAgICAgICAgbXNnLmltYWdlID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uaW1nOwogICAgICAgICAgICBtc2cuaW1hZ2UgPSByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5pbWFnZTsKICAgICAgICAgICAgbXNnLnZpZGVvcyA9IHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLnZpZGVvIHx8IGZhbHNlOwogICAgICAgICAgICBtc2cub3JkZXJfc3RhdHVzID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0ub3JkZXJfc3RhdHVzOwogICAgICAgICAgICBtc2cuaXNfb3JkZXJfc3RhdHVzID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uaXNfb3JkZXJfc3RhdHVzIHx8IGZhbHNlOwogICAgICAgICAgICBtc2cub2ZmZXJzID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0ub2ZmZXJzIHx8IGZhbHNlOwogICAgICAgICAgICBtc2cuZmV0Y2hfc2hvcGlmeV9kZXRhaWxzID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uZmV0Y2hfc2hvcGlmeV9kZXRhaWxzIHx8IGZhbHNlOwogICAgICAgICAgICBtc2cub3JkZXJfaXRlbXMgPSByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5vcmRlcl9pdGVtczsKICAgICAgICAgICAgbXNnLnNob3BpZnlfZmV0Y2hfY3VzdG9tZXJfaWRfZm9yX29mZmVycyA9IHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLnNob3BpZnlfZmV0Y2hfY3VzdG9tZXJfaWRfZm9yX29mZmVycyB8fCBmYWxzZTsKCiAgICAgICAgICAgIGlmIChtc2cub2ZmZXJzLmxlbmd0aCA8IDEpIHsKICAgICAgICAgICAgICBtc2cub2ZmZXJzID0gZmFsc2U7CiAgICAgICAgICAgICAgbXNnLnJlY2VpdmVkID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0udGV4dDsKICAgICAgICAgICAgfSAvLyBTb3JyeSB3ZSBkbyBub3QgaGF2IGFueSBvZmZlcnMgY3VycmVudGx5LCBwbGVhc2UgY2hlY2sgYmFjayBsYXRlci4iOwoKCiAgICAgICAgICAgIHZtLmNoYXQucHVzaChtc2cpOwogICAgICAgICAgICB2bS5uZXdfdXBkYXRlX3Jlc3BvbnNlKGkpOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5pbnRlbnQgPT0gImNoYXRfc3VwcG9ydCIpIHsKICAgICAgICAgICAgdm0uc3RhcnRfbGl2ZV9jaGF0KCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLnRleHQgIT0gdW5kZWZpbmVkICYmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS50ZXh0LmluY2x1ZGVzKCJEb3dubG9hZCB5b3VyIG1hbmlmZXN0IGhlcmUiKSB8fCByZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS50ZXh0LmluY2x1ZGVzKC8ucGRmLykpKSB7CiAgICAgICAgICAgIHZtLmRpc3BsYXlfZmlsZV9jaGF0KHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldKTsKICAgICAgICAgIH0gZWxzZSBpZiAoQm9vbGVhbihyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5wcm9kdWN0cykgJiYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLnByb2R1Y3RzLmxlbmd0aCA+IDAgfHwgT2JqZWN0LmtleXMocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0ucHJvZHVjdHMpLmxlbmd0aCkpIHsKICAgICAgICAgICAgdm0uZGlzcGxheV9wcm9kdWN0c19jaGF0KHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLCBpLCB0eXBlKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uaXNfcmVmdW5kID09ICJUcnVlIikgewogICAgICAgICAgICB2bS5sb2FkX3JlZnVuZHMocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1tpXS5zaG9waWZ5X2ZldGNoX2N1c3RvbWVyX2lkID09PSB0cnVlKSB7CiAgICAgICAgICAgIHZtLnJldGFpbF9jaGVja19jdXN0b21lcl9sb2dnZWRfaW4oKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uaW1hZ2UgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG1zZy5pbWFnZSA9IHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmltYWdlOwogICAgICAgICAgICBtc2cucmVjZWl2aW5nID0gdHJ1ZTsKICAgICAgICAgICAgdm0uY2hhdC5wdXNoKG1zZyk7CiAgICAgICAgICAgIHZtLm5ld191cGRhdGVfcmVzcG9uc2UoaSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLnZpZGVvICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgICBtc2cudmlkZW9zID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0udmlkZW8gfHwgZmFsc2U7CiAgICAgICAgICAgIG1zZy5yZWNlaXZpbmcgPSB0cnVlOwogICAgICAgICAgICB2bS5jaGF0LnB1c2gobXNnKTsKICAgICAgICAgICAgdm0ubmV3X3VwZGF0ZV9yZXNwb25zZShpKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uY2FyZCAhPSB1bmRlZmluZWQgJiYgcmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbaV0uY2FyZC5sZW5ndGggIT09IDApIHsKICAgICAgICAgICAgbXNnLmNhcm91c2VsX2NhcmRfbGlzdCA9IHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzW2ldLmNhcmQ7CiAgICAgICAgICAgIHZtLmNoYXQucHVzaChtc2cpOwogICAgICAgICAgICB2bS5uZXdfdXBkYXRlX3Jlc3BvbnNlKGkpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGkgPCByZXNwb25zZS5kYXRhLnJlc3BvbnNlcy5sZW5ndGggLSAxKSB7CiAgICAgICAgICBpICs9IDE7CiAgICAgICAgICB2bS5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKICAgICAgICAgIGRlbGF5ID0gNTAwOwogICAgICAgICAgaGFuZGxlX3Jlc3BvbnNlKCk7CiAgICAgICAgfQogICAgICB9LCBkZWxheSk7CiAgICB9CiAgfSwKICBkaXNwbGF5X2Jhbm5lcjogZnVuY3Rpb24gZGlzcGxheV9iYW5uZXIocmVzcG9uc2UsIGkpIHsKICAgIHZhciB2bSA9IHRoaXM7CiAgICB2YXIgcG9zaXRpb25fMSA9IHJlc3BvbnNlW2ldLmJhbm5lcl9jb250ZW50X3Bvc2l0aW9uWzBdWyJpZCJdOwogICAgdmFyIHBvc2l0aW9uXzIgPSByZXNwb25zZVtpXS5iYW5uZXJfY29udGVudF9wb3NpdGlvblsxXVsiaWQiXTsKICAgIHZhciBwb3NpdGlvbl8zID0gcmVzcG9uc2VbaV0uYmFubmVyX2NvbnRlbnRfcG9zaXRpb25bMl1bImlkIl07CiAgICB2YXIgaXNfZGF0YV9wb3NpdGlvbl8xID0gcmVzcG9uc2VbaV1bcG9zaXRpb25fMV07CiAgICB2YXIgaXNfZGF0YV9wb3NpdGlvbl8yID0gcmVzcG9uc2VbaV1bcG9zaXRpb25fMl07CiAgICB2YXIgaXNfZGF0YV9wb3NpdGlvbl8zID0gcmVzcG9uc2VbaV1bcG9zaXRpb25fM107CgogICAgaWYgKEJvb2xlYW4oaXNfZGF0YV9wb3NpdGlvbl8xKSkgewogICAgICB2YXIgbXNnID0gewogICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgIHRpbWU6IGkgPT0gcmVzcG9uc2UubGVuZ3RoIC0gMSAmJiAhKEJvb2xlYW4oaXNfZGF0YV9wb3NpdGlvbl8yKSB8fCBCb29sZWFuKGlzX2RhdGFfcG9zaXRpb25fMykpID8gdm0uZ2VuZXJhdGVfdGltZSgpIDogbnVsbCwKICAgICAgICBhc2tfZmVlZGJhY2s6IEJvb2xlYW4ocmVzcG9uc2VbaV0uYXNrX2ZlZWRiYWNrKSwKICAgICAgICBiYW5uZXJfaW1nX2xpbms6IHJlc3BvbnNlW2ldLmJhbm5lcl9pbWdfbGluawogICAgICB9OwogICAgICBtc2cuc2hvd19ib3RfaW1nID0gdHJ1ZTsKICAgICAgbXNnWyJzaG93XyIgKyBwb3NpdGlvbl8xXSA9IHRydWU7CiAgICAgIG1zZ1twb3NpdGlvbl8xXSA9IGlzX2RhdGFfcG9zaXRpb25fMTsKICAgICAgdm0uY2hhdC5wdXNoKG1zZyk7CiAgICAgIHZtLm5ld191cGRhdGVfcmVzcG9uc2UoaSk7CgogICAgICBpZiAoQm9vbGVhbihpc19kYXRhX3Bvc2l0aW9uXzIpKSB7CiAgICAgICAgdmFyIG1zZyA9IHsKICAgICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgICAgdGltZTogaSA9PSByZXNwb25zZS5sZW5ndGggLSAxICYmICFCb29sZWFuKGlzX2RhdGFfcG9zaXRpb25fMykgPyB2bS5nZW5lcmF0ZV90aW1lKCkgOiBudWxsLAogICAgICAgICAgYXNrX2ZlZWRiYWNrOiBCb29sZWFuKHJlc3BvbnNlW2ldLmFza19mZWVkYmFjayksCiAgICAgICAgICBiYW5uZXJfaW1nX2xpbms6IHJlc3BvbnNlW2ldLmJhbm5lcl9pbWdfbGluawogICAgICAgIH07CiAgICAgICAgbXNnLnNob3dfYm90X2ltZyA9IGZhbHNlOwogICAgICAgIG1zZ1sic2hvd18iICsgcG9zaXRpb25fMl0gPSB0cnVlOwogICAgICAgIG1zZ1twb3NpdGlvbl8yXSA9IGlzX2RhdGFfcG9zaXRpb25fMjsKICAgICAgICB2bS5jaGF0LnB1c2gobXNnKTsKICAgICAgICB2bS5uZXdfdXBkYXRlX3Jlc3BvbnNlKGkpOwogICAgICB9CgogICAgICBpZiAoQm9vbGVhbihpc19kYXRhX3Bvc2l0aW9uXzMpKSB7CiAgICAgICAgdmFyIG1zZyA9IHsKICAgICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgICAgdGltZTogaSA9PSByZXNwb25zZS5sZW5ndGggLSAxID8gdm0uZ2VuZXJhdGVfdGltZSgpIDogbnVsbCwKICAgICAgICAgIGFza19mZWVkYmFjazogQm9vbGVhbihyZXNwb25zZVtpXS5hc2tfZmVlZGJhY2spLAogICAgICAgICAgYmFubmVyX2ltZ19saW5rOiByZXNwb25zZVtpXS5iYW5uZXJfaW1nX2xpbmsKICAgICAgICB9OwogICAgICAgIG1zZy5zaG93X2JvdF9pbWcgPSBmYWxzZTsKICAgICAgICBtc2dbInNob3dfIiArIHBvc2l0aW9uXzNdID0gdHJ1ZTsKICAgICAgICBtc2dbcG9zaXRpb25fM10gPSBpc19kYXRhX3Bvc2l0aW9uXzM7CiAgICAgICAgdm0uY2hhdC5wdXNoKG1zZyk7CiAgICAgICAgdm0ubmV3X3VwZGF0ZV9yZXNwb25zZShpKTsKICAgICAgfQogICAgfSBlbHNlIGlmIChCb29sZWFuKGlzX2RhdGFfcG9zaXRpb25fMikpIHsKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgICB0aW1lOiBpID09IHJlc3BvbnNlLmxlbmd0aCAtIDEgJiYgIUJvb2xlYW4oaXNfZGF0YV9wb3NpdGlvbl8zKSA/IHZtLmdlbmVyYXRlX3RpbWUoKSA6IG51bGwsCiAgICAgICAgYXNrX2ZlZWRiYWNrOiBCb29sZWFuKHJlc3BvbnNlW2ldLmFza19mZWVkYmFjayksCiAgICAgICAgYmFubmVyX2ltZ19saW5rOiByZXNwb25zZVtpXS5iYW5uZXJfaW1nX2xpbmsKICAgICAgfTsKICAgICAgbXNnLnNob3dfYm90X2ltZyA9IHRydWU7CiAgICAgIG1zZ1sic2hvd18iICsgcG9zaXRpb25fMl0gPSB0cnVlOwogICAgICBtc2dbcG9zaXRpb25fMl0gPSBpc19kYXRhX3Bvc2l0aW9uXzI7CiAgICAgIHZtLmNoYXQucHVzaChtc2cpOwogICAgICB2bS5uZXdfdXBkYXRlX3Jlc3BvbnNlKGkpOwoKICAgICAgaWYgKEJvb2xlYW4oaXNfZGF0YV9wb3NpdGlvbl8zKSkgewogICAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgICAgIHRpbWU6IGkgPT0gcmVzcG9uc2UubGVuZ3RoIC0gMSA/IHZtLmdlbmVyYXRlX3RpbWUoKSA6IG51bGwsCiAgICAgICAgICBhc2tfZmVlZGJhY2s6IEJvb2xlYW4ocmVzcG9uc2VbaV0uYXNrX2ZlZWRiYWNrKSwKICAgICAgICAgIGJhbm5lcl9pbWdfbGluazogcmVzcG9uc2VbaV0uYmFubmVyX2ltZ19saW5rCiAgICAgICAgfTsKICAgICAgICBtc2cuc2hvd19ib3RfaW1nID0gZmFsc2U7CiAgICAgICAgbXNnWyJzaG93XyIgKyBwb3NpdGlvbl8zXSA9IHRydWU7CiAgICAgICAgbXNnW3Bvc2l0aW9uXzNdID0gaXNfZGF0YV9wb3NpdGlvbl8zOwogICAgICAgIHZtLmNoYXQucHVzaChtc2cpOwogICAgICAgIHZtLm5ld191cGRhdGVfcmVzcG9uc2UoaSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoQm9vbGVhbihpc19kYXRhX3Bvc2l0aW9uXzMpKSB7CiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgdGltZTogaSA9PSByZXNwb25zZS5sZW5ndGggLSAxID8gdm0uZ2VuZXJhdGVfdGltZSgpIDogbnVsbCwKICAgICAgICBhc2tfZmVlZGJhY2s6IEJvb2xlYW4ocmVzcG9uc2VbaV0uYXNrX2ZlZWRiYWNrKSwKICAgICAgICBiYW5uZXJfaW1nX2xpbms6IHJlc3BvbnNlW2ldLmJhbm5lcl9pbWdfbGluawogICAgICB9OwogICAgICBtc2cuc2hvd19ib3RfaW1nID0gdHJ1ZTsKICAgICAgbXNnWyJzaG93XyIgKyBwb3NpdGlvbl8zXSA9IHRydWU7CiAgICAgIG1zZ1twb3NpdGlvbl8zXSA9IGlzX2RhdGFfcG9zaXRpb25fMzsKICAgICAgdm0uY2hhdC5wdXNoKG1zZyk7CiAgICAgIHZtLm5ld191cGRhdGVfcmVzcG9uc2UoaSk7CiAgICB9CiAgfSwKICBwdXNoX21zZzogZnVuY3Rpb24gcHVzaF9tc2cocmVzcG9uc2VzLCByZXNwb25zZSkgewogICAgdmFyIF90aGlzMTggPSB0aGlzOwoKICAgIHZhciBpbmRleCA9IDA7CiAgICB2YXIgdm0gPSB0aGlzOwogICAgdmFyIGRlbGF5ID0gNTA7CgogICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkgewogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgbXNnID0gcmVzcG9uc2VbaV07CiAgICAgICAgdm0uaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IHRydWU7CiAgICAgICAgdm0uaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwoKICAgICAgICBpZiAocmVzcG9uc2VzLmRhdGEucmVzcG9uc2VzW2ldLmJ1dHRvbnMgIT0gdW5kZWZpbmVkICYmIEJvb2xlYW4ocmVzcG9uc2VzLmRhdGEucmVzcG9uc2VzW2ldLmJ1dHRvbnMubGVuZ3RoID4gMCkpIHsKICAgICAgICAgIHZtLmxvYWRfYnV0dG9ucyhyZXNwb25zZXMuZGF0YS5yZXNwb25zZXNbaV0sICJpc19idXR0b24iLCAid2VsY29tZV9tZXNzYWdlIiwgdHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZtLmNoYXQucHVzaCh7CiAgICAgICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgICAgICByZWNlaXZpbmc6IHRydWUsCiAgICAgICAgICAgIHJlY2VpdmVkOiBtc2cudGV4dCwKICAgICAgICAgICAgb2ZmZXJzOiBtc2cub2ZmZXJzIHx8IGZhbHNlLAogICAgICAgICAgICB0aW1lOiBpID09IHJlc3BvbnNlLmxlbmd0aCAtIDEgPyB2bS5nZW5lcmF0ZV90aW1lKCkgOiB1bmRlZmluZWQKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKF90aGlzMTguZ3JlZXRpbmdfYnV0dG9uc19wb3NpdGlvbiA9PSBpKSB7CiAgICAgICAgICBpZiAodm0uaXNfcmV0YWlsX2JvdCkgdm0ubG9hZF9jaGF0Ym90X2ludGVncmF0aW9uX2RldGFpbHMoKTsKICAgICAgICB9CiAgICAgIH0sIGkgKiAxMDUwKTsKICAgICAgJCgiLnRpbWUiKS5sYXN0KCkuY3NzKCJkaXNwbGF5IiwgIm5vbmUiKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgiLnRpbWUiKS5sYXN0KCkuY3NzKCJkaXNwbGF5IiwgImJsb2NrIik7CgogICAgICAgIGlmIChpIDwgcmVzcG9uc2UubGVuZ3RoIC0gMSkge30gZWxzZSB7CiAgICAgICAgICB2bS53ZWxjb21lX21lc3NhZ2Vfbm90X3lldF9yZWNlaXZlZCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSwgNTAwKTsKICAgIH07CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNwb25zZS5sZW5ndGg7IGkrKykgewogICAgICBfbG9vcChpKTsKICAgIH0KCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgdm0uZGVtb19yZXRhaWxfcXVlc3Rpb24oKTsKICAgIH0sIGRlbGF5KTsKICB9LAogIGNvbmZ1c2lvbl9tZXNzYWdlOiBmdW5jdGlvbiBjb25mdXNpb25fbWVzc2FnZShtc2dfc3RyaW5nKSB7CiAgICB2YXIgX3RoaXMxOSA9IHRoaXM7CgogICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9yZXNwb25zZV9jZW5zZSgpLCB7CiAgICAgIGNoYXQ6IG1zZ19zdHJpbmcsCiAgICAgIHRva2VuOiB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgc291cmNlOiAiV2ViIiwKICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgZGF0YTogIiIsCiAgICAgIHJvbGU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlLAogICAgICByZWZyZXNoZWRfb3JfY2xvc2VkOiBmYWxzZQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgX3RoaXMxOS5yZXNwb25zZV9oYW5kbGluZyhyZXNwb25zZSk7CiAgICB9KTsKICB9LAogIGRpc3BsYXlfcHJvZHVjdHNfY2hhdDogZnVuY3Rpb24gZGlzcGxheV9wcm9kdWN0c19jaGF0KG1lc3NhZ2UsIGluZGV4LCB0eXBlKSB7CiAgICB2YXIgX3RoaXMyMCA9IHRoaXM7CgogICAgdmFyIG1zZyA9IHsKICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpCiAgICB9OwoKICAgIGlmIChtZXNzYWdlLnByb2R1Y3RzLmlzX3Byb2R1Y3RzX2xpc3QpIHsKICAgICAgbXNnLmlzX3Byb2R1Y3RzX2xpc3QgPSBtZXNzYWdlLnByb2R1Y3RzLmlzX3Byb2R1Y3RzX2xpc3Q7CiAgICAgIG1zZy5wcm9kdWN0c19saXN0ID0gbWVzc2FnZS5wcm9kdWN0cy5wcm9kdWN0c19saXN0OwoKICAgICAgaWYgKG1lc3NhZ2UucHJvZHVjdHMucHJvZHVjdHNfbGlzdC5sZW5ndGggPT09IDApIHsKICAgICAgICBtc2cucmVjZWl2ZWQgPSAiU29ycnksIHdlIGNvdWxkIG5vdCBmaW5kIHdoYXQgeW91IHNlYXJjaGVkIGZvciI7CiAgICAgICAgbXNnLnJlY2VpdmluZyA9IHRydWU7CiAgICAgIH0KCiAgICAgIGlmIChCb29sZWFuKG1lc3NhZ2UucHJvZHVjdHMudGV4dCkgPT09IHRydWUpIHsKICAgICAgICBtc2cucmVjZWl2ZWQgPSBtZXNzYWdlLnByb2R1Y3RzLnRleHQ7CiAgICAgICAgbXNnLnJlY2VpdmluZyA9IHRydWU7CiAgICAgIH0KCiAgICAgIHRoaXMucHJvZHVjdF9vdXRfb2Zfc3RvY2tfbGlzdCA9IFtdOwoKICAgICAgaWYgKHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gInNob3BpZnkiKSB7CiAgICAgICAgbXNnLnByb2R1Y3RzX2xpc3QuZm9yRWFjaChmdW5jdGlvbiAocHJvZHVjdCkgewogICAgICAgICAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgcHJvZHVjdC52YXJpYXRpb25zLmxlbmd0aDsgX2k0KyspIHsKICAgICAgICAgICAgX3RoaXMyMC5wcm9kdWN0X2xpc3QucHVzaCh7CiAgICAgICAgICAgICAgcHJvZHVjdF9pZDogcHJvZHVjdC52YXJpYXRpb25zW19pNF0uaWQsCiAgICAgICAgICAgICAgcHJvZHVjdF90aXRsZTogcHJvZHVjdC50aXRsZSwKICAgICAgICAgICAgICB2YXJpYW50X3RpdGxlOiBwcm9kdWN0LnZhcmlhdGlvbnNbX2k0XS52YXJpYW50X3RpdGxlLAogICAgICAgICAgICAgIHZhcmlhbnRfaWQ6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTRdLmlkLAogICAgICAgICAgICAgIHN0b2NrX3N0YXR1czogcHJvZHVjdC52YXJpYXRpb25zW19pNF0uc3RvY2tfc3RhdHVzIHx8ICJpbnN0b2NrIiwKICAgICAgICAgICAgICBiYWNrX2luX3N0b2NrOiBmYWxzZSwKICAgICAgICAgICAgICBwcm9kdWN0SW1hZ2U6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTRdLmltZ191cmwgPT0gbnVsbCA/IHByb2R1Y3QuaW1nX3VybCA6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTRdLmltZ191cmwsCiAgICAgICAgICAgICAgb25saW5lU3RvcmVVUkw6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTRdLnBlcm1hbGluawogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmICh0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJ3b29jb21tZXJjZSIpIHsKICAgICAgICBtc2cucHJvZHVjdHNfbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgICBpZiAocHJvZHVjdC52YXJpYXRpb25zICYmIHByb2R1Y3QudmFyaWF0aW9ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGZvciAodmFyIF9pNSA9IDA7IF9pNSA8IHByb2R1Y3QudmFyaWF0aW9ucy5sZW5ndGg7IF9pNSsrKSB7CiAgICAgICAgICAgICAgX3RoaXMyMC5wcm9kdWN0X2xpc3QucHVzaCh7CiAgICAgICAgICAgICAgICBwcm9kdWN0X2lkOiBwcm9kdWN0LmlkLAogICAgICAgICAgICAgICAgcHJvZHVjdF90aXRsZTogcHJvZHVjdC50aXRsZSwKICAgICAgICAgICAgICAgIHZhcmlhbnRfdGl0bGU6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTVdLnZhcmlhbnRfdGl0bGUsCiAgICAgICAgICAgICAgICB2YXJpYW50X2lkOiBwcm9kdWN0LnZhcmlhdGlvbnNbX2k1XS5pZCwKICAgICAgICAgICAgICAgIHN0b2NrX3N0YXR1czogcHJvZHVjdC52YXJpYXRpb25zW19pNV0uc3RvY2tfc3RhdHVzIHx8ICJpbnN0b2NrIiwKICAgICAgICAgICAgICAgIGJhY2tfaW5fc3RvY2s6IGZhbHNlLAogICAgICAgICAgICAgICAgcHJvZHVjdEltYWdlOiBwcm9kdWN0LnZhcmlhdGlvbnNbX2k1XS5pbWdfdXJsID09IG51bGwgPyBwcm9kdWN0LmltZ191cmwgOiBwcm9kdWN0LnZhcmlhdGlvbnNbX2k1XS5pbWdfdXJsLAogICAgICAgICAgICAgICAgb25saW5lU3RvcmVVUkw6IHByb2R1Y3QucGVybWFsaW5rCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzMjAucHJvZHVjdF9saXN0LnB1c2goewogICAgICAgICAgICAgIHByb2R1Y3RfaWQ6IHByb2R1Y3QuaWQsCiAgICAgICAgICAgICAgcHJvZHVjdF90aXRsZTogcHJvZHVjdC50aXRsZSwKICAgICAgICAgICAgICB2YXJpYW50X3RpdGxlOiBudWxsLAogICAgICAgICAgICAgIHZhcmlhbnRfaWQ6IG51bGwsCiAgICAgICAgICAgICAgc3RvY2tfc3RhdHVzOiBwcm9kdWN0LnN0b2NrX3N0YXR1cyB8fCAiaW5zdG9jayIsCiAgICAgICAgICAgICAgYmFja19pbl9zdG9jazogZmFsc2UsCiAgICAgICAgICAgICAgcHJvZHVjdEltYWdlOiBwcm9kdWN0LmltZ191cmwsCiAgICAgICAgICAgICAgb25saW5lU3RvcmVVUkw6IHByb2R1Y3QucGVybWFsaW5rCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gIm1hZ2VudG8iKSB7CiAgICAgICAgbXNnLnByb2R1Y3RzX2xpc3QuZm9yRWFjaChmdW5jdGlvbiAocHJvZHVjdCkgewogICAgICAgICAgaWYgKHByb2R1Y3QudmFyaWF0aW9ucyAmJiBwcm9kdWN0LnZhcmlhdGlvbnMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBmb3IgKHZhciBfaTYgPSAwOyBfaTYgPCBwcm9kdWN0LnZhcmlhdGlvbnMubGVuZ3RoOyBfaTYrKykgewogICAgICAgICAgICAgIF90aGlzMjAucHJvZHVjdF9saXN0LnB1c2goewogICAgICAgICAgICAgICAgcHJvZHVjdF9pZDogcHJvZHVjdC5pZCwKICAgICAgICAgICAgICAgIHByb2R1Y3RfdGl0bGU6IHByb2R1Y3QudGl0bGUsCiAgICAgICAgICAgICAgICB2YXJpYW50X3RpdGxlOiBwcm9kdWN0LnZhcmlhdGlvbnNbX2k2XS52YXJpYW50X3RpdGxlLAogICAgICAgICAgICAgICAgdmFyaWFudF9pZDogcHJvZHVjdC52YXJpYXRpb25zW19pNl0uaWQsCiAgICAgICAgICAgICAgICBzdG9ja19zdGF0dXM6IHByb2R1Y3Quc3RvY2tfc3RhdHVzIHx8ICJpbnN0b2NrIiwKICAgICAgICAgICAgICAgIGJhY2tfaW5fc3RvY2s6IGZhbHNlLAogICAgICAgICAgICAgICAgcHJvZHVjdEltYWdlOiBwcm9kdWN0LnZhcmlhdGlvbnNbX2k2XS5pbWdfdXJsID09IG51bGwgPyBwcm9kdWN0LmltZ191cmwgOiBwcm9kdWN0LnZhcmlhdGlvbnNbX2k2XS5pbWdfdXJsLAogICAgICAgICAgICAgICAgb25saW5lU3RvcmVVUkw6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTZdLnBlcm1hbGluawogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczIwLnByb2R1Y3RfbGlzdC5wdXNoKHsKICAgICAgICAgICAgICBwcm9kdWN0X2lkOiBwcm9kdWN0LmlkLAogICAgICAgICAgICAgIHByb2R1Y3RfdGl0bGU6IHByb2R1Y3QudGl0bGUsCiAgICAgICAgICAgICAgdmFyaWFudF90aXRsZTogbnVsbCwKICAgICAgICAgICAgICB2YXJpYW50X2lkOiBudWxsLAogICAgICAgICAgICAgIHN0b2NrX3N0YXR1czogcHJvZHVjdC5zdG9ja19zdGF0dXMgfHwgImluc3RvY2siLAogICAgICAgICAgICAgIGJhY2tfaW5fc3RvY2s6IGZhbHNlLAogICAgICAgICAgICAgIHByb2R1Y3RJbWFnZTogcHJvZHVjdC5pbWdfdXJsLAogICAgICAgICAgICAgIG9ubGluZVN0b3JlVVJMOiBwcm9kdWN0LnBlcm1hbGluawogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmICh0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJiaWdjb21tZXJjZSIpIHsKICAgICAgICBtc2cucHJvZHVjdHNfbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgICBpZiAocHJvZHVjdC52YXJpYXRpb25zICYmIHByb2R1Y3QudmFyaWF0aW9ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGZvciAodmFyIF9pNyA9IDA7IF9pNyA8IHByb2R1Y3QudmFyaWF0aW9ucy5sZW5ndGg7IF9pNysrKSB7CiAgICAgICAgICAgICAgX3RoaXMyMC5wcm9kdWN0X2xpc3QucHVzaCh7CiAgICAgICAgICAgICAgICBwcm9kdWN0X2lkOiBwcm9kdWN0LmlkLAogICAgICAgICAgICAgICAgcHJvZHVjdF90aXRsZTogcHJvZHVjdC50aXRsZSwKICAgICAgICAgICAgICAgIHZhcmlhbnRfdGl0bGU6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTddLnZhcmlhbnRfdGl0bGUsCiAgICAgICAgICAgICAgICB2YXJpYW50X2lkOiBwcm9kdWN0LnZhcmlhdGlvbnNbX2k3XS5pZCwKICAgICAgICAgICAgICAgIHN0b2NrX3N0YXR1czogcHJvZHVjdC5zdG9ja19zdGF0dXMgfHwgImluc3RvY2siLAogICAgICAgICAgICAgICAgYmFja19pbl9zdG9jazogZmFsc2UsCiAgICAgICAgICAgICAgICBwcm9kdWN0SW1hZ2U6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTddLmltZ191cmwgPT0gbnVsbCA/IHByb2R1Y3QuaW1nX3VybCA6IHByb2R1Y3QudmFyaWF0aW9uc1tfaTddLmltZ191cmwsCiAgICAgICAgICAgICAgICBvbmxpbmVTdG9yZVVSTDogcHJvZHVjdC52YXJpYXRpb25zW19pN10ucGVybWFsaW5rCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzMjAucHJvZHVjdF9saXN0LnB1c2goewogICAgICAgICAgICAgIHByb2R1Y3RfaWQ6IHByb2R1Y3QuaWQsCiAgICAgICAgICAgICAgcHJvZHVjdF90aXRsZTogcHJvZHVjdC50aXRsZSwKICAgICAgICAgICAgICB2YXJpYW50X3RpdGxlOiBudWxsLAogICAgICAgICAgICAgIHZhcmlhbnRfaWQ6IG51bGwsCiAgICAgICAgICAgICAgc3RvY2tfc3RhdHVzOiBwcm9kdWN0LnN0b2NrX3N0YXR1cyB8fCAiaW5zdG9jayIsCiAgICAgICAgICAgICAgYmFja19pbl9zdG9jazogZmFsc2UsCiAgICAgICAgICAgICAgcHJvZHVjdEltYWdlOiBwcm9kdWN0LmltZ191cmwsCiAgICAgICAgICAgICAgb25saW5lU3RvcmVVUkw6IHByb2R1Y3QucGVybWFsaW5rCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICBmb3IgKHZhciBpIGluIG1zZy5wcm9kdWN0c19saXN0KSB7CiAgICAgICAgbXNnLnByb2R1Y3RzX2xpc3RbaV0uYnV5X3F0eSA9IDE7CiAgICAgICAgbXNnLnByb2R1Y3RzX2xpc3RbaV0ub3JkZXJfcXR5ID0gMTsKCiAgICAgICAgaWYgKG1zZy5wcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnMgJiYgbXNnLnByb2R1Y3RzX2xpc3RbaV0udmFyaWF0aW9ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBtc2cucHJvZHVjdHNfbGlzdFtpXS5pZCA9IG1zZy5wcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnNbMF0uaWQ7CiAgICAgICAgICBtc2cucHJvZHVjdHNfbGlzdFtpXS5pbWdfdXJsID0gbXNnLnByb2R1Y3RzX2xpc3RbaV0udmFyaWF0aW9uc1swXS5pbWdfdXJsID09PSBudWxsID8gbXNnLnByb2R1Y3RzX2xpc3RbaV0uaW1nX3VybCA6IG1zZy5wcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnNbMF0uaW1nX3VybDsKICAgICAgICAgIG1zZy5wcm9kdWN0c19saXN0W2ldLnBlcm1hbGluayA9IG1zZy5wcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnNbMF0ucGVybWFsaW5rOwogICAgICAgICAgbXNnLnByb2R1Y3RzX2xpc3RbaV0udmFyaWFudF90aXRsZSA9IG1zZy5wcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnNbMF0udmFyaWFudF90aXRsZTsKICAgICAgICAgIG1zZy5wcm9kdWN0c19saXN0W2ldLnN0b2NrX3F1YW50aXR5ID0gbXNnLnByb2R1Y3RzX2xpc3RbaV0udmFyaWF0aW9uc1swXS5zdG9ja19xdWFudGl0eTsKICAgICAgICAgIG1zZy5wcm9kdWN0c19saXN0W2ldLnN0b2NrX3N0YXR1cyA9IG1zZy5wcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnNbMF0uc3RvY2tfc3RhdHVzOwogICAgICAgICAgbXNnLnByb2R1Y3RzX2xpc3RbaV0ucHJpY2UgPSBtc2cucHJvZHVjdHNfbGlzdFtpXS52YXJpYXRpb25zWzBdLnByaWNlOwogICAgICAgICAgbXNnLnByb2R1Y3RzX2xpc3RbaV0ucmVndWxhcl9wcmljZSA9IG1zZy5wcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnNbMF0ucmVndWxhcl9wcmljZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIG1zZy5uZXdfcHJvZHVjdHMgPSB0cnVlOwogICAgICB0aGlzLnNob3dfY3VzdG9tX2NhcnQgPSB0cnVlOwogICAgICB2YXIgbmV3bGlzdCA9IHRoaXMucHJvZHVjdF9saXN0LmZpbHRlcihmdW5jdGlvbiAocHJvZHVjdCkgewogICAgICAgIHJldHVybiBwcm9kdWN0WyJzdG9ja19zdGF0dXMiXSA9PT0gIm91dG9mc3RvY2siOwogICAgICB9KTsKICAgICAgbXNnLnByb2R1Y3Rfb3V0X29mX3N0b2NrX2xpc3QgPSBuZXdsaXN0OwoKICAgICAgaWYgKG1zZy5wcm9kdWN0X291dF9vZl9zdG9ja19saXN0Lmxlbmd0aCA+IDAgJiYgIXRoaXMuZGlzcGxheV9wcm9kdWN0c19vbl9sYW5kaW5nKSB7CiAgICAgICAgbXNnLnByb2R1Y3Rfb3V0X29mX3N0b2NrID0gdHJ1ZTsKICAgICAgfQoKICAgICAgdGhpcy5kaXNwbGF5X3Byb2R1Y3RzX29uX2xhbmRpbmcgPSBmYWxzZTsKCiAgICAgIGlmICh0eXBlID09PSAiZGlzcGxheV9zdWNjZXNzX3RvYXN0ciIpIHsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHN3YWwoewogICAgICAgICAgICB0ZXh0OiAiVGVzdGluZyBDb21wbGV0ZWQgU3VjY2Vzc2Z1bGx5ISBQbGVhc2UgUHJvY2VlZCB0byB0aGUgbmV4dCBzdGVwLiIsCiAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgIHRpbWVyOiA1MDAwLAogICAgICAgICAgICB0aW1lclByb2dyZXNzQmFyOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICB9LCAxMjAwKTsKICAgICAgfQogICAgfSBlbHNlIGlmIChtZXNzYWdlLnByb2R1Y3RzLmxlbmd0aCkgewogICAgICBtc2cuaXNwcm9kdWN0ID0gdHJ1ZTsKICAgICAgbXNnLmVsZW1lbnRzID0gbWVzc2FnZTsKICAgIH0KCiAgICB0aGlzLmNoYXQucHVzaChtc2cpOyAvLyB0aGlzLiRzZXNzaW9uLnNldCgiQm90UmVzcG9uc2VfQ29udmVyc2F0aW9uIiwgdGhpcy5jaGF0KTsKCiAgICB0aGlzLm5ld191cGRhdGVfcmVzcG9uc2UoaW5kZXgpOwogICAgdGhpcy5wcm9kdWN0X2xpc3QgPSBbXTsKICB9LAogIGRpc3BsYXlfZmlsZV9jaGF0OiBmdW5jdGlvbiBkaXNwbGF5X2ZpbGVfY2hhdChtZXNzYWdlKSB7CiAgICB2YXIgbXNnID0gewogICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgdGltZTogdGhpcy5nZW5lcmF0ZV90aW1lKCkKICAgIH07CiAgICB2YXIgdGVtcCA9IG1lc3NhZ2Uuc3BsaXQoIkRvd25sb2FkIHlvdXIgbWFuaWZlc3QgaGVyZSAiKTsKICAgIHZhciB1cmwgPSBtZXNzYWdlLm1hdGNoKHRoaXMudXJsX21hdGNoX3JlZ2V4KVswXTsKICAgIG1zZy51cmwgPSBtZXNzYWdlLmluY2x1ZGVzKCJEb3dubG9hZCB5b3VyIG1hbmlmZXN0IGhlcmUgIikgPyB0ZW1wWzFdIDogdXJsOwogICAgbXNnLnJlY2VpdmluZyA9IGZhbHNlOwogICAgbXNnLmZpbGVfbmFtZSA9IHVybC5zcGxpdCgvXi4qW1xcXC9dLylbMV0uc3BsaXQoIi8iKS5wb3AoKS5zcGxpdCgiPyIpWzBdOwogICAgdGhpcy5jaGF0LnB1c2gobXNnKTsgLy8gdGhpcy4kc2Vzc2lvbi5zZXQoIkJvdFJlc3BvbnNlX0NvbnZlcnNhdGlvbiIsIHRoaXMuY2hhdCk7CgogICAgdGhpcy51cGRhdGVfc2Nyb2xsYmFyKCJ1cHRvX2VuZCIsICJyZXNwb25zZSIpOwogIH0sCiAgZ2VuZXJhdGVfb3JkZXJfZGV0YWlsczogZnVuY3Rpb24gZ2VuZXJhdGVfb3JkZXJfZGV0YWlscyhvcmRlcikge30sCiAgYWRkZHJvcGRvd252YWx1ZTogZnVuY3Rpb24gYWRkZHJvcGRvd252YWx1ZSh2YWx1ZSkgewogICAgdmFyIF90aGlzMjEgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBpLCBwYXJzZWRKc29uOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX3RoaXMyMS5zZWxlY3RlZF9pbmRpY2F0aW9uID0gdmFsdWU7CgogICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBfdGhpczIxLnRvX3NlbmQgPSAiIjsKICAgICAgICAgICAgICAgIF90aGlzMjEucmVzID0ge307CgogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IF90aGlzMjEuc2VsZWN0ZWRfaW5kaWNhdGlvbi5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICBwYXJzZWRKc29uID0gSlNPTi5wYXJzZSgieyIuY29uY2F0KF90aGlzMjEuc2VsZWN0ZWRfaW5kaWNhdGlvbltpXS52YWx1ZS5zcGxpdCgieyIpWzFdKSk7CgogICAgICAgICAgICAgICAgICBpZiAoaSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS50b19zZW5kID0gX3RoaXMyMS5zZWxlY3RlZF9pbmRpY2F0aW9uW2ldLnRpdGxlOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIF90aGlzMjEudG9fc2VuZCA9IF90aGlzMjEudG9fc2VuZCArICIsICIgKyBfdGhpczIxLnNlbGVjdGVkX2luZGljYXRpb25baV0udGl0bGU7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGlmIChfdGhpczIxLnJlc1tPYmplY3Qua2V5cyhwYXJzZWRKc29uKVswXS50b1N0cmluZygpXSA9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpczIxLnJlc1tPYmplY3Qua2V5cyhwYXJzZWRKc29uKVswXS50b1N0cmluZygpXSA9IE9iamVjdC52YWx1ZXMocGFyc2VkSnNvbilbMF0udG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdGhpczIxLnJlc1tPYmplY3Qua2V5cyhwYXJzZWRKc29uKVswXS50b1N0cmluZygpXSA9IF90aGlzMjEucmVzW09iamVjdC5rZXlzKHBhcnNlZEpzb24pWzBdLnRvU3RyaW5nKCldICsgIiwiICsgT2JqZWN0LnZhbHVlcyhwYXJzZWRKc29uKVswXS50b1N0cmluZygpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3RoaXMyMS5idXR0b25fZmlsbCgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfdGhpczIxLnRvX3NlbmQgPSAiIjsKICAgICAgICAgICAgICAgIF90aGlzMjEucmVzID0ge307CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpczIxLmJ1dHRvbl9maWxsKCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBidXR0b25fZmlsbDogZnVuY3Rpb24gYnV0dG9uX2ZpbGwoKSB7CiAgICBpZiAodGhpcy50b19zZW5kID09ICIiKSB7CiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzZW5kX2J1dHRvbiIpLmNsYXNzTGlzdC5yZW1vdmUoImZpbGxlZCIpOwogICAgfSBlbHNlIGlmICh0aGlzLnRvX3NlbmQgIT0gIiIpIHsKICAgICAgaWYgKHRoaXMubGl2ZV9jaGF0X29uKSB7CiAgICAgICAgdGhpcy5jaGFubmVsLnB1c2goInN0YXJ0ZWRfdHlwaW5nIik7CiAgICAgICAgdGhpcy5zdG9wX3R5cGluZyh0aGlzKTsKICAgICAgfQoKICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3NlbmRfYnV0dG9uIikuY2xhc3NMaXN0LmFkZCgiZmlsbGVkIik7CiAgICB9CiAgfSwKICBzdG9wX3R5cGluZzogZGVib3VuY2UoZnVuY3Rpb24gKHZtKSB7CiAgICB2bS5jaGFubmVsLnB1c2goInN0b3BwZWRfdHlwaW5nIik7CiAgfSwgMTAwMCksCiAgc2Nyb2xsX2Rvd246IGZ1bmN0aW9uIHNjcm9sbF9kb3duKCkgewogICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5jaGF0LWJvZHkiKS5zY3JvbGxIZWlnaHQgLSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuY2hhdC1ib2R5Iikuc2Nyb2xsVG9wIDw9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5jaGF0LWJvZHkiKS5jbGllbnRIZWlnaHQpIHsKICAgICAgdGhpcy50b19zY3JvbGwgPSBmYWxzZTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMudG9fc2Nyb2xsID0gdHJ1ZTsKICAgIH0KICB9LAogIGxvYWRfYnV0dG9uczogZnVuY3Rpb24gbG9hZF9idXR0b25zKG1lc3NhZ2UsIGluZGV4LCB0eXBlLCBncmVldGluZ19idXR0b24pIHsKICAgIHZhciBfdGhpczIyID0gdGhpczsKCiAgICBpZiAodHlwZSA9PT0gImRpc3BsYXlfc3VjY2Vzc190b2FzdHIiKSB7CiAgICAgIHN3YWwoewogICAgICAgIHRleHQ6ICJTb21lIGVycm9yIG9jY3VycmVkIHdoaWxlIHRlc3RpbmcuIiwKICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICB0aW1lcjogNTAwMAogICAgICB9KTsKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgICB0aW1lOiB0aGlzLmdlbmVyYXRlX3RpbWUoKSwKICAgICAgICBhc2tfZmVlZGJhY2s6IGZhbHNlLAogICAgICAgIHJlY2VpdmVkOiAiU29tZSBlcnJvciBvY2N1cnJlZCB3aGlsZSB0ZXN0aW5nLiBQbGVhc2UgdHJ5IGJ5IHJlZnJlc2hpbmcgdGhlIGJyb3dzZXIhIElmIHRoZSBpc3N1ZSBwZXJzaXN0cywgcGxlYXNlIGNvbnRhY3Qgc3lzdGVtIGFkbWluLiIsCiAgICAgICAgcmVjZWl2aW5nOiB0cnVlCiAgICAgIH07CiAgICAgIHRoaXMuY2hhdC5wdXNoKG1zZyk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgbXNnID0gewogICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgYnV0dG9uc19saXN0OiBbXSwKICAgICAgYnV0dG9uX3ByZWZpeDogbWVzc2FnZS5wcmVmaXgsCiAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgcmVjZWl2ZWQ6IG1lc3NhZ2UudGV4dCwKICAgICAgdGltZTogbnVsbCwKICAgICAgcmVtb3ZhYmxlOiB0eXBlID09ICJ3ZWxjb21lX21lc3NhZ2UiID8gZmFsc2UgOiB0cnVlCiAgICB9OwoKICAgIGlmIChCb29sZWFuKGdyZWV0aW5nX2J1dHRvbikpIHsKICAgICAgbXNnLmdyZWV0aW5nX2J1dHRvbiA9IGZhbHNlOwogICAgfSBlbHNlIHsKICAgICAgbXNnLmN1c3RvbV9idXR0b25zID0gZmFsc2U7CiAgICB9CgogICAgaWYgKG1lc3NhZ2UuYnV0dG9ucy5sZW5ndGggPT0gMykgewogICAgICBpZiAobWVzc2FnZS5idXR0b25zWzBdLnRpdGxlID09ICJFeGNoYW5nZSBSYXRlIiAmJiBtZXNzYWdlLmJ1dHRvbnNbMV0udGl0bGUgPT0gIlRyYWNrIE15IFBhcmNlbCIgJiYgbWVzc2FnZS5idXR0b25zWzJdLnRpdGxlID09ICJDYWxsIEhlbHBkZXNrIikgewogICAgICAgIG1zZy5yZW1vdmFibGUgPSBmYWxzZTsKICAgICAgfQogICAgfQoKICAgIGZvciAodmFyIGkgaW4gbWVzc2FnZS5idXR0b25zKSB7CiAgICAgIGlmIChtc2cuYnV0dG9uX3ByZWZpeCAhPSBudWxsKSB7CiAgICAgICAgbXNnLmJ1dHRvbnNfbGlzdC5wdXNoKHsKICAgICAgICAgIHRpdGxlOiBtZXNzYWdlLmJ1dHRvbnNbaV0udGl0bGUsCiAgICAgICAgICB2YWx1ZTogbXNnLmJ1dHRvbl9wcmVmaXggKyBtZXNzYWdlLmJ1dHRvbnNbaV0udmFsdWUsCiAgICAgICAgICB0eXBlOiBCb29sZWFuKG1lc3NhZ2UuYnV0dG9uc1tpXS50eXBlKSA/IG1lc3NhZ2UuYnV0dG9uc1tpXS50eXBlIDogJycKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBtc2cuYnV0dG9uc19saXN0LnB1c2goewogICAgICAgICAgdGl0bGU6IG1lc3NhZ2UuYnV0dG9uc1tpXS50aXRsZSwKICAgICAgICAgIHZhbHVlOiBtZXNzYWdlLmJ1dHRvbnNbaV0udmFsdWUsCiAgICAgICAgICB0eXBlOiBtZXNzYWdlLmJ1dHRvbnNbaV0udHlwZQogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAobXNnLmJ1dHRvbnNfbGlzdFtpXS50aXRsZSA9PSAiTm8iICYmIG1lc3NhZ2UudGV4dCAhPSAiQ2FuIEkgaGVscCB5b3Ugd2l0aCBhbnl0aGluZyBlbHNlPyIgJiYgdGhpcy5jb21wYW55aWQgPT0gImNsaW5pY2FsdHJpYWxzODEzNTIiKSB7CiAgICAgICAgbXNnLmJ1dHRvbnNfbGlzdFtpXS52YWx1ZSA9ICJpc2Rpc2FibGVkIjsKICAgICAgfQogICAgfQoKICAgIHZhciBjaGF0SW5kZXggPSB0aGlzLmNoYXQucHVzaChtc2cpOwoKICAgIGlmIChpbmRleCA9PSAiaXNfYnV0dG9uIiB8fCBpbmRleCA9PSAwKSB7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIGlmICgkKCIuY2hhdC1ib2R5IikuY2hpbGRyZW4oKS5sYXN0KCkuaGVpZ2h0KCkgLyAkKCIuY2hhdC1ib2R5IikuaGVpZ2h0KCkgPCAwLjUpIHsKICAgICAgICAgIF90aGlzMjIuYW5pbWF0ZV9jaGF0X2JvZHlfc2Nyb2xsKDEsIDE1MDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczIyLmFuaW1hdGVfY2hhdF9ib2R5X3Njcm9sbCg1MCwgMTUwMCwgdHJ1ZSk7CiAgICAgICAgfQogICAgICB9LCAxMDAwKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuc2Nyb2xsX2Rvd24oKTsKICAgIH0KCiAgICBpZiAoQm9vbGVhbihncmVldGluZ19idXR0b24pKSB7CiAgICAgIHRoaXMuY2hhdFtjaGF0SW5kZXggLSAxXS5ncmVldGluZ19idXR0b24gPSB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5jaGF0W2NoYXRJbmRleCAtIDFdLmN1c3RvbV9idXR0b25zID0gdHJ1ZTsKICAgIH0gLy8gdGhpcy4kc2Vzc2lvbi5zZXQoIkJvdFJlc3BvbnNlX0NvbnZlcnNhdGlvbiIsIHRoaXMuY2hhdCk7CgoKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBfdGhpczIyLmNoYXRbY2hhdEluZGV4IC0gMV0udGltZSA9IF90aGlzMjIuZ2VuZXJhdGVfdGltZSgpOwogICAgfSwgNTAwKTsKICB9LAogIG11bHRpc2VsZWN0X2xvYWQ6IGZ1bmN0aW9uIG11bHRpc2VsZWN0X2xvYWQobWVzc2FnZSwgaW5kZXgpIHsKICAgIHZhciBtc2cgPSB7CiAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICBtdWx0aXNlbGVjdF92YWx1ZXM6IG1lc3NhZ2UuY3VzdG9tLnZhbHVlcywKICAgICAgcGxhY2Vob2xkZXI6IG1lc3NhZ2UuY3VzdG9tLnBsYWNlaG9sZGVyLAogICAgICBpc19tdWx0aXNlbGVjdDogdHJ1ZSwKICAgICAgdmFsdWVfbWFwcGluZzogW10sCiAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgcmVjZWl2ZWQ6IG1lc3NhZ2UudGV4dCwKICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICB0aW1lOiB0aGlzLmdlbmVyYXRlX3RpbWUoKQogICAgfTsKICAgIHRoaXMuY2hhdC5wdXNoKG1zZyk7CiAgfSwKICBsb2FkX3RhYmxlOiBmdW5jdGlvbiBsb2FkX3RhYmxlKG1lc3NhZ2UsIGluZGV4KSB7CiAgICB2YXIgX3RoaXMyMyA9IHRoaXM7CgogICAgdmFyIG1zZyA9IHsKICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgIGNvbF9saXN0OiBPYmplY3Qua2V5cyhtZXNzYWdlLmN1c3RvbS52YWx1ZXNbMF0pLAogICAgICB0YWJsZV92YWx1ZTogbWVzc2FnZS5jdXN0b20udmFsdWVzLAogICAgICByZWNlaXZpbmc6IHRydWUsCiAgICAgIHJlY2VpdmVkOiBtZXNzYWdlLnRleHQsCiAgICAgIGlzX3RhYmxlOiB0cnVlLAogICAgICB0aW1lOiB0aGlzLmdlbmVyYXRlX3RpbWUoKQogICAgfTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBfdGhpczIzLmNoYXQucHVzaChtc2cpOwoKICAgICAgaWYgKGluZGV4ID09IDApIHsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICgkKCIuY2hhdC1ib2R5IikuY2hpbGRyZW4oKS5sYXN0KCkuaGVpZ2h0KCkgLyAkKCIuY2hhdC1ib2R5IikuaGVpZ2h0KCkgPCAwLjUpIHsKICAgICAgICAgICAgX3RoaXMyMy5hbmltYXRlX2NoYXRfYm9keV9zY3JvbGwoMSwgMTUwMCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczIzLmFuaW1hdGVfY2hhdF9ib2R5X3Njcm9sbCgwLjcsIDE1MDApOwogICAgICAgICAgfQogICAgICAgIH0sIDEwMDApOwogICAgICB9IGVsc2UgewogICAgICAgIF90aGlzMjMuYW5pbWF0ZV9jaGF0X2JvZHlfc2Nyb2xsKDEwMCwgMTUwMCwgdHJ1ZSk7CgogICAgICAgIF90aGlzMjMuc2Nyb2xsX2Rvd24oKTsKICAgICAgfQogICAgfSwgMjUwMCk7CiAgfSwKICBsb2FkX3RleHRfYXJlYTogZnVuY3Rpb24gbG9hZF90ZXh0X2FyZWEobWVzc2FnZSwgaW5kZXgpIHsKICAgIHZhciBfdGhpczI0ID0gdGhpczsKCiAgICB2YXIgbXNnID0gewogICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgcmVjZWl2aW5nOiB0cnVlLAogICAgICByZWNlaXZlZDogbWVzc2FnZS50ZXh0LAogICAgICBzaG93X3RleHRfYXJlYTogdHJ1ZSwKICAgICAgZGlzYWJsZWQ6IGZhbHNlLAogICAgICB0aW1lOiB0aGlzLmdlbmVyYXRlX3RpbWUoKQogICAgfTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBfdGhpczI0LmNoYXQucHVzaChtc2cpOwoKICAgICAgaWYgKGluZGV4ID09IDApIHsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICgkKCIuY2hhdC1ib2R5IikuY2hpbGRyZW4oKS5sYXN0KCkuaGVpZ2h0KCkgLyAkKCIuY2hhdC1ib2R5IikuaGVpZ2h0KCkgPCAwLjUpIHsKICAgICAgICAgICAgX3RoaXMyNC5hbmltYXRlX2NoYXRfYm9keV9zY3JvbGwoMSwgMTUwMCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczI0LmFuaW1hdGVfY2hhdF9ib2R5X3Njcm9sbCgwLjcsIDE1MDApOwogICAgICAgICAgfQogICAgICAgIH0sIDEwMDApOwogICAgICB9IGVsc2UgewogICAgICAgIF90aGlzMjQuYW5pbWF0ZV9jaGF0X2JvZHlfc2Nyb2xsKDEwMCwgMTUwMCwgdHJ1ZSk7CgogICAgICAgIF90aGlzMjQuc2Nyb2xsX2Rvd24oKTsKICAgICAgfQogICAgfSwgMjUwMCk7CiAgfSwKICBzdGFydF9saXZlX2NoYXQ6IGZ1bmN0aW9uIHN0YXJ0X2xpdmVfY2hhdCgpIHsKICAgIHZhciBfdGhpczI1ID0gdGhpczsKCiAgICAvLyB0aGlzLmNoYXRfc29ja2V0ID0gbmV3IFNvY2tldCgKICAgIC8vICAgcHJvY2Vzcy5lbnYuVlVFX0FQUF9MSVZFX0NIQVRfV0VCU09DS0VUX0VORFBPSU5ULAogICAgLy8gICB7CiAgICAvLyAgICAgcGFyYW1zOiB7CiAgICAvLyAgICAgICB1c2VybmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgLy8gICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAvLyAgICAgICByb2xlOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZQogICAgLy8gICAgIH0sCiAgICAvLyAgIH0KICAgIC8vICk7CiAgICBheGlvcy5nZXQoYXBpX2NhbGxzLmNoYXRfZ3JvdXBfYXBpKCkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIF90aGlzMjUuY2hhdF9ncm91cF9uYW1lID0gcmVzcG9uc2UuZGF0YS5jaGF0X2dyb3VwX25hbWU7CiAgICAgIF90aGlzMjUubGl2ZV9jaGF0X3Rva2VuID0gcmVzcG9uc2UuZGF0YS50b2tlbjsKICAgICAgX3RoaXMyNS5jaGF0X3NvY2tldCA9IG5ldyBTb2NrZXQocHJvY2Vzcy5lbnYuVlVFX0FQUF9MSVZFX0NIQVRfV0VCU09DS0VUX0VORFBPSU5ULCB7CiAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICBjb21wYW55OiBfdGhpczI1LmNvbXBhbnlfbmFtZSwKICAgICAgICAgIHRva2VuOiBfdGhpczI1LmxpdmVfY2hhdF90b2tlbgogICAgICAgIH0KICAgICAgfSk7CgogICAgICBfdGhpczI1LmNoYXRfc29ja2V0LmNvbm5lY3QoKTsKCiAgICAgIF90aGlzMjUuc3VwcG9ydF9jaGFubmVsID0gX3RoaXMyNS5jaGF0X3NvY2tldC5jaGFubmVsKCJjb21wYW5pZXM6IiArIF90aGlzMjUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkKTsKCiAgICAgIF90aGlzMjUuc3VwcG9ydF9jaGFubmVsLmpvaW4oKTsKCiAgICAgIHZhciB2bSA9IF90aGlzMjU7CgogICAgICBfdGhpczI1LnN1cHBvcnRfY2hhbm5lbC5wdXNoKCJjdXN0b21lcl93YW50c19wcmVzZW5jZSIpOwoKICAgICAgX3RoaXMyNS5zdXBwb3J0X2NoYW5uZWwub24oImN1c3RvbWVyX2dldHNfcHJlc2VuY2UiLCBmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgaWYgKEJvb2xlYW4ocmVzW3ZtLmNvbXBhbnlpZF0pID09PSB0cnVlKSB7CiAgICAgICAgICB2YXIgY29tcGFueV9wcmVzZW5jZSA9IHJlc1t2bS5jb21wYW55aWRdWyJtZXRhcyJdOyAvLyBjb25zb2xlLmxvZyhjb21wYW55X3ByZXNlbmNlKTsKCiAgICAgICAgICB2YXIgc2VsZl91c2VyX2luZGV4ID0gY29tcGFueV9wcmVzZW5jZS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGUudXNlcl9pbmZvLnVzZXJuYW1lOwogICAgICAgICAgfSkuaW5kZXhPZih2bS4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsKTsKCiAgICAgICAgICBpZiAoc2VsZl91c2VyX2luZGV4ICE9PSAtMSkgewogICAgICAgICAgICBjb21wYW55X3ByZXNlbmNlLnNwbGljZShzZWxmX3VzZXJfaW5kZXgsIDEpOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBwcmVzZW50X3JvbGVfbGlzdCA9IFtdOwogICAgICAgICAgY29tcGFueV9wcmVzZW5jZS5maWx0ZXIoZnVuY3Rpb24gKGVhY2gpIHsKICAgICAgICAgICAgcmV0dXJuIHByZXNlbnRfcm9sZV9saXN0LnB1c2goZWFjaC51c2VyX2luZm8ucm9sZSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciB1bmlxdWVfcm9sZV9saXN0ID0gcHJlc2VudF9yb2xlX2xpc3QuZmlsdGVyKGZ1bmN0aW9uICh4LCBpLCBhKSB7CiAgICAgICAgICAgIHJldHVybiBhLmluZGV4T2YoeCkgPT0gaTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGlmICh1bmlxdWVfcm9sZV9saXN0LmluY2x1ZGVzKCJzdXBwb3J0IGFnZW50IikpIHsKICAgICAgICAgICAgdm0uaXNfc3VwcG9ydF9hZ2VudF9wcmVzZW50ID0gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZtLmlzX3N1cHBvcnRfYWdlbnRfcHJlc2VudCA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2bS5pc19zdXBwb3J0X2FnZW50X3ByZXNlbnQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHZtLmNvbm5lY3Rfc3VwcG9ydF9hZ2VudCgpOyAvLyBjb25zb2xlLmxvZyhyZXMpCiAgICAgIH0pOwogICAgfSk7CiAgfSwKICBjb25uZWN0X3N1cHBvcnRfYWdlbnQ6IGZ1bmN0aW9uIGNvbm5lY3Rfc3VwcG9ydF9hZ2VudCgpIHsKICAgIHZhciBfdGhpczI2ID0gdGhpczsKCiAgICB2YXIgdm0gPSB0aGlzOwogICAgdGhpcy5zdXBwb3J0X2NoYW5uZWwubGVhdmUoKTsKICAgIHRoaXMuY2hhdF9zb2NrZXQuZGlzY29ubmVjdCgpOwogICAgdGhpcy5jaGF0X3NvY2tldCA9IG51bGw7CgogICAgaWYgKHRoaXMuaXNfc3VwcG9ydF9hZ2VudF9wcmVzZW50ID09PSB0cnVlKSB7CiAgICAgIHZhciBtc2cgPSB7fTsKICAgICAgbXNnLnJlY2VpdmluZyA9IHRydWU7CiAgICAgIG1zZy5yZWNlaXZlZCA9ICJJIGFtIGNvbm5lY3RpbmcgeW91IHRvIG9uZSBvZiBvdXIgc3VwcG9ydCBhZ2VudHMuIFBsZWFzZSB3YWl0IGZvciBhIHdoaWxlLiI7CiAgICAgIG1zZy5jb252ZXJzYXRpb25fb25seSA9IHRydWU7CiAgICAgIG1zZy50aW1lID0gdGhpcy5nZW5lcmF0ZV90aW1lKCk7CiAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigidXB0b19lbmQiLCAicmVzcG9uc2UiKTsKICAgICAgdGhpcy5jaGF0LnB1c2gobXNnKTsKICAgICAgdGhpcy5jaGF0LnB1c2goewogICAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgICByZWNlaXZlZDogIldoYXQncyB5b3VyIG5hbWU/IiwKICAgICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgICB0aW1lOiB0aGlzLmdlbmVyYXRlX3RpbWUoKQogICAgICB9KTsKICAgICAgdGhpcy5uZXdfdXBkYXRlX3Jlc3BvbnNlKDApOwogICAgICB0aGlzLnNjcm9sbF9kb3duKCk7CiAgICAgIGF4aW9zLmdldChhcGlfY2FsbHMuY2hhdF9ncm91cF9hcGkoKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczI2LmNoYXRfZ3JvdXBfbmFtZSA9IHJlc3BvbnNlLmRhdGEuY2hhdF9ncm91cF9uYW1lOwogICAgICAgIF90aGlzMjYubGl2ZV9jaGF0X3Rva2VuID0gcmVzcG9uc2UuZGF0YS50b2tlbjsKICAgICAgICBfdGhpczI2LmxpdmVfY2hhdF9vbiA9IHRydWU7CiAgICAgICAgX3RoaXMyNi5jaGF0X3NvY2tldCA9IG5ldyBTb2NrZXQocHJvY2Vzcy5lbnYuVlVFX0FQUF9MSVZFX0NIQVRfV0VCU09DS0VUX0VORFBPSU5ULCB7CiAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgY29tcGFueTogX3RoaXMyNi4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgIGNoYXRfZ3JvdXBfbmFtZTogX3RoaXMyNi5jaGF0X2dyb3VwX25hbWUsCiAgICAgICAgICAgIHRva2VuOiBfdGhpczI2LmxpdmVfY2hhdF90b2tlbgogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBfdGhpczI2LmNoYXRfc29ja2V0LmNvbm5lY3QoKTsKCiAgICAgICAgX3RoaXMyNi5jaGFubmVsID0gX3RoaXMyNi5jaGF0X3NvY2tldC5jaGFubmVsKCJjdXN0b21lcnNfZ3JvdXBzOiIgKyBfdGhpczI2LmNoYXRfZ3JvdXBfbmFtZSk7CgogICAgICAgIF90aGlzMjYuY2hhbm5lbC5qb2luKCk7CgogICAgICAgIF90aGlzMjYuY2hhbm5lbC5wdXNoKCJjdXN0b21lcl9uZWVkc19zdXBwb3J0X2FnZW50Iik7CgogICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZtLmNoYW5uZWwucHVzaCgiY3VzdG9tZXJfbmVlZHNfc3VwcG9ydF9hZ2VudCIpOwogICAgICAgIH0sIDIwMDApOwogICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZtLmNoYW5uZWwucHVzaCgiY3VzdG9tZXJfZ3JvdXBfc2VsZl9wcmVzZW5jZSIpOwogICAgICAgIH0sIDIwMDApOwoKICAgICAgICBfdGhpczI2LmNoYW5uZWwub24oImN1c3RvbWVyX2dyb3VwX3NlbGZfcHJlc2VuY2UiLCBmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZygiQ1VTVE9NRVIgR1JPVVAgUFJFU0VOQ0UiLCByZXMpOwogICAgICAgICAgdmFyIG1ldGEgPSByZXMubWV0YXM7CgogICAgICAgICAgZm9yICh2YXIgaSBpbiBtZXRhKSB7CiAgICAgICAgICAgIGlmICghbWV0YVtpXS51c2VyX2luZm8uaXNfY3VzdG9tZXIpIHsKICAgICAgICAgICAgICBfdGhpczI2LnN1cHBvcnRfYWdlbnRfaW5mbyA9IG1ldGFbaV0udXNlcl9pbmZvOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMjYuY2hhbm5lbC5vbigibmV3X2NoYXRfbWVzc2FnZSIsIGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIGlmIChyZXMuc2VuZGVyICE9ICJjdXN0b21lciIpIHsKICAgICAgICAgICAgX3RoaXMyNi5jaGF0LnB1c2goewogICAgICAgICAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgICAgICAgICByZWNlaXZlZDogcmVzLm1lc3NhZ2UsCiAgICAgICAgICAgICAgdGltZTogX3RoaXMyNi5nZW5lcmF0ZV90aW1lKCksCiAgICAgICAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBfdGhpczI2LnNjcm9sbF9kb3duKCk7CgogICAgICAgICAgICAgIGlmICgkKCIuY2hhdC1ib2R5IikuY2hpbGRyZW4oKS5sYXN0KCkuaGVpZ2h0KCkgLyAkKCIuY2hhdC1ib2R5IikuaGVpZ2h0KCkgPCAwLjUpIHsKICAgICAgICAgICAgICAgIF90aGlzMjYuYW5pbWF0ZV9jaGF0X2JvZHlfc2Nyb2xsKDEsIDE1MDApOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoJCgiLnJlY2VpdmVyIikubGFzdCgpLnBhcmVudCgpLmhlaWdodCgpIC8gJCgiLmNoYXQtYm9keSIpLmhlaWdodCgpID4gMC41ICYmICQoIi5yZWNlaXZlciIpLmxhc3QoKS5wYXJlbnQoKS5oZWlnaHQoKSAvICQoIi5jaGF0LWJvZHkiKS5oZWlnaHQoKSA8IDAuNikgewogICAgICAgICAgICAgICAgX3RoaXMyNi5hbmltYXRlX2NoYXRfYm9keV9zY3JvbGwoMC45LCAxNTAwKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3RoaXMyNi5hbmltYXRlX2NoYXRfYm9keV9zY3JvbGwoMC43NSwgMTUwMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCAxMDAwKTsKCiAgICAgICAgICAgIGlmICgkKCIuY2hhdC1ib2R5IikuaGVpZ2h0KCkgLSAkKCIuY2hhdC1ib2R5IikucHJvcCgic2Nyb2xsSGVpZ2h0IikgIT0gMCkgewogICAgICAgICAgICAgIF90aGlzMjYuc2Nyb2xsX2Rvd24oKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBfdGhpczI2LmNoYW5uZWwub24oInN0b3BwZWRfY2hhdCIsIGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIF90aGlzMjYuY2hhdC5wdXNoKHsKICAgICAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgICAgIHJlY2VpdmluZzogdHJ1ZSwKICAgICAgICAgICAgcmVjZWl2ZWQ6ICJTdXBwb3J0IGFnZW50ICIgKyByZXMubWVzc2FnZSwKICAgICAgICAgICAgdGltZTogX3RoaXMyNi5nZW5lcmF0ZV90aW1lKCkKICAgICAgICAgIH0pOwoKICAgICAgICAgIF90aGlzMjYubGl2ZV9jaGF0X29uID0gZmFsc2U7CiAgICAgICAgICBfdGhpczI2LnN1cHBvcnRfYWdlbnRfaW5mbyA9IG51bGw7CgogICAgICAgICAgX3RoaXMyNi5jaGFubmVsLmxlYXZlKCk7CgogICAgICAgICAgX3RoaXMyNi5saXZlX2NoYXRfdG9rZW4gPSBudWxsOwogICAgICAgICAgX3RoaXMyNi5jaGF0X2dyb3VwX25hbWUgPSBudWxsOwogICAgICAgICAgX3RoaXMyNi51c2VyX25hbWUgPSAiIjsKCiAgICAgICAgICBfdGhpczI2LmNoYXRfc29ja2V0LmRpc2Nvbm5lY3QoKTsKCiAgICAgICAgICBfdGhpczI2LnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInJlc3BvbnNlIik7CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMjYuY2hhbm5lbC5vbigic3RhcnRlZF90eXBpbmciLCBmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBfdGhpczI2LmlzX2FnZW50X3R5cGluZyA9IHRydWU7CiAgICAgICAgICBfdGhpczI2LmlzX3R5cGluZ19pbmRpY2F0b3Jfb24gPSB0cnVlOwogICAgICAgIH0pOwoKICAgICAgICBfdGhpczI2LmNoYW5uZWwub24oInN0b3BwZWRfdHlwaW5nIiwgZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgX3RoaXMyNi5pc19hZ2VudF90eXBpbmcgPSBmYWxzZTsKICAgICAgICAgIF90aGlzMjYuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuc3VwcG9ydF9zdWJzY3JpcHRpb25fZGF0YSgpOwogICAgfQogIH0sCiAgdXBkYXRlX3Njcm9sbGJhcjogZnVuY3Rpb24gdXBkYXRlX3Njcm9sbGJhcih0eXBlLCBtc2dUeXBlLCBpc3dlbGNvbWUsIGRlbGF5X3ZhbHVlKSB7CiAgICB2YXIgX3RoaXMyNyA9IHRoaXM7CgogICAgdmFyIHNjcm9sbF9kZWxheSA9IGlzd2VsY29tZSA9PSAiaXNfd2VsY29tZSIgPyBkZWxheV92YWx1ZSA6IDIwMDA7CiAgICB0aGlzLmlzX3R5cGluZ19pbmRpY2F0b3Jfb24gPSB0cnVlOwoKICAgIGlmIChtc2dUeXBlID09ICJyZXNwb25zZSIpIHsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMyNy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CiAgICAgIH0sIHNjcm9sbF9kZWxheSk7CiAgICB9IGVsc2UgaWYgKG1zZ1R5cGUgPT0gInNlbmRlciIpIHsKICAgICAgdGhpcy5hbmltYXRlX2NoYXRfYm9keV9zY3JvbGwoMSwgNzUwKTsKICAgIH0KCiAgICBpZiAobXNnVHlwZSA9PSAicmVzcG9uc2UiKSB7CiAgICAgIGlmICh0eXBlID09ICJ1cHRvX2VuZCIpIHsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICgkKCIuY2hhdC1ib2R5IikucHJvcCgic2Nyb2xsVG9wIikgPCAkKCIuY2hhdC1ib2R5IikucHJvcCgic2Nyb2xsSGVpZ2h0IikpIHsKICAgICAgICAgICAgaWYgKCQoIi5yZWNlaXZlciIpLmxhc3QoKS5wYXJlbnQoKS5oZWlnaHQoKSAvICQoIi5jaGF0LWJvZHkiKS5oZWlnaHQoKSA+IDAuNSkgewogICAgICAgICAgICAgIF90aGlzMjcuYW5pbWF0ZV9jaGF0X2JvZHlfc2Nyb2xsKDAuNzUsIDE1MDApOwoKICAgICAgICAgICAgICBfdGhpczI3LnNjcm9sbF9kb3duKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoJCgiLnJlY2VpdmVyIikubGFzdCgpLnBhcmVudCgpLmhlaWdodCgpIC8gJCgiLmNoYXQtYm9keSIpLmhlaWdodCgpIDwgMC41KSB7CiAgICAgICAgICAgIF90aGlzMjcuYW5pbWF0ZV9jaGF0X2JvZHlfc2Nyb2xsKDEsIHNjcm9sbF9kZWxheSk7CiAgICAgICAgICB9CiAgICAgICAgfSwgc2Nyb2xsX2RlbGF5KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5jaGF0LWJvZHkiKS5zY3JvbGxUb3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuY2hhdC1ib2R5Iikuc2Nyb2xsSGVpZ2h0IC0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLmNoYXQtYm9keSIpLmxhc3RDaGlsZC5zY3JvbGxIZWlnaHQ7CiAgICAgICAgfSwgMTAwMCk7CiAgICAgIH0KICAgIH0KICB9LAogIG5ld191cGRhdGVfcmVzcG9uc2U6IGZ1bmN0aW9uIG5ld191cGRhdGVfcmVzcG9uc2UoaW5kZXgpIHsKICAgIHZhciBfdGhpczI4ID0gdGhpczsKCiAgICBpZiAoaW5kZXggPT0gMCkgewogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczI4LnNjcm9sbF9kb3duKCk7CgogICAgICAgIGlmICgkKCIuY2hhdC1ib2R5IikuY2hpbGRyZW4oKS5sYXN0KCkuaGVpZ2h0KCkgLyAkKCIuY2hhdC1ib2R5IikuaGVpZ2h0KCkgPCAwLjUpIHsKICAgICAgICAgIF90aGlzMjguYW5pbWF0ZV9jaGF0X2JvZHlfc2Nyb2xsKDEsIDE1MDApOwogICAgICAgIH0gZWxzZSBpZiAoJCgiLnJlY2VpdmVyIikubGFzdCgpLnBhcmVudCgpLmhlaWdodCgpIC8gJCgiLmNoYXQtYm9keSIpLmhlaWdodCgpID4gMC41ICYmICQoIi5yZWNlaXZlciIpLmxhc3QoKS5wYXJlbnQoKS5oZWlnaHQoKSAvICQoIi5jaGF0LWJvZHkiKS5oZWlnaHQoKSA8IDAuNikgewogICAgICAgICAgX3RoaXMyOC5hbmltYXRlX2NoYXRfYm9keV9zY3JvbGwoMSwgMTUwMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzMjguYW5pbWF0ZV9jaGF0X2JvZHlfc2Nyb2xsKDEsIDE1MDApOwogICAgICAgIH0KICAgICAgfSwgMTAwMCk7CiAgICB9CgogICAgaWYgKCQoIi5jaGF0LWJvZHkiKS5oZWlnaHQoKSAtICQoIi5jaGF0LWJvZHkiKS5wcm9wKCJzY3JvbGxIZWlnaHQiKSAhPSAwKSB7CiAgICAgIHRoaXMuc2Nyb2xsX2Rvd24oKTsKICAgIH0KCiAgICBpZiAoJCgiLmNoYXQtYm9keSIpLmhlaWdodCgpIC0gJCgiLmNoYXQtYm9keSIpLnByb3AoInNjcm9sbEhlaWdodCIpID09PSAwKSB7CiAgICAgIHRoaXMudG9fc2Nyb2xsID0gZmFsc2U7CiAgICB9CiAgfSwKICBhbmltYXRlX2NoYXRfYm9keV9zY3JvbGw6IGZ1bmN0aW9uIGFuaW1hdGVfY2hhdF9ib2R5X3Njcm9sbChzY2FsZSwgZGVsYXksIG9mZnNldCkgewogICAgaWYgKEJvb2xlYW4ob2Zmc2V0KSkgewogICAgICAkKCIuY2hhdC1ib2R5IikuYW5pbWF0ZSh7CiAgICAgICAgc2Nyb2xsVG9wOiAkKCIuY2hhdC1ib2R5IikucHJvcCgic2Nyb2xsVG9wIikgKyBzY2FsZQogICAgICB9LCBkZWxheSk7CiAgICB9IGVsc2UgewogICAgICAkKCIuY2hhdC1ib2R5IikuYW5pbWF0ZSh7CiAgICAgICAgc2Nyb2xsVG9wOiBzY2FsZSAqICQoIi5jaGF0LWJvZHkiKS5wcm9wKCJzY3JvbGxIZWlnaHQiKQogICAgICB9LCBkZWxheSk7CiAgICB9CiAgfSwKICBhZGRfYm90X3VuYW5zd2VyZWRfcXVlc3Rpb246IGZ1bmN0aW9uIGFkZF9ib3RfdW5hbnN3ZXJlZF9xdWVzdGlvbihpbmRleCwgbWV0aG9kKSB7CiAgICB2YXIgX3RoaXMyOSA9IHRoaXM7CgogICAgYXhpb3MucHV0KGFwaV9jYWxscy5nZXRfdW5hbnN3ZXJlZF91cmwoKSwgewogICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIGJvdF9hbnN3ZXI6IHRoaXMuY2hhdFtpbmRleF0ucmVjZWl2ZWQsCiAgICAgIHVzZXJfcXVlcnk6IHRoaXMuY2hhdFtpbmRleCAtIDFdLnNlbnQsCiAgICAgIGZlZWRiYWNrOiBtZXRob2QgPyAibGlrZSIgOiAiZGlzbGlrZSIsCiAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUKICAgIH0sIHsKICAgICAgaGVhZGVyczogewogICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICBfdGhpczI5LmNoYXRbaW5kZXhdLmFza19mZWVkYmFjayA9IGZhbHNlOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge30pOwogIH0sCiAgbG9hZF9yZWZ1bmRzOiBmdW5jdGlvbiBsb2FkX3JlZnVuZHMoKSB7CiAgICB2YXIgX3RoaXMzMCA9IHRoaXM7CgogICAgdmFyIG1zZyA9IHsKICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgIGlzX3JlZnVuZDogdHJ1ZSwKICAgICAgcmVjZWl2aW5nOiB0cnVlLAogICAgICByZWNlaXZlZDogdGhpcy5yZXRhaWxfb3JkZXJfcmV0cmVpdmFsX29ubHlfZW1haWxfcmVxdWlyZWQgPyAiUGxlYXNlIGVudGVyIGVtYWlsIHRvIGZldGNoIHlvdXIgb3JkZXJzLiIgOiAiUGxlYXNlIGxvZ2luIHRvIGZldGNoIHlvdXIgcmVjZW50IG9yZGVycyIsCiAgICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpCiAgICB9OwogICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBsYXRlc3RDaGF0SW5kZXggPSBfdGhpczMwLmNoYXQucHVzaChtc2cpOwoKICAgICAgbGF0ZXN0Q2hhdEluZGV4IC09IDE7CiAgICAgIF90aGlzMzAuY2hhdFtsYXRlc3RDaGF0SW5kZXhdLmZldGNoX3Nob3BpZnlfZGV0YWlscyA9IHRydWU7CgogICAgICBfdGhpczMwLnNjcm9sbF9kb3duKCk7CiAgICB9LCAxMDAwKTsKICB9LAogIHZpZXdfb3JkZXJfZGV0YWlsczogZnVuY3Rpb24gdmlld19vcmRlcl9kZXRhaWxzKGNoYXRJbmRleCwgb3JkZXJJbmRleCwgb3JkZXJMaW5lSXRlbXMsIG9yZGVyUmVmdW5kcykgewogICAgdmFyIF90aGlzMzEgPSB0aGlzOwoKICAgIHRoaXMuY2hhdFtjaGF0SW5kZXhdLnJlZnVuZF9zZWxlY3RlZF9pdGVtcyA9IFtdOwogICAgdGhpcy5jaGF0W2NoYXRJbmRleF0uc2hvcGlmeV9yZWFzb25fZm9yX3JlZnVuZF9saXN0ID0gbnVsbDsKICAgIHRoaXMuY2hhdFtjaGF0SW5kZXhdLnNob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmQgPSBudWxsOwogICAgdGhpcy5jaGF0W2NoYXRJbmRleF0ucmVmdW5kX29yZGVyX3ZpZXdfZGV0YWlscyA9IE9iamVjdCh0aGlzLmNoYXRbY2hhdEluZGV4XS5yZWZ1bmRfb3JkZXJzX2xpc3Rbb3JkZXJJbmRleF0pOwogICAgdGhpcy5jaGF0W2NoYXRJbmRleF0ucmVmdW5kX29yZGVyX3ZpZXdfZGV0YWlscy5saW5lX2l0ZW1zID0gb3JkZXJMaW5lSXRlbXMubWFwKGZ1bmN0aW9uIChsaW5lSXRlbSkgewogICAgICB2YXIgbGluZUl0ZW1Ob2RlID0gbGluZUl0ZW07CiAgICAgIGxpbmVJdGVtTm9kZS5zZWxlY3RlZF9xdWFudGl0eSA9IF90aGlzMzEucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gIm1hZ2VudG8iID8gbGluZUl0ZW0ucXR5X29yZGVyZWQgOiBsaW5lSXRlbS5xdWFudGl0eTsKICAgICAgbGluZUl0ZW1Ob2RlLmFscmVhZHlfcmVmdW5kZWRfcXR5ID0gX3RoaXMzMS5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAibWFnZW50byIgPyBsaW5lSXRlbS5xdHlfcmVmdW5kZWQgOiAwOwogICAgICBsaW5lSXRlbU5vZGUucXR5X2F2YWlsYWJsZV9mb3JfcmVmdW5kID0gX3RoaXMzMS5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAibWFnZW50byIgPyBsaW5lSXRlbS5xdHlfb3JkZXJlZCA6IGxpbmVJdGVtLnF1YW50aXR5OwogICAgICBsaW5lSXRlbU5vZGUucHJvZHVjdF9pZCA9IGxpbmVJdGVtLnByb2R1Y3RfaWQ7CiAgICAgIGxpbmVJdGVtTm9kZS52YXJpYW50X2lkID0gX3RoaXMzMS5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAibWFnZW50byIgPyBsaW5lSXRlbS5za3UgOiBsaW5lSXRlbS52YXJpYW50X2lkOwogICAgICByZXR1cm4gbGluZUl0ZW1Ob2RlOwogICAgfSk7CgogICAgaWYgKEJvb2xlYW4ob3JkZXJSZWZ1bmRzKSA9PT0gdHJ1ZSkgewogICAgICBvcmRlclJlZnVuZHMgPSBvcmRlclJlZnVuZHMubWFwKGZ1bmN0aW9uIChsaW5lSXRlbSkgewogICAgICAgIHJldHVybiBsaW5lSXRlbS5yZWZ1bmRfbGluZV9pdGVtc1swXTsKICAgICAgfSk7CiAgICAgIHZhciBBbHJlYWR5UmVmdW5kZWRRdHkgPSBbXTsKICAgICAgb3JkZXJSZWZ1bmRzLnJlZHVjZShmdW5jdGlvbiAocmVzLCB2YWx1ZSkgewogICAgICAgIGlmICghcmVzW3ZhbHVlLmxpbmVfaXRlbV9pZF0pIHsKICAgICAgICAgIHJlc1t2YWx1ZS5saW5lX2l0ZW1faWRdID0gewogICAgICAgICAgICBsaW5lX2l0ZW1faWQ6IHZhbHVlLmxpbmVfaXRlbV9pZCwKICAgICAgICAgICAgcXVhbnRpdHk6IDAKICAgICAgICAgIH07CiAgICAgICAgICBBbHJlYWR5UmVmdW5kZWRRdHkucHVzaChyZXNbdmFsdWUubGluZV9pdGVtX2lkXSk7CiAgICAgICAgfQoKICAgICAgICByZXNbdmFsdWUubGluZV9pdGVtX2lkXS5xdWFudGl0eSArPSB2YWx1ZS5xdWFudGl0eTsKICAgICAgICByZXR1cm4gcmVzOwogICAgICB9LCB7fSk7CiAgICAgIHZhciB0ZW1wID0gdGhpcy5jaGF0W2NoYXRJbmRleF0ucmVmdW5kX29yZGVyX3ZpZXdfZGV0YWlscy5saW5lX2l0ZW1zOwogICAgICB0aGlzLmNoYXRbY2hhdEluZGV4XS5yZWZ1bmRfb3JkZXJfdmlld19kZXRhaWxzLmxpbmVfaXRlbXMgPSB0ZW1wLm1hcChmdW5jdGlvbiAobGluZUl0ZW0pIHsKICAgICAgICB2YXIgbGluZUl0ZW1Ob2RlID0gbGluZUl0ZW07CgogICAgICAgIGZvciAodmFyIGkgaW4gQWxyZWFkeVJlZnVuZGVkUXR5KSB7CiAgICAgICAgICBpZiAobGluZUl0ZW0uaWQgPT0gQWxyZWFkeVJlZnVuZGVkUXR5W2ldLmxpbmVfaXRlbV9pZCkgewogICAgICAgICAgICBsaW5lSXRlbU5vZGUuYWxyZWFkeV9yZWZ1bmRlZF9xdHkgPSBBbHJlYWR5UmVmdW5kZWRRdHlbaV1bInF1YW50aXR5Il07CiAgICAgICAgICAgIGxpbmVJdGVtTm9kZS5xdHlfYXZhaWxhYmxlX2Zvcl9yZWZ1bmQgPSBsaW5lSXRlbS5xdWFudGl0eSAtIEFscmVhZHlSZWZ1bmRlZFF0eVtpXVsicXVhbnRpdHkiXTsKICAgICAgICAgICAgbGluZUl0ZW1Ob2RlLnNlbGVjdGVkX3F1YW50aXR5ID0gbGluZUl0ZW0ucXVhbnRpdHkgLSBBbHJlYWR5UmVmdW5kZWRRdHlbaV1bInF1YW50aXR5Il07CiAgICAgICAgICAgIGxpbmVJdGVtTm9kZS5wcm9kdWN0X2lkID0gbGluZUl0ZW0ucHJvZHVjdF9pZDsKICAgICAgICAgICAgbGluZUl0ZW1Ob2RlLnZhcmlhbnRfaWQgPSBfdGhpczMxLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJtYWdlbnRvIiA/IGxpbmVJdGVtLnNrdSA6IGxpbmVJdGVtLnZhcmlhbnRfaWQ7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbGluZUl0ZW1Ob2RlOwogICAgICB9KTsKICAgIH0KCiAgICB0aGlzLiRzZXQodGhpcy5jaGF0LCBjaGF0SW5kZXgsIHRoaXMuY2hhdFtjaGF0SW5kZXhdKTsKICB9LAogIHJlZnJlc2hfb3JfcmVtb3ZlX29yZGVyX2RldGFpbHM6IGZ1bmN0aW9uIHJlZnJlc2hfb3JfcmVtb3ZlX29yZGVyX2RldGFpbHMoY2hhdEluZGV4LCB2YWwpIHsKICAgIGlmICh2YWwgPT0gInJlbW92ZSIpIHsKICAgICAgdGhpcy5jaGF0W2NoYXRJbmRleF0ucmVmdW5kX29yZGVyX3ZpZXdfZGV0YWlscyA9IHt9OwogICAgfQoKICAgIHRoaXMuJHNldCh0aGlzLmNoYXQsIGNoYXRJbmRleCwgdGhpcy5jaGF0W2NoYXRJbmRleF0pOwogIH0sCiAgbG9hZF9jdXN0b21lcl9vcmRlcnM6IGZ1bmN0aW9uIGxvYWRfY3VzdG9tZXJfb3JkZXJzKG9yZGVyc0RhdGEsIGluZGV4LCBvcmRlcl90eXBlKSB7CiAgICB2YXIgX3RoaXMzMiA9IHRoaXM7CgogICAgLy8gdGhpcy5jaGF0W2luZGV4XS5yZWNlaXZlZCA9IGBPcmRlciAke29yZGVyTmFtZX1gOwogICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKCiAgICBpZiAob3JkZXJfdHlwZSA9PT0gInJlZnVuZCIpIHsKICAgICAgdGhpcy5jaGF0W2luZGV4XS5yZWNlaXZlZCA9ICJGZXRjaGluZyB5b3VyIG9yZGVycyAuLi4iOwogICAgICB0aGlzLmNoYXRbaW5kZXhdLnJlZnVuZF9vcmRlcnNfbGlzdCA9IG9yZGVyc0RhdGEubWFwKGZ1bmN0aW9uIChvcmRlcikgewogICAgICAgIHZhciBvcmRlck9iamVjdCA9IG9yZGVyOwogICAgICAgIG9yZGVyT2JqZWN0LmNyZWF0ZWRfYXQgPSBfdGhpczMyLnJldGFpbF93ZWJfZnJhbWV3b3JrID09PSAiYmlnY29tbWVyY2UiID8gbW9tZW50KG9yZGVyT2JqZWN0LmNyZWF0ZWRfYXQpLmZvcm1hdCgiRG8gTU1NIFlZWVkiKSA6IG1vbWVudChvcmRlck9iamVjdC5jcmVhdGVkX2F0LCBbIllZWVktTU0tRERUaDptOnNaIl0pLmZvcm1hdCgiRG8gTU1NIFlZWVkiKTsKICAgICAgICBvcmRlck9iamVjdC5uYW1lID0gX3RoaXMzMi5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAic2hvcGlmeSIgPyBvcmRlck9iamVjdC5uYW1lIDogb3JkZXJPYmplY3QuaWQ7CiAgICAgICAgb3JkZXJPYmplY3QucHJvY2Vzc2VkQXQgPSBtb21lbnQob3JkZXJPYmplY3QuY3JlYXRlZF9hdCwgWyJZWVlZLU1NLUREVGhoOm1tOnNzWiJdKS5mb3JtYXQoIkRvIE1NTSBZWVlZIik7IC8vIGN1cl9ub2RlLmZ1bGZpbGxtZW50U3RhdHVzID0gY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzOwoKICAgICAgICBvcmRlck9iamVjdC5mdWxmaWxsbWVudF9zdGF0dXMgPSBCb29sZWFuKG9yZGVyT2JqZWN0LmZ1bGZpbGxtZW50X3N0YXR1cykgPT09IHRydWUgPyBvcmRlck9iamVjdC5mdWxmaWxsbWVudF9zdGF0dXMgOiAiVW5mdWxmaWxsZWQiOyAvLyBTZXQgb25seSBmaXJzdCBjaGFyYWN0ZXIgdG8gdXBwZXJjYXNlIHdoaWxlIHJlbWFpbmluZyBjaGFyYWN0ZXJzIHNldCB0byBsb3dlcmNhc2UKCiAgICAgICAgb3JkZXJPYmplY3QuZnVsZmlsbG1lbnRfc3RhdHVzID0gb3JkZXJPYmplY3QuZnVsZmlsbG1lbnRfc3RhdHVzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgb3JkZXJPYmplY3QuZnVsZmlsbG1lbnRfc3RhdHVzLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7CgogICAgICAgIGlmIChfdGhpczMyLnJldGFpbF93ZWJfZnJhbWV3b3JrICE9ICJzaG9waWZ5IikgewogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlck9iamVjdC5vcmRlcl9ub3Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAob3JkZXJPYmplY3Qub3JkZXJfbm90ZXNbaV0uZGF0ZV9jcmVhdGVkICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIG9yZGVyT2JqZWN0Lm9yZGVyX25vdGVzW2ldLmRhdGVfY3JlYXRlZCA9IF90aGlzMzIucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT09ICJiaWdjb21tZXJjZSIgPyBtb21lbnQob3JkZXJPYmplY3Qub3JkZXJfbm90ZXNbaV0uZGF0ZV9jcmVhdGVkKS5mb3JtYXQoIllZWVktTU0tRERUaGg6bW06c3NaIikgOiBtb21lbnQob3JkZXJPYmplY3Qub3JkZXJfbm90ZXNbaV0uZGF0ZV9jcmVhdGVkLCBbIllZWVktTU0tRERUaGg6bW06c3NaIl0pLmZvcm1hdCgiRG8gTU1NIFlZWVkgSEg6bW0gYSIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gb3JkZXJPYmplY3Q7CiAgICAgIH0pOwoKICAgICAgaWYgKHRoaXMuY2hhdFtpbmRleF0ucmVmdW5kX29yZGVyc19saXN0Lmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRoaXMuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPSAiVGhlcmUgYXJlIG5vIG9yZGVycyB0byBiZSBkaXNwbGF5ZWQiOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPSAiU2VsZWN0IHRoZSBvcmRlciB0aGF0IHlvdSB3aXNoIHRvIHJldHVybiI7CiAgICAgIH0gLy8gdGhpcy5yZWZ1bmRfb3JkZXJfdmlld19kZXRhaWxzID0ge307CgoKICAgICAgdGhpcy5jaGF0W2luZGV4XS5yZWZ1bmRfb3JkZXJfdmlld19kZXRhaWxzID0ge307CiAgICAgIHRoaXMuY2hhdFtpbmRleF0ucmVmdW5kX3NlbGVjdGVkX2l0ZW1zID0gW107CiAgICAgIHRoaXMuY2hhdFtpbmRleF0uc2hvcGlmeV9yZWFzb25fZm9yX3JlZnVuZF9saXN0ID0gbnVsbDsKICAgICAgdGhpcy5jaGF0W2luZGV4XS5zaG9waWZ5X3JlYXNvbl9mb3JfcmVmdW5kID0gbnVsbDsKICAgICAgdGhpcy5jaGF0W2luZGV4XS5jb252ZXJzYXRpb25fb25seSA9IGZhbHNlOwogICAgICB0aGlzLmNoYXRbaW5kZXhdLmNvbnZlcnNhdGlvbl9vbmx5ID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAob3JkZXJfdHlwZSA9PT0gImFsbF9vcmRlcnMiKSB7CiAgICAgIHZhciBvcmRlcnNfZGF0YSA9IG9yZGVyc0RhdGEsCiAgICAgICAgICBjb21wbGV0ZV9vcmRlcnNfZGF0YSA9IFtdOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlcnNfZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjdXJfbm9kZSA9IG9yZGVyc19kYXRhW2ldOwogICAgICAgIGN1cl9ub2RlLnByb2Nlc3NlZEF0ID0gdGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PT0gImJpZ2NvbW1lcmNlIiA/IG1vbWVudChvcmRlcnNfZGF0YVtpXS5jcmVhdGVkX2F0KS5mb3JtYXQoIkRvIE1NTSBZWVlZIikgOiBtb21lbnQob3JkZXJzX2RhdGFbaV0uY3JlYXRlZF9hdCwgWyJZWVlZLU1NLUREVGg6bTpzWiJdKS5mb3JtYXQoIkRvIE1NTSBZWVlZIik7IC8vIGN1cl9ub2RlLmZ1bGZpbGxtZW50U3RhdHVzID0gY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzOwoKICAgICAgICBjdXJfbm9kZS5mdWxmaWxsbWVudF9zdGF0dXMgPSBCb29sZWFuKGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cykgPT09IHRydWUgPyBjdXJfbm9kZS5mdWxmaWxsbWVudF9zdGF0dXMgOiAiVW5mdWxmaWxsZWQiOyAvLyAvLyBTZXQgb25seSBmaXJzdCBjaGFyYWN0ZXIgdG8gdXBwZXJjYXNlIHdoaWxlIHJlbWFpbmluZyBjaGFyYWN0ZXJzIHNldCB0byBsb3dlcmNhc2UKCiAgICAgICAgY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzID0gY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7CgogICAgICAgIGlmICh0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrICE9ICJzaG9waWZ5IikgewogICAgICAgICAgZm9yICh2YXIgX2k4ID0gMDsgX2k4IDwgY3VyX25vZGUub3JkZXJfbm90ZXMubGVuZ3RoOyBfaTgrKykgewogICAgICAgICAgICBpZiAoY3VyX25vZGUub3JkZXJfbm90ZXNbX2k4XS5kYXRlX2NyZWF0ZWQgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgb3JkZXJPYmplY3Qub3JkZXJfbm90ZXNbX2k4XS5kYXRlX2NyZWF0ZWQgPSB0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09PSAiYmlnY29tbWVyY2UiID8gbW9tZW50KG9yZGVyT2JqZWN0Lm9yZGVyX25vdGVzW19pOF0uZGF0ZV9jcmVhdGVkKS5mb3JtYXQoIllZWVktTU0tRERUaGg6bW06c3NaIikgOiBtb21lbnQob3JkZXJPYmplY3Qub3JkZXJfbm90ZXNbX2k4XS5kYXRlX2NyZWF0ZWQsIFsiWVlZWS1NTS1ERFRoaDptbTpzc1oiXSkuZm9ybWF0KCJEbyBNTU0gWVlZWSBISDptbSBhIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGNvbXBsZXRlX29yZGVyc19kYXRhLnB1c2goewogICAgICAgICAgbmFtZTogdGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAic2hvcGlmeSIgPyBjdXJfbm9kZS5uYW1lIDogY3VyX25vZGUuaWQsCiAgICAgICAgICBwcm9jZXNzZWRfZGF0ZTogY3VyX25vZGUucHJvY2Vzc2VkQXQsCiAgICAgICAgICBmdWxmaWxsbWVudF9zdGF0dXM6IGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cywKICAgICAgICAgIHN0YXR1c191cmw6IGN1cl9ub2RlLm9yZGVyX3N0YXR1c191cmwsCiAgICAgICAgICBvcmRlcl9ub3RlczogdGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAic2hvcGlmeSIgPyBudWxsIDogY3VyX25vZGUub3JkZXJfbm90ZXMKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdGhpcy5jaGF0W2luZGV4XS5zaG93X2FsbF9vcmRlcnNfbGlzdCA9IHRydWU7CiAgICAgIHRoaXMuY2hhdFtpbmRleF0uYWxsX29yZGVyc19saXN0ID0gY29tcGxldGVfb3JkZXJzX2RhdGE7CgogICAgICBpZiAodGhpcy5jaGF0W2luZGV4XS5hbGxfb3JkZXJzX2xpc3QubGVuZ3RoID09PSAwKSB7CiAgICAgICAgdGhpcy5jaGF0W2luZGV4XS5yZWNlaXZlZCA9ICJUaGVyZSBhcmUgbm8gb3JkZXJzIHRvIGJlIGRpc3BsYXllZCI7CiAgICAgICAgdGhpcy5jaGF0W2luZGV4XS5zaG93X2FsbF9vcmRlcnNfbGlzdCA9IGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPSAiUGxlYXNlIEZpbmQgQmVsb3cgWW91ciBMYXRlc3QgT3JkZXJzOiI7CiAgICAgIH0KCiAgICAgIHRoaXMuY2hhdFtpbmRleF0ucmVjZW50X29yZGVyc19saXN0ID0gY29tcGxldGVfb3JkZXJzX2RhdGE7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMzIuY2hhdFtpbmRleF0uY29udmVyc2F0aW9uX29ubHkgPSB0cnVlOwogICAgICB9LCA1MDApOwogICAgfQoKICAgIHRoaXMuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogIH0sCiAgc3VibWl0X3JlZnVuZF9yZXF1ZXN0OiBmdW5jdGlvbiBzdWJtaXRfcmVmdW5kX3JlcXVlc3QocmVmdW5kX29yZGVyX3ZpZXdfZGV0YWlscywgaW5kZXgpIHsKICAgIHZhciBfdGhpczMzID0gdGhpczsKCiAgICBpZiAodGhpcy5jaGF0W2luZGV4XS5zaG9waWZ5X3JlYXNvbl9mb3JfcmVmdW5kX2xpc3QgPT09IG51bGwpIHsKICAgICAgdGhpcy5zaG93X3Nob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmRfZXJyb3IgPSB0cnVlOwogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKHRoaXMuY2hhdFtpbmRleF0uc2hvcGlmeV9yZWFzb25fZm9yX3JlZnVuZF9saXN0ID09PSAiT3RoZXJzIikgewogICAgICBpZiAodGhpcy5jaGF0W2luZGV4XS5zaG9waWZ5X3JlYXNvbl9mb3JfcmVmdW5kID09PSBudWxsIHx8IHRoaXMuY2hhdFtpbmRleF0uc2hvcGlmeV9yZWFzb25fZm9yX3JlZnVuZCA9PT0gIiIpIHsKICAgICAgICB0aGlzLnNob3dfc2hvcGlmeV9yZWFzb25fZm9yX3JlZnVuZF9lcnJvciA9IHRydWU7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNoYXRbaW5kZXhdLnNob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmQgPSB0aGlzLmNoYXRbaW5kZXhdLnNob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmRfbGlzdDsKICAgIH0gLy8gZWxzZSB7CgoKICAgIHRoaXMuc2hvd19zaG9waWZ5X3JlYXNvbl9mb3JfcmVmdW5kX2Vycm9yID0gZmFsc2U7CiAgICB2YXIgaXRlbXNfdG9fcmVmdW5kID0gcmVmdW5kX29yZGVyX3ZpZXdfZGV0YWlscy5saW5lX2l0ZW1zLmZpbHRlcihmdW5jdGlvbiAobGluZUl0ZW0pIHsKICAgICAgaWYgKF90aGlzMzMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gIm1hZ2VudG8iKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMzMuY2hhdFtpbmRleF0ucmVmdW5kX3NlbGVjdGVkX2l0ZW1zLmluY2x1ZGVzKGxpbmVJdGVtLnByb2R1Y3RfaWQpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBfdGhpczMzLmNoYXRbaW5kZXhdLnJlZnVuZF9zZWxlY3RlZF9pdGVtcy5pbmNsdWRlcyhsaW5lSXRlbS5pZCk7CiAgICAgIH0KICAgIH0pOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXNfdG9fcmVmdW5kLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChpdGVtc190b19yZWZ1bmRbaV0uc2VsZWN0ZWRfcXVhbnRpdHkgPT09IG51bGwgfHwgQm9vbGVhbihpdGVtc190b19yZWZ1bmRbaV0uc2VsZWN0ZWRfcXVhbnRpdHkpID09PSBmYWxzZSkgewogICAgICAgIHN3YWwoewogICAgICAgICAgdGV4dDogIlBsZWFzZSBlbnRlciB0aGUgcHJvZHVjdCBxdWFudGl0eSBpbiBudW1lcmljIG9ubHkiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDUwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KCiAgICB2YXIgcmVmdW5kX3BheWxvYWRfc3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoewogICAgICBvcmRlcklkOiByZWZ1bmRfb3JkZXJfdmlld19kZXRhaWxzLmlkLAogICAgICBvcmRlcl9uYW1lOiByZWZ1bmRfb3JkZXJfdmlld19kZXRhaWxzLm5hbWUsCiAgICAgIGN1c3RvbWVyX2lkOiB0aGlzLnNob3BpZnlfY3VzdG9tZXJfaWQsCiAgICAgIGZ1bGZpbGxtZW50X3N0YXR1czogcmVmdW5kX29yZGVyX3ZpZXdfZGV0YWlscy5mdWxmaWxsbWVudF9zdGF0dXMsCiAgICAgIHBheW1lbnRfc3RhdHVzOiByZWZ1bmRfb3JkZXJfdmlld19kZXRhaWxzLnBheW1lbnRfc3RhdHVzLAogICAgICBjdXJyZW5jeTogdGhpcy5yZXRhaWxfc2hvcF9jdXJyZW5jeSwKICAgICAgbGluZUl0ZW1zOiBpdGVtc190b19yZWZ1bmQubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGxpbmVfaXRlbV9pZDogX3RoaXMzMy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAibWFnZW50byIgPyBpdGVtLnByb2R1Y3RfaWQgOiBpdGVtLmlkLAogICAgICAgICAgcXVhbnRpdHk6IGl0ZW0uc2VsZWN0ZWRfcXVhbnRpdHksCiAgICAgICAgICBwcm9kdWN0X2lkOiBpdGVtLnByb2R1Y3RfaWQsCiAgICAgICAgICB2YXJpYW50X2lkOiBpdGVtLnZhcmlhbnRfaWQKICAgICAgICB9OwogICAgICB9KSwKICAgICAgcmVmdW5kUmVhc29uOiB0aGlzLmNoYXRbaW5kZXhdLnNob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmQKICAgIH0pOwogICAgdmFyIHJlZnVuZF9pbnRlbnQgPSAiL3Byb2Nlc3NfcmVmdW5kX3JlcXVlc3QiLmNvbmNhdChyZWZ1bmRfcGF5bG9hZF9zdHJpbmcpOwogICAgdmFyIHJlZnVuZF9vYmplY3QgPSB7CiAgICAgIHR5cGU6ICJwb3N0YmFjayIsCiAgICAgIHRpdGxlOiAiUHJvY2VlZCIsCiAgICAgIHZhbHVlOiByZWZ1bmRfaW50ZW50CiAgICB9OyAvLyBjb25zb2xlLmxvZyhyZWZ1bmRfaW50ZW50KTsKCiAgICB0aGlzLmN1c3RvbV9idXR0b25fY2xpY2socmVmdW5kX29iamVjdCk7CiAgICB0aGlzLmNoYXRbaW5kZXhdLnJlZnVuZF9vcmRlcl92aWV3X2RldGFpbHMgPSB7fTsKICAgIHRoaXMuY2hhdFtpbmRleF0ucmVmdW5kX3NlbGVjdGVkX2l0ZW1zID0gW107CiAgICB0aGlzLmNoYXRbaW5kZXhdLnNob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmRfbGlzdCA9IG51bGw7CiAgICB0aGlzLmNoYXRbaW5kZXhdLnNob3BpZnlfcmVhc29uX2Zvcl9yZWZ1bmQgPSBudWxsOwogICAgdGhpcy5jaGF0LnNwbGljZShpbmRleCwgMSk7IC8vIH0KICB9LAogIHJldGFpbF9mb3JtX2ZvY3VzOiBmdW5jdGlvbiByZXRhaWxfZm9ybV9mb2N1cyhpbmRleCkgewogICAgaWYgKHRoaXMuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPT09ICJXZSBhcmUgc29ycnksIHlvdXIgY3JlZGVudGlhbHMgYXJlIGludmFsaWQuIFBsZWFzZSB0cnkgYWdhaW4gOikiKSB7CiAgICAgIHRoaXMuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPSAiUGxlYXNlIGxvZ2luIHdpdGggeW91ciBjcmVkZW50aWFscyBmb3IgYmV0dGVyIGV4cGVyaWVuY2UgOikiOwogICAgfQogIH0sCiAgcmV0YWlsX2NyZWF0ZV9jdXN0b21lcl90b2tlbjogZnVuY3Rpb24gcmV0YWlsX2NyZWF0ZV9jdXN0b21lcl90b2tlbihpbmRleCwgaXNSZWZ1bmQpIHsKICAgIHZhciBfYXhpb3MkcG9zdDksCiAgICAgICAgX3RoaXMzNCA9IHRoaXM7CgogICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKICAgIGlzUmVmdW5kID0gaXNSZWZ1bmQgfHwgZmFsc2U7CgogICAgaWYgKHRoaXMuY2hhdFtpbmRleF0ucmV0dXJuX3Nob3BpZnlfZW1haWwgPT09IHRydWUgJiYgIWlzUmVmdW5kKSB7CiAgICAgIHRoaXMuc2VuZF9yZXRhaWxfY3VzdG9tZXJfaWQoaW5kZXgsIHRydWUpOwogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIHNob3BfZW5kcG9pbnQgPSB0aGlzLnNob3BpZnlfcmV0YWlsX3Nob3BfbmFtZSArICIubXlzaG9waWZ5LmNvbSI7CiAgICB2YXIgcXVlcnlTdHJpbmcgPSAkKCIjc2hvcGlmeV9sb2dpbl9mb3JtIikuc2VyaWFsaXplQXJyYXkoKTsKICAgIHZhciBmb3JtX3BheWxvYWQgPSB7fTsKICAgIGZvcm1fcGF5bG9hZFsic2hvcGlmeV9pc19vbmx5X2VtYWlsIl0gPSB0aGlzLnJldGFpbF9vcmRlcl9yZXRyZWl2YWxfb25seV9lbWFpbF9yZXF1aXJlZDsKICAgIGZvcm1fcGF5bG9hZFsiZW1haWwiXSA9IHRoaXMuY2hhdFtpbmRleF0uY3VzdG9tZXJfZW1haWxfaWQ7CiAgICBmb3JtX3BheWxvYWRbInBhc3N3b3JkIl0gPSB0aGlzLmNoYXRbaW5kZXhdLmN1c3RvbWVyX3Bhc3N3b3JkOwogICAgZm9ybV9wYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoZm9ybV9wYXlsb2FkKTsKICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgKF9heGlvcyRwb3N0OSA9IHsKICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgdG9rZW46IHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlLAogICAgICB1c2VybmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICBzb3VyY2U6ICJXZWIiLAogICAgICBjaGF0OiAiL3Nob3BpZnlfY3JlYXRlX2N1c3RvbWVyX3Rva2VuIi5jb25jYXQoZm9ybV9wYXlsb2FkKQogICAgfSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0OSwgInRva2VuIiwgdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3Q5LCAicm9sZSIsIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0OSwgInJlZnJlc2hlZF9vcl9jbG9zZWQiLCB0aGlzLnJlZnJlc2hlZF9vcl9jbG9zZWQpLCBfYXhpb3MkcG9zdDkpKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgIHZhciBkYXRhID0gX3JlZi5kYXRhOwoKICAgICAgaWYgKGRhdGEucmVzcG9uc2VzWzBdLnRva2VuX3R5cGUgPT09ICJjdXN0b21lcl90b2tlbiIpIHsKICAgICAgICBpZiAoQm9vbGVhbihkYXRhLnJlc3BvbnNlc1swXS5EYXRhKSkgewogICAgICAgICAgaWYgKF90aGlzMzQucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gInNob3BpZnkiKSB7CiAgICAgICAgICAgIHZhciBjdXN0b21lclRva2VuID0gZGF0YS5yZXNwb25zZXNbMF0uRGF0YS5hY2Nlc3NUb2tlbjsKICAgICAgICAgICAgdmFyIHRva2VuRXhwaXJ5ID0gZGF0YS5yZXNwb25zZXNbMF0uRGF0YS5leHBpcmVzQXQ7CgogICAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIsIGN1c3RvbWVyVG9rZW4pOwoKICAgICAgICAgICAgX3RoaXMzNC4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfdG9rZW5fZXhwaXJ5IiwgdG9rZW5FeHBpcnkpOwoKICAgICAgICAgICAgX3RoaXMzNC5yZXRhaWxfZmV0Y2hfb3JkZXJzKGN1c3RvbWVyVG9rZW4sIGluZGV4LCBpc1JlZnVuZCwgInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iKTsKICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMzNC5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAid29vY29tbWVyY2UiKSB7CiAgICAgICAgICAgIHZhciBfY3VzdG9tZXJUb2tlbiA9IGRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbWVyX2RhdGEuY3VzdG9tZXJfZW1haWw7CiAgICAgICAgICAgIHZhciBfdG9rZW5FeHBpcnkgPSBkYXRhLnJlc3BvbnNlc1swXS5EYXRhLmV4cGlyZXNBdDsKICAgICAgICAgICAgdmFyIGN1c3RvbWVySWQgPSBkYXRhLnJlc3BvbnNlc1swXS5jdXN0b21lcl9kYXRhLmN1c3RvbWVyX2lkOwogICAgICAgICAgICBfdGhpczM0LnNob3BpZnlfY3VzdG9tZXJfaWQgPSBjdXN0b21lcklkOwoKICAgICAgICAgICAgX3RoaXMzNC4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iLCBfY3VzdG9tZXJUb2tlbik7CgogICAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbl9leHBpcnkiLCBfdG9rZW5FeHBpcnkpOwoKICAgICAgICAgICAgX3RoaXMzNC4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfaWQiLCBjdXN0b21lcklkKTsKCiAgICAgICAgICAgIF90aGlzMzQucmV0YWlsX2ZldGNoX29yZGVycyhfY3VzdG9tZXJUb2tlbiwgaW5kZXgsIGlzUmVmdW5kLCAic2hvcGlmeV9jdXN0b21lcl90b2tlbiIpOwogICAgICAgICAgfSBlbHNlIGlmIChfdGhpczM0LnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJtYWdlbnRvIikgewogICAgICAgICAgICB2YXIgX2N1c3RvbWVyVG9rZW4yID0gZGF0YS5yZXNwb25zZXNbMF0uY3VzdG9tZXJfZGF0YS5jdXN0b21lcl9lbWFpbDsKICAgICAgICAgICAgdmFyIF90b2tlbkV4cGlyeTIgPSBkYXRhLnJlc3BvbnNlc1swXS5EYXRhLmV4cGlyZXNBdDsKICAgICAgICAgICAgdmFyIF9jdXN0b21lcklkID0gZGF0YS5yZXNwb25zZXNbMF0uY3VzdG9tZXJfZGF0YS5jdXN0b21lcl9pZDsKICAgICAgICAgICAgX3RoaXMzNC5zaG9waWZ5X2N1c3RvbWVyX2lkID0gX2N1c3RvbWVySWQ7CgogICAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIsIF9jdXN0b21lclRva2VuMik7CgogICAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbl9leHBpcnkiLCBfdG9rZW5FeHBpcnkyKTsKCiAgICAgICAgICAgIF90aGlzMzQuJHNlc3Npb24uc2V0KCJzaG9waWZ5X2N1c3RvbWVyX2lkIiwgX2N1c3RvbWVySWQpOwoKICAgICAgICAgICAgX3RoaXMzNC5yZXRhaWxfZmV0Y2hfb3JkZXJzKF9jdXN0b21lclRva2VuMiwgaW5kZXgsIGlzUmVmdW5kLCAic2hvcGlmeV9jdXN0b21lcl90b2tlbiIpOwogICAgICAgICAgfSBlbHNlIGlmIChfdGhpczM0LnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJiaWdjb21tZXJjZSIpIHsKICAgICAgICAgICAgdmFyIF9jdXN0b21lclRva2VuMyA9IGRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbWVyX2RhdGEuY3VzdG9tZXJfZW1haWw7CiAgICAgICAgICAgIHZhciBfdG9rZW5FeHBpcnkzID0gZGF0YS5yZXNwb25zZXNbMF0uRGF0YS5leHBpcmVzQXQ7CiAgICAgICAgICAgIHZhciBfY3VzdG9tZXJJZDIgPSBkYXRhLnJlc3BvbnNlc1swXS5jdXN0b21lcl9kYXRhLmN1c3RvbWVyX2lkOwogICAgICAgICAgICBfdGhpczM0LnNob3BpZnlfY3VzdG9tZXJfaWQgPSBfY3VzdG9tZXJJZDI7CgogICAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIsIF9jdXN0b21lclRva2VuMyk7CgogICAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbl9leHBpcnkiLCBfdG9rZW5FeHBpcnkzKTsKCiAgICAgICAgICAgIF90aGlzMzQuJHNlc3Npb24uc2V0KCJzaG9waWZ5X2N1c3RvbWVyX2lkIiwgX2N1c3RvbWVySWQyKTsKCiAgICAgICAgICAgIF90aGlzMzQucmV0YWlsX2ZldGNoX29yZGVycyhfY3VzdG9tZXJUb2tlbjMsIGluZGV4LCBpc1JlZnVuZCwgInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMzNC5jaGF0W2luZGV4XS5yZWNlaXZlZCA9ICJXZSBhcmUgc29ycnksIHlvdXIgY3JlZGVudGlhbHMgYXJlIGludmFsaWQuIFBsZWFzZSB0cnkgYWdhaW4gOikiOwogICAgICAgICAgX3RoaXMzNC5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGRhdGEucmVzcG9uc2VzWzBdLnRva2VuX3R5cGUgPT09ICJjdXN0b21lcl9pZCIpIHsKICAgICAgICBpZiAoX3RoaXMzNC5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAic2hvcGlmeSIpIHsKICAgICAgICAgIHZhciBfY3VzdG9tZXJJZDMgPSBkYXRhLnJlc3BvbnNlc1swXS5jdXN0b21lcl9pZDsKICAgICAgICAgIHZhciBjdXN0b21lckVtYWlsID0gZGF0YS5yZXNwb25zZXNbMF0uY3VzdG9tZXJfZW1haWw7CiAgICAgICAgICBfdGhpczM0LnNob3BpZnlfY3VzdG9tZXJfaWQgPSBfY3VzdG9tZXJJZDM7CgogICAgICAgICAgX3RoaXMzNC4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfaWQiLCBfY3VzdG9tZXJJZDMpOwoKICAgICAgICAgIF90aGlzMzQuJHNlc3Npb24uc2V0KCJzaG9waWZ5X2N1c3RvbWVyX3Rva2VuIiwgY3VzdG9tZXJFbWFpbCk7CgogICAgICAgICAgX3RoaXMzNC5yZXRhaWxfZmV0Y2hfb3JkZXJzKF9jdXN0b21lcklkMywgaW5kZXgsIGlzUmVmdW5kLCAic2hvcGlmeV9jdXN0b21lcl9pZCIpOwogICAgICAgIH0gZWxzZSBpZiAoX3RoaXMzNC5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAid29vY29tbWVyY2UiKSB7CiAgICAgICAgICB2YXIgX2N1c3RvbWVySWQ0ID0gZGF0YS5yZXNwb25zZXNbMF0uY3VzdG9tZXJfaWQ7CiAgICAgICAgICB2YXIgX2N1c3RvbWVyRW1haWwgPSBkYXRhLnJlc3BvbnNlc1swXS5jdXN0b21lcl9lbWFpbDsKCiAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl9pZCIsIF9jdXN0b21lcklkNCk7CgogICAgICAgICAgX3RoaXMzNC4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iLCBfY3VzdG9tZXJFbWFpbCk7CgogICAgICAgICAgX3RoaXMzNC5yZXRhaWxfZmV0Y2hfb3JkZXJzKF9jdXN0b21lcklkNCwgaW5kZXgsIGlzUmVmdW5kLCAic2hvcGlmeV9jdXN0b21lcl9pZCIpOwogICAgICAgIH0gZWxzZSBpZiAoX3RoaXMzNC5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAibWFnZW50byIpIHsKICAgICAgICAgIHZhciBfY3VzdG9tZXJJZDUgPSBkYXRhLnJlc3BvbnNlc1swXS5jdXN0b21lcl9pZDsKICAgICAgICAgIHZhciBfY3VzdG9tZXJFbWFpbDIgPSBkYXRhLnJlc3BvbnNlc1swXS5jdXN0b21lcl9lbWFpbDsKCiAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl9pZCIsIF9jdXN0b21lcklkNSk7CgogICAgICAgICAgX3RoaXMzNC4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iLCBfY3VzdG9tZXJFbWFpbDIpOwoKICAgICAgICAgIF90aGlzMzQucmV0YWlsX2ZldGNoX29yZGVycyhfY3VzdG9tZXJJZDUsIGluZGV4LCBpc1JlZnVuZCwgInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKICAgICAgICB9IGVsc2UgaWYgKF90aGlzMzQucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gImJpZ2NvbW1lcmNlIikgewogICAgICAgICAgdmFyIF9jdXN0b21lcklkNiA9IGRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbWVyX2lkOwogICAgICAgICAgdmFyIF9jdXN0b21lckVtYWlsMyA9IGRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbWVyX2VtYWlsOwoKICAgICAgICAgIF90aGlzMzQuJHNlc3Npb24uc2V0KCJzaG9waWZ5X2N1c3RvbWVyX2lkIiwgX2N1c3RvbWVySWQ2KTsKCiAgICAgICAgICBfdGhpczM0LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIsIF9jdXN0b21lckVtYWlsMyk7CgogICAgICAgICAgX3RoaXMzNC5yZXRhaWxfZmV0Y2hfb3JkZXJzKF9jdXN0b21lcklkNiwgaW5kZXgsIGlzUmVmdW5kLCAic2hvcGlmeV9jdXN0b21lcl9pZCIpOwogICAgICAgIH0gLy8gfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBfdGhpczM0LmNoYXRbaW5kZXhdLnJlY2VpdmVkID0gIldlIGFyZSBzb3JyeSwgY291bGQgbm90IGZpbmQgYW55IHJlY29yZHMgd2l0aCB0aGlzIGVtYWlsLiBQbGVhc2UgdHJ5IGFnYWluIDopIjsKICAgICAgICAgICAgX3RoaXMzNC5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX3RoaXMzNC5jaGF0W2luZGV4XS5yZWNlaXZlZCA9ICJXZSBhcmUgc29ycnksIHlvdXIgY3JlZGVudGlhbHMgYXJlIGludmFsaWQuIFBsZWFzZSB0cnkgYWdhaW4gOikiOwogICAgICAgIF90aGlzMzQuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICB9IC8vIHRoaXMuY2hhdC5zcGxpY2UoaW5kZXgsIDEpOwoKICAgIH0pOwogIH0sCiAgcmV0YWlsX2ZldGNoX2N1c3RvbWVyX2lkOiBmdW5jdGlvbiByZXRhaWxfZmV0Y2hfY3VzdG9tZXJfaWQoY3VzdG9tZXJBY2Nlc3NUb2tlbiwgaW5kZXgsIHRva2VuX3R5cGUpIHsKICAgIHZhciBfdGhpczM1ID0gdGhpczsKCiAgICB2YXIgc2hvcF9lbmRwb2ludCA9IHRoaXMuc2hvcGlmeV9yZXRhaWxfc2hvcF9uYW1lICsgIi5teXNob3BpZnkuY29tIjsKICAgIHRoaXMuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IHRydWU7CgogICAgaWYgKCFCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0ucmVmdW5kX29yZGVyc19saXN0KSkgewogICAgICBpZiAodG9rZW5fdHlwZSA9PT0gInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iKSB7CiAgICAgICAgdmFyIF9heGlvcyRwb3N0MTA7CgogICAgICAgIHZhciBzdHJpbmdpZmllZF9jdXN0b21lcl9wYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgY3VzdG9tZXJfYWNjZXNzX3Rva2VuOiBjdXN0b21lckFjY2Vzc1Rva2VuIC8vc2hvcGlmeSBhY2Nlc3MgdG9rZW4gPT0gZW1haWwgZm9yIHdvb2NvbW1lcmNlCgogICAgICAgIH0pOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgKF9heGlvcyRwb3N0MTAgPSB7CiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlLAogICAgICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgICBjaGF0OiAiL3Nob3BpZnlfZ2V0X2N1c3RvbWVyX2lkX2FuZF9vcmRlcnMiLmNvbmNhdChzdHJpbmdpZmllZF9jdXN0b21lcl9wYXlsb2FkKQogICAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDEwLCAidG9rZW4iLCB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDEwLCAicm9sZSIsIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0MTAsICJyZWZyZXNoZWRfb3JfY2xvc2VkIiwgdGhpcy5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2F4aW9zJHBvc3QxMCkpLnRoZW4oZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgICAgICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7CgogICAgICAgICAgaWYgKEJvb2xlYW4oZGF0YS5yZXNwb25zZXNbMF0uY3VzdG9tKSkgewogICAgICAgICAgICBfdGhpczM1LmxvYWRfY3VzdG9tZXJfb3JkZXJzKGRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbS5vcmRlcnNfbGlzdCwgaW5kZXgsICJyZWZ1bmQiKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzMzUuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPSAiU29tZSBFcnJvciBPY2N1cnJlZC4gUGxlYXNlIFRyeSBBZ2FpbiI7CiAgICAgICAgICAgIF90aGlzMzUuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKHRva2VuX3R5cGUgPT0gInNob3BpZnlfY3VzdG9tZXJfaWQiKSB7CiAgICAgICAgdmFyIF9heGlvcyRwb3N0MTE7CgogICAgICAgIHZhciBfc3RyaW5naWZpZWRfY3VzdG9tZXJfcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgIGN1c3RvbWVySWQ6IHRoaXMuc2hvcGlmeV9jdXN0b21lcl9pZAogICAgICAgIH0pOwoKICAgICAgICB0aGlzLmNoYXRbaW5kZXhdLnJlY2VpdmVkID0gIkZldGNoaW5nIHlvdXIgb3JkZXIgZGV0YWlscyAuLi4iOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgKF9heGlvcyRwb3N0MTEgPSB7CiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlLAogICAgICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgICBjaGF0OiAiL3JldHJpZXZlX2N1c3RvbWVyX29yZGVycyIuY29uY2F0KF9zdHJpbmdpZmllZF9jdXN0b21lcl9wYXlsb2FkKQogICAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDExLCAidG9rZW4iLCB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDExLCAicm9sZSIsIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0MTEsICJyZWZyZXNoZWRfb3JfY2xvc2VkIiwgdGhpcy5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2F4aW9zJHBvc3QxMSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczM1LmxvYWRfY3VzdG9tZXJfb3JkZXJzKHJlc3BvbnNlLmRhdGEucmVzcG9uc2VzWzBdLmN1c3RvbS5vcmRlcnNfbGlzdCwgaW5kZXgsICJyZWZ1bmQiKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgX3RoaXMzNS5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CiAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKCiAgICAgICAgICBfdGhpczM1LnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInJlc3BvbnNlIik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LAogIHJldGFpbF9mZXRjaF9vcmRlcnM6IGZ1bmN0aW9uIHJldGFpbF9mZXRjaF9vcmRlcnMoY3VzdG9tZXJBY2Nlc3NUb2tlbiwgaW5kZXgsIGlzUmVmdW5kLCB0b2tlbl90eXBlKSB7CiAgICB2YXIgX3RoaXMzNiA9IHRoaXM7CgogICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKICAgIGlzUmVmdW5kID0gaXNSZWZ1bmQgfHwgZmFsc2U7CiAgICB0aGlzLmNoYXRbaW5kZXhdLmNvbnZlcnNhdGlvbl9vbmx5ID0gZmFsc2U7CiAgICB2YXIgc2hvcF9lbmRwb2ludCA9IHRoaXMuc2hvcGlmeV9yZXRhaWxfc2hvcF9uYW1lICsgIi5teXNob3BpZnkuY29tIjsKCiAgICBpZiAodG9rZW5fdHlwZSA9PT0gInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iKSB7CiAgICAgIHZhciBfYXhpb3MkcG9zdDEyOwoKICAgICAgdmFyIHN0cmluZ2lmaWVkX2N1c3RvbWVyX3BheWxvYWQgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgY3VzdG9tZXJfYWNjZXNzX3Rva2VuOiBjdXN0b21lckFjY2Vzc1Rva2VuCiAgICAgIH0pOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X3Jlc3BvbnNlX2NlbnNlKCksIChfYXhpb3MkcG9zdDEyID0gewogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlLAogICAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgc291cmNlOiAiV2ViIiwKICAgICAgICBjaGF0OiAiL3Nob3BpZnlfZ2V0X2N1c3RvbWVyX29yZGVycyIuY29uY2F0KHN0cmluZ2lmaWVkX2N1c3RvbWVyX3BheWxvYWQpCiAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDEyLCAidG9rZW4iLCB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDEyLCAicm9sZSIsIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0MTIsICJyZWZyZXNoZWRfb3JfY2xvc2VkIiwgdGhpcy5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2F4aW9zJHBvc3QxMikpLnRoZW4oZnVuY3Rpb24gKF9yZWYzKSB7CiAgICAgICAgdmFyIGRhdGEgPSBfcmVmMy5kYXRhOwogICAgICAgIF90aGlzMzYuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwoKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIGN1c3RvbWVySWQgPSBhdG9iKGRhdGEucmVzcG9uc2VzWzBdLmRhdGEuY3VzdG9tZXIuaWQpOwogICAgICAgICAgX3RoaXMzNi5zaG9waWZ5X2N1c3RvbWVyX2lkID0gY3VzdG9tZXJJZC5zbGljZShjdXN0b21lcklkLmxhc3RJbmRleE9mKCIvIikgKyAxKTsKCiAgICAgICAgICBfdGhpczM2LiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl9pZCIsIF90aGlzMzYuc2hvcGlmeV9jdXN0b21lcl9pZCk7CiAgICAgICAgfSBjYXRjaCAoZSkge30KCiAgICAgICAgaWYgKF90aGlzMzYucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gInNob3BpZnkiKSB7CiAgICAgICAgICB2YXIgb3JkZXJzRGF0YSA9IGRhdGEucmVzcG9uc2VzWzBdLmRhdGEuY3VzdG9tZXIub3JkZXJzLmVkZ2VzOwoKICAgICAgICAgIGlmICh0eXBlb2YgaW5kZXggPT0gIm51bWJlciIgJiYgb3JkZXJzRGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGlmIChpc1JlZnVuZCkgewogICAgICAgICAgICAgIF90aGlzMzYucmV0YWlsX2ZldGNoX2N1c3RvbWVyX2lkKGN1c3RvbWVyQWNjZXNzVG9rZW4sIGluZGV4LCAic2hvcGlmeV9jdXN0b21lcl90b2tlbiIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF90aGlzMzYuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICAgICAgICAgIHZhciBvcmRlcnNfZGF0YSA9IGRhdGEucmVzcG9uc2VzWzBdLmRhdGEuY3VzdG9tZXIub3JkZXJzLmVkZ2VzLAogICAgICAgICAgICAgICAgICBjb21wbGV0ZV9vcmRlcnNfZGF0YSA9IFtdOwoKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyc19kYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgY3VyX25vZGUgPSBvcmRlcnNfZGF0YVtpXS5ub2RlOwogICAgICAgICAgICAgICAgY3VyX25vZGUucHJvY2Vzc2VkQXQgPSBtb21lbnQoY3VyX25vZGUucHJvY2Vzc2VkQXQsIFsiWVlZWS1NTS1ERFRoaDptbTpzc1oiXSkuZm9ybWF0KCJEbyBNTU0gWVlZWSIpOwogICAgICAgICAgICAgICAgY3VyX25vZGUuZnVsZmlsbG1lbnRTdGF0dXMgPSBjdXJfbm9kZS5mdWxmaWxsbWVudFN0YXR1cy5yZXBsYWNlKCJfIiwgIiAiKTsgLy8gU2V0IG9ubHkgZmlyc3QgY2hhcmFjdGVyIHRvIHVwcGVyY2FzZSB3aGlsZSByZW1haW5pbmcgY2hhcmFjdGVycyBzZXQgdG8gbG93ZXJjYXNlCgogICAgICAgICAgICAgICAgY3VyX25vZGUuZnVsZmlsbG1lbnRTdGF0dXMgPSBjdXJfbm9kZS5mdWxmaWxsbWVudFN0YXR1cy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGN1cl9ub2RlLmZ1bGZpbGxtZW50U3RhdHVzLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICBjb21wbGV0ZV9vcmRlcnNfZGF0YS5wdXNoKHsKICAgICAgICAgICAgICAgICAgbmFtZTogY3VyX25vZGUubmFtZSwKICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkX2RhdGU6IGN1cl9ub2RlLnByb2Nlc3NlZEF0LAogICAgICAgICAgICAgICAgICBmdWxmaWxsbWVudF9zdGF0dXM6IGN1cl9ub2RlLmZ1bGZpbGxtZW50U3RhdHVzLAogICAgICAgICAgICAgICAgICBzdGF0dXNfdXJsOiBjdXJfbm9kZS5zdGF0dXNVcmwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX3RoaXMzNi5jaGF0W2luZGV4XS5zaG93X2FsbF9vcmRlcnNfbGlzdCA9IHRydWU7CiAgICAgICAgICAgICAgX3RoaXMzNi5jaGF0W2luZGV4XS5hbGxfb3JkZXJzX2xpc3QgPSBjb21wbGV0ZV9vcmRlcnNfZGF0YTsKICAgICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLnJlY2VpdmVkID0gIlBsZWFzZSBGaW5kIEJlbG93IFlvdXIgTGF0ZXN0IE9yZGVyczoiOwogICAgICAgICAgICAgIF90aGlzMzYuY2hhdFtpbmRleF0ucmVjZW50X29yZGVyc19saXN0ID0gZGF0YS5yZXNwb25zZXNbMF0uZGF0YS5jdXN0b21lci5vcmRlcnMuZWRnZXM7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMzNi5jaGF0W2luZGV4XS5jb252ZXJzYXRpb25fb25seSA9IHRydWU7CiAgICAgICAgICB9LCA1MDApOwogICAgICAgIH0gZWxzZSBpZiAoX3RoaXMzNi5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAid29vY29tbWVyY2UiKSB7CiAgICAgICAgICBpZiAoaXNSZWZ1bmQpIHsKICAgICAgICAgICAgX3RoaXMzNi5sb2FkX2N1c3RvbWVyX29yZGVycyhkYXRhLnJlc3BvbnNlc1swXS5kYXRhLmN1c3RvbWVyLm9yZGVycywgaW5kZXgsIGlzUmVmdW5kID8gInJlZnVuZCIgOiAiYWxsX29yZGVycyIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXMzNi5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CiAgICAgICAgICAgIHZhciBfb3JkZXJzX2RhdGEgPSBkYXRhLnJlc3BvbnNlc1swXS5kYXRhLmN1c3RvbWVyLm9yZGVycywKICAgICAgICAgICAgICAgIF9jb21wbGV0ZV9vcmRlcnNfZGF0YSA9IFtdOwoKICAgICAgICAgICAgZm9yICh2YXIgX2k5ID0gMDsgX2k5IDwgX29yZGVyc19kYXRhLmxlbmd0aDsgX2k5KyspIHsKICAgICAgICAgICAgICB2YXIgY3VyX25vZGUgPSBfb3JkZXJzX2RhdGFbX2k5XTsKICAgICAgICAgICAgICBjdXJfbm9kZS5wcm9jZXNzZWRBdCA9IG1vbWVudChjdXJfbm9kZS5jcmVhdGVkX2F0LCBbIllZWVktTU0tRERUaGg6bW06c3NaIl0pLmZvcm1hdCgiRG8gTU1NIFlZWVkiKTsKICAgICAgICAgICAgICBjdXJfbm9kZS5mdWxmaWxsbWVudF9zdGF0dXMgPSBCb29sZWFuKGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cykgPT09IHRydWUgPyBjdXJfbm9kZS5mdWxmaWxsbWVudF9zdGF0dXMgOiAiVW5mdWxmaWxsZWQiOyAvLyBTZXQgb25seSBmaXJzdCBjaGFyYWN0ZXIgdG8gdXBwZXJjYXNlIHdoaWxlIHJlbWFpbmluZyBjaGFyYWN0ZXJzIHNldCB0byBsb3dlcmNhc2UKCiAgICAgICAgICAgICAgY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzID0gY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7CgogICAgICAgICAgICAgIGZvciAodmFyIF9pMTAgPSAwOyBfaTEwIDwgY3VyX25vZGUub3JkZXJfbm90ZXMubGVuZ3RoOyBfaTEwKyspIHsKICAgICAgICAgICAgICAgIGN1cl9ub2RlLm9yZGVyX25vdGVzW19pMTBdLmRhdGVfY3JlYXRlZCA9IG1vbWVudChjdXJfbm9kZS5vcmRlcl9ub3Rlc1tfaTEwXS5kYXRlX2NyZWF0ZWQsIFsiWVlZWS1NTS1ERFRoaDptbTpzc1oiXSkuZm9ybWF0KCJEbyBNTU0gWVlZWSBISDptbSBhIik7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29tcGxldGVfb3JkZXJzX2RhdGEucHVzaCh7CiAgICAgICAgICAgICAgICBuYW1lOiBjdXJfbm9kZS5pZCwKICAgICAgICAgICAgICAgIHByb2Nlc3NlZF9kYXRlOiBjdXJfbm9kZS5wcm9jZXNzZWRBdCwKICAgICAgICAgICAgICAgIGZ1bGZpbGxtZW50X3N0YXR1czogY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzLAogICAgICAgICAgICAgICAgc3RhdHVzX3VybDogY3VyX25vZGUub3JkZXJfc3RhdHVzX3VybCwKICAgICAgICAgICAgICAgIG9yZGVyX25vdGVzOiBjdXJfbm9kZS5vcmRlcl9ub3RlcwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLnNob3dfYWxsX29yZGVyc19saXN0ID0gdHJ1ZTsKICAgICAgICAgICAgX3RoaXMzNi5jaGF0W2luZGV4XS5hbGxfb3JkZXJzX2xpc3QgPSBfY29tcGxldGVfb3JkZXJzX2RhdGE7CiAgICAgICAgICAgIF90aGlzMzYuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPSAiUGxlYXNlIEZpbmQgQmVsb3cgWW91ciBMYXRlc3QgT3JkZXJzOiI7CiAgICAgICAgICAgIF90aGlzMzYuY2hhdFtpbmRleF0uc2hvd19hbGxfb3JkZXJzX2xpc3QgPSB0cnVlOwogICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLnJlY2VudF9vcmRlcnNfbGlzdCA9IF9jb21wbGV0ZV9vcmRlcnNfZGF0YTsKICAgICAgICAgIH0KCiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMzNi5jaGF0W2luZGV4XS5jb252ZXJzYXRpb25fb25seSA9IHRydWU7CiAgICAgICAgICB9LCA1MDApOwogICAgICAgIH0gZWxzZSBpZiAoX3RoaXMzNi5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAibWFnZW50byIpIHsKICAgICAgICAgIGlmIChpc1JlZnVuZCkgewogICAgICAgICAgICBfdGhpczM2LmxvYWRfY3VzdG9tZXJfb3JkZXJzKGRhdGEucmVzcG9uc2VzWzBdLmRhdGEuY3VzdG9tZXIub3JkZXJzLCBpbmRleCwgaXNSZWZ1bmQgPyAicmVmdW5kIiA6ICJhbGxfb3JkZXJzIik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczM2LmlzX3R5cGluZ19pbmRpY2F0b3Jfb24gPSBmYWxzZTsKICAgICAgICAgICAgdmFyIF9vcmRlcnNfZGF0YTIgPSBkYXRhLnJlc3BvbnNlc1swXS5kYXRhLmN1c3RvbWVyLm9yZGVycywKICAgICAgICAgICAgICAgIF9jb21wbGV0ZV9vcmRlcnNfZGF0YTIgPSBbXTsKCiAgICAgICAgICAgIGZvciAodmFyIF9pMTEgPSAwOyBfaTExIDwgX29yZGVyc19kYXRhMi5sZW5ndGg7IF9pMTErKykgewogICAgICAgICAgICAgIHZhciBjdXJfbm9kZSA9IF9vcmRlcnNfZGF0YTJbX2kxMV07CiAgICAgICAgICAgICAgY3VyX25vZGUucHJvY2Vzc2VkQXQgPSBtb21lbnQoY3VyX25vZGUuY3JlYXRlZF9hdCwgWyJZWVlZLU1NLUREVGhoOm1tOnNzWiJdKS5mb3JtYXQoIkRvIE1NTSBZWVlZIik7CiAgICAgICAgICAgICAgY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzID0gQm9vbGVhbihjdXJfbm9kZS5mdWxmaWxsbWVudF9zdGF0dXMpID09PSB0cnVlID8gY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzIDogIlVuZnVsZmlsbGVkIjsgLy8gU2V0IG9ubHkgZmlyc3QgY2hhcmFjdGVyIHRvIHVwcGVyY2FzZSB3aGlsZSByZW1haW5pbmcgY2hhcmFjdGVycyBzZXQgdG8gbG93ZXJjYXNlCgogICAgICAgICAgICAgIGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cyA9IGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cy5zbGljZSgxKS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAgICAgICBmb3IgKHZhciBfaTEyID0gMDsgX2kxMiA8IGN1cl9ub2RlLm9yZGVyX25vdGVzLmxlbmd0aDsgX2kxMisrKSB7CiAgICAgICAgICAgICAgICBjdXJfbm9kZS5vcmRlcl9ub3Rlc1tfaTEyXS5kYXRlX2NyZWF0ZWQgPSBtb21lbnQoY3VyX25vZGUub3JkZXJfbm90ZXNbX2kxMl0uZGF0ZV9jcmVhdGVkLCBbIllZWVktTU0tRERUaGg6bW06c3NaIl0pLmZvcm1hdCgiRG8gTU1NIFlZWVkgSEg6bW0gYSIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbXBsZXRlX29yZGVyc19kYXRhMi5wdXNoKHsKICAgICAgICAgICAgICAgIG5hbWU6IGN1cl9ub2RlLmlkLAogICAgICAgICAgICAgICAgcHJvY2Vzc2VkX2RhdGU6IGN1cl9ub2RlLnByb2Nlc3NlZEF0LAogICAgICAgICAgICAgICAgZnVsZmlsbG1lbnRfc3RhdHVzOiBjdXJfbm9kZS5mdWxmaWxsbWVudF9zdGF0dXMsCiAgICAgICAgICAgICAgICBzdGF0dXNfdXJsOiBjdXJfbm9kZS5vcmRlcl9zdGF0dXNfdXJsLAogICAgICAgICAgICAgICAgb3JkZXJfbm90ZXM6IGN1cl9ub2RlLm9yZGVyX25vdGVzCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF90aGlzMzYuY2hhdFtpbmRleF0uc2hvd19hbGxfb3JkZXJzX2xpc3QgPSB0cnVlOwogICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLmFsbF9vcmRlcnNfbGlzdCA9IF9jb21wbGV0ZV9vcmRlcnNfZGF0YTI7CiAgICAgICAgICAgIF90aGlzMzYuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPSAiUGxlYXNlIEZpbmQgQmVsb3cgWW91ciBMYXRlc3QgT3JkZXJzOiI7CiAgICAgICAgICAgIF90aGlzMzYuY2hhdFtpbmRleF0uc2hvd19hbGxfb3JkZXJzX2xpc3QgPSB0cnVlOwogICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLnJlY2VudF9vcmRlcnNfbGlzdCA9IF9jb21wbGV0ZV9vcmRlcnNfZGF0YTI7CiAgICAgICAgICB9CgogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzMzYuY2hhdFtpbmRleF0uY29udmVyc2F0aW9uX29ubHkgPSB0cnVlOwogICAgICAgICAgfSwgNTAwKTsKICAgICAgICB9IGVsc2UgaWYgKF90aGlzMzYucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gImJpZ2NvbW1lcmNlIikgewogICAgICAgICAgaWYgKGlzUmVmdW5kKSB7CiAgICAgICAgICAgIF90aGlzMzYubG9hZF9jdXN0b21lcl9vcmRlcnMoZGF0YS5yZXNwb25zZXNbMF0uZGF0YS5jdXN0b21lci5vcmRlcnMsIGluZGV4LCBpc1JlZnVuZCA/ICJyZWZ1bmQiIDogImFsbF9vcmRlcnMiKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzMzYuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICAgICAgICB2YXIgX29yZGVyc19kYXRhMyA9IGRhdGEucmVzcG9uc2VzWzBdLmRhdGEuY3VzdG9tZXIub3JkZXJzLAogICAgICAgICAgICAgICAgX2NvbXBsZXRlX29yZGVyc19kYXRhMyA9IFtdOwoKICAgICAgICAgICAgZm9yICh2YXIgX2kxMyA9IDA7IF9pMTMgPCBfb3JkZXJzX2RhdGEzLmxlbmd0aDsgX2kxMysrKSB7CiAgICAgICAgICAgICAgdmFyIGN1cl9ub2RlID0gX29yZGVyc19kYXRhM1tfaTEzXTsKICAgICAgICAgICAgICBjdXJfbm9kZS5wcm9jZXNzZWRBdCA9IG1vbWVudChjdXJfbm9kZS5jcmVhdGVkX2F0KS5mb3JtYXQoIkRvIE1NTSBZWVlZIik7CiAgICAgICAgICAgICAgY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzID0gQm9vbGVhbihjdXJfbm9kZS5mdWxmaWxsbWVudF9zdGF0dXMpID09PSB0cnVlID8gY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzIDogIlVuZnVsZmlsbGVkIjsgLy8gU2V0IG9ubHkgZmlyc3QgY2hhcmFjdGVyIHRvIHVwcGVyY2FzZSB3aGlsZSByZW1haW5pbmcgY2hhcmFjdGVycyBzZXQgdG8gbG93ZXJjYXNlCgogICAgICAgICAgICAgIGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cyA9IGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGN1cl9ub2RlLmZ1bGZpbGxtZW50X3N0YXR1cy5zbGljZSgxKS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAgICAgICBmb3IgKHZhciBfaTE0ID0gMDsgX2kxNCA8IGN1cl9ub2RlLm9yZGVyX25vdGVzLmxlbmd0aDsgX2kxNCsrKSB7CiAgICAgICAgICAgICAgICBjdXJfbm9kZS5vcmRlcl9ub3Rlc1tfaTE0XS5kYXRlX2NyZWF0ZWQgPSBtb21lbnQoY3VyX25vZGUub3JkZXJfbm90ZXNbX2kxNF0uZGF0ZV9jcmVhdGVkKS5mb3JtYXQoIkRvIE1NTSBZWVlZIEhIOm1tIGEiKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb21wbGV0ZV9vcmRlcnNfZGF0YTMucHVzaCh7CiAgICAgICAgICAgICAgICBuYW1lOiBjdXJfbm9kZS5pZCwKICAgICAgICAgICAgICAgIHByb2Nlc3NlZF9kYXRlOiBjdXJfbm9kZS5wcm9jZXNzZWRBdCwKICAgICAgICAgICAgICAgIGZ1bGZpbGxtZW50X3N0YXR1czogY3VyX25vZGUuZnVsZmlsbG1lbnRfc3RhdHVzLAogICAgICAgICAgICAgICAgc3RhdHVzX3VybDogY3VyX25vZGUub3JkZXJfc3RhdHVzX3VybCwKICAgICAgICAgICAgICAgIG9yZGVyX25vdGVzOiBjdXJfbm9kZS5vcmRlcl9ub3RlcwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLnNob3dfYWxsX29yZGVyc19saXN0ID0gdHJ1ZTsKICAgICAgICAgICAgX3RoaXMzNi5jaGF0W2luZGV4XS5hbGxfb3JkZXJzX2xpc3QgPSBfY29tcGxldGVfb3JkZXJzX2RhdGEzOwogICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLnJlY2VpdmVkID0gIlBsZWFzZSBGaW5kIEJlbG93IFlvdXIgTGF0ZXN0IE9yZGVyczoiOwogICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLnNob3dfYWxsX29yZGVyc19saXN0ID0gdHJ1ZTsKICAgICAgICAgICAgX3RoaXMzNi5jaGF0W2luZGV4XS5yZWNlbnRfb3JkZXJzX2xpc3QgPSBfY29tcGxldGVfb3JkZXJzX2RhdGEzOwogICAgICAgICAgfQoKICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLmNvbnZlcnNhdGlvbl9vbmx5ID0gdHJ1ZTsKICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSBpZiAodG9rZW5fdHlwZSA9PT0gInNob3BpZnlfY3VzdG9tZXJfaWQiKSB7CiAgICAgIHZhciBfYXhpb3MkcG9zdDEzOwoKICAgICAgaWYgKEJvb2xlYW4odGhpcy5zaG9waWZ5X2N1c3RvbWVyX2lkKSA9PT0gZmFsc2UpIHsKICAgICAgICB0aGlzLnNob3BpZnlfY3VzdG9tZXJfaWQgPSB0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl9pZCIpOwogICAgICB9CgogICAgICB2YXIgc2hvcGlmeV9jdXN0b21lcl9lbWFpbCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJzaG9waWZ5X2N1c3RvbWVyX3Rva2VuIik7CgogICAgICB2YXIgX3N0cmluZ2lmaWVkX2N1c3RvbWVyX3BheWxvYWQyID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgIGN1c3RvbWVySWQ6IHRoaXMuc2hvcGlmeV9jdXN0b21lcl9pZCwKICAgICAgICBlbWFpbDogc2hvcGlmeV9jdXN0b21lcl9lbWFpbAogICAgICB9KTsKCiAgICAgIHRoaXMuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPSAiRmV0Y2hpbmcgeW91ciBvcmRlciBkZXRhaWxzIC4uLiI7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgKF9heGlvcyRwb3N0MTMgPSB7CiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBzb3VyY2U6ICJXZWIiLAogICAgICAgIGNoYXQ6ICIvcmV0cmlldmVfY3VzdG9tZXJfb3JkZXJzIi5jb25jYXQoX3N0cmluZ2lmaWVkX2N1c3RvbWVyX3BheWxvYWQyKQogICAgICB9LCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3QxMywgInRva2VuIiwgdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3QxMywgInJvbGUiLCB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDEzLCAicmVmcmVzaGVkX29yX2Nsb3NlZCIsIHRoaXMucmVmcmVzaGVkX29yX2Nsb3NlZCksIF9heGlvcyRwb3N0MTMpKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlc1swXS5jdXN0b20ub3JkZXJzX2xpc3QubGVuZ3RoID09IDAgJiYgX3RoaXMzNi5yZXRhaWxfb3JkZXJfcmV0cmVpdmFsX29ubHlfZW1haWxfcmVxdWlyZWQpIHsKICAgICAgICAgIF90aGlzMzYuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICAgICAgX3RoaXMzNi5jaGF0W2luZGV4XS5jb252ZXJzYXRpb25fb25seSA9IHRydWU7CiAgICAgICAgICBfdGhpczM2LmNoYXRbaW5kZXhdLnJlY2VpdmVkID0gIlRoZXJlIGFyZSBubyBvcmRlcnMgdG8gYmUgZGlzcGxheWVkIGZvciB0aGUgZ2l2ZW4gRW1haWwgb3IgUGhvbmUgbnVtYmVyIjsKICAgICAgICAgIF90aGlzMzYuc2hvcGlmeV9jdXN0b21lcl9pZCA9IG51bGw7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzMzYubG9hZF9jdXN0b21lcl9vcmRlcnMocmVzcG9uc2UuZGF0YS5yZXNwb25zZXNbMF0uY3VzdG9tLm9yZGVyc19saXN0LCBpbmRleCwgaXNSZWZ1bmQgPyAicmVmdW5kIiA6ICJhbGxfb3JkZXJzIik7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzMzYuaXNfdHlwaW5nX2luZGljYXRvcl9vbiA9IGZhbHNlOwogICAgICAgIGNvbnNvbGUubG9nKGUpOwoKICAgICAgICBfdGhpczM2LnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInJlc3BvbnNlIik7CiAgICAgIH0pOwogICAgfQogIH0sCiAgcmV0YWlsX2lzX3Rva2VuX3ZhbGlkOiBmdW5jdGlvbiByZXRhaWxfaXNfdG9rZW5fdmFsaWQoaW5kZXgsIGlzUmVmdW5kKSB7CiAgICBpc1JlZnVuZCA9IGlzUmVmdW5kIHx8IGZhbHNlOwoKICAgIGlmICh0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJzaG9waWZ5IikgewogICAgICBpZiAodGhpcy5jaGF0W2luZGV4XS5mZXRjaF9zaG9waWZ5X2RldGFpbHMgJiYgIUJvb2xlYW4odGhpcy5jaGF0W2luZGV4XS5pc19yZWZ1bmQpICYmICFCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0ucmVjZW50X29yZGVyc19saXN0KSB8fCB0aGlzLmNoYXRbaW5kZXhdLmZldGNoX3Nob3BpZnlfZGV0YWlscyAmJiBCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0uaXNfcmVmdW5kKSAmJiAhQm9vbGVhbih0aGlzLmNoYXRbaW5kZXhdLnJlZnVuZF9vcmRlcnNfbGlzdCkgfHwgdGhpcy5jaGF0W2luZGV4XS5mZXRjaF9zaG9waWZ5X2RldGFpbHMgJiYgQm9vbGVhbih0aGlzLmNoYXRbaW5kZXhdLnJldHVybl9zaG9waWZ5X2VtYWlsKSkgewogICAgICAgIGlmICh0aGlzLnJldGFpbF9vcmRlcl9yZXRyZWl2YWxfb25seV9lbWFpbF9yZXF1aXJlZCkgewogICAgICAgICAgaWYgKEJvb2xlYW4odGhpcy5zaG9waWZ5X2N1c3RvbWVyX2lkKSkgewogICAgICAgICAgICB2YXIgY3VzdG9tZXJUb2tlbiA9IHRoaXMuJHNlc3Npb24uZ2V0KCJzaG9waWZ5X2N1c3RvbWVyX3Rva2VuIik7CgogICAgICAgICAgICBpZiAodGhpcy5jaGF0W2luZGV4XS5pc19yZWZ1bmQpIHsKICAgICAgICAgICAgICB0aGlzLnJldGFpbF9mZXRjaF9jdXN0b21lcl9pZChjdXN0b21lclRva2VuLCBpbmRleCwgInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNoYXRbaW5kZXhdLnJldHVybl9zaG9waWZ5X2VtYWlsKSB7CiAgICAgICAgICAgICAgdGhpcy5zZW5kX3JldGFpbF9jdXN0b21lcl9pZChpbmRleCwgZmFsc2UpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMucmV0YWlsX2ZldGNoX29yZGVycyhjdXN0b21lclRva2VuLCBpbmRleCwgaXNSZWZ1bmQsICJzaG9waWZ5X2N1c3RvbWVyX2lkIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHNob3BpZnlfc3RvcmVfY2lkID0gdGhpcy5nZXRfc2hvcGlmeV9zdG9yZV93aW5kb3dfY3VzdG9tZXJfaWQoKTsKCiAgICAgICAgICBpZiAoQm9vbGVhbihzaG9waWZ5X3N0b3JlX2NpZCkgPT09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChzaG9waWZ5X3N0b3JlX2NpZCA9PT0gbnVsbCB8fCBzaG9waWZ5X3N0b3JlX2NpZCA9PSB1bmRlZmluZWQgfHwgc2hvcGlmeV9zdG9yZV9jaWQgPT0gIiIpIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5zaG9waWZ5X2N1c3RvbWVyX2lkID0gc2hvcGlmeV9zdG9yZV9jaWQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBfY3VzdG9tZXJUb2tlbjQgPSB0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIpOwoKICAgICAgICAgICAgaWYgKHRoaXMuY2hhdFtpbmRleF0uaXNfcmVmdW5kKSB7CiAgICAgICAgICAgICAgdGhpcy5yZXRhaWxfZmV0Y2hfY3VzdG9tZXJfaWQoX2N1c3RvbWVyVG9rZW40LCBpbmRleCwgInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNoYXRbaW5kZXhdLnJldHVybl9zaG9waWZ5X2VtYWlsKSB7CiAgICAgICAgICAgICAgdGhpcy5zZW5kX3JldGFpbF9jdXN0b21lcl9pZChpbmRleCwgZmFsc2UpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMucmV0YWlsX2ZldGNoX29yZGVycyhfY3VzdG9tZXJUb2tlbjQsIGluZGV4LCBpc1JlZnVuZCwgInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gIndvb2NvbW1lcmNlIikgewogICAgICBpZiAodGhpcy5jaGF0W2luZGV4XS5mZXRjaF9zaG9waWZ5X2RldGFpbHMgJiYgIUJvb2xlYW4odGhpcy5jaGF0W2luZGV4XS5pc19yZWZ1bmQpICYmICFCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0ucmVjZW50X29yZGVyc19saXN0KSB8fCB0aGlzLmNoYXRbaW5kZXhdLmZldGNoX3Nob3BpZnlfZGV0YWlscyAmJiBCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0uaXNfcmVmdW5kKSAmJiAhQm9vbGVhbih0aGlzLmNoYXRbaW5kZXhdLnJlZnVuZF9vcmRlcnNfbGlzdCkgfHwgdGhpcy5jaGF0W2luZGV4XS5mZXRjaF9zaG9waWZ5X2RldGFpbHMgJiYgQm9vbGVhbih0aGlzLmNoYXRbaW5kZXhdLnJldHVybl9zaG9waWZ5X2VtYWlsKSkgewogICAgICAgIGlmICh0aGlzLnJldGFpbF9vcmRlcl9yZXRyZWl2YWxfb25seV9lbWFpbF9yZXF1aXJlZCkgewogICAgICAgICAgdGhpcy5zaG9waWZ5X2N1c3RvbWVyX2lkID0gdGhpcy4kc2Vzc2lvbi5nZXQoInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKCiAgICAgICAgICBpZiAoQm9vbGVhbih0aGlzLnNob3BpZnlfY3VzdG9tZXJfaWQpKSB7CiAgICAgICAgICAgIHZhciBfY3VzdG9tZXJUb2tlbjUgPSB0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl9pZCIpOwoKICAgICAgICAgICAgdGhpcy5yZXRhaWxfZmV0Y2hfb3JkZXJzKF9jdXN0b21lclRva2VuNSwgaW5kZXgsIGlzUmVmdW5kLCAic2hvcGlmeV9jdXN0b21lcl9pZCIpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHdvb2NvbW1lcmNlX3N0b3JlX2xvZ2luX2RldGFpbCA9IHRoaXMuZ2V0X3dvb2NvbW1lcmNlX3N0b3JlX3dpbmRvd19jdXN0b21lcl9lbWFpbCgpOwoKICAgICAgICAgIGlmIChCb29sZWFuKHdvb2NvbW1lcmNlX3N0b3JlX2xvZ2luX2RldGFpbCkgPT0gZmFsc2UpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfaWQiLCB3b29jb21tZXJjZV9zdG9yZV9sb2dpbl9kZXRhaWxbMF0pOwogICAgICAgICAgICB0aGlzLiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl90b2tlbiIsIHdvb2NvbW1lcmNlX3N0b3JlX2xvZ2luX2RldGFpbFsxXSk7CgogICAgICAgICAgICBpZiAodGhpcy5jaGF0W2luZGV4XS5pc19yZWZ1bmQpIHsKICAgICAgICAgICAgICB0aGlzLnJldGFpbF9mZXRjaF9jdXN0b21lcl9pZCh3b29jb21tZXJjZV9zdG9yZV9sb2dpbl9kZXRhaWxbMF0sIGluZGV4LCAic2hvcGlmeV9jdXN0b21lcl9pZCIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMucmV0YWlsX2ZldGNoX29yZGVycyh3b29jb21tZXJjZV9zdG9yZV9sb2dpbl9kZXRhaWxbMF0sIGluZGV4LCBpc1JlZnVuZCwgInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gIm1hZ2VudG8iKSB7CiAgICAgIGlmICh0aGlzLmNoYXRbaW5kZXhdLmZldGNoX3Nob3BpZnlfZGV0YWlscyAmJiAhQm9vbGVhbih0aGlzLmNoYXRbaW5kZXhdLmlzX3JlZnVuZCkgJiYgIUJvb2xlYW4odGhpcy5jaGF0W2luZGV4XS5yZWNlbnRfb3JkZXJzX2xpc3QpIHx8IHRoaXMuY2hhdFtpbmRleF0uZmV0Y2hfc2hvcGlmeV9kZXRhaWxzICYmIEJvb2xlYW4odGhpcy5jaGF0W2luZGV4XS5pc19yZWZ1bmQpICYmICFCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0ucmVmdW5kX29yZGVyc19saXN0KSB8fCB0aGlzLmNoYXRbaW5kZXhdLmZldGNoX3Nob3BpZnlfZGV0YWlscyAmJiBCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0ucmV0dXJuX3Nob3BpZnlfZW1haWwpKSB7CiAgICAgICAgaWYgKHRoaXMucmV0YWlsX29yZGVyX3JldHJlaXZhbF9vbmx5X2VtYWlsX3JlcXVpcmVkKSB7CiAgICAgICAgICB0aGlzLnNob3BpZnlfY3VzdG9tZXJfaWQgPSB0aGlzLiRzZXNzaW9uLmdldCgic2hvcGlmeV9jdXN0b21lcl9pZCIpOwoKICAgICAgICAgIGlmIChCb29sZWFuKHRoaXMuc2hvcGlmeV9jdXN0b21lcl9pZCkpIHsKICAgICAgICAgICAgdmFyIF9jdXN0b21lclRva2VuNiA9IHRoaXMuJHNlc3Npb24uZ2V0KCJzaG9waWZ5X2N1c3RvbWVyX2lkIik7CgogICAgICAgICAgICB0aGlzLnJldGFpbF9mZXRjaF9vcmRlcnMoX2N1c3RvbWVyVG9rZW42LCBpbmRleCwgaXNSZWZ1bmQsICJzaG9waWZ5X2N1c3RvbWVyX2lkIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgbWFnZW50b19zdG9yZV9sb2dpbl9kZXRhaWwgPSB0aGlzLmdldF9tYWdlbnRvX3N0b3JlX3dpbmRvd19jdXN0b21lcl9lbWFpbCgpOwoKICAgICAgICAgIGlmIChCb29sZWFuKG1hZ2VudG9fc3RvcmVfbG9naW5fZGV0YWlsKSA9PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLiRzZXNzaW9uLnNldCgic2hvcGlmeV9jdXN0b21lcl9pZCIsIG1hZ2VudG9fc3RvcmVfbG9naW5fZGV0YWlsWzBdKTsKICAgICAgICAgICAgdGhpcy4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iLCBtYWdlbnRvX3N0b3JlX2xvZ2luX2RldGFpbFsxXSk7CgogICAgICAgICAgICBpZiAodGhpcy5jaGF0W2luZGV4XS5pc19yZWZ1bmQpIHsKICAgICAgICAgICAgICB0aGlzLnJldGFpbF9mZXRjaF9jdXN0b21lcl9pZChtYWdlbnRvX3N0b3JlX2xvZ2luX2RldGFpbFswXSwgaW5kZXgsICJzaG9waWZ5X2N1c3RvbWVyX2lkIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5yZXRhaWxfZmV0Y2hfb3JkZXJzKG1hZ2VudG9fc3RvcmVfbG9naW5fZGV0YWlsWzBdLCBpbmRleCwgaXNSZWZ1bmQsICJzaG9waWZ5X2N1c3RvbWVyX2lkIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfSBlbHNlIGlmICh0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJiaWdjb21tZXJjZSIpIHsKICAgICAgaWYgKHRoaXMuY2hhdFtpbmRleF0uZmV0Y2hfc2hvcGlmeV9kZXRhaWxzICYmICFCb29sZWFuKHRoaXMuY2hhdFtpbmRleF0uaXNfcmVmdW5kKSAmJiAhQm9vbGVhbih0aGlzLmNoYXRbaW5kZXhdLnJlY2VudF9vcmRlcnNfbGlzdCkgfHwgdGhpcy5jaGF0W2luZGV4XS5mZXRjaF9zaG9waWZ5X2RldGFpbHMgJiYgQm9vbGVhbih0aGlzLmNoYXRbaW5kZXhdLmlzX3JlZnVuZCkgJiYgIUJvb2xlYW4odGhpcy5jaGF0W2luZGV4XS5yZWZ1bmRfb3JkZXJzX2xpc3QpIHx8IHRoaXMuY2hhdFtpbmRleF0uZmV0Y2hfc2hvcGlmeV9kZXRhaWxzICYmIEJvb2xlYW4odGhpcy5jaGF0W2luZGV4XS5yZXR1cm5fc2hvcGlmeV9lbWFpbCkpIHsKICAgICAgICBpZiAodGhpcy5yZXRhaWxfb3JkZXJfcmV0cmVpdmFsX29ubHlfZW1haWxfcmVxdWlyZWQpIHsKICAgICAgICAgIHRoaXMuc2hvcGlmeV9jdXN0b21lcl9pZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJzaG9waWZ5X2N1c3RvbWVyX2lkIik7CgogICAgICAgICAgaWYgKEJvb2xlYW4odGhpcy5zaG9waWZ5X2N1c3RvbWVyX2lkKSkgewogICAgICAgICAgICB2YXIgX2N1c3RvbWVyVG9rZW43ID0gdGhpcy4kc2Vzc2lvbi5nZXQoInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKCiAgICAgICAgICAgIHRoaXMucmV0YWlsX2ZldGNoX29yZGVycyhfY3VzdG9tZXJUb2tlbjcsIGluZGV4LCBpc1JlZnVuZCwgInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBiaWdjb21tZXJjZV9zdG9yZV9sb2dpbl9kZXRhaWwgPSB0aGlzLmdldF9iaWdjb21tZXJjZV9zdG9yZV93aW5kb3dfY3VzdG9tZXJfZW1haWwoKTsKCiAgICAgICAgICBpZiAoQm9vbGVhbihiaWdjb21tZXJjZV9zdG9yZV9sb2dpbl9kZXRhaWwpID09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuJHNlc3Npb24uc2V0KCJzaG9waWZ5X2N1c3RvbWVyX2lkIiwgYmlnY29tbWVyY2Vfc3RvcmVfbG9naW5fZGV0YWlsWzBdKTsKICAgICAgICAgICAgdGhpcy4kc2Vzc2lvbi5zZXQoInNob3BpZnlfY3VzdG9tZXJfdG9rZW4iLCBiaWdjb21tZXJjZV9zdG9yZV9sb2dpbl9kZXRhaWxbMV0pOwoKICAgICAgICAgICAgaWYgKHRoaXMuY2hhdFtpbmRleF0uaXNfcmVmdW5kKSB7CiAgICAgICAgICAgICAgdGhpcy5yZXRhaWxfZmV0Y2hfY3VzdG9tZXJfaWQoYmlnY29tbWVyY2Vfc3RvcmVfbG9naW5fZGV0YWlsWzBdLCBpbmRleCwgInNob3BpZnlfY3VzdG9tZXJfaWQiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLnJldGFpbF9mZXRjaF9vcmRlcnMoYmlnY29tbWVyY2Vfc3RvcmVfbG9naW5fZGV0YWlsWzBdLCBpbmRleCwgaXNSZWZ1bmQsICJzaG9waWZ5X2N1c3RvbWVyX2lkIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sCiAgZGVtb19yZXRhaWxfcXVlc3Rpb246IGZ1bmN0aW9uIGRlbW9fcmV0YWlsX3F1ZXN0aW9uKCkgewogICAgdmFyIF90aGlzMzcgPSB0aGlzOwoKICAgIGlmICh0aGlzLmlzX3JldGFpbF9ib3QgJiYgdGhpcy5pc0NhbGxlZEZyb21TZXR1cCkgewogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy50ZW1wbGF0ZV9zeW5vbnltcygpLCB7CiAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgIGlzX2dldF9wcm9kdWN0X2xpc3Q6IHRydWUKICAgICAgfSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzMzcuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT09IF90aGlzMzcuYXBpX3N0YXR1c19jb2RlLkRBVEFfQVZBSUxBQkxFX01PREVMUy5NU0dfQ09ERSkgewogICAgICAgICAgdmFyIHByb2R1Y3RfbmFtZXNfbGlzdCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5wcm9kdWN0X25hbWVzX2xpc3Q7CiAgICAgICAgICB2YXIgaXRlbSA9IHByb2R1Y3RfbmFtZXNfbGlzdFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwcm9kdWN0X25hbWVzX2xpc3QubGVuZ3RoKV07CiAgICAgICAgICBfdGhpczM3LnRvX3NlbmQgPSAiUGxlYXNlIHNob3cgbWUgIi5jb25jYXQoaXRlbSk7CiAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgdGV4dDogIlRlc3Rpbmcgb2YgQm90IGluIFByb2dyZXNzLCBTZWFyY2hpbmcgZm9yIGEgcHJvZHVjdCBmcm9tIHlvdXIgU3RvcmUhIiwKICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHR5cGU6ICJpbmZvIiwKICAgICAgICAgICAgdGltZXI6IDUwMDAKICAgICAgICAgIH0pOwogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIC8vICQoIiNzZW5kX2J0biIpLmNsaWNrKCkKICAgICAgICAgICAgX3RoaXMzNy5jaGF0LnB1c2goewogICAgICAgICAgICAgIGNvbnZlcnNhdGlvbl9vbmx5OiB0cnVlLAogICAgICAgICAgICAgIHNlbmRpbmc6IHRydWUsCiAgICAgICAgICAgICAgc2VudDogX3RoaXMzNy50b19zZW5kLAogICAgICAgICAgICAgIHRpbWU6IF90aGlzMzcuZ2VuZXJhdGVfdGltZSgpCiAgICAgICAgICAgIH0pOyAvLyB0aGlzLiRzZXNzaW9uLnNldCgiQm90UmVzcG9uc2VfQ29udmVyc2F0aW9uIiwgdGhpcy5jaGF0KTsKCgogICAgICAgICAgICBfdGhpczM3LnVwZGF0ZV9zY3JvbGxiYXIoInVwdG9fZW5kIiwgInNlbmRlciIpOwoKICAgICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9yZXNwb25zZV9jZW5zZSgpLCB7CiAgICAgICAgICAgICAgY2hhdDogX3RoaXMzNy50b19zZW5kLAogICAgICAgICAgICAgIHRva2VuOiBfdGhpczM3LmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgICAgICAgICB1c2VybmFtZTogX3RoaXMzNy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIHNvdXJjZTogIldlYiIsCiAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IF90aGlzMzcuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICByb2xlOiBfdGhpczM3LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSwKICAgICAgICAgICAgICByZWZyZXNoZWRfb3JfY2xvc2VkOiBfdGhpczM3LnJlZnJlc2hlZF9vcl9jbG9zZWQKICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICBfdGhpczM3LnJlc3BvbnNlX2hhbmRsaW5nKHJlc3BvbnNlLCAiZGlzcGxheV9zdWNjZXNzX3RvYXN0ciIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX3RoaXMzNy50b19zZW5kID0gIiI7CiAgICAgICAgICB9LCAzMjAwKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gX3RoaXMzNy5hcGlfc3RhdHVzX2NvZGUuSU5URUdSQVRJT05fREVUQUlMU19OT1RfRk9VTkRfTU9ERUxTLk1TR19DT0RFKSB7CiAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TRywKICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIHR5cGU6ICJpbmZvIiwKICAgICAgICAgICAgdGltZXI6IDUwMDAKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpczM3LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgICBjb252ZXJzYXRpb25fb25seTogdHJ1ZSwKICAgICAgICAgIHRpbWU6IF90aGlzMzcuZ2VuZXJhdGVfdGltZSgpLAogICAgICAgICAgYXNrX2ZlZWRiYWNrOiBmYWxzZSwKICAgICAgICAgIHJlY2VpdmVkOiAiU29tZSBlcnJvciBvY2N1cnJlZCB3aGlsZSB0ZXN0aW5nLiBQbGVhc2UgdHJ5IGJ5IHJlZnJlc2hpbmcgdGhlIGJyb3dzZXIhIElmIHRoZSBpc3N1ZSBwZXJzaXN0cywgcGxlYXNlIGNvbnRhY3Qgc3lzdGVtIGFkbWluLiIsCiAgICAgICAgICByZWNlaXZpbmc6IHRydWUKICAgICAgICB9OwoKICAgICAgICBfdGhpczM3LmNoYXQucHVzaChtc2cpOwogICAgICB9KTsKICAgIH0KICB9LAogIHJldGFpbF9jaGVja19jdXN0b21lcl9sb2dnZWRfaW46IGZ1bmN0aW9uIHJldGFpbF9jaGVja19jdXN0b21lcl9sb2dnZWRfaW4oKSB7CiAgICB2YXIgX2F4aW9zJHBvc3QxNCwKICAgICAgICBfdGhpczM4ID0gdGhpczsKCiAgICB2YXIgY3VzdG9tZXJfZGF0YSA9IHsKICAgICAgaXNfY3VzdG9tZXJfbG9nZ2VkX2luOiBmYWxzZSwKICAgICAgY3VzdG9tZXJfaWQ6IG51bGwKICAgIH07CgogICAgaWYgKEJvb2xlYW4odGhpcy5zaG9waWZ5X2N1c3RvbWVyX2lkKSkgewogICAgICBjdXN0b21lcl9kYXRhLmlzX2N1c3RvbWVyX2xvZ2dlZF9pbiA9IHRydWU7CiAgICAgIGN1c3RvbWVyX2RhdGEuY3VzdG9tZXJfaWQgPSB0aGlzLnNob3BpZnlfY3VzdG9tZXJfaWQ7CiAgICB9CgogICAgdmFyIHN0cmluZ2lmaWVkX2N1c3RvbWVyX3BheWxvYWQgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgIGN1c3RvbWVyX2RhdGE6IGN1c3RvbWVyX2RhdGEKICAgIH0pOwogICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNoYXRib3RfcmVzcG9uc2VfY2Vuc2UoKSwgKF9heGlvcyRwb3N0MTQgPSB7CiAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgIHRva2VuOiB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgc291cmNlOiAiV2ViIiwKICAgICAgY2hhdDogIi9zaG9waWZ5X3JldHJlaXZlX2N1c3RvbWVyX3NwZWNpZmljX29mZmVycyIuY29uY2F0KHN0cmluZ2lmaWVkX2N1c3RvbWVyX3BheWxvYWQpCiAgICB9LCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3QxNCwgInRva2VuIiwgdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3QxNCwgInJvbGUiLCB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDE0LCAicmVmcmVzaGVkX29yX2Nsb3NlZCIsIHRoaXMucmVmcmVzaGVkX29yX2Nsb3NlZCksIF9heGlvcyRwb3N0MTQpKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBfdGhpczM4LnJlc3BvbnNlX2hhbmRsaW5nKHJlc3BvbnNlLCBudWxsKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIGNvbnNvbGUubG9nKGUpOwoKICAgICAgX3RoaXMzOC51cGRhdGVfc2Nyb2xsYmFyKCJ1cHRvX2VuZCIsICJyZXNwb25zZSIpOwogICAgfSk7CiAgfSwKICBzZW5kX3JldGFpbF9jdXN0b21lcl9pZDogZnVuY3Rpb24gc2VuZF9yZXRhaWxfY3VzdG9tZXJfaWQoaW5kZXgsIGlzX2xvZ2luLCBtZXRhZGF0YSkgewogICAgdmFyIF90aGlzMzkgPSB0aGlzOwoKICAgIGlmIChpc19sb2dpbiA9PT0gdHJ1ZSkgewogICAgICB2YXIgX2F4aW9zJHBvc3QxNTsKCiAgICAgIHZhciBxdWVyeVN0cmluZyA9ICQoIiNzaG9waWZ5X2xvZ2luX2Zvcm0iKS5zZXJpYWxpemVBcnJheSgpOwogICAgICB2YXIgZm9ybV9wYXlsb2FkID0ge307CiAgICAgIGZvcm1fcGF5bG9hZFsic2hvcGlmeV9pc19vbmx5X2VtYWlsIl0gPSB0aGlzLnJldGFpbF9vcmRlcl9yZXRyZWl2YWxfb25seV9lbWFpbF9yZXF1aXJlZDsKICAgICAgZm9ybV9wYXlsb2FkWyJ0ZXh0Il0gPSB0aGlzLmNoYXRbaW5kZXhdLm1ldGFkYXRhLnRleHQ7CiAgICAgIGZvcm1fcGF5bG9hZFsiZW50aXR5Il0gPSB0aGlzLmNoYXRbaW5kZXhdLm1ldGFkYXRhLmVudGl0eTsKCiAgICAgIGZvciAodmFyIGkgaW4gcXVlcnlTdHJpbmcpIHsKICAgICAgICBmb3JtX3BheWxvYWRbcXVlcnlTdHJpbmdbaV0ubmFtZV0gPSB0aGlzLmNoYXRbaW5kZXhdLmN1c3RvbWVyX2VtYWlsX2lkOwogICAgICB9CgogICAgICBmb3JtX3BheWxvYWQgPSBKU09OLnN0cmluZ2lmeShmb3JtX3BheWxvYWQpOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X3Jlc3BvbnNlX2NlbnNlKCksIChfYXhpb3MkcG9zdDE1ID0gewogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlLAogICAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgc291cmNlOiAiV2ViIiwKICAgICAgICBjaGF0OiAiL3JlX29yZGVyX3Byb2R1Y3RzX2FjdGlvbiIuY29uY2F0KGZvcm1fcGF5bG9hZCkKICAgICAgfSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0MTUsICJ0b2tlbiIsIHRoaXMuYm90X3Jlc3BvbnNlX3Rva2VuX3ZhbHVlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0MTUsICJyb2xlIiwgdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUpLCBfZGVmaW5lUHJvcGVydHkoX2F4aW9zJHBvc3QxNSwgInJlZnJlc2hlZF9vcl9jbG9zZWQiLCB0aGlzLnJlZnJlc2hlZF9vcl9jbG9zZWQpLCBfYXhpb3MkcG9zdDE1KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczM5LmNoYXRbaW5kZXhdLnJlY2VpdmVkID0gIiI7CiAgICAgICAgX3RoaXMzOS5jaGF0W2luZGV4XS5mZXRjaF9zaG9waWZ5X2RldGFpbHMgPSBmYWxzZTsKCiAgICAgICAgX3RoaXMzOS5jaGF0LnNwbGljZShpbmRleCwgMSk7CgogICAgICAgIF90aGlzMzkucmVzcG9uc2VfaGFuZGxpbmcocmVzcG9uc2UpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgY29uc29sZS5sb2coIkVycm9yIDo+PiAiLCBlcnIpOwogICAgICB9KTsKICAgIH0gZWxzZSB7Ly8gbGV0IGZvcm1fcGF5bG9hZCA9IHsKICAgICAgLy8gICBlbWFpbDonYXNoaXNoLmlAY29kZWFycmF5LnRlY2gnLAogICAgICAvLyAgIHBhc3N3b3JkOiAiIiwKICAgICAgLy8gICBzaG9waWZ5X2lzX29ubHlfZW1haWw6IGZhbHNlLAogICAgICAvLyAgIHRleHQ6IHRoaXMuY2hhdFtpbmRleF0ubWV0YWRhdGEudGV4dCwKICAgICAgLy8gICBlbnRpdHkgOiB0aGlzLmNoYXRbaW5kZXhdLm1ldGFkYXRhLmVudGl0eQogICAgICAvLyB9OwogICAgICAvLyBmb3JtX3BheWxvYWQgPSBKU09OLnN0cmluZ2lmeShmb3JtX3BheWxvYWQpOwogICAgICAvLyBheGlvcwogICAgICAvLyAgIC5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X3Jlc3BvbnNlX2NlbnNlKCksIHsKICAgICAgLy8gICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgIC8vICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIC8vICAgICB1c2VybmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAvLyAgICAgc291cmNlOiAiV2ViIiwKICAgICAgLy8gICAgIGNoYXQ6IGAvcmVfb3JkZXJfcHJvZHVjdHNfYWN0aW9uJHtmb3JtX3BheWxvYWR9YCwKICAgICAgLy8gICAgIHRva2VuOiB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSwKICAgICAgLy8gICAgIHJvbGU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlLAogICAgICAvLyAgICAgcmVmcmVzaGVkX29yX2Nsb3NlZDogdGhpcy5yZWZyZXNoZWRfb3JfY2xvc2VkLAogICAgICAvLyAgIH0pCiAgICAgIC8vICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgIC8vICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgLy8gICAgIGNvbnNvbGUubG9nKHRoaXMpOwogICAgICAvLyAgICAgdGhpcy5yZXNwb25zZV9oYW5kbGluZyhyZXNwb25zZSkKICAgICAgLy8gICB9KQogICAgICAvLyAgIC5jYXRjaCgoZXJyKSA9PiB7CiAgICAgIC8vICAgICBjb25zb2xlLmxvZygiRXJyb3IgOj4+ICIsIGVycik7CiAgICAgIC8vICAgfSk7CiAgICB9CiAgfSwKICBvcGVuX21lc3NhZ2luZ19mcmFtZXdvcmtfaW50ZWdyYXRpb246IGZ1bmN0aW9uIG9wZW5fbWVzc2FnaW5nX2ZyYW1ld29ya19pbnRlZ3JhdGlvbih1cmwpIHsKICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgbGluay5ocmVmID0gdXJsOyAvLyBsaW5rLnNldEF0dHJpYnV0ZSgiZG93bmxvYWQiLCBmaWxlX25hbWUpOwoKICAgIGxpbmsuc2V0QXR0cmlidXRlKCJ0YXJnZXQiLCAiX2JsYW5rIik7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspOwogICAgbGluay5jbGljaygpOwogICAgbGluay5yZW1vdmUoKTsKICB9LAogIHN1cHBvcnRfc3Vic2NyaXB0aW9uX2RhdGE6IGZ1bmN0aW9uIHN1cHBvcnRfc3Vic2NyaXB0aW9uX2RhdGEoKSB7CiAgICB2YXIgX2F4aW9zJHBvc3QxNiwKICAgICAgICBfdGhpczQwID0gdGhpczsKCiAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X3Jlc3BvbnNlX2NlbnNlKCksIChfYXhpb3MkcG9zdDE2ID0gewogICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICB0b2tlbjogdGhpcy5ib3RfcmVzcG9uc2VfdG9rZW5fdmFsdWUsCiAgICAgIHVzZXJuYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwKICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDE2LCAidG9rZW4iLCB0aGlzLmJvdF9yZXNwb25zZV90b2tlbl92YWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDE2LCAicm9sZSIsIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0MTYsICJyZWZyZXNoZWRfb3JfY2xvc2VkIiwgdGhpcy5yZWZyZXNoZWRfb3JfY2xvc2VkKSwgX2RlZmluZVByb3BlcnR5KF9heGlvcyRwb3N0MTYsICJjaGF0IiwgIi9zdXBwb3J0X3N1YnNjcmlwdGlvbl9kYXRhIiksIF9kZWZpbmVQcm9wZXJ0eShfYXhpb3MkcG9zdDE2LCAic291cmNlIiwgIldlYiIpLCBfYXhpb3MkcG9zdDE2KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgX3RoaXM0MC5yZXNwb25zZV9oYW5kbGluZyhyZXNwb25zZSk7CiAgICB9KTsKICB9LAogIGNoZWNrX25vX3Byb2R1Y3RzOiBmdW5jdGlvbiBjaGVja19ub19wcm9kdWN0cygpIHsKICAgIHZhciBwcm9kdWN0c19kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicHJvZHVjdHNfbGlzdF9kaXYiKTsKICAgIHZhciBkaXNwbGF5X25vbmVfY291bnQgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvZHVjdHNfZGl2LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChwcm9kdWN0c19kaXYuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9PT0gIm5vbmUiKSB7CiAgICAgICAgZGlzcGxheV9ub25lX2NvdW50ICs9IDE7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoZGlzcGxheV9ub25lX2NvdW50ID09PSBwcm9kdWN0c19kaXYuY2hpbGRyZW4ubGVuZ3RoKSB7CiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgY29udmVyc2F0aW9uX29ubHk6IHRydWUsCiAgICAgICAgdGltZTogdGhpcy5nZW5lcmF0ZV90aW1lKCksCiAgICAgICAgcmVjZWl2ZWQ6ICJTb3JyeSwgd2UgY291bGQgbm90IGZpbmQgYW55IHByb2R1Y3RzLiBQbGVhc2UgdHJ5IHJlcGhyYXNpbmcgdG8gc2VhcmNoIGEgZGlmZmVyZW50IHByb2R1Y3QhIiwKICAgICAgICByZWNlaXZpbmc6IHRydWUKICAgICAgfTsKICAgICAgdGhpcy5jaGF0LnB1c2gobXNnKTsKICAgIH0KICB9LAogIGdldF9tYWdlbnRvX3N0b3JlX3dpbmRvd19jdXN0b21lcl9lbWFpbDogZnVuY3Rpb24gZ2V0X21hZ2VudG9fc3RvcmVfd2luZG93X2N1c3RvbWVyX2VtYWlsKCkgewogICAgdHJ5IHsKICAgICAgdmFyIGN1cnIgPSBKU09OLnBhcnNlKHRoaXMudXNlcl9kYXRhLm1hZ2VudG9fY3VzdG9tZXJfZGF0YSk7CgogICAgICBpZiAoQm9vbGVhbihjdXJyLmlkKSA9PSB0cnVlICYmIEJvb2xlYW4oY3Vyci5lbWFpbCkgPT0gdHJ1ZSkgewogICAgICAgIHZhciBjdXN0b21lciA9IFtjdXJyLmlkLCBjdXJyLmVtYWlsXTsKICAgICAgICByZXR1cm4gY3VzdG9tZXI7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHt9CgogICAgcmV0dXJuIG51bGw7CiAgfSwKICBnZXRfd29vY29tbWVyY2Vfc3RvcmVfd2luZG93X2N1c3RvbWVyX2VtYWlsOiBmdW5jdGlvbiBnZXRfd29vY29tbWVyY2Vfc3RvcmVfd2luZG93X2N1c3RvbWVyX2VtYWlsKCkgewogICAgdHJ5IHsKICAgICAgdmFyIGN1cnIgPSB0aGlzLnVzZXJfZGF0YS53b29fY3VycmVudF91c2VyOwoKICAgICAgaWYgKGN1cnIuSUQgIT09IDAgJiYgY3Vyci5hbGxjYXBzLmN1c3RvbWVyID09IHRydWUpIHsKICAgICAgICB2YXIgY3VzdG9tZXIgPSBbY3Vyci5kYXRhLklELCBjdXJyLmRhdGEudXNlcl9lbWFpbF07CiAgICAgICAgcmV0dXJuIGN1c3RvbWVyOwogICAgICB9CiAgICB9IGNhdGNoIChlKSB7fQoKICAgIHJldHVybiBudWxsOwogIH0sCiAgZ2V0X2JpZ2NvbW1lcmNlX3N0b3JlX3dpbmRvd19jdXN0b21lcl9lbWFpbDogZnVuY3Rpb24gZ2V0X2JpZ2NvbW1lcmNlX3N0b3JlX3dpbmRvd19jdXN0b21lcl9lbWFpbCgpIHsKICAgIC8vIFJlbWFpbmluZyBub3QgaW1wbGVtZW50ZWQKICAgIHRyeSB7CiAgICAgIHZhciBjdXJyID0gSlNPTi5wYXJzZSh0aGlzLnVzZXJfZGF0YS5iaWdjb21tZXJjZV9jdXN0b21lcl9kYXRhKTsKCiAgICAgIGlmIChCb29sZWFuKGN1cnIuaWQpID09IHRydWUgJiYgQm9vbGVhbihjdXJyLmVtYWlsKSA9PSB0cnVlKSB7CiAgICAgICAgdmFyIGN1c3RvbWVyID0gW2N1cnIuaWQsIGN1cnIuZW1haWxdOwogICAgICAgIHJldHVybiBjdXN0b21lcjsKICAgICAgfQogICAgfSBjYXRjaCAoZSkge30KCiAgICByZXR1cm4gbnVsbDsKICB9LAogIGdldF9zaG9waWZ5X3N0b3JlX3dpbmRvd19jdXN0b21lcl9pZDogZnVuY3Rpb24gZ2V0X3Nob3BpZnlfc3RvcmVfd2luZG93X2N1c3RvbWVyX2lkKCkgewogICAgdHJ5IHsKICAgICAgdmFyIGN1cnIgPSB3aW5kb3cuU2hvcGlmeUFuYWx5dGljcy5tZXRhLnBhZ2UuY3VzdG9tZXJJZDsKCiAgICAgIGlmIChjdXJyICE9PSB1bmRlZmluZWQgJiYgY3VyciAhPT0gbnVsbCAmJiBjdXJyICE9PSAiIikgewogICAgICAgIHJldHVybiBjdXJyOwogICAgICB9CiAgICB9IGNhdGNoIChlKSB7fQoKICAgIHRyeSB7CiAgICAgIHZhciBfY3VyciA9IHdpbmRvdy5tZXRhLnBhZ2UuY3VzdG9tZXJJZDsKCiAgICAgIGlmIChfY3VyciAhPT0gdW5kZWZpbmVkICYmIF9jdXJyICE9PSBudWxsICYmIF9jdXJyICE9PSAiIikgewogICAgICAgIHJldHVybiBfY3VycjsKICAgICAgfQogICAgfSBjYXRjaCAoZSkge30KCiAgICB0cnkgewogICAgICB2YXIgX2N1cnIyID0gX3N0LmNpZDsKCiAgICAgIGlmIChfY3VycjIgIT09IHVuZGVmaW5lZCAmJiBfY3VycjIgIT09IG51bGwgJiYgX2N1cnIyICE9PSAiIikgewogICAgICAgIHJldHVybiBfY3VycjI7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHt9CgogICAgcmV0dXJuIG51bGw7CiAgfSwKICBub19vcmRlcnNfdG9fYmVfc2hvd246IGZ1bmN0aW9uIG5vX29yZGVyc190b19iZV9zaG93bihpbmRleCkgewogICAgdGhpcy5jaGF0W2luZGV4XS5yZWNlaXZlZCA9ICJJdCBzZWVtcyB5b3UgaGF2ZSBubyBvcmRlcnMgcmlnaHQgbm93ISI7CiAgfSwKICBjaGFuZ2VfY2hhdF90ZXh0X3RvX2xvZ2luX3JlZGlyZWN0OiBmdW5jdGlvbiBjaGFuZ2VfY2hhdF90ZXh0X3RvX2xvZ2luX3JlZGlyZWN0KGluZGV4KSB7CiAgICB0aGlzLmNoYXRbaW5kZXhdLnJlY2VpdmVkID0gJzxwIHN0eWxlPSJ3aWR0aDphdXRvO21hcmdpbi1ib3R0b206MDsiPiBQbGVhc2UgbG9naW4gb24gdGhlIHN0b3JlIGJ5IGNsaWNraW5nIDxhIHRpdGxlPSJUaGlzIGZlYXR1cmUgaXMgb25seSBhdmFpbGFibGUgb24gdGhlIHN0b3JlIHdlYnNpdGUuImNsYXNzPSJib3QtcmVzcG9uc2Utc3R5bGUiIHN0eWxlPSJjdXJzb3I6IG5vdC1hbGxvd2VkOyIgaHJlZj0iamF2YXNjcmlwdDogdm9pZCgwKSI+IGhlcmUgPC9hPjwvcD4nOwogIH0sCiAgcmV0dXJuX2RvY3VtZW50X2Nvb2tpZXM6IGZ1bmN0aW9uIHJldHVybl9kb2N1bWVudF9jb29raWVzKG5hbWUpIHsKICAgIHZhciBjb29raWUgPSB7fTsKICAgIGRvY3VtZW50LmNvb2tpZS5zcGxpdCgiOyIpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7CiAgICAgIHZhciBfZWwkc3BsaXQgPSBlbC5zcGxpdCgiPSIpLAogICAgICAgICAgX2VsJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9lbCRzcGxpdCwgMiksCiAgICAgICAgICBrID0gX2VsJHNwbGl0MlswXSwKICAgICAgICAgIHYgPSBfZWwkc3BsaXQyWzFdOwoKICAgICAgY29va2llW2sudHJpbSgpXSA9IHY7CiAgICB9KTsKICAgIHJldHVybiBjb29raWVbbmFtZV07CiAgfSwKICBhdmFpbGFibGVfcXR5OiBmdW5jdGlvbiBhdmFpbGFibGVfcXR5KHN0b2NrX3F0eSwgaWQpIHsKICAgIGlmICh0aGlzLmFkZHRvQ2FydGRhdGEubGVuZ3RoICE9IDApIHsKICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmFkZHRvQ2FydGRhdGEpIHsKICAgICAgICBpZiAodGhpcy5hZGR0b0NhcnRkYXRhW2ldLmlkID09PSBpZCkgewogICAgICAgICAgdmFyIHJlcyA9IHN0b2NrX3F0eSAtIHRoaXMuYWRkdG9DYXJ0ZGF0YVtpXS5vcmRlcl9xdHk7CiAgICAgICAgICByZXR1cm4gcmVzID09IDAgPyAicmVhY2hlZCIgOiByZXM7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gc3RvY2tfcXR5OwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHN0b2NrX3F0eTsKICAgIH0KICB9LAogIHNjcm9sbF9jYXJkX3JpZ2h0OiBmdW5jdGlvbiBzY3JvbGxfY2FyZF9yaWdodChpdGVtKSB7CiAgICB2YXIgZG9jID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2Nhcm91c2VsX2NhcmRzX2lkXyIuY29uY2F0KGl0ZW0pKTsKICAgIGRvYy5zY3JvbGxMZWZ0ICs9IDI1MDsKICAgIHZhciBtYXhTY3JvbGxMZWZ0ID0gZG9jLnNjcm9sbFdpZHRoIC0gZG9jLmNsaWVudFdpZHRoOwogICAgbWF4U2Nyb2xsTGVmdCA9IG1heFNjcm9sbExlZnQgLSAyMzA7CiAgICB2YXIgc2Vjb25kX2J0dG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjY2Fyb3VzZWxfc2Nyb2xsX2J0bjJfIi5jb25jYXQoaXRlbSkpOwogICAgdmFyIGZpcnN0X2J0dG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjY2Fyb3VzZWxfc2Nyb2xsX2J0bjFfIi5jb25jYXQoaXRlbSkpOwogICAgZmlyc3RfYnR0bi5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCiAgICBpZiAoZG9jLnNjcm9sbExlZnQgPj0gbWF4U2Nyb2xsTGVmdCkgewogICAgICBzZWNvbmRfYnR0bi5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgfQogIH0sCiAgc2Nyb2xsX2NhcmRfbGVmdDogZnVuY3Rpb24gc2Nyb2xsX2NhcmRfbGVmdChpdGVtKSB7CiAgICB2YXIgZG9jID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2Nhcm91c2VsX2NhcmRzX2lkXyIuY29uY2F0KGl0ZW0pKTsKICAgIGRvYy5zY3JvbGxMZWZ0IC09IDI1MDsKICAgIHZhciBmaXJzdF9idHRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2Nhcm91c2VsX3Njcm9sbF9idG4xXyIuY29uY2F0KGl0ZW0pKTsKICAgIHZhciBzZWNvbmRfYnR0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNjYXJvdXNlbF9zY3JvbGxfYnRuMl8iLmNvbmNhdChpdGVtKSk7CiAgICBzZWNvbmRfYnR0bi5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCiAgICBpZiAoZG9jLnNjcm9sbExlZnQgPD0gMjUwKSB7CiAgICAgIGZpcnN0X2J0dG4uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIH0KICB9Cn0pLCBfbmFtZSRjb21wb25lbnRzJG1peGkpOw=="},null]}