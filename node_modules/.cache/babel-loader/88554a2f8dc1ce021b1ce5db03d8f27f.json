{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/ResponseBot.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/ResponseBot.vue","mtime":1645594423487},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.filter";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.array.includes";
import "core-js/modules/es.array.index-of";
import "core-js/modules/es.array.join";
import "core-js/modules/es.array.last-index-of";
import "core-js/modules/es.array.map";
import "core-js/modules/es.array.reduce";
import "core-js/modules/es.array.slice";
import "core-js/modules/es.array.splice";
import "core-js/modules/es.function.name";
import "core-js/modules/es.map";
import "core-js/modules/es.object.keys";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.object.values";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.string.includes";
import "core-js/modules/es.string.iterator";
import "core-js/modules/es.string.match";
import "core-js/modules/es.string.replace";
import "core-js/modules/es.string.split";
import "core-js/modules/es.string.trim";
import "core-js/modules/web.dom-collections.for-each";
import "core-js/modules/web.dom-collections.iterator";
import _slicedToArray from "/home/vimalesh/CENSE/chatbot-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "/home/vimalesh/CENSE/chatbot-portal/node_modules/@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "/home/vimalesh/CENSE/chatbot-portal/node_modules/@babel/runtime/helpers/esm/defineProperty";

var _name$components$mixi;

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
import axios from "axios";
import api_calls from "@/portal/api_calls";
import fingerprint from "@/portal/components/fingerprint";
import { bus } from "@/portal/main";
import { setTimeout } from "timers";
import Multiselect from "vue-multiselect";
import VideoViewer from "@/portal/components/Response Bot/VideoViewer.vue";
import debounce from "vue-debounce/dist/debounce.min.js"; // import { Socket } from "phoenix-socket";

import { Socket, Presence } from "phoenix";
import StarRating from 'vue-star-rating';
import { voicerecorder, start_voice_communication, foreignxchange_custom, generate_time } from "@/portal/mixins";
import moment from "moment";
import swal from "sweetalert2";
import CenseCart from './CenseCart.vue';
import VueNumericInput from 'vue-numeric-input';
import sound from "@/portal/assets/audio/mixkit-add-to-cart.wav";
import "@/portal/assets/js/shopify.min.js";
export default (_name$components$mixi = {
  name: "response-bot",
  components: {
    Multiselect: Multiselect,
    VideoViewer: VideoViewer,
    StarRating: StarRating,
    CenseCart: CenseCart,
    VueNumericInput: VueNumericInput
  },
  mixins: [voicerecorder, start_voice_communication, foreignxchange_custom, generate_time],
  data: function data() {
    return {
      companyid: this.$session.get("UserInformation").company_id,
      companyname: this.$session.get("UserInformation").company_name,
      popup_msg: "You can type ‘Restart”  at </br>any  time to get back</br> to the Main Menu",
      refreshed_or_closed: true,
      qus_ans: "answers",
      to_send: "",
      cense_enquiry: false,
      is_agent_typing: false,
      user_name: "",
      show: false,
      chat: [],
      fingerprint: null,
      bot_response_token_value: this.$session.get("BotToken"),
      level: 0,
      recognition: null,
      json_data: {
        create_appointment: '{"User": {"Physician": {"ID": "DT000000000000000237"},"UserName":"ac","ID":"US000000000000000138","Account": {"ID": "CO00023"},"Token": "Z1rSGGm0XpMWjt3giAErPPWZ84TQN9FsFMBLsU+/LAu6yualMg6EP2bsrwZjLPwm3j4DpPcGc5LcIp3NjgfUsA==","Specialty": {"ID": "PG000000000000000141", "Name": "AC", "Code": "AC"},"Domain": "gogreenbills.com"},"Appointment": {"Date": "08/30/2018", "IsJSONNote": 0, "Patient": {"CaseID": ""}}}',
        visits_finalized: '{"User": {"Physician": {"ID": "DT000000000000011886"},"UserName": "ch","ID": "US000000000000000143","Account":{"ID":"CO00023"},"Token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYXZkaHV0IiwiZXhwIjoxNTI5NDgyNjYzfQ.v1c0HbuWuZXXpJfDrXVc1HPVuffbnGcLqkpg0zm6AoQ","Specialty": {"ID": "PG000000000000000142","Code": "ch"},"Domain": "greenyourbills.com"},"SearchParameters": {"Status": "","OrderBy": "","FromDate": "01/01/2018","Count": "10","SearchText": "","TypeOfVisit": "ALL","SortOrder": "appointment","StartIndex": "1","EndIndex": "10","ToDate": "08/06/2018"}}',
        appointments_count: '{"User": {"Physician": {"ID": "DT000000000000011886"},"UserName": "ch","ID": "US000000000000000143","Account":{"ID":"CO00023"},"Token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYXZkaHV0IiwiZXhwIjoxNTI5NDgyNjYzfQ.v1c0HbuWuZXXpJfDrXVc1HPVuffbnGcLqkpg0zm6AoQ","Specialty": {"ID": "PG000000000000000142","Code": "ch"},"Domain": "greenyourbills.com"},"SearchParameters": {"Status": "","OrderBy": "","FromDate": "01/01/2018","Count": "10","SearchText": "","TypeOfVisit": "ALL","SortOrder": "appointment","StartIndex": "1","EndIndex": "10","ToDate": "08/06/2018"}}',
        create_ticket: '{"AccountName":null,"CallbackPhone":"","CompanyID":"CO00023","Description":"De","DomainName":null,"EmailCC":"abhay.w@codearray.tech","EmailDefault":"manish.y@codearray.tech","Priority":"3","PriorityID":0,"RaisedBy":"lawuser","Status":0,"StatusCode":null,"StatusText":null,"SType":"WP","Subject":"De","SubType":"SAMD-P","TicketID":0,"TicketNumber":null,"Type":0,"TypeText":"Website Problem","listFiles1":["chq1.pdf"]}',
        get_report: '{"companyId": "CO00023"}'
      },
      stop: true,
      demourlbind: false,
      reviewsurlbind: false,
      reviewsurl: "https://www.youtube.com/embed/paAeW86eQZ4",
      demourl: ["https://www.youtube.com/embed/videoseries?KcrJm9UxW3s&index=13&list=PL_jXlih8dgkTE8CrPpiWcA9KxQeKHZAnt&t=0s", "https://www.youtube.com/embed/videoseries?qzS2qINI6IM&list=PL_jXlih8dgkRu5ddGXAGqZ4uLLkoJzCj8&index=2"],
      chat_widget: {
        logo: "",
        title: "",
        style: "",
        bot_theme: "",
        button_border_theme: "#273679",
        user_msg_font_color: "#273679",
        bot_response_font_color: "#273679",
        button_theme: "",
        button_alignment: "",
        bot_icon: "",
        bot_background_image: "",
        button_horizontal_spacing: "3",
        button_vertical_spacing: "5",
        header_background: "",
        bot_font_style: "",
        bot_font_color_sender: "",
        bot_font_color_receiver: "",
        bot_font_color_buttons: "",
        is_powered_by_cense: true
      },
      selected_date: "",
      selected_time: "",
      reason_of_visit: "",
      patient_name: "",
      visitor_number: "",
      full_time_slots: [],
      time_slots: [],
      TODAY_DATE: "",
      channel: null,
      chat_socket: null,
      voice_socket: null,
      live_chat_on: false,
      live_chat_token: null,
      chat_group_name: null,
      to_scroll: false,
      form_payload: null,
      phone_number_validity: /[0-9]{10,11}$/,
      // url_match_regex: /\b(https?|ftp):\/\/([\S])+\.((pdf|csv|xlsx))([\w?=]+)/g,
      url_match_regex: /^https?:\/\/.*[\\\/].+\.[(pdf|csv|xlsx)]{2,4}/,
      // harsh
      isexchange: false,
      isretailigence: false,
      currencyexchange_list: null,
      selected_indication: [],
      welcome_message_not_yet_received: true,
      res: {},
      is_typing_indicator_on: false,
      thumbs_up_icon: require("@/portal/assets/img/Group 7.svg"),
      thumbs_down_icon: require("@/portal/assets/img/Group 6.svg"),
      shopify_ui: null,
      shopify_customer_id: null,
      // refund_order_view_details: {},
      // refund_selected_items: [],
      shopify_retail_shop_name: null,
      shop_url: null,
      is_retail_bot: false,
      shopify_reason_for_refund: null,
      show_shopify_reason_for_refund_error: false,
      support_channel: null,
      is_support_agent_present: false,
      retail_shop_storefront_token: null,
      retail_order_retreival_only_email_required: false,
      retail_shop_currency: null,
      product_list: [],
      product_out_of_stock_list: [],
      checked_list: [],
      current_product: "",
      customer_email: "",
      is_sender_email: false,
      reg_email: /^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/,
      scrollPosition: 0,
      visible_custom_greetings_buttom: false,
      review_message_first: '',
      review_message_second: '',
      review_response_message: '',
      display_products: false,
      retail_web_framework: "",
      is_cense_cart: false,
      show_custom_cart: false,
      addtoCartdata: [],
      total_products_qty: 0,
      over_qty_warning: false,
      contact_help_email: null,
      shopify_reason_for_refund_list: null,
      shopify_reason_for_refund_option: ['Ordered by mistake', 'Ordered wrong product', 'Order not Received', 'No longer needed', 'Better price available', 'Received damaged products', 'Others'],
      order_notes_data: [],
      selected_order_name: "",
      is_woocommerce_order: false,
      visitors_current_location: null,
      is_display_banner_on_landing: false,
      visitors_current_location_url: "https://ipgeolocation.abstractapi.com/v1/?api_key=".concat(process.env.VUE_APP_CURRENT_LOCATION_TOKEN),
      greeting_buttons_position: null
    };
  },
  props: {
    isPreviewBot: Boolean,
    isDialogBot: Boolean,
    current_preview_banner_id: String,
    isTextToBot: {
      type: Boolean,
      default: true
    },
    isCalledFromSetup: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    custom_greetings_buttom_alignment: function custom_greetings_buttom_alignment() {
      if (this.is_retail_bot) {
        return "col-sm-10 px-0";
      } else {
        return "col-sm-12 px-0";
      }
    },
    cart_button_alignment: function cart_button_alignment() {
      if (this.is_retail_bot) {
        return "col-sm-2 px-0";
      } else {
        return null;
      }
    },
    input_disabled: function input_disabled() {
      return this.refreshed_or_closed || this.welcome_message_not_yet_received;
    },
    cssProps: function cssProps() {
      var botAttributes = {
        head_color: this.chat_widget.header_background
      };

      if (this.companyid === "retailigence84926") {
        botAttributes.head_color = this.chat_widget.bot_theme;
      } else if (this.isexchange) {
        return {
          "--bot-head-color": "#fff",
          "--bot-sender-color": "#2b3184",
          "--bot-button-color": "#fdcf38",
          "--bot-link-color": "#2b3184",
          "--bot-button-border": "#273679",
          "--user_msg_font_color": "#273679",
          "--bot-response-font-color": "#273679",
          "--bot-button-background": "#1daae1",
          "--bot-buttons-alignment": "center",
          "--bot-buttons-vertical-spacing": "5%",
          "--bot-buttons-horizontal-spacing": "3%"
        };
      }

      return {
        "--bot-head-color": botAttributes.head_color,
        "--bot-sender-color": this.chat_widget.bot_theme,
        "--bot-button-color": this.chat_widget.bot_theme,
        "--bot-link-color": this.chat_widget.bot_theme,
        "--bot-button-border": this.chat_widget.button_border_theme,
        "--user_msg_font_color": this.chat_widget.user_msg_font_color,
        "--bot-response-font-color": this.chat_widget.bot_response_font_color,
        "--bot-button-background": this.chat_widget.button_theme,
        "--bot-buttons-alignment": this.chat_widget.button_alignment.value,
        "--bot-buttons-vertical-spacing": "".concat(this.chat_widget.button_vertical_spacing, "%"),
        "--bot-buttons-horizontal-spacing": "".concat(this.chat_widget.button_horizontal_spacing, "%"),
        "--bot-font-style": this.chat_widget.bot_font_style.value,
        "--bot-font-color-sender": this.chat_widget.bot_font_color_sender,
        "--bot-font-color-receiver": this.chat_widget.bot_font_color_receiver,
        "--bot-font-color-buttons": this.chat_widget.bot_font_color_buttons
      };
    },
    bot_img_icon: function bot_img_icon() {
      return {
        "background-image": "url(".concat(this.chat_widget.bot_icon, ")")
      };
    },
    chat_bot_background_image: function chat_bot_background_image() {
      return {
        "background-image": "url(".concat(this.chat_widget.bot_background_image, ")")
      };
    },
    shopify_login_button_text: function shopify_login_button_text() {
      if (this.retail_order_retreival_only_email_required) {
        return "Go";
      }

      return "Login";
    },
    cart_icon_svg: function cart_icon_svg() {
      return "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18.000000pt\" height=\"18.000000pt\" viewBox=\"0 0 512.000000 512.000000\" preserveAspectRatio=\"xMidYMid meet\"><g transform=\"translate(0.000000,512.000000) scale(0.100000,-0.100000)\" fill=\"".concat(this.chat_widget.bot_font_color_buttons, "\" stroke=\"none\"><path d=\"M81 5002 c-100 -50 -106 -186 -12 -249 33 -23 39 -23 317 -23 l284 0 5 -22 c3 -13 172 -745 375 -1628 279 -1209 376 -1612 392 -1636 47 -69 -72 -64 1599 -64 1367 0 1514 2 1545 16 37 18 68 62 79 111 9 45 -24 117 -67 143 -33 20 -45 20 -1475 20 -1364 0 -1442 1 -1447 18 -12 37 -106 454 -106 468 0 12 206 14 1503 14 1472 0 1503 0 1534 20 18 10 39 33 48 50 26 50 468 2030 461 2068 -7 44 -39 86 -80 106 -31 15 -208 16 -2014 16 l-1980 0 -27 118 c-73 319 -94 395 -117 419 -49 53 -51 53 -430 53 -316 0 -357 -2 -387 -18z m4702 -869 c2 -5 -81 -381 -184 -838 -104 -456 -188 -831 -189 -833 0 -1 -656 -1 -1457 0 l-1458 3 -192 830 c-105 457 -192 833 -192 838 -1 9 3667 9 3672 0z\"/><path d=\"M2038 1165 c-190 -48 -356 -216 -398 -400 -15 -64 -15 -186 0 -250 31 -137 151 -290 277 -354 173 -87 387 -78 538 23 219 146 306 407 216 647 -55 144 -181 268 -326 320 -78 27 -227 34 -307 14z m217 -295 c48 -19 104 -71 129 -121 111 -223 -147 -449 -354 -310 -176 118 -130 382 78 437 45 12 105 9 147 -6z\"/><path d=\"M3806 1164 c-133 -32 -278 -146 -343 -270 -113 -213 -75 -462 97 -634 213 -213 542 -214 754 -4 35 35 78 88 95 118 38 66 71 190 71 266 0 76 -33 200 -71 266 -17 30 -60 83 -95 118 -134 133 -323 185 -508 140z m195 -288 c48 -8 112 -56 146 -108 25 -38 28 -52 28 -128 0 -76 -3 -90 -27 -127 -51 -78 -118 -115 -209 -115 -109 0 -203 69 -233 173 -20 65 -20 73 0 138 16 56 69 123 117 147 32 17 104 33 127 29 8 -2 31 -6 51 -9z\"/></g></svg>");
    }
  },
  watch: {
    scrollPosition: function scrollPosition() {
      if (this.scrollPosition > 150) {
        this.visible_custom_greetings_buttom = true;
      } else if (this.scrollPosition < 150) {
        this.visible_custom_greetings_buttom = false;
      }
    },
    to_send: function to_send() {
      this.button_fill();
    },
    chat: function chat() {
      this.scroll_down();
    }
  },
  beforeCreated: function beforeCreated() {
    var route_params = this.$route.params;

    if (route_params.reload === true) {
      this.$router.go();
    }
  },
  beforeDestroy: function beforeDestroy() {
    if (this.live_chat_on) this.disconnect_support_chat();
  },
  created: function created() {
    var _this = this,
        _axios$post;

    this.load_widget_settings();
    var bot_templates_data = this.$session.get("BotTemplates");

    for (var i = 0; i < bot_templates_data.length; i++) {
      if (bot_templates_data[i].domain === "Retail" && bot_templates_data[i].subscribed === true) {
        this.is_retail_bot = true;
        break;
      }
    }

    if (this.$session.has("BotResponse_Conversation")) {} // this.chat = this.$session.get("BotResponse_Conversation");
    // if (!this.$session.has("ChatBotImageParameters")) {
    // } else {
    //   this.chat_widget = this.$session.get("ChatBotImageParameters");
    //   this.chat_widget.style = "margin-top: 5px;height:30px;width:auto;margin-left: auto;margin-right: 0;";
    // }


    if (!this.isPreviewBot) {
      if (!this.$session.has("BotToken")) {
        axios.post(api_calls.bot_response_token(), {
          license_key: this.$session.get("UserInformation").license_key,
          username: this.$session.get("UserInformation").email
        }).then(function (response) {
          _this.$session.set("BotToken", response.data);

          _this.bot_response_token_value = response.data;

          _this.refresh_chatbot();
        });
      } else {
        this.bot_response_token_value = this.$session.get("BotToken");
        this.refresh_chatbot();
      }
    } // harsh


    if (this.$session.get("UserInformation").license_key == ".eJxTcssvSs1Mz6tIzkjMS081NDexNIQKKUDFMkpKCoqt9PXLy8v10lBU6yXn5-olluobGRha6hqY6xqYKBgaWBkZW5ma6hmbm5gYmSoBAGa9Hp0.XR3Tuw.X77F_7LDtOLp2Vt9snFDSo31nTw") {
      this.isexchange = true;
    } else if (this.companyid == "retailigence84926") {
      this.isretailigence = true;
    }

    var d = new Date();
    axios.post(api_calls.bot_user_data(), (_axios$post = {
      license_key: this.$session.get("UserInformation").license_key,
      tz: Intl.DateTimeFormat().resolvedOptions().timeZone,
      datetime: d.toISOString(),
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email,
      source: "Web"
    }, _defineProperty(_axios$post, "token", this.bot_response_token_value), _defineProperty(_axios$post, "role", this.$session.get("UserInformation").role), _axios$post)).then(function (response) {});
    axios.post(api_calls.product_settings(), {
      company_name: this.companyname,
      company_id: this.companyid,
      is_email_verification_status: true
    }, {
      headers: {
        Authorization: "Bearer ".concat(this.$session.get("at"))
      }
    }).then(function (response) {
      _this.big_spinner = false;

      if (response.data != "" && response.data != null && response.data != "Internal server Error") {
        var status = response.data.verification_status;

        if (status == "Success") {
          _this.is_sender_email = true;
        } else {
          _this.is_sender_email = false;
        }
      } else {
        _this.is_sender_email = false;
      }
    }).catch(function (e) {
      _this.big_spinner = false;

      if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
        _this.$root.$emit("Session_Expired", e.response.data);
      }
    });
  }
}, _defineProperty(_name$components$mixi, "beforeDestroy", function beforeDestroy() {
  this.$forceUpdate();
}), _defineProperty(_name$components$mixi, "mounted", function mounted() {
  var vm = this;
  document.addEventListener('scroll', function (ev) {
    if (ev.target.id === 'portal_chat_body_id') {
      vm.scrollPosition = ev.target["scrollTop"];
    }
  }, true); // let recaptchaScript = document.createElement('script')
  // recaptchaScript.setAttribute('src', 'https://sdks.shopifycdn.com/buy-button/latest/buybutton.js')
  // document.head.appendChild(recaptchaScript)
  // const plugin = document.createElement("script");
  // plugin.setAttribute(
  //   "src",
  //   "https://sdks.shopifycdn.com/buy-button/latest/buybutton.js"
  // );
  // plugin.async = true;
  // document.head.appendChild(plugin);

  this.show = false;

  if (this.$route.name == "Train the Bot") {
    $(".chat-wrap").css("right", "auto");
  }

  if (this.$route.name == "Direct Response Bot") {
    $(".chat-wrap").css("marginTop", "5%");
  }

  window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
  document.addEventListener("click", someListener);

  function someListener(event) {
    var element = event.target;

    if ((element.tagName == "I" || element.tagName == "A") && element.classList.contains("fa-clipboard")) {
      var msg = element.getAttribute("data-copy-content");
      var temp = document.createElement("textarea");
      var tempMsg = document.createTextNode(msg);
      temp.appendChild(tempMsg);
      document.body.appendChild(temp);
      temp.select();
      document.execCommand("copy");
      document.body.removeChild(temp);
    }
  }

  this.$root.$emit("change_sidebar_main_menu", "Simulate Interaction"); //To hide cense cart if clicked outside

  document.onclick = function (e) {
    if (e.target.closest("#cart-box") || e.target.closest("#custom-cart")) {} else {
      vm.is_cense_cart = false;
    }
  };
}), _defineProperty(_name$components$mixi, "updated", function updated() {
  this.submit_custom_form();
}), _defineProperty(_name$components$mixi, "methods", {
  load_widget_settings: function load_widget_settings() {
    var _this2 = this;

    axios.post(api_calls.get_widget_settings(), {
      companyname: this.companyname,
      companyid: this.companyid,
      email: this.$session.get("UserInformation").email,
      license_key: this.$session.get("UserInformation").license_key,
      token: this.$session.get("UserInformation").tokens,
      isShow: true
    }, {
      headers: {
        Authorization: "Bearer ".concat(this.$session.get("at"))
      }
    }).then(function (response) {
      _this2.chat_widget.title = response.data.WidgetTitle;
      _this2.chat_widget.logo = response.data.ImageUrl;
      _this2.chat_widget.button_theme = response.data.ButtonTheme;
      _this2.chat_widget.button_border_theme = response.data.ButtonBorderTheme === null ? _this2.chat_widget.button_border_theme : response.data.ButtonBorderTheme;
      _this2.chat_widget.user_msg_font_color = response.data.UserMessageFontColor === null ? _this2.chat_widget.user_msg_font_color : response.data.UserMessageFontColor;
      _this2.chat_widget.bot_response_font_color = response.data.BotResponseFontColor === null ? _this2.chat_widget.bot_response_font_color : response.data.BotResponseFontColor;
      _this2.chat_widget.bot_font_style = response.data.BotFont.FontStyle;
      _this2.chat_widget.bot_font_color_sender = response.data.BotFont.FontColorSender;
      _this2.chat_widget.bot_font_color_receiver = response.data.BotFont.FontColorReceiver;
      _this2.chat_widget.bot_font_color_buttons = response.data.BotFont.FontColorButtons;
      _this2.chat_widget.bot_theme = response.data.BotTheme;
      _this2.chat_widget.is_powered_by_cense = response.data.IsPoweredByCense === undefined ? _this2.chat_widget.is_powered_by_cense : response.data.IsPoweredByCense;
      _this2.chat_widget.button_alignment = response.data.BotStyling;
      _this2.chat_widget.bot_icon = response.data.BotImageUrl;
      _this2.chat_widget.button_vertical_spacing = response.data.ButtonStyling.vertical;
      _this2.chat_widget.button_horizontal_spacing = response.data.ButtonStyling.horizontal;
      _this2.chat_widget.bot_background_image = response.data.BgImageUrl;
      _this2.chat_widget.header_background = response.data.HeaderTheme;

      if (response.data.BotGreetings.data.responses.length > 0) {
        var is_visible_greetings = response.data.BotGreetings.data.responses.map(function (item) {
          return item.visible !== undefined ? item.visible : true;
        });

        if (is_visible_greetings.includes(true)) {
          _this2.greeting_buttons_position = response.data.BotGreetings.data.responses.length - 1;

          if (Boolean(response.data.BotGreetings.data.responses[_this2.greeting_buttons_position]['buttons'])) {
            var visible_buttons = response.data.BotGreetings.data.responses[_this2.greeting_buttons_position]['buttons'];
            visible_buttons = visible_buttons.filter(function (button) {
              return button['visible'] === true;
            });
            response.data.BotGreetings.data.responses[_this2.greeting_buttons_position]['buttons'] = visible_buttons;
          }

          var visible_greetings_map = is_visible_greetings.reduce(function (acc, e) {
            return acc.set(e, (acc.get(e) || 0) + 1);
          }, new Map());
          var splice_index = [];

          if (visible_greetings_map.get(true) !== response.data.BotGreetings.data.responses.length) {
            if (response.data.BotGreetings.data.responses[_this2.greeting_buttons_position].visible === false) {
              try {
                for (var i = response.data.BotGreetings.data.responses.length - 1; i >= 0; i--) {
                  if (response.data.BotGreetings.data.responses[i].visible === false) {
                    response.data.BotGreetings.data.responses[i - 1 < 0 ? i : i - 1]['buttons'] = visible_buttons;
                    _this2.greeting_buttons_position = _this2.greeting_buttons_position - 1 < 0 ? _this2.greeting_buttons_position : _this2.greeting_buttons_position - 1;
                    splice_index.push(i);
                  }
                }
              } catch (error) {
                console.log(error);
              }
            } else {
              for (var _i = response.data.BotGreetings.data.responses.length - 1; _i >= 0; _i--) {
                if (response.data.BotGreetings.data.responses[_i].visible === false) {
                  _this2.greeting_buttons_position = _this2.greeting_buttons_position - 1 < 0 ? _this2.greeting_buttons_position : _this2.greeting_buttons_position - 1;
                  splice_index.push(_i);
                }
              }
            }

            for (var _index = 0; _index < splice_index.length; _index++) {
              response.data.BotGreetings.data.responses.splice(splice_index[_index], 1);
            }
          }

          _this2.push_msg(response.data.BotGreetings, response.data.BotGreetings.data.responses);
        }
      } else {
        if (_this2.is_retail_bot) {
          _this2.load_chatbot_integration_details();
        }
      }

      if (_this2.chat_widget.button_alignment === undefined) {
        _this2.chat_widget.button_alignment = "flex-end";
      }

      if (_this2.chat_widget.bot_icon === undefined) {
        _this2.chat_widget.bot_icon = "/img/Bot_img.png";
      }

      _this2.$session.set("ChatBotImageParameters", _this2.chat_widget);

      var styling_value = response.data.HeaderStyling.value;
      var temp_string = "";

      if (styling_value === "left") {
        temp_string = "margin-left: 0;margin-right: auto;";
      } else if (styling_value === "right") {
        temp_string = "margin-left: auto;margin-right: 0;";
      } else if (styling_value === "center") {
        temp_string = "margin-left: auto;margin-right: auto;";
      } else {
        temp_string = "margin-left: auto;margin-right: auto;";
      }

      _this2.chat_widget.style = "margin-top: 5px;height:30px;width:auto;max-width:100% !important;" + temp_string;
    }).catch(function (e) {
      if (_this2.is_retail_bot) {
        _this2.load_chatbot_integration_details();
      }

      if (e.response) {
        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this2.$root.$emit("Session_Expired", e.response.data);
        }
      } else {
        if (_this2.$session.get("UserInformation").company_name == "gogyb") {
          _this2.chat_widget.style = "margin-top: 5px;height:30px;width:60px;margin-left: auto;margin-right: auto;";
          _this2.chat_widget.logo = "/img/cense_image.png";
          _this2.chat_widget.bot_icon = "/img/Bot_img.png";
          _this2.chat_widget.button_vertical_spacing = "5";
          _this2.chat_widget.button_horizontal_spacing = "3";
          _this2.chat_widget.bot_background_image = "";
          _this2.chat_widget.header_background = "#ffffff";
          _this2.chat_widget.button_theme = "#1daae1";
          _this2.chat_widget.user_msg_font_color = "#273679";
          _this2.chat_widget.bot_response_font_color = "#273679";
          _this2.chat_widget.bot_theme = "#273679";
          _this2.chat_widget.button_border_theme = "#273679";
        } else if (_this2.$session.get("UserInformation").company_name == "MT Care") {
          _this2.chat_widget.logo = "/img/robomate_logo.png";
          _this2.chat_widget.style = "margin-top: 5px;height:50px;width:95px;margin-left: auto;margin-right: auto;";
          _this2.chat_widget.bot_icon = "/img/Bot_img.png";
          _this2.chat_widget.button_vertical_spacing = "5";
          _this2.chat_widget.button_horizontal_spacing = "3";
          _this2.chat_widget.bot_background_image = "";
          _this2.chat_widget.header_background = "#ffffff";
          _this2.chat_widget.button_theme = "#1daae1";
          _this2.chat_widget.bot_theme = "#273679";
          _this2.chat_widget.button_border_theme = "#273679";
          _this2.chat_widget.user_msg_font_color = "#273679";
          _this2.chat_widget.bot_response_font_color = "#273679";
        } else {
          _this2.chat_widget.logo = "/img/cense_image.png";
          _this2.chat_widget.style = "margin-top: 5px;height:30px;width:60px;margin-left: auto;margin-right: auto;";
          _this2.chat_widget.bot_icon = "/img/Bot_img.png";
          _this2.chat_widget.button_vertical_spacing = "5";
          _this2.chat_widget.button_horizontal_spacing = "3";
          _this2.chat_widget.bot_background_image = "";
          _this2.chat_widget.header_background = "#ffffff";
          _this2.chat_widget.button_theme = "#1daae1";
          _this2.chat_widget.bot_theme = "#273679";
          _this2.chat_widget.button_border_theme = "#273679";
          _this2.chat_widget.user_msg_font_color = "#273679";
          _this2.chat_widget.bot_response_font_color = "#273679";
          _this2.chat_widget.bot_font_style = 'Roboto';
          _this2.chat_widget.bot_font_color_sender = '#ffffff';
          _this2.chat_widget.bot_font_color_receiver = '#000000';
          _this2.chat_widget.bot_font_color_buttons = '#ffffff';
        }

        _this2.$session.set("ChatBotImageParameters", _this2.chat_widget);
      }
    });
  },
  load_chatbot_integration_details: function load_chatbot_integration_details() {
    var _this3 = this;

    axios.post(api_calls.chatbot_integration_details(), {
      is_get: true,
      company_name: this.companyname,
      company_id: this.companyid,
      email: this.$session.get("UserInformation").email,
      license_key: this.$session.get("UserInformation").license_key,
      token: this.$session.get("UserInformation").tokens
    }, {
      headers: {
        Authorization: "Bearer ".concat(this.$session.get("at"))
      }
    }).then(function (response) {
      if (response.data.status === "success") {
        _this3.chatbot_integration_details_response(response);
      }
    }).catch(function (e) {
      // this.shopify_retail_shop_name = "earthon";
      if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
        _this3.$root.$emit("Session_Expired", e.response.data);

        setTimeout(function () {
          axios.post(api_calls.chatbot_integration_details(), {
            is_get: true,
            company_name: _this3.companyname,
            company_id: _this3.companyid,
            email: _this3.$session.get("UserInformation").email,
            license_key: _this3.$session.get("UserInformation").license_key,
            token: _this3.$session.get("UserInformation").tokens
          }, {
            headers: {
              Authorization: "Bearer ".concat(_this3.$session.get("at"))
            }
          }).then(function (response) {
            if (response.data.status === "success") {
              _this3.chatbot_integration_details_response(response);
            }
          });
        }, 1000);
      }
    });
  },
  chatbot_integration_details_response: function chatbot_integration_details_response(response) {
    this.retail_web_framework = response.data.data.retail_web_framework;
    var webframework = response.data.data[this.retail_web_framework + '_details'];
    this.show_custom_cart = this.retail_web_framework != null ? true : false;

    if (webframework !== null && webframework !== {}) {
      this.retail_shop_currency = webframework.base_currency.value || "USD";
      this.retail_order_retreival_only_email_required = webframework.order_retrieval_only_email_required || false;
      this.contact_help_email = webframework.contact_help_email;
      this.review_response_message = webframework.review_response_message;
      this.review_message_first = webframework.review_message_first;
      this.review_message_second = webframework.review_message_second;
      this.display_products = webframework.display_products_on_landing;
      this.is_display_banner_on_landing = webframework.is_display_banner_on_landing;

      if (this.retail_web_framework == "shopify") {
        this.shopify_retail_shop_name = webframework.shopify_shop_name;
      } else {
        this.shop_url = webframework[this.retail_web_framework + '_shop_url'];
      }
    } // setTimeout(() => {


    if (!this.isPreviewBot) {
      this.get_visitors_current_location();
    } else if (Boolean(this.current_preview_banner_id)) {
      this.preview_banner();
    } // }, 3000);

  },
  contact_us_phone_number: function contact_us_phone_number(phone_number) {
    if (Boolean(phone_number)) {
      return " or call us at: " + phone_number;
    } else {
      return '';
    }
  },
  update_variation: function update_variation(chat_id, product_index, title) {
    for (var i in this.chat[chat_id].products_list[product_index].variations) {
      if (this.chat[chat_id].products_list[product_index].variations[i].variant_title == title) {
        this.chat[chat_id].products_list[product_index].img_url = this.chat[chat_id].products_list[product_index].variations[i].img_url;
        this.chat[chat_id].products_list[product_index].id = this.chat[chat_id].products_list[product_index].variations[i].id;
        this.chat[chat_id].products_list[product_index].permalink = this.chat[chat_id].products_list[product_index].variations[i].permalink;
        this.chat[chat_id].products_list[product_index].price = this.chat[chat_id].products_list[product_index].variations[i].price;
        this.chat[chat_id].products_list[product_index].regular_price = this.chat[chat_id].products_list[product_index].variations[i].regular_price;
        this.chat[chat_id].products_list[product_index].stock_quantity = this.chat[chat_id].products_list[product_index].variations[i].stock_quantity;
        this.chat[chat_id].products_list[product_index].stock_status = this.chat[chat_id].products_list[product_index].variations[i].stock_status;
        this.chat[chat_id].products_list[product_index].variant_title = this.chat[chat_id].products_list[product_index].variations[i].variant_title;
      }
    } // const found = this.chat[chat_id].products_list[product_index].variations.some(el => el.variant_title == "Default");
    // if (!found) this.chat[chat_id].products_list[product_index].variations.push(default_values);

  },
  get_visitors_current_location: function get_visitors_current_location() {
    if (this.is_display_banner_on_landing === true) {
      var cutoff = new Date();
      var date_time = moment.utc(cutoff, ["YYYY-MM-DD HH:mm:ss"]).format("YYYY-MM-DD HH:mm:ss");
      var vm = this;
      $.getJSON(vm.visitors_current_location_url, function (data) {
        if (data) {
          vm.visitors_current_location = {
            "ip_address": data.ip_address,
            "city": data.city,
            "city_geoname_id": data.city_geoname_id,
            "region": data.region,
            "region_iso_code": data.region_iso_code,
            "region_geoname_id": data.region_geoname_id,
            "postal_code": data.postal_code,
            "country": data.country,
            "country_code": data.country_code,
            "country_geoname_id": data.country_geoname_id,
            "country_is_eu": data.country_is_eu,
            "continent": data.continent,
            "continent_code": data.continent_code,
            "continent_geoname_id": data.continent_geoname_id,
            "longitude": data.longitude,
            "latitude": data.latitude,
            "security": data.security,
            "date_time": date_time
          };
          vm.is_display_banner();
        } else {
          vm.is_display_products();
        }
      }).error(function () {
        vm.is_display_products();
      });
    } else {
      this.is_display_products();
    }
  },
  preview_banner: function preview_banner() {
    var _this4 = this;

    axios.post(api_calls.banner_template(), {
      company_name: this.companyname,
      company_id: this.companyid,
      email: this.$session.get("UserInformation").email,
      license_key: this.$session.get("UserInformation").license_key,
      token: this.$session.get("UserInformation").tokens,
      subscription: this.$session.get("UserInformation").subscription,
      is_preview_banner: true,
      banner_id: this.current_preview_banner_id
    }, {
      headers: {
        Authorization: "Bearer ".concat(this.$session.get("at"))
      }
    }).then(function (response) {
      if (response.status == 200) {
        if (Boolean(response.data.responses.length > 0)) {
          _this4.response_handling(response);
        }
      }
    }).catch(function (e) {
      if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
        _this4.$root.$emit("Session_Expired", e.response.data);
      }
    });
  },
  is_display_banner: function is_display_banner() {
    var _this5 = this;

    axios.get(api_calls.banner_template(), {
      params: {
        license_key: this.$session.get("UserInformation").license_key,
        username: this.$session.get("UserInformation").email,
        email: this.$session.get("UserInformation").email,
        token: this.bot_response_token_value,
        is_display_banner: true,
        visitors_current_location: this.visitors_current_location
      }
    }).then(function (response) {
      if (response.status == 200) {
        if (Boolean(response.data.responses.length > 0)) {
          _this5.response_handling(response);
        }
      }

      _this5.is_display_products();
    }).catch(function (e) {
      _this5.is_display_products();

      if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
        _this5.$root.$emit("Session_Expired", e.response.data);
      }
    });
  },
  is_display_products: function is_display_products() {
    var _this6 = this;

    if (this.display_products === true) {
      axios.post(api_calls.display_landing_products(), {
        license_key: this.$session.get("UserInformation").license_key,
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web"
      }).then(function (response) {
        var products_count = response.data.responses[0].products.products_list.length;

        if (products_count > 0) {
          _this6.response_handling(response);
        }

        _this6.is_review_rating();
      }).catch(function (e) {
        _this6.is_review_rating();

        if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
          _this6.$root.$emit("Session_Expired", e.response.data);
        }
      });
    } else {
      this.is_review_rating();
    }
  },
  check_shopify_customer_token_expiry: function check_shopify_customer_token_expiry() {
    var cutoff = this.$session.get("shopify_customer_token_expiry");
    cutoff = moment(cutoff, ["YYYY-MM-DDThh:mm:ssZ"]);
    var current_time = new Date(cutoff);

    if (moment().isBefore(current_time)) {
      return true;
    } else {
      return false;
    }
  },
  is_review_rating: function is_review_rating() {
    var _this7 = this;

    if (Boolean(this.$session.get("shopify_customer_id")) || Boolean(this.$session.get("shopify_customer_token"))) {
      var stringified_customer_payload = JSON.stringify({
        customerId: this.$session.get("shopify_customer_id"),
        email: this.$session.get("shopify_customer_token")
      });
      axios.post(api_calls.chatbot_response_cense(), {
        license_key: this.$session.get("UserInformation").license_key,
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web",
        chat: "/retrieve_customer_orders".concat(stringified_customer_payload),
        role: this.$session.get("UserInformation").role,
        refreshed_or_closed: false
      }).then(function (response) {
        if (Boolean(response.data.responses[0].custom)) {
          if (Boolean(response.data.responses[0].custom.orders_list.length > 0)) {
            _this7.call_review_rating(response.data.responses[0].custom.orders_list);
          }
        }
      });
    }
  },
  call_review_rating: function call_review_rating(data) {
    var _this8 = this;

    var fulfilled_orders = data.filter(function (fulfilled_order) {
      return fulfilled_order.fulfillment_status === "fulfilled";
    });
    var sorted_fulfilled_orders = fulfilled_orders.map(function (item) {
      return item.line_items.map(function (product) {
        return product;
      });
    });
    axios.post(api_calls.product_review_rating(), {
      company_name: this.companyname,
      company_id: this.companyid,
      email: this.$session.get("UserInformation").email,
      license_key: this.$session.get("UserInformation").license_key,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email,
      web_framework: this.retail_web_framework,
      is_get_reviewed_product_id: true,
      review_rating_customer_id: this.$session.get("shopify_customer_id"),
      review_rating_customer_email: this.$session.get("shopify_customer_token")
    }, {
      headers: {
        Authorization: "Bearer ".concat(this.$session.get("at"))
      }
    }).then(function (response) {
      if (response.data.is_review === true) {
        var reviewed_product_details = [];
        var not_reviewed_product_details = [];
        var reviewed_product_id_list = response.data.product_id_list;

        for (var i = 0; i < sorted_fulfilled_orders.length; i++) {
          for (var j = 0; j < sorted_fulfilled_orders[i].length; j++) {
            if (reviewed_product_id_list.includes(sorted_fulfilled_orders[i][j].product_id)) {
              reviewed_product_details.push(sorted_fulfilled_orders[i][j]);
            } else {
              not_reviewed_product_details.push(sorted_fulfilled_orders[i][j]);
            }
          }
        }

        if (not_reviewed_product_details.length > 0 && Boolean(_this8.review_message_first) === true && Boolean(_this8.review_message_second) === true && Boolean(_this8.review_response_message) === true) {
          axios.post(api_calls.product_review_rating(), {
            company_name: _this8.companyname,
            company_id: _this8.companyid,
            email: _this8.$session.get("UserInformation").email,
            license_key: _this8.$session.get("UserInformation").license_key,
            token: _this8.bot_response_token_value,
            username: _this8.$session.get("UserInformation").email,
            web_framework: _this8.retail_web_framework,
            is_get_product_image: true,
            product_id: not_reviewed_product_details[0].product_id
          }, {
            headers: {
              Authorization: "Bearer ".concat(_this8.$session.get("at"))
            }
          }).then(function (response) {
            if (response.data.MSG === 'Image Received Successfully') {
              var product_review_img_url = response.data.image_src;
              var msg = {
                is_review_rating_product: true,
                not_reviewed_product_details: not_reviewed_product_details[0],
                review_message_first: _this8.review_message_first,
                review_message_second: _this8.review_message_second,
                product_review_img_url: product_review_img_url,
                product_rating: null,
                product_review: '',
                time: _this8.generate_time()
              };

              _this8.chat.push(msg);

              _this8.update_scrollbar("upto_end", "response");
            }
          });
        }
      }
    }).catch(function (e) {
      toastr.error("Some Error Occurred.");

      if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
        _this8.$root.$emit("Session_Expired", e.response.data);
      }
    });
  },
  submit_review_rating: function submit_review_rating(index) {
    var _this9 = this;

    if (Boolean(this.chat[index].product_rating) === false) {
      swal({
        text: "Please give rating",
        toast: true,
        showCancelButton: false,
        showConfirmButton: false,
        type: "warning",
        position: "top-end",
        timer: 5000
      });
      return;
    }

    if (Boolean(this.chat[index].product_review) === false) {
      swal({
        text: "Please write review",
        toast: true,
        showCancelButton: false,
        showConfirmButton: false,
        type: "warning",
        position: "top-end",
        timer: 5000
      });
      return;
    }

    if (this.retail_web_framework == "shopify") {
      var product_details = {
        "product_id": this.chat[index].not_reviewed_product_details.product_id,
        "name": this.chat[index].not_reviewed_product_details.name,
        "image_src": this.chat[index].product_review_img_url,
        "price": this.chat[index].not_reviewed_product_details.price,
        "quantity": this.chat[index].not_reviewed_product_details.quantity,
        "variant_id": this.chat[index].not_reviewed_product_details.variant_id
      };
    } else if (this.retail_web_framework == "woocommerce") {
      var product_details = {
        "product_id": this.chat[index].not_reviewed_product_details.product_id,
        "name": this.chat[index].not_reviewed_product_details.name,
        "image_src": this.chat[index].product_review_img_url,
        "price": this.chat[index].not_reviewed_product_details.price,
        "quantity": this.chat[index].not_reviewed_product_details.quantity,
        "variant_id": this.chat[index].not_reviewed_product_details.variation_id
      };
    } else if (this.retail_web_framework == "magento") {
      var product_details = {
        "product_id": this.chat[index].not_reviewed_product_details.product_id,
        "name": this.chat[index].not_reviewed_product_details.name,
        "image_src": this.chat[index].product_review_img_url,
        "price": this.chat[index].not_reviewed_product_details.price,
        "quantity": this.chat[index].not_reviewed_product_details.qty_shipped,
        "variant_id": this.chat[index].not_reviewed_product_details.sku
      };
    }

    axios.post(api_calls.product_review_rating(), {
      company_name: this.companyname,
      company_id: this.companyid,
      email: this.$session.get("UserInformation").email,
      license_key: this.$session.get("UserInformation").license_key,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email,
      is_save_review_rating: true,
      review_rating_customer_id: this.$session.get("shopify_customer_id"),
      review_rating_customer_email: this.$session.get("shopify_customer_token"),
      product_rating: this.chat[index].product_rating,
      product_review: this.chat[index].product_review,
      product_details: product_details
    }, {
      headers: {
        Authorization: "Bearer ".concat(this.$session.get("at"))
      }
    }).then(function (response) {
      if (response.data != "" && response.data != null && response.data != "Internal server Error") {
        _this9.chat[index].is_review_rating_product = false; // this.chat[index].received = this.review_response_message;
        // this.chat[index].time = this.generate_time();

        var msg = {
          received: _this9.review_response_message,
          conversation_only: true,
          receiving: true,
          time: _this9.generate_time()
        };

        _this9.chat.push(msg);

        _this9.update_scrollbar("upto_end", "response");

        if (response.data.MSG === 'Review Saved Successfully') {
          swal({
            text: _this9.review_response_message,
            toast: true,
            showCancelButton: false,
            showConfirmButton: false,
            type: "success",
            position: "top-end",
            timer: 5000
          });
        } else if (response.data.MSG === "Review Not Saved Successfully") {
          swal({
            text: "Some Error Occurred.",
            toast: true,
            showCancelButton: false,
            showConfirmButton: false,
            type: "error",
            position: "top-end",
            timer: 5000
          });
        }
      } else {
        toastr.error("Internal Server Error");
      }
    }).catch(function (e) {
      toastr.error("Some Error Occurred.");

      if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
        _this9.$root.$emit("Session_Expired", e.response.data);
      }
    });
  },
  closecart: function closecart(close_cart) {
    this.is_cense_cart = close_cart;
  },
  cart_communication: function cart_communication(cart_data) {
    this.addtoCartdata = [];
    this.total_products_qty = 0;

    for (var i in cart_data) {
      this.addtoCartdata.push(cart_data[i]);
    }

    for (var j in this.addtoCartdata) {
      this.total_products_qty = this.total_products_qty + this.addtoCartdata[j].order_qty;
    }
  },
  update_quantity: function update_quantity(func, chat_id, index, product) {
    var vm = this;
    this.over_qty_warning = false;
    var buy = parseInt(this.chat[chat_id].products_list[index].buy_qty);
    var order = this.chat[chat_id].products_list[index].order_qty;
    var stock = this.chat[chat_id].products_list[index].stock_quantity;

    if (this.addtoCartdata.length !== 0 && stock != null) {
      for (var i in this.addtoCartdata) {
        if (this.addtoCartdata[i].id == product.id) {
          var cart_order_qty = this.addtoCartdata[i].order_qty;
          stock = stock - cart_order_qty;
        }
      }
    }

    var total = buy + order;

    if (func === "+") {
      this.chat[chat_id].products_list[index].order_qty = 1;

      if (total <= stock || stock == null && !isNaN(total)) {
        this.chat[chat_id].products_list[index].buy_qty += 1;
        vm.$set(vm.chat, chat_id, vm.chat[chat_id]);
      } else {
        this.chat[chat_id].products_list[index].order_qty = 2;

        if (stock === 0) {
          this.chat[chat_id].products_list[index].buy_qty = 1;
        } else {
          this.chat[chat_id].products_list[index].buy_qty = stock;
        }
      }
    }

    if (func === "-") {
      if (buy > 1 && !isNaN(total)) {
        this.chat[chat_id].products_list[index].order_qty = 1;
        this.chat[chat_id].products_list[index].buy_qty -= 1;
        vm.$set(vm.chat, chat_id, vm.chat[chat_id]);
      } else {
        this.chat[chat_id].products_list[index].buy_qty = 1;
        this.chat[chat_id].products_list[index].order_qty = 1;
      }
    }

    if (func === "manual") {
      var quantity = Math.abs(parseInt(product.buy_qty));

      if (!isNaN(quantity)) {
        this.chat[chat_id].products_list[index].order_qty = 1;

        if (quantity) {
          if (quantity <= stock || stock == null) {
            this.chat[chat_id].products_list[index].buy_qty = quantity;
          } else {
            this.chat[chat_id].products_list[index].order_qty = 2;

            if (stock === 0) {
              this.chat[chat_id].products_list[index].buy_qty = 1;
            } else {
              this.chat[chat_id].products_list[index].buy_qty = stock;
            }
          }

          vm.$set(vm.chat, chat_id, vm.chat[chat_id]);
        }
      } else if (isNaN(total)) {
        this.chat[chat_id].products_list[index].buy_qty = 1;
        this.chat[chat_id].products_list[index].order_qty = 1;
        vm.$set(vm.chat, chat_id, vm.chat[chat_id]);
      }
    }
  },
  addproduct: function addproduct(product) {
    this.total_products_qty = 0;
    this.over_qty_warning = false;
    var audio = new Audio(sound);
    audio.play();
    var cart = $('#cense-cart-btn');
    var cart_qty = $('#cart-qty-num');
    var cart_img = $('#cart-img');

    if (this.addtoCartdata.length != 0 && product.buy_qty !== '') {
      var check = false;

      for (var i in this.addtoCartdata) {
        if (this.addtoCartdata[i].id == product.id) {
          check = true;
          var buy = product.buy_qty + this.addtoCartdata[i].order_qty;

          if (product.stock_quantity > this.addtoCartdata[i].order_qty && buy <= product.stock_quantity) {
            this.addtoCartdata[i].order_qty = buy;
            product.order_qty = 1;
            setTimeout(function () {
              cart_qty.addClass('cart-qty');
              cart_img.addClass('cart-img');
              cart.addClass('shake');
              setTimeout(function () {
                cart_qty.removeClass('cart-qty');
                cart_img.removeClass('cart-img');
                cart.removeClass('shake');
              }, 500);
            }, 0);
          } else if (product.stock_quantity == null) {
            this.addtoCartdata[i].order_qty = buy;
            product.order_qty = 1;
            setTimeout(function () {
              cart_qty.addClass('cart-qty');
              cart_img.addClass('cart-img');
              cart.addClass('shake');
              setTimeout(function () {
                cart_qty.removeClass('cart-qty');
                cart_img.removeClass('cart-img');
                cart.removeClass('shake');
              }, 500);
            }, 0);
          } else {
            product.order_qty = 2;
            var res = product.stock_quantity - this.addtoCartdata[i].order_qty;
            product.buy_qty = res === 0 ? 1 : res;
            this.over_qty_warning = true;
          }
        }
      }

      if (check != true && (product.buy_qty <= product.stock_quantity || product.stock_quantity == null)) {
        this.addtoCartdata.push({
          id: product.id,
          img_url: product.img_url,
          price: product.price,
          stock_quantity: product.stock_quantity,
          order_qty: product.buy_qty,
          buy_qty: 1,
          variant_title: product.variant_title,
          stock_status: product.stock_status,
          title: product.title
        });
        setTimeout(function () {
          cart_qty.addClass('cart-qty');
          cart_img.addClass('cart-img');
          cart.addClass('shake');
          setTimeout(function () {
            cart_qty.removeClass('cart-qty');
            cart_img.removeClass('cart-img');
            cart.removeClass('shake');
          }, 500);
        }, 0);
      } else if (check != true && product.buy_qty > product.stock_quantity) {
        this.over_qty_warning = true;
      }
    } else if (product.buy_qty <= product.stock_quantity && product.buy_qty !== '' || product.stock_quantity == null) {
      this.addtoCartdata.push({
        id: product.id,
        img_url: product.img_url,
        price: product.price,
        stock_quantity: product.stock_quantity,
        order_qty: product.buy_qty,
        buy_qty: 1,
        variant_title: product.variant_title,
        stock_status: product.stock_status,
        title: product.title
      });
      setTimeout(function () {
        cart_qty.addClass('cart-qty');
        cart_img.addClass('cart-img');
        cart.addClass('shake');
        setTimeout(function () {
          cart_qty.removeClass('cart-qty');
          cart_img.removeClass('cart-img');
          cart.removeClass('shake');
        }, 500);
      }, 0);
    } else {
      this.over_qty_warning = true;
    }

    for (var j in this.addtoCartdata) {
      this.total_products_qty = this.total_products_qty + this.addtoCartdata[j].order_qty;
    }
  },
  selected_product: function selected_product(value) {
    if (event.target.checked) {
      if (value == "all") {
        this.checked_list = [];

        for (var i in this.product_out_of_stock_list) {
          this.checked_list.push(this.product_out_of_stock_list[i]);
        }

        $("input:checkbox").prop("checked", false);

        for (var _i2 = 0; _i2 < this.checked_list.length; _i2++) {
          $("#product_checkbox_" + this.product_out_of_stock_list[_i2].product_id).prop("checked", true);
          $("#selectall").prop("checked", true);
        }
      } else {
        this.checked_list.push(value);
      }
    } else if (!event.target.checked) {
      if (value != "all") {
        var selectall = document.querySelector("#selectall");

        if (selectall.checked) {
          selectall.checked = false;
        }

        var temp = this.checked_list.filter(function (product_id) {
          return product_id != value;
        });
        this.checked_list = temp;
      } else {
        $("input:checkbox").prop("checked", false);

        for (var _i3 = 0; _i3 < this.checked_list.length; _i3++) {
          $("#product_checkbox_" + this.product_out_of_stock_list[_i3].product_id).prop("checked", false);
          $("#selectall").prop("checked", false);
        }

        this.checked_list = [];
      }
    }
  },
  check_current_product_active: function check_current_product_active(index) {
    // console.table(index, this.templatelist[index], this.current_template);
    if (Boolean(this.product_out_of_stock_list[index]) === true) {
      return this.product_out_of_stock_list[index].product_id === this.current_product.product_id ? "current-active-template" : null;
    }
  },
  show_product: function show_product(index) {
    this.current_product = this.product_out_of_stock_list[index];
  },
  add_to_out_of_stock_list: function add_to_out_of_stock_list(items) {
    this.product_out_of_stock_list = items;
    this.checked_list = [];
    $("input:checkbox").prop("checked", false);
  },
  submit_out_of_stock_products: function submit_out_of_stock_products() {
    var _this10 = this;

    if (this.checked_list.length == 0) {
      swal({
        text: "Please select some products",
        toast: true,
        position: "top-end",
        type: "warning",
        showConfirmButton: false,
        timer: 2500
      });
      return;
    } else if (this.customer_email == "" || !this.reg_email.test(this.customer_email)) {
      swal({
        text: "Please enter a valid email address",
        toast: true,
        position: "top-end",
        type: "warning",
        showConfirmButton: false,
        timer: 2500
      });
      return;
    }

    swal({
      text: "Please wait while we are submitting your details...",
      type: "info",
      toast: true,
      showConfirmButton: false
    });
    this.spinnerOn = true;
    axios.post(api_calls.outofstockemailnotification(), {
      company_id: this.companyid,
      company_name: this.companyname,
      license_key: this.$session.get("UserInformation").license_key,
      email: this.customer_email,
      product_list: this.checked_list,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email
    }, {
      headers: {
        Authorization: "Bearer ".concat(this.$session.get("at"))
      }
    }).then(function (_ref) {
      var data = _ref.data;

      if (data.message == "Query Executed Successfully") {
        swal({
          type: "success",
          text: "You'll be notified through email when the products get back in stock",
          timer: 2500
        }).then(function (result) {
          _this10.customer_email = "";
          _this10.checked_list = [];
          $("input:checkbox").prop("checked", false);
          $("#notifyemail").modal("hide");
        });
      }
    }).catch(function (e) {
      _this10.spinnerOn = false;

      if (e.response.status === 410 || e.response.status === 440 || e.response.status === 409) {
        _this10.$root.$emit("Session_Expired", e.response.data);
      }
    });
  },
  refresh_chatbot: function refresh_chatbot(type) {
    var _this11 = this;

    this.refreshed_or_closed = true;
    axios.post(api_calls.chatbot_response_cense(), {
      license_key: this.$session.get("UserInformation").license_key,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email,
      source: "Web",
      chat: "",
      data: "",
      role: this.$session.get("UserInformation").role,
      refreshed_or_closed: this.refreshed_or_closed
    }).then(function (resp) {
      _this11.refreshed_or_closed = false;
      var welcome_msg_companies = ["CustomerHappiness95185", "3x5ive99534", "Foreignxchange17491", "360_technology"];
      setTimeout(function () {// if (this.shopify_ui == null && this.retail_web_framework == "shopify") {
        //   this.initialize_shopify_ui();
        // }
      }, 100);

      if (type == "support") {
        _this11.chat.push({
          receiving: true,
          received: "Is there anything else I can help you with?",
          conversation_only: true,
          time: _this11.generate_time()
        });
      }

      if (welcome_msg_companies.includes(_this11.companyid)) {
        axios.post(api_calls.chatbot_response_cense(), {
          chat: "/welcome_message",
          token: _this11.bot_response_token_value,
          username: _this11.$session.get("UserInformation").email,
          source: "Web",
          license_key: _this11.$session.get("UserInformation").license_key,
          data: "",
          role: _this11.$session.get("UserInformation").role,
          refreshed_or_closed: false
        }).then(function (response) {
          _this11.push_msg(response, response.data.responses); // this.response_handling(response);

        });
      } else {
        _this11.welcome_message_not_yet_received = false;
      }
    });
  },
  download_file: function download_file(url, file_name) {
    event.preventDefault();
    var link = document.createElement("a");
    link.href = url;
    link.setAttribute("download", file_name);
    document.body.appendChild(link);
    link.click();
  },
  scroll_div: function scroll_div() {
    var doc = document.querySelector(".buy-products");

    if (event.deltaX > event.deltaY) {
      doc.scrollLeft += 10;
    } else if (event.deltaX < event.deltaY) {
      doc.scrollLeft -= 10;
    }
  },
  scroll_div1: function scroll_div1(item) {
    var doc = document.querySelector("#buy_product_id_".concat(item));

    if (event.deltaX > event.deltaY) {
      doc.scrollLeft += 10;
    } else if (event.deltaX < event.deltaY) {
      doc.scrollLeft -= 10;
    }
  },
  scroll_div_right: function scroll_div_right(item) {
    var doc = document.querySelector("#buy_product_id_".concat(item));
    doc.scrollLeft += 100;
  },
  scroll_div_left: function scroll_div_left(item) {
    var doc = document.querySelector("#buy_product_id_".concat(item));
    doc.scrollLeft -= 100;
  },
  call_support: function call_support(type) {
    var _this12 = this;

    if (type == "Yes") {
      var _axios$post2;

      axios.post(api_calls.chatbot_response_cense(), (_axios$post2 = {
        license_key: this.$session.get("UserInformation").license_key,
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web",
        chat: "/call_support"
      }, _defineProperty(_axios$post2, "token", this.bot_response_token_value), _defineProperty(_axios$post2, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post2, "refreshed_or_closed", this.refreshed_or_closed), _axios$post2)).then(function (resp) {
        _this12.chat.push({
          conversation_only: true,
          receiving: true,
          received: resp.data.responses[0].text,
          time: _this12.generate_time()
        }); // this.$session.set("BotResponse_Conversation", this.chat);


        _this12.update_scrollbar("upto_end", "response");
      });
    } else if (type == "No") {
      this.chat.push(this.chat[0]);
      this.chat.push(this.chat[1]);
      this.update_scrollbar("upto_end", "response"); // this.refresh_chatbot("support");
    }
  },
  parse: function parse(string) {
    var _this13 = this;

    return string.replace(/{{.*?}}/g, function (match) {
      var today = new Date();
      var dd = today.getDate();
      var mm = today.getMonth() + 1;
      var yyyy = today.getFullYear();

      if (dd < 10) {
        dd = "0" + dd;
      }

      if (mm < 10) {
        mm = "0" + mm;
      }

      today = dd + "-" + mm + "-" + yyyy;
      var expression = match.slice(2, -2);
      _this13.$data[expression] = today;
      return _this13.$data[expression];
    });
  },
  show_popup: function show_popup() {
    this.show = false;
    this.stop = false;
  },
  sub_leaf_node_call: function sub_leaf_node_call(divclick) {
    var _this14 = this;

    // var divclick = event.target.innerText
    if (divclick == "Watch Demo Video") {
      this.demourlbind = true;
      this.reviewsurlbind = false;
    } else if (divclick == "User Reviews/Testimonials") {
      this.reviewsurlbind = true;
      this.demourlbind = false;
    }

    if (divclick == "Watch Demo Video" || divclick == "User Reviews/Testimonials") {
      this.show = !this.show;
      this.update_scrollbar();
      setTimeout(function () {
        _this14.is_typing_indicator_on = false;
      }, 1000);
    } else if (divclick == "Buy Tutorial") {
      this.cense_enquiry = true;
      axios.post(api_calls.chatbot_response_cense(), {
        username: this.$session.get("UserInformation").email,
        token: this.bot_response_token_value,
        chat: "/personal_details",
        source: "Web",
        license_key: this.$session.get("UserInformation").license_key,
        role: this.$session.get("UserInformation").role,
        refreshed_or_closed: ""
      }).then(function (response) {
        var msg = {
          received: response.data.responses[0].text,
          conversation_only: true,
          receiving: true,
          time: _this14.generate_time()
        };

        _this14.chat.push(msg);

        _this14.update_scrollbar();

        setTimeout(function () {
          _this14.is_typing_indicator_on = false;
        }, 1000); // this.$session.set("BotResponse_Conversation", this.chat);
      });
    }
  },
  ticket_number: function ticket_number() {
    var random_num = Math.floor(1000000 + Math.random() * 9000000);
    var company = this.companyname.slice(0, 1).toUpperCase();
    return "".concat(company, "_").concat(random_num);
  },
  send_message: function send_message(type, message, to_be_displayed) {
    var _this15 = this;

    // harsh
    event.preventDefault();

    if (this.selected_indication[0] != undefined) {
      if (type == "is_button") {
        this.to_send = message.value + JSON.stringify(this.res);
      } else {
        type = "is_prompt";
        to_be_displayed = this.to_send;
        this.to_send = this.selected_indication[0].value.split("{")[0] + JSON.stringify(this.res);
      }
    }

    if (type == "is_button") {
      $("#response_bot_text").prop("disabled", false);

      if (message.value == "isdisabled" && this.companyid == "clinicaltrials81352" && message.title == "No") {} else if (message.value === "/live_chat") {
        this.start_live_chat();
      } else {
        var vm = this;

        function _send_msg(toSend, customDisplayMsg) {
          vm.is_typing_indicator_on = true;
          vm.chat.push({
            sent: customDisplayMsg ? "".concat(message.title, " ").concat(customDisplayMsg) : message.title,
            sending: true,
            time: vm.generate_time(),
            conversation_only: true,
            delivered: true,
            dropdown: ""
          });
          vm.update_scrollbar("upto_end", "sender");

          if (vm.chat[to_be_displayed] && vm.chat[to_be_displayed].removable == true) {
            document.querySelector("#chat" + to_be_displayed).classList.add("--delete");
            setTimeout(function () {
              vm.chat.splice(index, 1);
            }, 850);
            document.getElementById("response_bot_text").disabled = false;
          }

          if (vm.chat[to_be_displayed - 1] && vm.chat[to_be_displayed - 1].is_multiselect && (message.title == "Approve" || message.title == "Reject" || message.title == "Comment and Return")) {
            vm.chat[to_be_displayed - 1].disabled = true;
          }

          axios.post(api_calls.chatbot_response_cense(), {
            chat: toSend,
            token: vm.bot_response_token_value,
            username: vm.$session.get("UserInformation").email,
            source: "Web",
            license_key: vm.$session.get("UserInformation").license_key,
            role: vm.$session.get("UserInformation").role,
            refreshed_or_closed: vm.refreshed_or_closed
          }).then(function (response) {
            vm.response_handling(response);
          });
          vm.selected_indication = [];
          vm.to_send = "";
        }

        if (this.companyid == "360_technology") {
          if (this.chat[to_be_displayed - 1] && this.chat[to_be_displayed - 1].value_mapping) {
            var valueMappingData = JSON.parse(JSON.stringify(this.chat[to_be_displayed - 1].value_mapping));
            this.adddropdownvalue(valueMappingData).then(function () {
              _this15.to_send = message.value + JSON.stringify(_this15.res);

              if (_this15.chat[to_be_displayed - 1].value_mapping) {
                if (valueMappingData.length === 0) {
                  _send_msg(message.value);
                } else {
                  _send_msg(_this15.to_send, "for ".concat(_this15.selected_indication.map(function (obj) {
                    return obj.title;
                  }).toString()));
                }
              }
            });
          } else if (message.value.split("{").length > 1) {
            var customDisplayMsg = Object.values(JSON.parse("{".concat(message.value.split("{")[1])))[0];

            _send_msg(message.value, "for ".concat(customDisplayMsg));
          } else if (this.chat[to_be_displayed - 1] && this.chat[to_be_displayed - 1].show_text_area) {
            _send_msg(message.value);

            this.chat[to_be_displayed - 1].disabled = true;
          } else {
            _send_msg(message.value);
          }
        } else {
          _send_msg(message.value);
        }
      }
    } else if (type == "is_prompt") {
      this.is_typing_indicator_on = true;
      this.chat.push({
        sent: to_be_displayed,
        sending: true,
        time: this.generate_time(),
        conversation_only: true,
        delivered: true
      });
      this.update_scrollbar("upto_end", "sender");
      axios.post(api_calls.chatbot_response_cense(), {
        // host: this.user_data.host,
        role: this.$session.get("UserInformation").role,
        license_key: this.$session.get("UserInformation").license_key,
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web",
        chat: this.to_send
      }).then(function (response) {
        _this15.response_handling(response);

        _this15.ex1();
      });
    } else if (this.to_send == "Restart" || this.to_send == "restart") {
      axios.post(api_calls.prompt_url(), {
        uid: "cense",
        // this.fingerprint
        companyid: this.$session.get("UserInformation").company_id,
        license_key: this.$session.get("UserInformation").license_key,
        chat: ""
      }).then(function (response) {
        _this15.chat.push(response.data);

        _this15.update_scrollbar("upto_end", "response"); // this.$session.set("BotResponse_Conversation", this.chat);


        _this15.level = response.data.level;
      }).catch(function (e) {});
    } else if (this.cense_enquiry == true && Boolean(this.to_send)) {
      this.is_typing_indicator_on = true;
      var send_msg = {
        sent: this.to_send,
        conversation_only: true,
        sending: true,
        time: this.generate_time()
      };
      this.chat.push(send_msg); // this.$session.set("BotResponse_Conversation", this.chat);

      this.update_scrollbar("upto_end");
      axios.post(api_calls.chatbot_response_cense(), {
        username: this.$session.get("UserInformation").email,
        token: this.bot_response_token_value,
        chat: "/personal_details",
        source: "Web",
        Companyid: "CO00023",
        data: "",
        role: this.$session.get("UserInformation").role,
        refreshed_or_closed: "",
        license_key: this.$session.get("UserInformation").license_key
      }).then(function (response) {
        var msg = {
          received: response.data.responses[0].text,
          conversation_only: true,
          receiving: true,
          time: _this15.generate_time()
        };

        _this15.chat.push(msg); // this.$session.set("BotResponse_Conversation", this.chat);


        _this15.refreshed_or_closed = false;

        _this15.update_scrollbar("upto_end", "response");
      }).catch(function (e) {
        _this15.is_typing_indicator_on = false;
      });
    } else if (this.live_chat_on) {
      // LIVE CHAT ON CUSTOMER MESSAGES
      if (Boolean(this.user_name) === false) {
        this.channel.push("new_name", {
          name: this.to_send
        });
        this.user_name = this.to_send;
        this.update_scrollbar("upto_end", "response");
      } else {
        this.channel.push("new_name", {
          name: this.user_name
        });
        this.channel.push("new_chat_message", {
          message: this.to_send
        });
        this.update_scrollbar("upto_end", "response");
      }

      this.chat.push({
        sent: this.to_send,
        sending: true,
        conversation_only: true,
        time: this.generate_time()
      }); // this.$session.set("BotResponse_Conversation", this.chat);

      this.update_scrollbar("upto_end", "sender");
    } else if (Boolean(this.to_send) && this.cense_enquiry != true) {
      var _axios$post3;

      this.chat.push({
        conversation_only: true,
        sending: true,
        sent: this.to_send,
        time: this.generate_time()
      }); // this.$session.set("BotResponse_Conversation", this.chat);

      this.update_scrollbar("upto_end", "sender");
      axios.post(api_calls.chatbot_response_cense(), (_axios$post3 = {
        license_key: this.$session.get("UserInformation").license_key,
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web",
        chat: this.to_send
      }, _defineProperty(_axios$post3, "token", this.bot_response_token_value), _defineProperty(_axios$post3, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post3, "refreshed_or_closed", this.refreshed_or_closed), _axios$post3)).then(function (response) {
        _this15.response_handling(response);
      }).catch(function (e) {
        _this15.update_scrollbar("upto_end", "response");
      });
    }

    this.to_send = "";
  },
  initiate_support_chat: function initiate_support_chat() {
    this.chat.push({
      receiving: true,
      received: "Sorry I am not getting your question",
      conversation_only: true
    });
    this.chat.push({
      receiving: true,
      received: "Would you like to talk with support team?",
      conversation_only: true,
      show_buttons: true,
      support_buttons: true,
      time: this.generate_time()
    });
    this.update_scrollbar("upto_end", "response");
  },
  disconnect_support_chat: function disconnect_support_chat() {
    this.channel.push("stopped_chat", {
      name: this.user_name,
      message: " has ended the conversation."
    });
    this.channel.leave();
    this.live_chat_token = null;
    this.chat_group_name = null;
    this.user_name = "";
    this.chat_socket.disconnect();
    this.live_chat_on = false;
  },
  generate_payment: function generate_payment(price, name) {
    var vm = this;
    var options = {
      key: "rzp_test_SnDTaPnncfliDt",
      amount: price * 100,
      company_id: this.$session.get("UserInformation").company_id,
      company_name: this.$session.get("UserInformation").company_name,
      name: "Cense AI",
      currency: "INR",
      description: "Instill Intelligence",
      image: "/img/cense_image.png",
      // COMPANY LOGO
      handler: function handler(response) {
        var contact = $('#contact[type="tel"]').value;
        var email = $('#email[type="email"]').value;
        vm.paymentid = response.razorpay_payment_id;

        if (transfer_account != null) {
          vm.transfer_payment(transfer_account, price * 100, "INR", name);
        }
      },
      prefill: {
        name: "",
        // pass customer name
        email: "",
        // customer email
        contact: "" // customer phone no.

      },
      notes: {
        address: "address" // customer address

      },
      theme: {
        color: "#283777" // screen color

      }
    };
    var rzp1 = new Razorpay(options);
    rzp1.open();
    event.preventDefault();
  },
  chat_response_error: function chat_response_error() {
    this.chat.push({
      conversation_only: true,
      receiving: true,
      received: "Sorry I'm not getting your question",
      time: this.generate_time()
    }); // this.$session.set("BotResponse_Conversation", this.chat);

    this.update_scrollbar("upto_end", "response");
  },
  send_request_json: function send_request_json(message) {
    var _axios$post4,
        _this16 = this;

    axios.post(api_calls.chatbot_response_cense(), (_axios$post4 = {
      license_key: this.$session.get("UserInformation").license_key,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email
    }, _defineProperty(_axios$post4, "token", this.bot_response_token_value), _defineProperty(_axios$post4, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post4, "refreshed_or_closed", this.refreshed_or_closed), _defineProperty(_axios$post4, "chat", ""), _defineProperty(_axios$post4, "source", "Web"), _defineProperty(_axios$post4, "data", this.json_data[message.responses[0].intent]), _axios$post4)).then(function (resp) {
      _this16.chat.push({
        conversation_only: true,
        receiving: true,
        received: resp.data.responses.length == 0 ? "Sorry I'm not getting your question" : resp.data.responses[0].text,
        time: _this16.generate_time(),
        image: resp.data.responses[0].img == "" ? null : resp.data.responses[0].img
      }); // this.$session.set("BotResponse_Conversation", this.chat);


      _this16.update_scrollbar("upto_end", "response");
    });
  },
  response_handling: function response_handling(response, type) {
    var i = 0;
    var delay = 50; // response.data.responses[i].text != undefined ? 500
    // response.data.responses[i].text.length > 10
    //   ? 500
    //   : 500;

    var vm = this;
    vm.is_typing_indicator_on = true;
    setTimeout(function () {
      handle_response();
    }, delay);

    function handle_response() {
      var _this17 = this;

      setTimeout(function () {
        vm.is_typing_indicator_on = false;

        if (response.data == null || response.data.responses.length == 0) {
          vm.chat_response_error();
        } else if (Boolean(response.data.responses[i].request_json) == true) {
          if (response.data.responses[i].text != null) {
            vm.chat.push({
              conversation_only: true,
              receiving: true,
              received: response.data.responses[i].text,
              time: vm.generate_time(),
              image: response.data.responses[i].img,
              video: response.data.responses[i].video
            }); // vm.$session.set("BotResponse_Conversation", vm.chat);

            vm.update_scrollbar("upto_end", "response");
          }

          if (response.data.responses[i].intent == "gogyb450_create_ticket") {
            var _axios$post5;

            var name = "".concat(vm.$session.get("UserInformation").first_name, " ").concat(vm.$session.get("UserInformation").last_name);
            var payload = {
              username: name,
              companyname: vm.companyname,
              companyid: vm.companyid,
              user_role: vm.$session.get("UserInformation").role,
              email: vm.$session.get("UserInformation").email,
              license_key: vm.$session.get("UserInformation").license_key,
              token: vm.$session.get("UserInformation").tokens,
              ticket_issue: "",
              ticket_number: vm.ticket_number(),
              description: "",
              file_content: null,
              file_name: null,
              isEdit: false
            };
            payload = JSON.stringify(payload);
            axios.post(api_calls.chatbot_response_cense(), (_axios$post5 = {
              license_key: vm.$session.get("UserInformation").license_key,
              token: vm.bot_response_token_value,
              username: vm.$session.get("UserInformation").email
            }, _defineProperty(_axios$post5, "token", vm.bot_response_token_value), _defineProperty(_axios$post5, "role", vm.$session.get("UserInformation").role), _defineProperty(_axios$post5, "refreshed_or_closed", vm.refreshed_or_closed), _defineProperty(_axios$post5, "chat", ""), _defineProperty(_axios$post5, "source", "Web"), _defineProperty(_axios$post5, "data", payload), _axios$post5)).then(function (resp) {
              vm.chat.push({
                conversation_only: true,
                receiving: true,
                received: resp.data.responses.length == 0 ? "Sorry I'm not getting your question" : resp.data.responses[i].text,
                time: vm.generate_time(),
                image: resp.data.responses[i].img,
                video: resp.data.responses[i].video || null
              }); // vm.$session.set("BotResponse_Conversation", vm.chat);

              vm.new_update_response(i);
            });
          } else if (response.data.responses[i].intent == "create_appointment") {
            var today_date = new Date();
            axios.post(api_calls.schedule_appointment_url(), {
              companyname: vm.companyname,
              companyid: vm.companyid,
              Date: today_date.getFullYear() + "-" + (today_date.getMonth() < 9 ? "0" + (today_date.getMonth() + 1) : today_date.getMonth() + 1) + "-" + today_date.getDate() // Month object document it
              // Date: start_time,

            }).then(function (response) {// console.log(response.data);
              // this.time_slots = this.full_time_slots;
              // if (response.data.Slot != undefined) {
              //   if (response.data.Slot.length > 0) {
              //     let index;
              //     for (var i in response.data.Slot) {
              //       index = this.time_slots.indexOf(response.data.Slot[i]);
              //       if (index != -1) {
              //         this.time_slots.splice(index, 1);
              //       }
              //     }
              //   } else {
              //   }
              // }
            }).catch(function (e) {
              console.log(e);
            });
          } else {
            vm.send_request_json(response.data);
          }
        } else if (response.data.responses[i].intent == "re_order_products_action") {
          // vm.send_shopify_customer_id();
          var _msg = {
            conversation_only: true,
            time: i == response.data.responses.length - 1 ? vm.generate_time() : null,
            ask_feedback: Boolean(response.data.responses[i].ask_feedback)
          };
          _msg.receiving = true;
          _msg.fetch_shopify_details = true;
          _msg.is_refund = false;
          _msg.return_shopify_email = true;
          _msg.received = "Please login with your credentials for better experience :)";
          _msg.metadata = {
            entity: response.data.responses[i].entity,
            text: response.data.responses[i].text
          };
          vm.chat.push(_msg); // vm.send_shopify_customer_id(null,false,response.data.responses[i]);
        } else if (response.data.responses[i].intent == "support_subscription_data") {
          // vm.send_shopify_customer_id();
          vm.support_subscription_data();
        } else if (response.data.responses[i].intent == "product_by_date") {
          var _axios$post6;

          vm.is_typing_indicator_on = true;
          var cutoff = new Date();
          var current_date_time = moment(cutoff).format("YYYY-MM-DD HH:mm:ss");
          var form_payload = JSON.stringify({
            usr_msg: response.data.responses[i].usr_msg,
            current_user_date: current_date_time
          });
          axios.post(api_calls.chatbot_response_cense(), (_axios$post6 = {
            license_key: vm.$session.get("UserInformation").license_key,
            token: vm.bot_response_token_value,
            username: vm.$session.get("UserInformation").email
          }, _defineProperty(_axios$post6, "token", vm.bot_response_token_value), _defineProperty(_axios$post6, "role", vm.$session.get("UserInformation").role), _defineProperty(_axios$post6, "refreshed_or_closed", vm.refreshed_or_closed), _defineProperty(_axios$post6, "chat", "/product_by_date".concat(form_payload)), _defineProperty(_axios$post6, "source", "Web"), _axios$post6)).then(function (response) {
            vm.response_handling(response);
          });
        } else if (Boolean(response.data.responses[i].return_intent) == true) {
          var _axios$post7;

          _this17.is_typing_indicator_on = true;
          axios.post(api_calls.chatbot_response_cense(), (_axios$post7 = {
            license_key: vm.$session.get("UserInformation").license_key,
            token: vm.bot_response_token_value,
            username: vm.$session.get("UserInformation").email
          }, _defineProperty(_axios$post7, "token", vm.bot_response_token_value), _defineProperty(_axios$post7, "role", vm.$session.get("UserInformation").role), _defineProperty(_axios$post7, "refreshed_or_closed", vm.refreshed_or_closed), _defineProperty(_axios$post7, "chat", "/" + response.data.responses[i].intent), _defineProperty(_axios$post7, "source", "Web"), _axios$post7)).then(function (response) {
            vm.handle_response(response);
          });
        } else if (vm.companyid == "3x5ive99534" && response.data.responses[i].intent != undefined && response.data.responses[i].intent == "confusion") {
          vm.confusion_message("/need_help");
        } else if (response.data.responses[i].buttons != undefined && response.data.responses[i].buttons.length > 0) {
          vm.load_buttons(response.data.responses[i], i, type);
        } else if (Boolean(response.data.responses[i].custom) && response.data.responses[i].custom.type) {
          // CHange  the condition here
          if (response.data.responses[i].custom.type != undefined && response.data.responses[i].custom.type == "multiselect_dropdown") {
            vm.multiselect_load(response.data.responses[i], i);
          } else if (response.data.responses[i].custom.type != undefined && response.data.responses[i].custom.type == "table") {
            vm.load_table(response.data.responses[i], i);
          } else if (response.data.responses[i].custom.type != undefined && response.data.responses[i].custom.type == "retail") {
            vm.display_products_chat(response.data.responses[i], i, type);
          } else if (response.data.responses[i].custom.show_text_area) {
            vm.load_text_area(response.data.responses[i], i);
          } else if (response.data.responses[i].custom.buttons != undefined) {
            vm.load_buttons(response.data.responses[i].custom, i, type);
          }
        } else if (Boolean(response.data.responses[i].messaging_platforms) && response.data.responses[i].messaging_platforms.length > 0) {
          var msg = {
            // conversation_only: true,
            time: i == response.data.responses.length - 1 ? vm.generate_time() : null,
            ask_feedback: Boolean(response.data.responses[i].ask_feedback),
            show_messaging_platforms: true,
            // receiving: true,
            // received:"Please feel free to reachout to us at : " + response.data.responses[i].contact_us_email  + vm.contact_us_phone_number(response.data.responses[i].contact_us_phone_number) +" or drop us a message",
            messaging_platforms_data: response.data.responses[i].messaging_platforms
          };
          vm.chat.push(msg);
        } else if (Boolean(response.data.responses[i].is_preview_banner)) {
          vm.display_banner(response.data.responses, i);
        } else if (Boolean(response.data.responses[i].is_display_banner)) {
          vm.display_banner(response.data.responses, i);
        } else {
          var msg = {
            conversation_only: true,
            time: i == response.data.responses.length - 1 ? vm.generate_time() : null,
            ask_feedback: Boolean(response.data.responses[i].ask_feedback)
          };

          if (response.data.responses.length == 0) {
            msg.received = "Sorry we are not getting your question.";
            msg.receiving = true;
          } else if (response.data.responses[i].template === "utter_default") {
            msg.receiving = true;
            msg.received = response.data.responses[i].message.split('{email}').join(vm.contact_help_email);
            vm.chat.push(msg);
          } else if (response.data.responses[i].text != undefined && vm.url_match_regex.test(response.data.responses[i].text)) {
            vm.display_file_chat(response.data.responses[i].text);
          } else if (response.data.responses[i].get_company_details === "True" && response.data.responses[i].intent === "cense_support_ticket") {
            var _axios$post8;

            var c_id = vm.return_document_cookies('company_id');
            var c_name = vm.return_document_cookies('company_name');
            var c_email = vm.return_document_cookies('company_email');
            axios.post(api_calls.chatbot_response_cense(), (_axios$post8 = {
              license_key: vm.$session.get("UserInformation").license_key,
              token: vm.bot_response_token_value,
              username: vm.$session.get("UserInformation").email
            }, _defineProperty(_axios$post8, "token", vm.bot_response_token_value), _defineProperty(_axios$post8, "role", vm.$session.get("UserInformation").role), _defineProperty(_axios$post8, "refreshed_or_closed", vm.refreshed_or_closed), _defineProperty(_axios$post8, "chat", JSON.stringify({
              company_id: c_id,
              company_name: c_name,
              email: c_email
            })), _defineProperty(_axios$post8, "source", "Web"), _axios$post8)).then(function (response) {
              vm.response_handling(response);
            });
          } else if (response.data.responses[i].text != undefined && !response.data.responses[i].text.includes("Download your manifest here")) {
            msg.received = response.data.responses[i].text;
            msg.receiving = true;
            msg.image = response.data.responses[i].img;
            msg.image = response.data.responses[i].image;
            msg.videos = response.data.responses[i].video || false;
            msg.order_status = response.data.responses[i].order_status;
            msg.is_order_status = response.data.responses[i].is_order_status || false;
            msg.offers = response.data.responses[i].offers || false;
            msg.fetch_shopify_details = response.data.responses[i].fetch_shopify_details || false;
            msg.order_items = response.data.responses[i].order_items;
            msg.shopify_fetch_customer_id_for_offers = response.data.responses[i].shopify_fetch_customer_id_for_offers || false; // if (msg.shopify_fetch_customer_id_for_offers === true) {
            //   vm.shopify_check_customer_logged_in();
            //   return true;
            // }

            if (msg.offers.length < 1) {
              msg.offers = false;
              msg.received = "Sorry we do not have any offers currently, please check back later.";
            }

            vm.chat.push(msg);
            vm.new_update_response(i);
          } else if (response.data.responses[i].intent == "chat_support") {
            vm.start_live_chat();
          } else if (response.data.responses[i].text != undefined && (response.data.responses[i].text.includes("Download your manifest here") || response.data.responses[i].text.includes(/.pdf/))) {
            vm.display_file_chat(response.data.responses[i]);
          } else if (Boolean(response.data.responses[i].products) && (response.data.responses[i].products.length > 0 || Object.keys(response.data.responses[i].products).length)) {
            vm.display_products_chat(response.data.responses[i], i, type);
          } else if (response.data.responses[i].is_refund == "True") {
            vm.load_refunds(response.data.responses[i]);
          } else if (response.data.responses[i].shopify_fetch_customer_id === true) {
            vm.shopify_check_customer_logged_in();
          } else if (response.data.responses[i].image != undefined) {
            msg.image = response.data.responses[i].image;
            msg.receiving = true;
            vm.chat.push(msg);
            vm.new_update_response(i);
          } else if (response.data.responses[i].video != undefined) {
            msg.videos = response.data.responses[i].video || false;
            ;
            msg.receiving = true;
            vm.chat.push(msg);
            vm.new_update_response(i);
          }
        }

        if (i < response.data.responses.length - 1) {
          i += 1;
          vm.is_typing_indicator_on = true; // delay =
          //   response.data.responses[i].text != undefined &&
          //   response.data.responses[i].text.length > 10
          //     ? 2000
          //     : 500;

          delay = 500;
          handle_response();
        }
      }, delay);
    }
  },
  display_banner: function display_banner(response, i) {
    var vm = this;
    var position_1 = response[i].banner_content_position[0]['id'];
    var position_2 = response[i].banner_content_position[1]['id'];
    var position_3 = response[i].banner_content_position[2]['id'];
    var is_data_position_1 = response[i][position_1];
    var is_data_position_2 = response[i][position_2];
    var is_data_position_3 = response[i][position_3];

    if (Boolean(is_data_position_1)) {
      var msg = {
        conversation_only: true,
        time: i == response.length - 1 && !(Boolean(is_data_position_2) || Boolean(is_data_position_3)) ? vm.generate_time() : null,
        ask_feedback: Boolean(response[i].ask_feedback),
        banner_img_link: response[i].banner_img_link
      };
      msg.show_bot_img = true;
      msg['show_' + position_1] = true;
      msg[position_1] = is_data_position_1;
      vm.chat.push(msg);
      vm.new_update_response(i);

      if (Boolean(is_data_position_2)) {
        var msg = {
          conversation_only: true,
          time: i == response.length - 1 && !Boolean(is_data_position_3) ? vm.generate_time() : null,
          ask_feedback: Boolean(response[i].ask_feedback),
          banner_img_link: response[i].banner_img_link
        };
        msg.show_bot_img = false;
        msg['show_' + position_2] = true;
        msg[position_2] = is_data_position_2;
        vm.chat.push(msg);
        vm.new_update_response(i);
      }

      if (Boolean(is_data_position_3)) {
        var msg = {
          conversation_only: true,
          time: i == response.length - 1 ? vm.generate_time() : null,
          ask_feedback: Boolean(response[i].ask_feedback),
          banner_img_link: response[i].banner_img_link
        };
        msg.show_bot_img = false;
        msg['show_' + position_3] = true;
        msg[position_3] = is_data_position_3;
        vm.chat.push(msg);
        vm.new_update_response(i);
      }
    } else if (Boolean(is_data_position_2)) {
      var msg = {
        conversation_only: true,
        time: i == response.length - 1 && !Boolean(is_data_position_3) ? vm.generate_time() : null,
        ask_feedback: Boolean(response[i].ask_feedback),
        banner_img_link: response[i].banner_img_link
      };
      msg.show_bot_img = true;
      msg['show_' + position_2] = true;
      msg[position_2] = is_data_position_2;
      vm.chat.push(msg);
      vm.new_update_response(i);

      if (Boolean(is_data_position_3)) {
        var msg = {
          conversation_only: true,
          time: i == response.length - 1 ? vm.generate_time() : null,
          ask_feedback: Boolean(response[i].ask_feedback),
          banner_img_link: response[i].banner_img_link
        };
        msg.show_bot_img = false;
        msg['show_' + position_3] = true;
        msg[position_3] = is_data_position_3;
        vm.chat.push(msg);
        vm.new_update_response(i);
      }
    } else if (Boolean(is_data_position_3)) {
      var msg = {
        conversation_only: true,
        time: i == response.length - 1 ? vm.generate_time() : null,
        ask_feedback: Boolean(response[i].ask_feedback),
        banner_img_link: response[i].banner_img_link
      };
      msg.show_bot_img = true;
      msg['show_' + position_3] = true;
      msg[position_3] = is_data_position_3;
      vm.chat.push(msg);
      vm.new_update_response(i);
    }
  },
  push_msg: function push_msg(responses, response) {
    var _this18 = this;

    var index = 0;
    var vm = this;
    var delay = 50; // push_chat(response[index], delay);
    // function push_chat(msg, time_delay) {

    var _loop = function _loop(i) {
      setTimeout(function () {
        // while (i < response.length) {
        // setTimeout(() => {
        var msg = response[i];
        vm.is_typing_indicator_on = true; // setTimeout(() => {

        vm.is_typing_indicator_on = false;

        if (responses.data.responses[i].buttons != undefined && Boolean(responses.data.responses[i].buttons.length > 0)) {
          vm.load_buttons(responses.data.responses[i], "is_button", 3000, true);
        } else {
          vm.chat.push({
            conversation_only: true,
            receiving: true,
            received: msg.text,
            offers: msg.offers || false,
            time: i == response.length - 1 ? vm.generate_time() : undefined
          });
        }

        if (_this18.greeting_buttons_position == i) {
          if (vm.is_retail_bot) vm.load_chatbot_integration_details();
        }
      }, i * 1050);
      $(".time").last().css("display", "none");
      setTimeout(function () {
        $(".time").last().css("display", "block");

        if (i < response.length - 1) {// i += 1;
          // delay = 500;
          // push_chat(response[index], delay);
        } else {
          vm.welcome_message_not_yet_received = false;
        }
      }, 500); // setTimeout(() => {
      // }, 1000);
      // setTimeout(() => {
      // i +=1;
      // }
      // }, 400);
      // }, time_delay);
      // }, i* 500);
    };

    for (var i = 0; i < response.length; i++) {
      _loop(i);
    }

    setTimeout(function () {
      vm.demo_retail_question();
    }, delay); // }
  },
  confusion_message: function confusion_message(msg_string) {
    var _this19 = this;

    axios.post(api_calls.chatbot_response_cense(), {
      chat: msg_string,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email,
      source: "Web",
      license_key: this.$session.get("UserInformation").license_key,
      data: "",
      role: this.$session.get("UserInformation").role,
      refreshed_or_closed: false
    }).then(function (response) {
      _this19.response_handling(response);
    });
  },
  display_products_chat: function display_products_chat(message, index, type) {
    var _this20 = this;

    var msg = {
      conversation_only: true,
      time: this.generate_time()
    };

    if (message.products.is_products_list) {
      msg.is_products_list = message.products.is_products_list;
      msg.products_list = message.products.products_list;

      if (message.products.products_list.length === 0) {
        msg.received = "Sorry, we could not find what you searched for";
        msg.receiving = true;
      } // setTimeout(() => {


      if (Boolean(message.products.text) === true) {
        msg.received = message.products.text;
        msg.receiving = true;
      }

      this.product_out_of_stock_list = [];

      if (this.retail_web_framework == 'shopify') {
        msg.products_list.forEach(function (product) {
          for (var _i4 = 0; _i4 < product.variations.length; _i4++) {
            _this20.product_list.push({
              product_id: product.variations[_i4].id,
              product_title: product.title,
              variant_title: product.variations[_i4].variant_title,
              variant_id: product.variations[_i4].id,
              stock_status: product.variations[_i4].stock_status || "instock",
              back_in_stock: false,
              productImage: product.variations[_i4].img_url == null ? product.img_url : product.variations[_i4].img_url,
              onlineStoreURL: product.variations[_i4].permalink
            });
          }
        });
      } else if (this.retail_web_framework == 'woocommerce') {
        msg.products_list.forEach(function (product) {
          if (product.variations && product.variations.length > 0) {
            for (var _i5 = 0; _i5 < product.variations.length; _i5++) {
              _this20.product_list.push({
                product_id: product.id,
                product_title: product.title,
                variant_title: product.variations[_i5].variant_title,
                variant_id: product.variations[_i5].id,
                stock_status: product.variations[_i5].stock_status || "instock",
                back_in_stock: false,
                productImage: product.variations[_i5].img_url == null ? product.img_url : product.variations[_i5].img_url,
                onlineStoreURL: product.permalink
              });
            }
          } else {
            _this20.product_list.push({
              product_id: product.id,
              product_title: product.title,
              variant_title: null,
              variant_id: null,
              stock_status: product.stock_status || "instock",
              back_in_stock: false,
              productImage: product.img_url,
              onlineStoreURL: product.permalink
            });
          }
        });
      } else if (this.retail_web_framework == 'magento') {
        msg.products_list.forEach(function (product) {
          if (product.variations && product.variations.length > 0) {
            for (var _i6 = 0; _i6 < product.variations.length; _i6++) {
              _this20.product_list.push({
                product_id: product.id,
                product_title: product.title,
                variant_title: product.variations[_i6].variant_title,
                variant_id: product.variations[_i6].id,
                stock_status: product.stock_status || "instock",
                back_in_stock: false,
                productImage: product.variations[_i6].img_url == null ? product.img_url : product.variations[_i6].img_url,
                onlineStoreURL: product.variations[_i6].permalink
              });
            }
          } else {
            _this20.product_list.push({
              product_id: product.id,
              product_title: product.title,
              variant_title: null,
              variant_id: null,
              stock_status: product.stock_status || "instock",
              back_in_stock: false,
              productImage: product.img_url,
              onlineStoreURL: product.permalink
            });
          }
        });
      }

      for (var i in msg.products_list) {
        msg.products_list[i].order_qty = 1;
        msg.products_list[i].buy_qty = 1;

        if (msg.products_list[i].variations && msg.products_list[i].variations.length > 0) {
          msg.products_list[i].id = msg.products_list[i].variations[0].id;
          msg.products_list[i].img_url = msg.products_list[i].variations[0].img_url === null ? msg.products_list[i].img_url : msg.products_list[i].variations[0].img_url;
          msg.products_list[i].permalink = msg.products_list[i].variations[0].permalink;
          msg.products_list[i].variant_title = msg.products_list[i].variations[0].variant_title;
          msg.products_list[i].stock_quantity = msg.products_list[i].variations[0].stock_quantity;
          msg.products_list[i].stock_status = msg.products_list[i].variations[0].stock_status;
          msg.products_list[i].price = msg.products_list[i].variations[0].price;
          msg.products_list[i].regular_price = msg.products_list[i].variations[0].regular_price;
        }
      }

      msg.new_products = true;
      this.show_custom_cart = true;
      var newlist = this.product_list.filter(function (product) {
        return product["stock_status"] === "outofstock";
      });
      msg.product_out_of_stock_list = newlist;

      if (msg.product_out_of_stock_list.length > 0 && !this.display_products) {
        msg.product_out_of_stock = true;
      }

      this.display_products = false; // }, 2000);

      if (type === "display_success_toastr") {
        setTimeout(function () {
          swal({
            text: "Testing Completed Successfully! Please Proceed to the next step.",
            toast: true,
            showCancelButton: false,
            showConfirmButton: false,
            type: "success",
            timer: 5000,
            timerProgressBar: true
          });
        }, 1200);
      } // }, 30);

    } else if (message.products.length) {
      msg.isproduct = true;
      msg.elements = message;
    }

    this.chat.push(msg); // this.$session.set("BotResponse_Conversation", this.chat);

    this.new_update_response(index);
    this.product_list = [];
  },
  display_file_chat: function display_file_chat(message) {
    var msg = {
      conversation_only: true,
      time: this.generate_time()
    };
    var temp = message.split("Download your manifest here ");
    var url = message.match(this.url_match_regex)[0];
    msg.url = message.includes("Download your manifest here ") ? temp[1] : url;
    msg.receiving = false;
    msg.file_name = url.split(/^.*[\\\/]/)[1].split("/").pop().split("?")[0];
    this.chat.push(msg); // this.$session.set("BotResponse_Conversation", this.chat);

    this.update_scrollbar("upto_end", "response");
  },
  generate_order_details: function generate_order_details(order) {},
  adddropdownvalue: function adddropdownvalue(value) {
    var _this21 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var i, parsedJson;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this21.selected_indication = value;

              if (value.length > 0) {
                _this21.to_send = "";
                _this21.res = {};

                for (i = 0; i < _this21.selected_indication.length; i++) {
                  parsedJson = JSON.parse("{".concat(_this21.selected_indication[i].value.split("{")[1]));

                  if (i == 0) {
                    _this21.to_send = _this21.selected_indication[i].title;
                  } else {
                    _this21.to_send = _this21.to_send + ", " + _this21.selected_indication[i].title;
                  }

                  if (_this21.res[Object.keys(parsedJson)[0].toString()] == undefined) {
                    _this21.res[Object.keys(parsedJson)[0].toString()] = Object.values(parsedJson)[0].toString();
                  } else {
                    _this21.res[Object.keys(parsedJson)[0].toString()] = _this21.res[Object.keys(parsedJson)[0].toString()] + "," + Object.values(parsedJson)[0].toString();
                  }
                }

                _this21.button_fill();
              } else {
                _this21.to_send = "";
                _this21.res = {};
              }

              _this21.button_fill();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  button_fill: function button_fill() {
    if (this.to_send == "") {
      document.querySelector("#send_button").classList.remove("filled");
    } else if (this.to_send != "") {
      if (this.live_chat_on) {
        this.channel.push("started_typing");
        this.stop_typing(this);
      }

      document.querySelector("#send_button").classList.add("filled");
    }
  },
  stop_typing: debounce(function (vm) {
    vm.channel.push("stopped_typing");
  }, 1000),
  scroll_down: function scroll_down() {
    if (document.querySelector(".chat-body").scrollHeight - document.querySelector(".chat-body").scrollTop <= document.querySelector(".chat-body").clientHeight) {
      this.to_scroll = false;
    } else {
      this.to_scroll = true;
    }
  },
  load_buttons: function load_buttons(message, index, type, greeting_button) {
    var _this22 = this;

    if (type === "display_success_toastr") {
      swal({
        text: "Some error occurred while testing.",
        toast: true,
        showCancelButton: false,
        showConfirmButton: false,
        type: "error",
        timer: 5000
      });
      var msg = {
        conversation_only: true,
        time: this.generate_time(),
        ask_feedback: false,
        received: "Some error occurred while testing. Please try by refreshing the browser! If the issue persists, please contact system admin.",
        receiving: true
      };
      this.chat.push(msg);
      return;
    }

    var msg = {
      conversation_only: true,
      buttons_list: [],
      button_prefix: message.prefix,
      receiving: true,
      received: message.text,
      time: null
    };

    if (Boolean(greeting_button)) {
      msg.greeting_button = false;
    } else {
      msg.custom_buttons = false;
    }

    if (message.buttons.length == 3) {
      if (message.buttons[0].title == "Exchange Rate" && message.buttons[1].title == "Track My Parcel" && message.buttons[2].title == "Call Helpdesk") {
        msg.removable = false;
      }
    }

    if (message.text == "Would you like to share your name and number?" && this.isexchange) {
      $("#response_bot_text").prop("disabled", true);
    }

    for (var i in message.buttons) {
      if (msg.button_prefix != null) {
        msg.buttons_list.push({
          title: message.buttons[i].title,
          value: msg.button_prefix + message.buttons[i].value
        });
      } else {
        msg.buttons_list.push({
          title: message.buttons[i].title,
          value: message.buttons[i].value
        });
      }

      if (msg.buttons_list[i].title == "No" && message.text != "Can I help you with anything else?" && this.companyid == "clinicaltrials81352") {
        msg.buttons_list[i].value = "isdisabled";
      }
    } // setTimeout(() => {


    var chatIndex = this.chat.push(msg);

    if (index == "is_button" || index == 0) {
      setTimeout(function () {
        if ($(".chat-body").children().last().height() / $(".chat-body").height() < 0.5) {
          _this22.animate_chat_body_scroll(1, 1500);
        } else {
          _this22.animate_chat_body_scroll(50, 1500, true);
        }
      }, 1000);
    } else {
      this.scroll_down();
    }

    if (Boolean(greeting_button)) {
      this.chat[chatIndex - 1].greeting_button = true;
    } else {
      this.chat[chatIndex - 1].custom_buttons = true;
    } // this.$session.set("BotResponse_Conversation", this.chat);


    setTimeout(function () {
      _this22.chat[chatIndex - 1].time = _this22.generate_time();
    }, 500); // }, 500);
  },
  multiselect_load: function multiselect_load(message, index) {
    var msg = {
      conversation_only: true,
      multiselect_values: message.custom.values,
      placeholder: message.custom.placeholder,
      is_multiselect: true,
      value_mapping: [],
      receiving: true,
      received: message.text,
      disabled: false,
      time: this.generate_time()
    };
    this.chat.push(msg);
  },
  load_table: function load_table(message, index) {
    var _this23 = this;

    var msg = {
      conversation_only: true,
      col_list: Object.keys(message.custom.values[0]),
      table_value: message.custom.values,
      receiving: true,
      received: message.text,
      is_table: true,
      time: this.generate_time()
    };
    setTimeout(function () {
      _this23.chat.push(msg);

      if (index == 0) {
        setTimeout(function () {
          if ($(".chat-body").children().last().height() / $(".chat-body").height() < 0.5) {
            _this23.animate_chat_body_scroll(1, 1500);
          } else {
            _this23.animate_chat_body_scroll(0.7, 1500);
          }
        }, 1000);
      } else {
        _this23.animate_chat_body_scroll(100, 1500, true);

        _this23.scroll_down();
      }
    }, 2500);
  },
  load_text_area: function load_text_area(message, index) {
    var _this24 = this;

    var msg = {
      conversation_only: true,
      receiving: true,
      received: message.text,
      show_text_area: true,
      disabled: false,
      time: this.generate_time()
    };
    setTimeout(function () {
      _this24.chat.push(msg);

      if (index == 0) {
        setTimeout(function () {
          if ($(".chat-body").children().last().height() / $(".chat-body").height() < 0.5) {
            _this24.animate_chat_body_scroll(1, 1500);
          } else {
            _this24.animate_chat_body_scroll(0.7, 1500);
          }
        }, 1000);
      } else {
        _this24.animate_chat_body_scroll(100, 1500, true);

        _this24.scroll_down();
      }
    }, 2500);
  },
  start_live_chat: function start_live_chat() {
    // var msg = {};
    // msg.receiving = true;
    // msg.received =
    //   "I am connecting you to one of our support agents. Please wait for a while.";
    // msg.conversation_only = true;
    // msg.time = this.generate_time();
    // this.update_scrollbar("upto_end", "response");
    // this.chat.push(msg);
    // this.chat.push({
    //   receiving: true,
    //   received: "What's your name?",
    //   conversation_only: true,
    //   time: this.generate_time(),
    // });
    // this.new_update_response(0);
    // this.scroll_down();
    this.chat_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {
      params: {
        username: this.$session.get("UserInformation").email,
        token: this.$session.get("UserInformation").tokens,
        role: this.$session.get("UserInformation").role
      }
    });
    this.chat_socket.connect();
    this.support_channel = this.chat_socket.channel("companies:" + this.$session.get("UserInformation").company_name);
    this.support_channel.join();
    var vm = this;
    this.support_channel.push("customer_wants_presence");
    this.support_channel.on("customer_gets_presence", function (res) {
      console.log("customer_gets_presence res", res);

      if (Boolean(res[vm.companyname]) === true) {
        var company_presence = res[vm.companyname]["metas"]; // console.log(company_presence);

        var self_user_index = company_presence.map(function (e) {
          return e.user_info.username;
        }).indexOf(vm.$session.get("UserInformation").email);

        if (self_user_index !== -1) {
          company_presence.splice(self_user_index, 1);
        }

        var present_role_list = [];
        company_presence.filter(function (each) {
          return present_role_list.push(each.user_info.role);
        });
        var unique_role_list = present_role_list.filter(function (x, i, a) {
          return a.indexOf(x) == i;
        });

        if (unique_role_list.includes("Admin") || unique_role_list.includes("support agent")) {
          vm.is_support_agent_present = true;
        } else {
          vm.is_support_agent_present = false;
          console.log("coming here not a support a agent");
        }
      } else {
        vm.is_support_agent_present = false;
      }

      vm.connect_support_agent(); // console.log(res)
    }); // presence.onSync((res) => {
    // console.log(res)
    // })
    // axios.get(api_calls.chat_group_api()).then((response) => {
    //   this.chat_group_name = response.data.chat_group_name;
    //   this.live_chat_token = response.data.token;
    //   this.live_chat_on = true;
    //   this.chat_socket = new Socket(
    //     process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT,
    //     {
    //       params: {
    //         company: this.$session.get("UserInformation").company_name,
    //         chat_group_name: this.chat_group_name,
    //         token: this.live_chat_token,
    //       },
    //     }
    //   );
    //   this.chat_socket.connect();
    //   this.channel = this.chat_socket.channel(
    //     "customers_groups:" + this.chat_group_name
    //   );
    //   this.channel.join();
    //   this.channel.push("customer_needs_support_agent");
    //   this.channel.on("new_chat_message", (res) => {
    //     if (res.sender != "customer") {
    //       this.chat.push({
    //         receiving: true,
    //         received: res.message,
    //         time: this.generate_time(),
    //         conversation_only: true,
    //       });
    //       setTimeout(() => {
    //         this.scroll_down();
    //         if (
    //           $(".chat-body").children().last().height() /
    //             $(".chat-body").height() <
    //           0.5
    //         ) {
    //           this.animate_chat_body_scroll(1, 1500);
    //         } else if (
    //           $(".receiver").last().parent().height() /
    //             $(".chat-body").height() >
    //             0.5 &&
    //           $(".receiver").last().parent().height() /
    //             $(".chat-body").height() <
    //             0.6
    //         ) {
    //           this.animate_chat_body_scroll(0.9, 1500);
    //         } else {
    //           this.animate_chat_body_scroll(0.75, 1500);
    //         }
    //       }, 1000);
    //       if (
    //         $(".chat-body").height() - $(".chat-body").prop("scrollHeight") !=
    //         0
    //       ) {
    //         this.scroll_down();
    //       }
    //     }
    //   });
    //   this.channel.on("stopped_chat", (res) => {
    //     this.chat.push({
    //       conversation_only: true,
    //       receiving: true,
    //       received: "Support agent " + res.message,
    //       time: this.generate_time(),
    //     });
    //     this.live_chat_on = false;
    //     this.update_scrollbar("upto_end", "response");
    //   });
    //   this.channel.on("started_typing", (res) => {
    //     this.is_agent_typing = true;
    //     this.is_typing_indicator_on = true;
    //   });
    //   this.channel.on("stopped_typing", (res) => {
    //     this.is_agent_typing = false;
    //     this.is_typing_indicator_on = false;
    //   });
    // });
  },
  connect_support_agent: function connect_support_agent() {
    var _this25 = this;

    var vm = this;
    this.support_channel.leave();
    this.chat_socket.disconnect();
    this.chat_socket = null;

    if (this.is_support_agent_present === true) {
      var msg = {};
      msg.receiving = true;
      msg.received = "I am connecting you to one of our support agents. Please wait for a while.";
      msg.conversation_only = true;
      msg.time = this.generate_time();
      this.update_scrollbar("upto_end", "response");
      this.chat.push(msg);
      this.chat.push({
        receiving: true,
        received: "What's your name?",
        conversation_only: true,
        time: this.generate_time()
      });
      this.new_update_response(0);
      this.scroll_down();
      axios.get(api_calls.chat_group_api()).then(function (response) {
        _this25.chat_group_name = response.data.chat_group_name;
        _this25.live_chat_token = response.data.token;
        _this25.live_chat_on = true;
        _this25.chat_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {
          params: {
            company: _this25.$session.get("UserInformation").company_name,
            chat_group_name: _this25.chat_group_name,
            token: _this25.live_chat_token
          }
        });

        _this25.chat_socket.connect();

        _this25.channel = _this25.chat_socket.channel("customers_groups:" + _this25.chat_group_name);

        _this25.channel.join();

        _this25.channel.push("customer_needs_support_agent");

        setInterval(function () {
          vm.channel.push("customer_group_presence");
        }, 2000);
        setInterval(function () {
          vm.channel.push("customer_group_self_presence");
        }, 2000);

        _this25.channel.on("customer_group_self_presence", function (res) {
          console.log("CUSTOMER GROUP PRESENCE", res);
        });

        _this25.channel.on("new_chat_message", function (res) {
          if (res.sender != "customer") {
            _this25.chat.push({
              receiving: true,
              received: res.message,
              time: _this25.generate_time(),
              conversation_only: true
            });

            setTimeout(function () {
              _this25.scroll_down();

              if ($(".chat-body").children().last().height() / $(".chat-body").height() < 0.5) {
                _this25.animate_chat_body_scroll(1, 1500);
              } else if ($(".receiver").last().parent().height() / $(".chat-body").height() > 0.5 && $(".receiver").last().parent().height() / $(".chat-body").height() < 0.6) {
                _this25.animate_chat_body_scroll(0.9, 1500);
              } else {
                _this25.animate_chat_body_scroll(0.75, 1500);
              }
            }, 1000);

            if ($(".chat-body").height() - $(".chat-body").prop("scrollHeight") != 0) {
              _this25.scroll_down();
            }
          }
        });

        _this25.channel.on("stopped_chat", function (res) {
          _this25.chat.push({
            conversation_only: true,
            receiving: true,
            received: "Support agent " + res.message,
            time: _this25.generate_time()
          });

          _this25.live_chat_on = false;

          _this25.channel.leave();

          _this25.live_chat_token = null;
          _this25.chat_group_name = null;
          _this25.user_name = "";

          _this25.chat_socket.disconnect();

          _this25.update_scrollbar("upto_end", "response");
        });

        _this25.channel.on("started_typing", function (res) {
          _this25.is_agent_typing = true;
          _this25.is_typing_indicator_on = true;
        });

        _this25.channel.on("stopped_typing", function (res) {
          _this25.is_agent_typing = false;
          _this25.is_typing_indicator_on = false;
        });
      });
    } else {
      this.support_subscription_data();
    }
  },
  submit_custom_form: function submit_custom_form() {
    var _this26 = this;

    if (document.querySelector("#details_form") != null) {
      var element = document.querySelector("#details_form");
      element.addEventListener("submit", function (event) {
        event.preventDefault(); // actual logic, e.g. validate the form

        var queryString = $("#details_form").serializeArray();

        if (_this26.form_payload == null) {
          var _axios$post9;

          _this26.form_payload = {};

          for (var i in queryString) {
            _this26.form_payload[queryString[i].name] = queryString[i].value;
          }

          axios.post(api_calls.bot_user_data(), (_axios$post9 = {
            license_key: _this26.$session.get("UserInformation").license_key,
            data: _this26.form_payload,
            token: _this26.bot_response_token_value,
            username: _this26.$session.get("UserInformation").email,
            source: "Web"
          }, _defineProperty(_axios$post9, "token", _this26.bot_response_token_value), _defineProperty(_axios$post9, "role", _this26.$session.get("UserInformation").role), _axios$post9)).then(function (response) {
            if (response.data == "Bot User Data Saved Successfully") {
              $("#details_form :input").prop("disabled", true);
              $("#details_form :button").prop("disabled", true);

              _this26.update_scrollbar("upto_end", "response");

              axios.post(api_calls.chatbot_response_cense(), {
                chat: "/details_form",
                token: _this26.bot_response_token_value,
                username: _this26.$session.get("UserInformation").email,
                source: "Web",
                license_key: _this26.$session.get("UserInformation").license_key,
                Details: JSON.stringify(_this26.form_payload),
                role: _this26.$session.get("UserInformation").role,
                refreshed_or_closed: false
              }).then(function (resp) {
                _this26.response_handling(resp);

                _this26.animate_chat_body_scroll(1, 1000);
              });
            }
          }).catch(function (e) {
            console.log(e);
          });
        }
      });
    }
  },
  update_scrollbar: function update_scrollbar(type, msgType, iswelcome, delay_value) {
    var _this27 = this;

    var scroll_delay = iswelcome == "is_welcome" ? delay_value : 2000;
    this.is_typing_indicator_on = true;

    if (msgType == "response") {
      setTimeout(function () {
        _this27.is_typing_indicator_on = false;
      }, scroll_delay);
    } else if (msgType == "sender") {
      this.animate_chat_body_scroll(1, 750);
    }

    if (msgType == "response") {
      if (type == "upto_end") {
        setTimeout(function () {
          if ($(".chat-body").prop("scrollTop") < $(".chat-body").prop("scrollHeight")) {
            if ($(".receiver").last().parent().height() / $(".chat-body").height() > 0.5) {
              _this27.animate_chat_body_scroll(0.75, 1500);

              _this27.scroll_down();
            }
          } else if ($(".receiver").last().parent().height() / $(".chat-body").height() < 0.5) {
            _this27.animate_chat_body_scroll(1, scroll_delay);
          }
        }, scroll_delay);
      } else {
        setTimeout(function () {
          document.querySelector(".chat-body").scrollTop = document.querySelector(".chat-body").scrollHeight - document.querySelector(".chat-body").lastChild.scrollHeight;
        }, 1000);
      }
    }
  },
  new_update_response: function new_update_response(index) {
    var _this28 = this;

    if (index == 0) {
      setTimeout(function () {
        _this28.scroll_down();

        if ($(".chat-body").children().last().height() / $(".chat-body").height() < 0.5) {
          _this28.animate_chat_body_scroll(1, 1500);
        } else if ($(".receiver").last().parent().height() / $(".chat-body").height() > 0.5 && $(".receiver").last().parent().height() / $(".chat-body").height() < 0.6) {
          _this28.animate_chat_body_scroll(1, 1500);
        } else {
          _this28.animate_chat_body_scroll(1, 1500);
        }
      }, 1000);
    }

    if ($(".chat-body").height() - $(".chat-body").prop("scrollHeight") != 0) {
      this.scroll_down();
    }

    if ($(".chat-body").height() - $(".chat-body").prop("scrollHeight") === 0) {
      this.to_scroll = false;
    }
  },
  animate_chat_body_scroll: function animate_chat_body_scroll(scale, delay, offset) {
    if (Boolean(offset)) {
      $(".chat-body").animate({
        scrollTop: $(".chat-body").prop("scrollTop") + scale
      }, delay);
    } else {
      $(".chat-body").animate({
        scrollTop: scale * $(".chat-body").prop("scrollHeight")
      }, delay);
    }
  },
  add_bot_unanswered_question: function add_bot_unanswered_question(index, method) {
    var _this29 = this;

    axios.put(api_calls.get_unanswered_url(), {
      license_key: this.$session.get("UserInformation").license_key,
      token: this.bot_response_token_value,
      bot_answer: this.chat[index].received,
      user_query: this.chat[index - 1].sent,
      feedback: method ? "like" : "dislike",
      username: this.$session.get("UserInformation").email,
      companyid: this.$session.get("UserInformation").company_id,
      companyname: this.$session.get("UserInformation").company_name
    }, {
      headers: {
        Authorization: "Bearer ".concat(this.$session.get("at"))
      }
    }).then(function () {
      _this29.chat[index].ask_feedback = false;
    }).catch(function () {});
  },
  load_refunds: function load_refunds() {
    var _this30 = this;

    var msg = {
      conversation_only: true,
      is_refund: true,
      receiving: true,
      received: this.retail_order_retreival_only_email_required ? "Please enter email to fetch your orders." : "Please login to fetch your recent orders",
      time: this.generate_time()
    };
    setTimeout(function () {
      var latestChatIndex = _this30.chat.push(msg);

      latestChatIndex -= 1;
      _this30.chat[latestChatIndex].fetch_shopify_details = true;

      _this30.scroll_down();
    }, 1000);
  },
  view_order_details: function view_order_details(chatIndex, orderIndex, orderLineItems, orderRefunds) {
    var _this31 = this;

    this.chat[chatIndex].refund_selected_items = [];
    this.chat[chatIndex].shopify_reason_for_refund_list = null;
    this.chat[chatIndex].shopify_reason_for_refund = null;
    this.chat[chatIndex].refund_order_view_details = Object(this.chat[chatIndex].refund_orders_list[orderIndex]);
    this.chat[chatIndex].refund_order_view_details.line_items = orderLineItems.map(function (lineItem) {
      var lineItemNode = lineItem;
      lineItemNode.selected_quantity = _this31.retail_web_framework == "magento" ? lineItem.qty_ordered : lineItem.quantity;
      lineItemNode.already_refunded_qty = _this31.retail_web_framework == "magento" ? lineItem.qty_refunded : 0;
      lineItemNode.qty_available_for_refund = _this31.retail_web_framework == "magento" ? lineItem.qty_ordered : lineItem.quantity;
      lineItemNode.product_id = lineItem.product_id;
      lineItemNode.variant_id = _this31.retail_web_framework == "magento" ? lineItem.sku : lineItem.variant_id;
      return lineItemNode;
    });

    if (Boolean(orderRefunds) === true) {
      orderRefunds = orderRefunds.map(function (lineItem) {
        return lineItem.refund_line_items[0];
      });
      var AlreadyRefundedQty = [];
      orderRefunds.reduce(function (res, value) {
        if (!res[value.line_item_id]) {
          res[value.line_item_id] = {
            line_item_id: value.line_item_id,
            quantity: 0
          };
          AlreadyRefundedQty.push(res[value.line_item_id]);
        }

        res[value.line_item_id].quantity += value.quantity;
        return res;
      }, {});
      var temp = this.chat[chatIndex].refund_order_view_details.line_items;
      this.chat[chatIndex].refund_order_view_details.line_items = temp.map(function (lineItem) {
        var lineItemNode = lineItem;

        for (var i in AlreadyRefundedQty) {
          if (lineItem.id == AlreadyRefundedQty[i].line_item_id) {
            lineItemNode.already_refunded_qty = AlreadyRefundedQty[i]['quantity'];
            lineItemNode.qty_available_for_refund = lineItem.quantity - AlreadyRefundedQty[i]['quantity'];
            lineItemNode.selected_quantity = lineItem.quantity - AlreadyRefundedQty[i]['quantity'];
            lineItemNode.product_id = lineItem.product_id;
            lineItemNode.variant_id = _this31.retail_web_framework == "magento" ? lineItem.sku : lineItem.variant_id;
          }
        }

        ;
        return lineItemNode;
      });
    }

    this.$set(this.chat, chatIndex, this.chat[chatIndex]);
  },
  refresh_or_remove_order_details: function refresh_or_remove_order_details(chatIndex, val) {
    if (val == "remove") {
      this.chat[chatIndex].refund_order_view_details = {};
    }

    this.$set(this.chat, chatIndex, this.chat[chatIndex]);
  },
  load_customer_orders: function load_customer_orders(ordersData, index, order_type) {
    var _this32 = this;

    // this.chat[index].received = `Order ${orderName}`;
    this.is_typing_indicator_on = true;

    if (order_type === "refund") {
      this.chat[index].received = "Fetching your orders ...";
      this.chat[index].refund_orders_list = ordersData.map(function (order) {
        var orderObject = order;
        orderObject.created_at = moment(orderObject.created_at, ["YYYY-MM-DDTh:m:sZ"]).format("Do MMM YYYY");
        orderObject.name = _this32.retail_web_framework == "shopify" ? orderObject.name : orderObject.id;
        orderObject.processedAt = moment(orderObject.created_at, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY"); // cur_node.fulfillmentStatus = cur_node.fulfillment_status;

        orderObject.fulfillment_status = Boolean(orderObject.fulfillment_status) === true ? orderObject.fulfillment_status : "Unfulfilled"; // Set only first character to uppercase while remaining characters set to lowercase

        orderObject.fulfillment_status = orderObject.fulfillment_status.charAt(0).toUpperCase() + orderObject.fulfillment_status.slice(1).toLowerCase();

        if (_this32.retail_web_framework != "shopify") {
          for (var i = 0; i < orderObject.order_notes.length; i++) {
            orderObject.order_notes[i].date_created = moment(orderObject.order_notes[i].date_created, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY HH:mm a");
          }
        }

        return orderObject;
      });

      if (this.chat[index].refund_orders_list.length === 0) {
        this.chat[index].received = "There are no orders to be displayed";
      } else {
        this.chat[index].received = "Select the order that you wish to return";
      } // this.refund_order_view_details = {};


      this.chat[index].refund_order_view_details = {};
      this.chat[index].refund_selected_items = [];
      this.chat[index].shopify_reason_for_refund_list = null;
      this.chat[index].shopify_reason_for_refund = null;
      this.chat[index].conversation_only = false;
      this.chat[index].conversation_only = true;
    } else if (order_type === "all_orders") {
      var orders_data = ordersData,
          complete_orders_data = [];

      for (var i = 0; i < orders_data.length; i++) {
        var cur_node = orders_data[i];
        cur_node.processedAt = moment(cur_node.created_at, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY"); // cur_node.fulfillmentStatus = cur_node.fulfillment_status;

        cur_node.fulfillment_status = Boolean(cur_node.fulfillment_status) === true ? cur_node.fulfillment_status : "Unfulfilled"; // // Set only first character to uppercase while remaining characters set to lowercase

        cur_node.fulfillment_status = cur_node.fulfillment_status.charAt(0).toUpperCase() + cur_node.fulfillment_status.slice(1).toLowerCase();

        if (this.retail_web_framework != "shopify") {
          for (var _i7 = 0; _i7 < cur_node.order_notes.length; _i7++) {
            cur_node.order_notes[_i7].date_created = moment(cur_node.order_notes[_i7].date_created, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY HH:mm a");
          }
        }

        complete_orders_data.push({
          name: this.retail_web_framework == "shopify" ? cur_node.name : cur_node.id,
          processed_date: cur_node.processedAt,
          fulfillment_status: cur_node.fulfillment_status,
          status_url: cur_node.order_status_url,
          order_notes: this.retail_web_framework == "shopify" ? null : cur_node.order_notes
        });
      }

      this.chat[index].show_all_orders_list = true;
      this.chat[index].all_orders_list = complete_orders_data;

      if (this.chat[index].all_orders_list.length === 0) {
        this.chat[index].received = "There are no orders to be displayed";
        this.chat[index].show_all_orders_list = false;
      } else {
        this.chat[index].received = "Please Find Below Your Latest Orders:";
      }

      this.chat[index].recent_orders_list = complete_orders_data;
      setTimeout(function () {
        _this32.chat[index].conversation_only = true;
      }, 500);
    }

    this.is_typing_indicator_on = false;
  },
  submit_refund_request: function submit_refund_request(refund_order_view_details, index) {
    var _this33 = this;

    if (this.chat[index].shopify_reason_for_refund_list === null) {
      this.show_shopify_reason_for_refund_error = true;
      return;
    }

    if (this.chat[index].shopify_reason_for_refund_list === 'Others') {
      if (this.chat[index].shopify_reason_for_refund === null || this.chat[index].shopify_reason_for_refund === "") {
        this.show_shopify_reason_for_refund_error = true;
        return;
      }
    } else {
      this.chat[index].shopify_reason_for_refund = this.chat[index].shopify_reason_for_refund_list;
    } // else {


    this.show_shopify_reason_for_refund_error = false;
    var items_to_refund = refund_order_view_details.line_items.filter(function (lineItem) {
      if (_this33.retail_web_framework == 'magento') {
        return _this33.chat[index].refund_selected_items.includes(lineItem.product_id);
      } else {
        return _this33.chat[index].refund_selected_items.includes(lineItem.id);
      }
    });

    for (var i = 0; i < items_to_refund.length; i++) {
      if (items_to_refund[i].selected_quantity === null || Boolean(items_to_refund[i].selected_quantity) === false) {
        swal({
          text: "Please enter the product quantity in numeric only",
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 5000
        });
        return;
      }
    }

    var refund_payload_string = JSON.stringify({
      orderId: refund_order_view_details.id,
      order_name: refund_order_view_details.name,
      customer_id: this.shopify_customer_id,
      fulfillment_status: refund_order_view_details.fulfillment_status,
      payment_status: refund_order_view_details.payment_status,
      currency: this.retail_shop_currency,
      lineItems: items_to_refund.map(function (item) {
        return {
          line_item_id: _this33.retail_web_framework == 'magento' ? item.product_id : item.id,
          quantity: item.selected_quantity,
          product_id: item.product_id,
          variant_id: item.variant_id
        };
      }),
      refundReason: this.chat[index].shopify_reason_for_refund
    });
    var refund_intent = "/process_refund_request".concat(refund_payload_string);
    var refund_object = {
      title: "Proceed",
      value: refund_intent
    }; // console.log(refund_intent);

    this.send_message("is_button", refund_object);
    this.chat[index].refund_order_view_details = {};
    this.chat[index].refund_selected_items = [];
    this.chat[index].shopify_reason_for_refund_list = null;
    this.chat[index].shopify_reason_for_refund = null;
    this.chat.splice(index, 1); // }
  },
  shopify_form_focus: function shopify_form_focus(index) {
    if (this.chat[index].received === "We are sorry, your credentials are invalid. Please try again :)") {
      this.chat[index].received = "Please login with your credentials for better experience :)";
    }
  },
  shopify_create_customer_token: function shopify_create_customer_token(index, isRefund) {
    var _axios$post10,
        _this34 = this;

    this.is_typing_indicator_on = true;
    isRefund = isRefund || false;

    if (this.chat[index].return_shopify_email === true && !isRefund) {
      this.send_shopify_customer_id(index, true);
      return;
    }

    var shop_endpoint = this.shopify_retail_shop_name + ".myshopify.com";
    var queryString = $("#shopify_login_form").serializeArray();
    var form_payload = {};
    form_payload["shopify_is_only_email"] = this.retail_order_retreival_only_email_required;
    form_payload['email'] = this.chat[index].customer_email_id;
    form_payload['password'] = this.chat[index].customer_password; // for (var i in queryString) {
    //   form_payload[queryString[i].name] = this.chat[index].customer_email_id;
    // }

    form_payload = JSON.stringify(form_payload);
    axios.post(api_calls.chatbot_response_cense(), (_axios$post10 = {
      license_key: this.$session.get("UserInformation").license_key,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email,
      source: "Web",
      chat: "/shopify_create_customer_token".concat(form_payload)
    }, _defineProperty(_axios$post10, "token", this.bot_response_token_value), _defineProperty(_axios$post10, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post10, "refreshed_or_closed", this.refreshed_or_closed), _axios$post10)).then(function (_ref2) {
      var data = _ref2.data;

      // console.log(data);
      // if (Boolean(data.responses[0].Data.accessToken)) {
      //   let customerToken = data.responses[0].Data.accessToken;
      //   let tokenExpiry = data.responses[0].Data.expiresAt;
      //   this.$session.set("shopify_customer_token", customerToken);
      //   this.$session.set("shopify_customer_token_expiry", tokenExpiry);
      //   this.shopify_fetch_orders(customerToken, index, isRefund);
      // } else {
      //   this.chat[index].received =
      //     "We are sorry, your credentials are invalid. Please try again :)";
      // }
      if (data.responses[0].token_type === "customer_token") {
        if (Boolean(data.responses[0].Data)) {
          if (_this34.retail_web_framework == "shopify") {
            var customerToken = data.responses[0].Data.accessToken;
            var tokenExpiry = data.responses[0].Data.expiresAt;

            _this34.$session.set("shopify_customer_token", customerToken);

            _this34.$session.set("shopify_customer_token_expiry", tokenExpiry);

            _this34.shopify_fetch_orders(customerToken, index, isRefund, "shopify_customer_token");
          } else if (_this34.retail_web_framework == "woocommerce") {
            var _customerToken = data.responses[0].customer_data.customer_email;
            var _tokenExpiry = data.responses[0].Data.expiresAt;
            var customerId = data.responses[0].customer_data.customer_id;
            _this34.shopify_customer_id = customerId;

            _this34.$session.set("shopify_customer_token", _customerToken);

            _this34.$session.set("shopify_customer_token_expiry", _tokenExpiry);

            _this34.$session.set("shopify_customer_id", customerId);

            _this34.shopify_fetch_orders(_customerToken, index, isRefund, "shopify_customer_token");
          } else if (_this34.retail_web_framework == "magento") {
            var _customerToken2 = data.responses[0].customer_data.customer_email;
            var _tokenExpiry2 = data.responses[0].Data.expiresAt;
            var _customerId = data.responses[0].customer_data.customer_id;
            _this34.shopify_customer_id = _customerId;

            _this34.$session.set("shopify_customer_token", _customerToken2);

            _this34.$session.set("shopify_customer_token_expiry", _tokenExpiry2);

            _this34.$session.set("shopify_customer_id", _customerId);

            _this34.shopify_fetch_orders(_customerToken2, index, isRefund, "shopify_customer_token");
          }
        } else {
          _this34.chat[index].received = "We are sorry, your credentials are invalid. Please try again :)";
          _this34.is_typing_indicator_on = false;
        }
      } else if (data.responses[0].token_type === "customer_id") {
        // if (Boolean(data.responses[0].customer_id)) {
        if (_this34.retail_web_framework == "shopify") {
          var _customerId2 = data.responses[0].customer_id;
          var customerEmail = data.responses[0].customer_email;
          _this34.shopify_customer_id = _customerId2;

          _this34.$session.set("shopify_customer_id", _customerId2);

          _this34.$session.set("shopify_customer_token", customerEmail);

          _this34.shopify_fetch_orders(_customerId2, index, isRefund, "shopify_customer_id");
        } else if (_this34.retail_web_framework == "woocommerce") {
          var _customerId3 = data.responses[0].customer_id;
          var _customerEmail = data.responses[0].customer_email;

          _this34.$session.set("shopify_customer_id", _customerId3);

          _this34.$session.set("shopify_customer_token", _customerEmail);

          _this34.shopify_fetch_orders(_customerId3, index, isRefund, "shopify_customer_id");
        } else if (_this34.retail_web_framework == "magento") {
          var _customerId4 = data.responses[0].customer_id;
          var _customerEmail2 = data.responses[0].customer_email;

          _this34.$session.set("shopify_customer_id", _customerId4);

          _this34.$session.set("shopify_customer_token", _customerEmail2);

          _this34.shopify_fetch_orders(_customerId4, index, isRefund, "shopify_customer_id");
        } // } 
        else {
            _this34.chat[index].received = "We are sorry, could not find any records with this email. Please try again :)";
            _this34.is_typing_indicator_on = false;
          }
      } else {
        _this34.chat[index].received = "We are sorry, your credentials are invalid. Please try again :)";
        _this34.is_typing_indicator_on = false;
      } // this.chat.splice(index, 1);

    });
  },
  shopify_fetch_customer_id: function shopify_fetch_customer_id(customerAccessToken, index, token_type) {
    var _this35 = this;

    var shop_endpoint = this.shopify_retail_shop_name + ".myshopify.com";
    this.is_typing_indicator_on = true;

    if (!Boolean(this.chat[index].refund_orders_list)) {
      if (token_type === "shopify_customer_token") {
        var _axios$post11;

        var stringified_customer_payload = JSON.stringify({
          customer_access_token: customerAccessToken //shopify access token == email for woocommerce

        });
        axios.post(api_calls.chatbot_response_cense(), (_axios$post11 = {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
          chat: "/shopify_get_customer_id_and_orders".concat(stringified_customer_payload)
        }, _defineProperty(_axios$post11, "token", this.bot_response_token_value), _defineProperty(_axios$post11, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post11, "refreshed_or_closed", this.refreshed_or_closed), _axios$post11)).then(function (_ref3) {
          var data = _ref3.data;

          if (Boolean(data.responses[0].custom)) {
            _this35.load_customer_orders(data.responses[0].custom.orders_list, index, "refund"); // this.shopify_customer_id = data.responses[0].custom.customer_id;

          } else {
            _this35.chat[index].received = "Some Error Occurred. Please Try Again";
            _this35.is_typing_indicator_on = false;
          } //   let customerId = atob(data.data.customer.id);
          //   this.shopify_customer_id = customerId.slice(
          //     customerId.lastIndexOf("/") + 1
          //   );
          //   let stringified_customer_payload = JSON.stringify({
          //     customerId: this.shopify_customer_id,
          //   });
          //   this.chat[index].received = "Fetching your order details ...";
          //   axios
          //     .post(api_calls.chatbot_response_cense(), {
          //       license_key: this.$session.get("UserInformation").license_key,
          //       token: this.bot_response_token_value,
          //       username: this.$session.get("UserInformation").email,
          //       source: "Web",
          //       chat: `/retrieve_customer_orders${stringified_customer_payload}`,
          //       token: this.bot_response_token_value,
          //       role: this.$session.get("UserInformation").role,
          //       refreshed_or_closed: this.refreshed_or_closed,
          //     })
          //     .then((response) => {
          //       this.load_customer_orders(
          //         response.data.responses[0].custom.orders_list,
          //         index
          //       );
          //     })
          //     .catch((e) => {
          //       console.log(e);
          //       this.update_scrollbar("upto_end", "response");
          //     });

        });
      } else if (token_type == "shopify_customer_id") {
        var _axios$post12;

        var _stringified_customer_payload = JSON.stringify({
          customerId: this.shopify_customer_id
        });

        this.chat[index].received = "Fetching your order details ...";
        axios.post(api_calls.chatbot_response_cense(), (_axios$post12 = {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
          chat: "/retrieve_customer_orders".concat(_stringified_customer_payload)
        }, _defineProperty(_axios$post12, "token", this.bot_response_token_value), _defineProperty(_axios$post12, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post12, "refreshed_or_closed", this.refreshed_or_closed), _axios$post12)).then(function (response) {
          _this35.load_customer_orders(response.data.responses[0].custom.orders_list, index, "refund");
        }).catch(function (e) {
          _this35.is_typing_indicator_on = false;
          console.log(e);

          _this35.update_scrollbar("upto_end", "response");
        });
      }
    }
  },
  shopify_fetch_orders: function shopify_fetch_orders(customerAccessToken, index, isRefund, token_type) {
    var _this36 = this;

    this.is_typing_indicator_on = true;
    isRefund = isRefund || false;
    this.chat[index].conversation_only = false;
    var shop_endpoint = this.shopify_retail_shop_name + ".myshopify.com";

    if (token_type === "shopify_customer_token") {
      var _axios$post13;

      var stringified_customer_payload = JSON.stringify({
        customer_access_token: customerAccessToken //woocommerce customer email

      });
      axios.post(api_calls.chatbot_response_cense(), (_axios$post13 = {
        license_key: this.$session.get("UserInformation").license_key,
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web",
        chat: "/shopify_get_customer_orders".concat(stringified_customer_payload)
      }, _defineProperty(_axios$post13, "token", this.bot_response_token_value), _defineProperty(_axios$post13, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post13, "refreshed_or_closed", this.refreshed_or_closed), _axios$post13)).then(function (_ref4) {
        var data = _ref4.data;
        _this36.is_typing_indicator_on = false;

        try {
          var customerId = atob(data.responses[0].data.customer.id);
          _this36.shopify_customer_id = customerId.slice(customerId.lastIndexOf("/") + 1);

          _this36.$session.set("shopify_customer_id", _this36.shopify_customer_id);
        } catch (e) {}

        if (_this36.retail_web_framework == "shopify") {
          var ordersData = data.responses[0].data.customer.orders.edges;

          if (typeof index == "number" && ordersData.length > 0) {
            // ordersData = ordersData[0].node;
            // let orderName = ordersData.name;
            // let orderStatusUrl = ordersData.statusUrl;
            // let orderProcessingDate = moment(ordersData.processedAt, [
            //   "YYYY-MM-DDThh:mm:ssZ",
            // ]).format("Do MMM YYYY");
            if (isRefund) {
              _this36.shopify_fetch_customer_id(customerAccessToken, index, "shopify_customer_token");
            } else {
              _this36.is_typing_indicator_on = false; //   let orderFulfillmentStatus = ordersData.fulfillmentStatus.replace(
              //     "_",
              //     " "
              //   );
              //   let successfulOrderFulfillments =
              //     ordersData.successfulFulfillments;
              //   // Set only first character to uppercase while remaining characters set to lowercase
              //   orderFulfillmentStatus =
              //     orderFulfillmentStatus.charAt(0).toUpperCase() +
              //     orderFulfillmentStatus.slice(1).toLowerCase();
              //   let orderDetailsMsg = `Here's the status of your recent order:<br>
              // Order - <a href="${orderStatusUrl}" target="_blank">#${orderName}</a><br>
              // Order Processed On: ${orderProcessingDate}<br>
              // Fulfillment Status: ${orderFulfillmentStatus}<br>`;
              //   if (orderFulfillmentStatus == "FULFILLED") {
              //     successfulOrderFulfillments = successfulOrderFulfillments[0];
              //     orderDetailsMsg += `You can track your order here<a href="${successfulOrderFulfillments.trackingInfo.url}" data-copy-content="${successfulOrderFulfillments.trackingInfo.number}">
              //   ${successfulOrderFulfillments.trackingInfo.number}</a><i class="fa fa-clipboard ml-2" aria-hidden="true" data-copy-content="${successfulOrderFulfillments.trackingInfo.number}"></i><br>`;
              //   }
              //   this.chat[index].received = orderDetailsMsg;

              var orders_data = data.responses[0].data.customer.orders.edges,
                  complete_orders_data = [];

              for (var i = 0; i < orders_data.length; i++) {
                var cur_node = orders_data[i].node;
                cur_node.processedAt = moment(cur_node.processedAt, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY");
                cur_node.fulfillmentStatus = cur_node.fulfillmentStatus.replace("_", " "); // Set only first character to uppercase while remaining characters set to lowercase

                cur_node.fulfillmentStatus = cur_node.fulfillmentStatus.charAt(0).toUpperCase() + cur_node.fulfillmentStatus.slice(1).toLowerCase();
                complete_orders_data.push({
                  name: cur_node.name,
                  processed_date: cur_node.processedAt,
                  fulfillment_status: cur_node.fulfillmentStatus,
                  status_url: cur_node.statusUrl
                });
              }

              _this36.chat[index].show_all_orders_list = true;
              _this36.chat[index].all_orders_list = complete_orders_data;
              _this36.chat[index].received = "Please Find Below Your Latest Orders:";
              _this36.chat[index].recent_orders_list = data.responses[0].data.customer.orders.edges;
            }
          }

          setTimeout(function () {
            _this36.chat[index].conversation_only = true;
          }, 500);
        } else if (_this36.retail_web_framework == "woocommerce") {
          if (isRefund) {
            _this36.load_customer_orders(data.responses[0].data.customer.orders, index, isRefund ? "refund" : "all_orders");
          } else {
            _this36.is_typing_indicator_on = false;
            var _orders_data = data.responses[0].data.customer.orders,
                _complete_orders_data = [];

            for (var _i8 = 0; _i8 < _orders_data.length; _i8++) {
              var cur_node = _orders_data[_i8];
              cur_node.processedAt = moment(cur_node.created_at, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY");
              cur_node.fulfillment_status = Boolean(cur_node.fulfillment_status) === true ? cur_node.fulfillment_status : "Unfulfilled"; // Set only first character to uppercase while remaining characters set to lowercase

              cur_node.fulfillment_status = cur_node.fulfillment_status.charAt(0).toUpperCase() + cur_node.fulfillment_status.slice(1).toLowerCase();

              for (var _i9 = 0; _i9 < cur_node.order_notes.length; _i9++) {
                cur_node.order_notes[_i9].date_created = moment(cur_node.order_notes[_i9].date_created, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY HH:mm a");
              }

              _complete_orders_data.push({
                name: cur_node.id,
                processed_date: cur_node.processedAt,
                fulfillment_status: cur_node.fulfillment_status,
                status_url: cur_node.order_status_url,
                order_notes: cur_node.order_notes
              });
            }

            _this36.chat[index].show_all_orders_list = true;
            _this36.chat[index].all_orders_list = _complete_orders_data;
            _this36.chat[index].received = "Please Find Below Your Latest Orders:";
            _this36.chat[index].show_all_orders_list = true;
            _this36.chat[index].recent_orders_list = _complete_orders_data;
          }

          setTimeout(function () {
            _this36.chat[index].conversation_only = true;
          }, 500);
        } else if (_this36.retail_web_framework == "magento") {
          if (isRefund) {
            _this36.load_customer_orders(data.responses[0].data.customer.orders, index, isRefund ? "refund" : "all_orders");
          } else {
            _this36.is_typing_indicator_on = false;
            var _orders_data2 = data.responses[0].data.customer.orders,
                _complete_orders_data2 = [];

            for (var _i10 = 0; _i10 < _orders_data2.length; _i10++) {
              var cur_node = _orders_data2[_i10];
              cur_node.processedAt = moment(cur_node.created_at, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY");
              cur_node.fulfillment_status = Boolean(cur_node.fulfillment_status) === true ? cur_node.fulfillment_status : "Unfulfilled"; // Set only first character to uppercase while remaining characters set to lowercase

              cur_node.fulfillment_status = cur_node.fulfillment_status.charAt(0).toUpperCase() + cur_node.fulfillment_status.slice(1).toLowerCase();

              for (var _i11 = 0; _i11 < cur_node.order_notes.length; _i11++) {
                cur_node.order_notes[_i11].date_created = moment(cur_node.order_notes[_i11].date_created, ["YYYY-MM-DDThh:mm:ssZ"]).format("Do MMM YYYY HH:mm a");
              }

              _complete_orders_data2.push({
                name: cur_node.id,
                processed_date: cur_node.processedAt,
                fulfillment_status: cur_node.fulfillment_status,
                status_url: cur_node.order_status_url,
                order_notes: cur_node.order_notes
              });
            }

            _this36.chat[index].show_all_orders_list = true;
            _this36.chat[index].all_orders_list = _complete_orders_data2;
            _this36.chat[index].received = "Please Find Below Your Latest Orders:";
            _this36.chat[index].show_all_orders_list = true;
            _this36.chat[index].recent_orders_list = _complete_orders_data2;
          }

          setTimeout(function () {
            _this36.chat[index].conversation_only = true;
          }, 500);
        }
      });
    } else if (token_type === "shopify_customer_id") {
      var _axios$post14;

      if (Boolean(this.shopify_customer_id) === false) {
        this.shopify_customer_id = this.$session.get("shopify_customer_id");
      }

      var shopify_customer_email = this.$session.get("shopify_customer_token");

      var _stringified_customer_payload2 = JSON.stringify({
        customerId: this.shopify_customer_id,
        email: shopify_customer_email
      });

      this.chat[index].received = "Fetching your order details ...";
      axios.post(api_calls.chatbot_response_cense(), (_axios$post14 = {
        license_key: this.$session.get("UserInformation").license_key,
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web",
        chat: "/retrieve_customer_orders".concat(_stringified_customer_payload2)
      }, _defineProperty(_axios$post14, "token", this.bot_response_token_value), _defineProperty(_axios$post14, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post14, "refreshed_or_closed", this.refreshed_or_closed), _axios$post14)).then(function (response) {
        if (response.data.responses[0].custom.orders_list.length == 0 && _this36.retail_order_retreival_only_email_required) {
          _this36.is_typing_indicator_on = false;
          _this36.chat[index].conversation_only = true;
          _this36.chat[index].received = "There are no orders to be displayed for the given Email or Phone number";
          _this36.shopify_customer_id = null;
        } else {
          _this36.load_customer_orders(response.data.responses[0].custom.orders_list, index, isRefund ? "refund" : "all_orders");
        }
      }).catch(function (e) {
        _this36.is_typing_indicator_on = false;
        console.log(e);

        _this36.update_scrollbar("upto_end", "response");
      });
    }
  },
  shopify_is_token_valid: function shopify_is_token_valid(index, isRefund) {
    isRefund = isRefund || false;

    if (this.retail_web_framework == "shopify") {
      if (this.chat[index].fetch_shopify_details && !Boolean(this.chat[index].is_refund) && !Boolean(this.chat[index].recent_orders_list) || this.chat[index].fetch_shopify_details && Boolean(this.chat[index].is_refund) && !Boolean(this.chat[index].refund_orders_list) || this.chat[index].fetch_shopify_details && Boolean(this.chat[index].return_shopify_email)) {
        if (this.retail_order_retreival_only_email_required) {
          if (Boolean(this.shopify_customer_id)) {
            var customerToken = this.$session.get("shopify_customer_token");

            if (this.chat[index].is_refund) {
              this.shopify_fetch_customer_id(customerToken, index, "shopify_customer_id");
            } else if (this.chat[index].return_shopify_email) {
              this.send_shopify_customer_id(index, false);
            } else {
              this.shopify_fetch_orders(customerToken, index, isRefund, "shopify_customer_id");
            }

            return true;
          }

          return false;
        } else {
          var shopify_store_cid = this.get_shopify_store_window_customer_id();

          if (Boolean(shopify_store_cid) === false) {
            return false;
          } else {
            // let cutoff = this.$session.get("shopify_customer_token_expiry");
            // cutoff = moment(cutoff, ["YYYY-MM-DDThh:mm:ssZ"]);
            // if (moment().isBefore(cutoff)) {
            // let shopify_store_cid = this.get_shopify_store_window_customer_id();
            // let shopify_store_cid = 5302001893447; //hardcoded: remove after testing
            if (shopify_store_cid === null || shopify_store_cid == undefined || shopify_store_cid == "") {
              return false;
            } else {
              this.shopify_customer_id = shopify_store_cid;
            }

            var _customerToken3 = this.$session.get("shopify_customer_token");

            if (this.chat[index].is_refund) {
              this.shopify_fetch_customer_id(_customerToken3, index, "shopify_customer_id");
            } else if (this.chat[index].return_shopify_email) {
              this.send_shopify_customer_id(index, false);
            } else {
              this.shopify_fetch_orders(_customerToken3, index, isRefund, "shopify_customer_id");
            }

            return true; // } else {
            //   return false;
            // }
          }
        }
      } else {
        return true;
      }
    } else if (this.retail_web_framework == "woocommerce") {
      if (this.chat[index].fetch_shopify_details && !Boolean(this.chat[index].is_refund) && !Boolean(this.chat[index].recent_orders_list) || this.chat[index].fetch_shopify_details && Boolean(this.chat[index].is_refund) && !Boolean(this.chat[index].refund_orders_list) || this.chat[index].fetch_shopify_details && Boolean(this.chat[index].return_shopify_email)) {
        if (this.retail_order_retreival_only_email_required) {
          this.shopify_customer_id = this.$session.get("shopify_customer_id");

          if (Boolean(this.shopify_customer_id)) {
            var _customerToken4 = this.$session.get("shopify_customer_id");

            this.shopify_fetch_orders(_customerToken4, index, isRefund, "shopify_customer_id");
            return true;
          } else {
            return false;
          }
        } else {
          var woocommerce_store_login_detail = this.get_woocommerce_store_window_customer_email();

          if (Boolean(woocommerce_store_login_detail) == false) {
            return false;
          } else {
            this.$session.set("shopify_customer_id", woocommerce_store_login_detail[0]);
            this.$session.set("shopify_customer_token", woocommerce_store_login_detail[1]);

            if (this.chat[index].is_refund) {
              this.shopify_fetch_customer_id(woocommerce_store_login_detail[0], index, "shopify_customer_id");
            } else {
              this.shopify_fetch_orders(woocommerce_store_login_detail[0], index, isRefund, "shopify_customer_id");
            }

            return true;
          } // if (!this.$session.has("shopify_customer_token_expiry")) {
          //     return false;
          //   } else {
          //     let cutoff = this.$session.get("shopify_customer_token_expiry");
          //     cutoff = moment(cutoff, ["YYYY-MM-DDThh:mm:ssZ"]);
          //     let current_time = new Date(cutoff);
          //     if (moment().isBefore(current_time)) {
          //       let customerToken = this.$session.get("shopify_customer_token");
          //       this.shopify_fetch_orders(
          //           customerToken,
          //           index,
          //           isRefund,
          //           "shopify_customer_token"
          //         );
          //       return true;            
          //     }else {
          //       return false;
          //     }
          //   }

        }
      } else {
        return true;
      }
    } else if (this.retail_web_framework == "magento") {
      if (this.chat[index].fetch_shopify_details && !Boolean(this.chat[index].is_refund) && !Boolean(this.chat[index].recent_orders_list) || this.chat[index].fetch_shopify_details && Boolean(this.chat[index].is_refund) && !Boolean(this.chat[index].refund_orders_list) || this.chat[index].fetch_shopify_details && Boolean(this.chat[index].return_shopify_email)) {
        if (this.retail_order_retreival_only_email_required) {
          this.shopify_customer_id = this.$session.get("shopify_customer_id");

          if (Boolean(this.shopify_customer_id)) {
            var _customerToken5 = this.$session.get("shopify_customer_id");

            this.shopify_fetch_orders(_customerToken5, index, isRefund, "shopify_customer_id");
            return true;
          } else {
            return false;
          }
        } else {
          var magento_store_login_detail = this.get_magento_store_window_customer_email();

          if (Boolean(magento_store_login_detail) == false) {
            return false;
          } else {
            this.$session.set("shopify_customer_id", magento_store_login_detail[0]);
            this.$session.set("shopify_customer_token", magento_store_login_detail[1]);

            if (this.chat[index].is_refund) {
              this.shopify_fetch_customer_id(magento_store_login_detail[0], index, "shopify_customer_id");
            } else {
              this.shopify_fetch_orders(magento_store_login_detail[0], index, isRefund, "shopify_customer_id");
            }

            return true;
          } // if (!this.$session.has("shopify_customer_token_expiry")) {
          //     return false;
          //   } else {
          //     let cutoff = this.$session.get("shopify_customer_token_expiry");
          //     cutoff = moment(cutoff, ["YYYY-MM-DDThh:mm:ssZ"]);
          //     let current_time = new Date(cutoff);
          //     if (moment().isBefore(current_time)) {
          //       let customerToken = this.$session.get("shopify_customer_token");
          //       this.shopify_fetch_orders(
          //           customerToken,
          //           index,
          //           isRefund,
          //           "shopify_customer_token"
          //         );
          //       return true;            
          //     }else {
          //       return false;
          //     }
          //   }

        }
      } else {
        return true;
      }
    }
  },
  initialize_shopify_ui: function initialize_shopify_ui() {
    if (window.Shopify || this.is_retail_bot || this.companyid == "censeretail49140") {
      var client = ShopifyBuy.buildClient({
        domain: window.Shopify ? window.Shopify.shop : this.shopify_retail_shop_name + ".myshopify.com",
        storefrontAccessToken: this.retail_shop_storefront_token
      });
      this.shopify_ui = ShopifyBuy.UI.init(client); // if (this.$session.get("IsPortalMaintainence") === false) {

      this.shopify_ui.createComponent("cart", {
        node: document.getElementById("cartDiv"),
        toggles: [{
          node: document.getElementById("toggle")
        }],
        moneyFormat: this.retail_shop_currency + " {{money_with_currency}}",
        options: {
          toggle: {
            sticky: false
          },
          popup: false
        }
      }); // }
    }
  },
  initialize_shopify_buttons: function initialize_shopify_buttons(product_id, index, variant_id) {
    var _this37 = this;

    try {
      this.shopify_ui.createComponent("product", {
        id: product_id,
        variantId: variant_id,
        moneyFormat: this.retail_shop_currency + " {{money_with_currency}}",
        options: {
          product: {
            contents: {
              options: true,
              quantity: true,
              quantityIncrement: true,
              quantityDecrement: true,
              variantTitle: true // buttonWithQuantity: false,

            },
            styles: {
              quantity: {
                display: "flex",
                "justify-content": "center"
              }
            }
          }
        },
        node: document.getElementById("product_".concat(product_id, "_").concat(index))
      }).then(function (response) {
        _this37.check_no_products();

        for (var i in _this37.product_list) {
          if (product_id == _this37.product_list[i].product_id) {
            _this37.product_list[i].availableForSale = response.viewData.availableForSale;
            _this37.product_list[i].productImage = response.cachedImage.src;
            _this37.product_list[i].onlineStoreURL = response.onlineStoreURL;
          }
        }
      });
    } catch (e) {
      var msg = {
        conversation_only: true,
        time: this.generate_time(),
        ask_feedback: false,
        received: "Some error occurred while testing. Please try by refreshing the browser! If the issue persists, please contact system admin.",
        receiving: true
      };
      this.chat.push(msg);
    }
  },
  demo_retail_question: function demo_retail_question() {
    var _this38 = this;

    if (this.is_retail_bot && this.isCalledFromSetup) {
      axios.post(api_calls.template_synonyms(), {
        company_id: this.companyid,
        company_name: this.companyname,
        is_get_product_list: true
      }, {
        headers: {
          Authorization: "Bearer ".concat(this.$session.get("at"))
        }
      }).then(function (_ref5) {
        var data = _ref5.data;
        _this38.spinnerOn = false;

        if (data.status === "Success") {
          var product_names_list = data.product_names_list;
          var item = product_names_list[Math.floor(Math.random() * product_names_list.length)];
          _this38.to_send = "Please show me ".concat(item);
          swal({
            text: "Testing of Bot in Progress, Searching for a product from your Store!",
            toast: true,
            showCancelButton: false,
            showConfirmButton: false,
            type: "info",
            timer: 5000
          });
          setTimeout(function () {
            // $("#send_btn").click()
            _this38.chat.push({
              conversation_only: true,
              sending: true,
              sent: _this38.to_send,
              time: _this38.generate_time()
            }); // this.$session.set("BotResponse_Conversation", this.chat);


            _this38.update_scrollbar("upto_end", "sender");

            axios.post(api_calls.chatbot_response_cense(), {
              chat: _this38.to_send,
              token: _this38.bot_response_token_value,
              username: _this38.$session.get("UserInformation").email,
              source: "Web",
              license_key: _this38.$session.get("UserInformation").license_key,
              role: _this38.$session.get("UserInformation").role,
              refreshed_or_closed: _this38.refreshed_or_closed
            }).then(function (response) {
              // response.data = {
              //   responses: [
              //     {
              //       buttons: [
              //         { title: "Call Support", value: "/call_support" },
              //         { title: "Live Chat", value: "/live_chat" },
              //       ],
              //       intent: "confusion",
              //       text: "Sorry I am not getting your question",
              //     },
              //   ],
              // };
              _this38.response_handling(response, "display_success_toastr"); // swal({
              //   text: "Testing Completed Successfully! Please Proceed to the next step.",
              //   toast: true,
              //   showCancelButton: false,
              //   showConfirmButton: false,
              //   type: "success",
              //   timer: 5000,
              //   timerProgressBar: true,
              // })

            });
            _this38.to_send = "";
          }, 3200);
        }
      }).catch(function (e) {
        _this38.spinnerOn = false; // console.log(e);
        // swal({
        //   text: "Testing Finished.Some Error Occurred, Please Try Again",
        //   toast: true,
        //   showCancelButton: false,
        //   showConfirmButton: false,
        //   type: "error",
        //   timer: 2000,
        //   timerProgressBar: true,
        // })

        var msg = {
          conversation_only: true,
          time: _this38.generate_time(),
          ask_feedback: false,
          received: "Some error occurred while testing. Please try by refreshing the browser! If the issue persists, please contact system admin.",
          receiving: true
        };

        _this38.chat.push(msg);
      });
    }
  },
  shopify_check_customer_logged_in: function shopify_check_customer_logged_in() {
    var _axios$post15,
        _this39 = this;

    var customer_data = {
      is_customer_logged_in: false,
      customer_id: null
    };

    if (Boolean(this.shopify_customer_id)) {
      customer_data.is_customer_logged_in = true;
      customer_data.customer_id = this.shopify_customer_id;
    }

    var stringified_customer_payload = JSON.stringify({
      customer_data: customer_data
    });
    this.is_typing_indicator_on = true;
    axios.post(api_calls.chatbot_response_cense(), (_axios$post15 = {
      license_key: this.$session.get("UserInformation").license_key,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email,
      source: "Web",
      chat: "/shopify_retreive_customer_specific_offers".concat(stringified_customer_payload)
    }, _defineProperty(_axios$post15, "token", this.bot_response_token_value), _defineProperty(_axios$post15, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post15, "refreshed_or_closed", this.refreshed_or_closed), _axios$post15)).then(function (response) {
      _this39.response_handling(response, null);
    }).catch(function (e) {
      console.log(e);

      _this39.update_scrollbar("upto_end", "response");
    });
  },
  send_shopify_customer_id: function send_shopify_customer_id(index, is_login, metadata) {
    var _this40 = this;

    // debugger;
    // console.log("send_shopify_customer_clg");
    // is_login = false;
    if (is_login === true) {
      var _axios$post16;

      var queryString = $("#shopify_login_form").serializeArray();
      var form_payload = {};
      form_payload["shopify_is_only_email"] = this.retail_order_retreival_only_email_required;
      form_payload["text"] = this.chat[index].metadata.text;
      form_payload["entity"] = this.chat[index].metadata.entity;

      for (var i in queryString) {
        form_payload[queryString[i].name] = this.chat[index].customer_email_id;
      }

      form_payload = JSON.stringify(form_payload);
      axios.post(api_calls.chatbot_response_cense(), (_axios$post16 = {
        license_key: this.$session.get("UserInformation").license_key,
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web",
        chat: "/re_order_products_action".concat(form_payload)
      }, _defineProperty(_axios$post16, "token", this.bot_response_token_value), _defineProperty(_axios$post16, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post16, "refreshed_or_closed", this.refreshed_or_closed), _axios$post16)).then(function (response) {
        _this40.chat[index].received = "";
        _this40.chat[index].fetch_shopify_details = false;

        _this40.chat.splice(index, 1);

        _this40.response_handling(response);
      }).catch(function (err) {
        console.log("Error :>> ", err);
      });
    } else {// let form_payload = {
      //   email:'ashish.i@codearray.tech',
      //   password: "",
      //   shopify_is_only_email: false,
      //   text: this.chat[index].metadata.text,
      //   entity : this.chat[index].metadata.entity
      // };
      // form_payload = JSON.stringify(form_payload);
      // axios
      //   .post(api_calls.chatbot_response_cense(), {
      //     license_key: this.$session.get("UserInformation").license_key,
      //     token: this.bot_response_token_value,
      //     username: this.$session.get("UserInformation").email,
      //     source: "Web",
      //     chat: `/re_order_products_action${form_payload}`,
      //     token: this.bot_response_token_value,
      //     role: this.$session.get("UserInformation").role,
      //     refreshed_or_closed: this.refreshed_or_closed,
      //   })
      //   .then((response) => {
      //     console.log(response.data);
      //     console.log(this);
      //     this.response_handling(response)
      //   })
      //   .catch((err) => {
      //     console.log("Error :>> ", err);
      //   });
    }
  },
  open_messaging_framework_integration: function open_messaging_framework_integration(url) {
    var link = document.createElement("a");
    link.href = url; // link.setAttribute("download", file_name);

    link.setAttribute("target", "_blank");
    document.body.appendChild(link);
    link.click();
    link.remove();
  },
  support_subscription_data: function support_subscription_data() {
    var _axios$post17,
        _this41 = this;

    axios.post(api_calls.chatbot_response_cense(), (_axios$post17 = {
      license_key: this.$session.get("UserInformation").license_key,
      token: this.bot_response_token_value,
      username: this.$session.get("UserInformation").email
    }, _defineProperty(_axios$post17, "token", this.bot_response_token_value), _defineProperty(_axios$post17, "role", this.$session.get("UserInformation").role), _defineProperty(_axios$post17, "refreshed_or_closed", this.refreshed_or_closed), _defineProperty(_axios$post17, "chat", "/support_subscription_data"), _defineProperty(_axios$post17, "source", "Web"), _axios$post17)).then(function (response) {
      _this41.response_handling(response);
    });
  },
  check_no_products: function check_no_products() {
    var products_div = document.getElementById('products_list_div');
    var display_none_count = 0;

    for (var i = 0; i < products_div.children.length; i++) {
      if (products_div.children[i].style.display === "none") {
        display_none_count += 1;
      }
    }

    if (display_none_count === products_div.children.length) {
      var msg = {
        conversation_only: true,
        time: this.generate_time(),
        received: "Sorry, we could not find any products. Please try rephrasing to search a different product!",
        receiving: true
      };
      this.chat.push(msg);
    }
  },
  get_magento_store_window_customer_email: function get_magento_store_window_customer_email() {
    try {
      var curr = JSON.parse(this.user_data.magento_customer_data);

      if (Boolean(curr.id) == true && Boolean(curr.email) == true) {
        var customer = [curr.id, curr.email];
        return customer;
      }
    } catch (e) {}

    return null;
  },
  get_woocommerce_store_window_customer_email: function get_woocommerce_store_window_customer_email() {
    try {
      var curr = this.user_data.woo_current_user;

      if (curr.ID !== 0 && curr.allcaps.customer == true) {
        var customer = [curr.data.ID, curr.data.user_email];
        return customer;
      }
    } catch (e) {}

    return null;
  },
  get_shopify_store_window_customer_id: function get_shopify_store_window_customer_id() {
    try {
      var curr = window.ShopifyAnalytics.meta.page.customerId;

      if (curr !== undefined && curr !== null && curr !== "") {
        return curr;
      }
    } catch (e) {}

    try {
      var _curr = window.meta.page.customerId;

      if (_curr !== undefined && _curr !== null && _curr !== "") {
        return _curr;
      }
    } catch (e) {}

    try {
      var _curr2 = _st.cid;

      if (_curr2 !== undefined && _curr2 !== null && _curr2 !== "") {
        return _curr2;
      }
    } catch (e) {}

    return null;
  },
  no_orders_to_be_shown: function no_orders_to_be_shown(index) {
    this.chat[index].received = "It seems you have no orders right now!";
  },
  change_chat_text_to_login_redirect: function change_chat_text_to_login_redirect(index) {
    this.chat[index].received = '<p style="width:auto;margin-bottom:0;"> Please login on the store by clicking <a title="This feature is only available on the store website."class="bot-response-style" style="cursor: not-allowed;" href="javascript: void(0)"> here </a></p>';
  },
  return_document_cookies: function return_document_cookies(name) {
    // const value = `; ${document.cookie}`;
    // const parts = value.split(`; ${name}=`);
    // if (parts.length === 2) return parts.pop().split(';').shift();
    var cookie = {};
    document.cookie.split(';').forEach(function (el) {
      var _el$split = el.split('='),
          _el$split2 = _slicedToArray(_el$split, 2),
          k = _el$split2[0],
          v = _el$split2[1];

      cookie[k.trim()] = v;
    });
    return cookie[name];
  },
  available_qty: function available_qty(stock_qty, id) {
    if (this.addtoCartdata.length != 0) {
      for (var i in this.addtoCartdata) {
        if (this.addtoCartdata[i].id === id) {
          var res = stock_qty - this.addtoCartdata[i].order_qty;
          return res == 0 ? "reached" : res;
        }
      }

      return stock_qty;
    } else {
      return stock_qty;
    }
  }
}), _name$components$mixi);"},null]}