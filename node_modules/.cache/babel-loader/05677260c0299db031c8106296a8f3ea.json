{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Customer Support/SuperAdminTicketDashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Customer Support/SuperAdminTicketDashboard.vue","mtime":1645594423483},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IGFwaV9jYWxscyBmcm9tICJAL3BvcnRhbC9hcGlfY2FsbHMiOwppbXBvcnQgeyBzZXRUaW1lb3V0LCBzZXRJbnRlcnZhbCB9IGZyb20gInRpbWVycyI7CmltcG9ydCBTd2FsIGZyb20gInN3ZWV0YWxlcnQyIjsKaW1wb3J0IG1vbWVudCBmcm9tICJtb21lbnQiOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHBlbmNpbF9zdmc6ICcgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxNS41NDYiIGhlaWdodD0iMTUuNDYxIiB2aWV3Qm94PSIwIDAgMTUuNTQ2IDE1LjQ2MSI+PGRlZnM+PHN0eWxlPi5he2ZpbGw6IzllOWU5ZTt9PC9zdHlsZT48L2RlZnM+PGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTc0Ny44ODggLTM1Ni43NjkpIj48cGF0aCBjbGFzcz0iYSIgZD0iTTc1OS40MTYsMzU2Ljc2OWEyLjM1OCwyLjM1OCwwLDAsMSwxLjc3Ny42NjJjLjUzNC41MTMsMS4wNzIsMS4wMjUsMS41NjcsMS41NzVhMi4zLDIuMywwLDAsMS0uMDcxLDMuMzI1Yy0yLjczNiwyLjc2LTUuNDk0LDUuNS04LjIzOCw4LjI1MWExLjM4MSwxLjM4MSwwLDAsMS0uNzU4LjI4OGMtLjcxOS4xNzQtMS40MjkuMzc5LTIuMTQ0LjU3Mi0uOTMyLjI1MS0xLjg2Mi41LTIuNzk1Ljc1MS0uNi4xNTgtLjk4OS0uMjEzLS44MzItLjgwN3EuNjg5LTIuNTk1LDEuNDA2LTUuMTgyYTEuMTY0LDEuMTY0LDAsMCwxLC4yODktLjQ4N3E0LjA5MS00LjEwNyw4LjItOC4yQTIuMjY1LDIuMjY1LDAsMCwxLDc1OS40MTYsMzU2Ljc2OVptLTEuOTg5LDIuOTU2LTYuNTQsNi41MzgsMy4wMjUsMy4wMjQsNi41MzgtNi41MzdabTQuMDIzLDIuMTY1Yy4xMTgtLjEzNS4yMjUtLjI2OS4zNDMtLjM5MmExLjEzNCwxLjEzNCwwLDAsMCwwLTEuNzM0Yy0uNDYtLjQ2Ni0uOTI2LS45MjUtMS4zODgtMS4zOWExLjE2NiwxLjE2NiwwLDAsMC0uODYxLS4zNjhjLS41NzgsMC0uODgxLjQtMS4yMTQuNzZabS0xMi4wODQsOC44NjMsMy4yLS44NjMtMi4zMzctMi4zMzFaIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwKSIvPjxwYXRoIGNsYXNzPSJhIiBkPSJNODEzLjk0Miw0MjIuNmwtLjc4OS0uOCwzLjgyMS0zLjgxOS43ODQuOFoiIHRyYW5zZm9ybT0idHJhbnNsYXRlKC01OS42NDggLTU1Ljk0NykiLz48L2c+PC9zdmc+JywKICAgICAgZmlsdGVyX3N0YXR1czogJ0FsbFRpY2tldHMnLAogICAgICBzcGlubmVyT246IGZhbHNlLAogICAgICBwYWdlX25vOiAxLAogICAgICBwZXJfcGFnZTogMjAsCiAgICAgIHRvdGFsX3BhZ2VzOiBudWxsLAogICAgICBudW1iZXJfb2Zfcm93czogbnVsbCwKICAgICAgdGlja2V0c19saXN0OiBbXSwKICAgICAgc29ydF9zdGF0dXM6ICdBbGwnLAogICAgICBjb21wYW55X2xpc3Q6IFtdLAogICAgICBwYWdlX2FycmF5OiBbXSwKICAgICAgVXNlcl9jb21tZW50czogW10sCiAgICAgIENvbW1lbnRzX2xpc3Q6IFtdLAogICAgICBjb21tZW50X2l0ZW1fbGlzdDogW10sCiAgICAgIHRpY2tldF9udW1iZXI6ICIiLAogICAgICBjdXJyZW50X3NlbGVjdGVkX3RpY2tldF9udW1iZXI6ICIiLAogICAgICB0aWNrZXRfZGVzY3JpcHRpb246ICIiLAogICAgICBuZXdfdGlja2V0X2NvbW1lbnQ6ICIiLAogICAgICBjdXJyZW50X2ltYWdlX3VybDogIiIsCiAgICAgIC8vIGN1cnJlbnRfaW1hZ2VfbmFtZTogIiIsCiAgICAgIGN1cnJlbnRfaW1hZ2VfbmFtZV9pbl9jb21tZW50OiAiIiwKICAgICAgSW1hZ2VzX2luX2N1cnJlbnRfY29tbWVudDogIiIsCiAgICAgIG5ld19pbWFnZV9uYW1lOiAiIiwKICAgICAgbmV3X2ltYWdlX2ZpbGU6ICIiLAogICAgICBpbWFnZV9maWxlOiAiIiwKICAgICAgc2VuZF9zb2x1dGlvbl90ZXh0OiAiIiwKICAgICAgdGlja2V0X2lzc3VlX25hbWU6ICIiLAogICAgICB0aWNrZXRfc3RhdHVzOiAiIiwKICAgICAgdGlja2V0X3NvbHV0aW9uOiAiIiwKICAgICAgaXNfc3RhdHVzOiBudWxsLAogICAgICBjdXJyZW50X3N0YXR1czogIiIsCiAgICAgIGlzX3N0YXR1c19jbG9zZWQ6IGZhbHNlLAogICAgICBzZWFyY2hfa2V5OiAiIiwKICAgICAgaXNFZGl0VGlja2V0U3RhdHVzOiBmYWxzZSwKICAgICAgY3VycmVudF90aWNrZXRfc3RhdHVzOiAiIiwKICAgICAgY29tcGFueV90aWNrZXRzX2xpc3Q6IFtdLAogICAgICBzb3J0X2NvbXBhbnlfc3RhdHVzOiAnQWxsJywKICAgICAgaXNfY29sbGFwc2U6IGZhbHNlLAogICAgICBzZW5kX2J5X2NvbXBhbnk6IGZhbHNlLAogICAgICByZXFfY29tcF9pZDogIiIsCiAgICAgIHJlcV9jb21wX25hbWU6ICIiLAogICAgICB0aWNrZXRfY29tcGFueV9pZDogIiIsCiAgICAgIHRpY2tldF9jb21wYW55X25hbWU6ICIiLAogICAgICBpc1Zpc2libGVTZWFyY2hDbGVhcjogZmFsc2UKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgaXNfc2VuZF9idG5fZW5hYmxlOiBmdW5jdGlvbiBpc19zZW5kX2J0bl9lbmFibGUoKSB7CiAgICAgIGlmIChCb29sZWFuKHRoaXMuc2VuZF9zb2x1dGlvbl90ZXh0IHx8IHRoaXMubmV3X2ltYWdlX25hbWUgfHwgdGhpcy5uZXdfdGlja2V0X2NvbW1lbnQpKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9LAogICAgaXNfcmVvcGVuX2J0bl9lbmFibGU6IGZ1bmN0aW9uIGlzX3Jlb3Blbl9idG5fZW5hYmxlKCkgewogICAgICBpZiAoQm9vbGVhbih0aGlzLm5ld190aWNrZXRfY29tbWVudCB8fCB0aGlzLm5ld19pbWFnZV9uYW1lKSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIGlmICghdGhpcy4kc2Vzc2lvbi5oYXMoIkNvbXBhbnlJZCIpICYmIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlID09ICJTdXBlckFkbWluIikgewogICAgICB0b2FzdHIud2FybmluZygiUGxlYXNlIHNlbGVjdCBhIGNvbXBhbnkgbmFtZSBmcm9tIHRoZSBkcm9wZG93biIpOwogICAgfSBlbHNlIGlmICh0aGlzLnVzZXJfcm9sZSA9PSAiU3VwZXJBZG1pbiIpIHsKICAgICAgaWYgKHRoaXMuJHNlc3Npb24uaGFzKCJDb21wYW55SWQiKSkgewogICAgICAgIHRoaXMuY29tcGFueWlkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlJZCIpOwogICAgICAgIHRoaXMuY29tcGFueW5hbWUgPSB0aGlzLiRzZXNzaW9uLmdldCgiQ29tcGFueU5hbWUiKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICAgIHRoaXMuY29tcGFueW5hbWUgPSB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgIH0KCiAgICB0aGlzLmdldF90aWNrZXRfZGV0YWlscygpOwogIH0sCiAgd2F0Y2g6IHsKICAgIGZpbHRlcl9zdGF0dXM6IGZ1bmN0aW9uIGZpbHRlcl9zdGF0dXMoKSB7CiAgICAgIGlmICh0aGlzLmZpbHRlcl9zdGF0dXMgPT09ICdBbGxUaWNrZXRzJykgewogICAgICAgIHRoaXMuZ2V0X3RpY2tldF9kZXRhaWxzKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5nZXRfY29tcGFueV9saXN0KCk7CiAgICAgIH0KICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGNoZWNrX2NvbGxhcHNlOiBmdW5jdGlvbiBjaGVja19jb2xsYXBzZShpbmRleCkgewogICAgICBpZiAoJCgnI2NvbGxhcHNlRXhhbXBsZV9fJyArIGluZGV4KS5pcygnLmNvbGxhcHNlLnNob3cnKSA9PT0gZmFsc2UpIHsKICAgICAgICB0aGlzLmlzX2NvbGxhcHNlID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmlzX2NvbGxhcHNlID0gZmFsc2U7CiAgICAgICAgdGhpcy5zb3J0X2NvbXBhbnlfc3RhdHVzID0gJ0FsbCc7CiAgICAgIH0KICAgIH0sCiAgICB0cmltX3RpY2tldF9pc3N1ZTogZnVuY3Rpb24gdHJpbV90aWNrZXRfaXNzdWUodmFsMSkgewogICAgICBpZiAodmFsMS5sZW5ndGggPiA1MCkgewogICAgICAgIHZhciBzdHIxID0gdmFsMS5zdWJzdHJpbmcoMCwgNTApICsgIi4uLi4iOwogICAgICAgIHJldHVybiBzdHIxOwogICAgICB9CgogICAgICByZXR1cm4gdmFsMTsKICAgIH0sCiAgICB0cmltX3RpY2tldF9kZXNjcmlwdGlvbjogZnVuY3Rpb24gdHJpbV90aWNrZXRfZGVzY3JpcHRpb24oZGVzX25hbWUpIHsKICAgICAgaWYgKGRlc19uYW1lLmxlbmd0aCA+IDYwKSB7CiAgICAgICAgdmFyIHRpY2tldF9kZXNfbmFtZSA9IGRlc19uYW1lLnN1YnN0cmluZygwLCA1MCkgKyAiLi4uIjsKICAgICAgICByZXR1cm4gdGlja2V0X2Rlc19uYW1lOwogICAgICB9CgogICAgICByZXR1cm4gZGVzX25hbWU7CiAgICB9LAogICAgZGF0ZV9mb3JtYXRpbmc6IGZ1bmN0aW9uIGRhdGVfZm9ybWF0aW5nKHN1Yl9kYXRlKSB7CiAgICAgIHJldHVybiBtb21lbnQoc3ViX2RhdGUpLmZvcm1hdCgiRCBNTU0gWVlZWSBISDptbSBhIik7CiAgICB9LAogICAgZm9ybWF0X2RhdGU6IGZ1bmN0aW9uIGZvcm1hdF9kYXRlKGRhdGUpIHsKICAgICAgaWYgKGRhdGUgPT0gbnVsbCkgewogICAgICAgIHJldHVybiAiTi9BIjsKICAgICAgfQoKICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQoIkRvIE1NTSBZWVlZIik7CiAgICB9LAogICAgZWRpdF90aWNrZXRfc3RhdHVzOiBmdW5jdGlvbiBlZGl0X3RpY2tldF9zdGF0dXMoKSB7CiAgICAgIGlmICghdGhpcy5pc0VkaXRUaWNrZXRTdGF0dXMpIHsKICAgICAgICB0aGlzLmlzRWRpdFRpY2tldFN0YXR1cyA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5pc0VkaXRUaWNrZXRTdGF0dXMgPSBmYWxzZTsgLy8gdGhpcy5sb2FkX2ludGVudCgpOwogICAgICB9CgogICAgICByZXR1cm47CiAgICB9LAogICAgc2F2ZV90aWNrZXRfc3RhdHVzOiBmdW5jdGlvbiBzYXZlX3RpY2tldF9zdGF0dXMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CgogICAgICBpZiAodGhpcy5jdXJyZW50X3RpY2tldF9zdGF0dXMgPT09ICIiKSB7CiAgICAgICAgdGhpcy5jdXJyZW50X3RpY2tldF9zdGF0dXMgPSB0aGlzLmN1cnJlbnRfc3RhdHVzOwogICAgICB9CgogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5zdXBwb3J0X3RpY2tldCgpLCB7CiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgIGlzX2VkaXQ6IHRydWUsCiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICB0aWNrZXRfbnVtYmVyOiB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdGlja2V0X251bWJlciwKICAgICAgICAgIHVwZGF0ZV9zdGF0dXM6IHRoaXMuY3VycmVudF90aWNrZXRfc3RhdHVzLAogICAgICAgICAgc29sdXRpb246IG51bGwsCiAgICAgICAgICB0aWNrZXRfY29tcGFueV9pZDogdGhpcy50aWNrZXRfY29tcGFueV9pZCwKICAgICAgICAgIHRpY2tldF9jb21wYW55X25hbWU6IHRoaXMudGlja2V0X2NvbXBhbnlfbmFtZQogICAgICAgIH0gLy8gcGFnZW5vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgLy8gcGVycGFnZTogdGhpcy5wZXJfcGFnZSwKCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZSA9PT0gIlRpY2tldCBVcGRhdGVkIikgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgdGV4dDogIlRpY2tldCBzdGF0dXMgdXBkYXRlZCBTdWNjZXNzZnVsbHkuIiwKICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgIH0pOwoKICAgICAgICAgIF90aGlzLmVtcHR5X3ZhcmlhYmxlKCk7CgogICAgICAgICAgJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7CgogICAgICAgICAgaWYgKF90aGlzLnNlbmRfYnlfY29tcGFueSA9PT0gdHJ1ZSkgewogICAgICAgICAgICBfdGhpcy5nZXRfY29tcGFueV90aWNrZXRzKF90aGlzLnJlcV9jb21wX25hbWUsIF90aGlzLnJlcV9jb21wX2lkKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzLmdldF90aWNrZXRfZGV0YWlscygpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlID09ICJEQiBPUEVSQVRJT04gVU5TVUNDRVNTRlVMIikgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHRleHQ6ICJTb21lIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLiIsCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICB9KTsKICAgICAgICAgICQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwoKICAgICAgICAgIGlmIChfdGhpcy5zZW5kX2J5X2NvbXBhbnkgPT09IHRydWUpIHsKICAgICAgICAgICAgX3RoaXMuZ2V0X2NvbXBhbnlfdGlja2V0cyhfdGhpcy5yZXFfY29tcF9uYW1lLCBfdGhpcy5yZXFfY29tcF9pZCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpcy5nZXRfdGlja2V0X2RldGFpbHMoKTsKICAgICAgICAgIH0KCiAgICAgICAgICBfdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT0gIkVycm9yIikgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgIHRleHQ6ICJTb21lIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICB9KTsKCiAgICAgICAgICBpZiAoX3RoaXMuc2VuZF9ieV9jb21wYW55ID09PSB0cnVlKSB7CiAgICAgICAgICAgIF90aGlzLmdldF9jb21wYW55X3RpY2tldHMoX3RoaXMucmVxX2NvbXBfbmFtZSwgX3RoaXMucmVxX2NvbXBfaWQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXMuZ2V0X3RpY2tldF9kZXRhaWxzKCk7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXMuZW1wdHlfdmFyaWFibGUoKTsKCiAgICAgICAgICAkKCIjdGlja2V0TW9kZWxEZXRhaWxzIikubW9kYWwoImhpZGUiKTsgLy8kKCIjdGlja2V0TW9kZWxEZXRhaWxzIikubW9kYWwoImhpZGUiKTsKICAgICAgICAgIC8vdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgIH0pOwoKICAgICAgICAgIF90aGlzLmVtcHR5X3ZhcmlhYmxlKCk7CgogICAgICAgICAgJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7CgogICAgICAgICAgaWYgKF90aGlzLnNlbmRfYnlfY29tcGFueSA9PT0gdHJ1ZSkgewogICAgICAgICAgICBfdGhpcy5nZXRfY29tcGFueV90aWNrZXRzKF90aGlzLnJlcV9jb21wX25hbWUsIF90aGlzLnJlcV9jb21wX2lkKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzLmdldF90aWNrZXRfZGV0YWlscygpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICBfdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIG9wZW5fY29tbWVudF9tb2RlbDogZnVuY3Rpb24gb3Blbl9jb21tZW50X21vZGVsKGluZGV4LCBrZXkpIHsKICAgICAgaWYgKGtleSA9PT0gbnVsbCkgewogICAgICAgIHRoaXMuQ29tbWVudHNfbGlzdCA9IFtdOwogICAgICAgIHRoaXMuQ29tbWVudHNfbGlzdCA9IEJvb2xlYW4odGhpcy50aWNrZXRzX2xpc3RbaW5kZXhdLkNvbW1lbnRzKSA/IHRoaXMudGlja2V0c19saXN0W2luZGV4XS5Db21tZW50cyA6IFtdOwogICAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF90aWNrZXRfbnVtYmVyID0gdGhpcy50aWNrZXRzX2xpc3RbaW5kZXhdLlRpY2tldE51bWJlcjsKICAgICAgICB0aGlzLnRpY2tldF9jb21wYW55X2lkID0gdGhpcy50aWNrZXRzX2xpc3RbaW5kZXhdLkNvbXBhbnlJZDsKICAgICAgICB0aGlzLnRpY2tldF9jb21wYW55X25hbWUgPSB0aGlzLnRpY2tldHNfbGlzdFtpbmRleF0uQ29tcGFueU5hbWU7CiAgICAgICAgdGhpcy50aWNrZXRfZGVzY3JpcHRpb24gPSB0aGlzLnRpY2tldHNfbGlzdFtpbmRleF0uRGVzY3JpcHRpb247CiAgICAgICAgdGhpcy50aWNrZXRfaXNzdWVfbmFtZSA9IHRoaXMudGlja2V0c19saXN0W2luZGV4XS5UaWNrZXRJc3N1ZTsKICAgICAgICB0aGlzLnRpY2tldF9zdGF0dXMgPSB0aGlzLnRpY2tldHNfbGlzdFtpbmRleF0uQ3VycmVudFN0YXR1czsKCiAgICAgICAgaWYgKHRoaXMudGlja2V0c19saXN0W2luZGV4XS5Tb2x1dGlvbiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aGlzLnRpY2tldF9zb2x1dGlvbiA9IHRoaXMudGlja2V0c19saXN0W2luZGV4XS5Tb2x1dGlvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy50aWNrZXRfc29sdXRpb24gPSAiIjsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLnRpY2tldF9zdGF0dXMgPT09ICJDbG9zZWQiKSB7CiAgICAgICAgICB0aGlzLmlzX3N0YXR1c19jbG9zZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmlzX3N0YXR1c19jbG9zZWQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHRoaXMuY3VycmVudF9zdGF0dXMgPSB0aGlzLnRpY2tldHNfbGlzdFtpbmRleF0uQ3VycmVudFN0YXR1czsKICAgICAgICB0aGlzLnNlbmRfYnlfY29tcGFueSA9IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0NvbXBhbnlfdGlja2V0cycpIHsKICAgICAgICB0aGlzLkNvbW1lbnRzX2xpc3QgPSBbXTsKICAgICAgICB0aGlzLkNvbW1lbnRzX2xpc3QgPSBCb29sZWFuKHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3RbaW5kZXhdLkNvbW1lbnRzKSA/IHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3RbaW5kZXhdLkNvbW1lbnRzIDogW107CiAgICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX3RpY2tldF9udW1iZXIgPSB0aGlzLmNvbXBhbnlfdGlja2V0c19saXN0W2luZGV4XS5UaWNrZXROdW1iZXI7CiAgICAgICAgdGhpcy50aWNrZXRfZGVzY3JpcHRpb24gPSB0aGlzLmNvbXBhbnlfdGlja2V0c19saXN0W2luZGV4XS5EZXNjcmlwdGlvbjsKICAgICAgICB0aGlzLnRpY2tldF9pc3N1ZV9uYW1lID0gdGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFtpbmRleF0uVGlja2V0SXNzdWU7CiAgICAgICAgdGhpcy50aWNrZXRfc3RhdHVzID0gdGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFtpbmRleF0uQ3VycmVudFN0YXR1czsKICAgICAgICB0aGlzLnJlcV9jb21wX2lkID0gdGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFtpbmRleF0uQ29tcGFueUlkOwogICAgICAgIHRoaXMucmVxX2NvbXBfbmFtZSA9IHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3RbaW5kZXhdLkNvbXBhbnlOYW1lOwoKICAgICAgICBpZiAodGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFtpbmRleF0uU29sdXRpb24gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgdGhpcy50aWNrZXRfc29sdXRpb24gPSB0aGlzLmNvbXBhbnlfdGlja2V0c19saXN0W2luZGV4XS5Tb2x1dGlvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy50aWNrZXRfc29sdXRpb24gPSAiIjsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLnRpY2tldF9zdGF0dXMgPT09ICJDbG9zZWQiKSB7CiAgICAgICAgICB0aGlzLmlzX3N0YXR1c19jbG9zZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmlzX3N0YXR1c19jbG9zZWQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHRoaXMuY3VycmVudF9zdGF0dXMgPSB0aGlzLmNvbXBhbnlfdGlja2V0c19saXN0W2luZGV4XS5DdXJyZW50U3RhdHVzOwogICAgICAgIHRoaXMuc2VuZF9ieV9jb21wYW55ID0gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIGdldF90aWNrZXRfZGV0YWlsczogZnVuY3Rpb24gZ2V0X3RpY2tldF9kZXRhaWxzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuc3VwcG9ydF90aWNrZXQoKSwgewogICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGZpbHRlcl9ieTogdGhpcy5zb3J0X3N0YXR1cywKICAgICAgICBpc19nZXQ6IHRydWUsCiAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczIuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICB0b2FzdHIuZXJyb3IoIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIik7CiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLlRpY2tldHMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgX3RoaXMyLm51bWJlcl9vZl9yb3dzID0gcmVzcG9uc2UuZGF0YS5Db3VudDsKICAgICAgICAgIF90aGlzMi50b3RhbF9wYWdlcyA9IE1hdGguY2VpbChfdGhpczIubnVtYmVyX29mX3Jvd3MgLyBfdGhpczIucGVyX3BhZ2UpOwogICAgICAgICAgX3RoaXMyLnRpY2tldHNfbGlzdCA9IHJlc3BvbnNlLmRhdGEuVGlja2V0czsKCiAgICAgICAgICBfdGhpczIuc2V0cGFnaW5hdGlvbihfdGhpczIucGFnZV9ubyk7CiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT09ICJubyBleGlzdGluZyB0aWNrZXQgZm91bmQiKSB7CiAgICAgICAgICBfdGhpczIudGlja2V0c19saXN0ID0gW107CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIC8vIGNvbnNvbGUubG9nKGUpOwogICAgICAgIF90aGlzMi5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICBfdGhpczIuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIFN3YWwoewogICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICB0ZXh0OiAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBzZW5kX3NvbHV0aW9uOiBmdW5jdGlvbiBzZW5kX3NvbHV0aW9uKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmICh0aGlzLnNlbmRfc29sdXRpb25fdGV4dCAhPSAiIiAmJiB0aGlzLmN1cnJlbnRfdGlja2V0X3N0YXR1cyA9PT0gJ0Nsb3NlZCcpIHsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuc3VwcG9ydF90aWNrZXQoKSwgewogICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICBpc19lZGl0OiB0cnVlLAogICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICAgIHRpY2tldF9udW1iZXI6IHRoaXMuY3VycmVudF9zZWxlY3RlZF90aWNrZXRfbnVtYmVyLAogICAgICAgICAgICBzb2x1dGlvbjogdGhpcy5zZW5kX3NvbHV0aW9uX3RleHQsCiAgICAgICAgICAgIHVwZGF0ZV9zdGF0dXM6IHRoaXMuY3VycmVudF90aWNrZXRfc3RhdHVzLAogICAgICAgICAgICB0aWNrZXRfY29tcGFueV9pZDogdGhpcy50aWNrZXRfY29tcGFueV9pZCwKICAgICAgICAgICAgdGlja2V0X2NvbXBhbnlfbmFtZTogdGhpcy50aWNrZXRfY29tcGFueV9uYW1lCiAgICAgICAgICB9IC8vIHBhZ2VubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgLy8gcGVycGFnZTogdGhpcy5wZXJfcGFnZSwKCiAgICAgICAgfSwgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczMuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZSA9PT0gIlRpY2tldCBVcGRhdGVkIikgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgdGV4dDogIlRpY2tldCBzdGF0dXMgdXBkYXRlZCBTdWNjZXNzZnVsbHkuIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICBpZiAoX3RoaXMzLnNlbmRfYnlfY29tcGFueSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgX3RoaXMzLmdldF9jb21wYW55X3RpY2tldHMoX3RoaXMzLnJlcV9jb21wX25hbWUsIF90aGlzMy5yZXFfY29tcF9pZCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIF90aGlzMy5nZXRfdGlja2V0X2RldGFpbHMoKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwoKICAgICAgICAgICAgICBfdGhpczMuZW1wdHlfdmFyaWFibGUoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIkR1cGxpY2F0ZSBpbWFnZSIpIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogIkltYWdlIGFscmVhZHkgZm91bmQuIFBsZWFzZSB1cGxvYWQgYW5vdGhlciBpbWFnZSBvciByZW5hbWUgaXQuIiwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT0gIkRCIE9QRVJBVElPTiBVTlNVQ0NFU1NGVUwiKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRleHQ6ICJTb21lIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLiIsCiAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICB0aW1lcjogMzAwMAogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIF90aGlzMy5lbXB0eV92YXJpYWJsZSgpOwoKICAgICAgICAgICAgJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09ICJFcnJvciIpIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICB0ZXh0OiAiU29tZSBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgIH0pOyAvLyQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAvL3RoaXMuZW1wdHlfdmFyaWFibGUoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgX3RoaXMzLnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICBfdGhpczMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkKCIjdGlja2V0TW9kZWxEZXRhaWxzIikubW9kYWwoImhpZGUiKTsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICB0ZXh0OiAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2Uge30KICAgIH0sCiAgICBvcGVuX2ltYWdlX21vZGVsOiBmdW5jdGlvbiBvcGVuX2ltYWdlX21vZGVsKGluZGV4KSB7CiAgICAgIGlmICh0aGlzLkNvbW1lbnRzX2xpc3RbaW5kZXhdLmltYWdlX3VybCAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5JbWFnZXNfaW5fY3VycmVudF9jb21tZW50ID0gdGhpcy5Db21tZW50c19saXN0W2luZGV4XS5pbWFnZV91cmw7CiAgICAgICAgdGhpcy5jdXJyZW50X2ltYWdlX25hbWVfaW5fY29tbWVudCA9IHRoaXMuQ29tbWVudHNfbGlzdFtpbmRleF0uaW1hZ2VfbmFtZTsKICAgICAgfQogICAgfSwKICAgIFVwbG9hZF9pbWFnZV9maWxlOiBmdW5jdGlvbiBVcGxvYWRfaW1hZ2VfZmlsZShldmVudCkgewogICAgICB2YXIgZmlsZXMgPSBldmVudC50YXJnZXQuZmlsZXNbMF07CgogICAgICBpZiAoZmlsZXMuc2l6ZSA+IDIwOTcxNTIpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6ICJVcGxvYWQgaW1hZ2Ugd2l0aCBzaXplIGxlc3MgdGhhbiAyTUIiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAxMDAwMAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5uZXdfaW1hZ2VfbmFtZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXS5uYW1lOwogICAgICB0aGlzLm5ld19pbWFnZV9maWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdLnR5cGU7CgogICAgICBpZiAodGhpcy5uZXdfaW1hZ2VfbmFtZSAhPSB0aGlzLmN1cnJlbnRfaW1hZ2VfbmFtZV9pbl9jb21tZW50KSB7fQoKICAgICAgaWYgKHRoaXMubmV3X2ltYWdlX2ZpbGUgPT0gImltYWdlL3BuZyIpIHsKICAgICAgICB0aGlzLmNyZWF0ZUltYWdlKGZpbGVzLCB0aGlzLm5ld19pbWFnZV9maWxlKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLm5ld19pbWFnZV9maWxlID09ICJpbWFnZS9qcGVnIikgewogICAgICAgIHRoaXMuY3JlYXRlSW1hZ2UoZmlsZXMsIHRoaXMubmV3X2ltYWdlX2ZpbGUpOwogICAgICB9IGVsc2UgaWYgKHRoaXMubmV3X2ltYWdlX2ZpbGUgPT0gImltYWdlL2pwZyIpIHsKICAgICAgICB0aGlzLmNyZWF0ZUltYWdlKGZpbGVzLCB0aGlzLm5ld19pbWFnZV9maWxlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICB0ZXh0OiAiUGxlYXNlIFNlbGVjdCBhbiBJbWFnZSBvZiB0eXBlIFBORyBvciBKUEVHIiwKICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBjcmVhdGVJbWFnZTogZnVuY3Rpb24gY3JlYXRlSW1hZ2UoZmlsZSwgdHlwZSkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXM0LmltYWdlX2ZpbGUgPSBlLnRhcmdldC5yZXN1bHQuc3BsaXQoImJhc2U2NCwiKVsxXTsKICAgICAgfTsKCiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpOwogICAgfSwKICAgIFNlbmRfdGlja2V0X2NvbW1lbnRzOiBmdW5jdGlvbiBTZW5kX3RpY2tldF9jb21tZW50cygpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICBpZiAodGhpcy5uZXdfdGlja2V0X2NvbW1lbnQgIT0gIiIgfHwgdGhpcy5uZXdfaW1hZ2VfbmFtZSAhPSAiIiAmJiB0aGlzLm5ld19pbWFnZV9maWxlICE9ICIiKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiUGxlYXNlIHdhaXQgd2hpbGUgd2UgYXJlIGFkZGluZyB5b3VyIHRpY2tldCBjb21tZW50cy4uLiIsCiAgICAgICAgICB0eXBlOiAiaW5mbyIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZQogICAgICAgIH0pOwogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5zdXBwb3J0X3RpY2tldCgpLCB7CiAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgIGlzX2VkaXQ6IHRydWUsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgcmVzcG9uc2U6IHsKICAgICAgICAgICAgdGlja2V0X251bWJlcjogdGhpcy5jdXJyZW50X3NlbGVjdGVkX3RpY2tldF9udW1iZXIsCiAgICAgICAgICAgIHVwZGF0ZV9zdGF0dXM6IHRoaXMuY3VycmVudF90aWNrZXRfc3RhdHVzID8gdGhpcy5jdXJyZW50X3RpY2tldF9zdGF0dXMgOiBudWxsLAogICAgICAgICAgICBuZXdfY29tbWVudDogdGhpcy5uZXdfdGlja2V0X2NvbW1lbnQgPyB0aGlzLm5ld190aWNrZXRfY29tbWVudCA6IG51bGwsCiAgICAgICAgICAgIHRpY2tldF9pbWdfbmFtZTogdGhpcy5uZXdfaW1hZ2VfbmFtZSA/IHRoaXMubmV3X2ltYWdlX25hbWUgOiBudWxsLAogICAgICAgICAgICB0aWNrZXRfaW1nX2ZpbGU6IHRoaXMuaW1hZ2VfZmlsZSA/IHRoaXMuaW1hZ2VfZmlsZSA6IG51bGwsCiAgICAgICAgICAgIHRpY2tldF9jb21wYW55X2lkOiB0aGlzLnRpY2tldF9jb21wYW55X2lkLAogICAgICAgICAgICB0aWNrZXRfY29tcGFueV9uYW1lOiB0aGlzLnRpY2tldF9jb21wYW55X25hbWUKICAgICAgICAgIH0gLy8gcGFnZW5vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgICAvLyBwZXJwYWdlOiB0aGlzLnBlcl9wYWdlLAoKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzNS5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlID09PSAiVGlja2V0IFVwZGF0ZWQiKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICB0ZXh0OiAiWW91ciBDb21tZW50cyBoYXMgYmVlbiBhZGRlZCBTdWNjZXNzZnVsbHkuIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICBfdGhpczUuZW1wdHlfdmFyaWFibGUoKTsKCiAgICAgICAgICAgICAgJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7IC8vICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpOwogICAgICAgICAgICAgIC8vICQoJy5tb2RhbC1iYWNrZHJvcCcpLnJlbW92ZSgpOwoKICAgICAgICAgICAgICBpZiAoX3RoaXM1LnNlbmRfYnlfY29tcGFueSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgX3RoaXM1LmdldF9jb21wYW55X3RpY2tldHMoX3RoaXM1LnJlcV9jb21wX25hbWUsIF90aGlzNS5yZXFfY29tcF9pZCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIF90aGlzNS5nZXRfdGlja2V0X2RldGFpbHMoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhID09ICJEdXBsaWNhdGUgaW1hZ2UiKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRleHQ6ICJJbWFnZSBhbHJlYWR5IGZvdW5kLiBQbGVhc2UgdXBsb2FkIGFub3RoZXIgaW1hZ2Ugb3IgcmVuYW1lIGl0LiIsCiAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICB0aW1lcjogMzAwMAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT0gIkVycm9yIikgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRleHQ6ICJTb21lIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgfSk7IC8vJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICAgIC8vdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICB0ZXh0OiAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBfdGhpczUuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNS4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBlbXB0eV92YXJpYWJsZTogZnVuY3Rpb24gZW1wdHlfdmFyaWFibGUoKSB7CiAgICAgIHRoaXMuQ29tbWVudHNfbGlzdCA9IFsiIl07CiAgICAgIHRoaXMuY29tbWVudF9pdGVtX2xpc3QgPSBbIiJdOwogICAgICB0aGlzLm5ld190aWNrZXRfY29tbWVudCA9ICIiOwogICAgICB0aGlzLnNlbmRfc29sdXRpb25fdGV4dCA9ICIiOwogICAgICB0aGlzLm5ld19pbWFnZV9uYW1lID0gIiI7CiAgICAgIHRoaXMubmV3X2ltYWdlX2ZpbGUgPSAiIjsKICAgICAgdGhpcy5maWxlX2NvbnRlbnQyID0gIiI7CiAgICAgIHRoaXMuaXNFZGl0VGlja2V0U3RhdHVzID0gZmFsc2U7CiAgICAgIHRoaXMuY3VycmVudF90aWNrZXRfc3RhdHVzID0gIiI7CiAgICAgIHRoaXMudGlja2V0X2NvbXBhbnlfaWQgPSAnJzsKICAgICAgdGhpcy50aWNrZXRfY29tcGFueV9uYW1lID0gJyc7CiAgICB9LAogICAgZ2V0X2NvbXBhbnlfbGlzdDogZnVuY3Rpb24gZ2V0X2NvbXBhbnlfbGlzdCgpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnN1cHBvcnRfdGlja2V0KCksIHsKICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBzb3J0X2J5X2NvbXBhbnk6IHRydWUsCiAgICAgICAgaXNfZ2V0OiB0cnVlLAogICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgIHBhZ2Vfbm86IHRoaXMucGFnZV9ubwogICAgICB9LCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXM2LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSA9PSAiSW50ZXJuYWwgU2VydmVyIEVycm9yIikgewogICAgICAgICAgdG9hc3RyLmVycm9yKCJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczYubnVtYmVyX29mX3Jvd3MgPSByZXNwb25zZS5kYXRhLkNvdW50OwogICAgICAgICAgX3RoaXM2LnRvdGFsX3BhZ2VzID0gTWF0aC5jZWlsKF90aGlzNi5udW1iZXJfb2Zfcm93cyAvIF90aGlzNi5wZXJfcGFnZSk7CiAgICAgICAgICBfdGhpczYuY29tcGFueV9saXN0ID0gcmVzcG9uc2UuZGF0YS5SZXNwb25zZUxpc3Q7CgogICAgICAgICAgX3RoaXM2LnNldHBhZ2luYXRpb24oX3RoaXM2LnBhZ2Vfbm8pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAvLyBjb25zb2xlLmxvZyhlKTsKICAgICAgICBfdGhpczYuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXM2LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZ2V0X2NvbXBhbnlfdGlja2V0czogZnVuY3Rpb24gZ2V0X2NvbXBhbnlfdGlja2V0cyhrZXkxLCBrZXkyKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5zdXBwb3J0X3RpY2tldCgpLCB7CiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgZmlsdGVyX2J5OiB0aGlzLnNvcnRfY29tcGFueV9zdGF0dXMsCiAgICAgICAgcmVxX2NvbXBhbnlfbmFtZToga2V5MSwKICAgICAgICByZXFfY29tcGFueV9pZDoga2V5MiwKICAgICAgICBpc19nZXQ6IHRydWUsCiAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczcuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICB0b2FzdHIuZXJyb3IoIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIik7CiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLlRpY2tldHMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgX3RoaXM3LnJlcV9jb21wX2lkID0gIiI7CiAgICAgICAgICBfdGhpczcucmVxX2NvbXBfbmFtZSA9ICIiOwogICAgICAgICAgX3RoaXM3Lm51bWJlcl9vZl9yb3dzID0gcmVzcG9uc2UuZGF0YS5Db3VudDsKICAgICAgICAgIF90aGlzNy50b3RhbF9wYWdlcyA9IE1hdGguY2VpbChfdGhpczcubnVtYmVyX29mX3Jvd3MgLyBfdGhpczcucGVyX3BhZ2UpOwogICAgICAgICAgX3RoaXM3LmNvbXBhbnlfdGlja2V0c19saXN0ID0gcmVzcG9uc2UuZGF0YS5UaWNrZXRzOwoKICAgICAgICAgIF90aGlzNy5zZXRwYWdpbmF0aW9uKF90aGlzNy5wYWdlX25vKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZSA9PT0gIm5vIGV4aXN0aW5nIHRpY2tldCBmb3VuZCIpIHsKICAgICAgICAgIF90aGlzNy5jb21wYW55X3RpY2tldHNfbGlzdCA9IFtdOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAvLyBjb25zb2xlLmxvZyhlKTsKICAgICAgICBfdGhpczcuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXM3LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgcGFnZV9yZXF1aXJlOiBmdW5jdGlvbiBwYWdlX3JlcXVpcmUocGFnZSkgewogICAgICBpZiAocGFnZSA9PSAwIHx8IHBhZ2UgPT0gdGhpcy50b3RhbF9wYWdlcyArIDEpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChwYWdlID09ICIuLi5zIikgewogICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCgxICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgIH0gZWxzZSBpZiAocGFnZSA9PSAiLi4ubCIpIHsKICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgodGhpcy50b3RhbF9wYWdlcyArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5wYWdlX25vID0gcGFnZTsKICAgICAgICB9CgogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKCiAgICAgICAgaWYgKHRoaXMuZmlsdGVyX3N0YXR1cyA9PT0gJ0FsbFRpY2tldHMnKSB7CiAgICAgICAgICB0aGlzLmdldF90aWNrZXRfZGV0YWlscygpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmdldF9jb21wYW55X2xpc3QoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzZXRwYWdpbmF0aW9uOiBmdW5jdGlvbiBzZXRwYWdpbmF0aW9uKHBhZ2Vfbm8pIHsKICAgICAgdGhpcy5wYWdlX2FycmF5ID0gW107CgogICAgICBpZiAodGhpcy50b3RhbF9wYWdlcyA8PSA3KSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvdGFsX3BhZ2VzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSAxKSB7CiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IDQ7IF9pKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKF9pICsgMSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPT0gdGhpcy50b3RhbF9wYWdlcykgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICAgIGZvciAodmFyIF9pMiA9IHRoaXMudG90YWxfcGFnZXMgLSA0OyBfaTIgPCB0aGlzLnRvdGFsX3BhZ2VzOyBfaTIrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2kyICsgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPD0gNCkgewogICAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IHBhZ2Vfbm8gKyAzOyBfaTMrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2kzICsgMSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPj0gdGhpcy50b3RhbF9wYWdlcyAtIDQpIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwoKICAgICAgICBmb3IgKHZhciBfaTQgPSBwYWdlX25vIC0gNDsgX2k0IDwgdGhpcy50b3RhbF9wYWdlczsgX2k0KyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKF9pNCArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwoKICAgICAgICBmb3IgKHZhciBfaTUgPSBwYWdlX25vIC0gMzsgX2k1IDw9IHBhZ2Vfbm8gKyAzOyBfaTUrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2k1KTsKICAgICAgICB9CgogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0KICAgIH0KICB9Cn07"},null]}