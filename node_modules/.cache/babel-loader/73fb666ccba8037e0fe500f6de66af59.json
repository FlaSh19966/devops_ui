{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/End User Response/BotUserChatHistory.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/End User Response/BotUserChatHistory.vue","mtime":1645594423487},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgYXBpX2NhbGxzIGZyb20gIkAvcG9ydGFsL2FwaV9jYWxscyI7CmltcG9ydCBNdWx0aXNlbGVjdCBmcm9tICJ2dWUtbXVsdGlzZWxlY3QiOwppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudCI7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBNdWx0aXNlbGVjdDogTXVsdGlzZWxlY3QKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBudW1iZXJfb2Zfcm93czogIiIsCiAgICAgIHRvdGFsX3BhZ2VzOiAwLAogICAgICBwYWdlX25vOiAxLAogICAgICBwZXJfcGFnZTogMTUsCiAgICAgIHVzZXJfbGlzdDogW10sCiAgICAgIHVzZXJfcmVwbHk6IFtdLAogICAgICBib3RfcmVwbHk6IFtdLAogICAgICBjaGF0RGV0YWlsczogW10sCiAgICAgIGFjdGlvbl9zdGF0czogW10sCiAgICAgIHVzZXJfYWN0aW9uX3N0YXRzOiBbXSwKICAgICAgY3VycmVudF91c2VyOiAiIiwKICAgICAgdGltZXN0YW1wOiAiIiwKICAgICAgc2VuZGVyX2lkOiBbXSwKICAgICAgc2VsZWN0ZWQ6ICJnZW5lcmFsX2NoYXRfaGlzdG9yeSIsCiAgICAgIHNlbGVjdGVkX2RhdGU6ICIiLAogICAgICBzZWxlY3RlZF9pbmRleDogbnVsbCwKICAgICAgY2hhdF9kYXRlczogW10sCiAgICAgIGNvbXBhbnluYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICBjb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICBpc3NlYXJjaDogZmFsc2UsCiAgICAgIHNlYXJjaHN0cmluZzogIiIsCiAgICAgIHNwaW5uZXJPbjogZmFsc2UsCiAgICAgIHZpZXdfY29tcG9uZW50X25hbWU6ICJwb3J0YWxfdXNlciIsCiAgICAgIC8vIGZpbmdlcnByaW50cmVnZXg6L15bMC05XXsxMH0kLywKICAgICAgZmluZ2VycHJpbnRyZWdleDogL15bMC05LStcL1xzXXs5LH0kLywKICAgICAgcGFnZV9hcnJheTogW10sCiAgICAgIHNob3dfbG9hZGVyOiBmYWxzZSwKICAgICAgY29udGFjdF9oZWxwX2VtYWlsOiBudWxsLAogICAgICByZXRhaWxfd2ViX2ZyYW1ld29yazogdGhpcy4kc2Vzc2lvbi5nZXQoInJldGFpbF93ZWJfZnJhbWV3b3JrIiksCiAgICAgIGZpbHRlcl9jaGF0X2hpc3Rvcnk6IHRoaXMuJHNlc3Npb24uZ2V0KCJmaWx0ZXJfY2hhdF9oaXN0b3J5IikKICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID0gdGhpcy4kc2Vzc2lvbi5nZXQoInJldGFpbF93ZWJfZnJhbWV3b3JrIik7CiAgICAkKCIjc2VsZWN0YWxsIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICBpZiAoJCh0aGlzKS5pcygiOmNoZWNrZWQiKSkgewogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICB9IGVsc2UgewogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgfQogICAgfSk7CiAgICB0aGlzLiRyb290LiRvbigic2VhcmNoX2JvdF91c2VyX2NoYXRfaGlzdG9yeSIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIF90aGlzLnNlYXJjaHN0cmluZyA9IGRhdGE7CgogICAgICBfdGhpcy5zZWFyY2hfY2hhdCgpOyAvLyB0aGlzLnNlYXJjaF9xdWVzdGlvbigpOwoKICAgIH0pOwogICAgdGhpcy4kcm9vdC4kb24oImxvYWRfYm90X3VzZXJfY2hhdF9oaXN0b3J5IiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgX3RoaXMubG9hZF9ib3RfdXNlcl9jaGF0X2hpc3RvcnkoKTsKICAgIH0pOwogIH0sCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgIHRoaXMuJHJvb3QuJG9mZigic2VhcmNoX2JvdF91c2VyX2NoYXRfaGlzdG9yeSIpOwogICAgdGhpcy4kcm9vdC4kb2ZmKCJsb2FkX2JvdF91c2VyX2NoYXRfaGlzdG9yeSIpOwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMubG9hZF9wcm9kdWN0X3NldHRpbmdzKCk7CiAgICB0aGlzLmxvYWRfYm90X3VzZXJfY2hhdF9oaXN0b3J5KCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBmb3JtYXRfZGF0ZV9pbl9sb2NhbF90aW1lem9uZTogZnVuY3Rpb24gZm9ybWF0X2RhdGVfaW5fbG9jYWxfdGltZXpvbmUoZGF0ZSkgewogICAgICB2YXIgdGVzdERhdGVVdGMgPSBtb21lbnQudXRjKGRhdGUpOwogICAgICB2YXIgbG9jYWxEYXRlID0gbW9tZW50KHRlc3REYXRlVXRjKS5sb2NhbCgpLnRvRGF0ZSgpOyAvLyBub3RlOiBkbyBub3QgZm9ybWF0IHRpbWUgYmVsb3cgdG8gc2hvdyBob3VyIGFuZCBtaW51dGUgYmVjYXVzZSAiVmlldyBDaGF0IEhpc3RvcnkiIHNob3cgYWxsIG1lc3NhZ2Ugb2YgdGhhdCBkYXRlIG5vdCBzcGVjaWZpYyBob3VyLW1pbnV0ZSB0aW1lLgoKICAgICAgbG9jYWxEYXRlID0gbW9tZW50KGxvY2FsRGF0ZSkuZm9ybWF0KCJkZGQgTU1NIEQgWVlZWSIpOwogICAgICByZXR1cm4gbG9jYWxEYXRlLnRvU3RyaW5nKCk7CiAgICB9LAogICAgbWVzc2FnaW5nX3BsYXRmb3JtX2Zvcm1hdGluZzogZnVuY3Rpb24gbWVzc2FnaW5nX3BsYXRmb3JtX2Zvcm1hdGluZyhtZXNzYWdlKSB7CiAgICAgIHJldHVybiAiUGxlYXNlIGZlZWwgZnJlZSB0byByZWFjaG91dCB0byB1cyBhdCA6ICIgKyBtZXNzYWdlOwogICAgfSwKICAgIG1lc3NhZ2luZ19wbGF0Zm9ybV9mb3JtYXRpbmdfbnVtYmVyOiBmdW5jdGlvbiBtZXNzYWdpbmdfcGxhdGZvcm1fZm9ybWF0aW5nX251bWJlcihtZXNzYWdlKSB7CiAgICAgIGlmIChtZXNzYWdlICE9IG51bGwpIHsKICAgICAgICByZXR1cm4gIiBvciBjYWxsIHVzIGF0IDoiICsgbWVzc2FnZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gIiI7CiAgICAgIH0KICAgIH0sCiAgICBjb25mdXNpb25fbWVzc2FnZV9mb3JtYXRpbmc6IGZ1bmN0aW9uIGNvbmZ1c2lvbl9tZXNzYWdlX2Zvcm1hdGluZyhtZXNzYWdlKSB7CiAgICAgIHJldHVybiBtZXNzYWdlLnNwbGl0KCd7ZW1haWx9Jykuam9pbih0aGlzLmNvbnRhY3RfaGVscF9lbWFpbCk7CiAgICB9LAogICAgbG9hZF9wcm9kdWN0X3NldHRpbmdzOiBmdW5jdGlvbiBsb2FkX3Byb2R1Y3Rfc2V0dGluZ3MoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdGhpcy5zaG93X2xvYWRlciA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnByb2R1Y3Rfc2V0dGluZ3MoKSwgewogICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgaXNfZ2V0OiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICB2YXIgd2ViZnJhbWV3b3JrID0gX3RoaXMyLnJldGFpbF93ZWJfZnJhbWV3b3JrOwoKICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSAhPSAiIiAmJiByZXNwb25zZS5kYXRhICE9IG51bGwgJiYgcmVzcG9uc2UuZGF0YSAhPSAiSW50ZXJuYWwgc2VydmVyIEVycm9yIikgewogICAgICAgICAgX3RoaXMyLmNvbnRhY3RfaGVscF9lbWFpbCA9IHJlc3BvbnNlLmRhdGFbd2ViZnJhbWV3b3JrICsgJ19kZXRhaWxzJ10uY29udGFjdF9oZWxwX2VtYWlsOwogICAgICAgIH0gLy8gZWxzZSB7CiAgICAgICAgLy8gICB0b2FzdHIuZXJyb3IoIkludGVybmFsIFNlcnZlciBFcnJvciIpOwogICAgICAgIC8vIH0KCiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXMyLnNob3dfbG9hZGVyID0gZmFsc2U7CgogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXMyLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgY2hlY2tfaW1hZ2VfdHlwZTogZnVuY3Rpb24gY2hlY2tfaW1hZ2VfdHlwZShpbWFnZSkgewogICAgICBpZiAodHlwZW9mIGltYWdlID09ICdzdHJpbmcnKSB7CiAgICAgICAgcmV0dXJuIGltYWdlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBpbWFnZS5zcmM7CiAgICAgIH0KICAgIH0sCiAgICBsb2FkX2JvdF91c2VyX2NoYXRfaGlzdG9yeTogZnVuY3Rpb24gbG9hZF9ib3RfdXNlcl9jaGF0X2hpc3RvcnkoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdGhpcy5wYWdlX25vID0gMTsKICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgdGhpcy5zZWFyY2hzdHJpbmcgPSAiIjsKICAgICAgdGhpcy5hY3Rpb25fc3RhdHMgPSBbXTsKICAgICAgdGhpcy51c2VyX2FjdGlvbl9zdGF0cyA9IFtdOwogICAgICB0aGlzLnNob3dfbG9hZGVyID0gdHJ1ZTsKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuYWN0aW9uX3N0YXRzX3VybCgpLCB7CiAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMKICAgICAgfSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzMy5hY3Rpb25fc3RhdHMgPSByZXNwb25zZS5kYXRhLmFjdGlvbl9zdGF0czsKCiAgICAgICAgX3RoaXMzLmFjdGlvbl9zdGF0cy5wdXNoKHsKICAgICAgICAgIEhpdHM6IDEsCiAgICAgICAgICBOYW1lOiAiZ2VuZXJhbF9jaGF0X2hpc3RvcnkiCiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXMzLnNob3dfbG9hZGVyID0gZmFsc2U7CgogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXMzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRoaXMuc2hvd19sb2FkZXIgPSB0cnVlOwogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5nZW5lcmFsX2NoYXRfaGlzdG9yeSgpLCB7CiAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgaXNzaG93OiB0cnVlLAogICAgICAgIGFjdGlvbjogImdlbmVyYWxfY2hhdF9oaXN0b3J5IiwKICAgICAgICBmaWx0ZXJfY2hhdF9oaXN0b3J5OiB0aGlzLiRzZXNzaW9uLmdldCgiZmlsdGVyX2NoYXRfaGlzdG9yeSIpLAogICAgICAgIHBhZ2VubzogdGhpcy5wYWdlX25vLAogICAgICAgIHBlcnBhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgaXNzZWFyY2g6IHRoaXMuaXNzZWFyY2gKICAgICAgfSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzMy5zaG93X2xvYWRlciA9IGZhbHNlOwogICAgICAgIF90aGlzMy51c2VyX2FjdGlvbl9zdGF0cyA9IFtdOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKAogICAgICAgICAgLy8gICB0aGlzLmZpbmdlcnByaW50cmVnZXgudGVzdChyZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLl9pZC5Vc2VyKQogICAgICAgICAgLy8gKTsKICAgICAgICAgIGlmIChfdGhpczMuZmluZ2VycHJpbnRyZWdleC50ZXN0KHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uX2lkLlVzZXIpKSB7CiAgICAgICAgICAgIF90aGlzMy51c2VyX2FjdGlvbl9zdGF0cy5wdXNoKHsKICAgICAgICAgICAgICB1c2VyZW1haWw6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uRW1haWwsCiAgICAgICAgICAgICAgdXNlcnBob25lbnVtYmVyOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLlBob25lTnVtYmVyLAogICAgICAgICAgICAgIHVzZXJuYW1lOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLlVzZXJOYW1lID09IG51bGwgPyAiR3Vlc3QgdXNlciIgOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLlVzZXJOYW1lLAogICAgICAgICAgICAgIHVzZXJpZDogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5faWQuVXNlciwKICAgICAgICAgICAgICBkYXRlOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLkRhdGUKICAgICAgICAgICAgfSk7IC8vIGNvbnNvbGUubG9nKHRoaXMudXNlcl9hY3Rpb25fc3RhdHMsIHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0pOwoKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzMy51c2VyX2FjdGlvbl9zdGF0cy5wdXNoKHsKICAgICAgICAgICAgICB1c2VyZW1haWw6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uX2lkLlVzZXIsCiAgICAgICAgICAgICAgdXNlcnBob25lbnVtYmVyOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLlBob25lTnVtYmVyLAogICAgICAgICAgICAgIHVzZXJuYW1lOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLlVzZXJOYW1lID09IG51bGwgPyAiR3Vlc3QgdXNlciIgOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLlVzZXJOYW1lLAogICAgICAgICAgICAgIHVzZXJpZDogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5faWQuVXNlciwKICAgICAgICAgICAgICBkYXRlOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLkRhdGUKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IC8vIHRoaXMudXNlcl9hY3Rpb25fc3RhdHMucHVzaCh7CiAgICAgICAgICAvLyAgICAgdXNlcmVtYWlsIDogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5faWQuVXNlciwKICAgICAgICAgIC8vICAgICB1c2VycGhvbmVudW1iZXIgOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLlBob25lTnVtYmVyLAogICAgICAgICAgLy8gICAgIHVzZXJuYW1lIDogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5Vc2VyTmFtZSwKICAgICAgICAgIC8vIH0pOwoKICAgICAgICB9CgogICAgICAgIF90aGlzMy50b3RhbF9wYWdlcyA9IHJlc3BvbnNlLmRhdGEuUGFnZUNvdW50OwoKICAgICAgICBfdGhpczMuc2V0cGFnaW5hdGlvbihfdGhpczMucGFnZV9ubyk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICBfdGhpczMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfQoKICAgICAgICBfdGhpczMuc2hvd19sb2FkZXIgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9LAogICAgcGFnZV9yZXF1aXJlOiBmdW5jdGlvbiBwYWdlX3JlcXVpcmUocGFnZV9ubykgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIGlmICh0aGlzLnNlbGVjdGVkICE9ICJnZW5lcmFsX2NoYXRfaGlzdG9yeSIpIHsKICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnRvdGFsX3BhZ2VzLCBwYWdlX25vKTsKICAgICAgICBpZiAocGFnZV9ubyA9PSAwIHx8IHBhZ2Vfbm8gPT0gdGhpcy50b3RhbF9wYWdlcyArIDEpIHt9IGVsc2UgewogICAgICAgICAgLy8gdGhpcy5wYWdlX25vID0gcGFnZV9ubzsKICAgICAgICAgIGlmIChwYWdlID09ICIuLi5zIikgewogICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKDEgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgICB9IGVsc2UgaWYgKHBhZ2UgPT0gIi4uLmwiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgodGhpcy50b3RhbF9wYWdlcyArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IHBhZ2U7CiAgICAgICAgICB9IC8vIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKCgogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuYWN0aW9uX3VzYWdlX3N0YXRzX3VybCgpLCB7CiAgICAgICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICBjb21wYW55aWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgLy8gYWN0aW9uOiB0aGlzLmFjdGlvbl9zdGF0c1tpbmRleF0uTmFtZSwKICAgICAgICAgICAgYWN0aW9uOiB0aGlzLnNlbGVjdGVkLAogICAgICAgICAgICBwYWdlX25vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgICB9CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgey8vIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIC8vIHRoaXMudXNlcl9saXN0ID0gW107CiAgICAgICAgICAgIC8vIGZvciAodmFyIGkgaW4gcmVzcG9uc2UuZGF0YVswXSkgewogICAgICAgICAgICAvLyAgIHRoaXMuaW50ZW50bGlzdC5wdXNoKHsKICAgICAgICAgICAgLy8gICAgIGludGVudDogcmVzcG9uc2UuZGF0YVswXVtpXSwKICAgICAgICAgICAgLy8gICAgIGVtYWlsOiByZXNwb25zZS5kYXRhWzFdW2ldLAogICAgICAgICAgICAvLyAgICAgY3JlYXRlZDogcmVzcG9uc2UuZGF0YVsyXVtpXQogICAgICAgICAgICAvLyAgIH0pOwogICAgICAgICAgICAvLyB9CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICBfdGhpczQuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAocGFnZV9ubyA9PSAwIHx8IHBhZ2Vfbm8gPT0gdGhpcy50b3RhbF9wYWdlcyArIDEpIHt9IGVsc2UgewogICAgICAgICAgaWYgKHBhZ2Vfbm8gPT0gIi4uLnMiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgoMSArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSAiLi4ubCIpIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCh0aGlzLnRvdGFsX3BhZ2VzICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gcGFnZV9ubzsKICAgICAgICAgIH0gLy8gdGhpcy5wYWdlX25vID0gcGFnZV9ubzsKCgogICAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuZ2VuZXJhbF9jaGF0X2hpc3RvcnkoKSwgewogICAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIGlzc2hvdzogdHJ1ZSwKICAgICAgICAgICAgYWN0aW9uOiB0aGlzLnNlbGVjdGVkLAogICAgICAgICAgICBmaWx0ZXJfY2hhdF9oaXN0b3J5OiB0aGlzLiRzZXNzaW9uLmdldCgiZmlsdGVyX2NoYXRfaGlzdG9yeSIpLAogICAgICAgICAgICBwYWdlbm86IHRoaXMucGFnZV9ubywKICAgICAgICAgICAgcGVycGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICAgICAgaXNzZWFyY2g6IHRoaXMuaXNzZWFyY2gKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIF90aGlzNC5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgX3RoaXM0LnVzZXJfYWN0aW9uX3N0YXRzID0gW107CgogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAoX3RoaXM0LmZpbmdlcnByaW50cmVnZXgudGVzdChyZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldLl9pZC5Vc2VyKSkgewogICAgICAgICAgICAgICAgX3RoaXM0LnVzZXJfYWN0aW9uX3N0YXRzLnB1c2goewogICAgICAgICAgICAgICAgICB1c2VyZW1haWw6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uRW1haWwsCiAgICAgICAgICAgICAgICAgIHVzZXJwaG9uZW51bWJlcjogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5QaG9uZU51bWJlciwKICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uVXNlck5hbWUsCiAgICAgICAgICAgICAgICAgIHVzZXJpZDogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5faWQuVXNlciwKICAgICAgICAgICAgICAgICAgZGF0ZTogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5EYXRlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3RoaXM0LnVzZXJfYWN0aW9uX3N0YXRzLnB1c2goewogICAgICAgICAgICAgICAgICB1c2VyZW1haWw6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uX2lkLlVzZXIsCiAgICAgICAgICAgICAgICAgIHVzZXJwaG9uZW51bWJlcjogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5QaG9uZU51bWJlciwKICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uVXNlck5hbWUsCiAgICAgICAgICAgICAgICAgIHVzZXJpZDogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5faWQuVXNlciwKICAgICAgICAgICAgICAgICAgZGF0ZTogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5EYXRlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9IC8vIHRoaXMudXNlcl9hY3Rpb25fc3RhdHMucHVzaCh7CiAgICAgICAgICAgICAgLy8gICAgIHVzZXJlbWFpbCA6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uX2lkLlVzZXIsCiAgICAgICAgICAgICAgLy8gICAgIHVzZXJwaG9uZW51bWJlciA6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uUGhvbmVOdW1iZXIsCiAgICAgICAgICAgICAgLy8gICAgIHVzZXJuYW1lIDogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5Vc2VyTmFtZSwKICAgICAgICAgICAgICAvLyB9KTsKCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF90aGlzNC50b3RhbF9wYWdlcyA9IHJlc3BvbnNlLmRhdGEuUGFnZUNvdW50OwoKICAgICAgICAgICAgX3RoaXM0LnNldHBhZ2luYXRpb24oX3RoaXM0LnBhZ2Vfbm8pOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgICAgX3RoaXM0LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBwYWdpbmF0aW9uX2NsYXNzOiBmdW5jdGlvbiBwYWdpbmF0aW9uX2NsYXNzKGluZGV4KSB7CiAgICAgIGlmIChpbmRleCA9PSB0aGlzLnBhZ2Vfbm8pIHsKICAgICAgICByZXR1cm4gIiBhY3RpdmUiOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAiIjsKICAgICAgfQogICAgfSwKICAgIHNldHBhZ2luYXRpb246IGZ1bmN0aW9uIHNldHBhZ2luYXRpb24ocGFnZV9ubykgewogICAgICB0aGlzLnBhZ2VfYXJyYXkgPSBbXTsKCiAgICAgIGlmICh0aGlzLnRvdGFsX3BhZ2VzIDw9IDcpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudG90YWxfcGFnZXM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChwYWdlX25vID09IDEpIHsKICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgNDsgX2krKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2kgKyAxKTsKICAgICAgICB9CgogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSB0aGlzLnRvdGFsX3BhZ2VzKSB7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLnMiKTsKCiAgICAgICAgZm9yICh2YXIgX2kyID0gdGhpcy50b3RhbF9wYWdlcyAtIDQ7IF9pMiA8IHRoaXMudG90YWxfcGFnZXM7IF9pMisrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChfaTIgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA8PSA0KSB7CiAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgcGFnZV9ubyArIDM7IF9pMysrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChfaTMgKyAxKTsKICAgICAgICB9CgogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA+PSB0aGlzLnRvdGFsX3BhZ2VzIC0gNCkgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICAgIGZvciAodmFyIF9pNCA9IHBhZ2Vfbm8gLSA0OyBfaTQgPCB0aGlzLnRvdGFsX3BhZ2VzOyBfaTQrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2k0ICsgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICAgIGZvciAodmFyIF9pNSA9IHBhZ2Vfbm8gLSAzOyBfaTUgPD0gcGFnZV9ubyArIDM7IF9pNSsrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChfaTUpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCh0aGlzLnRvdGFsX3BhZ2VzKTsKICAgICAgfQogICAgfSwKICAgIC8vIHZpZXdfYWN0aW9uKCkgewogICAgLy8gICB2YXIgYWN0aW9uX25hbWUgPSBldmVudC50YXJnZXQudmFsdWU7CiAgICAvLyAgIHRoaXMuc2VsZWN0ZWQgPSBhY3Rpb25fbmFtZTsKICAgIC8vICAgdGhpcy5zZWFyY2hzdHJpbmcgPSAiIjsKICAgIC8vICAgaWYgKGFjdGlvbl9uYW1lICE9ICJnZW5lcmFsX2NoYXRfaGlzdG9yeSIpIHsKICAgIC8vICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAvLyAgICAgYXhpb3MKICAgIC8vICAgICAgIC5wb3N0KAogICAgLy8gICAgICAgICBhcGlfY2FsbHMuYWN0aW9uX3VzYWdlX3N0YXRzX3VybCgpLAogICAgLy8gICAgICAgICB7CiAgICAvLyAgICAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAvLyAgICAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgIC8vICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgLy8gICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAvLyAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAvLyAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25fbmFtZSwKICAgIC8vICAgICAgICAgICBwYWdlX25vOiAxLAogICAgLy8gICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgLy8gICAgICAgICB9LAogICAgLy8gICAgICAgICB7CiAgICAvLyAgICAgICAgICAgaGVhZGVyczogewogICAgLy8gICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAvLyAgICAgICAgICAgfSwKICAgIC8vICAgICAgICAgfQogICAgLy8gICAgICAgKQogICAgLy8gICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAvLyAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAvLyAgICAgICAgIHRoaXMubnVtYmVyX29mX3Jvd3MgPSByZXNwb25zZS5kYXRhLm51bWJlcl9vZl9yb3dzOwogICAgLy8gICAgICAgICB0aGlzLnRvdGFsX3BhZ2VzID0gTWF0aC5jZWlsKHRoaXMubnVtYmVyX29mX3Jvd3MgLyB0aGlzLnBlcl9wYWdlKTsKICAgIC8vICAgICAgICAgdGhpcy51c2VyX2FjdGlvbl9zdGF0cyA9IFtdOwogICAgLy8gICAgICAgICBmb3IgKHZhciBpIGluIHJlc3BvbnNlLmRhdGEudXNlcnMpIHsKICAgIC8vICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS51c2Vyc1tpXS5hY3Rpb25faGl0cyAhPSAwKSB7CiAgICAvLyAgICAgICAgICAgICBsZXQgYWN0aW9uX2hpc3RvcnkgPSBbXTsKICAgIC8vICAgICAgICAgICAgIGZvciAodmFyIGogaW4gcmVzcG9uc2UuZGF0YS51c2Vyc1tpXS5hY3Rpb25faGl0cykgewogICAgLy8gICAgICAgICAgICAgICBhY3Rpb25faGlzdG9yeS5wdXNoKHJlc3BvbnNlLmRhdGEudXNlcnNbaV0uYWN0aW9uX2hpdHNbal0pOwogICAgLy8gICAgICAgICAgICAgfQogICAgLy8gICAgICAgICAgICAgdGhpcy51c2VyX2FjdGlvbl9zdGF0cy5wdXNoKHsKICAgIC8vICAgICAgICAgICAgICAgdXNlcm5hbWU6IHJlc3BvbnNlLmRhdGEudXNlcnNbaV0udXNlcm5hbWUsCiAgICAvLyAgICAgICAgICAgICAgIGFjdGlvbl9saXN0OiBhY3Rpb25faGlzdG9yeSwKICAgIC8vICAgICAgICAgICAgICAgc2VuZGVyX2lkOiByZXNwb25zZS5kYXRhLnVzZXJzW2ldLnNlbmRlcl9pZCwKICAgIC8vICAgICAgICAgICAgIH0pOwogICAgLy8gICAgICAgICAgIH0KICAgIC8vICAgICAgICAgfQogICAgLy8gICAgICAgfSkKICAgIC8vICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgLy8gICAgICAgICBpZiAoCiAgICAvLyAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgLy8gICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgIC8vICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAvLyAgICAgICAgICkgewogICAgLy8gICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICAgIH0pOwogICAgLy8gICB9IGVsc2UgewogICAgLy8gICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgIC8vICAgICBheGlvcwogICAgLy8gICAgICAgLnBvc3QoCiAgICAvLyAgICAgICAgIGFwaV9jYWxscy5nZW5lcmFsX2NoYXRfaGlzdG9yeSgpLAogICAgLy8gICAgICAgICB7CiAgICAvLyAgICAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAvLyAgICAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgIC8vICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgLy8gICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAvLyAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAvLyAgICAgICAgICAgaXNzaG93OiB0cnVlLAogICAgLy8gICAgICAgICAgIGFjdGlvbjogYWN0aW9uX25hbWUsCiAgICAvLyAgICAgICAgICAgcGFnZW5vOiB0aGlzLnBhZ2Vfbm8sCiAgICAvLyAgICAgICAgICAgcGVycGFnZTogdGhpcy5wZXJfcGFnZSwKICAgIC8vICAgICAgICAgICBpc3NlYXJjaDogdGhpcy5pc3NlYXJjaCwKICAgIC8vICAgICAgICAgfSwKICAgIC8vICAgICAgICAgewogICAgLy8gICAgICAgICAgIGhlYWRlcnM6IHsKICAgIC8vICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgLy8gICAgICAgICAgIH0sCiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICAgICkKICAgIC8vICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgLy8gICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgLy8gICAgICAgICB0aGlzLnVzZXJfYWN0aW9uX3N0YXRzID0gW107CiAgICAvLyAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeS5sZW5ndGg7IGkrKykgewogICAgLy8gICAgICAgICAgIHRoaXMudXNlcl9hY3Rpb25fc3RhdHMucHVzaCh7CiAgICAvLyAgICAgICAgICAgICB1c2VyZW1haWw6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uX2lkLlVzZXIsCiAgICAvLyAgICAgICAgICAgICB1c2VycGhvbmVudW1iZXI6IHJlc3BvbnNlLmRhdGEuY2hhdEhpc3RvcnlbaV0uUGhvbmVOdW1iZXIsCiAgICAvLyAgICAgICAgICAgICB1c2VybmFtZTogcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeVtpXS5Vc2VyTmFtZSwKICAgIC8vICAgICAgICAgICB9KTsKICAgIC8vICAgICAgICAgfQogICAgLy8gICAgICAgfSkKICAgIC8vICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgLy8gICAgICAgICBpZiAoCiAgICAvLyAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgLy8gICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgIC8vICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAvLyAgICAgICAgICkgewogICAgLy8gICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICAgIH0pOwogICAgLy8gICB9CiAgICAvLyB9LAogICAgc2Nyb2xsX2RpdjogZnVuY3Rpb24gc2Nyb2xsX2RpdigpIHsKICAgICAgdmFyIGRvYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5idXktcHJvZHVjdHMiKTsKCiAgICAgIGlmIChldmVudC5kZWx0YVggPiBldmVudC5kZWx0YVkpIHsKICAgICAgICBkb2Muc2Nyb2xsTGVmdCArPSAxMDsKICAgICAgfSBlbHNlIGlmIChldmVudC5kZWx0YVggPCBldmVudC5kZWx0YVkpIHsKICAgICAgICBkb2Muc2Nyb2xsTGVmdCAtPSAxMDsKICAgICAgfQogICAgfSwKICAgIGNoZWNraW50ZW50OiBmdW5jdGlvbiBjaGVja2ludGVudChpbmRleCkgewogICAgICBpZiAodGhpcy5jaGF0RGV0YWlsc1tpbmRleCAtIDFdICE9IHVuZGVmaW5lZCkgewogICAgICAgIGlmICh0aGlzLmNoYXREZXRhaWxzW2luZGV4IC0gMV0uQk9UUmVzcG9uc2VbMF0gIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBpZiAodGhpcy5jaGF0RGV0YWlsc1tpbmRleCAtIDFdLkJPVFJlc3BvbnNlWzBdLmludGVudCAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAogICAgY2hhdF9kYXRlOiBmdW5jdGlvbiBjaGF0X2RhdGUoaW5kZXgpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB0aGlzLmNoYXREZXRhaWxzID0gW107CiAgICAgIHRoaXMuc2VuZGVyX2lkID0gdGhpcy51c2VyX2FjdGlvbl9zdGF0c1tpbmRleF0udXNlcmlkOwogICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmdlbmVyYWxfY2hhdF9oaXN0b3J5KCksIHsKICAgICAgICBjb21wYW55bmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICBjb21wYW55aWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICB1c2VybmFtZTogdGhpcy5zZW5kZXJfaWQsCiAgICAgICAgaXNzaG93ZGF0ZXM6IHRydWUsCiAgICAgICAgaXNzZWFyY2g6IHRoaXMuaXNzZWFyY2gsCiAgICAgICAgc2VhcmNoc3RyaW5nOiB0aGlzLnNlYXJjaHN0cmluZwogICAgICB9LCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXM1LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgIF90aGlzNS5jaGF0X2RhdGVzID0gcmVzcG9uc2UuZGF0YS5EYXRlczsKICAgICAgICBfdGhpczUuc2VsZWN0ZWRfZGF0ZSA9IHJlc3BvbnNlLmRhdGEuRGF0ZXNbcmVzcG9uc2UuZGF0YS5EYXRlcy5sZW5ndGggLSAxXTsKCiAgICAgICAgX3RoaXM1LmNoYXRfZGF0ZXMucmV2ZXJzZSgpOyAvLyBjb25zb2xlLmxvZyh0aGlzLnNlbGVjdGVkX2luZGV4KTsKCgogICAgICAgIF90aGlzNS5zZWxlY3RlZF9pbmRleCA9IGluZGV4OwoKICAgICAgICBfdGhpczUuY2hhdF9jb252ZXJzYXRpb24oaW5kZXgpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXM1LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgY2hhdF9jb252ZXJzYXRpb246IGZ1bmN0aW9uIGNoYXRfY29udmVyc2F0aW9uKGluZGV4LCBjaGF0X2luZGV4KSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgLy8gY29uc29sZS5sb2coaW5kZXgsIGNoYXRfaW5kZXgpOwogICAgICBpZiAodGhpcy5zZWxlY3RlZCAhPSAiZ2VuZXJhbF9jaGF0X2hpc3RvcnkiKSB7CiAgICAgICAgdGhpcy5zZW5kZXJfaWQgPSB0aGlzLnVzZXJfYWN0aW9uX3N0YXRzW2luZGV4XS51c2VyaWQ7CiAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmNvbnZlcnNhdGlvbl9zdGF0c191cmwoKSwgewogICAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICBjb21wYW55aWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIHNlbmRlcl9pZDogdGhpcy51c2VyX2FjdGlvbl9zdGF0c1tpbmRleF0uc2VuZGVyX2lkLAogICAgICAgICAgYWN0aW9uX3RpbWVzdGFtcDogdGhpcy51c2VyX2FjdGlvbl9zdGF0c1tpbmRleF0uYWN0aW9uX2xpc3RbY2hhdF9pbmRleF0udGltZXN0YW1wCiAgICAgICAgfSwgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczYuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICBfdGhpczYudXNlcl9yZXBseSA9IFtdOwogICAgICAgICAgX3RoaXM2LmJvdF9yZXBseSA9IFtdOwoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9IG51bGwpIHsKICAgICAgICAgICAgX3RoaXM2LmN1cnJlbnRfdXNlciA9IHJlc3BvbnNlLmRhdGEudXNlcl9jb252ZXJzYXRpb25zLnVzZXJuYW1lOwoKICAgICAgICAgICAgZm9yICh2YXIgaSBpbiByZXNwb25zZS5kYXRhLnVzZXJfY29udmVyc2F0aW9ucy5pbnRlcmFjdGlvbnMpIHsKICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS51c2VyX2NvbnZlcnNhdGlvbnMuaW50ZXJhY3Rpb25zW2ldLnVzZXIgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBfdGhpczYudXNlcl9yZXBseS5wdXNoKHJlc3BvbnNlLmRhdGEudXNlcl9jb252ZXJzYXRpb25zLmludGVyYWN0aW9uc1tpXS51c2VyKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEudXNlcl9jb252ZXJzYXRpb25zLmludGVyYWN0aW9uc1tpXS5ib3QgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBfdGhpczYuYm90X3JlcGx5LnB1c2gocmVzcG9uc2UuZGF0YS51c2VyX2NvbnZlcnNhdGlvbnMuaW50ZXJhY3Rpb25zW2ldLmJvdCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkKCIjY29udmVyc2F0aW9uX21vZGVsMSA6aW5wdXQiKS5wcm9wKCJkaXNhYmxlZCIsIHRydWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdG9hc3RyLmVycm9yKCJObyBDaGF0cyBBdmFpbGFibGUiKTsKICAgICAgICAgICAgJCgiI2NvbnZlcnNhdGlvbl9tb2RlbDEiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgfQoKICAgICAgICAgICQoIiNjb252ZXJzYXRpb25fbW9kZWwxIDppbnB1dCIpLnByb3AoImRpc2FibGVkIiwgdHJ1ZSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICBfdGhpczYuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jaGF0RGV0YWlscyA9IFtdOwogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5nZW5lcmFsX2NoYXRfaGlzdG9yeSgpLCB7CiAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgdXNlcm5hbWU6IHRoaXMuc2VuZGVyX2lkLAogICAgICAgICAgaXNzaG93Y2hhdGRldGFpbHM6IHRydWUsCiAgICAgICAgICBkYXRlOiB0aGlzLnNlbGVjdGVkX2RhdGUsCiAgICAgICAgICBpc3NlYXJjaDogdGhpcy5pc3NlYXJjaCwKICAgICAgICAgIHNlYXJjaHN0cmluZzogdGhpcy5zZWFyY2hzdHJpbmcKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc2VsZWN0ZWRfaW5kZXgsIHRoaXMudXNlcl9hY3Rpb25fc3RhdHMpOwogICAgICAgICAgX3RoaXM2LnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgX3RoaXM2LnVzZXJfcmVwbHkgPSBbXTsKICAgICAgICAgIF90aGlzNi5ib3RfcmVwbHkgPSBbXTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSAhPSBudWxsKSB7CiAgICAgICAgICAgIF90aGlzNi5jdXJyZW50X3VzZXIgPSBfdGhpczYudXNlcl9hY3Rpb25fc3RhdHNbX3RoaXM2LnNlbGVjdGVkX2luZGV4XS51c2VyZW1haWw7CiAgICAgICAgICAgIF90aGlzNi5jaGF0RGV0YWlscyA9IHJlc3BvbnNlLmRhdGEuY2hhdERldGFpbHM7CiAgICAgICAgICAgIHZhciBvZmZlcnNfaW5kZXggPSBudWxsOwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpczYuY2hhdERldGFpbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF90aGlzNi5jaGF0RGV0YWlsc1tpXS5CT1RSZXNwb25zZS5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgaWYgKF90aGlzNi5jaGF0RGV0YWlsc1tpXS5CT1RSZXNwb25zZVtqXS5zaG9waWZ5X2ZldGNoX2N1c3RvbWVyX2lkID09IHRydWUgJiYgX3RoaXM2LmNoYXREZXRhaWxzW2ldLkJPVFJlc3BvbnNlW2pdLnRleHQgPT0gbnVsbCAmJiBfdGhpczYuY2hhdERldGFpbHNbaV0uVXNlclF1ZXJ5ID09PSAiUHJvbW90aW9uYWwgb2ZmZXJzIikgewogICAgICAgICAgICAgICAgICBvZmZlcnNfaW5kZXggPSBpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKG9mZmVyc19pbmRleCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXM2LmNoYXREZXRhaWxzW29mZmVyc19pbmRleF07CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBvZmZlcnNfaW5kZXggPSBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgbmV3X2FyciA9IF90aGlzNi5jaGF0RGV0YWlscy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICByZXR1cm4gYTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBfdGhpczYuY2hhdERldGFpbHMgPSBuZXdfYXJyOwogICAgICAgICAgfSAvLyBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIC8vICAgJCgiI2NvbnZlcnNhdGlvbl9tb2RlbDEgOmlucHV0IikucHJvcCgiZGlzYWJsZWQiLCB0cnVlKTsKICAgICAgICAgIC8vICAgJCgiI2NvbnZlcnNhdGlvbl9tb2RlbDEgOmJ1dHRvbiIpLnByb3AoImRpc2FibGVkIiwgZmFsc2UpOwogICAgICAgICAgLy8gfSwgNTAwKTsKCiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICBfdGhpczYuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBwcm9kdWN0X3ZhcmlhdGlvbjogZnVuY3Rpb24gcHJvZHVjdF92YXJpYXRpb24ocHJvZHVjdHNfbGlzdCkgewogICAgICBmb3IgKHZhciBpIGluIHByb2R1Y3RzX2xpc3QpIHsKICAgICAgICBwcm9kdWN0c19saXN0W2ldLm9yZGVyX3F0eSA9IDE7CiAgICAgICAgcHJvZHVjdHNfbGlzdFtpXS5idXlfcXR5ID0gMTsKCiAgICAgICAgaWYgKHByb2R1Y3RzX2xpc3RbaV0udmFyaWF0aW9ucyAmJiBwcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnMubGVuZ3RoID4gMCkgewogICAgICAgICAgcHJvZHVjdHNfbGlzdFtpXS5pZCA9IHByb2R1Y3RzX2xpc3RbaV0udmFyaWF0aW9uc1swXS5pZDsKICAgICAgICAgIHByb2R1Y3RzX2xpc3RbaV0uaW1nX3VybCA9IHByb2R1Y3RzX2xpc3RbaV0udmFyaWF0aW9uc1swXS5pbWdfdXJsID09PSBudWxsID8gcHJvZHVjdHNfbGlzdFtpXS5pbWdfdXJsIDogcHJvZHVjdHNfbGlzdFtpXS52YXJpYXRpb25zWzBdLmltZ191cmw7CiAgICAgICAgICBwcm9kdWN0c19saXN0W2ldLnBlcm1hbGluayA9IHByb2R1Y3RzX2xpc3RbaV0udmFyaWF0aW9uc1swXS5wZXJtYWxpbms7CiAgICAgICAgICBwcm9kdWN0c19saXN0W2ldLnZhcmlhbnRfdGl0bGUgPSBwcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnNbMF0udmFyaWFudF90aXRsZTsKICAgICAgICAgIHByb2R1Y3RzX2xpc3RbaV0uc3RvY2tfcXVhbnRpdHkgPSBwcm9kdWN0c19saXN0W2ldLnZhcmlhdGlvbnNbMF0uc3RvY2tfcXVhbnRpdHk7CiAgICAgICAgICBwcm9kdWN0c19saXN0W2ldLnN0b2NrX3N0YXR1cyA9IHByb2R1Y3RzX2xpc3RbaV0udmFyaWF0aW9uc1swXS5zdG9ja19zdGF0dXM7CiAgICAgICAgICBwcm9kdWN0c19saXN0W2ldLnByaWNlID0gcHJvZHVjdHNfbGlzdFtpXS52YXJpYXRpb25zWzBdLnByaWNlOwogICAgICAgICAgcHJvZHVjdHNfbGlzdFtpXS5yZWd1bGFyX3ByaWNlID0gcHJvZHVjdHNfbGlzdFtpXS52YXJpYXRpb25zWzBdLnJlZ3VsYXJfcHJpY2U7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gcHJvZHVjdHNfbGlzdDsKICAgIH0sCiAgICBzZWFyY2hfY2hhdDogZnVuY3Rpb24gc2VhcmNoX2NoYXQoKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuc2VhcmNoc3RyaW5nICE9ICIiKSB7CiAgICAgICAgLy8gdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgIHRoaXMucGFnZV9ubyA9IDE7CiAgICAgICAgdGhpcy5pc3NlYXJjaCA9IHRydWUsIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5nZW5lcmFsX2NoYXRfaGlzdG9yeSgpLCB7CiAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgaXNzaG93OiB0cnVlLAogICAgICAgICAgYWN0aW9uOiAiZ2VuZXJhbF9jaGF0X2hpc3RvcnkiLAogICAgICAgICAgcGFnZW5vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgICBwZXJwYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgICAgaXNzZWFyY2g6IHRoaXMuaXNzZWFyY2gsCiAgICAgICAgICBzZWFyY2hzdHJpbmc6IHRoaXMuc2VhcmNoc3RyaW5nCiAgICAgICAgfSwgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczcuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICBfdGhpczcudXNlcl9hY3Rpb25fc3RhdHMgPSBbXTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5NU0cgIT0gIk5vIFJlc3VsdHMgRm91bmQiICYmIHJlc3BvbnNlLmRhdGEuTVNHICE9ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2UuZGF0YS5jaGF0SGlzdG9yeS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIF90aGlzNy51c2VyX2FjdGlvbl9zdGF0cy5wdXNoKHsKICAgICAgICAgICAgICAgIHVzZXJuYW1lOiByZXNwb25zZS5kYXRhLmNoYXRIaXN0b3J5W2ldCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF90aGlzNy50b3RhbF9wYWdlcyA9IHJlc3BvbnNlLmRhdGEuUGFnZUNvdW50OwoKICAgICAgICAgICAgX3RoaXM3LnNldHBhZ2luYXRpb24oX3RoaXM3LnBhZ2Vfbm8pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiTm8gUmVzdWx0cyBGb3VuZCIpIHsKICAgICAgICAgICAgdG9hc3RyLmVycm9yKCJObyBSZXN1bHRzIGZvdW5kIik7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50ZXJuYWwgU2VydmVyIEVycm9yIik7CgogICAgICAgICAgICBfdGhpczcubG9hZF9ib3RfdXNlcl9jaGF0X2hpc3RvcnkoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50ZXJuYWwgU2VydmVyIEVycm9yIik7CgogICAgICAgICAgICBfdGhpczcubG9hZF9ib3RfdXNlcl9jaGF0X2hpc3RvcnkoKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0b2FzdHIuZXJyb3IoIkVudGVyIHByb3BlciBkYXRhIGZvciBzZWFyY2hpbmciKTsKICAgICAgfQogICAgfSwKICAgIGNsb3NlX21vZGFsOiBmdW5jdGlvbiBjbG9zZV9tb2RhbCgpIHsKICAgICAgJCgiI2NvbnZlcnNhdGlvbl9tb2RlbDEiKS5tb2RhbCgiaGlkZSIpOwogICAgfSwKICAgIGNoZWNrX2JvdF9vZmZlcnM6IGZ1bmN0aW9uIGNoZWNrX2JvdF9vZmZlcnMoYm90X3JlcG9uc2UpIHsKICAgICAgdmFyIHJlc3VsdF9ib3QgPSBib3RfcmVwb25zZS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gQm9vbGVhbihpdGVtLm9mZmVycykgPT09IHRydWU7CiAgICAgIH0pOwoKICAgICAgaWYgKHJlc3VsdF9ib3QubGVuZ3RoID4gMCkgewogICAgICAgIHJldHVybiAiZGlzcGxheSA6YmxvY2siOwogICAgICB9CgogICAgICByZXR1cm4gImRpc3BsYXkgOiBmbGV4IjsKICAgIH0KICB9Cn07"},null]}