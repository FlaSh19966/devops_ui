{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/eslint-loader/index.js??ref--13-0!/home/vimalesh/CENSE/chatbot-portal/src/portal/assets/js/shopify.min.js","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/assets/js/shopify.min.js","mtime":1643027096288},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:cmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbiIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvciIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmV2ZXJ5Iik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5jb25zdHJ1Y3RvciIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0Iik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0iKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnkiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXgiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvciIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4iKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5sYXN0LWluZGV4LW9mIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0Iik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNsaWNlIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zdWJhcnJheSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmciKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmciKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL3dlYi51cmwiKTsKCnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoIi9ob21lL3ZpbWFsZXNoL0NFTlNFL2NoYXRib3QtcG9ydGFsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZiIpOwoKdmFyIFNob3BpZnlCdXkgPSBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwoKICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCAhMSwgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSAhMCwgInZhbHVlIiBpbiBkZXNjcmlwdG9yICYmIChkZXNjcmlwdG9yLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICByZXR1cm4gcHJvdG9Qcm9wcyAmJiBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpLCBzdGF0aWNQcm9wcyAmJiBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpLCBDb25zdHJ1Y3RvcjsKICB9CgogIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICAgIHJldHVybiBrZXkgaW4gb2JqID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogITAsCiAgICAgIGNvbmZpZ3VyYWJsZTogITAsCiAgICAgIHdyaXRhYmxlOiAhMAogICAgfSkgOiBvYmpba2V5XSA9IHZhbHVlLCBvYmo7CiAgfQoKICBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgewogICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSksIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzLCBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOwogIH0KCiAgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgICBpZiAodm9pZCAwID09PSBzZWxmKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogICAgcmV0dXJuIHNlbGY7CiAgfQoKICBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICAgIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7CiAgfQoKICBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwogIH0KCiAgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICAgIH0KCiAgICAgIHJldHVybiBhcnIyOwogICAgfQogIH0KCiAgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKICB9CgogIGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogICAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgIltvYmplY3QgQXJndW1lbnRzXSIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7CiAgfQoKICBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgICB2YXIgX2FyciA9IFtdLAogICAgICAgIF9uID0gITAsCiAgICAgICAgX2QgPSAhMSwKICAgICAgICBfZSA9IHZvaWQgMDsKCiAgICB0cnkgewogICAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKSAmJiAoX2Fyci5wdXNoKF9zLnZhbHVlKSwgIWkgfHwgX2Fyci5sZW5ndGggIT09IGkpOyBfbiA9ICEwKSB7CiAgICAgICAgOwogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2QgPSAhMCwgX2UgPSBlcnI7CiAgICB9IGZpbmFsbHkgewogICAgICB0cnkgewogICAgICAgIF9uIHx8IG51bGwgPT0gX2kucmV0dXJuIHx8IF9pLnJldHVybigpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gX2FycjsKICB9CgogIGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7CiAgfQoKICBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwogIH0KCiAgdmFyIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA/IGZ1bmN0aW9uIChvYmopIHsKICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogIH0gOiBmdW5jdGlvbiAob2JqKSB7CiAgICByZXR1cm4gb2JqICYmICJmdW5jdGlvbiIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgfSwKICAgICAgY2xhc3NDYWxsQ2hlY2skMSA9IGZ1bmN0aW9uIGNsYXNzQ2FsbENoZWNrJDEoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfSwKICAgICAgY3JlYXRlQ2xhc3MkMSA9IGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgITEsIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gITAsICJ2YWx1ZSIgaW4gZGVzY3JpcHRvciAmJiAoZGVzY3JpcHRvci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICAgICAgcmV0dXJuIHByb3RvUHJvcHMgJiYgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpLCBzdGF0aWNQcm9wcyAmJiBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyksIENvbnN0cnVjdG9yOwogICAgfTsKICB9KCksCiAgICAgIGluaGVyaXRzJDEgPSBmdW5jdGlvbiBpbmhlcml0cyQxKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgICBpZiAoImZ1bmN0aW9uIiAhPSB0eXBlb2Ygc3VwZXJDbGFzcyAmJiBudWxsICE9PSBzdXBlckNsYXNzKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIgKyBfdHlwZW9mMihzdXBlckNsYXNzKSk7CiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsKICAgICAgY29uc3RydWN0b3I6IHsKICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgICAgZW51bWVyYWJsZTogITEsCiAgICAgICAgd3JpdGFibGU6ICEwLAogICAgICAgIGNvbmZpZ3VyYWJsZTogITAKICAgICAgfQogICAgfSksIHN1cGVyQ2xhc3MgJiYgKE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzKTsKICB9LAogICAgICBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJDEgPSBmdW5jdGlvbiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJDEoc2VsZiwgY2FsbCkgewogICAgaWYgKCFzZWxmKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogICAgcmV0dXJuICFjYWxsIHx8ICJvYmplY3QiICE9IF90eXBlb2YyKGNhbGwpICYmICJmdW5jdGlvbiIgIT0gdHlwZW9mIGNhbGwgPyBzZWxmIDogY2FsbDsKICB9OwoKICBmdW5jdGlvbiBqb2luKCkgewogICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZpZWxkcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBmaWVsZHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgcmV0dXJuIGZpZWxkcy5qb2luKCIgIik7CiAgfQoKICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkgewogICAgcmV0dXJuIEJvb2xlYW4odmFsdWUpICYmICJbb2JqZWN0IE9iamVjdF0iID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUudmFsdWVPZigpKTsKICB9CgogIGZ1bmN0aW9uIGRlZXBGcmVlemVDb3B5RXhjZXB0KHByZWRpY2F0ZSwgc3RydWN0dXJlKSB7CiAgICByZXR1cm4gcHJlZGljYXRlKHN0cnVjdHVyZSkgPyBzdHJ1Y3R1cmUgOiBpc09iamVjdChzdHJ1Y3R1cmUpID8gT2JqZWN0LmZyZWV6ZShPYmplY3Qua2V5cyhzdHJ1Y3R1cmUpLnJlZHVjZShmdW5jdGlvbiAoY29weSwga2V5KSB7CiAgICAgIHJldHVybiBjb3B5W2tleV0gPSBkZWVwRnJlZXplQ29weUV4Y2VwdChwcmVkaWNhdGUsIHN0cnVjdHVyZVtrZXldKSwgY29weTsKICAgIH0sIHt9KSkgOiBBcnJheS5pc0FycmF5KHN0cnVjdHVyZSkgPyBPYmplY3QuZnJlZXplKHN0cnVjdHVyZS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgcmV0dXJuIGRlZXBGcmVlemVDb3B5RXhjZXB0KHByZWRpY2F0ZSwgaXRlbSk7CiAgICB9KSkgOiBzdHJ1Y3R1cmU7CiAgfQoKICBmdW5jdGlvbiBzY2hlbWFGb3JUeXBlKHR5cGVCdW5kbGUsIHR5cGVOYW1lKSB7CiAgICB2YXIgdHlwZVNjaGVtYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzJdID8gYXJndW1lbnRzWzJdIDogbnVsbCwKICAgICAgICB0eXBlID0gdHlwZUJ1bmRsZS50eXBlc1t0eXBlTmFtZV07CiAgICBpZiAodHlwZSkgcmV0dXJuIHR5cGU7CiAgICBpZiAodHlwZVNjaGVtYSAmJiAiSU5URVJGQUNFIiA9PT0gdHlwZVNjaGVtYS5raW5kKSByZXR1cm4gdHlwZVNjaGVtYTsKICAgIHRocm93IG5ldyBFcnJvcigiTm8gdHlwZSBvZiAiICsgdHlwZU5hbWUgKyAiIGZvdW5kIGluIHNjaGVtYSIpOwogIH0KCiAgdmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfSwKICAgICAgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8ICExLCBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9ICEwLCAidmFsdWUiIGluIGRlc2NyaXB0b3IgJiYgKGRlc2NyaXB0b3Iud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICAgIHJldHVybiBwcm90b1Byb3BzICYmIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKSwgc3RhdGljUHJvcHMgJiYgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpLCBDb25zdHJ1Y3RvcjsKICAgIH07CiAgfSgpLAogICAgICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgewogICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsKCiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsKICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpICYmICh0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB0YXJnZXQ7CiAgfSwKICAgICAgaW5oZXJpdHMgPSBmdW5jdGlvbiBpbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogICAgaWYgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIHN1cGVyQ2xhc3MgJiYgbnVsbCAhPT0gc3VwZXJDbGFzcykgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiICsgKHZvaWQgMCA9PT0gc3VwZXJDbGFzcyA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihzdXBlckNsYXNzKSkpOwogICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICAgIGVudW1lcmFibGU6ICExLAogICAgICAgIHdyaXRhYmxlOiAhMCwKICAgICAgICBjb25maWd1cmFibGU6ICEwCiAgICAgIH0KICAgIH0pLCBzdXBlckNsYXNzICYmIChPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcyk7CiAgfSwKICAgICAgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogICAgaWYgKCFzZWxmKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogICAgcmV0dXJuICFjYWxsIHx8ICJvYmplY3QiICE9PSAodm9pZCAwID09PSBjYWxsID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKGNhbGwpKSAmJiAiZnVuY3Rpb24iICE9IHR5cGVvZiBjYWxsID8gc2VsZiA6IGNhbGw7CiAgfSwKICAgICAgc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7CiAgICAgIHZhciBfYXJyID0gW10sCiAgICAgICAgICBfbiA9ICEwLAogICAgICAgICAgX2QgPSAhMSwKICAgICAgICAgIF9lID0gdm9pZCAwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKSAmJiAoX2Fyci5wdXNoKF9zLnZhbHVlKSwgIWkgfHwgX2Fyci5sZW5ndGggIT09IGkpOyBfbiA9ICEwKSB7CiAgICAgICAgICA7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfZCA9ICEwLCBfZSA9IGVycjsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICB0cnkgewogICAgICAgICAgIV9uICYmIF9pLnJldHVybiAmJiBfaS5yZXR1cm4oKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBfYXJyOwogICAgfQoKICAgIHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7CiAgICAgIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKICAgIH07CiAgfSgpLAogICAgICB0b0NvbnN1bWFibGVBcnJheSA9IGZ1bmN0aW9uIHRvQ29uc3VtYWJsZUFycmF5KGFycikgewogICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFycjI7CiAgICB9CgogICAgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsKICB9LAogICAgICBWYXJpYWJsZURlZmluaXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBWYXJpYWJsZURlZmluaXRpb24obmFtZSwgdHlwZSwgZGVmYXVsdFZhbHVlKSB7CiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFZhcmlhYmxlRGVmaW5pdGlvbiksIHRoaXMubmFtZSA9IG5hbWUsIHRoaXMudHlwZSA9IHR5cGUsIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlLCBPYmplY3QuZnJlZXplKHRoaXMpOwogICAgfQoKICAgIHJldHVybiBjcmVhdGVDbGFzcyhWYXJpYWJsZURlZmluaXRpb24sIFt7CiAgICAgIGtleTogInRvSW5wdXRWYWx1ZVN0cmluZyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b0lucHV0VmFsdWVTdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuICIkIiArIHRoaXMubmFtZTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgICB2YXIgZGVmYXVsdFZhbHVlU3RyaW5nID0gdGhpcy5kZWZhdWx0VmFsdWUgPyAiID0gIiArIGZvcm1hdElucHV0VmFsdWUodGhpcy5kZWZhdWx0VmFsdWUpIDogIiI7CiAgICAgICAgcmV0dXJuICIkIiArIHRoaXMubmFtZSArICI6IiArIHRoaXMudHlwZSArIGRlZmF1bHRWYWx1ZVN0cmluZzsKICAgICAgfQogICAgfV0pLCBWYXJpYWJsZURlZmluaXRpb247CiAgfSgpOwoKICBmdW5jdGlvbiBpc1ZhcmlhYmxlKHZhbHVlKSB7CiAgICByZXR1cm4gVmFyaWFibGVEZWZpbml0aW9uLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIHZhcmlhYmxlKG5hbWUsIHR5cGUsIGRlZmF1bHRWYWx1ZSkgewogICAgcmV0dXJuIG5ldyBWYXJpYWJsZURlZmluaXRpb24obmFtZSwgdHlwZSwgZGVmYXVsdFZhbHVlKTsKICB9CgogIHZhciBFbnVtID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gRW51bShrZXkpIHsKICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRW51bSksIHRoaXMua2V5ID0ga2V5OwogICAgfQoKICAgIHJldHVybiBjcmVhdGVDbGFzcyhFbnVtLCBbewogICAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgICByZXR1cm4gdGhpcy5rZXk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAidmFsdWVPZiIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZU9mKCkgewogICAgICAgIHJldHVybiB0aGlzLmtleS52YWx1ZU9mKCk7CiAgICAgIH0KICAgIH1dKSwgRW51bTsKICB9KCksCiAgICAgIGVudW1GdW5jdGlvbiA9IGZ1bmN0aW9uIGVudW1GdW5jdGlvbihrZXkpIHsKICAgIHJldHVybiBuZXcgRW51bShrZXkpOwogIH0sCiAgICAgIFNjYWxhciA9IGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFNjYWxhcih2YWx1ZSkgewogICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTY2FsYXIpLCB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICB9CgogICAgcmV0dXJuIGNyZWF0ZUNsYXNzKFNjYWxhciwgW3sKICAgICAga2V5OiAidG9TdHJpbmciLAogICAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUudG9TdHJpbmcoKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJ2YWx1ZU9mIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlT2YoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUudmFsdWVPZigpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInVud3JhcHBlZCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkgewogICAgICAgIHJldHVybiB0aGlzLnZhbHVlOwogICAgICB9CiAgICB9XSksIFNjYWxhcjsKICB9KCk7CgogIGZ1bmN0aW9uIGZvcm1hdElucHV0VmFsdWUodmFsdWUpIHsKICAgIHJldHVybiBWYXJpYWJsZURlZmluaXRpb24ucHJvdG90eXBlLmlzUHJvdG90eXBlT2YodmFsdWUpID8gdmFsdWUudG9JbnB1dFZhbHVlU3RyaW5nKCkgOiBFbnVtLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHZhbHVlKSA/IFN0cmluZyh2YWx1ZSkgOiBTY2FsYXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YodmFsdWUpID8gSlNPTi5zdHJpbmdpZnkodmFsdWUudmFsdWVPZigpKSA6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gIlsiICsgam9pbi5hcHBseSh2b2lkIDAsIHRvQ29uc3VtYWJsZUFycmF5KHZhbHVlLm1hcChmb3JtYXRJbnB1dFZhbHVlKSkpICsgIl0iIDogaXNPYmplY3QodmFsdWUpID8gZm9ybWF0T2JqZWN0KHZhbHVlLCAieyIsICJ9IikgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBmb3JtYXRPYmplY3QodmFsdWUpIHsKICAgIHZhciBvcGVuQ2hhciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzFdID8gYXJndW1lbnRzWzFdIDogIiIsCiAgICAgICAgY2xvc2VDaGFyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiAiIiwKICAgICAgICBhcmdQYWlycyA9IE9iamVjdC5rZXlzKHZhbHVlKS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgICByZXR1cm4ga2V5ICsgIjogIiArIGZvcm1hdElucHV0VmFsdWUodmFsdWVba2V5XSk7CiAgICB9KTsKICAgIHJldHVybiAiIiArIG9wZW5DaGFyICsgam9pbi5hcHBseSh2b2lkIDAsIHRvQ29uc3VtYWJsZUFycmF5KGFyZ1BhaXJzKSkgKyBjbG9zZUNoYXI7CiAgfQoKICBmdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHsKICAgIHJldHVybiBPYmplY3Qua2V5cyhhcmdzKS5sZW5ndGggPyAiICgiICsgZm9ybWF0T2JqZWN0KGFyZ3MpICsgIikiIDogIiI7CiAgfQoKICBmdW5jdGlvbiBmb3JtYXREaXJlY3RpdmVzKGRpcmVjdGl2ZXMpIHsKICAgIGlmICghT2JqZWN0LmtleXMoZGlyZWN0aXZlcykubGVuZ3RoKSByZXR1cm4gIiI7CiAgICB2YXIgZGlyZWN0aXZlU3RyaW5ncyA9IE9iamVjdC5rZXlzKGRpcmVjdGl2ZXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHZhciBkaXJlY3RpdmVBcmdzID0gZGlyZWN0aXZlc1trZXldLAogICAgICAgICAgYXJnOwogICAgICByZXR1cm4gIkAiICsga2V5ICsgKGRpcmVjdGl2ZUFyZ3MgJiYgT2JqZWN0LmtleXMoZGlyZWN0aXZlQXJncykubGVuZ3RoID8gIigiICsgZm9ybWF0T2JqZWN0KGRpcmVjdGl2ZUFyZ3MpICsgIikiIDogIiIpOwogICAgfSk7CiAgICByZXR1cm4gIiAiICsgam9pbi5hcHBseSh2b2lkIDAsIHRvQ29uc3VtYWJsZUFycmF5KGRpcmVjdGl2ZVN0cmluZ3MpKTsKICB9CgogIHZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9LAogICAgICBQcm9maWxlcl90cmFja1R5cGVEZXBlbmRlbmN5LAogICAgICBQcm9maWxlcl90cmFja0ZpZWxkRGVwZW5kZW5jeSwKICAgICAgdHJhY2tUeXBlRGVwZW5kZW5jeSA9IG5vb3AsCiAgICAgIHRyYWNrRmllbGREZXBlbmRlbmN5ID0gbm9vcDsKCiAgZnVuY3Rpb24gcGFyc2VGaWVsZENyZWF0aW9uQXJncyhjcmVhdGlvbkFyZ3MpIHsKICAgIHZhciBjYWxsYmFjayA9IG5vb3AsCiAgICAgICAgb3B0aW9ucyA9IHt9LAogICAgICAgIHNlbGVjdGlvblNldCA9IG51bGw7CiAgICBpZiAoMiA9PT0gY3JlYXRpb25BcmdzLmxlbmd0aCkgewogICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgY3JlYXRpb25BcmdzWzFdKSB7CiAgICAgICAgdmFyIF9jcmVhdGlvbkFyZ3MgPSBzbGljZWRUb0FycmF5KGNyZWF0aW9uQXJncywgMik7CgogICAgICAgIG9wdGlvbnMgPSBfY3JlYXRpb25BcmdzWzBdLCBjYWxsYmFjayA9IF9jcmVhdGlvbkFyZ3NbMV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIF9jcmVhdGlvbkFyZ3MyID0gc2xpY2VkVG9BcnJheShjcmVhdGlvbkFyZ3MsIDIpOwoKICAgICAgICBvcHRpb25zID0gX2NyZWF0aW9uQXJnczJbMF0sIHNlbGVjdGlvblNldCA9IF9jcmVhdGlvbkFyZ3MyWzFdOwogICAgICB9CiAgICB9IGVsc2UgMSA9PT0gY3JlYXRpb25BcmdzLmxlbmd0aCAmJiAoU2VsZWN0aW9uU2V0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGNyZWF0aW9uQXJnc1swXSkgPyBzZWxlY3Rpb25TZXQgPSBjcmVhdGlvbkFyZ3NbMF0gOiAiZnVuY3Rpb24iID09IHR5cGVvZiBjcmVhdGlvbkFyZ3NbMF0gPyBjYWxsYmFjayA9IGNyZWF0aW9uQXJnc1swXSA6IG9wdGlvbnMgPSBjcmVhdGlvbkFyZ3NbMF0pOwogICAgcmV0dXJuIHsKICAgICAgb3B0aW9uczogb3B0aW9ucywKICAgICAgc2VsZWN0aW9uU2V0OiBzZWxlY3Rpb25TZXQsCiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjawogICAgfTsKICB9CgogIHZhciBlbXB0eUFyZ3MgPSBPYmplY3QuZnJlZXplKHt9KSwKICAgICAgZW1wdHlEaXJlY3RpdmVzID0gT2JqZWN0LmZyZWV6ZSh7fSksCiAgICAgIEZpZWxkID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gRmllbGQobmFtZSwgb3B0aW9ucywgc2VsZWN0aW9uU2V0KSB7CiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEZpZWxkKSwgdGhpcy5uYW1lID0gbmFtZSwgdGhpcy5hbGlhcyA9IG9wdGlvbnMuYWxpYXMgfHwgbnVsbCwgdGhpcy5yZXNwb25zZUtleSA9IHRoaXMuYWxpYXMgfHwgdGhpcy5uYW1lLCB0aGlzLmFyZ3MgPSBvcHRpb25zLmFyZ3MgPyBkZWVwRnJlZXplQ29weUV4Y2VwdChpc1ZhcmlhYmxlLCBvcHRpb25zLmFyZ3MpIDogZW1wdHlBcmdzLCB0aGlzLmRpcmVjdGl2ZXMgPSBvcHRpb25zLmRpcmVjdGl2ZXMgPyBkZWVwRnJlZXplQ29weUV4Y2VwdChpc1ZhcmlhYmxlLCBvcHRpb25zLmRpcmVjdGl2ZXMpIDogZW1wdHlEaXJlY3RpdmVzLCB0aGlzLnNlbGVjdGlvblNldCA9IHNlbGVjdGlvblNldCwgT2JqZWN0LmZyZWV6ZSh0aGlzKTsKICAgIH0KCiAgICByZXR1cm4gY3JlYXRlQ2xhc3MoRmllbGQsIFt7CiAgICAgIGtleTogInRvU3RyaW5nIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICAgIHZhciBhbGlhc1ByZWZpeDsKICAgICAgICByZXR1cm4gIiIgKyAodGhpcy5hbGlhcyA/IHRoaXMuYWxpYXMgKyAiOiAiIDogIiIpICsgdGhpcy5uYW1lICsgZm9ybWF0QXJncyh0aGlzLmFyZ3MpICsgZm9ybWF0RGlyZWN0aXZlcyh0aGlzLmRpcmVjdGl2ZXMpICsgdGhpcy5zZWxlY3Rpb25TZXQ7CiAgICAgIH0KICAgIH1dKSwgRmllbGQ7CiAgfSgpLAogICAgICBTcHJlYWQgPSBmdW5jdGlvbiBTcHJlYWQoKSB7CiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTcHJlYWQpOwogIH0sCiAgICAgIElubGluZUZyYWdtZW50ID0gZnVuY3Rpb24gKF9TcHJlYWQpIHsKICAgIGZ1bmN0aW9uIElubGluZUZyYWdtZW50KHR5cGVOYW1lLCBzZWxlY3Rpb25TZXQpIHsKICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5saW5lRnJhZ21lbnQpOwoKICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSW5saW5lRnJhZ21lbnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmxpbmVGcmFnbWVudCkpLmNhbGwodGhpcykpOwoKICAgICAgcmV0dXJuIF90aGlzLnR5cGVOYW1lID0gdHlwZU5hbWUsIF90aGlzLnNlbGVjdGlvblNldCA9IHNlbGVjdGlvblNldCwgT2JqZWN0LmZyZWV6ZShfdGhpcyksIF90aGlzOwogICAgfQoKICAgIHJldHVybiBpbmhlcml0cyhJbmxpbmVGcmFnbWVudCwgX1NwcmVhZCksIGNyZWF0ZUNsYXNzKElubGluZUZyYWdtZW50LCBbewogICAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgICByZXR1cm4gIi4uLiBvbiAiICsgdGhpcy50eXBlTmFtZSArIHRoaXMuc2VsZWN0aW9uU2V0OwogICAgICB9CiAgICB9XSksIElubGluZUZyYWdtZW50OwogIH0oU3ByZWFkKSwKICAgICAgRnJhZ21lbnRTcHJlYWQgPSBmdW5jdGlvbiAoX1NwcmVhZDIpIHsKICAgIGZ1bmN0aW9uIEZyYWdtZW50U3ByZWFkKGZyYWdtZW50RGVmaW5pdGlvbikgewogICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBGcmFnbWVudFNwcmVhZCk7CgogICAgICB2YXIgX3RoaXMyID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRnJhZ21lbnRTcHJlYWQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGcmFnbWVudFNwcmVhZCkpLmNhbGwodGhpcykpOwoKICAgICAgcmV0dXJuIF90aGlzMi5uYW1lID0gZnJhZ21lbnREZWZpbml0aW9uLm5hbWUsIF90aGlzMi5zZWxlY3Rpb25TZXQgPSBmcmFnbWVudERlZmluaXRpb24uc2VsZWN0aW9uU2V0LCBPYmplY3QuZnJlZXplKF90aGlzMiksIF90aGlzMjsKICAgIH0KCiAgICByZXR1cm4gaW5oZXJpdHMoRnJhZ21lbnRTcHJlYWQsIF9TcHJlYWQyKSwgY3JlYXRlQ2xhc3MoRnJhZ21lbnRTcHJlYWQsIFt7CiAgICAgIGtleTogInRvU3RyaW5nIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICAgIHJldHVybiAiLi4uIiArIHRoaXMubmFtZTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJ0b0RlZmluaXRpb24iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gdG9EZWZpbml0aW9uKCkgewogICAgICAgIHJldHVybiBuZXcgRnJhZ21lbnREZWZpbml0aW9uKHRoaXMubmFtZSwgdGhpcy5zZWxlY3Rpb25TZXQudHlwZVNjaGVtYS5uYW1lLCB0aGlzLnNlbGVjdGlvblNldCk7CiAgICAgIH0KICAgIH1dKSwgRnJhZ21lbnRTcHJlYWQ7CiAgfShTcHJlYWQpLAogICAgICBGcmFnbWVudERlZmluaXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBGcmFnbWVudERlZmluaXRpb24obmFtZSwgdHlwZU5hbWUsIHNlbGVjdGlvblNldCkgewogICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBGcmFnbWVudERlZmluaXRpb24pLCB0aGlzLm5hbWUgPSBuYW1lLCB0aGlzLnR5cGVOYW1lID0gdHlwZU5hbWUsIHRoaXMuc2VsZWN0aW9uU2V0ID0gc2VsZWN0aW9uU2V0LCB0aGlzLnNwcmVhZCA9IG5ldyBGcmFnbWVudFNwcmVhZCh0aGlzKSwgT2JqZWN0LmZyZWV6ZSh0aGlzKTsKICAgIH0KCiAgICByZXR1cm4gY3JlYXRlQ2xhc3MoRnJhZ21lbnREZWZpbml0aW9uLCBbewogICAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgICByZXR1cm4gImZyYWdtZW50ICIgKyB0aGlzLm5hbWUgKyAiIG9uICIgKyB0aGlzLnR5cGVOYW1lICsgIiAiICsgdGhpcy5zZWxlY3Rpb25TZXQ7CiAgICAgIH0KICAgIH1dKSwgRnJhZ21lbnREZWZpbml0aW9uOwogIH0oKTsKCiAgZnVuY3Rpb24gc2VsZWN0aW9uc0hhdmVJZEZpZWxkKHNlbGVjdGlvbnMpIHsKICAgIHJldHVybiBzZWxlY3Rpb25zLnNvbWUoZnVuY3Rpb24gKGZpZWxkT3JGcmFnbWVudCkgewogICAgICByZXR1cm4gRmllbGQucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoZmllbGRPckZyYWdtZW50KSA/ICJpZCIgPT09IGZpZWxkT3JGcmFnbWVudC5uYW1lIDogISghU3ByZWFkLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGZpZWxkT3JGcmFnbWVudCkgfHwgIWZpZWxkT3JGcmFnbWVudC5zZWxlY3Rpb25TZXQudHlwZVNjaGVtYS5pbXBsZW1lbnRzTm9kZSkgJiYgc2VsZWN0aW9uc0hhdmVJZEZpZWxkKGZpZWxkT3JGcmFnbWVudC5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucyk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHNlbGVjdGlvbnNIYXZlVHlwZW5hbWVGaWVsZChzZWxlY3Rpb25zKSB7CiAgICByZXR1cm4gc2VsZWN0aW9ucy5zb21lKGZ1bmN0aW9uIChmaWVsZE9yRnJhZ21lbnQpIHsKICAgICAgcmV0dXJuIEZpZWxkLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGZpZWxkT3JGcmFnbWVudCkgPyAiX190eXBlbmFtZSIgPT09IGZpZWxkT3JGcmFnbWVudC5uYW1lIDogISghU3ByZWFkLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGZpZWxkT3JGcmFnbWVudCkgfHwgIWZpZWxkT3JGcmFnbWVudC5zZWxlY3Rpb25TZXQudHlwZVNjaGVtYS5pbXBsZW1lbnRzTm9kZSkgJiYgc2VsZWN0aW9uc0hhdmVUeXBlbmFtZUZpZWxkKGZpZWxkT3JGcmFnbWVudC5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucyk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGluZGV4U2VsZWN0aW9uc0J5UmVzcG9uc2VLZXkoc2VsZWN0aW9ucykgewogICAgZnVuY3Rpb24gYXNzaWduT3JQdXNoKG9iaiwga2V5LCB2YWx1ZSkgewogICAgICBBcnJheS5pc0FycmF5KG9ialtrZXldKSA/IG9ialtrZXldLnB1c2godmFsdWUpIDogb2JqW2tleV0gPSBbdmFsdWVdOwogICAgfQoKICAgIHZhciB1bmZyb3plbk9iamVjdCA9IHNlbGVjdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHNlbGVjdGlvbikgewogICAgICB2YXIgcmVzcG9uc2VLZXlzOwogICAgICBzZWxlY3Rpb24ucmVzcG9uc2VLZXkgPyBhc3NpZ25PclB1c2goYWNjLCBzZWxlY3Rpb24ucmVzcG9uc2VLZXksIHNlbGVjdGlvbikgOiBPYmplY3Qua2V5cyhzZWxlY3Rpb24uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnNCeVJlc3BvbnNlS2V5KS5mb3JFYWNoKGZ1bmN0aW9uIChyZXNwb25zZUtleSkgewogICAgICAgIGFzc2lnbk9yUHVzaChhY2MsIHJlc3BvbnNlS2V5LCBzZWxlY3Rpb24pOwogICAgICB9KTsKICAgICAgcmV0dXJuIGFjYzsKICAgIH0sIHt9KTsKICAgIHJldHVybiBPYmplY3Qua2V5cyh1bmZyb3plbk9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIE9iamVjdC5mcmVlemUodW5mcm96ZW5PYmplY3Rba2V5XSk7CiAgICB9KSwgT2JqZWN0LmZyZWV6ZSh1bmZyb3plbk9iamVjdCk7CiAgfQoKICB2YXIgU2VsZWN0aW9uU2V0ID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gU2VsZWN0aW9uU2V0KHR5cGVCdW5kbGUsIHR5cGUsIGJ1aWxkZXJGdW5jdGlvbikgewogICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3Rpb25TZXQpLCB0aGlzLnR5cGVTY2hlbWEgPSAic3RyaW5nIiA9PSB0eXBlb2YgdHlwZSA/IHNjaGVtYUZvclR5cGUodHlwZUJ1bmRsZSwgdHlwZSkgOiB0eXBlLCB0cmFja1R5cGVEZXBlbmRlbmN5KHRoaXMudHlwZVNjaGVtYS5uYW1lKSwgdGhpcy50eXBlQnVuZGxlID0gdHlwZUJ1bmRsZSwgdGhpcy5zZWxlY3Rpb25zID0gW10sIGJ1aWxkZXJGdW5jdGlvbiAmJiBidWlsZGVyRnVuY3Rpb24obmV3IFNlbGVjdGlvblNldEJ1aWxkZXIodGhpcy50eXBlQnVuZGxlLCB0aGlzLnR5cGVTY2hlbWEsIHRoaXMuc2VsZWN0aW9ucykpLCAodGhpcy50eXBlU2NoZW1hLmltcGxlbWVudHNOb2RlIHx8ICJOb2RlIiA9PT0gdGhpcy50eXBlU2NoZW1hLm5hbWUpICYmIChzZWxlY3Rpb25zSGF2ZUlkRmllbGQodGhpcy5zZWxlY3Rpb25zKSB8fCB0aGlzLnNlbGVjdGlvbnMudW5zaGlmdChuZXcgRmllbGQoImlkIiwge30sIG5ldyBTZWxlY3Rpb25TZXQodHlwZUJ1bmRsZSwgIklEIikpKSksICJJTlRFUkZBQ0UiID09PSB0aGlzLnR5cGVTY2hlbWEua2luZCAmJiAoc2VsZWN0aW9uc0hhdmVUeXBlbmFtZUZpZWxkKHRoaXMuc2VsZWN0aW9ucykgfHwgdGhpcy5zZWxlY3Rpb25zLnVuc2hpZnQobmV3IEZpZWxkKCJfX3R5cGVuYW1lIiwge30sIG5ldyBTZWxlY3Rpb25TZXQodHlwZUJ1bmRsZSwgIlN0cmluZyIpKSkpLCB0aGlzLnNlbGVjdGlvbnNCeVJlc3BvbnNlS2V5ID0gaW5kZXhTZWxlY3Rpb25zQnlSZXNwb25zZUtleSh0aGlzLnNlbGVjdGlvbnMpLCBPYmplY3QuZnJlZXplKHRoaXMuc2VsZWN0aW9ucyksIE9iamVjdC5mcmVlemUodGhpcyk7CiAgICB9CgogICAgcmV0dXJuIGNyZWF0ZUNsYXNzKFNlbGVjdGlvblNldCwgW3sKICAgICAga2V5OiAidG9TdHJpbmciLAogICAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuICJTQ0FMQVIiID09PSB0aGlzLnR5cGVTY2hlbWEua2luZCB8fCAiRU5VTSIgPT09IHRoaXMudHlwZVNjaGVtYS5raW5kID8gIiIgOiAiIHsgIiArIGpvaW4odGhpcy5zZWxlY3Rpb25zKSArICIgfSI7CiAgICAgIH0KICAgIH1dKSwgU2VsZWN0aW9uU2V0OwogIH0oKSwKICAgICAgU2VsZWN0aW9uU2V0QnVpbGRlciA9IGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFNlbGVjdGlvblNldEJ1aWxkZXIodHlwZUJ1bmRsZSwgdHlwZVNjaGVtYSwgc2VsZWN0aW9ucykgewogICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3Rpb25TZXRCdWlsZGVyKSwgdGhpcy50eXBlQnVuZGxlID0gdHlwZUJ1bmRsZSwgdGhpcy50eXBlU2NoZW1hID0gdHlwZVNjaGVtYSwgdGhpcy5zZWxlY3Rpb25zID0gc2VsZWN0aW9uczsKICAgIH0KCiAgICByZXR1cm4gY3JlYXRlQ2xhc3MoU2VsZWN0aW9uU2V0QnVpbGRlciwgW3sKICAgICAga2V5OiAiaGFzU2VsZWN0aW9uV2l0aFJlc3BvbnNlS2V5IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1NlbGVjdGlvbldpdGhSZXNwb25zZUtleShyZXNwb25zZUtleSkgewogICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbnMuc29tZShmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICAgIHJldHVybiBmaWVsZC5yZXNwb25zZUtleSA9PT0gcmVzcG9uc2VLZXk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYWRkIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChzZWxlY3Rpb25PckZpZWxkTmFtZSkgewogICAgICAgIHZhciBzZWxlY3Rpb24gPSB2b2lkIDA7CgogICAgICAgIGlmICgiW29iamVjdCBTdHJpbmddIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNlbGVjdGlvbk9yRmllbGROYW1lKSkgewogICAgICAgICAgdHJhY2tGaWVsZERlcGVuZGVuY3kodGhpcy50eXBlU2NoZW1hLm5hbWUsIHNlbGVjdGlvbk9yRmllbGROYW1lKTsKCiAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICAgICAgcmVzdFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07CiAgICAgICAgICB9CgogICAgICAgICAgc2VsZWN0aW9uID0gdGhpcy5maWVsZC5hcHBseSh0aGlzLCBbc2VsZWN0aW9uT3JGaWVsZE5hbWVdLmNvbmNhdChyZXN0KSk7CiAgICAgICAgfSBlbHNlIEZpZWxkLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHNlbGVjdGlvbk9yRmllbGROYW1lKSAmJiB0cmFja0ZpZWxkRGVwZW5kZW5jeSh0aGlzLnR5cGVTY2hlbWEubmFtZSwgc2VsZWN0aW9uT3JGaWVsZE5hbWUubmFtZSksIHNlbGVjdGlvbiA9IHNlbGVjdGlvbk9yRmllbGROYW1lOwoKICAgICAgICBpZiAoc2VsZWN0aW9uLnJlc3BvbnNlS2V5ICYmIHRoaXMuaGFzU2VsZWN0aW9uV2l0aFJlc3BvbnNlS2V5KHNlbGVjdGlvbi5yZXNwb25zZUtleSkpIHRocm93IG5ldyBFcnJvcigiVGhlIGZpZWxkIG5hbWUgb3IgYWxpYXMgJyIgKyBzZWxlY3Rpb24ucmVzcG9uc2VLZXkgKyAiJyBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkLiIpOwogICAgICAgIHRoaXMuc2VsZWN0aW9ucy5wdXNoKHNlbGVjdGlvbik7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZmllbGQiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gZmllbGQobmFtZSkgewogICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgY3JlYXRpb25BcmdzID0gQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykgewogICAgICAgICAgY3JlYXRpb25BcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdOwogICAgICAgIH0KCiAgICAgICAgdmFyIHBhcnNlZEFyZ3MgPSBwYXJzZUZpZWxkQ3JlYXRpb25BcmdzKGNyZWF0aW9uQXJncyksCiAgICAgICAgICAgIG9wdGlvbnMgPSBwYXJzZWRBcmdzLm9wdGlvbnMsCiAgICAgICAgICAgIGNhbGxiYWNrID0gcGFyc2VkQXJncy5jYWxsYmFjaywKICAgICAgICAgICAgc2VsZWN0aW9uU2V0ID0gcGFyc2VkQXJncy5zZWxlY3Rpb25TZXQ7CgogICAgICAgIGlmICghc2VsZWN0aW9uU2V0KSB7CiAgICAgICAgICBpZiAoIXRoaXMudHlwZVNjaGVtYS5maWVsZEJhc2VUeXBlc1tuYW1lXSkgdGhyb3cgbmV3IEVycm9yKCdObyBmaWVsZCBvZiBuYW1lICInICsgbmFtZSArICciIGZvdW5kIG9uIHR5cGUgIicgKyB0aGlzLnR5cGVTY2hlbWEubmFtZSArICciIGluIHNjaGVtYScpOwogICAgICAgICAgdmFyIGZpZWxkQmFzZVR5cGUgPSBzY2hlbWFGb3JUeXBlKHRoaXMudHlwZUJ1bmRsZSwgdGhpcy50eXBlU2NoZW1hLmZpZWxkQmFzZVR5cGVzW25hbWVdKTsKICAgICAgICAgIHNlbGVjdGlvblNldCA9IG5ldyBTZWxlY3Rpb25TZXQodGhpcy50eXBlQnVuZGxlLCBmaWVsZEJhc2VUeXBlLCBjYWxsYmFjayk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmV3IEZpZWxkKG5hbWUsIG9wdGlvbnMsIHNlbGVjdGlvblNldCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiaW5saW5lRnJhZ21lbnRPbiIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbmxpbmVGcmFnbWVudE9uKHR5cGVOYW1lKSB7CiAgICAgICAgdmFyIGJ1aWxkZXJGdW5jdGlvbk9yU2VsZWN0aW9uU2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiBub29wLAogICAgICAgICAgICBzZWxlY3Rpb25TZXQgPSB2b2lkIDA7CiAgICAgICAgcmV0dXJuIHNlbGVjdGlvblNldCA9IFNlbGVjdGlvblNldC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihidWlsZGVyRnVuY3Rpb25PclNlbGVjdGlvblNldCkgPyBidWlsZGVyRnVuY3Rpb25PclNlbGVjdGlvblNldCA6IG5ldyBTZWxlY3Rpb25TZXQodGhpcy50eXBlQnVuZGxlLCBzY2hlbWFGb3JUeXBlKHRoaXMudHlwZUJ1bmRsZSwgdHlwZU5hbWUpLCBidWlsZGVyRnVuY3Rpb25PclNlbGVjdGlvblNldCksIG5ldyBJbmxpbmVGcmFnbWVudCh0eXBlTmFtZSwgc2VsZWN0aW9uU2V0KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJhZGRGaWVsZCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRGaWVsZChuYW1lKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBjcmVhdGlvbkFyZ3MgPSBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7CiAgICAgICAgICBjcmVhdGlvbkFyZ3NbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107CiAgICAgICAgfQoKICAgICAgICB0aGlzLmFkZC5hcHBseSh0aGlzLCBbbmFtZV0uY29uY2F0KGNyZWF0aW9uQXJncykpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImFkZENvbm5lY3Rpb24iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ29ubmVjdGlvbihuYW1lKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBjcmVhdGlvbkFyZ3MgPSBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7CiAgICAgICAgICBjcmVhdGlvbkFyZ3NbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07CiAgICAgICAgfQoKICAgICAgICB2YXIgX3BhcnNlRmllbGRDcmVhdGlvbkFyID0gcGFyc2VGaWVsZENyZWF0aW9uQXJncyhjcmVhdGlvbkFyZ3MpLAogICAgICAgICAgICBvcHRpb25zID0gX3BhcnNlRmllbGRDcmVhdGlvbkFyLm9wdGlvbnMsCiAgICAgICAgICAgIGNhbGxiYWNrID0gX3BhcnNlRmllbGRDcmVhdGlvbkFyLmNhbGxiYWNrLAogICAgICAgICAgICBzZWxlY3Rpb25TZXQgPSBfcGFyc2VGaWVsZENyZWF0aW9uQXIuc2VsZWN0aW9uU2V0OwoKICAgICAgICB0aGlzLmFkZChuYW1lLCBvcHRpb25zLCBmdW5jdGlvbiAoY29ubmVjdGlvbikgewogICAgICAgICAgY29ubmVjdGlvbi5hZGQoInBhZ2VJbmZvIiwge30sIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgICB9KSwgY29ubmVjdGlvbi5hZGQoImVkZ2VzIiwge30sIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGRGaWVsZCgibm9kZSIsIHt9LCBzZWxlY3Rpb25TZXQgfHwgY2FsbGJhY2spOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYWRkSW5saW5lRnJhZ21lbnRPbiIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRJbmxpbmVGcmFnbWVudE9uKHR5cGVOYW1lKSB7CiAgICAgICAgdmFyIGZpZWxkVHlwZUNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiBub29wOwogICAgICAgIHRoaXMuYWRkKHRoaXMuaW5saW5lRnJhZ21lbnRPbih0eXBlTmFtZSwgZmllbGRUeXBlQ2IpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJhZGRGcmFnbWVudCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRGcmFnbWVudChmcmFnbWVudFNwcmVhZCkgewogICAgICAgIHRoaXMuYWRkKGZyYWdtZW50U3ByZWFkKTsKICAgICAgfQogICAgfV0pLCBTZWxlY3Rpb25TZXRCdWlsZGVyOwogIH0oKTsKCiAgZnVuY3Rpb24gcGFyc2VBcmdzKGFyZ3MpIHsKICAgIHZhciBuYW1lID0gdm9pZCAwLAogICAgICAgIHZhcmlhYmxlcyA9IHZvaWQgMCwKICAgICAgICBzZWxlY3Rpb25TZXRDYWxsYmFjayA9IHZvaWQgMDsKCiAgICBpZiAoMyA9PT0gYXJncy5sZW5ndGgpIHsKICAgICAgdmFyIF9hcmdzID0gc2xpY2VkVG9BcnJheShhcmdzLCAzKTsKCiAgICAgIG5hbWUgPSBfYXJnc1swXSwgdmFyaWFibGVzID0gX2FyZ3NbMV0sIHNlbGVjdGlvblNldENhbGxiYWNrID0gX2FyZ3NbMl07CiAgICB9IGVsc2UgMiA9PT0gYXJncy5sZW5ndGggPyAoIltvYmplY3QgU3RyaW5nXSIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmdzWzBdKSA/IChuYW1lID0gYXJnc1swXSwgdmFyaWFibGVzID0gbnVsbCkgOiBBcnJheS5pc0FycmF5KGFyZ3NbMF0pICYmICh2YXJpYWJsZXMgPSBhcmdzWzBdLCBuYW1lID0gbnVsbCksIHNlbGVjdGlvblNldENhbGxiYWNrID0gYXJnc1sxXSkgOiAoc2VsZWN0aW9uU2V0Q2FsbGJhY2sgPSBhcmdzWzBdLCBuYW1lID0gbnVsbCk7CgogICAgcmV0dXJuIHsKICAgICAgbmFtZTogbmFtZSwKICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsCiAgICAgIHNlbGVjdGlvblNldENhbGxiYWNrOiBzZWxlY3Rpb25TZXRDYWxsYmFjawogICAgfTsKICB9CgogIHZhciBWYXJpYWJsZURlZmluaXRpb25zID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gVmFyaWFibGVEZWZpbml0aW9ucyh2YXJpYWJsZURlZmluaXRpb25zKSB7CiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFZhcmlhYmxlRGVmaW5pdGlvbnMpLCB0aGlzLnZhcmlhYmxlRGVmaW5pdGlvbnMgPSB2YXJpYWJsZURlZmluaXRpb25zID8gW10uY29uY2F0KHRvQ29uc3VtYWJsZUFycmF5KHZhcmlhYmxlRGVmaW5pdGlvbnMpKSA6IFtdLCBPYmplY3QuZnJlZXplKHRoaXMudmFyaWFibGVEZWZpbml0aW9ucyksIE9iamVjdC5mcmVlemUodGhpcyk7CiAgICB9CgogICAgcmV0dXJuIGNyZWF0ZUNsYXNzKFZhcmlhYmxlRGVmaW5pdGlvbnMsIFt7CiAgICAgIGtleTogInRvU3RyaW5nIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICAgIHJldHVybiAwID09PSB0aGlzLnZhcmlhYmxlRGVmaW5pdGlvbnMubGVuZ3RoID8gIiIgOiAiICgiICsgam9pbih0aGlzLnZhcmlhYmxlRGVmaW5pdGlvbnMpICsgIikgIjsKICAgICAgfQogICAgfV0pLCBWYXJpYWJsZURlZmluaXRpb25zOwogIH0oKSwKICAgICAgT3BlcmF0aW9uID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gT3BlcmF0aW9uKHR5cGVCdW5kbGUsIG9wZXJhdGlvblR5cGUpIHsKICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgT3BlcmF0aW9uKTsKCiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldOwogICAgICB9CgogICAgICB2YXIgX3BhcnNlQXJncyA9IHBhcnNlQXJncyhhcmdzKSwKICAgICAgICAgIG5hbWUgPSBfcGFyc2VBcmdzLm5hbWUsCiAgICAgICAgICB2YXJpYWJsZXMgPSBfcGFyc2VBcmdzLnZhcmlhYmxlcywKICAgICAgICAgIHNlbGVjdGlvblNldENhbGxiYWNrID0gX3BhcnNlQXJncy5zZWxlY3Rpb25TZXRDYWxsYmFjazsKCiAgICAgIHRoaXMudHlwZUJ1bmRsZSA9IHR5cGVCdW5kbGUsIHRoaXMubmFtZSA9IG5hbWUsIHRoaXMudmFyaWFibGVEZWZpbml0aW9ucyA9IG5ldyBWYXJpYWJsZURlZmluaXRpb25zKHZhcmlhYmxlcyksIHRoaXMub3BlcmF0aW9uVHlwZSA9IG9wZXJhdGlvblR5cGUsICJxdWVyeSIgPT09IG9wZXJhdGlvblR5cGUgPyAodGhpcy5zZWxlY3Rpb25TZXQgPSBuZXcgU2VsZWN0aW9uU2V0KHR5cGVCdW5kbGUsIHR5cGVCdW5kbGUucXVlcnlUeXBlLCBzZWxlY3Rpb25TZXRDYWxsYmFjayksIHRoaXMudHlwZVNjaGVtYSA9IHNjaGVtYUZvclR5cGUodHlwZUJ1bmRsZSwgdHlwZUJ1bmRsZS5xdWVyeVR5cGUpKSA6ICh0aGlzLnNlbGVjdGlvblNldCA9IG5ldyBTZWxlY3Rpb25TZXQodHlwZUJ1bmRsZSwgdHlwZUJ1bmRsZS5tdXRhdGlvblR5cGUsIHNlbGVjdGlvblNldENhbGxiYWNrKSwgdGhpcy50eXBlU2NoZW1hID0gc2NoZW1hRm9yVHlwZSh0eXBlQnVuZGxlLCB0eXBlQnVuZGxlLm11dGF0aW9uVHlwZSkpLCBPYmplY3QuZnJlZXplKHRoaXMpOwogICAgfQoKICAgIHJldHVybiBjcmVhdGVDbGFzcyhPcGVyYXRpb24sIFt7CiAgICAgIGtleTogInRvU3RyaW5nIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICAgIHZhciBuYW1lU3RyaW5nID0gdGhpcy5uYW1lID8gIiAiICsgdGhpcy5uYW1lIDogIiI7CiAgICAgICAgcmV0dXJuICIiICsgdGhpcy5vcGVyYXRpb25UeXBlICsgbmFtZVN0cmluZyArIHRoaXMudmFyaWFibGVEZWZpbml0aW9ucyArIHRoaXMuc2VsZWN0aW9uU2V0OwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImlzQW5vbnltb3VzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7CiAgICAgICAgcmV0dXJuICF0aGlzLm5hbWU7CiAgICAgIH0KICAgIH1dKSwgT3BlcmF0aW9uOwogIH0oKSwKICAgICAgUXVlcnkgPSBmdW5jdGlvbiAoX09wZXJhdGlvbikgewogICAgZnVuY3Rpb24gUXVlcnkodHlwZUJ1bmRsZSkgewogICAgICB2YXIgX3JlZjsKCiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFF1ZXJ5KTsKCiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldOwogICAgICB9CgogICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFF1ZXJ5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUXVlcnkpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzLCB0eXBlQnVuZGxlLCAicXVlcnkiXS5jb25jYXQoYXJncykpKTsKICAgIH0KCiAgICByZXR1cm4gaW5oZXJpdHMoUXVlcnksIF9PcGVyYXRpb24pLCBRdWVyeTsKICB9KE9wZXJhdGlvbiksCiAgICAgIE11dGF0aW9uID0gZnVuY3Rpb24gKF9PcGVyYXRpb24pIHsKICAgIGZ1bmN0aW9uIE11dGF0aW9uKHR5cGVCdW5kbGUpIHsKICAgICAgdmFyIF9yZWY7CgogICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBNdXRhdGlvbik7CgogICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBNdXRhdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE11dGF0aW9uKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpcywgdHlwZUJ1bmRsZSwgIm11dGF0aW9uIl0uY29uY2F0KGFyZ3MpKSk7CiAgICB9CgogICAgcmV0dXJuIGluaGVyaXRzKE11dGF0aW9uLCBfT3BlcmF0aW9uKSwgTXV0YXRpb247CiAgfShPcGVyYXRpb24pOwoKICBmdW5jdGlvbiBpc0Fub255bW91cyhvcGVyYXRpb24pIHsKICAgIHJldHVybiBvcGVyYXRpb24uaXNBbm9ueW1vdXM7CiAgfQoKICBmdW5jdGlvbiBoYXNBbm9ueW1vdXNPcGVyYXRpb25zKG9wZXJhdGlvbnMpIHsKICAgIHJldHVybiBvcGVyYXRpb25zLnNvbWUoaXNBbm9ueW1vdXMpOwogIH0KCiAgZnVuY3Rpb24gaGFzRHVwbGljYXRlT3BlcmF0aW9uTmFtZXMob3BlcmF0aW9ucykgewogICAgdmFyIG5hbWVzID0gb3BlcmF0aW9ucy5tYXAoZnVuY3Rpb24gKG9wZXJhdGlvbikgewogICAgICByZXR1cm4gb3BlcmF0aW9uLm5hbWU7CiAgICB9KTsKICAgIHJldHVybiBuYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKGhhc0R1cGxpY2F0ZXMsIG5hbWUsIGluZGV4KSB7CiAgICAgIHJldHVybiBoYXNEdXBsaWNhdGVzIHx8IG5hbWVzLmluZGV4T2YobmFtZSkgIT09IGluZGV4OwogICAgfSwgITEpOwogIH0KCiAgZnVuY3Rpb24gZXh0cmFjdE9wZXJhdGlvbih0eXBlQnVuZGxlLCBvcGVyYXRpb25UeXBlKSB7CiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgcmV0dXJuIE9wZXJhdGlvbi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihhcmdzWzBdKSA/IGFyZ3NbMF0gOiAicXVlcnkiID09PSBvcGVyYXRpb25UeXBlID8gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShRdWVyeSwgW251bGxdLmNvbmNhdChbdHlwZUJ1bmRsZV0sIGFyZ3MpKSkoKSA6IG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoTXV0YXRpb24sIFtudWxsXS5jb25jYXQoW3R5cGVCdW5kbGVdLCBhcmdzKSkpKCk7CiAgfQoKICBmdW5jdGlvbiBpc0ludmFsaWRPcGVyYXRpb25Db21iaW5hdGlvbihvcGVyYXRpb25zKSB7CiAgICByZXR1cm4gMSAhPT0gb3BlcmF0aW9ucy5sZW5ndGggJiYgKGhhc0Fub255bW91c09wZXJhdGlvbnMob3BlcmF0aW9ucykgfHwgaGFzRHVwbGljYXRlT3BlcmF0aW9uTmFtZXMob3BlcmF0aW9ucykpOwogIH0KCiAgZnVuY3Rpb24gZnJhZ21lbnROYW1lSXNOb3RVbmlxdWUoZXhpc3RpbmdEZWZpbml0aW9ucywgbmFtZSkgewogICAgcmV0dXJuIGV4aXN0aW5nRGVmaW5pdGlvbnMuc29tZShmdW5jdGlvbiAoZGVmaW5pdGlvbikgewogICAgICByZXR1cm4gZGVmaW5pdGlvbi5uYW1lID09PSBuYW1lOwogICAgfSk7CiAgfQoKICB2YXIgRG9jdW1lbnQgPSBmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBEb2N1bWVudCh0eXBlQnVuZGxlKSB7CiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIERvY3VtZW50KSwgdGhpcy50eXBlQnVuZGxlID0gdHlwZUJ1bmRsZSwgdGhpcy5kZWZpbml0aW9ucyA9IFtdOwogICAgfQoKICAgIHJldHVybiBjcmVhdGVDbGFzcyhEb2N1bWVudCwgW3sKICAgICAga2V5OiAidG9TdHJpbmciLAogICAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIGpvaW4odGhpcy5kZWZpbml0aW9ucyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYWRkT3BlcmF0aW9uIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE9wZXJhdGlvbihvcGVyYXRpb25UeXBlKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykgewogICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTsKICAgICAgICB9CgogICAgICAgIHZhciBvcGVyYXRpb24gPSBleHRyYWN0T3BlcmF0aW9uLmFwcGx5KHZvaWQgMCwgW3RoaXMudHlwZUJ1bmRsZSwgb3BlcmF0aW9uVHlwZV0uY29uY2F0KGFyZ3MpKTsKICAgICAgICBpZiAoaXNJbnZhbGlkT3BlcmF0aW9uQ29tYmluYXRpb24odGhpcy5vcGVyYXRpb25zLmNvbmNhdChvcGVyYXRpb24pKSkgdGhyb3cgbmV3IEVycm9yKCJBbGwgb3BlcmF0aW9ucyBtdXN0IGJlIHVuaXF1ZWx5IG5hbWVkIG9uIGEgbXVsdGktb3BlcmF0aW9uIGRvY3VtZW50Iik7CiAgICAgICAgdGhpcy5kZWZpbml0aW9ucy5wdXNoKG9wZXJhdGlvbik7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYWRkUXVlcnkiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUXVlcnkoKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHsKICAgICAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTsKICAgICAgICB9CgogICAgICAgIHRoaXMuYWRkT3BlcmF0aW9uLmFwcGx5KHRoaXMsIFsicXVlcnkiXS5jb25jYXQoYXJncykpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImFkZE11dGF0aW9uIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE11dGF0aW9uKCkgewogICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7CiAgICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07CiAgICAgICAgfQoKICAgICAgICB0aGlzLmFkZE9wZXJhdGlvbi5hcHBseSh0aGlzLCBbIm11dGF0aW9uIl0uY29uY2F0KGFyZ3MpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJkZWZpbmVGcmFnbWVudCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZpbmVGcmFnbWVudChuYW1lLCBvblR5cGUsIGJ1aWxkZXJGdW5jdGlvbikgewogICAgICAgIGlmIChmcmFnbWVudE5hbWVJc05vdFVuaXF1ZSh0aGlzLmZyYWdtZW50RGVmaW5pdGlvbnMsIG5hbWUpKSB0aHJvdyBuZXcgRXJyb3IoIkFsbCBmcmFnbWVudHMgbXVzdCBiZSB1bmlxdWVseSBuYW1lZCBvbiBhIG11bHRpLWZyYWdtZW50IGRvY3VtZW50Iik7CiAgICAgICAgdmFyIHNlbGVjdGlvblNldCA9IG5ldyBTZWxlY3Rpb25TZXQodGhpcy50eXBlQnVuZGxlLCBvblR5cGUsIGJ1aWxkZXJGdW5jdGlvbiksCiAgICAgICAgICAgIGZyYWdtZW50ID0gbmV3IEZyYWdtZW50RGVmaW5pdGlvbihuYW1lLCBvblR5cGUsIHNlbGVjdGlvblNldCk7CiAgICAgICAgcmV0dXJuIHRoaXMuZGVmaW5pdGlvbnMucHVzaChmcmFnbWVudCksIGZyYWdtZW50LnNwcmVhZDsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJvcGVyYXRpb25zIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7CiAgICAgICAgICByZXR1cm4gT3BlcmF0aW9uLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGRlZmluaXRpb24pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImZyYWdtZW50RGVmaW5pdGlvbnMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5kZWZpbml0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGRlZmluaXRpb24pIHsKICAgICAgICAgIHJldHVybiBGcmFnbWVudERlZmluaXRpb24ucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoZGVmaW5pdGlvbik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH1dKSwgRG9jdW1lbnQ7CiAgfSgpLAogICAgICBHcmFwaE1vZGVsID0gZnVuY3Rpb24gR3JhcGhNb2RlbChhdHRycykgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBHcmFwaE1vZGVsKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICJhdHRycyIsIHsKICAgICAgdmFsdWU6IGF0dHJzLAogICAgICBlbnVtZXJhYmxlOiAhMQogICAgfSksIE9iamVjdC5rZXlzKHRoaXMuYXR0cnMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHJldHVybiAhKGtleSBpbiBfdGhpcyk7CiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgdmFyIGRlc2NyaXB0b3IgPSB2b2lkIDA7CiAgICAgIGRlc2NyaXB0b3IgPSBudWxsID09PSBhdHRyc1trZXldID8gewogICAgICAgIGVudW1lcmFibGU6ICEwLAogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9IDogewogICAgICAgIGVudW1lcmFibGU6ICEwLAogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnNba2V5XS52YWx1ZU9mKCk7CiAgICAgICAgfQogICAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXMsIGtleSwgZGVzY3JpcHRvcik7CiAgICB9KTsKICB9LAogICAgICBDbGFzc1JlZ2lzdHJ5ID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gQ2xhc3NSZWdpc3RyeSgpIHsKICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2xhc3NSZWdpc3RyeSksIHRoaXMuY2xhc3NTdG9yZSA9IHt9OwogICAgfQoKICAgIHJldHVybiBjcmVhdGVDbGFzcyhDbGFzc1JlZ2lzdHJ5LCBbewogICAgICBrZXk6ICJyZWdpc3RlckNsYXNzRm9yVHlwZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlckNsYXNzRm9yVHlwZShjb25zdHJ1Y3RvciwgdHlwZSkgewogICAgICAgIHRoaXMuY2xhc3NTdG9yZVt0eXBlXSA9IGNvbnN0cnVjdG9yOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInVucmVnaXN0ZXJDbGFzc0ZvclR5cGUiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlckNsYXNzRm9yVHlwZSh0eXBlKSB7CiAgICAgICAgZGVsZXRlIHRoaXMuY2xhc3NTdG9yZVt0eXBlXTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJjbGFzc0ZvclR5cGUiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gY2xhc3NGb3JUeXBlKHR5cGUpIHsKICAgICAgICByZXR1cm4gdGhpcy5jbGFzc1N0b3JlW3R5cGVdIHx8IEdyYXBoTW9kZWw7CiAgICAgIH0KICAgIH1dKSwgQ2xhc3NSZWdpc3RyeTsKICB9KCk7CgogIGZ1bmN0aW9uIGlzVmFsdWUoYXJnKSB7CiAgICByZXR1cm4gIltvYmplY3QgTnVsbF0iICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKSAmJiAiW29iamVjdCBVbmRlZmluZWRdIiAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZyk7CiAgfQoKICBmdW5jdGlvbiBpc05vZGVDb250ZXh0KGNvbnRleHQpIHsKICAgIHJldHVybiBjb250ZXh0LnNlbGVjdGlvbi5zZWxlY3Rpb25TZXQudHlwZVNjaGVtYS5pbXBsZW1lbnRzTm9kZTsKICB9CgogIGZ1bmN0aW9uIGlzQ29ubmVjdGlvbihjb250ZXh0KSB7CiAgICByZXR1cm4gY29udGV4dC5zZWxlY3Rpb24uc2VsZWN0aW9uU2V0LnR5cGVTY2hlbWEubmFtZS5lbmRzV2l0aCgiQ29ubmVjdGlvbiIpOwogIH0KCiAgZnVuY3Rpb24gbmVhcmVzdE5vZGUoY29udGV4dCkgewogICAgcmV0dXJuIG51bGwgPT0gY29udGV4dCA/IG51bGwgOiBpc05vZGVDb250ZXh0KGNvbnRleHQpID8gY29udGV4dCA6IG5lYXJlc3ROb2RlKGNvbnRleHQucGFyZW50KTsKICB9CgogIGZ1bmN0aW9uIGNvbnRleHRzRnJvbVJvb3QoY29udGV4dCkgewogICAgcmV0dXJuIGNvbnRleHQucGFyZW50ID8gY29udGV4dHNGcm9tUm9vdChjb250ZXh0LnBhcmVudCkuY29uY2F0KGNvbnRleHQpIDogW2NvbnRleHRdOwogIH0KCiAgZnVuY3Rpb24gY29udGV4dHNGcm9tTmVhcmVzdE5vZGUoY29udGV4dCkgewogICAgcmV0dXJuIGNvbnRleHQuc2VsZWN0aW9uLnNlbGVjdGlvblNldC50eXBlU2NoZW1hLmltcGxlbWVudHNOb2RlID8gW2NvbnRleHRdIDogY29udGV4dHNGcm9tTmVhcmVzdE5vZGUoY29udGV4dC5wYXJlbnQpLmNvbmNhdChjb250ZXh0KTsKICB9CgogIGZ1bmN0aW9uIGluaXRpYWxpemVEb2N1bWVudEFuZFZhcnMoY3VycmVudENvbnRleHQsIGNvbnRleHRDaGFpbikgewogICAgdmFyIGxhc3RJbkNoYWluID0gY29udGV4dENoYWluW2NvbnRleHRDaGFpbi5sZW5ndGggLSAxXSwKICAgICAgICBmaXJzdCA9IGxhc3RJbkNoYWluLnNlbGVjdGlvbi5hcmdzLmZpcnN0LAogICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnMgPSBPYmplY3Qua2V5cyhsYXN0SW5DaGFpbi5zZWxlY3Rpb24uYXJncykuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgcmV0dXJuIGlzVmFyaWFibGUobGFzdEluQ2hhaW4uc2VsZWN0aW9uLmFyZ3Nba2V5XSk7CiAgICB9KS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgICByZXR1cm4gbGFzdEluQ2hhaW4uc2VsZWN0aW9uLmFyZ3Nba2V5XTsKICAgIH0pLAogICAgICAgIGZpcnN0VmFyID0gdmFyaWFibGVEZWZpbml0aW9ucy5maW5kKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7CiAgICAgIHJldHVybiAiZmlyc3QiID09PSBkZWZpbml0aW9uLm5hbWU7CiAgICB9KSwKICAgICAgICBkb2N1bWVudDsKICAgIHJldHVybiBmaXJzdFZhciB8fCAoaXNWYXJpYWJsZShmaXJzdCkgPyBmaXJzdFZhciA9IGZpcnN0IDogKGZpcnN0VmFyID0gdmFyaWFibGUoImZpcnN0IiwgIkludCIsIGZpcnN0KSwgdmFyaWFibGVEZWZpbml0aW9ucy5wdXNoKGZpcnN0VmFyKSkpLCBbbmV3IERvY3VtZW50KGN1cnJlbnRDb250ZXh0LnNlbGVjdGlvbi5zZWxlY3Rpb25TZXQudHlwZUJ1bmRsZSksIHZhcmlhYmxlRGVmaW5pdGlvbnMsIGZpcnN0VmFyXTsKICB9CgogIGZ1bmN0aW9uIGFkZE5leHRGaWVsZFRvKGN1cnJlbnRTZWxlY3Rpb24sIGNvbnRleHRDaGFpbiwgcGF0aCwgY3Vyc29yKSB7CiAgICB2YXIgbmV4dENvbnRleHQgPSBjb250ZXh0Q2hhaW4uc2hpZnQoKTsKICAgIGlmIChwYXRoLnB1c2gobmV4dENvbnRleHQuc2VsZWN0aW9uLnJlc3BvbnNlS2V5KSwgY29udGV4dENoYWluLmxlbmd0aCkgY3VycmVudFNlbGVjdGlvbi5hZGQobmV4dENvbnRleHQuc2VsZWN0aW9uLm5hbWUsIHsKICAgICAgYWxpYXM6IG5leHRDb250ZXh0LnNlbGVjdGlvbi5hbGlhcywKICAgICAgYXJnczogbmV4dENvbnRleHQuc2VsZWN0aW9uLmFyZ3MKICAgIH0sIGZ1bmN0aW9uIChuZXdTZWxlY3Rpb24pIHsKICAgICAgYWRkTmV4dEZpZWxkVG8obmV3U2VsZWN0aW9uLCBjb250ZXh0Q2hhaW4sIHBhdGgsIGN1cnNvcik7CiAgICB9KTtlbHNlIHsKICAgICAgdmFyIGVkZ2VzRmllbGQsCiAgICAgICAgICBub2RlRmllbGQgPSBuZXh0Q29udGV4dC5zZWxlY3Rpb24uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZmluZChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICByZXR1cm4gImVkZ2VzIiA9PT0gZmllbGQubmFtZTsKICAgICAgfSkuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZmluZChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICByZXR1cm4gIm5vZGUiID09PSBmaWVsZC5uYW1lOwogICAgICB9KSwKICAgICAgICAgIGZpcnN0ID0gdm9pZCAwOwogICAgICBmaXJzdCA9IGlzVmFyaWFibGUobmV4dENvbnRleHQuc2VsZWN0aW9uLmFyZ3MuZmlyc3QpID8gbmV4dENvbnRleHQuc2VsZWN0aW9uLmFyZ3MuZmlyc3QgOiB2YXJpYWJsZSgiZmlyc3QiLCAiSW50IiwgbmV4dENvbnRleHQuc2VsZWN0aW9uLmFyZ3MuZmlyc3QpOwogICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICBhbGlhczogbmV4dENvbnRleHQuc2VsZWN0aW9uLmFsaWFzLAogICAgICAgIGFyZ3M6IE9iamVjdC5hc3NpZ24oe30sIG5leHRDb250ZXh0LnNlbGVjdGlvbi5hcmdzLCB7CiAgICAgICAgICBhZnRlcjogY3Vyc29yLAogICAgICAgICAgZmlyc3Q6IGZpcnN0CiAgICAgICAgfSkKICAgICAgfTsKICAgICAgY3VycmVudFNlbGVjdGlvbi5hZGRDb25uZWN0aW9uKG5leHRDb250ZXh0LnNlbGVjdGlvbi5uYW1lLCBvcHRpb25zLCBub2RlRmllbGQuc2VsZWN0aW9uU2V0KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNvbGxlY3RGcmFnbWVudHMoc2VsZWN0aW9ucykgewogICAgcmV0dXJuIHNlbGVjdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChmcmFnbWVudERlZmluaXRpb25zLCBmaWVsZCkgewogICAgICByZXR1cm4gRnJhZ21lbnRTcHJlYWQucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoZmllbGQpICYmIGZyYWdtZW50RGVmaW5pdGlvbnMucHVzaChmaWVsZC50b0RlZmluaXRpb24oKSksIGZyYWdtZW50RGVmaW5pdGlvbnMucHVzaC5hcHBseShmcmFnbWVudERlZmluaXRpb25zLCB0b0NvbnN1bWFibGVBcnJheShjb2xsZWN0RnJhZ21lbnRzKGZpZWxkLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zKSkpLCBmcmFnbWVudERlZmluaXRpb25zOwogICAgfSwgW10pOwogIH0KCiAgZnVuY3Rpb24gbmV4dFBhZ2VRdWVyeUFuZFBhdGgoY29udGV4dCwgY3Vyc29yKSB7CiAgICB2YXIgbmVhcmVzdE5vZGVDb250ZXh0ID0gbmVhcmVzdE5vZGUoY29udGV4dCk7CiAgICByZXR1cm4gbmVhcmVzdE5vZGVDb250ZXh0ID8gZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2RvY3VtZW50JGRlZmluaXRpb25zLAogICAgICAgICAgcGF0aCA9IFtdLAogICAgICAgICAgbm9kZVR5cGUgPSBuZWFyZXN0Tm9kZUNvbnRleHQuc2VsZWN0aW9uLnNlbGVjdGlvblNldC50eXBlU2NoZW1hLAogICAgICAgICAgbm9kZUlkID0gbmVhcmVzdE5vZGVDb250ZXh0LnJlc3BvbnNlRGF0YS5pZCwKICAgICAgICAgIGNvbnRleHRDaGFpbiA9IGNvbnRleHRzRnJvbU5lYXJlc3ROb2RlKGNvbnRleHQpLAogICAgICAgICAgX2luaXRpYWxpemVEb2N1bWVudEFuID0gaW5pdGlhbGl6ZURvY3VtZW50QW5kVmFycyhjb250ZXh0LCBjb250ZXh0Q2hhaW4pLAogICAgICAgICAgX2luaXRpYWxpemVEb2N1bWVudEFuMiA9IHNsaWNlZFRvQXJyYXkoX2luaXRpYWxpemVEb2N1bWVudEFuLCAyKSwKICAgICAgICAgIGRvY3VtZW50ID0gX2luaXRpYWxpemVEb2N1bWVudEFuMlswXSwKICAgICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnMgPSBfaW5pdGlhbGl6ZURvY3VtZW50QW4yWzFdOwoKICAgICAgZG9jdW1lbnQuYWRkUXVlcnkodmFyaWFibGVEZWZpbml0aW9ucywgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgICBwYXRoLnB1c2goIm5vZGUiKSwgcm9vdC5hZGQoIm5vZGUiLCB7CiAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgIGlkOiBub2RlSWQKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgbm9kZS5hZGRJbmxpbmVGcmFnbWVudE9uKG5vZGVUeXBlLm5hbWUsIGZ1bmN0aW9uIChmcmFnbWVudCkgewogICAgICAgICAgICBhZGROZXh0RmllbGRUbyhmcmFnbWVudCwgY29udGV4dENoYWluLnNsaWNlKDEpLCBwYXRoLCBjdXJzb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB2YXIgZnJhZ21lbnRzID0gY29sbGVjdEZyYWdtZW50cyhkb2N1bWVudC5vcGVyYXRpb25zWzBdLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zKTsKICAgICAgcmV0dXJuIChfZG9jdW1lbnQkZGVmaW5pdGlvbnMgPSBkb2N1bWVudC5kZWZpbml0aW9ucykudW5zaGlmdC5hcHBseShfZG9jdW1lbnQkZGVmaW5pdGlvbnMsIHRvQ29uc3VtYWJsZUFycmF5KGZyYWdtZW50cykpLCBbZG9jdW1lbnQsIHBhdGhdOwogICAgfSA6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9kb2N1bWVudCRkZWZpbml0aW9uczIsCiAgICAgICAgICBwYXRoID0gW10sCiAgICAgICAgICBjb250ZXh0Q2hhaW4gPSBjb250ZXh0c0Zyb21Sb290KGNvbnRleHQpLAogICAgICAgICAgX2luaXRpYWxpemVEb2N1bWVudEFuMyA9IGluaXRpYWxpemVEb2N1bWVudEFuZFZhcnMoY29udGV4dCwgY29udGV4dENoYWluKSwKICAgICAgICAgIF9pbml0aWFsaXplRG9jdW1lbnRBbjQgPSBzbGljZWRUb0FycmF5KF9pbml0aWFsaXplRG9jdW1lbnRBbjMsIDIpLAogICAgICAgICAgZG9jdW1lbnQgPSBfaW5pdGlhbGl6ZURvY3VtZW50QW40WzBdLAogICAgICAgICAgdmFyaWFibGVEZWZpbml0aW9ucyA9IF9pbml0aWFsaXplRG9jdW1lbnRBbjRbMV07CgogICAgICBkb2N1bWVudC5hZGRRdWVyeSh2YXJpYWJsZURlZmluaXRpb25zLCBmdW5jdGlvbiAocm9vdCkgewogICAgICAgIGFkZE5leHRGaWVsZFRvKHJvb3QsIGNvbnRleHRDaGFpbi5zbGljZSgxKSwgcGF0aCwgY3Vyc29yKTsKICAgICAgfSk7CiAgICAgIHZhciBmcmFnbWVudHMgPSBjb2xsZWN0RnJhZ21lbnRzKGRvY3VtZW50Lm9wZXJhdGlvbnNbMF0uc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMpOwogICAgICByZXR1cm4gKF9kb2N1bWVudCRkZWZpbml0aW9uczIgPSBkb2N1bWVudC5kZWZpbml0aW9ucykudW5zaGlmdC5hcHBseShfZG9jdW1lbnQkZGVmaW5pdGlvbnMyLCB0b0NvbnN1bWFibGVBcnJheShmcmFnbWVudHMpKSwgW2RvY3VtZW50LCBwYXRoXTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBoYXNOZXh0UGFnZSQxKGNvbm5lY3Rpb24sIGVkZ2UpIHsKICAgIHJldHVybiBlZGdlICE9PSBjb25uZWN0aW9uLmVkZ2VzW2Nvbm5lY3Rpb24uZWRnZXMubGVuZ3RoIC0gMV0gPyBuZXcgU2NhbGFyKCEwKSA6IGNvbm5lY3Rpb24ucGFnZUluZm8uaGFzTmV4dFBhZ2U7CiAgfQoKICBmdW5jdGlvbiBoYXNQcmV2aW91c1BhZ2UoY29ubmVjdGlvbiwgZWRnZSkgewogICAgcmV0dXJuIGVkZ2UgIT09IGNvbm5lY3Rpb24uZWRnZXNbMF0gPyBuZXcgU2NhbGFyKCEwKSA6IGNvbm5lY3Rpb24ucGFnZUluZm8uaGFzUHJldmlvdXNQYWdlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmb3JtQ29ubmVjdGlvbnModmFyaWFibGVWYWx1ZXMpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoY29udGV4dCwgdmFsdWUpIHsKICAgICAgaWYgKGlzQ29ubmVjdGlvbihjb250ZXh0KSkgewogICAgICAgIGlmICghKHZhbHVlLnBhZ2VJbmZvICYmIHZhbHVlLnBhZ2VJbmZvLmhhc093blByb3BlcnR5KCJoYXNOZXh0UGFnZSIpICYmIHZhbHVlLnBhZ2VJbmZvLmhhc093blByb3BlcnR5KCJoYXNQcmV2aW91c1BhZ2UiKSkpIHRocm93IG5ldyBFcnJvcignQ29ubmVjdGlvbnMgbXVzdCBpbmNsdWRlIHRoZSBzZWxlY3Rpb25zICJwYWdlSW5mbyB7IGhhc05leHRQYWdlLCBoYXNQcmV2aW91c1BhZ2UgfSIuJyk7CiAgICAgICAgcmV0dXJuIHZhbHVlLmVkZ2VzLm1hcChmdW5jdGlvbiAoZWRnZSkgewogICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZWRnZS5ub2RlLCB7CiAgICAgICAgICAgIG5leHRQYWdlUXVlcnlBbmRQYXRoOiBuZXh0UGFnZVF1ZXJ5QW5kUGF0aChjb250ZXh0LCBlZGdlLmN1cnNvciksCiAgICAgICAgICAgIGhhc05leHRQYWdlOiBoYXNOZXh0UGFnZSQxKHZhbHVlLCBlZGdlKSwKICAgICAgICAgICAgaGFzUHJldmlvdXNQYWdlOiBoYXNQcmV2aW91c1BhZ2UodmFsdWUsIGVkZ2UpLAogICAgICAgICAgICB2YXJpYWJsZVZhbHVlczogdmFyaWFibGVWYWx1ZXMKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gdmFsdWU7CiAgICB9OwogIH0KCiAgdmFyIERlY29kaW5nQ29udGV4dCA9IGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIERlY29kaW5nQ29udGV4dChzZWxlY3Rpb24sIHJlc3BvbnNlRGF0YSkgewogICAgICB2YXIgcGFyZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsOwogICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBEZWNvZGluZ0NvbnRleHQpLCB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiwgdGhpcy5yZXNwb25zZURhdGEgPSByZXNwb25zZURhdGEsIHRoaXMucGFyZW50ID0gcGFyZW50LCBPYmplY3QuZnJlZXplKHRoaXMpOwogICAgfQoKICAgIHJldHVybiBjcmVhdGVDbGFzcyhEZWNvZGluZ0NvbnRleHQsIFt7CiAgICAgIGtleTogImNvbnRleHRGb3JPYmplY3RQcm9wZXJ0eSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb250ZXh0Rm9yT2JqZWN0UHJvcGVydHkocmVzcG9uc2VLZXkpIHsKICAgICAgICB2YXIgbmVzdGVkU2VsZWN0aW9ucyA9IHRoaXMuc2VsZWN0aW9uLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zQnlSZXNwb25zZUtleVtyZXNwb25zZUtleV0sCiAgICAgICAgICAgIG5leHRTZWxlY3Rpb24gPSBuZXN0ZWRTZWxlY3Rpb25zICYmIG5lc3RlZFNlbGVjdGlvbnNbMF0sCiAgICAgICAgICAgIG5leHRDb250ZXh0ID0gdm9pZCAwOwogICAgICAgIGlmIChuZXh0Q29udGV4dCA9IFNwcmVhZC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihuZXh0U2VsZWN0aW9uKSA/IG5ldyBEZWNvZGluZ0NvbnRleHQobmV4dFNlbGVjdGlvbiwgdGhpcy5yZXNwb25zZURhdGEsIHRoaXMucGFyZW50KSA6IG5ldyBEZWNvZGluZ0NvbnRleHQobmV4dFNlbGVjdGlvbiwgdGhpcy5yZXNwb25zZURhdGFbcmVzcG9uc2VLZXldLCB0aGlzKSwgIW5leHRTZWxlY3Rpb24pIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCByZXNwb25zZSBrZXkgIicgKyByZXNwb25zZUtleSArICciLCBub3QgZm91bmQgaW4gc2VsZWN0aW9uIHNldDogJyArIHRoaXMuc2VsZWN0aW9uLnNlbGVjdGlvblNldCk7CiAgICAgICAgcmV0dXJuIEZpZWxkLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG5leHRTZWxlY3Rpb24pID8gbmV4dENvbnRleHQgOiBuZXh0Q29udGV4dC5jb250ZXh0Rm9yT2JqZWN0UHJvcGVydHkocmVzcG9uc2VLZXkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImNvbnRleHRGb3JBcnJheUl0ZW0iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gY29udGV4dEZvckFycmF5SXRlbShpdGVtKSB7CiAgICAgICAgcmV0dXJuIG5ldyBEZWNvZGluZ0NvbnRleHQodGhpcy5zZWxlY3Rpb24sIGl0ZW0sIHRoaXMucGFyZW50KTsKICAgICAgfQogICAgfV0pLCBEZWNvZGluZ0NvbnRleHQ7CiAgfSgpOwoKICBmdW5jdGlvbiBkZWNvZGVBcnJheUl0ZW1zKGNvbnRleHQsIHRyYW5zZm9ybWVycykgewogICAgcmV0dXJuIGNvbnRleHQucmVzcG9uc2VEYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICByZXR1cm4gZGVjb2RlQ29udGV4dChjb250ZXh0LmNvbnRleHRGb3JBcnJheUl0ZW0oaXRlbSksIHRyYW5zZm9ybWVycyk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGRlY29kZU9iamVjdFZhbHVlcyhjb250ZXh0LCB0cmFuc2Zvcm1lcnMpIHsKICAgIHJldHVybiBPYmplY3Qua2V5cyhjb250ZXh0LnJlc3BvbnNlRGF0YSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHJlc3BvbnNlS2V5KSB7CiAgICAgIHJldHVybiBhY2NbcmVzcG9uc2VLZXldID0gZGVjb2RlQ29udGV4dChjb250ZXh0LmNvbnRleHRGb3JPYmplY3RQcm9wZXJ0eShyZXNwb25zZUtleSksIHRyYW5zZm9ybWVycyksIGFjYzsKICAgIH0sIHt9KTsKICB9CgogIGZ1bmN0aW9uIHJ1blRyYW5zZm9ybWVycyh0cmFuc2Zvcm1lcnMsIGNvbnRleHQsIHZhbHVlKSB7CiAgICByZXR1cm4gdHJhbnNmb3JtZXJzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB0cmFuc2Zvcm1lcikgewogICAgICByZXR1cm4gdHJhbnNmb3JtZXIoY29udGV4dCwgYWNjKTsKICAgIH0sIHZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGRlY29kZUNvbnRleHQoY29udGV4dCwgdHJhbnNmb3JtZXJzKSB7CiAgICB2YXIgdmFsdWUgPSBjb250ZXh0LnJlc3BvbnNlRGF0YTsKICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlID0gZGVjb2RlQXJyYXlJdGVtcyhjb250ZXh0LCB0cmFuc2Zvcm1lcnMpIDogaXNPYmplY3QodmFsdWUpICYmICh2YWx1ZSA9IGRlY29kZU9iamVjdFZhbHVlcyhjb250ZXh0LCB0cmFuc2Zvcm1lcnMpKSwgcnVuVHJhbnNmb3JtZXJzKHRyYW5zZm9ybWVycywgY29udGV4dCwgdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gZ2VuZXJhdGVSZWZldGNoUXVlcmllcyhjb250ZXh0LCB2YWx1ZSkgewogICAgcmV0dXJuIGlzVmFsdWUodmFsdWUpICYmIGlzTm9kZUNvbnRleHQoY29udGV4dCkgJiYgKHZhbHVlLnJlZmV0Y2hRdWVyeSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIG5ldyBRdWVyeShjb250ZXh0LnNlbGVjdGlvbi5zZWxlY3Rpb25TZXQudHlwZUJ1bmRsZSwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgICByb290LmFkZCgibm9kZSIsIHsKICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgaWQ6IGNvbnRleHQucmVzcG9uc2VEYXRhLmlkCiAgICAgICAgICB9CiAgICAgICAgfSwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgIG5vZGUuYWRkSW5saW5lRnJhZ21lbnRPbihjb250ZXh0LnNlbGVjdGlvbi5zZWxlY3Rpb25TZXQudHlwZVNjaGVtYS5uYW1lLCBjb250ZXh0LnNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCB2YWx1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZm9ybVBvam9zVG9DbGFzc2VzV2l0aFJlZ2lzdHJ5KGNsYXNzUmVnaXN0cnkpIHsKICAgIHJldHVybiBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2pvc1RvQ2xhc3Nlcyhjb250ZXh0LCB2YWx1ZSkgewogICAgICB2YXIgS2xhc3M7CiAgICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSkgPyBuZXcgKGNsYXNzUmVnaXN0cnkuY2xhc3NGb3JUeXBlKGNvbnRleHQuc2VsZWN0aW9uLnNlbGVjdGlvblNldC50eXBlU2NoZW1hLm5hbWUpKSh2YWx1ZSkgOiB2YWx1ZTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiB0cmFuc2Zvcm1TY2FsYXJzKGNvbnRleHQsIHZhbHVlKSB7CiAgICBpZiAoaXNWYWx1ZSh2YWx1ZSkpIHsKICAgICAgaWYgKCJTQ0FMQVIiID09PSBjb250ZXh0LnNlbGVjdGlvbi5zZWxlY3Rpb25TZXQudHlwZVNjaGVtYS5raW5kKSByZXR1cm4gbmV3IFNjYWxhcih2YWx1ZSk7CiAgICAgIGlmICgiRU5VTSIgPT09IGNvbnRleHQuc2VsZWN0aW9uLnNlbGVjdGlvblNldC50eXBlU2NoZW1hLmtpbmQpIHJldHVybiBuZXcgRW51bSh2YWx1ZSk7CiAgICB9CgogICAgcmV0dXJuIHZhbHVlOwogIH0KCiAgZnVuY3Rpb24gcmVjb3JkVHlwZUluZm9ybWF0aW9uKGNvbnRleHQsIHZhbHVlKSB7CiAgICB2YXIgX2NvbnRleHQkc2VsZWN0aW9uJHNlID0gY29udGV4dC5zZWxlY3Rpb24uc2VsZWN0aW9uU2V0LAogICAgICAgIHR5cGVCdW5kbGUgPSBfY29udGV4dCRzZWxlY3Rpb24kc2UudHlwZUJ1bmRsZSwKICAgICAgICB0eXBlU2NoZW1hID0gX2NvbnRleHQkc2VsZWN0aW9uJHNlLnR5cGVTY2hlbWE7CiAgICByZXR1cm4gaXNWYWx1ZSh2YWx1ZSkgJiYgKHZhbHVlLl9fdHlwZW5hbWUgPyB2YWx1ZS50eXBlID0gc2NoZW1hRm9yVHlwZSh0eXBlQnVuZGxlLCB2YWx1ZS5fX3R5cGVuYW1lLCB0eXBlU2NoZW1hKSA6IHZhbHVlLnR5cGUgPSB0eXBlU2NoZW1hKSwgdmFsdWU7CiAgfQoKICBmdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtZXJzKF9yZWYpIHsKICAgIHZhciBfcmVmJGNsYXNzUmVnaXN0cnkgPSBfcmVmLmNsYXNzUmVnaXN0cnksCiAgICAgICAgY2xhc3NSZWdpc3RyeSA9IHZvaWQgMCA9PT0gX3JlZiRjbGFzc1JlZ2lzdHJ5ID8gbmV3IENsYXNzUmVnaXN0cnkoKSA6IF9yZWYkY2xhc3NSZWdpc3RyeSwKICAgICAgICB2YXJpYWJsZVZhbHVlczsKICAgIHJldHVybiBbdHJhbnNmb3JtU2NhbGFycywgZ2VuZXJhdGVSZWZldGNoUXVlcmllcywgdHJhbnNmb3JtQ29ubmVjdGlvbnMoX3JlZi52YXJpYWJsZVZhbHVlcyksIHJlY29yZFR5cGVJbmZvcm1hdGlvbiwgdHJhbnNmb3JtUG9qb3NUb0NsYXNzZXNXaXRoUmVnaXN0cnkoY2xhc3NSZWdpc3RyeSldOwogIH0KCiAgZnVuY3Rpb24gZGVjb2RlKHNlbGVjdGlvbiwgcmVzcG9uc2VEYXRhKSB7CiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzJdID8gYXJndW1lbnRzWzJdIDoge30sCiAgICAgICAgdHJhbnNmb3JtZXJzID0gb3B0aW9ucy50cmFuc2Zvcm1lcnMgfHwgZGVmYXVsdFRyYW5zZm9ybWVycyhvcHRpb25zKSwKICAgICAgICBjb250ZXh0ID0gbmV3IERlY29kaW5nQ29udGV4dChzZWxlY3Rpb24sIHJlc3BvbnNlRGF0YSk7CiAgICByZXR1cm4gZGVjb2RlQ29udGV4dChjb250ZXh0LCB0cmFuc2Zvcm1lcnMpOwogIH0KCiAgZnVuY3Rpb24gaHR0cEZldGNoZXIodXJsKSB7CiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzFdID8gYXJndW1lbnRzWzFdIDoge307CiAgICByZXR1cm4gZnVuY3Rpb24gZmV0Y2hlcihncmFwaFFMUGFyYW1zLCBoZWFkZXJzKSB7CiAgICAgIHJldHVybiBmZXRjaCh1cmwsIF9leHRlbmRzKHsKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShncmFwaFFMUGFyYW1zKSwKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBtb2RlOiAiY29ycyIKICAgICAgfSwgb3B0aW9ucywgewogICAgICAgIGhlYWRlcnM6IF9leHRlbmRzKHsKICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgICBBY2NlcHQ6ICJhcHBsaWNhdGlvbi9qc29uIgogICAgICAgIH0sIG9wdGlvbnMuaGVhZGVycywgaGVhZGVycykKICAgICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgdmFyIGNvbnRlbnRUeXBlOwogICAgICAgIHJldHVybiByZXNwb25zZS5oZWFkZXJzLmdldCgiY29udGVudC10eXBlIikuaW5kZXhPZigiYXBwbGljYXRpb24vanNvbiIpID4gLTEgPyByZXNwb25zZS5qc29uKCkgOiByZXNwb25zZS50ZXh0KCkudGhlbihmdW5jdGlvbiAodGV4dCkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdGV4dDogdGV4dAogICAgICAgICAgfTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gaGFzTmV4dFBhZ2UocGFnaW5hdGVkTW9kZWxzKSB7CiAgICByZXR1cm4gcGFnaW5hdGVkTW9kZWxzICYmIHBhZ2luYXRlZE1vZGVscy5sZW5ndGggJiYgcGFnaW5hdGVkTW9kZWxzW3BhZ2luYXRlZE1vZGVscy5sZW5ndGggLSAxXS5oYXNOZXh0UGFnZTsKICB9CgogIHZhciBDbGllbnQkMiA9IGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIENsaWVudCh0eXBlQnVuZGxlLCBfcmVmKSB7CiAgICAgIHZhciB1cmwgPSBfcmVmLnVybCwKICAgICAgICAgIGZldGNoZXJPcHRpb25zID0gX3JlZi5mZXRjaGVyT3B0aW9ucywKICAgICAgICAgIGZldGNoZXIgPSBfcmVmLmZldGNoZXIsCiAgICAgICAgICBfcmVmJHJlZ2lzdHJ5ID0gX3JlZi5yZWdpc3RyeSwKICAgICAgICAgIHJlZ2lzdHJ5ID0gdm9pZCAwID09PSBfcmVmJHJlZ2lzdHJ5ID8gbmV3IENsYXNzUmVnaXN0cnkoKSA6IF9yZWYkcmVnaXN0cnk7CiAgICAgIGlmIChjbGFzc0NhbGxDaGVjayh0aGlzLCBDbGllbnQpLCB0aGlzLnR5cGVCdW5kbGUgPSB0eXBlQnVuZGxlLCB0aGlzLmNsYXNzUmVnaXN0cnkgPSByZWdpc3RyeSwgdXJsICYmIGZldGNoZXIpIHRocm93IG5ldyBFcnJvcigiQXJndW1lbnRzIG5vdCBzdXBwb3J0ZWQ6IHN1cHBseSBlaXRoZXIgYHVybGAgYW5kIG9wdGlvbmFsIGBmZXRjaGVyT3B0aW9uc2AgT1IgdXNlIGEgYGZldGNoZXJgIGZ1bmN0aW9uIGZvciBmdXJ0aGVyIGN1c3RvbWl6YXRpb24uIik7CiAgICAgIGlmICh1cmwpIHRoaXMuZmV0Y2hlciA9IGh0dHBGZXRjaGVyKHVybCwgZmV0Y2hlck9wdGlvbnMpO2Vsc2UgewogICAgICAgIGlmICghZmV0Y2hlcikgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIGFyZ3VtZW50czogb25lIG9mIGB1cmxgIG9yIGBmZXRjaGVyYCBpcyBuZWVkZWQuIik7CiAgICAgICAgaWYgKGZldGNoZXJPcHRpb25zKSB0aHJvdyBuZXcgRXJyb3IoIkFyZ3VtZW50cyBub3Qgc3VwcG9ydGVkOiB3aGVuIHNwZWNpZnlpbmcgeW91ciBvd24gYGZldGNoZXJgLCBzZXQgb3B0aW9ucyB0aHJvdWdoIGl0IGFuZCBub3Qgd2l0aCBgZmV0Y2hlck9wdGlvbnNgIik7CiAgICAgICAgdGhpcy5mZXRjaGVyID0gZmV0Y2hlcjsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBjcmVhdGVDbGFzcyhDbGllbnQsIFt7CiAgICAgIGtleTogImRvY3VtZW50IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvY3VtZW50KCkgewogICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnQodGhpcy50eXBlQnVuZGxlKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJxdWVyeSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBxdWVyeSgpIHsKICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KFF1ZXJ5LCBbbnVsbF0uY29uY2F0KFt0aGlzLnR5cGVCdW5kbGVdLCBhcmdzKSkpKCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAibXV0YXRpb24iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gbXV0YXRpb24oKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHsKICAgICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KE11dGF0aW9uLCBbbnVsbF0uY29uY2F0KFt0aGlzLnR5cGVCdW5kbGVdLCBhcmdzKSkpKCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2VuZCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kKHJlcXVlc3QpIHsKICAgICAgICB2YXIgdmFyaWFibGVWYWx1ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1sxXSA/IGFyZ3VtZW50c1sxXSA6IG51bGwsCiAgICAgICAgICAgIF90aGlzID0gdGhpcywKICAgICAgICAgICAgb3RoZXJQcm9wZXJ0aWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsLAogICAgICAgICAgICBoZWFkZXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbM10gPyBhcmd1bWVudHNbM10gOiBudWxsLAogICAgICAgICAgICBvcGVyYXRpb25PckRvY3VtZW50ID0gdm9pZCAwLAogICAgICAgICAgICBncmFwaFFMUGFyYW1zID0gewogICAgICAgICAgcXVlcnk6IChvcGVyYXRpb25PckRvY3VtZW50ID0gRnVuY3Rpb24ucHJvdG90eXBlLmlzUHJvdG90eXBlT2YocmVxdWVzdCkgPyByZXF1ZXN0KHRoaXMpIDogcmVxdWVzdCkudG9TdHJpbmcoKQogICAgICAgIH07CgogICAgICAgIHZhcmlhYmxlVmFsdWVzICYmIChncmFwaFFMUGFyYW1zLnZhcmlhYmxlcyA9IHZhcmlhYmxlVmFsdWVzKSwgT2JqZWN0LmFzc2lnbihncmFwaFFMUGFyYW1zLCBvdGhlclByb3BlcnRpZXMpOwogICAgICAgIHZhciBvcGVyYXRpb24gPSB2b2lkIDA7CiAgICAgICAgaWYgKE9wZXJhdGlvbi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvcGVyYXRpb25PckRvY3VtZW50KSkgb3BlcmF0aW9uID0gb3BlcmF0aW9uT3JEb2N1bWVudDtlbHNlIHsKICAgICAgICAgIHZhciBkb2N1bWVudCA9IG9wZXJhdGlvbk9yRG9jdW1lbnQ7CiAgICAgICAgICBpZiAoMSA9PT0gZG9jdW1lbnQub3BlcmF0aW9ucy5sZW5ndGgpIG9wZXJhdGlvbiA9IGRvY3VtZW50Lm9wZXJhdGlvbnNbMF07ZWxzZSB7CiAgICAgICAgICAgIGlmICghb3RoZXJQcm9wZXJ0aWVzLm9wZXJhdGlvbk5hbWUpIHRocm93IG5ldyBFcnJvcigiXG4gICAgICAgICAgQSBkb2N1bWVudCBtdXN0IGNvbnRhaW4gZXhhY3RseSBvbmUgb3BlcmF0aW9uLCBvciBhbiBvcGVyYXRpb25OYW1lXG4gICAgICAgICAgbXVzdCBiZSBzcGVjaWZpZWQuIEV4YW1wbGU6XG5cbiAgICAgICAgICAgIGNsaWVudC5zZW5kKGRvY3VtZW50LCBudWxsLCB7b3BlcmF0aW9uTmFtZTogJ215RmFuY3lRdWVyeSd9KTtcbiAgICAgICAgIik7CiAgICAgICAgICAgIG9wZXJhdGlvbiA9IGRvY3VtZW50Lm9wZXJhdGlvbnMuZmluZChmdW5jdGlvbiAoZG9jdW1lbnRPcGVyYXRpb24pIHsKICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnRPcGVyYXRpb24ubmFtZSA9PT0gb3RoZXJQcm9wZXJ0aWVzLm9wZXJhdGlvbk5hbWU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5mZXRjaGVyKGdyYXBoUUxQYXJhbXMsIGhlYWRlcnMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YSAmJiAocmVzcG9uc2UubW9kZWwgPSBkZWNvZGUob3BlcmF0aW9uLCByZXNwb25zZS5kYXRhLCB7CiAgICAgICAgICAgIGNsYXNzUmVnaXN0cnk6IF90aGlzLmNsYXNzUmVnaXN0cnksCiAgICAgICAgICAgIHZhcmlhYmxlVmFsdWVzOiB2YXJpYWJsZVZhbHVlcwogICAgICAgICAgfSkpLCByZXNwb25zZTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmZXRjaE5leHRQYWdlIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoTmV4dFBhZ2Uobm9kZU9yTm9kZXMsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgbm9kZSA9IHZvaWQgMCwKICAgICAgICAgICAgX25vZGUkbmV4dFBhZ2VRdWVyeUFuID0gKG5vZGUgPSBBcnJheS5pc0FycmF5KG5vZGVPck5vZGVzKSA/IG5vZGVPck5vZGVzW25vZGVPck5vZGVzLmxlbmd0aCAtIDFdIDogbm9kZU9yTm9kZXMpLm5leHRQYWdlUXVlcnlBbmRQYXRoKCksCiAgICAgICAgICAgIF9ub2RlJG5leHRQYWdlUXVlcnlBbjIgPSBzbGljZWRUb0FycmF5KF9ub2RlJG5leHRQYWdlUXVlcnlBbiwgMiksCiAgICAgICAgICAgIHF1ZXJ5ID0gX25vZGUkbmV4dFBhZ2VRdWVyeUFuMlswXSwKICAgICAgICAgICAgcGF0aCA9IF9ub2RlJG5leHRQYWdlUXVlcnlBbjJbMV0sCiAgICAgICAgICAgIHZhcmlhYmxlVmFsdWVzID0gdm9pZCAwOwoKICAgICAgICByZXR1cm4gKG5vZGUudmFyaWFibGVWYWx1ZXMgfHwgb3B0aW9ucykgJiYgKHZhcmlhYmxlVmFsdWVzID0gT2JqZWN0LmFzc2lnbih7fSwgbm9kZS52YXJpYWJsZVZhbHVlcywgb3B0aW9ucykpLCB0aGlzLnNlbmQocXVlcnksIHZhcmlhYmxlVmFsdWVzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm1vZGVsID0gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKG9iamVjdCwga2V5KSB7CiAgICAgICAgICAgIHJldHVybiBvYmplY3Rba2V5XTsKICAgICAgICAgIH0sIHJlc3BvbnNlLm1vZGVsKSwgcmVzcG9uc2U7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZmV0Y2hBbGxQYWdlcyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEFsbFBhZ2VzKHBhZ2luYXRlZE1vZGVscywgX3JlZjIpIHsKICAgICAgICB2YXIgX3RoaXMyID0gdGhpcywKICAgICAgICAgICAgcGFnZVNpemUgPSBfcmVmMi5wYWdlU2l6ZTsKCiAgICAgICAgcmV0dXJuIGhhc05leHRQYWdlKHBhZ2luYXRlZE1vZGVscykgPyB0aGlzLmZldGNoTmV4dFBhZ2UocGFnaW5hdGVkTW9kZWxzLCB7CiAgICAgICAgICBmaXJzdDogcGFnZVNpemUKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChfcmVmMykgewogICAgICAgICAgdmFyIG1vZGVsID0gX3JlZjMubW9kZWwsCiAgICAgICAgICAgICAgcGFnZXMgPSBwYWdpbmF0ZWRNb2RlbHMuY29uY2F0KG1vZGVsKTsKICAgICAgICAgIHJldHVybiBfdGhpczIuZmV0Y2hBbGxQYWdlcyhwYWdlcywgewogICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUKICAgICAgICAgIH0pOwogICAgICAgIH0pIDogUHJvbWlzZS5yZXNvbHZlKHBhZ2luYXRlZE1vZGVscyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAicmVmZXRjaCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWZldGNoKG5vZGVUeXBlKSB7CiAgICAgICAgaWYgKCFub2RlVHlwZSkgdGhyb3cgbmV3IEVycm9yKCInY2xpZW50I3JlZmV0Y2gnIG11c3QgYmUgY2FsbGVkIHdpdGggYSBub24tbnVsbCBpbnN0YW5jZSBvZiBhIE5vZGUuIik7CiAgICAgICAgaWYgKCFub2RlVHlwZS50eXBlLmltcGxlbWVudHNOb2RlKSB0aHJvdyBuZXcgRXJyb3IoIidjbGllbnQjcmVmZXRjaCcgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIHR5cGUgdGhhdCBpbXBsZW1lbnRzIE5vZGUuIFJlY2VpdmVkICIgKyBub2RlVHlwZS50eXBlLm5hbWUgKyAiLiIpOwogICAgICAgIHJldHVybiB0aGlzLnNlbmQobm9kZVR5cGUucmVmZXRjaFF1ZXJ5KCkpLnRoZW4oZnVuY3Rpb24gKF9yZWY0KSB7CiAgICAgICAgICB2YXIgbW9kZWw7CiAgICAgICAgICByZXR1cm4gX3JlZjQubW9kZWwubm9kZTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJ2YXJpYWJsZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YXJpYWJsZSQkMShuYW1lLCB0eXBlLCBkZWZhdWx0VmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFyaWFibGUobmFtZSwgdHlwZSwgZGVmYXVsdFZhbHVlKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJlbnVtIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9lbnVtKGtleSkgewogICAgICAgIHJldHVybiBlbnVtRnVuY3Rpb24oa2V5KTsKICAgICAgfQogICAgfV0pLCBDbGllbnQ7CiAgfSgpLAogICAgICBDb25maWcgPSBmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBDb25maWcoYXR0cnMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGNsYXNzQ2FsbENoZWNrJDEodGhpcywgQ29uZmlnKSwgT2JqZWN0LmtleXModGhpcy5kZXByZWNhdGVkUHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgYXR0cnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoY29uc29sZS53YXJuKCJbU2hvcGlmeUJ1eV0gQ29uZmlnIHByb3BlcnR5ICIgKyBrZXkgKyAiIGlzIGRlcHJlY2F0ZWQgYXMgb2YgdjEuMCwgcGxlYXNlIHVzZSAiICsgX3RoaXMuZGVwcmVjYXRlZFByb3BlcnRpZXNba2V5XSArICIgaW5zdGVhZC4iKSwgYXR0cnNbX3RoaXMuZGVwcmVjYXRlZFByb3BlcnRpZXNba2V5XV0gPSBhdHRyc1trZXldKTsKICAgICAgfSksIHRoaXMucmVxdWlyZWRQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIGlmICghYXR0cnMuaGFzT3duUHJvcGVydHkoa2V5KSkgdGhyb3cgbmV3IEVycm9yKCJuZXcgQ29uZmlnKCkgcmVxdWlyZXMgdGhlIG9wdGlvbiAnIiArIGtleSArICInIik7CiAgICAgICAgX3RoaXNba2V5XSA9IGF0dHJzW2tleV07CiAgICAgIH0pLCBhdHRycy5oYXNPd25Qcm9wZXJ0eSgiYXBpVmVyc2lvbiIpID8gdGhpcy5hcGlWZXJzaW9uID0gYXR0cnMuYXBpVmVyc2lvbiA6IHRoaXMuYXBpVmVyc2lvbiA9ICIyMDIwLTA3IiwgYXR0cnMuaGFzT3duUHJvcGVydHkoInNvdXJjZSIpICYmICh0aGlzLnNvdXJjZSA9IGF0dHJzLnNvdXJjZSksIGF0dHJzLmhhc093blByb3BlcnR5KCJsYW5ndWFnZSIpICYmICh0aGlzLmxhbmd1YWdlID0gYXR0cnMubGFuZ3VhZ2UpOwogICAgfQoKICAgIHJldHVybiBjcmVhdGVDbGFzcyQxKENvbmZpZywgW3sKICAgICAga2V5OiAicmVxdWlyZWRQcm9wZXJ0aWVzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7CiAgICAgICAgcmV0dXJuIFsic3RvcmVmcm9udEFjY2Vzc1Rva2VuIiwgImRvbWFpbiJdOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImRlcHJlY2F0ZWRQcm9wZXJ0aWVzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGFjY2Vzc1Rva2VuOiAic3RvcmVmcm9udEFjY2Vzc1Rva2VuIiwKICAgICAgICAgIGFwaUtleTogInN0b3JlZnJvbnRBY2Nlc3NUb2tlbiIKICAgICAgICB9OwogICAgICB9CiAgICB9XSksIENvbmZpZzsKICB9KCksCiAgICAgIFJlc291cmNlID0gZnVuY3Rpb24gUmVzb3VyY2UoY2xpZW50KSB7CiAgICBjbGFzc0NhbGxDaGVjayQxKHRoaXMsIFJlc291cmNlKSwgdGhpcy5ncmFwaFFMQ2xpZW50ID0gY2xpZW50OwogIH0sCiAgICAgIGRlZmF1bHRFcnJvcnMgPSBbewogICAgbWVzc2FnZTogImFuIHVua25vd24gZXJyb3IgaGFzIG9jY3VycmVkLiIKICB9XTsKCiAgZnVuY3Rpb24gZGVmYXVsdFJlc29sdmVyKHBhdGgpIHsKICAgIHZhciBrZXlzID0gcGF0aC5zcGxpdCgiLiIpOwogICAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgIHZhciBtb2RlbCA9IF9yZWYubW9kZWwsCiAgICAgICAgICBlcnJvcnMgPSBfcmVmLmVycm9yczsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICAgIHJlc29sdmUoa2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlZiwga2V5KSB7CiAgICAgICAgICAgIHJldHVybiByZWZba2V5XTsKICAgICAgICAgIH0sIG1vZGVsKSk7CiAgICAgICAgfSBjYXRjaCAoXykgewogICAgICAgICAgcmVqZWN0KGVycm9ycyB8fCBkZWZhdWx0RXJyb3JzKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIGZldGNoUmVzb3VyY2VzRm9yUHJvZHVjdHMocHJvZHVjdE9yUHJvZHVjdCwgY2xpZW50KSB7CiAgICB2YXIgcHJvZHVjdHMgPSBbXS5jb25jYXQocHJvZHVjdE9yUHJvZHVjdCk7CiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvZHVjdHMucmVkdWNlKGZ1bmN0aW9uIChwcm9taXNlQWNjLCBwcm9kdWN0KSB7CiAgICAgIHJldHVybiBudWxsID09PSBwcm9kdWN0ID8gcHJvbWlzZUFjYyA6IChwcm9taXNlQWNjLnB1c2goY2xpZW50LmZldGNoQWxsUGFnZXMocHJvZHVjdC5pbWFnZXMsIHsKICAgICAgICBwYWdlU2l6ZTogMjUwCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGltYWdlcykgewogICAgICAgIHByb2R1Y3QuYXR0cnMuaW1hZ2VzID0gaW1hZ2VzOwogICAgICB9KSksIHByb21pc2VBY2MucHVzaChjbGllbnQuZmV0Y2hBbGxQYWdlcyhwcm9kdWN0LnZhcmlhbnRzLCB7CiAgICAgICAgcGFnZVNpemU6IDI1MAogICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YXJpYW50cykgewogICAgICAgIHByb2R1Y3QuYXR0cnMudmFyaWFudHMgPSB2YXJpYW50czsKICAgICAgfSkpLCBwcm9taXNlQWNjKTsKICAgIH0sIFtdKSk7CiAgfQoKICBmdW5jdGlvbiBwYWdpbmF0ZVByb2R1Y3RDb25uZWN0aW9uc0FuZFJlc29sdmUoY2xpZW50KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHByb2R1Y3RzKSB7CiAgICAgIHJldHVybiBmZXRjaFJlc291cmNlc0ZvclByb2R1Y3RzKHByb2R1Y3RzLCBjbGllbnQpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBwcm9kdWN0czsKICAgICAgfSk7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gcGFnaW5hdGVDb2xsZWN0aW9uc1Byb2R1Y3RDb25uZWN0aW9uc0FuZFJlc29sdmUoY2xpZW50KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGNvbGxlY3Rpb25PckNvbGxlY3Rpb25zKSB7CiAgICAgIHZhciBjb2xsZWN0aW9ucyA9IFtdLmNvbmNhdChjb2xsZWN0aW9uT3JDb2xsZWN0aW9ucyk7CiAgICAgIHJldHVybiBQcm9taXNlLmFsbChjb2xsZWN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHByb21pc2VBY2MsIGNvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gcHJvbWlzZUFjYy5jb25jYXQoZmV0Y2hSZXNvdXJjZXNGb3JQcm9kdWN0cyhjb2xsZWN0aW9uLnByb2R1Y3RzLCBjbGllbnQpKTsKICAgICAgfSwgW10pKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9yQ29sbGVjdGlvbnM7CiAgICAgIH0pOwogICAgfTsKICB9CgogIHZhciBwcm9kdWN0SGVscGVycyA9IHsKICAgIHZhcmlhbnRGb3JPcHRpb25zOiBmdW5jdGlvbiB2YXJpYW50Rm9yT3B0aW9ucyhwcm9kdWN0LCBvcHRpb25zKSB7CiAgICAgIHJldHVybiBwcm9kdWN0LnZhcmlhbnRzLmZpbmQoZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICByZXR1cm4gdmFyaWFudC5zZWxlY3RlZE9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9uKSB7CiAgICAgICAgICByZXR1cm4gb3B0aW9uc1tzZWxlY3RlZE9wdGlvbi5uYW1lXSA9PT0gc2VsZWN0ZWRPcHRpb24udmFsdWUudmFsdWVPZigpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9OwoKICBmdW5jdGlvbiBxdWVyeShjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIF9fZGVmYXVsdE9wZXJhdGlvbl9fOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaWQgPSBjbGllbnQudmFyaWFibGUoImlkIiwgIklEISIpLCBzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInRpdGxlIiksIHJvb3QuYWRkKCJwcmljZSIpLCByb290LmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRQcmljZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDIwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJlc2VudG1lbnRQcmljZXMpIHsKICAgICAgICBwcmVzZW50bWVudFByaWNlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIHByZXNlbnRtZW50UHJpY2VzLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJwcmljZSIsIGZ1bmN0aW9uIChwcmljZSkgewogICAgICAgICAgICAgIHByaWNlLmFkZCgiYW1vdW50IiksIHByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiY29tcGFyZUF0UHJpY2UiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2UpIHsKICAgICAgICAgICAgICBjb21wYXJlQXRQcmljZS5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoIndlaWdodCIpLCByb290LmFkZCgiYXZhaWxhYmxlRm9yU2FsZSIsIHsKICAgICAgICBhbGlhczogImF2YWlsYWJsZSIKICAgICAgfSksIHJvb3QuYWRkKCJza3UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlIiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZVYyIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlVjIpIHsKICAgICAgICBjb21wYXJlQXRQcmljZVYyLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZSIsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIGltYWdlLmFkZCgiaWQiKSwgaW1hZ2UuYWRkKCJvcmlnaW5hbFNyYyIsIHsKICAgICAgICAgIGFsaWFzOiAic3JjIgogICAgICAgIH0pLCBpbWFnZS5hZGQoImFsdFRleHQiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzZWxlY3RlZE9wdGlvbnMiLCBmdW5jdGlvbiAoc2VsZWN0ZWRPcHRpb25zKSB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zLmFkZCgibmFtZSIpLCBzZWxlY3RlZE9wdGlvbnMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZSIsIGZ1bmN0aW9uICh1bml0UHJpY2UpIHsKICAgICAgICB1bml0UHJpY2UuYWRkKCJhbW91bnQiKSwgdW5pdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlTWVhc3VyZW1lbnQiLCBmdW5jdGlvbiAodW5pdFByaWNlTWVhc3VyZW1lbnQpIHsKICAgICAgICB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoIm1lYXN1cmVkVHlwZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VmFsdWUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVmFsdWUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Qcm9kdWN0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiUHJvZHVjdEZyYWdtZW50IiwgIlByb2R1Y3QiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiKSwgcm9vdC5hZGQoImNyZWF0ZWRBdCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJkZXNjcmlwdGlvbkh0bWwiKSwgcm9vdC5hZGQoImRlc2NyaXB0aW9uIiksIHJvb3QuYWRkKCJoYW5kbGUiKSwgcm9vdC5hZGQoInByb2R1Y3RUeXBlIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgidmVuZG9yIiksIHJvb3QuYWRkKCJwdWJsaXNoZWRBdCIpLCByb290LmFkZCgib25saW5lU3RvcmVVcmwiKSwgcm9vdC5hZGQoIm9wdGlvbnMiLCBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMuYWRkKCJuYW1lIiksIG9wdGlvbnMuYWRkKCJ2YWx1ZXMiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGltYWdlcykgewogICAgICAgIGltYWdlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGltYWdlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgiaWQiKSwgbm9kZS5hZGQoInNyYyIpLCBub2RlLmFkZCgiYWx0VGV4dCIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgidmFyaWFudHMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHZhcmlhbnRzKSB7CiAgICAgICAgdmFyaWFudHMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCB2YXJpYW50cy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudEZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudC5hZGRRdWVyeShbdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmlkXSwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoIm5vZGUiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgaWQ6IHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5pZAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQxKGNsaWVudCkgewogICAgdmFyIGRvY3VtZW50ID0gY2xpZW50LmRvY3VtZW50KCksCiAgICAgICAgc3ByZWFkcyA9IHt9LAogICAgICAgIHZhcmlhYmxlcyA9IHsKICAgICAgX19kZWZhdWx0T3BlcmF0aW9uX186IHt9CiAgICB9OwogICAgcmV0dXJuIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5pZHMgPSBjbGllbnQudmFyaWFibGUoImlkcyIsICJbSUQhXSEiKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZGVzY3JpcHRpb25IdG1sIiksIHJvb3QuYWRkKCJkZXNjcmlwdGlvbiIpLCByb290LmFkZCgiaGFuZGxlIiksIHJvb3QuYWRkKCJwcm9kdWN0VHlwZSIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInZlbmRvciIpLCByb290LmFkZCgicHVibGlzaGVkQXQiKSwgcm9vdC5hZGQoIm9ubGluZVN0b3JlVXJsIiksIHJvb3QuYWRkKCJvcHRpb25zIiwgZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zLmFkZCgibmFtZSIpLCBvcHRpb25zLmFkZCgidmFsdWVzIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChpbWFnZXMpIHsKICAgICAgICBpbWFnZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBpbWFnZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJzcmMiKSwgbm9kZS5hZGQoImFsdFRleHQiKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoInZhcmlhbnRzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uICh2YXJpYW50cykgewogICAgICAgIHZhcmlhbnRzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgdmFyaWFudHMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkUXVlcnkoW3ZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5pZHNdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgibm9kZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgaWRzOiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaWRzCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAobm9kZXMpIHsKICAgICAgICBub2Rlcy5hZGRGcmFnbWVudChzcHJlYWRzLlByb2R1Y3RGcmFnbWVudCk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50OwogIH0KCiAgZnVuY3Rpb24gcXVlcnkkMihjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIF9fZGVmYXVsdE9wZXJhdGlvbl9fOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uZmlyc3QgPSBjbGllbnQudmFyaWFibGUoImZpcnN0IiwgIkludCEiKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnF1ZXJ5ID0gY2xpZW50LnZhcmlhYmxlKCJxdWVyeSIsICJTdHJpbmciKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnNvcnRLZXkgPSBjbGllbnQudmFyaWFibGUoInNvcnRLZXkiLCAiUHJvZHVjdFNvcnRLZXlzIiksIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5yZXZlcnNlID0gY2xpZW50LnZhcmlhYmxlKCJyZXZlcnNlIiwgIkJvb2xlYW4iKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZGVzY3JpcHRpb25IdG1sIiksIHJvb3QuYWRkKCJkZXNjcmlwdGlvbiIpLCByb290LmFkZCgiaGFuZGxlIiksIHJvb3QuYWRkKCJwcm9kdWN0VHlwZSIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInZlbmRvciIpLCByb290LmFkZCgicHVibGlzaGVkQXQiKSwgcm9vdC5hZGQoIm9ubGluZVN0b3JlVXJsIiksIHJvb3QuYWRkKCJvcHRpb25zIiwgZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zLmFkZCgibmFtZSIpLCBvcHRpb25zLmFkZCgidmFsdWVzIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChpbWFnZXMpIHsKICAgICAgICBpbWFnZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBpbWFnZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJzcmMiKSwgbm9kZS5hZGQoImFsdFRleHQiKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoInZhcmlhbnRzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uICh2YXJpYW50cykgewogICAgICAgIHZhcmlhbnRzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgdmFyaWFudHMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkUXVlcnkoW3ZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5maXJzdCwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnF1ZXJ5LCB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uc29ydEtleSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnJldmVyc2VdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgicHJvZHVjdHMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5maXJzdCwKICAgICAgICAgIHF1ZXJ5OiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18ucXVlcnksCiAgICAgICAgICBzb3J0S2V5OiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uc29ydEtleSwKICAgICAgICAgIHJldmVyc2U6IHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5yZXZlcnNlCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJvZHVjdHMpIHsKICAgICAgICBwcm9kdWN0cy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIHByb2R1Y3RzLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgiY3Vyc29yIiksIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5Qcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50OwogIH0KCiAgZnVuY3Rpb24gcXVlcnkkMyhjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIF9fZGVmYXVsdE9wZXJhdGlvbl9fOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaGFuZGxlID0gY2xpZW50LnZhcmlhYmxlKCJoYW5kbGUiLCAiU3RyaW5nISIpLCBzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInRpdGxlIiksIHJvb3QuYWRkKCJwcmljZSIpLCByb290LmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRQcmljZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDIwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJlc2VudG1lbnRQcmljZXMpIHsKICAgICAgICBwcmVzZW50bWVudFByaWNlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIHByZXNlbnRtZW50UHJpY2VzLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJwcmljZSIsIGZ1bmN0aW9uIChwcmljZSkgewogICAgICAgICAgICAgIHByaWNlLmFkZCgiYW1vdW50IiksIHByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiY29tcGFyZUF0UHJpY2UiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2UpIHsKICAgICAgICAgICAgICBjb21wYXJlQXRQcmljZS5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoIndlaWdodCIpLCByb290LmFkZCgiYXZhaWxhYmxlRm9yU2FsZSIsIHsKICAgICAgICBhbGlhczogImF2YWlsYWJsZSIKICAgICAgfSksIHJvb3QuYWRkKCJza3UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlIiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZVYyIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlVjIpIHsKICAgICAgICBjb21wYXJlQXRQcmljZVYyLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZSIsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIGltYWdlLmFkZCgiaWQiKSwgaW1hZ2UuYWRkKCJvcmlnaW5hbFNyYyIsIHsKICAgICAgICAgIGFsaWFzOiAic3JjIgogICAgICAgIH0pLCBpbWFnZS5hZGQoImFsdFRleHQiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzZWxlY3RlZE9wdGlvbnMiLCBmdW5jdGlvbiAoc2VsZWN0ZWRPcHRpb25zKSB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zLmFkZCgibmFtZSIpLCBzZWxlY3RlZE9wdGlvbnMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZSIsIGZ1bmN0aW9uICh1bml0UHJpY2UpIHsKICAgICAgICB1bml0UHJpY2UuYWRkKCJhbW91bnQiKSwgdW5pdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlTWVhc3VyZW1lbnQiLCBmdW5jdGlvbiAodW5pdFByaWNlTWVhc3VyZW1lbnQpIHsKICAgICAgICB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoIm1lYXN1cmVkVHlwZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VmFsdWUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVmFsdWUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Qcm9kdWN0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiUHJvZHVjdEZyYWdtZW50IiwgIlByb2R1Y3QiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiKSwgcm9vdC5hZGQoImNyZWF0ZWRBdCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJkZXNjcmlwdGlvbkh0bWwiKSwgcm9vdC5hZGQoImRlc2NyaXB0aW9uIiksIHJvb3QuYWRkKCJoYW5kbGUiKSwgcm9vdC5hZGQoInByb2R1Y3RUeXBlIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgidmVuZG9yIiksIHJvb3QuYWRkKCJwdWJsaXNoZWRBdCIpLCByb290LmFkZCgib25saW5lU3RvcmVVcmwiKSwgcm9vdC5hZGQoIm9wdGlvbnMiLCBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMuYWRkKCJuYW1lIiksIG9wdGlvbnMuYWRkKCJ2YWx1ZXMiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGltYWdlcykgewogICAgICAgIGltYWdlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGltYWdlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgiaWQiKSwgbm9kZS5hZGQoInNyYyIpLCBub2RlLmFkZCgiYWx0VGV4dCIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgidmFyaWFudHMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHZhcmlhbnRzKSB7CiAgICAgICAgdmFyaWFudHMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCB2YXJpYW50cy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudEZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudC5hZGRRdWVyeShbdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmhhbmRsZV0sIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJwcm9kdWN0QnlIYW5kbGUiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgaGFuZGxlOiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaGFuZGxlCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJvZHVjdEJ5SGFuZGxlKSB7CiAgICAgICAgcHJvZHVjdEJ5SGFuZGxlLmFkZEZyYWdtZW50KHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICB2YXIgUHJvZHVjdFJlc291cmNlID0gZnVuY3Rpb24gKF9SZXNvdXJjZSkgewogICAgZnVuY3Rpb24gUHJvZHVjdFJlc291cmNlKCkgewogICAgICByZXR1cm4gY2xhc3NDYWxsQ2hlY2skMSh0aGlzLCBQcm9kdWN0UmVzb3VyY2UpLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJDEodGhpcywgKFByb2R1Y3RSZXNvdXJjZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFByb2R1Y3RSZXNvdXJjZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgfQoKICAgIHJldHVybiBpbmhlcml0cyQxKFByb2R1Y3RSZXNvdXJjZSwgX1Jlc291cmNlKSwgY3JlYXRlQ2xhc3MkMShQcm9kdWN0UmVzb3VyY2UsIFt7CiAgICAgIGtleTogImZldGNoQWxsIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoQWxsKCkgewogICAgICAgIHZhciBmaXJzdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzBdID8gYXJndW1lbnRzWzBdIDogMjA7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDIsIHsKICAgICAgICAgIGZpcnN0OiBmaXJzdAogICAgICAgIH0pLnRoZW4oZGVmYXVsdFJlc29sdmVyKCJwcm9kdWN0cyIpKS50aGVuKHBhZ2luYXRlUHJvZHVjdENvbm5lY3Rpb25zQW5kUmVzb2x2ZSh0aGlzLmdyYXBoUUxDbGllbnQpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmZXRjaCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaChpZCkgewogICAgICAgIHJldHVybiB0aGlzLmdyYXBoUUxDbGllbnQuc2VuZChxdWVyeSwgewogICAgICAgICAgaWQ6IGlkCiAgICAgICAgfSkudGhlbihkZWZhdWx0UmVzb2x2ZXIoIm5vZGUiKSkudGhlbihwYWdpbmF0ZVByb2R1Y3RDb25uZWN0aW9uc0FuZFJlc29sdmUodGhpcy5ncmFwaFFMQ2xpZW50KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZmV0Y2hNdWx0aXBsZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaE11bHRpcGxlKGlkcykgewogICAgICAgIHJldHVybiB0aGlzLmdyYXBoUUxDbGllbnQuc2VuZChxdWVyeSQxLCB7CiAgICAgICAgICBpZHM6IGlkcwogICAgICAgIH0pLnRoZW4oZGVmYXVsdFJlc29sdmVyKCJub2RlcyIpKS50aGVuKHBhZ2luYXRlUHJvZHVjdENvbm5lY3Rpb25zQW5kUmVzb2x2ZSh0aGlzLmdyYXBoUUxDbGllbnQpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmZXRjaEJ5SGFuZGxlIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoQnlIYW5kbGUoaGFuZGxlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDMsIHsKICAgICAgICAgIGhhbmRsZTogaGFuZGxlCiAgICAgICAgfSkudGhlbihkZWZhdWx0UmVzb2x2ZXIoInByb2R1Y3RCeUhhbmRsZSIpKS50aGVuKHBhZ2luYXRlUHJvZHVjdENvbm5lY3Rpb25zQW5kUmVzb2x2ZSh0aGlzLmdyYXBoUUxDbGllbnQpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmZXRjaFF1ZXJ5IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoUXVlcnkoKSB7CiAgICAgICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1swXSA/IGFyZ3VtZW50c1swXSA6IHt9LAogICAgICAgICAgICBfcmVmJGZpcnN0ID0gX3JlZi5maXJzdCwKICAgICAgICAgICAgZmlyc3QgPSB2b2lkIDAgPT09IF9yZWYkZmlyc3QgPyAyMCA6IF9yZWYkZmlyc3QsCiAgICAgICAgICAgIF9yZWYkc29ydEtleSA9IF9yZWYuc29ydEtleSwKICAgICAgICAgICAgc29ydEtleSA9IHZvaWQgMCA9PT0gX3JlZiRzb3J0S2V5ID8gIklEIiA6IF9yZWYkc29ydEtleSwKICAgICAgICAgICAgcXVlcnkkJDEgPSBfcmVmLnF1ZXJ5LAogICAgICAgICAgICByZXZlcnNlID0gX3JlZi5yZXZlcnNlOwoKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LnNlbmQocXVlcnkkMiwgewogICAgICAgICAgZmlyc3Q6IGZpcnN0LAogICAgICAgICAgc29ydEtleTogc29ydEtleSwKICAgICAgICAgIHF1ZXJ5OiBxdWVyeSQkMSwKICAgICAgICAgIHJldmVyc2U6IHJldmVyc2UKICAgICAgICB9KS50aGVuKGRlZmF1bHRSZXNvbHZlcigicHJvZHVjdHMiKSkudGhlbihwYWdpbmF0ZVByb2R1Y3RDb25uZWN0aW9uc0FuZFJlc29sdmUodGhpcy5ncmFwaFFMQ2xpZW50KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiaGVscGVycyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkgewogICAgICAgIHJldHVybiBwcm9kdWN0SGVscGVyczsKICAgICAgfQogICAgfV0pLCBQcm9kdWN0UmVzb3VyY2U7CiAgfShSZXNvdXJjZSk7CgogIGZ1bmN0aW9uIHF1ZXJ5JDQoY2xpZW50KSB7CiAgICB2YXIgZG9jdW1lbnQgPSBjbGllbnQuZG9jdW1lbnQoKSwKICAgICAgICBzcHJlYWRzID0ge30sCiAgICAgICAgdmFyaWFibGVzID0gewogICAgICBfX2RlZmF1bHRPcGVyYXRpb25fXzoge30KICAgIH07CiAgICByZXR1cm4gdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmlkID0gY2xpZW50LnZhcmlhYmxlKCJpZCIsICJJRCEiKSwgc3ByZWFkcy5Db2xsZWN0aW9uRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ29sbGVjdGlvbkZyYWdtZW50IiwgIkNvbGxlY3Rpb24iLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImhhbmRsZSIpLCByb290LmFkZCgiZGVzY3JpcHRpb24iKSwgcm9vdC5hZGQoImRlc2NyaXB0aW9uSHRtbCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50LmFkZFF1ZXJ5KFt2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaWRdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgibm9kZSIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBpZDogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmlkCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5Db2xsZWN0aW9uRnJhZ21lbnQpOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudDsKICB9CgogIGZ1bmN0aW9uIHF1ZXJ5JDUoY2xpZW50KSB7CiAgICB2YXIgZG9jdW1lbnQgPSBjbGllbnQuZG9jdW1lbnQoKSwKICAgICAgICBzcHJlYWRzID0ge30sCiAgICAgICAgdmFyaWFibGVzID0gewogICAgICBfX2RlZmF1bHRPcGVyYXRpb25fXzoge30KICAgIH07CiAgICByZXR1cm4gdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmlkID0gY2xpZW50LnZhcmlhYmxlKCJpZCIsICJJRCEiKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnByb2R1Y3RzRmlyc3QgPSBjbGllbnQudmFyaWFibGUoInByb2R1Y3RzRmlyc3QiLCAiSW50ISIpLCBzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInRpdGxlIiksIHJvb3QuYWRkKCJwcmljZSIpLCByb290LmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRQcmljZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDIwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJlc2VudG1lbnRQcmljZXMpIHsKICAgICAgICBwcmVzZW50bWVudFByaWNlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIHByZXNlbnRtZW50UHJpY2VzLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJwcmljZSIsIGZ1bmN0aW9uIChwcmljZSkgewogICAgICAgICAgICAgIHByaWNlLmFkZCgiYW1vdW50IiksIHByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiY29tcGFyZUF0UHJpY2UiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2UpIHsKICAgICAgICAgICAgICBjb21wYXJlQXRQcmljZS5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoIndlaWdodCIpLCByb290LmFkZCgiYXZhaWxhYmxlRm9yU2FsZSIsIHsKICAgICAgICBhbGlhczogImF2YWlsYWJsZSIKICAgICAgfSksIHJvb3QuYWRkKCJza3UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlIiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZVYyIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlVjIpIHsKICAgICAgICBjb21wYXJlQXRQcmljZVYyLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZSIsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIGltYWdlLmFkZCgiaWQiKSwgaW1hZ2UuYWRkKCJvcmlnaW5hbFNyYyIsIHsKICAgICAgICAgIGFsaWFzOiAic3JjIgogICAgICAgIH0pLCBpbWFnZS5hZGQoImFsdFRleHQiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzZWxlY3RlZE9wdGlvbnMiLCBmdW5jdGlvbiAoc2VsZWN0ZWRPcHRpb25zKSB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zLmFkZCgibmFtZSIpLCBzZWxlY3RlZE9wdGlvbnMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZSIsIGZ1bmN0aW9uICh1bml0UHJpY2UpIHsKICAgICAgICB1bml0UHJpY2UuYWRkKCJhbW91bnQiKSwgdW5pdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlTWVhc3VyZW1lbnQiLCBmdW5jdGlvbiAodW5pdFByaWNlTWVhc3VyZW1lbnQpIHsKICAgICAgICB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoIm1lYXN1cmVkVHlwZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VmFsdWUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVmFsdWUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Db2xsZWN0aW9uRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ29sbGVjdGlvbkZyYWdtZW50IiwgIkNvbGxlY3Rpb24iLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImhhbmRsZSIpLCByb290LmFkZCgiZGVzY3JpcHRpb24iKSwgcm9vdC5hZGQoImRlc2NyaXB0aW9uSHRtbCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZGVzY3JpcHRpb25IdG1sIiksIHJvb3QuYWRkKCJkZXNjcmlwdGlvbiIpLCByb290LmFkZCgiaGFuZGxlIiksIHJvb3QuYWRkKCJwcm9kdWN0VHlwZSIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInZlbmRvciIpLCByb290LmFkZCgicHVibGlzaGVkQXQiKSwgcm9vdC5hZGQoIm9ubGluZVN0b3JlVXJsIiksIHJvb3QuYWRkKCJvcHRpb25zIiwgZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zLmFkZCgibmFtZSIpLCBvcHRpb25zLmFkZCgidmFsdWVzIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChpbWFnZXMpIHsKICAgICAgICBpbWFnZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBpbWFnZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJzcmMiKSwgbm9kZS5hZGQoImFsdFRleHQiKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoInZhcmlhbnRzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uICh2YXJpYW50cykgewogICAgICAgIHZhcmlhbnRzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgdmFyaWFudHMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkUXVlcnkoW3ZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5pZCwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnByb2R1Y3RzRmlyc3RdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgibm9kZSIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBpZDogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmlkCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5Db2xsZWN0aW9uRnJhZ21lbnQpLCBub2RlLmFkZElubGluZUZyYWdtZW50T24oIkNvbGxlY3Rpb24iLCBmdW5jdGlvbiAoQ29sbGVjdGlvbikgewogICAgICAgICAgQ29sbGVjdGlvbi5hZGQoInByb2R1Y3RzIiwgewogICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgZmlyc3Q6IHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5wcm9kdWN0c0ZpcnN0CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIGZ1bmN0aW9uIChwcm9kdWN0cykgewogICAgICAgICAgICBwcm9kdWN0cy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgICAgICB9KSwgcHJvZHVjdHMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgICAgIGVkZ2VzLmFkZCgiY3Vyc29yIiksIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQ2KGNsaWVudCkgewogICAgdmFyIGRvY3VtZW50ID0gY2xpZW50LmRvY3VtZW50KCksCiAgICAgICAgc3ByZWFkcyA9IHt9LAogICAgICAgIHZhcmlhYmxlcyA9IHsKICAgICAgX19kZWZhdWx0T3BlcmF0aW9uX186IHt9CiAgICB9OwogICAgcmV0dXJuIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5maXJzdCA9IGNsaWVudC52YXJpYWJsZSgiZmlyc3QiLCAiSW50ISIpLCB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18ucXVlcnkgPSBjbGllbnQudmFyaWFibGUoInF1ZXJ5IiwgIlN0cmluZyIpLCB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uc29ydEtleSA9IGNsaWVudC52YXJpYWJsZSgic29ydEtleSIsICJDb2xsZWN0aW9uU29ydEtleXMiKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnJldmVyc2UgPSBjbGllbnQudmFyaWFibGUoInJldmVyc2UiLCAiQm9vbGVhbiIpLCBzcHJlYWRzLkNvbGxlY3Rpb25GcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJDb2xsZWN0aW9uRnJhZ21lbnQiLCAiQ29sbGVjdGlvbiIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgiaGFuZGxlIiksIHJvb3QuYWRkKCJkZXNjcmlwdGlvbiIpLCByb290LmFkZCgiZGVzY3JpcHRpb25IdG1sIiksIHJvb3QuYWRkKCJ1cGRhdGVkQXQiKSwgcm9vdC5hZGQoInRpdGxlIiksIHJvb3QuYWRkKCJpbWFnZSIsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIGltYWdlLmFkZCgiaWQiKSwgaW1hZ2UuYWRkKCJvcmlnaW5hbFNyYyIsIHsKICAgICAgICAgIGFsaWFzOiAic3JjIgogICAgICAgIH0pLCBpbWFnZS5hZGQoImFsdFRleHQiKTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkUXVlcnkoW3ZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5maXJzdCwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnF1ZXJ5LCB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uc29ydEtleSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnJldmVyc2VdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiY29sbGVjdGlvbnMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5maXJzdCwKICAgICAgICAgIHF1ZXJ5OiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18ucXVlcnksCiAgICAgICAgICBzb3J0S2V5OiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uc29ydEtleSwKICAgICAgICAgIHJldmVyc2U6IHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5yZXZlcnNlCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoY29sbGVjdGlvbnMpIHsKICAgICAgICBjb2xsZWN0aW9ucy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGNvbGxlY3Rpb25zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgiY3Vyc29yIiksIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5Db2xsZWN0aW9uRnJhZ21lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50OwogIH0KCiAgZnVuY3Rpb24gcXVlcnkkNyhjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIF9fZGVmYXVsdE9wZXJhdGlvbl9fOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uZmlyc3QgPSBjbGllbnQudmFyaWFibGUoImZpcnN0IiwgIkludCEiKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnF1ZXJ5ID0gY2xpZW50LnZhcmlhYmxlKCJxdWVyeSIsICJTdHJpbmciKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnNvcnRLZXkgPSBjbGllbnQudmFyaWFibGUoInNvcnRLZXkiLCAiQ29sbGVjdGlvblNvcnRLZXlzIiksIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5yZXZlcnNlID0gY2xpZW50LnZhcmlhYmxlKCJyZXZlcnNlIiwgIkJvb2xlYW4iKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnByb2R1Y3RzRmlyc3QgPSBjbGllbnQudmFyaWFibGUoInByb2R1Y3RzRmlyc3QiLCAiSW50ISIpLCBzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInRpdGxlIiksIHJvb3QuYWRkKCJwcmljZSIpLCByb290LmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRQcmljZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDIwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJlc2VudG1lbnRQcmljZXMpIHsKICAgICAgICBwcmVzZW50bWVudFByaWNlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIHByZXNlbnRtZW50UHJpY2VzLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJwcmljZSIsIGZ1bmN0aW9uIChwcmljZSkgewogICAgICAgICAgICAgIHByaWNlLmFkZCgiYW1vdW50IiksIHByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiY29tcGFyZUF0UHJpY2UiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2UpIHsKICAgICAgICAgICAgICBjb21wYXJlQXRQcmljZS5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoIndlaWdodCIpLCByb290LmFkZCgiYXZhaWxhYmxlRm9yU2FsZSIsIHsKICAgICAgICBhbGlhczogImF2YWlsYWJsZSIKICAgICAgfSksIHJvb3QuYWRkKCJza3UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlIiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZVYyIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlVjIpIHsKICAgICAgICBjb21wYXJlQXRQcmljZVYyLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZSIsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIGltYWdlLmFkZCgiaWQiKSwgaW1hZ2UuYWRkKCJvcmlnaW5hbFNyYyIsIHsKICAgICAgICAgIGFsaWFzOiAic3JjIgogICAgICAgIH0pLCBpbWFnZS5hZGQoImFsdFRleHQiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzZWxlY3RlZE9wdGlvbnMiLCBmdW5jdGlvbiAoc2VsZWN0ZWRPcHRpb25zKSB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zLmFkZCgibmFtZSIpLCBzZWxlY3RlZE9wdGlvbnMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZSIsIGZ1bmN0aW9uICh1bml0UHJpY2UpIHsKICAgICAgICB1bml0UHJpY2UuYWRkKCJhbW91bnQiKSwgdW5pdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlTWVhc3VyZW1lbnQiLCBmdW5jdGlvbiAodW5pdFByaWNlTWVhc3VyZW1lbnQpIHsKICAgICAgICB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoIm1lYXN1cmVkVHlwZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VmFsdWUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVmFsdWUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Db2xsZWN0aW9uRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ29sbGVjdGlvbkZyYWdtZW50IiwgIkNvbGxlY3Rpb24iLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImhhbmRsZSIpLCByb290LmFkZCgiZGVzY3JpcHRpb24iKSwgcm9vdC5hZGQoImRlc2NyaXB0aW9uSHRtbCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZGVzY3JpcHRpb25IdG1sIiksIHJvb3QuYWRkKCJkZXNjcmlwdGlvbiIpLCByb290LmFkZCgiaGFuZGxlIiksIHJvb3QuYWRkKCJwcm9kdWN0VHlwZSIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInZlbmRvciIpLCByb290LmFkZCgicHVibGlzaGVkQXQiKSwgcm9vdC5hZGQoIm9ubGluZVN0b3JlVXJsIiksIHJvb3QuYWRkKCJvcHRpb25zIiwgZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zLmFkZCgibmFtZSIpLCBvcHRpb25zLmFkZCgidmFsdWVzIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChpbWFnZXMpIHsKICAgICAgICBpbWFnZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBpbWFnZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJzcmMiKSwgbm9kZS5hZGQoImFsdFRleHQiKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoInZhcmlhbnRzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uICh2YXJpYW50cykgewogICAgICAgIHZhcmlhbnRzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgdmFyaWFudHMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkUXVlcnkoW3ZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5maXJzdCwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnF1ZXJ5LCB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uc29ydEtleSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnJldmVyc2UsIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5wcm9kdWN0c0ZpcnN0XSwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImNvbGxlY3Rpb25zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uZmlyc3QsCiAgICAgICAgICBxdWVyeTogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnF1ZXJ5LAogICAgICAgICAgc29ydEtleTogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLnNvcnRLZXksCiAgICAgICAgICByZXZlcnNlOiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18ucmV2ZXJzZQogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGNvbGxlY3Rpb25zKSB7CiAgICAgICAgY29sbGVjdGlvbnMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBjb2xsZWN0aW9ucy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuQ29sbGVjdGlvbkZyYWdtZW50KSwgbm9kZS5hZGQoInByb2R1Y3RzIiwgewogICAgICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgICAgIGZpcnN0OiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18ucHJvZHVjdHNGaXJzdAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHByb2R1Y3RzKSB7CiAgICAgICAgICAgICAgcHJvZHVjdHMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgICAgICAgIH0pLCBwcm9kdWN0cy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudDsKICB9CgogIGZ1bmN0aW9uIHF1ZXJ5JDgoY2xpZW50KSB7CiAgICB2YXIgZG9jdW1lbnQgPSBjbGllbnQuZG9jdW1lbnQoKSwKICAgICAgICBzcHJlYWRzID0ge30sCiAgICAgICAgdmFyaWFibGVzID0gewogICAgICBfX2RlZmF1bHRPcGVyYXRpb25fXzoge30KICAgIH07CiAgICByZXR1cm4gdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmhhbmRsZSA9IGNsaWVudC52YXJpYWJsZSgiaGFuZGxlIiwgIlN0cmluZyEiKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZGVzY3JpcHRpb25IdG1sIiksIHJvb3QuYWRkKCJkZXNjcmlwdGlvbiIpLCByb290LmFkZCgiaGFuZGxlIiksIHJvb3QuYWRkKCJwcm9kdWN0VHlwZSIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInZlbmRvciIpLCByb290LmFkZCgicHVibGlzaGVkQXQiKSwgcm9vdC5hZGQoIm9ubGluZVN0b3JlVXJsIiksIHJvb3QuYWRkKCJvcHRpb25zIiwgZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zLmFkZCgibmFtZSIpLCBvcHRpb25zLmFkZCgidmFsdWVzIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChpbWFnZXMpIHsKICAgICAgICBpbWFnZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBpbWFnZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJzcmMiKSwgbm9kZS5hZGQoImFsdFRleHQiKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoInZhcmlhbnRzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uICh2YXJpYW50cykgewogICAgICAgIHZhcmlhbnRzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgdmFyaWFudHMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Db2xsZWN0aW9uRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ29sbGVjdGlvbkZyYWdtZW50IiwgIkNvbGxlY3Rpb24iLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImhhbmRsZSIpLCByb290LmFkZCgiZGVzY3JpcHRpb24iKSwgcm9vdC5hZGQoImRlc2NyaXB0aW9uSHRtbCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuQ29sbGVjdGlvbnNQcm9kdWN0c0ZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNvbGxlY3Rpb25zUHJvZHVjdHNGcmFnbWVudCIsICJDb2xsZWN0aW9uIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInByb2R1Y3RzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByb2R1Y3RzKSB7CiAgICAgICAgcHJvZHVjdHMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcm9kdWN0cy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudC5hZGRRdWVyeShbdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmhhbmRsZV0sIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJjb2xsZWN0aW9uQnlIYW5kbGUiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgaGFuZGxlOiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaGFuZGxlCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoY29sbGVjdGlvbkJ5SGFuZGxlKSB7CiAgICAgICAgY29sbGVjdGlvbkJ5SGFuZGxlLmFkZEZyYWdtZW50KHNwcmVhZHMuQ29sbGVjdGlvbkZyYWdtZW50KSwgY29sbGVjdGlvbkJ5SGFuZGxlLmFkZEZyYWdtZW50KHNwcmVhZHMuQ29sbGVjdGlvbnNQcm9kdWN0c0ZyYWdtZW50KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICB2YXIgQ29sbGVjdGlvblJlc291cmNlID0gZnVuY3Rpb24gKF9SZXNvdXJjZSkgewogICAgZnVuY3Rpb24gQ29sbGVjdGlvblJlc291cmNlKCkgewogICAgICByZXR1cm4gY2xhc3NDYWxsQ2hlY2skMSh0aGlzLCBDb2xsZWN0aW9uUmVzb3VyY2UpLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJDEodGhpcywgKENvbGxlY3Rpb25SZXNvdXJjZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbGxlY3Rpb25SZXNvdXJjZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgfQoKICAgIHJldHVybiBpbmhlcml0cyQxKENvbGxlY3Rpb25SZXNvdXJjZSwgX1Jlc291cmNlKSwgY3JlYXRlQ2xhc3MkMShDb2xsZWN0aW9uUmVzb3VyY2UsIFt7CiAgICAgIGtleTogImZldGNoQWxsIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoQWxsKCkgewogICAgICAgIHZhciBmaXJzdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzBdID8gYXJndW1lbnRzWzBdIDogMjA7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDYsIHsKICAgICAgICAgIGZpcnN0OiBmaXJzdAogICAgICAgIH0pLnRoZW4oZGVmYXVsdFJlc29sdmVyKCJjb2xsZWN0aW9ucyIpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmZXRjaEFsbFdpdGhQcm9kdWN0cyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEFsbFdpdGhQcm9kdWN0cygpIHsKICAgICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzBdID8gYXJndW1lbnRzWzBdIDoge30sCiAgICAgICAgICAgIF9yZWYkZmlyc3QgPSBfcmVmLmZpcnN0LAogICAgICAgICAgICBmaXJzdCA9IHZvaWQgMCA9PT0gX3JlZiRmaXJzdCA/IDIwIDogX3JlZiRmaXJzdCwKICAgICAgICAgICAgX3JlZiRwcm9kdWN0c0ZpcnN0ID0gX3JlZi5wcm9kdWN0c0ZpcnN0LAogICAgICAgICAgICBwcm9kdWN0c0ZpcnN0ID0gdm9pZCAwID09PSBfcmVmJHByb2R1Y3RzRmlyc3QgPyAyMCA6IF9yZWYkcHJvZHVjdHNGaXJzdDsKCiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDcsIHsKICAgICAgICAgIGZpcnN0OiBmaXJzdCwKICAgICAgICAgIHByb2R1Y3RzRmlyc3Q6IHByb2R1Y3RzRmlyc3QKICAgICAgICB9KS50aGVuKGRlZmF1bHRSZXNvbHZlcigiY29sbGVjdGlvbnMiKSkudGhlbihwYWdpbmF0ZUNvbGxlY3Rpb25zUHJvZHVjdENvbm5lY3Rpb25zQW5kUmVzb2x2ZSh0aGlzLmdyYXBoUUxDbGllbnQpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmZXRjaCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaChpZCkgewogICAgICAgIHJldHVybiB0aGlzLmdyYXBoUUxDbGllbnQuc2VuZChxdWVyeSQ0LCB7CiAgICAgICAgICBpZDogaWQKICAgICAgICB9KS50aGVuKGRlZmF1bHRSZXNvbHZlcigibm9kZSIpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmZXRjaFdpdGhQcm9kdWN0cyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaFdpdGhQcm9kdWN0cyhpZCkgewogICAgICAgIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzFdID8gYXJndW1lbnRzWzFdIDoge30sCiAgICAgICAgICAgIF9yZWYyJHByb2R1Y3RzRmlyc3QgPSBfcmVmMi5wcm9kdWN0c0ZpcnN0LAogICAgICAgICAgICBwcm9kdWN0c0ZpcnN0ID0gdm9pZCAwID09PSBfcmVmMiRwcm9kdWN0c0ZpcnN0ID8gMjAgOiBfcmVmMiRwcm9kdWN0c0ZpcnN0OwoKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LnNlbmQocXVlcnkkNSwgewogICAgICAgICAgaWQ6IGlkLAogICAgICAgICAgcHJvZHVjdHNGaXJzdDogcHJvZHVjdHNGaXJzdAogICAgICAgIH0pLnRoZW4oZGVmYXVsdFJlc29sdmVyKCJub2RlIikpLnRoZW4ocGFnaW5hdGVDb2xsZWN0aW9uc1Byb2R1Y3RDb25uZWN0aW9uc0FuZFJlc29sdmUodGhpcy5ncmFwaFFMQ2xpZW50KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZmV0Y2hCeUhhbmRsZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEJ5SGFuZGxlKGhhbmRsZSkgewogICAgICAgIHJldHVybiB0aGlzLmdyYXBoUUxDbGllbnQuc2VuZChxdWVyeSQ4LCB7CiAgICAgICAgICBoYW5kbGU6IGhhbmRsZQogICAgICAgIH0pLnRoZW4oZGVmYXVsdFJlc29sdmVyKCJjb2xsZWN0aW9uQnlIYW5kbGUiKSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZmV0Y2hRdWVyeSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaFF1ZXJ5KCkgewogICAgICAgIHZhciBfcmVmMyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzBdID8gYXJndW1lbnRzWzBdIDoge30sCiAgICAgICAgICAgIF9yZWYzJGZpcnN0ID0gX3JlZjMuZmlyc3QsCiAgICAgICAgICAgIGZpcnN0ID0gdm9pZCAwID09PSBfcmVmMyRmaXJzdCA/IDIwIDogX3JlZjMkZmlyc3QsCiAgICAgICAgICAgIF9yZWYzJHNvcnRLZXkgPSBfcmVmMy5zb3J0S2V5LAogICAgICAgICAgICBzb3J0S2V5ID0gdm9pZCAwID09PSBfcmVmMyRzb3J0S2V5ID8gIklEIiA6IF9yZWYzJHNvcnRLZXksCiAgICAgICAgICAgIHF1ZXJ5ID0gX3JlZjMucXVlcnksCiAgICAgICAgICAgIHJldmVyc2UgPSBfcmVmMy5yZXZlcnNlOwoKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LnNlbmQocXVlcnkkNiwgewogICAgICAgICAgZmlyc3Q6IGZpcnN0LAogICAgICAgICAgc29ydEtleTogc29ydEtleSwKICAgICAgICAgIHF1ZXJ5OiBxdWVyeSwKICAgICAgICAgIHJldmVyc2U6IHJldmVyc2UKICAgICAgICB9KS50aGVuKGRlZmF1bHRSZXNvbHZlcigiY29sbGVjdGlvbnMiKSk7CiAgICAgIH0KICAgIH1dKSwgQ29sbGVjdGlvblJlc291cmNlOwogIH0oUmVzb3VyY2UpOwoKICBmdW5jdGlvbiBxdWVyeSQ5KGNsaWVudCkgewogICAgdmFyIGRvY3VtZW50ID0gY2xpZW50LmRvY3VtZW50KCk7CiAgICByZXR1cm4gZG9jdW1lbnQuYWRkUXVlcnkoZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInNob3AiLCBmdW5jdGlvbiAoc2hvcCkgewogICAgICAgIHNob3AuYWRkKCJjdXJyZW5jeUNvZGUiKSwgc2hvcC5hZGQoInBheW1lbnRTZXR0aW5ncyIsIGZ1bmN0aW9uIChwYXltZW50U2V0dGluZ3MpIHsKICAgICAgICAgIHBheW1lbnRTZXR0aW5ncy5hZGQoImVuYWJsZWRQcmVzZW50bWVudEN1cnJlbmNpZXMiKTsKICAgICAgICB9KSwgc2hvcC5hZGQoImRlc2NyaXB0aW9uIiksIHNob3AuYWRkKCJtb25leUZvcm1hdCIpLCBzaG9wLmFkZCgibmFtZSIpLCBzaG9wLmFkZCgicHJpbWFyeURvbWFpbiIsIGZ1bmN0aW9uIChwcmltYXJ5RG9tYWluKSB7CiAgICAgICAgICBwcmltYXJ5RG9tYWluLmFkZCgiaG9zdCIpLCBwcmltYXJ5RG9tYWluLmFkZCgic3NsRW5hYmxlZCIpLCBwcmltYXJ5RG9tYWluLmFkZCgidXJsIik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50OwogIH0KCiAgZnVuY3Rpb24gcXVlcnkkMTAoY2xpZW50KSB7CiAgICB2YXIgZG9jdW1lbnQgPSBjbGllbnQuZG9jdW1lbnQoKSwKICAgICAgICBzcHJlYWRzID0ge307CiAgICByZXR1cm4gc3ByZWFkcy5Qb2xpY3lGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJQb2xpY3lGcmFnbWVudCIsICJTaG9wUG9saWN5IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgidXJsIiksIHJvb3QuYWRkKCJib2R5Iik7CiAgICB9KSwgZG9jdW1lbnQuYWRkUXVlcnkoZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInNob3AiLCBmdW5jdGlvbiAoc2hvcCkgewogICAgICAgIHNob3AuYWRkKCJwcml2YWN5UG9saWN5IiwgZnVuY3Rpb24gKHByaXZhY3lQb2xpY3kpIHsKICAgICAgICAgIHByaXZhY3lQb2xpY3kuYWRkRnJhZ21lbnQoc3ByZWFkcy5Qb2xpY3lGcmFnbWVudCk7CiAgICAgICAgfSksIHNob3AuYWRkKCJ0ZXJtc09mU2VydmljZSIsIGZ1bmN0aW9uICh0ZXJtc09mU2VydmljZSkgewogICAgICAgICAgdGVybXNPZlNlcnZpY2UuYWRkRnJhZ21lbnQoc3ByZWFkcy5Qb2xpY3lGcmFnbWVudCk7CiAgICAgICAgfSksIHNob3AuYWRkKCJyZWZ1bmRQb2xpY3kiLCBmdW5jdGlvbiAocmVmdW5kUG9saWN5KSB7CiAgICAgICAgICByZWZ1bmRQb2xpY3kuYWRkRnJhZ21lbnQoc3ByZWFkcy5Qb2xpY3lGcmFnbWVudCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50OwogIH0KCiAgdmFyIFNob3BSZXNvdXJjZSA9IGZ1bmN0aW9uIChfUmVzb3VyY2UpIHsKICAgIGZ1bmN0aW9uIFNob3BSZXNvdXJjZSgpIHsKICAgICAgcmV0dXJuIGNsYXNzQ2FsbENoZWNrJDEodGhpcywgU2hvcFJlc291cmNlKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiQxKHRoaXMsIChTaG9wUmVzb3VyY2UuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTaG9wUmVzb3VyY2UpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsKICAgIH0KCiAgICByZXR1cm4gaW5oZXJpdHMkMShTaG9wUmVzb3VyY2UsIF9SZXNvdXJjZSksIGNyZWF0ZUNsYXNzJDEoU2hvcFJlc291cmNlLCBbewogICAgICBrZXk6ICJmZXRjaEluZm8iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hJbmZvKCkgewogICAgICAgIHJldHVybiB0aGlzLmdyYXBoUUxDbGllbnQuc2VuZChxdWVyeSQ5KS50aGVuKGRlZmF1bHRSZXNvbHZlcigic2hvcCIpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmZXRjaFBvbGljaWVzIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoUG9saWNpZXMoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDEwKS50aGVuKGRlZmF1bHRSZXNvbHZlcigic2hvcCIpKTsKICAgICAgfQogICAgfV0pLCBTaG9wUmVzb3VyY2U7CiAgfShSZXNvdXJjZSk7CgogIGZ1bmN0aW9uIGhhbmRsZUNoZWNrb3V0TXV0YXRpb24obXV0YXRpb25Sb290S2V5LCBjbGllbnQpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoX3JlZikgewogICAgICB2YXIgX3JlZiRkYXRhID0gX3JlZi5kYXRhLAogICAgICAgICAgZGF0YSA9IHZvaWQgMCA9PT0gX3JlZiRkYXRhID8ge30gOiBfcmVmJGRhdGEsCiAgICAgICAgICBlcnJvcnMgPSBfcmVmLmVycm9ycywKICAgICAgICAgIF9yZWYkbW9kZWwgPSBfcmVmLm1vZGVsLAogICAgICAgICAgbW9kZWwgPSB2b2lkIDAgPT09IF9yZWYkbW9kZWwgPyB7fSA6IF9yZWYkbW9kZWwsCiAgICAgICAgICByb290RGF0YSA9IGRhdGFbbXV0YXRpb25Sb290S2V5XSwKICAgICAgICAgIHJvb3RNb2RlbCA9IG1vZGVsW211dGF0aW9uUm9vdEtleV07CiAgICAgIHJldHVybiByb290RGF0YSAmJiByb290RGF0YS5jaGVja291dCA/IGNsaWVudC5mZXRjaEFsbFBhZ2VzKHJvb3RNb2RlbC5jaGVja291dC5saW5lSXRlbXMsIHsKICAgICAgICBwYWdlU2l6ZTogMjUwCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGxpbmVJdGVtcykgewogICAgICAgIHJldHVybiByb290TW9kZWwuY2hlY2tvdXQuYXR0cnMubGluZUl0ZW1zID0gbGluZUl0ZW1zLCByb290TW9kZWwuY2hlY2tvdXQuZXJyb3JzID0gZXJyb3JzLCByb290TW9kZWwuY2hlY2tvdXQudXNlckVycm9ycyA9IHJvb3RNb2RlbC51c2VyRXJyb3JzLCByb290TW9kZWwuY2hlY2tvdXQ7CiAgICAgIH0pIDogZXJyb3JzICYmIGVycm9ycy5sZW5ndGggPyBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyb3JzKSkpIDogcm9vdERhdGEgJiYgcm9vdERhdGEuY2hlY2tvdXRVc2VyRXJyb3JzICYmIHJvb3REYXRhLmNoZWNrb3V0VXNlckVycm9ycy5sZW5ndGggPyBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkocm9vdERhdGEuY2hlY2tvdXRVc2VyRXJyb3JzKSkpIDogcm9vdERhdGEgJiYgcm9vdERhdGEudXNlckVycm9ycyAmJiByb290RGF0YS51c2VyRXJyb3JzLmxlbmd0aCA/IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeShyb290RGF0YS51c2VyRXJyb3JzKSkpIDogUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCJUaGUgIiArIG11dGF0aW9uUm9vdEtleSArICIgbXV0YXRpb24gZmFpbGVkIGR1ZSB0byBhbiB1bmtub3duIGVycm9yLiIpKTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQxMShjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIF9fZGVmYXVsdE9wZXJhdGlvbl9fOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaWQgPSBjbGllbnQudmFyaWFibGUoImlkIiwgIklEISIpLCBzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInRpdGxlIiksIHJvb3QuYWRkKCJwcmljZSIpLCByb290LmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRQcmljZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDIwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJlc2VudG1lbnRQcmljZXMpIHsKICAgICAgICBwcmVzZW50bWVudFByaWNlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIHByZXNlbnRtZW50UHJpY2VzLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJwcmljZSIsIGZ1bmN0aW9uIChwcmljZSkgewogICAgICAgICAgICAgIHByaWNlLmFkZCgiYW1vdW50IiksIHByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiY29tcGFyZUF0UHJpY2UiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2UpIHsKICAgICAgICAgICAgICBjb21wYXJlQXRQcmljZS5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoIndlaWdodCIpLCByb290LmFkZCgiYXZhaWxhYmxlRm9yU2FsZSIsIHsKICAgICAgICBhbGlhczogImF2YWlsYWJsZSIKICAgICAgfSksIHJvb3QuYWRkKCJza3UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlIiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZVYyIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlVjIpIHsKICAgICAgICBjb21wYXJlQXRQcmljZVYyLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZSIsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIGltYWdlLmFkZCgiaWQiKSwgaW1hZ2UuYWRkKCJvcmlnaW5hbFNyYyIsIHsKICAgICAgICAgIGFsaWFzOiAic3JjIgogICAgICAgIH0pLCBpbWFnZS5hZGQoImFsdFRleHQiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzZWxlY3RlZE9wdGlvbnMiLCBmdW5jdGlvbiAoc2VsZWN0ZWRPcHRpb25zKSB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zLmFkZCgibmFtZSIpLCBzZWxlY3RlZE9wdGlvbnMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZSIsIGZ1bmN0aW9uICh1bml0UHJpY2UpIHsKICAgICAgICB1bml0UHJpY2UuYWRkKCJhbW91bnQiKSwgdW5pdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlTWVhc3VyZW1lbnQiLCBmdW5jdGlvbiAodW5pdFByaWNlTWVhc3VyZW1lbnQpIHsKICAgICAgICB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoIm1lYXN1cmVkVHlwZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VmFsdWUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVmFsdWUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50IiwgIkRpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgidGFyZ2V0U2VsZWN0aW9uIiksIHJvb3QuYWRkKCJhbGxvY2F0aW9uTWV0aG9kIiksIHJvb3QuYWRkKCJ0YXJnZXRUeXBlIiksIHJvb3QuYWRkKCJ2YWx1ZSIsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHZhbHVlLmFkZElubGluZUZyYWdtZW50T24oIk1vbmV5VjIiLCBmdW5jdGlvbiAoTW9uZXlWMikgewogICAgICAgICAgTW9uZXlWMi5hZGQoImFtb3VudCIpLCBNb25leVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIHZhbHVlLmFkZElubGluZUZyYWdtZW50T24oIlByaWNpbmdQZXJjZW50YWdlVmFsdWUiLCBmdW5jdGlvbiAoUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZSkgewogICAgICAgICAgUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZS5hZGQoInBlcmNlbnRhZ2UiKTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoInRpdGxlIiksIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJEaXNjb3VudENvZGVBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChEaXNjb3VudENvZGVBcHBsaWNhdGlvbikgewogICAgICAgIERpc2NvdW50Q29kZUFwcGxpY2F0aW9uLmFkZCgiY29kZSIpLCBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImFwcGxpY2FibGUiKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbi5hZGQoImRlc2NyaXB0aW9uIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIkF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50IiwgIkFwcGxpZWRHaWZ0Q2FyZCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJhbW91bnRVc2VkVjIiLCBmdW5jdGlvbiAoYW1vdW50VXNlZFYyKSB7CiAgICAgICAgYW1vdW50VXNlZFYyLmFkZCgiYW1vdW50IiksIGFtb3VudFVzZWRWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImJhbGFuY2VWMiIsIGZ1bmN0aW9uIChiYWxhbmNlVjIpIHsKICAgICAgICBiYWxhbmNlVjIuYWRkKCJhbW91bnQiKSwgYmFsYW5jZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRBbW91bnRVc2VkIiwgZnVuY3Rpb24gKHByZXNlbnRtZW50QW1vdW50VXNlZCkgewogICAgICAgIHByZXNlbnRtZW50QW1vdW50VXNlZC5hZGQoImFtb3VudCIpLCBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgibGFzdENoYXJhY3RlcnMiKTsKICAgIH0pLCBzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCksIHJvb3QuYWRkKCJwcm9kdWN0IiwgZnVuY3Rpb24gKHByb2R1Y3QpIHsKICAgICAgICBwcm9kdWN0LmFkZCgiaWQiKSwgcHJvZHVjdC5hZGQoImhhbmRsZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiTWFpbGluZ0FkZHJlc3NGcmFnbWVudCIsICJNYWlsaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgiYWRkcmVzczEiKSwgcm9vdC5hZGQoImFkZHJlc3MyIiksIHJvb3QuYWRkKCJjaXR5IiksIHJvb3QuYWRkKCJjb21wYW55IiksIHJvb3QuYWRkKCJjb3VudHJ5IiksIHJvb3QuYWRkKCJmaXJzdE5hbWUiKSwgcm9vdC5hZGQoImZvcm1hdHRlZCIpLCByb290LmFkZCgibGFzdE5hbWUiKSwgcm9vdC5hZGQoImxhdGl0dWRlIiksIHJvb3QuYWRkKCJsb25naXR1ZGUiKSwgcm9vdC5hZGQoInBob25lIiksIHJvb3QuYWRkKCJwcm92aW5jZSIpLCByb290LmFkZCgiemlwIiksIHJvb3QuYWRkKCJuYW1lIiksIHJvb3QuYWRkKCJjb3VudHJ5Q29kZVYyIiwgewogICAgICAgIGFsaWFzOiAiY291bnRyeUNvZGUiCiAgICAgIH0pLCByb290LmFkZCgicHJvdmluY2VDb2RlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0RnJhZ21lbnQiLCAiQ2hlY2tvdXQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInJlYWR5IiksIHJvb3QuYWRkKCJyZXF1aXJlc1NoaXBwaW5nIiksIHJvb3QuYWRkKCJub3RlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlVjIiLCBmdW5jdGlvbiAocGF5bWVudER1ZVYyKSB7CiAgICAgICAgcGF5bWVudER1ZVYyLmFkZCgiYW1vdW50IiksIHBheW1lbnREdWVWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIndlYlVybCIpLCByb290LmFkZCgib3JkZXJTdGF0dXNVcmwiKSwgcm9vdC5hZGQoInRheEV4ZW1wdCIpLCByb290LmFkZCgidGF4ZXNJbmNsdWRlZCIpLCByb290LmFkZCgiY3VycmVuY3lDb2RlIiksIHJvb3QuYWRkKCJ0b3RhbFRheCIpLCByb290LmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgdG90YWxUYXhWMi5hZGQoImFtb3VudCIpLCB0b3RhbFRheFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zU3VidG90YWxQcmljZSIsIGZ1bmN0aW9uIChsaW5lSXRlbXNTdWJ0b3RhbFByaWNlKSB7CiAgICAgICAgbGluZUl0ZW1zU3VidG90YWxQcmljZS5hZGQoImFtb3VudCIpLCBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgic3VidG90YWxQcmljZSIpLCByb290LmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgIHN1YnRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCBzdWJ0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImNvbXBsZXRlZEF0IiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZW1haWwiKSwgcm9vdC5hZGQoImRpc2NvdW50QXBwbGljYXRpb25zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAxMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb25zKSB7CiAgICAgICAgZGlzY291bnRBcHBsaWNhdGlvbnMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoImFwcGxpZWRHaWZ0Q2FyZHMiLCBmdW5jdGlvbiAoYXBwbGllZEdpZnRDYXJkcykgewogICAgICAgIGFwcGxpZWRHaWZ0Q2FyZHMuYWRkRnJhZ21lbnQoc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHNoaXBwaW5nQWRkcmVzcykgewogICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICB9KSwgcm9vdC5hZGQoInNoaXBwaW5nTGluZSIsIGZ1bmN0aW9uIChzaGlwcGluZ0xpbmUpIHsKICAgICAgICBzaGlwcGluZ0xpbmUuYWRkKCJoYW5kbGUiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2UiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgc2hpcHBpbmdMaW5lLmFkZCgidGl0bGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIm9yZGVyIiwgZnVuY3Rpb24gKG9yZGVyKSB7CiAgICAgICAgb3JkZXIuYWRkKCJpZCIpLCBvcmRlci5hZGQoInByb2Nlc3NlZEF0IiksIG9yZGVyLmFkZCgib3JkZXJOdW1iZXIiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZSIpLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsU2hpcHBpbmdQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsVGF4IiksIG9yZGVyLmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsUHJpY2VWMikgewogICAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImN1cnJlbmN5Q29kZSIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWQiKSwgb3JkZXIuYWRkKCJ0b3RhbFJlZnVuZGVkVjIiLCBmdW5jdGlvbiAodG90YWxSZWZ1bmRlZFYyKSB7CiAgICAgICAgICB0b3RhbFJlZnVuZGVkVjIuYWRkKCJhbW91bnQiKSwgdG90YWxSZWZ1bmRlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VzdG9tZXJVcmwiKSwgb3JkZXIuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MuYWRkRnJhZ21lbnQoc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50KTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAobGluZUl0ZW1zKSB7CiAgICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgICB9KSwgbGluZUl0ZW1zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgICBub2RlLmFkZCgidGl0bGUiKSwgbm9kZS5hZGQoInZhcmlhbnQiLCBmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJxdWFudGl0eSIpLCBub2RlLmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJkaXNjb3VudEFsbG9jYXRpb25zIiwgZnVuY3Rpb24gKGRpc2NvdW50QWxsb2NhdGlvbnMpIHsKICAgICAgICAgICAgICBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiYWxsb2NhdGVkQW1vdW50IiwgZnVuY3Rpb24gKGFsbG9jYXRlZEFtb3VudCkgewogICAgICAgICAgICAgICAgYWxsb2NhdGVkQW1vdW50LmFkZCgiYW1vdW50IiksIGFsbG9jYXRlZEFtb3VudC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICAgIH0pLCBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChkaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9uLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkUXVlcnkoW3ZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5pZF0sIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJub2RlIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGlkOiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaWQKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgbm9kZS5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQpOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudDsKICB9CgogIGZ1bmN0aW9uIHF1ZXJ5JDEyKGNsaWVudCkgewogICAgdmFyIGRvY3VtZW50ID0gY2xpZW50LmRvY3VtZW50KCksCiAgICAgICAgc3ByZWFkcyA9IHt9LAogICAgICAgIHZhcmlhYmxlcyA9IHsKICAgICAgX19kZWZhdWx0T3BlcmF0aW9uX186IHt9CiAgICB9OwogICAgcmV0dXJuIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5pbnB1dCA9IGNsaWVudC52YXJpYWJsZSgiaW5wdXQiLCAiQ2hlY2tvdXRDcmVhdGVJbnB1dCEiKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCIsICJEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInRhcmdldFNlbGVjdGlvbiIpLCByb290LmFkZCgiYWxsb2NhdGlvbk1ldGhvZCIpLCByb290LmFkZCgidGFyZ2V0VHlwZSIpLCByb290LmFkZCgidmFsdWUiLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJNb25leVYyIiwgZnVuY3Rpb24gKE1vbmV5VjIpIHsKICAgICAgICAgIE1vbmV5VjIuYWRkKCJhbW91bnQiKSwgTW9uZXlWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJQcmljaW5nUGVyY2VudGFnZVZhbHVlIiwgZnVuY3Rpb24gKFByaWNpbmdQZXJjZW50YWdlVmFsdWUpIHsKICAgICAgICAgIFByaWNpbmdQZXJjZW50YWdlVmFsdWUuYWRkKCJwZXJjZW50YWdlIik7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIk1hbnVhbERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpLCBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiRGlzY291bnRDb2RlQXBwbGljYXRpb24iLCBmdW5jdGlvbiAoRGlzY291bnRDb2RlQXBwbGljYXRpb24pIHsKICAgICAgICBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImNvZGUiKSwgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJhcHBsaWNhYmxlIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIlNjcmlwdERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJBcHBsaWVkR2lmdENhcmRGcmFnbWVudCIsICJBcHBsaWVkR2lmdENhcmQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiYW1vdW50VXNlZFYyIiwgZnVuY3Rpb24gKGFtb3VudFVzZWRWMikgewogICAgICAgIGFtb3VudFVzZWRWMi5hZGQoImFtb3VudCIpLCBhbW91bnRVc2VkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJiYWxhbmNlVjIiLCBmdW5jdGlvbiAoYmFsYW5jZVYyKSB7CiAgICAgICAgYmFsYW5jZVYyLmFkZCgiYW1vdW50IiksIGJhbGFuY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50QW1vdW50VXNlZCIsIGZ1bmN0aW9uIChwcmVzZW50bWVudEFtb3VudFVzZWQpIHsKICAgICAgICBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJhbW91bnQiKSwgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImxhc3RDaGFyYWN0ZXJzIik7CiAgICB9KSwgc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQpLCByb290LmFkZCgicHJvZHVjdCIsIGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgcHJvZHVjdC5hZGQoImlkIiksIHByb2R1Y3QuYWRkKCJoYW5kbGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Vc2VyRXJyb3JGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJVc2VyRXJyb3JGcmFnbWVudCIsICJVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCIsICJDaGVja291dFVzZXJFcnJvciIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJmaWVsZCIpLCByb290LmFkZCgibWVzc2FnZSIpLCByb290LmFkZCgiY29kZSIpOwogICAgfSksIHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJNYWlsaW5nQWRkcmVzc0ZyYWdtZW50IiwgIk1haWxpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhZGRyZXNzMSIpLCByb290LmFkZCgiYWRkcmVzczIiKSwgcm9vdC5hZGQoImNpdHkiKSwgcm9vdC5hZGQoImNvbXBhbnkiKSwgcm9vdC5hZGQoImNvdW50cnkiKSwgcm9vdC5hZGQoImZpcnN0TmFtZSIpLCByb290LmFkZCgiZm9ybWF0dGVkIiksIHJvb3QuYWRkKCJsYXN0TmFtZSIpLCByb290LmFkZCgibGF0aXR1ZGUiKSwgcm9vdC5hZGQoImxvbmdpdHVkZSIpLCByb290LmFkZCgicGhvbmUiKSwgcm9vdC5hZGQoInByb3ZpbmNlIiksIHJvb3QuYWRkKCJ6aXAiKSwgcm9vdC5hZGQoIm5hbWUiKSwgcm9vdC5hZGQoImNvdW50cnlDb2RlVjIiLCB7CiAgICAgICAgYWxpYXM6ICJjb3VudHJ5Q29kZSIKICAgICAgfSksIHJvb3QuYWRkKCJwcm92aW5jZUNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRGcmFnbWVudCIsICJDaGVja291dCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgicmVhZHkiKSwgcm9vdC5hZGQoInJlcXVpcmVzU2hpcHBpbmciKSwgcm9vdC5hZGQoIm5vdGUiKSwgcm9vdC5hZGQoInBheW1lbnREdWUiKSwgcm9vdC5hZGQoInBheW1lbnREdWVWMiIsIGZ1bmN0aW9uIChwYXltZW50RHVlVjIpIHsKICAgICAgICBwYXltZW50RHVlVjIuYWRkKCJhbW91bnQiKSwgcGF5bWVudER1ZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgid2ViVXJsIiksIHJvb3QuYWRkKCJvcmRlclN0YXR1c1VybCIpLCByb290LmFkZCgidGF4RXhlbXB0IiksIHJvb3QuYWRkKCJ0YXhlc0luY2x1ZGVkIiksIHJvb3QuYWRkKCJjdXJyZW5jeUNvZGUiKSwgcm9vdC5hZGQoInRvdGFsVGF4IiksIHJvb3QuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXNTdWJ0b3RhbFByaWNlIiwgZnVuY3Rpb24gKGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UpIHsKICAgICAgICBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiYW1vdW50IiksIGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInRvdGFsUHJpY2UiKSwgcm9vdC5hZGQoInRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFByaWNlVjIpIHsKICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiY29tcGxldGVkQXQiKSwgcm9vdC5hZGQoImNyZWF0ZWRBdCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJlbWFpbCIpLCByb290LmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbnMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDEwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoZGlzY291bnRBcHBsaWNhdGlvbnMpIHsKICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGRpc2NvdW50QXBwbGljYXRpb25zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgiYXBwbGllZEdpZnRDYXJkcyIsIGZ1bmN0aW9uIChhcHBsaWVkR2lmdENhcmRzKSB7CiAgICAgICAgYXBwbGllZEdpZnRDYXJkcy5hZGRGcmFnbWVudChzcHJlYWRzLkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50KTsKICAgICAgfSksIHJvb3QuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgc2hpcHBpbmdBZGRyZXNzLmFkZEZyYWdtZW50KHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdMaW5lIiwgZnVuY3Rpb24gKHNoaXBwaW5nTGluZSkgewogICAgICAgIHNoaXBwaW5nTGluZS5hZGQoImhhbmRsZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBzaGlwcGluZ0xpbmUuYWRkKCJ0aXRsZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgib3JkZXIiLCBmdW5jdGlvbiAob3JkZXIpIHsKICAgICAgICBvcmRlci5hZGQoImlkIiksIG9yZGVyLmFkZCgicHJvY2Vzc2VkQXQiKSwgb3JkZXIuYWRkKCJvcmRlck51bWJlciIpLCBvcmRlci5hZGQoInN1YnRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgICBzdWJ0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgc3VidG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlIiksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxTaGlwcGluZ1ByaWNlVjIpIHsKICAgICAgICAgIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxUYXgiKSwgb3JkZXIuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICAgIHRvdGFsVGF4VjIuYWRkKCJhbW91bnQiKSwgdG90YWxUYXhWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VycmVuY3lDb2RlIiksIG9yZGVyLmFkZCgidG90YWxSZWZ1bmRlZCIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWRWMiIsIGZ1bmN0aW9uICh0b3RhbFJlZnVuZGVkVjIpIHsKICAgICAgICAgIHRvdGFsUmVmdW5kZWRWMi5hZGQoImFtb3VudCIpLCB0b3RhbFJlZnVuZGVkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJjdXN0b21lclVybCIpLCBvcmRlci5hZGQoInNoaXBwaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChzaGlwcGluZ0FkZHJlc3MpIHsKICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImxpbmVJdGVtcyIsIHsKICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICAgIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pLCBub2RlLmFkZCgicXVhbnRpdHkiKSwgbm9kZS5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGxpbmVJdGVtcykgewogICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGxpbmVJdGVtcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgiaWQiKSwgbm9kZS5hZGQoInRpdGxlIiksIG5vZGUuYWRkKCJ2YXJpYW50IiwgZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImRpc2NvdW50QWxsb2NhdGlvbnMiLCBmdW5jdGlvbiAoZGlzY291bnRBbGxvY2F0aW9ucykgewogICAgICAgICAgICAgIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJhbGxvY2F0ZWRBbW91bnQiLCBmdW5jdGlvbiAoYWxsb2NhdGVkQW1vdW50KSB7CiAgICAgICAgICAgICAgICBhbGxvY2F0ZWRBbW91bnQuYWRkKCJhbW91bnQiKSwgYWxsb2NhdGVkQW1vdW50LmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgICAgfSksIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJkaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICAgICAgICAgIGRpc2NvdW50QXBwbGljYXRpb24uYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudC5hZGRNdXRhdGlvbihbdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmlucHV0XSwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImNoZWNrb3V0Q3JlYXRlIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGlucHV0OiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uaW5wdXQKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChjaGVja291dENyZWF0ZSkgewogICAgICAgIGNoZWNrb3V0Q3JlYXRlLmFkZCgidXNlckVycm9ycyIsIGZ1bmN0aW9uICh1c2VyRXJyb3JzKSB7CiAgICAgICAgICB1c2VyRXJyb3JzLmFkZEZyYWdtZW50KHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dENyZWF0ZS5hZGQoImNoZWNrb3V0VXNlckVycm9ycyIsIGZ1bmN0aW9uIChjaGVja291dFVzZXJFcnJvcnMpIHsKICAgICAgICAgIGNoZWNrb3V0VXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dENyZWF0ZS5hZGQoImNoZWNrb3V0IiwgZnVuY3Rpb24gKGNoZWNrb3V0KSB7CiAgICAgICAgICBjaGVja291dC5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudDsKICB9CgogIGZ1bmN0aW9uIHF1ZXJ5JDEzKGNsaWVudCkgewogICAgdmFyIGRvY3VtZW50ID0gY2xpZW50LmRvY3VtZW50KCksCiAgICAgICAgc3ByZWFkcyA9IHt9LAogICAgICAgIHZhcmlhYmxlcyA9IHsKICAgICAgX19kZWZhdWx0T3BlcmF0aW9uX186IHt9CiAgICB9OwogICAgcmV0dXJuIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5jaGVja291dElkID0gY2xpZW50LnZhcmlhYmxlKCJjaGVja291dElkIiwgIklEISIpLCB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18ubGluZUl0ZW1zID0gY2xpZW50LnZhcmlhYmxlKCJsaW5lSXRlbXMiLCAiW0NoZWNrb3V0TGluZUl0ZW1JbnB1dCFdISIpLCBzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInRpdGxlIiksIHJvb3QuYWRkKCJwcmljZSIpLCByb290LmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRQcmljZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDIwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJlc2VudG1lbnRQcmljZXMpIHsKICAgICAgICBwcmVzZW50bWVudFByaWNlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIHByZXNlbnRtZW50UHJpY2VzLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJwcmljZSIsIGZ1bmN0aW9uIChwcmljZSkgewogICAgICAgICAgICAgIHByaWNlLmFkZCgiYW1vdW50IiksIHByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiY29tcGFyZUF0UHJpY2UiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2UpIHsKICAgICAgICAgICAgICBjb21wYXJlQXRQcmljZS5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoIndlaWdodCIpLCByb290LmFkZCgiYXZhaWxhYmxlRm9yU2FsZSIsIHsKICAgICAgICBhbGlhczogImF2YWlsYWJsZSIKICAgICAgfSksIHJvb3QuYWRkKCJza3UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlIiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZVYyIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlVjIpIHsKICAgICAgICBjb21wYXJlQXRQcmljZVYyLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZSIsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIGltYWdlLmFkZCgiaWQiKSwgaW1hZ2UuYWRkKCJvcmlnaW5hbFNyYyIsIHsKICAgICAgICAgIGFsaWFzOiAic3JjIgogICAgICAgIH0pLCBpbWFnZS5hZGQoImFsdFRleHQiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzZWxlY3RlZE9wdGlvbnMiLCBmdW5jdGlvbiAoc2VsZWN0ZWRPcHRpb25zKSB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zLmFkZCgibmFtZSIpLCBzZWxlY3RlZE9wdGlvbnMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZSIsIGZ1bmN0aW9uICh1bml0UHJpY2UpIHsKICAgICAgICB1bml0UHJpY2UuYWRkKCJhbW91bnQiKSwgdW5pdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlTWVhc3VyZW1lbnQiLCBmdW5jdGlvbiAodW5pdFByaWNlTWVhc3VyZW1lbnQpIHsKICAgICAgICB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoIm1lYXN1cmVkVHlwZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VmFsdWUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVmFsdWUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50IiwgIkRpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgidGFyZ2V0U2VsZWN0aW9uIiksIHJvb3QuYWRkKCJhbGxvY2F0aW9uTWV0aG9kIiksIHJvb3QuYWRkKCJ0YXJnZXRUeXBlIiksIHJvb3QuYWRkKCJ2YWx1ZSIsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHZhbHVlLmFkZElubGluZUZyYWdtZW50T24oIk1vbmV5VjIiLCBmdW5jdGlvbiAoTW9uZXlWMikgewogICAgICAgICAgTW9uZXlWMi5hZGQoImFtb3VudCIpLCBNb25leVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIHZhbHVlLmFkZElubGluZUZyYWdtZW50T24oIlByaWNpbmdQZXJjZW50YWdlVmFsdWUiLCBmdW5jdGlvbiAoUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZSkgewogICAgICAgICAgUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZS5hZGQoInBlcmNlbnRhZ2UiKTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoInRpdGxlIiksIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJEaXNjb3VudENvZGVBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChEaXNjb3VudENvZGVBcHBsaWNhdGlvbikgewogICAgICAgIERpc2NvdW50Q29kZUFwcGxpY2F0aW9uLmFkZCgiY29kZSIpLCBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImFwcGxpY2FibGUiKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbi5hZGQoImRlc2NyaXB0aW9uIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIkF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50IiwgIkFwcGxpZWRHaWZ0Q2FyZCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJhbW91bnRVc2VkVjIiLCBmdW5jdGlvbiAoYW1vdW50VXNlZFYyKSB7CiAgICAgICAgYW1vdW50VXNlZFYyLmFkZCgiYW1vdW50IiksIGFtb3VudFVzZWRWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImJhbGFuY2VWMiIsIGZ1bmN0aW9uIChiYWxhbmNlVjIpIHsKICAgICAgICBiYWxhbmNlVjIuYWRkKCJhbW91bnQiKSwgYmFsYW5jZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRBbW91bnRVc2VkIiwgZnVuY3Rpb24gKHByZXNlbnRtZW50QW1vdW50VXNlZCkgewogICAgICAgIHByZXNlbnRtZW50QW1vdW50VXNlZC5hZGQoImFtb3VudCIpLCBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgibGFzdENoYXJhY3RlcnMiKTsKICAgIH0pLCBzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCksIHJvb3QuYWRkKCJwcm9kdWN0IiwgZnVuY3Rpb24gKHByb2R1Y3QpIHsKICAgICAgICBwcm9kdWN0LmFkZCgiaWQiKSwgcHJvZHVjdC5hZGQoImhhbmRsZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLlVzZXJFcnJvckZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlVzZXJFcnJvckZyYWdtZW50IiwgIlVzZXJFcnJvciIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJmaWVsZCIpLCByb290LmFkZCgibWVzc2FnZSIpOwogICAgfSksIHNwcmVhZHMuQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJDaGVja291dFVzZXJFcnJvckZyYWdtZW50IiwgIkNoZWNrb3V0VXNlckVycm9yIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImZpZWxkIiksIHJvb3QuYWRkKCJtZXNzYWdlIiksIHJvb3QuYWRkKCJjb2RlIik7CiAgICB9KSwgc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIk1haWxpbmdBZGRyZXNzRnJhZ21lbnQiLCAiTWFpbGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImFkZHJlc3MxIiksIHJvb3QuYWRkKCJhZGRyZXNzMiIpLCByb290LmFkZCgiY2l0eSIpLCByb290LmFkZCgiY29tcGFueSIpLCByb290LmFkZCgiY291bnRyeSIpLCByb290LmFkZCgiZmlyc3ROYW1lIiksIHJvb3QuYWRkKCJmb3JtYXR0ZWQiKSwgcm9vdC5hZGQoImxhc3ROYW1lIiksIHJvb3QuYWRkKCJsYXRpdHVkZSIpLCByb290LmFkZCgibG9uZ2l0dWRlIiksIHJvb3QuYWRkKCJwaG9uZSIpLCByb290LmFkZCgicHJvdmluY2UiKSwgcm9vdC5hZGQoInppcCIpLCByb290LmFkZCgibmFtZSIpLCByb290LmFkZCgiY291bnRyeUNvZGVWMiIsIHsKICAgICAgICBhbGlhczogImNvdW50cnlDb2RlIgogICAgICB9KSwgcm9vdC5hZGQoInByb3ZpbmNlQ29kZSIpOwogICAgfSksIHNwcmVhZHMuQ2hlY2tvdXRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJDaGVja291dEZyYWdtZW50IiwgIkNoZWNrb3V0IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJyZWFkeSIpLCByb290LmFkZCgicmVxdWlyZXNTaGlwcGluZyIpLCByb290LmFkZCgibm90ZSIpLCByb290LmFkZCgicGF5bWVudER1ZSIpLCByb290LmFkZCgicGF5bWVudER1ZVYyIiwgZnVuY3Rpb24gKHBheW1lbnREdWVWMikgewogICAgICAgIHBheW1lbnREdWVWMi5hZGQoImFtb3VudCIpLCBwYXltZW50RHVlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWJVcmwiKSwgcm9vdC5hZGQoIm9yZGVyU3RhdHVzVXJsIiksIHJvb3QuYWRkKCJ0YXhFeGVtcHQiKSwgcm9vdC5hZGQoInRheGVzSW5jbHVkZWQiKSwgcm9vdC5hZGQoImN1cnJlbmN5Q29kZSIpLCByb290LmFkZCgidG90YWxUYXgiKSwgcm9vdC5hZGQoInRvdGFsVGF4VjIiLCBmdW5jdGlvbiAodG90YWxUYXhWMikgewogICAgICAgIHRvdGFsVGF4VjIuYWRkKCJhbW91bnQiKSwgdG90YWxUYXhWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImxpbmVJdGVtc1N1YnRvdGFsUHJpY2UiLCBmdW5jdGlvbiAobGluZUl0ZW1zU3VidG90YWxQcmljZSkgewogICAgICAgIGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UuYWRkKCJhbW91bnQiKSwgbGluZUl0ZW1zU3VidG90YWxQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInN1YnRvdGFsUHJpY2UiKSwgcm9vdC5hZGQoInN1YnRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uIChzdWJ0b3RhbFByaWNlVjIpIHsKICAgICAgICBzdWJ0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgc3VidG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidG90YWxQcmljZSIpLCByb290LmFkZCgidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsUHJpY2VWMikgewogICAgICAgIHRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJjb21wbGV0ZWRBdCIpLCByb290LmFkZCgiY3JlYXRlZEF0IiksIHJvb3QuYWRkKCJ1cGRhdGVkQXQiKSwgcm9vdC5hZGQoImVtYWlsIiksIHJvb3QuYWRkKCJkaXNjb3VudEFwcGxpY2F0aW9ucyIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBmaXJzdDogMTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChkaXNjb3VudEFwcGxpY2F0aW9ucykgewogICAgICAgIGRpc2NvdW50QXBwbGljYXRpb25zLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgZGlzY291bnRBcHBsaWNhdGlvbnMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGRGcmFnbWVudChzcHJlYWRzLkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJhcHBsaWVkR2lmdENhcmRzIiwgZnVuY3Rpb24gKGFwcGxpZWRHaWZ0Q2FyZHMpIHsKICAgICAgICBhcHBsaWVkR2lmdENhcmRzLmFkZEZyYWdtZW50KHNwcmVhZHMuQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQpOwogICAgICB9KSwgcm9vdC5hZGQoInNoaXBwaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChzaGlwcGluZ0FkZHJlc3MpIHsKICAgICAgICBzaGlwcGluZ0FkZHJlc3MuYWRkRnJhZ21lbnQoc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50KTsKICAgICAgfSksIHJvb3QuYWRkKCJzaGlwcGluZ0xpbmUiLCBmdW5jdGlvbiAoc2hpcHBpbmdMaW5lKSB7CiAgICAgICAgc2hpcHBpbmdMaW5lLmFkZCgiaGFuZGxlIiksIHNoaXBwaW5nTGluZS5hZGQoInByaWNlIiksIHNoaXBwaW5nTGluZS5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIHNoaXBwaW5nTGluZS5hZGQoInRpdGxlIik7CiAgICAgIH0pLCByb290LmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJvcmRlciIsIGZ1bmN0aW9uIChvcmRlcikgewogICAgICAgIG9yZGVyLmFkZCgiaWQiKSwgb3JkZXIuYWRkKCJwcm9jZXNzZWRBdCIpLCBvcmRlci5hZGQoIm9yZGVyTnVtYmVyIiksIG9yZGVyLmFkZCgic3VidG90YWxQcmljZSIpLCBvcmRlci5hZGQoInN1YnRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uIChzdWJ0b3RhbFByaWNlVjIpIHsKICAgICAgICAgIHN1YnRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCBzdWJ0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFNoaXBwaW5nUHJpY2UiKSwgb3JkZXIuYWRkKCJ0b3RhbFNoaXBwaW5nUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFNoaXBwaW5nUHJpY2VWMikgewogICAgICAgICAgdG90YWxTaGlwcGluZ1ByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxTaGlwcGluZ1ByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFRheCIpLCBvcmRlci5hZGQoInRvdGFsVGF4VjIiLCBmdW5jdGlvbiAodG90YWxUYXhWMikgewogICAgICAgICAgdG90YWxUYXhWMi5hZGQoImFtb3VudCIpLCB0b3RhbFRheFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxQcmljZSIpLCBvcmRlci5hZGQoInRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFByaWNlVjIpIHsKICAgICAgICAgIHRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJjdXJyZW5jeUNvZGUiKSwgb3JkZXIuYWRkKCJ0b3RhbFJlZnVuZGVkIiksIG9yZGVyLmFkZCgidG90YWxSZWZ1bmRlZFYyIiwgZnVuY3Rpb24gKHRvdGFsUmVmdW5kZWRWMikgewogICAgICAgICAgdG90YWxSZWZ1bmRlZFYyLmFkZCgiYW1vdW50IiksIHRvdGFsUmVmdW5kZWRWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImN1c3RvbWVyVXJsIiksIG9yZGVyLmFkZCgic2hpcHBpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHNoaXBwaW5nQWRkcmVzcykgewogICAgICAgICAgc2hpcHBpbmdBZGRyZXNzLmFkZEZyYWdtZW50KHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCk7CiAgICAgICAgfSksIG9yZGVyLmFkZCgibGluZUl0ZW1zIiwgewogICAgICAgICAgYXJnczogewogICAgICAgICAgICBmaXJzdDogMjUwCiAgICAgICAgICB9CiAgICAgICAgfSwgZnVuY3Rpb24gKGxpbmVJdGVtcykgewogICAgICAgICAgbGluZUl0ZW1zLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgICAgfSksIGxpbmVJdGVtcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICAgIGVkZ2VzLmFkZCgiY3Vyc29yIiksIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgICAgbm9kZS5hZGQoInRpdGxlIiksIG5vZGUuYWRkKCJ2YXJpYW50IiwgZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICAgICAgICAgIHZhcmlhbnQuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCk7CiAgICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJxdWFudGl0eSIpLCBub2RlLmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoImxpbmVJdGVtcyIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBmaXJzdDogMjUwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAobGluZUl0ZW1zKSB7CiAgICAgICAgbGluZUl0ZW1zLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgbGluZUl0ZW1zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgiY3Vyc29yIiksIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJpZCIpLCBub2RlLmFkZCgidGl0bGUiKSwgbm9kZS5hZGQoInZhcmlhbnQiLCBmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgICAgIHZhcmlhbnQuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCk7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgicXVhbnRpdHkiKSwgbm9kZS5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiZGlzY291bnRBbGxvY2F0aW9ucyIsIGZ1bmN0aW9uIChkaXNjb3VudEFsbG9jYXRpb25zKSB7CiAgICAgICAgICAgICAgZGlzY291bnRBbGxvY2F0aW9ucy5hZGQoImFsbG9jYXRlZEFtb3VudCIsIGZ1bmN0aW9uIChhbGxvY2F0ZWRBbW91bnQpIHsKICAgICAgICAgICAgICAgIGFsbG9jYXRlZEFtb3VudC5hZGQoImFtb3VudCIpLCBhbGxvY2F0ZWRBbW91bnQuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgICB9KSwgZGlzY291bnRBbGxvY2F0aW9ucy5hZGQoImRpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoZGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgICAgICAgICAgZGlzY291bnRBcHBsaWNhdGlvbi5hZGRGcmFnbWVudChzcHJlYWRzLkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50LmFkZE11dGF0aW9uKFt2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uY2hlY2tvdXRJZCwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmxpbmVJdGVtc10sIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJjaGVja291dExpbmVJdGVtc0FkZCIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBjaGVja291dElkOiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uY2hlY2tvdXRJZCwKICAgICAgICAgIGxpbmVJdGVtczogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmxpbmVJdGVtcwogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGNoZWNrb3V0TGluZUl0ZW1zQWRkKSB7CiAgICAgICAgY2hlY2tvdXRMaW5lSXRlbXNBZGQuYWRkKCJ1c2VyRXJyb3JzIiwgZnVuY3Rpb24gKHVzZXJFcnJvcnMpIHsKICAgICAgICAgIHVzZXJFcnJvcnMuYWRkRnJhZ21lbnQoc3ByZWFkcy5Vc2VyRXJyb3JGcmFnbWVudCk7CiAgICAgICAgfSksIGNoZWNrb3V0TGluZUl0ZW1zQWRkLmFkZCgiY2hlY2tvdXRVc2VyRXJyb3JzIiwgZnVuY3Rpb24gKGNoZWNrb3V0VXNlckVycm9ycykgewogICAgICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzLmFkZEZyYWdtZW50KHNwcmVhZHMuQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCk7CiAgICAgICAgfSksIGNoZWNrb3V0TGluZUl0ZW1zQWRkLmFkZCgiY2hlY2tvdXQiLCBmdW5jdGlvbiAoY2hlY2tvdXQpIHsKICAgICAgICAgIGNoZWNrb3V0LmFkZEZyYWdtZW50KHNwcmVhZHMuQ2hlY2tvdXRGcmFnbWVudCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50OwogIH0KCiAgZnVuY3Rpb24gcXVlcnkkMTQoY2xpZW50KSB7CiAgICB2YXIgZG9jdW1lbnQgPSBjbGllbnQuZG9jdW1lbnQoKSwKICAgICAgICBzcHJlYWRzID0ge30sCiAgICAgICAgdmFyaWFibGVzID0gewogICAgICBfX2RlZmF1bHRPcGVyYXRpb25fXzoge30KICAgIH07CiAgICByZXR1cm4gdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmNoZWNrb3V0SWQgPSBjbGllbnQudmFyaWFibGUoImNoZWNrb3V0SWQiLCAiSUQhIiksIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5saW5lSXRlbUlkcyA9IGNsaWVudC52YXJpYWJsZSgibGluZUl0ZW1JZHMiLCAiW0lEIV0hIiksIHNwcmVhZHMuVmFyaWFudEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlZhcmlhbnRGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInByaWNlIiksIHJvb3QuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJwcmVzZW50bWVudFByaWNlcyIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBmaXJzdDogMjAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChwcmVzZW50bWVudFByaWNlcykgewogICAgICAgIHByZXNlbnRtZW50UHJpY2VzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoInByaWNlIiwgZnVuY3Rpb24gKHByaWNlKSB7CiAgICAgICAgICAgICAgcHJpY2UuYWRkKCJhbW91bnQiKSwgcHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJjb21wYXJlQXRQcmljZSIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZSkgewogICAgICAgICAgICAgIGNvbXBhcmVBdFByaWNlLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgid2VpZ2h0IiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiwgewogICAgICAgIGFsaWFzOiAiYXZhaWxhYmxlIgogICAgICB9KSwgcm9vdC5hZGQoInNrdSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlVjIiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2VWMikgewogICAgICAgIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImltYWdlIiwgZnVuY3Rpb24gKGltYWdlKSB7CiAgICAgICAgaW1hZ2UuYWRkKCJpZCIpLCBpbWFnZS5hZGQoIm9yaWdpbmFsU3JjIiwgewogICAgICAgICAgYWxpYXM6ICJzcmMiCiAgICAgICAgfSksIGltYWdlLmFkZCgiYWx0VGV4dCIpOwogICAgICB9KSwgcm9vdC5hZGQoInNlbGVjdGVkT3B0aW9ucyIsIGZ1bmN0aW9uIChzZWxlY3RlZE9wdGlvbnMpIHsKICAgICAgICBzZWxlY3RlZE9wdGlvbnMuYWRkKCJuYW1lIiksIHNlbGVjdGVkT3B0aW9ucy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlIiwgZnVuY3Rpb24gKHVuaXRQcmljZSkgewogICAgICAgIHVuaXRQcmljZS5hZGQoImFtb3VudCIpLCB1bml0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2VNZWFzdXJlbWVudCIsIGZ1bmN0aW9uICh1bml0UHJpY2VNZWFzdXJlbWVudCkgewogICAgICAgIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgibWVhc3VyZWRUeXBlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicXVhbnRpdHlVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicXVhbnRpdHlWYWx1ZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VWYWx1ZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJEaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQiLCAiRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJ0YXJnZXRTZWxlY3Rpb24iKSwgcm9vdC5hZGQoImFsbG9jYXRpb25NZXRob2QiKSwgcm9vdC5hZGQoInRhcmdldFR5cGUiKSwgcm9vdC5hZGQoInZhbHVlIiwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgdmFsdWUuYWRkSW5saW5lRnJhZ21lbnRPbigiTW9uZXlWMiIsIGZ1bmN0aW9uIChNb25leVYyKSB7CiAgICAgICAgICBNb25leVYyLmFkZCgiYW1vdW50IiksIE1vbmV5VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgdmFsdWUuYWRkSW5saW5lRnJhZ21lbnRPbigiUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZSIsIGZ1bmN0aW9uIChQcmljaW5nUGVyY2VudGFnZVZhbHVlKSB7CiAgICAgICAgICBQcmljaW5nUGVyY2VudGFnZVZhbHVlLmFkZCgicGVyY2VudGFnZSIpOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKSwgTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoImRlc2NyaXB0aW9uIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIkRpc2NvdW50Q29kZUFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKERpc2NvdW50Q29kZUFwcGxpY2F0aW9uKSB7CiAgICAgICAgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJjb2RlIiksIERpc2NvdW50Q29kZUFwcGxpY2F0aW9uLmFkZCgiYXBwbGljYWJsZSIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoInRpdGxlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQiLCAiQXBwbGllZEdpZnRDYXJkIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImFtb3VudFVzZWRWMiIsIGZ1bmN0aW9uIChhbW91bnRVc2VkVjIpIHsKICAgICAgICBhbW91bnRVc2VkVjIuYWRkKCJhbW91bnQiKSwgYW1vdW50VXNlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiYmFsYW5jZVYyIiwgZnVuY3Rpb24gKGJhbGFuY2VWMikgewogICAgICAgIGJhbGFuY2VWMi5hZGQoImFtb3VudCIpLCBiYWxhbmNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJwcmVzZW50bWVudEFtb3VudFVzZWQiLCBmdW5jdGlvbiAocHJlc2VudG1lbnRBbW91bnRVc2VkKSB7CiAgICAgICAgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiYW1vdW50IiksIHByZXNlbnRtZW50QW1vdW50VXNlZC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJsYXN0Q2hhcmFjdGVycyIpOwogICAgfSksIHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudEZyYWdtZW50KSwgcm9vdC5hZGQoInByb2R1Y3QiLCBmdW5jdGlvbiAocHJvZHVjdCkgewogICAgICAgIHByb2R1Y3QuYWRkKCJpZCIpLCBwcm9kdWN0LmFkZCgiaGFuZGxlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVXNlckVycm9yRnJhZ21lbnQiLCAiVXNlckVycm9yIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImZpZWxkIiksIHJvb3QuYWRkKCJtZXNzYWdlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQiLCAiQ2hlY2tvdXRVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKSwgcm9vdC5hZGQoImNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiTWFpbGluZ0FkZHJlc3NGcmFnbWVudCIsICJNYWlsaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgiYWRkcmVzczEiKSwgcm9vdC5hZGQoImFkZHJlc3MyIiksIHJvb3QuYWRkKCJjaXR5IiksIHJvb3QuYWRkKCJjb21wYW55IiksIHJvb3QuYWRkKCJjb3VudHJ5IiksIHJvb3QuYWRkKCJmaXJzdE5hbWUiKSwgcm9vdC5hZGQoImZvcm1hdHRlZCIpLCByb290LmFkZCgibGFzdE5hbWUiKSwgcm9vdC5hZGQoImxhdGl0dWRlIiksIHJvb3QuYWRkKCJsb25naXR1ZGUiKSwgcm9vdC5hZGQoInBob25lIiksIHJvb3QuYWRkKCJwcm92aW5jZSIpLCByb290LmFkZCgiemlwIiksIHJvb3QuYWRkKCJuYW1lIiksIHJvb3QuYWRkKCJjb3VudHJ5Q29kZVYyIiwgewogICAgICAgIGFsaWFzOiAiY291bnRyeUNvZGUiCiAgICAgIH0pLCByb290LmFkZCgicHJvdmluY2VDb2RlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0RnJhZ21lbnQiLCAiQ2hlY2tvdXQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInJlYWR5IiksIHJvb3QuYWRkKCJyZXF1aXJlc1NoaXBwaW5nIiksIHJvb3QuYWRkKCJub3RlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlVjIiLCBmdW5jdGlvbiAocGF5bWVudER1ZVYyKSB7CiAgICAgICAgcGF5bWVudER1ZVYyLmFkZCgiYW1vdW50IiksIHBheW1lbnREdWVWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIndlYlVybCIpLCByb290LmFkZCgib3JkZXJTdGF0dXNVcmwiKSwgcm9vdC5hZGQoInRheEV4ZW1wdCIpLCByb290LmFkZCgidGF4ZXNJbmNsdWRlZCIpLCByb290LmFkZCgiY3VycmVuY3lDb2RlIiksIHJvb3QuYWRkKCJ0b3RhbFRheCIpLCByb290LmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgdG90YWxUYXhWMi5hZGQoImFtb3VudCIpLCB0b3RhbFRheFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zU3VidG90YWxQcmljZSIsIGZ1bmN0aW9uIChsaW5lSXRlbXNTdWJ0b3RhbFByaWNlKSB7CiAgICAgICAgbGluZUl0ZW1zU3VidG90YWxQcmljZS5hZGQoImFtb3VudCIpLCBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgic3VidG90YWxQcmljZSIpLCByb290LmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgIHN1YnRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCBzdWJ0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImNvbXBsZXRlZEF0IiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZW1haWwiKSwgcm9vdC5hZGQoImRpc2NvdW50QXBwbGljYXRpb25zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAxMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb25zKSB7CiAgICAgICAgZGlzY291bnRBcHBsaWNhdGlvbnMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoImFwcGxpZWRHaWZ0Q2FyZHMiLCBmdW5jdGlvbiAoYXBwbGllZEdpZnRDYXJkcykgewogICAgICAgIGFwcGxpZWRHaWZ0Q2FyZHMuYWRkRnJhZ21lbnQoc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHNoaXBwaW5nQWRkcmVzcykgewogICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICB9KSwgcm9vdC5hZGQoInNoaXBwaW5nTGluZSIsIGZ1bmN0aW9uIChzaGlwcGluZ0xpbmUpIHsKICAgICAgICBzaGlwcGluZ0xpbmUuYWRkKCJoYW5kbGUiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2UiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgc2hpcHBpbmdMaW5lLmFkZCgidGl0bGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIm9yZGVyIiwgZnVuY3Rpb24gKG9yZGVyKSB7CiAgICAgICAgb3JkZXIuYWRkKCJpZCIpLCBvcmRlci5hZGQoInByb2Nlc3NlZEF0IiksIG9yZGVyLmFkZCgib3JkZXJOdW1iZXIiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZSIpLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsU2hpcHBpbmdQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsVGF4IiksIG9yZGVyLmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsUHJpY2VWMikgewogICAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImN1cnJlbmN5Q29kZSIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWQiKSwgb3JkZXIuYWRkKCJ0b3RhbFJlZnVuZGVkVjIiLCBmdW5jdGlvbiAodG90YWxSZWZ1bmRlZFYyKSB7CiAgICAgICAgICB0b3RhbFJlZnVuZGVkVjIuYWRkKCJhbW91bnQiKSwgdG90YWxSZWZ1bmRlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VzdG9tZXJVcmwiKSwgb3JkZXIuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MuYWRkRnJhZ21lbnQoc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50KTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAobGluZUl0ZW1zKSB7CiAgICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgICB9KSwgbGluZUl0ZW1zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgICBub2RlLmFkZCgidGl0bGUiKSwgbm9kZS5hZGQoInZhcmlhbnQiLCBmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJxdWFudGl0eSIpLCBub2RlLmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJkaXNjb3VudEFsbG9jYXRpb25zIiwgZnVuY3Rpb24gKGRpc2NvdW50QWxsb2NhdGlvbnMpIHsKICAgICAgICAgICAgICBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiYWxsb2NhdGVkQW1vdW50IiwgZnVuY3Rpb24gKGFsbG9jYXRlZEFtb3VudCkgewogICAgICAgICAgICAgICAgYWxsb2NhdGVkQW1vdW50LmFkZCgiYW1vdW50IiksIGFsbG9jYXRlZEFtb3VudC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICAgIH0pLCBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChkaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9uLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkTXV0YXRpb24oW3ZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5jaGVja291dElkLCB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18ubGluZUl0ZW1JZHNdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiY2hlY2tvdXRMaW5lSXRlbXNSZW1vdmUiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgY2hlY2tvdXRJZDogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmNoZWNrb3V0SWQsCiAgICAgICAgICBsaW5lSXRlbUlkczogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmxpbmVJdGVtSWRzCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoY2hlY2tvdXRMaW5lSXRlbXNSZW1vdmUpIHsKICAgICAgICBjaGVja291dExpbmVJdGVtc1JlbW92ZS5hZGQoInVzZXJFcnJvcnMiLCBmdW5jdGlvbiAodXNlckVycm9ycykgewogICAgICAgICAgdXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLlVzZXJFcnJvckZyYWdtZW50KTsKICAgICAgICB9KSwgY2hlY2tvdXRMaW5lSXRlbXNSZW1vdmUuYWRkKCJjaGVja291dFVzZXJFcnJvcnMiLCBmdW5jdGlvbiAoY2hlY2tvdXRVc2VyRXJyb3JzKSB7CiAgICAgICAgICBjaGVja291dFVzZXJFcnJvcnMuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50KTsKICAgICAgICB9KSwgY2hlY2tvdXRMaW5lSXRlbXNSZW1vdmUuYWRkKCJjaGVja291dCIsIGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgICAgY2hlY2tvdXQuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dEZyYWdtZW50KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQxNShjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIF9fZGVmYXVsdE9wZXJhdGlvbl9fOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uY2hlY2tvdXRJZCA9IGNsaWVudC52YXJpYWJsZSgiY2hlY2tvdXRJZCIsICJJRCEiKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmxpbmVJdGVtcyA9IGNsaWVudC52YXJpYWJsZSgibGluZUl0ZW1zIiwgIltDaGVja291dExpbmVJdGVtSW5wdXQhXSEiKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCIsICJEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInRhcmdldFNlbGVjdGlvbiIpLCByb290LmFkZCgiYWxsb2NhdGlvbk1ldGhvZCIpLCByb290LmFkZCgidGFyZ2V0VHlwZSIpLCByb290LmFkZCgidmFsdWUiLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJNb25leVYyIiwgZnVuY3Rpb24gKE1vbmV5VjIpIHsKICAgICAgICAgIE1vbmV5VjIuYWRkKCJhbW91bnQiKSwgTW9uZXlWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJQcmljaW5nUGVyY2VudGFnZVZhbHVlIiwgZnVuY3Rpb24gKFByaWNpbmdQZXJjZW50YWdlVmFsdWUpIHsKICAgICAgICAgIFByaWNpbmdQZXJjZW50YWdlVmFsdWUuYWRkKCJwZXJjZW50YWdlIik7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIk1hbnVhbERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpLCBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiRGlzY291bnRDb2RlQXBwbGljYXRpb24iLCBmdW5jdGlvbiAoRGlzY291bnRDb2RlQXBwbGljYXRpb24pIHsKICAgICAgICBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImNvZGUiKSwgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJhcHBsaWNhYmxlIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIlNjcmlwdERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJBcHBsaWVkR2lmdENhcmRGcmFnbWVudCIsICJBcHBsaWVkR2lmdENhcmQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiYW1vdW50VXNlZFYyIiwgZnVuY3Rpb24gKGFtb3VudFVzZWRWMikgewogICAgICAgIGFtb3VudFVzZWRWMi5hZGQoImFtb3VudCIpLCBhbW91bnRVc2VkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJiYWxhbmNlVjIiLCBmdW5jdGlvbiAoYmFsYW5jZVYyKSB7CiAgICAgICAgYmFsYW5jZVYyLmFkZCgiYW1vdW50IiksIGJhbGFuY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50QW1vdW50VXNlZCIsIGZ1bmN0aW9uIChwcmVzZW50bWVudEFtb3VudFVzZWQpIHsKICAgICAgICBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJhbW91bnQiKSwgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImxhc3RDaGFyYWN0ZXJzIik7CiAgICB9KSwgc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQpLCByb290LmFkZCgicHJvZHVjdCIsIGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgcHJvZHVjdC5hZGQoImlkIiksIHByb2R1Y3QuYWRkKCJoYW5kbGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQiLCAiQ2hlY2tvdXRVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKSwgcm9vdC5hZGQoImNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiTWFpbGluZ0FkZHJlc3NGcmFnbWVudCIsICJNYWlsaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgiYWRkcmVzczEiKSwgcm9vdC5hZGQoImFkZHJlc3MyIiksIHJvb3QuYWRkKCJjaXR5IiksIHJvb3QuYWRkKCJjb21wYW55IiksIHJvb3QuYWRkKCJjb3VudHJ5IiksIHJvb3QuYWRkKCJmaXJzdE5hbWUiKSwgcm9vdC5hZGQoImZvcm1hdHRlZCIpLCByb290LmFkZCgibGFzdE5hbWUiKSwgcm9vdC5hZGQoImxhdGl0dWRlIiksIHJvb3QuYWRkKCJsb25naXR1ZGUiKSwgcm9vdC5hZGQoInBob25lIiksIHJvb3QuYWRkKCJwcm92aW5jZSIpLCByb290LmFkZCgiemlwIiksIHJvb3QuYWRkKCJuYW1lIiksIHJvb3QuYWRkKCJjb3VudHJ5Q29kZVYyIiwgewogICAgICAgIGFsaWFzOiAiY291bnRyeUNvZGUiCiAgICAgIH0pLCByb290LmFkZCgicHJvdmluY2VDb2RlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0RnJhZ21lbnQiLCAiQ2hlY2tvdXQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInJlYWR5IiksIHJvb3QuYWRkKCJyZXF1aXJlc1NoaXBwaW5nIiksIHJvb3QuYWRkKCJub3RlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlVjIiLCBmdW5jdGlvbiAocGF5bWVudER1ZVYyKSB7CiAgICAgICAgcGF5bWVudER1ZVYyLmFkZCgiYW1vdW50IiksIHBheW1lbnREdWVWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIndlYlVybCIpLCByb290LmFkZCgib3JkZXJTdGF0dXNVcmwiKSwgcm9vdC5hZGQoInRheEV4ZW1wdCIpLCByb290LmFkZCgidGF4ZXNJbmNsdWRlZCIpLCByb290LmFkZCgiY3VycmVuY3lDb2RlIiksIHJvb3QuYWRkKCJ0b3RhbFRheCIpLCByb290LmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgdG90YWxUYXhWMi5hZGQoImFtb3VudCIpLCB0b3RhbFRheFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zU3VidG90YWxQcmljZSIsIGZ1bmN0aW9uIChsaW5lSXRlbXNTdWJ0b3RhbFByaWNlKSB7CiAgICAgICAgbGluZUl0ZW1zU3VidG90YWxQcmljZS5hZGQoImFtb3VudCIpLCBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgic3VidG90YWxQcmljZSIpLCByb290LmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgIHN1YnRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCBzdWJ0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImNvbXBsZXRlZEF0IiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZW1haWwiKSwgcm9vdC5hZGQoImRpc2NvdW50QXBwbGljYXRpb25zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAxMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb25zKSB7CiAgICAgICAgZGlzY291bnRBcHBsaWNhdGlvbnMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoImFwcGxpZWRHaWZ0Q2FyZHMiLCBmdW5jdGlvbiAoYXBwbGllZEdpZnRDYXJkcykgewogICAgICAgIGFwcGxpZWRHaWZ0Q2FyZHMuYWRkRnJhZ21lbnQoc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHNoaXBwaW5nQWRkcmVzcykgewogICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICB9KSwgcm9vdC5hZGQoInNoaXBwaW5nTGluZSIsIGZ1bmN0aW9uIChzaGlwcGluZ0xpbmUpIHsKICAgICAgICBzaGlwcGluZ0xpbmUuYWRkKCJoYW5kbGUiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2UiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgc2hpcHBpbmdMaW5lLmFkZCgidGl0bGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIm9yZGVyIiwgZnVuY3Rpb24gKG9yZGVyKSB7CiAgICAgICAgb3JkZXIuYWRkKCJpZCIpLCBvcmRlci5hZGQoInByb2Nlc3NlZEF0IiksIG9yZGVyLmFkZCgib3JkZXJOdW1iZXIiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZSIpLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsU2hpcHBpbmdQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsVGF4IiksIG9yZGVyLmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsUHJpY2VWMikgewogICAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImN1cnJlbmN5Q29kZSIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWQiKSwgb3JkZXIuYWRkKCJ0b3RhbFJlZnVuZGVkVjIiLCBmdW5jdGlvbiAodG90YWxSZWZ1bmRlZFYyKSB7CiAgICAgICAgICB0b3RhbFJlZnVuZGVkVjIuYWRkKCJhbW91bnQiKSwgdG90YWxSZWZ1bmRlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VzdG9tZXJVcmwiKSwgb3JkZXIuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MuYWRkRnJhZ21lbnQoc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50KTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAobGluZUl0ZW1zKSB7CiAgICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgICB9KSwgbGluZUl0ZW1zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgICBub2RlLmFkZCgidGl0bGUiKSwgbm9kZS5hZGQoInZhcmlhbnQiLCBmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJxdWFudGl0eSIpLCBub2RlLmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJkaXNjb3VudEFsbG9jYXRpb25zIiwgZnVuY3Rpb24gKGRpc2NvdW50QWxsb2NhdGlvbnMpIHsKICAgICAgICAgICAgICBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiYWxsb2NhdGVkQW1vdW50IiwgZnVuY3Rpb24gKGFsbG9jYXRlZEFtb3VudCkgewogICAgICAgICAgICAgICAgYWxsb2NhdGVkQW1vdW50LmFkZCgiYW1vdW50IiksIGFsbG9jYXRlZEFtb3VudC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICAgIH0pLCBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChkaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9uLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkTXV0YXRpb24oW3ZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5jaGVja291dElkLCB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18ubGluZUl0ZW1zXSwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImNoZWNrb3V0TGluZUl0ZW1zUmVwbGFjZSIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBjaGVja291dElkOiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uY2hlY2tvdXRJZCwKICAgICAgICAgIGxpbmVJdGVtczogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmxpbmVJdGVtcwogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGNoZWNrb3V0TGluZUl0ZW1zUmVwbGFjZSkgewogICAgICAgIGNoZWNrb3V0TGluZUl0ZW1zUmVwbGFjZS5hZGQoInVzZXJFcnJvcnMiLCBmdW5jdGlvbiAodXNlckVycm9ycykgewogICAgICAgICAgdXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dExpbmVJdGVtc1JlcGxhY2UuYWRkKCJjaGVja291dCIsIGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgICAgY2hlY2tvdXQuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dEZyYWdtZW50KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQxNihjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIF9fZGVmYXVsdE9wZXJhdGlvbl9fOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuX19kZWZhdWx0T3BlcmF0aW9uX18uY2hlY2tvdXRJZCA9IGNsaWVudC52YXJpYWJsZSgiY2hlY2tvdXRJZCIsICJJRCEiKSwgdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmxpbmVJdGVtcyA9IGNsaWVudC52YXJpYWJsZSgibGluZUl0ZW1zIiwgIltDaGVja291dExpbmVJdGVtVXBkYXRlSW5wdXQhXSEiKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCIsICJEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInRhcmdldFNlbGVjdGlvbiIpLCByb290LmFkZCgiYWxsb2NhdGlvbk1ldGhvZCIpLCByb290LmFkZCgidGFyZ2V0VHlwZSIpLCByb290LmFkZCgidmFsdWUiLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJNb25leVYyIiwgZnVuY3Rpb24gKE1vbmV5VjIpIHsKICAgICAgICAgIE1vbmV5VjIuYWRkKCJhbW91bnQiKSwgTW9uZXlWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJQcmljaW5nUGVyY2VudGFnZVZhbHVlIiwgZnVuY3Rpb24gKFByaWNpbmdQZXJjZW50YWdlVmFsdWUpIHsKICAgICAgICAgIFByaWNpbmdQZXJjZW50YWdlVmFsdWUuYWRkKCJwZXJjZW50YWdlIik7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIk1hbnVhbERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpLCBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiRGlzY291bnRDb2RlQXBwbGljYXRpb24iLCBmdW5jdGlvbiAoRGlzY291bnRDb2RlQXBwbGljYXRpb24pIHsKICAgICAgICBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImNvZGUiKSwgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJhcHBsaWNhYmxlIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIlNjcmlwdERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJBcHBsaWVkR2lmdENhcmRGcmFnbWVudCIsICJBcHBsaWVkR2lmdENhcmQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiYW1vdW50VXNlZFYyIiwgZnVuY3Rpb24gKGFtb3VudFVzZWRWMikgewogICAgICAgIGFtb3VudFVzZWRWMi5hZGQoImFtb3VudCIpLCBhbW91bnRVc2VkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJiYWxhbmNlVjIiLCBmdW5jdGlvbiAoYmFsYW5jZVYyKSB7CiAgICAgICAgYmFsYW5jZVYyLmFkZCgiYW1vdW50IiksIGJhbGFuY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50QW1vdW50VXNlZCIsIGZ1bmN0aW9uIChwcmVzZW50bWVudEFtb3VudFVzZWQpIHsKICAgICAgICBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJhbW91bnQiKSwgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImxhc3RDaGFyYWN0ZXJzIik7CiAgICB9KSwgc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQpLCByb290LmFkZCgicHJvZHVjdCIsIGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgcHJvZHVjdC5hZGQoImlkIiksIHByb2R1Y3QuYWRkKCJoYW5kbGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Vc2VyRXJyb3JGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJVc2VyRXJyb3JGcmFnbWVudCIsICJVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCIsICJDaGVja291dFVzZXJFcnJvciIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJmaWVsZCIpLCByb290LmFkZCgibWVzc2FnZSIpLCByb290LmFkZCgiY29kZSIpOwogICAgfSksIHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJNYWlsaW5nQWRkcmVzc0ZyYWdtZW50IiwgIk1haWxpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhZGRyZXNzMSIpLCByb290LmFkZCgiYWRkcmVzczIiKSwgcm9vdC5hZGQoImNpdHkiKSwgcm9vdC5hZGQoImNvbXBhbnkiKSwgcm9vdC5hZGQoImNvdW50cnkiKSwgcm9vdC5hZGQoImZpcnN0TmFtZSIpLCByb290LmFkZCgiZm9ybWF0dGVkIiksIHJvb3QuYWRkKCJsYXN0TmFtZSIpLCByb290LmFkZCgibGF0aXR1ZGUiKSwgcm9vdC5hZGQoImxvbmdpdHVkZSIpLCByb290LmFkZCgicGhvbmUiKSwgcm9vdC5hZGQoInByb3ZpbmNlIiksIHJvb3QuYWRkKCJ6aXAiKSwgcm9vdC5hZGQoIm5hbWUiKSwgcm9vdC5hZGQoImNvdW50cnlDb2RlVjIiLCB7CiAgICAgICAgYWxpYXM6ICJjb3VudHJ5Q29kZSIKICAgICAgfSksIHJvb3QuYWRkKCJwcm92aW5jZUNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRGcmFnbWVudCIsICJDaGVja291dCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgicmVhZHkiKSwgcm9vdC5hZGQoInJlcXVpcmVzU2hpcHBpbmciKSwgcm9vdC5hZGQoIm5vdGUiKSwgcm9vdC5hZGQoInBheW1lbnREdWUiKSwgcm9vdC5hZGQoInBheW1lbnREdWVWMiIsIGZ1bmN0aW9uIChwYXltZW50RHVlVjIpIHsKICAgICAgICBwYXltZW50RHVlVjIuYWRkKCJhbW91bnQiKSwgcGF5bWVudER1ZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgid2ViVXJsIiksIHJvb3QuYWRkKCJvcmRlclN0YXR1c1VybCIpLCByb290LmFkZCgidGF4RXhlbXB0IiksIHJvb3QuYWRkKCJ0YXhlc0luY2x1ZGVkIiksIHJvb3QuYWRkKCJjdXJyZW5jeUNvZGUiKSwgcm9vdC5hZGQoInRvdGFsVGF4IiksIHJvb3QuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXNTdWJ0b3RhbFByaWNlIiwgZnVuY3Rpb24gKGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UpIHsKICAgICAgICBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiYW1vdW50IiksIGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInRvdGFsUHJpY2UiKSwgcm9vdC5hZGQoInRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFByaWNlVjIpIHsKICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiY29tcGxldGVkQXQiKSwgcm9vdC5hZGQoImNyZWF0ZWRBdCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJlbWFpbCIpLCByb290LmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbnMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDEwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoZGlzY291bnRBcHBsaWNhdGlvbnMpIHsKICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGRpc2NvdW50QXBwbGljYXRpb25zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgiYXBwbGllZEdpZnRDYXJkcyIsIGZ1bmN0aW9uIChhcHBsaWVkR2lmdENhcmRzKSB7CiAgICAgICAgYXBwbGllZEdpZnRDYXJkcy5hZGRGcmFnbWVudChzcHJlYWRzLkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50KTsKICAgICAgfSksIHJvb3QuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgc2hpcHBpbmdBZGRyZXNzLmFkZEZyYWdtZW50KHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdMaW5lIiwgZnVuY3Rpb24gKHNoaXBwaW5nTGluZSkgewogICAgICAgIHNoaXBwaW5nTGluZS5hZGQoImhhbmRsZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBzaGlwcGluZ0xpbmUuYWRkKCJ0aXRsZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgib3JkZXIiLCBmdW5jdGlvbiAob3JkZXIpIHsKICAgICAgICBvcmRlci5hZGQoImlkIiksIG9yZGVyLmFkZCgicHJvY2Vzc2VkQXQiKSwgb3JkZXIuYWRkKCJvcmRlck51bWJlciIpLCBvcmRlci5hZGQoInN1YnRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgICBzdWJ0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgc3VidG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlIiksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxTaGlwcGluZ1ByaWNlVjIpIHsKICAgICAgICAgIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxUYXgiKSwgb3JkZXIuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICAgIHRvdGFsVGF4VjIuYWRkKCJhbW91bnQiKSwgdG90YWxUYXhWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VycmVuY3lDb2RlIiksIG9yZGVyLmFkZCgidG90YWxSZWZ1bmRlZCIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWRWMiIsIGZ1bmN0aW9uICh0b3RhbFJlZnVuZGVkVjIpIHsKICAgICAgICAgIHRvdGFsUmVmdW5kZWRWMi5hZGQoImFtb3VudCIpLCB0b3RhbFJlZnVuZGVkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJjdXN0b21lclVybCIpLCBvcmRlci5hZGQoInNoaXBwaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChzaGlwcGluZ0FkZHJlc3MpIHsKICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImxpbmVJdGVtcyIsIHsKICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICAgIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pLCBub2RlLmFkZCgicXVhbnRpdHkiKSwgbm9kZS5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGxpbmVJdGVtcykgewogICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGxpbmVJdGVtcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgiaWQiKSwgbm9kZS5hZGQoInRpdGxlIiksIG5vZGUuYWRkKCJ2YXJpYW50IiwgZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImRpc2NvdW50QWxsb2NhdGlvbnMiLCBmdW5jdGlvbiAoZGlzY291bnRBbGxvY2F0aW9ucykgewogICAgICAgICAgICAgIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJhbGxvY2F0ZWRBbW91bnQiLCBmdW5jdGlvbiAoYWxsb2NhdGVkQW1vdW50KSB7CiAgICAgICAgICAgICAgICBhbGxvY2F0ZWRBbW91bnQuYWRkKCJhbW91bnQiKSwgYWxsb2NhdGVkQW1vdW50LmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgICAgfSksIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJkaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICAgICAgICAgIGRpc2NvdW50QXBwbGljYXRpb24uYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudC5hZGRNdXRhdGlvbihbdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmNoZWNrb3V0SWQsIHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5saW5lSXRlbXNdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiY2hlY2tvdXRMaW5lSXRlbXNVcGRhdGUiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgY2hlY2tvdXRJZDogdmFyaWFibGVzLl9fZGVmYXVsdE9wZXJhdGlvbl9fLmNoZWNrb3V0SWQsCiAgICAgICAgICBsaW5lSXRlbXM6IHZhcmlhYmxlcy5fX2RlZmF1bHRPcGVyYXRpb25fXy5saW5lSXRlbXMKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChjaGVja291dExpbmVJdGVtc1VwZGF0ZSkgewogICAgICAgIGNoZWNrb3V0TGluZUl0ZW1zVXBkYXRlLmFkZCgidXNlckVycm9ycyIsIGZ1bmN0aW9uICh1c2VyRXJyb3JzKSB7CiAgICAgICAgICB1c2VyRXJyb3JzLmFkZEZyYWdtZW50KHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dExpbmVJdGVtc1VwZGF0ZS5hZGQoImNoZWNrb3V0VXNlckVycm9ycyIsIGZ1bmN0aW9uIChjaGVja291dFVzZXJFcnJvcnMpIHsKICAgICAgICAgIGNoZWNrb3V0VXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dExpbmVJdGVtc1VwZGF0ZS5hZGQoImNoZWNrb3V0IiwgZnVuY3Rpb24gKGNoZWNrb3V0KSB7CiAgICAgICAgICBjaGVja291dC5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudDsKICB9CgogIGZ1bmN0aW9uIHF1ZXJ5JDE3KGNsaWVudCkgewogICAgdmFyIGRvY3VtZW50ID0gY2xpZW50LmRvY3VtZW50KCksCiAgICAgICAgc3ByZWFkcyA9IHt9LAogICAgICAgIHZhcmlhYmxlcyA9IHsKICAgICAgY2hlY2tvdXRBdHRyaWJ1dGVzVXBkYXRlVjI6IHt9CiAgICB9OwogICAgcmV0dXJuIHZhcmlhYmxlcy5jaGVja291dEF0dHJpYnV0ZXNVcGRhdGVWMi5jaGVja291dElkID0gY2xpZW50LnZhcmlhYmxlKCJjaGVja291dElkIiwgIklEISIpLCB2YXJpYWJsZXMuY2hlY2tvdXRBdHRyaWJ1dGVzVXBkYXRlVjIuaW5wdXQgPSBjbGllbnQudmFyaWFibGUoImlucHV0IiwgIkNoZWNrb3V0QXR0cmlidXRlc1VwZGF0ZVYySW5wdXQhIiksIHNwcmVhZHMuVmFyaWFudEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlZhcmlhbnRGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInByaWNlIiksIHJvb3QuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJwcmVzZW50bWVudFByaWNlcyIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBmaXJzdDogMjAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChwcmVzZW50bWVudFByaWNlcykgewogICAgICAgIHByZXNlbnRtZW50UHJpY2VzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoInByaWNlIiwgZnVuY3Rpb24gKHByaWNlKSB7CiAgICAgICAgICAgICAgcHJpY2UuYWRkKCJhbW91bnQiKSwgcHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJjb21wYXJlQXRQcmljZSIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZSkgewogICAgICAgICAgICAgIGNvbXBhcmVBdFByaWNlLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgid2VpZ2h0IiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiwgewogICAgICAgIGFsaWFzOiAiYXZhaWxhYmxlIgogICAgICB9KSwgcm9vdC5hZGQoInNrdSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlVjIiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2VWMikgewogICAgICAgIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImltYWdlIiwgZnVuY3Rpb24gKGltYWdlKSB7CiAgICAgICAgaW1hZ2UuYWRkKCJpZCIpLCBpbWFnZS5hZGQoIm9yaWdpbmFsU3JjIiwgewogICAgICAgICAgYWxpYXM6ICJzcmMiCiAgICAgICAgfSksIGltYWdlLmFkZCgiYWx0VGV4dCIpOwogICAgICB9KSwgcm9vdC5hZGQoInNlbGVjdGVkT3B0aW9ucyIsIGZ1bmN0aW9uIChzZWxlY3RlZE9wdGlvbnMpIHsKICAgICAgICBzZWxlY3RlZE9wdGlvbnMuYWRkKCJuYW1lIiksIHNlbGVjdGVkT3B0aW9ucy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlIiwgZnVuY3Rpb24gKHVuaXRQcmljZSkgewogICAgICAgIHVuaXRQcmljZS5hZGQoImFtb3VudCIpLCB1bml0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2VNZWFzdXJlbWVudCIsIGZ1bmN0aW9uICh1bml0UHJpY2VNZWFzdXJlbWVudCkgewogICAgICAgIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgibWVhc3VyZWRUeXBlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicXVhbnRpdHlVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicXVhbnRpdHlWYWx1ZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VWYWx1ZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJEaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQiLCAiRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJ0YXJnZXRTZWxlY3Rpb24iKSwgcm9vdC5hZGQoImFsbG9jYXRpb25NZXRob2QiKSwgcm9vdC5hZGQoInRhcmdldFR5cGUiKSwgcm9vdC5hZGQoInZhbHVlIiwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgdmFsdWUuYWRkSW5saW5lRnJhZ21lbnRPbigiTW9uZXlWMiIsIGZ1bmN0aW9uIChNb25leVYyKSB7CiAgICAgICAgICBNb25leVYyLmFkZCgiYW1vdW50IiksIE1vbmV5VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgdmFsdWUuYWRkSW5saW5lRnJhZ21lbnRPbigiUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZSIsIGZ1bmN0aW9uIChQcmljaW5nUGVyY2VudGFnZVZhbHVlKSB7CiAgICAgICAgICBQcmljaW5nUGVyY2VudGFnZVZhbHVlLmFkZCgicGVyY2VudGFnZSIpOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKSwgTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoImRlc2NyaXB0aW9uIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIkRpc2NvdW50Q29kZUFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKERpc2NvdW50Q29kZUFwcGxpY2F0aW9uKSB7CiAgICAgICAgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJjb2RlIiksIERpc2NvdW50Q29kZUFwcGxpY2F0aW9uLmFkZCgiYXBwbGljYWJsZSIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoInRpdGxlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQiLCAiQXBwbGllZEdpZnRDYXJkIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImFtb3VudFVzZWRWMiIsIGZ1bmN0aW9uIChhbW91bnRVc2VkVjIpIHsKICAgICAgICBhbW91bnRVc2VkVjIuYWRkKCJhbW91bnQiKSwgYW1vdW50VXNlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiYmFsYW5jZVYyIiwgZnVuY3Rpb24gKGJhbGFuY2VWMikgewogICAgICAgIGJhbGFuY2VWMi5hZGQoImFtb3VudCIpLCBiYWxhbmNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJwcmVzZW50bWVudEFtb3VudFVzZWQiLCBmdW5jdGlvbiAocHJlc2VudG1lbnRBbW91bnRVc2VkKSB7CiAgICAgICAgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiYW1vdW50IiksIHByZXNlbnRtZW50QW1vdW50VXNlZC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJsYXN0Q2hhcmFjdGVycyIpOwogICAgfSksIHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudEZyYWdtZW50KSwgcm9vdC5hZGQoInByb2R1Y3QiLCBmdW5jdGlvbiAocHJvZHVjdCkgewogICAgICAgIHByb2R1Y3QuYWRkKCJpZCIpLCBwcm9kdWN0LmFkZCgiaGFuZGxlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVXNlckVycm9yRnJhZ21lbnQiLCAiVXNlckVycm9yIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImZpZWxkIiksIHJvb3QuYWRkKCJtZXNzYWdlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQiLCAiQ2hlY2tvdXRVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKSwgcm9vdC5hZGQoImNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiTWFpbGluZ0FkZHJlc3NGcmFnbWVudCIsICJNYWlsaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgiYWRkcmVzczEiKSwgcm9vdC5hZGQoImFkZHJlc3MyIiksIHJvb3QuYWRkKCJjaXR5IiksIHJvb3QuYWRkKCJjb21wYW55IiksIHJvb3QuYWRkKCJjb3VudHJ5IiksIHJvb3QuYWRkKCJmaXJzdE5hbWUiKSwgcm9vdC5hZGQoImZvcm1hdHRlZCIpLCByb290LmFkZCgibGFzdE5hbWUiKSwgcm9vdC5hZGQoImxhdGl0dWRlIiksIHJvb3QuYWRkKCJsb25naXR1ZGUiKSwgcm9vdC5hZGQoInBob25lIiksIHJvb3QuYWRkKCJwcm92aW5jZSIpLCByb290LmFkZCgiemlwIiksIHJvb3QuYWRkKCJuYW1lIiksIHJvb3QuYWRkKCJjb3VudHJ5Q29kZVYyIiwgewogICAgICAgIGFsaWFzOiAiY291bnRyeUNvZGUiCiAgICAgIH0pLCByb290LmFkZCgicHJvdmluY2VDb2RlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0RnJhZ21lbnQiLCAiQ2hlY2tvdXQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInJlYWR5IiksIHJvb3QuYWRkKCJyZXF1aXJlc1NoaXBwaW5nIiksIHJvb3QuYWRkKCJub3RlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlVjIiLCBmdW5jdGlvbiAocGF5bWVudER1ZVYyKSB7CiAgICAgICAgcGF5bWVudER1ZVYyLmFkZCgiYW1vdW50IiksIHBheW1lbnREdWVWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIndlYlVybCIpLCByb290LmFkZCgib3JkZXJTdGF0dXNVcmwiKSwgcm9vdC5hZGQoInRheEV4ZW1wdCIpLCByb290LmFkZCgidGF4ZXNJbmNsdWRlZCIpLCByb290LmFkZCgiY3VycmVuY3lDb2RlIiksIHJvb3QuYWRkKCJ0b3RhbFRheCIpLCByb290LmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgdG90YWxUYXhWMi5hZGQoImFtb3VudCIpLCB0b3RhbFRheFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zU3VidG90YWxQcmljZSIsIGZ1bmN0aW9uIChsaW5lSXRlbXNTdWJ0b3RhbFByaWNlKSB7CiAgICAgICAgbGluZUl0ZW1zU3VidG90YWxQcmljZS5hZGQoImFtb3VudCIpLCBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgic3VidG90YWxQcmljZSIpLCByb290LmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgIHN1YnRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCBzdWJ0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImNvbXBsZXRlZEF0IiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZW1haWwiKSwgcm9vdC5hZGQoImRpc2NvdW50QXBwbGljYXRpb25zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAxMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb25zKSB7CiAgICAgICAgZGlzY291bnRBcHBsaWNhdGlvbnMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoImFwcGxpZWRHaWZ0Q2FyZHMiLCBmdW5jdGlvbiAoYXBwbGllZEdpZnRDYXJkcykgewogICAgICAgIGFwcGxpZWRHaWZ0Q2FyZHMuYWRkRnJhZ21lbnQoc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHNoaXBwaW5nQWRkcmVzcykgewogICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICB9KSwgcm9vdC5hZGQoInNoaXBwaW5nTGluZSIsIGZ1bmN0aW9uIChzaGlwcGluZ0xpbmUpIHsKICAgICAgICBzaGlwcGluZ0xpbmUuYWRkKCJoYW5kbGUiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2UiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgc2hpcHBpbmdMaW5lLmFkZCgidGl0bGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIm9yZGVyIiwgZnVuY3Rpb24gKG9yZGVyKSB7CiAgICAgICAgb3JkZXIuYWRkKCJpZCIpLCBvcmRlci5hZGQoInByb2Nlc3NlZEF0IiksIG9yZGVyLmFkZCgib3JkZXJOdW1iZXIiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZSIpLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsU2hpcHBpbmdQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsVGF4IiksIG9yZGVyLmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsUHJpY2VWMikgewogICAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImN1cnJlbmN5Q29kZSIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWQiKSwgb3JkZXIuYWRkKCJ0b3RhbFJlZnVuZGVkVjIiLCBmdW5jdGlvbiAodG90YWxSZWZ1bmRlZFYyKSB7CiAgICAgICAgICB0b3RhbFJlZnVuZGVkVjIuYWRkKCJhbW91bnQiKSwgdG90YWxSZWZ1bmRlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VzdG9tZXJVcmwiKSwgb3JkZXIuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MuYWRkRnJhZ21lbnQoc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50KTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAobGluZUl0ZW1zKSB7CiAgICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgICB9KSwgbGluZUl0ZW1zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgICBub2RlLmFkZCgidGl0bGUiKSwgbm9kZS5hZGQoInZhcmlhbnQiLCBmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJxdWFudGl0eSIpLCBub2RlLmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJkaXNjb3VudEFsbG9jYXRpb25zIiwgZnVuY3Rpb24gKGRpc2NvdW50QWxsb2NhdGlvbnMpIHsKICAgICAgICAgICAgICBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiYWxsb2NhdGVkQW1vdW50IiwgZnVuY3Rpb24gKGFsbG9jYXRlZEFtb3VudCkgewogICAgICAgICAgICAgICAgYWxsb2NhdGVkQW1vdW50LmFkZCgiYW1vdW50IiksIGFsbG9jYXRlZEFtb3VudC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICAgIH0pLCBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChkaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9uLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkTXV0YXRpb24oImNoZWNrb3V0QXR0cmlidXRlc1VwZGF0ZVYyIiwgW3ZhcmlhYmxlcy5jaGVja291dEF0dHJpYnV0ZXNVcGRhdGVWMi5jaGVja291dElkLCB2YXJpYWJsZXMuY2hlY2tvdXRBdHRyaWJ1dGVzVXBkYXRlVjIuaW5wdXRdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiY2hlY2tvdXRBdHRyaWJ1dGVzVXBkYXRlVjIiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgY2hlY2tvdXRJZDogdmFyaWFibGVzLmNoZWNrb3V0QXR0cmlidXRlc1VwZGF0ZVYyLmNoZWNrb3V0SWQsCiAgICAgICAgICBpbnB1dDogdmFyaWFibGVzLmNoZWNrb3V0QXR0cmlidXRlc1VwZGF0ZVYyLmlucHV0CiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoY2hlY2tvdXRBdHRyaWJ1dGVzVXBkYXRlVjIpIHsKICAgICAgICBjaGVja291dEF0dHJpYnV0ZXNVcGRhdGVWMi5hZGQoInVzZXJFcnJvcnMiLCBmdW5jdGlvbiAodXNlckVycm9ycykgewogICAgICAgICAgdXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLlVzZXJFcnJvckZyYWdtZW50KTsKICAgICAgICB9KSwgY2hlY2tvdXRBdHRyaWJ1dGVzVXBkYXRlVjIuYWRkKCJjaGVja291dFVzZXJFcnJvcnMiLCBmdW5jdGlvbiAoY2hlY2tvdXRVc2VyRXJyb3JzKSB7CiAgICAgICAgICBjaGVja291dFVzZXJFcnJvcnMuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50KTsKICAgICAgICB9KSwgY2hlY2tvdXRBdHRyaWJ1dGVzVXBkYXRlVjIuYWRkKCJjaGVja291dCIsIGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgICAgY2hlY2tvdXQuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dEZyYWdtZW50KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQxOChjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIGNoZWNrb3V0RGlzY291bnRDb2RlQXBwbHlWMjoge30KICAgIH07CiAgICByZXR1cm4gdmFyaWFibGVzLmNoZWNrb3V0RGlzY291bnRDb2RlQXBwbHlWMi5kaXNjb3VudENvZGUgPSBjbGllbnQudmFyaWFibGUoImRpc2NvdW50Q29kZSIsICJTdHJpbmchIiksIHZhcmlhYmxlcy5jaGVja291dERpc2NvdW50Q29kZUFwcGx5VjIuY2hlY2tvdXRJZCA9IGNsaWVudC52YXJpYWJsZSgiY2hlY2tvdXRJZCIsICJJRCEiKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCIsICJEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInRhcmdldFNlbGVjdGlvbiIpLCByb290LmFkZCgiYWxsb2NhdGlvbk1ldGhvZCIpLCByb290LmFkZCgidGFyZ2V0VHlwZSIpLCByb290LmFkZCgidmFsdWUiLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJNb25leVYyIiwgZnVuY3Rpb24gKE1vbmV5VjIpIHsKICAgICAgICAgIE1vbmV5VjIuYWRkKCJhbW91bnQiKSwgTW9uZXlWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJQcmljaW5nUGVyY2VudGFnZVZhbHVlIiwgZnVuY3Rpb24gKFByaWNpbmdQZXJjZW50YWdlVmFsdWUpIHsKICAgICAgICAgIFByaWNpbmdQZXJjZW50YWdlVmFsdWUuYWRkKCJwZXJjZW50YWdlIik7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIk1hbnVhbERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpLCBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiRGlzY291bnRDb2RlQXBwbGljYXRpb24iLCBmdW5jdGlvbiAoRGlzY291bnRDb2RlQXBwbGljYXRpb24pIHsKICAgICAgICBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImNvZGUiKSwgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJhcHBsaWNhYmxlIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIlNjcmlwdERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJBcHBsaWVkR2lmdENhcmRGcmFnbWVudCIsICJBcHBsaWVkR2lmdENhcmQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiYW1vdW50VXNlZFYyIiwgZnVuY3Rpb24gKGFtb3VudFVzZWRWMikgewogICAgICAgIGFtb3VudFVzZWRWMi5hZGQoImFtb3VudCIpLCBhbW91bnRVc2VkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJiYWxhbmNlVjIiLCBmdW5jdGlvbiAoYmFsYW5jZVYyKSB7CiAgICAgICAgYmFsYW5jZVYyLmFkZCgiYW1vdW50IiksIGJhbGFuY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50QW1vdW50VXNlZCIsIGZ1bmN0aW9uIChwcmVzZW50bWVudEFtb3VudFVzZWQpIHsKICAgICAgICBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJhbW91bnQiKSwgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImxhc3RDaGFyYWN0ZXJzIik7CiAgICB9KSwgc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQpLCByb290LmFkZCgicHJvZHVjdCIsIGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgcHJvZHVjdC5hZGQoImlkIiksIHByb2R1Y3QuYWRkKCJoYW5kbGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Vc2VyRXJyb3JGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJVc2VyRXJyb3JGcmFnbWVudCIsICJVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCIsICJDaGVja291dFVzZXJFcnJvciIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJmaWVsZCIpLCByb290LmFkZCgibWVzc2FnZSIpLCByb290LmFkZCgiY29kZSIpOwogICAgfSksIHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJNYWlsaW5nQWRkcmVzc0ZyYWdtZW50IiwgIk1haWxpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhZGRyZXNzMSIpLCByb290LmFkZCgiYWRkcmVzczIiKSwgcm9vdC5hZGQoImNpdHkiKSwgcm9vdC5hZGQoImNvbXBhbnkiKSwgcm9vdC5hZGQoImNvdW50cnkiKSwgcm9vdC5hZGQoImZpcnN0TmFtZSIpLCByb290LmFkZCgiZm9ybWF0dGVkIiksIHJvb3QuYWRkKCJsYXN0TmFtZSIpLCByb290LmFkZCgibGF0aXR1ZGUiKSwgcm9vdC5hZGQoImxvbmdpdHVkZSIpLCByb290LmFkZCgicGhvbmUiKSwgcm9vdC5hZGQoInByb3ZpbmNlIiksIHJvb3QuYWRkKCJ6aXAiKSwgcm9vdC5hZGQoIm5hbWUiKSwgcm9vdC5hZGQoImNvdW50cnlDb2RlVjIiLCB7CiAgICAgICAgYWxpYXM6ICJjb3VudHJ5Q29kZSIKICAgICAgfSksIHJvb3QuYWRkKCJwcm92aW5jZUNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRGcmFnbWVudCIsICJDaGVja291dCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgicmVhZHkiKSwgcm9vdC5hZGQoInJlcXVpcmVzU2hpcHBpbmciKSwgcm9vdC5hZGQoIm5vdGUiKSwgcm9vdC5hZGQoInBheW1lbnREdWUiKSwgcm9vdC5hZGQoInBheW1lbnREdWVWMiIsIGZ1bmN0aW9uIChwYXltZW50RHVlVjIpIHsKICAgICAgICBwYXltZW50RHVlVjIuYWRkKCJhbW91bnQiKSwgcGF5bWVudER1ZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgid2ViVXJsIiksIHJvb3QuYWRkKCJvcmRlclN0YXR1c1VybCIpLCByb290LmFkZCgidGF4RXhlbXB0IiksIHJvb3QuYWRkKCJ0YXhlc0luY2x1ZGVkIiksIHJvb3QuYWRkKCJjdXJyZW5jeUNvZGUiKSwgcm9vdC5hZGQoInRvdGFsVGF4IiksIHJvb3QuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXNTdWJ0b3RhbFByaWNlIiwgZnVuY3Rpb24gKGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UpIHsKICAgICAgICBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiYW1vdW50IiksIGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInRvdGFsUHJpY2UiKSwgcm9vdC5hZGQoInRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFByaWNlVjIpIHsKICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiY29tcGxldGVkQXQiKSwgcm9vdC5hZGQoImNyZWF0ZWRBdCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJlbWFpbCIpLCByb290LmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbnMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDEwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoZGlzY291bnRBcHBsaWNhdGlvbnMpIHsKICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGRpc2NvdW50QXBwbGljYXRpb25zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgiYXBwbGllZEdpZnRDYXJkcyIsIGZ1bmN0aW9uIChhcHBsaWVkR2lmdENhcmRzKSB7CiAgICAgICAgYXBwbGllZEdpZnRDYXJkcy5hZGRGcmFnbWVudChzcHJlYWRzLkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50KTsKICAgICAgfSksIHJvb3QuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgc2hpcHBpbmdBZGRyZXNzLmFkZEZyYWdtZW50KHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdMaW5lIiwgZnVuY3Rpb24gKHNoaXBwaW5nTGluZSkgewogICAgICAgIHNoaXBwaW5nTGluZS5hZGQoImhhbmRsZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBzaGlwcGluZ0xpbmUuYWRkKCJ0aXRsZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgib3JkZXIiLCBmdW5jdGlvbiAob3JkZXIpIHsKICAgICAgICBvcmRlci5hZGQoImlkIiksIG9yZGVyLmFkZCgicHJvY2Vzc2VkQXQiKSwgb3JkZXIuYWRkKCJvcmRlck51bWJlciIpLCBvcmRlci5hZGQoInN1YnRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgICBzdWJ0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgc3VidG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlIiksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxTaGlwcGluZ1ByaWNlVjIpIHsKICAgICAgICAgIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxUYXgiKSwgb3JkZXIuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICAgIHRvdGFsVGF4VjIuYWRkKCJhbW91bnQiKSwgdG90YWxUYXhWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VycmVuY3lDb2RlIiksIG9yZGVyLmFkZCgidG90YWxSZWZ1bmRlZCIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWRWMiIsIGZ1bmN0aW9uICh0b3RhbFJlZnVuZGVkVjIpIHsKICAgICAgICAgIHRvdGFsUmVmdW5kZWRWMi5hZGQoImFtb3VudCIpLCB0b3RhbFJlZnVuZGVkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJjdXN0b21lclVybCIpLCBvcmRlci5hZGQoInNoaXBwaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChzaGlwcGluZ0FkZHJlc3MpIHsKICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImxpbmVJdGVtcyIsIHsKICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICAgIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pLCBub2RlLmFkZCgicXVhbnRpdHkiKSwgbm9kZS5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGxpbmVJdGVtcykgewogICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGxpbmVJdGVtcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgiaWQiKSwgbm9kZS5hZGQoInRpdGxlIiksIG5vZGUuYWRkKCJ2YXJpYW50IiwgZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImRpc2NvdW50QWxsb2NhdGlvbnMiLCBmdW5jdGlvbiAoZGlzY291bnRBbGxvY2F0aW9ucykgewogICAgICAgICAgICAgIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJhbGxvY2F0ZWRBbW91bnQiLCBmdW5jdGlvbiAoYWxsb2NhdGVkQW1vdW50KSB7CiAgICAgICAgICAgICAgICBhbGxvY2F0ZWRBbW91bnQuYWRkKCJhbW91bnQiKSwgYWxsb2NhdGVkQW1vdW50LmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgICAgfSksIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJkaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICAgICAgICAgIGRpc2NvdW50QXBwbGljYXRpb24uYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudC5hZGRNdXRhdGlvbigiY2hlY2tvdXREaXNjb3VudENvZGVBcHBseVYyIiwgW3ZhcmlhYmxlcy5jaGVja291dERpc2NvdW50Q29kZUFwcGx5VjIuZGlzY291bnRDb2RlLCB2YXJpYWJsZXMuY2hlY2tvdXREaXNjb3VudENvZGVBcHBseVYyLmNoZWNrb3V0SWRdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiY2hlY2tvdXREaXNjb3VudENvZGVBcHBseVYyIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGRpc2NvdW50Q29kZTogdmFyaWFibGVzLmNoZWNrb3V0RGlzY291bnRDb2RlQXBwbHlWMi5kaXNjb3VudENvZGUsCiAgICAgICAgICBjaGVja291dElkOiB2YXJpYWJsZXMuY2hlY2tvdXREaXNjb3VudENvZGVBcHBseVYyLmNoZWNrb3V0SWQKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChjaGVja291dERpc2NvdW50Q29kZUFwcGx5VjIpIHsKICAgICAgICBjaGVja291dERpc2NvdW50Q29kZUFwcGx5VjIuYWRkKCJ1c2VyRXJyb3JzIiwgZnVuY3Rpb24gKHVzZXJFcnJvcnMpIHsKICAgICAgICAgIHVzZXJFcnJvcnMuYWRkRnJhZ21lbnQoc3ByZWFkcy5Vc2VyRXJyb3JGcmFnbWVudCk7CiAgICAgICAgfSksIGNoZWNrb3V0RGlzY291bnRDb2RlQXBwbHlWMi5hZGQoImNoZWNrb3V0VXNlckVycm9ycyIsIGZ1bmN0aW9uIChjaGVja291dFVzZXJFcnJvcnMpIHsKICAgICAgICAgIGNoZWNrb3V0VXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dERpc2NvdW50Q29kZUFwcGx5VjIuYWRkKCJjaGVja291dCIsIGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgICAgY2hlY2tvdXQuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dEZyYWdtZW50KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQxOShjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIGNoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuY2hlY2tvdXREaXNjb3VudENvZGVSZW1vdmUuY2hlY2tvdXRJZCA9IGNsaWVudC52YXJpYWJsZSgiY2hlY2tvdXRJZCIsICJJRCEiKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCIsICJEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInRhcmdldFNlbGVjdGlvbiIpLCByb290LmFkZCgiYWxsb2NhdGlvbk1ldGhvZCIpLCByb290LmFkZCgidGFyZ2V0VHlwZSIpLCByb290LmFkZCgidmFsdWUiLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJNb25leVYyIiwgZnVuY3Rpb24gKE1vbmV5VjIpIHsKICAgICAgICAgIE1vbmV5VjIuYWRkKCJhbW91bnQiKSwgTW9uZXlWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJQcmljaW5nUGVyY2VudGFnZVZhbHVlIiwgZnVuY3Rpb24gKFByaWNpbmdQZXJjZW50YWdlVmFsdWUpIHsKICAgICAgICAgIFByaWNpbmdQZXJjZW50YWdlVmFsdWUuYWRkKCJwZXJjZW50YWdlIik7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIk1hbnVhbERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpLCBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiRGlzY291bnRDb2RlQXBwbGljYXRpb24iLCBmdW5jdGlvbiAoRGlzY291bnRDb2RlQXBwbGljYXRpb24pIHsKICAgICAgICBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImNvZGUiKSwgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJhcHBsaWNhYmxlIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIlNjcmlwdERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJBcHBsaWVkR2lmdENhcmRGcmFnbWVudCIsICJBcHBsaWVkR2lmdENhcmQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiYW1vdW50VXNlZFYyIiwgZnVuY3Rpb24gKGFtb3VudFVzZWRWMikgewogICAgICAgIGFtb3VudFVzZWRWMi5hZGQoImFtb3VudCIpLCBhbW91bnRVc2VkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJiYWxhbmNlVjIiLCBmdW5jdGlvbiAoYmFsYW5jZVYyKSB7CiAgICAgICAgYmFsYW5jZVYyLmFkZCgiYW1vdW50IiksIGJhbGFuY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50QW1vdW50VXNlZCIsIGZ1bmN0aW9uIChwcmVzZW50bWVudEFtb3VudFVzZWQpIHsKICAgICAgICBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJhbW91bnQiKSwgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImxhc3RDaGFyYWN0ZXJzIik7CiAgICB9KSwgc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQpLCByb290LmFkZCgicHJvZHVjdCIsIGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgcHJvZHVjdC5hZGQoImlkIiksIHByb2R1Y3QuYWRkKCJoYW5kbGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Vc2VyRXJyb3JGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJVc2VyRXJyb3JGcmFnbWVudCIsICJVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCIsICJDaGVja291dFVzZXJFcnJvciIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJmaWVsZCIpLCByb290LmFkZCgibWVzc2FnZSIpLCByb290LmFkZCgiY29kZSIpOwogICAgfSksIHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJNYWlsaW5nQWRkcmVzc0ZyYWdtZW50IiwgIk1haWxpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhZGRyZXNzMSIpLCByb290LmFkZCgiYWRkcmVzczIiKSwgcm9vdC5hZGQoImNpdHkiKSwgcm9vdC5hZGQoImNvbXBhbnkiKSwgcm9vdC5hZGQoImNvdW50cnkiKSwgcm9vdC5hZGQoImZpcnN0TmFtZSIpLCByb290LmFkZCgiZm9ybWF0dGVkIiksIHJvb3QuYWRkKCJsYXN0TmFtZSIpLCByb290LmFkZCgibGF0aXR1ZGUiKSwgcm9vdC5hZGQoImxvbmdpdHVkZSIpLCByb290LmFkZCgicGhvbmUiKSwgcm9vdC5hZGQoInByb3ZpbmNlIiksIHJvb3QuYWRkKCJ6aXAiKSwgcm9vdC5hZGQoIm5hbWUiKSwgcm9vdC5hZGQoImNvdW50cnlDb2RlVjIiLCB7CiAgICAgICAgYWxpYXM6ICJjb3VudHJ5Q29kZSIKICAgICAgfSksIHJvb3QuYWRkKCJwcm92aW5jZUNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRGcmFnbWVudCIsICJDaGVja291dCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgicmVhZHkiKSwgcm9vdC5hZGQoInJlcXVpcmVzU2hpcHBpbmciKSwgcm9vdC5hZGQoIm5vdGUiKSwgcm9vdC5hZGQoInBheW1lbnREdWUiKSwgcm9vdC5hZGQoInBheW1lbnREdWVWMiIsIGZ1bmN0aW9uIChwYXltZW50RHVlVjIpIHsKICAgICAgICBwYXltZW50RHVlVjIuYWRkKCJhbW91bnQiKSwgcGF5bWVudER1ZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgid2ViVXJsIiksIHJvb3QuYWRkKCJvcmRlclN0YXR1c1VybCIpLCByb290LmFkZCgidGF4RXhlbXB0IiksIHJvb3QuYWRkKCJ0YXhlc0luY2x1ZGVkIiksIHJvb3QuYWRkKCJjdXJyZW5jeUNvZGUiKSwgcm9vdC5hZGQoInRvdGFsVGF4IiksIHJvb3QuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXNTdWJ0b3RhbFByaWNlIiwgZnVuY3Rpb24gKGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UpIHsKICAgICAgICBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiYW1vdW50IiksIGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInRvdGFsUHJpY2UiKSwgcm9vdC5hZGQoInRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFByaWNlVjIpIHsKICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiY29tcGxldGVkQXQiKSwgcm9vdC5hZGQoImNyZWF0ZWRBdCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJlbWFpbCIpLCByb290LmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbnMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDEwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoZGlzY291bnRBcHBsaWNhdGlvbnMpIHsKICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGRpc2NvdW50QXBwbGljYXRpb25zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgiYXBwbGllZEdpZnRDYXJkcyIsIGZ1bmN0aW9uIChhcHBsaWVkR2lmdENhcmRzKSB7CiAgICAgICAgYXBwbGllZEdpZnRDYXJkcy5hZGRGcmFnbWVudChzcHJlYWRzLkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50KTsKICAgICAgfSksIHJvb3QuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgc2hpcHBpbmdBZGRyZXNzLmFkZEZyYWdtZW50KHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdMaW5lIiwgZnVuY3Rpb24gKHNoaXBwaW5nTGluZSkgewogICAgICAgIHNoaXBwaW5nTGluZS5hZGQoImhhbmRsZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBzaGlwcGluZ0xpbmUuYWRkKCJ0aXRsZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgib3JkZXIiLCBmdW5jdGlvbiAob3JkZXIpIHsKICAgICAgICBvcmRlci5hZGQoImlkIiksIG9yZGVyLmFkZCgicHJvY2Vzc2VkQXQiKSwgb3JkZXIuYWRkKCJvcmRlck51bWJlciIpLCBvcmRlci5hZGQoInN1YnRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgICBzdWJ0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgc3VidG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlIiksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxTaGlwcGluZ1ByaWNlVjIpIHsKICAgICAgICAgIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxUYXgiKSwgb3JkZXIuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICAgIHRvdGFsVGF4VjIuYWRkKCJhbW91bnQiKSwgdG90YWxUYXhWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VycmVuY3lDb2RlIiksIG9yZGVyLmFkZCgidG90YWxSZWZ1bmRlZCIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWRWMiIsIGZ1bmN0aW9uICh0b3RhbFJlZnVuZGVkVjIpIHsKICAgICAgICAgIHRvdGFsUmVmdW5kZWRWMi5hZGQoImFtb3VudCIpLCB0b3RhbFJlZnVuZGVkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJjdXN0b21lclVybCIpLCBvcmRlci5hZGQoInNoaXBwaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChzaGlwcGluZ0FkZHJlc3MpIHsKICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImxpbmVJdGVtcyIsIHsKICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICAgIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pLCBub2RlLmFkZCgicXVhbnRpdHkiKSwgbm9kZS5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGxpbmVJdGVtcykgewogICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGxpbmVJdGVtcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgiaWQiKSwgbm9kZS5hZGQoInRpdGxlIiksIG5vZGUuYWRkKCJ2YXJpYW50IiwgZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImRpc2NvdW50QWxsb2NhdGlvbnMiLCBmdW5jdGlvbiAoZGlzY291bnRBbGxvY2F0aW9ucykgewogICAgICAgICAgICAgIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJhbGxvY2F0ZWRBbW91bnQiLCBmdW5jdGlvbiAoYWxsb2NhdGVkQW1vdW50KSB7CiAgICAgICAgICAgICAgICBhbGxvY2F0ZWRBbW91bnQuYWRkKCJhbW91bnQiKSwgYWxsb2NhdGVkQW1vdW50LmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgICAgfSksIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJkaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICAgICAgICAgIGRpc2NvdW50QXBwbGljYXRpb24uYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudC5hZGRNdXRhdGlvbigiY2hlY2tvdXREaXNjb3VudENvZGVSZW1vdmUiLCBbdmFyaWFibGVzLmNoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlLmNoZWNrb3V0SWRdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiY2hlY2tvdXREaXNjb3VudENvZGVSZW1vdmUiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgY2hlY2tvdXRJZDogdmFyaWFibGVzLmNoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlLmNoZWNrb3V0SWQKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChjaGVja291dERpc2NvdW50Q29kZVJlbW92ZSkgewogICAgICAgIGNoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlLmFkZCgidXNlckVycm9ycyIsIGZ1bmN0aW9uICh1c2VyRXJyb3JzKSB7CiAgICAgICAgICB1c2VyRXJyb3JzLmFkZEZyYWdtZW50KHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dERpc2NvdW50Q29kZVJlbW92ZS5hZGQoImNoZWNrb3V0VXNlckVycm9ycyIsIGZ1bmN0aW9uIChjaGVja291dFVzZXJFcnJvcnMpIHsKICAgICAgICAgIGNoZWNrb3V0VXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dERpc2NvdW50Q29kZVJlbW92ZS5hZGQoImNoZWNrb3V0IiwgZnVuY3Rpb24gKGNoZWNrb3V0KSB7CiAgICAgICAgICBjaGVja291dC5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudDsKICB9CgogIGZ1bmN0aW9uIHF1ZXJ5JDIwKGNsaWVudCkgewogICAgdmFyIGRvY3VtZW50ID0gY2xpZW50LmRvY3VtZW50KCksCiAgICAgICAgc3ByZWFkcyA9IHt9LAogICAgICAgIHZhcmlhYmxlcyA9IHsKICAgICAgY2hlY2tvdXRHaWZ0Q2FyZHNBcHBlbmQ6IHt9CiAgICB9OwogICAgcmV0dXJuIHZhcmlhYmxlcy5jaGVja291dEdpZnRDYXJkc0FwcGVuZC5naWZ0Q2FyZENvZGVzID0gY2xpZW50LnZhcmlhYmxlKCJnaWZ0Q2FyZENvZGVzIiwgIltTdHJpbmchXSEiKSwgdmFyaWFibGVzLmNoZWNrb3V0R2lmdENhcmRzQXBwZW5kLmNoZWNrb3V0SWQgPSBjbGllbnQudmFyaWFibGUoImNoZWNrb3V0SWQiLCAiSUQhIiksIHNwcmVhZHMuVmFyaWFudEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlZhcmlhbnRGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInByaWNlIiksIHJvb3QuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJwcmVzZW50bWVudFByaWNlcyIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBmaXJzdDogMjAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChwcmVzZW50bWVudFByaWNlcykgewogICAgICAgIHByZXNlbnRtZW50UHJpY2VzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoInByaWNlIiwgZnVuY3Rpb24gKHByaWNlKSB7CiAgICAgICAgICAgICAgcHJpY2UuYWRkKCJhbW91bnQiKSwgcHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJjb21wYXJlQXRQcmljZSIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZSkgewogICAgICAgICAgICAgIGNvbXBhcmVBdFByaWNlLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgid2VpZ2h0IiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiwgewogICAgICAgIGFsaWFzOiAiYXZhaWxhYmxlIgogICAgICB9KSwgcm9vdC5hZGQoInNrdSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlVjIiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2VWMikgewogICAgICAgIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImltYWdlIiwgZnVuY3Rpb24gKGltYWdlKSB7CiAgICAgICAgaW1hZ2UuYWRkKCJpZCIpLCBpbWFnZS5hZGQoIm9yaWdpbmFsU3JjIiwgewogICAgICAgICAgYWxpYXM6ICJzcmMiCiAgICAgICAgfSksIGltYWdlLmFkZCgiYWx0VGV4dCIpOwogICAgICB9KSwgcm9vdC5hZGQoInNlbGVjdGVkT3B0aW9ucyIsIGZ1bmN0aW9uIChzZWxlY3RlZE9wdGlvbnMpIHsKICAgICAgICBzZWxlY3RlZE9wdGlvbnMuYWRkKCJuYW1lIiksIHNlbGVjdGVkT3B0aW9ucy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlIiwgZnVuY3Rpb24gKHVuaXRQcmljZSkgewogICAgICAgIHVuaXRQcmljZS5hZGQoImFtb3VudCIpLCB1bml0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2VNZWFzdXJlbWVudCIsIGZ1bmN0aW9uICh1bml0UHJpY2VNZWFzdXJlbWVudCkgewogICAgICAgIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgibWVhc3VyZWRUeXBlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicXVhbnRpdHlVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicXVhbnRpdHlWYWx1ZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VWYWx1ZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJEaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQiLCAiRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJ0YXJnZXRTZWxlY3Rpb24iKSwgcm9vdC5hZGQoImFsbG9jYXRpb25NZXRob2QiKSwgcm9vdC5hZGQoInRhcmdldFR5cGUiKSwgcm9vdC5hZGQoInZhbHVlIiwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgdmFsdWUuYWRkSW5saW5lRnJhZ21lbnRPbigiTW9uZXlWMiIsIGZ1bmN0aW9uIChNb25leVYyKSB7CiAgICAgICAgICBNb25leVYyLmFkZCgiYW1vdW50IiksIE1vbmV5VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgdmFsdWUuYWRkSW5saW5lRnJhZ21lbnRPbigiUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZSIsIGZ1bmN0aW9uIChQcmljaW5nUGVyY2VudGFnZVZhbHVlKSB7CiAgICAgICAgICBQcmljaW5nUGVyY2VudGFnZVZhbHVlLmFkZCgicGVyY2VudGFnZSIpOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKSwgTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoImRlc2NyaXB0aW9uIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIkRpc2NvdW50Q29kZUFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKERpc2NvdW50Q29kZUFwcGxpY2F0aW9uKSB7CiAgICAgICAgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJjb2RlIiksIERpc2NvdW50Q29kZUFwcGxpY2F0aW9uLmFkZCgiYXBwbGljYWJsZSIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoInRpdGxlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQiLCAiQXBwbGllZEdpZnRDYXJkIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImFtb3VudFVzZWRWMiIsIGZ1bmN0aW9uIChhbW91bnRVc2VkVjIpIHsKICAgICAgICBhbW91bnRVc2VkVjIuYWRkKCJhbW91bnQiKSwgYW1vdW50VXNlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiYmFsYW5jZVYyIiwgZnVuY3Rpb24gKGJhbGFuY2VWMikgewogICAgICAgIGJhbGFuY2VWMi5hZGQoImFtb3VudCIpLCBiYWxhbmNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJwcmVzZW50bWVudEFtb3VudFVzZWQiLCBmdW5jdGlvbiAocHJlc2VudG1lbnRBbW91bnRVc2VkKSB7CiAgICAgICAgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiYW1vdW50IiksIHByZXNlbnRtZW50QW1vdW50VXNlZC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJsYXN0Q2hhcmFjdGVycyIpOwogICAgfSksIHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudEZyYWdtZW50KSwgcm9vdC5hZGQoInByb2R1Y3QiLCBmdW5jdGlvbiAocHJvZHVjdCkgewogICAgICAgIHByb2R1Y3QuYWRkKCJpZCIpLCBwcm9kdWN0LmFkZCgiaGFuZGxlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVXNlckVycm9yRnJhZ21lbnQiLCAiVXNlckVycm9yIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImZpZWxkIiksIHJvb3QuYWRkKCJtZXNzYWdlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQiLCAiQ2hlY2tvdXRVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKSwgcm9vdC5hZGQoImNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiTWFpbGluZ0FkZHJlc3NGcmFnbWVudCIsICJNYWlsaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgiYWRkcmVzczEiKSwgcm9vdC5hZGQoImFkZHJlc3MyIiksIHJvb3QuYWRkKCJjaXR5IiksIHJvb3QuYWRkKCJjb21wYW55IiksIHJvb3QuYWRkKCJjb3VudHJ5IiksIHJvb3QuYWRkKCJmaXJzdE5hbWUiKSwgcm9vdC5hZGQoImZvcm1hdHRlZCIpLCByb290LmFkZCgibGFzdE5hbWUiKSwgcm9vdC5hZGQoImxhdGl0dWRlIiksIHJvb3QuYWRkKCJsb25naXR1ZGUiKSwgcm9vdC5hZGQoInBob25lIiksIHJvb3QuYWRkKCJwcm92aW5jZSIpLCByb290LmFkZCgiemlwIiksIHJvb3QuYWRkKCJuYW1lIiksIHJvb3QuYWRkKCJjb3VudHJ5Q29kZVYyIiwgewogICAgICAgIGFsaWFzOiAiY291bnRyeUNvZGUiCiAgICAgIH0pLCByb290LmFkZCgicHJvdmluY2VDb2RlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0RnJhZ21lbnQiLCAiQ2hlY2tvdXQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInJlYWR5IiksIHJvb3QuYWRkKCJyZXF1aXJlc1NoaXBwaW5nIiksIHJvb3QuYWRkKCJub3RlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlVjIiLCBmdW5jdGlvbiAocGF5bWVudER1ZVYyKSB7CiAgICAgICAgcGF5bWVudER1ZVYyLmFkZCgiYW1vdW50IiksIHBheW1lbnREdWVWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIndlYlVybCIpLCByb290LmFkZCgib3JkZXJTdGF0dXNVcmwiKSwgcm9vdC5hZGQoInRheEV4ZW1wdCIpLCByb290LmFkZCgidGF4ZXNJbmNsdWRlZCIpLCByb290LmFkZCgiY3VycmVuY3lDb2RlIiksIHJvb3QuYWRkKCJ0b3RhbFRheCIpLCByb290LmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgdG90YWxUYXhWMi5hZGQoImFtb3VudCIpLCB0b3RhbFRheFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zU3VidG90YWxQcmljZSIsIGZ1bmN0aW9uIChsaW5lSXRlbXNTdWJ0b3RhbFByaWNlKSB7CiAgICAgICAgbGluZUl0ZW1zU3VidG90YWxQcmljZS5hZGQoImFtb3VudCIpLCBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgic3VidG90YWxQcmljZSIpLCByb290LmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgIHN1YnRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCBzdWJ0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImNvbXBsZXRlZEF0IiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZW1haWwiKSwgcm9vdC5hZGQoImRpc2NvdW50QXBwbGljYXRpb25zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAxMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb25zKSB7CiAgICAgICAgZGlzY291bnRBcHBsaWNhdGlvbnMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoImFwcGxpZWRHaWZ0Q2FyZHMiLCBmdW5jdGlvbiAoYXBwbGllZEdpZnRDYXJkcykgewogICAgICAgIGFwcGxpZWRHaWZ0Q2FyZHMuYWRkRnJhZ21lbnQoc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHNoaXBwaW5nQWRkcmVzcykgewogICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICB9KSwgcm9vdC5hZGQoInNoaXBwaW5nTGluZSIsIGZ1bmN0aW9uIChzaGlwcGluZ0xpbmUpIHsKICAgICAgICBzaGlwcGluZ0xpbmUuYWRkKCJoYW5kbGUiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2UiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgc2hpcHBpbmdMaW5lLmFkZCgidGl0bGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIm9yZGVyIiwgZnVuY3Rpb24gKG9yZGVyKSB7CiAgICAgICAgb3JkZXIuYWRkKCJpZCIpLCBvcmRlci5hZGQoInByb2Nlc3NlZEF0IiksIG9yZGVyLmFkZCgib3JkZXJOdW1iZXIiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZSIpLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsU2hpcHBpbmdQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsVGF4IiksIG9yZGVyLmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsUHJpY2VWMikgewogICAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImN1cnJlbmN5Q29kZSIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWQiKSwgb3JkZXIuYWRkKCJ0b3RhbFJlZnVuZGVkVjIiLCBmdW5jdGlvbiAodG90YWxSZWZ1bmRlZFYyKSB7CiAgICAgICAgICB0b3RhbFJlZnVuZGVkVjIuYWRkKCJhbW91bnQiKSwgdG90YWxSZWZ1bmRlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VzdG9tZXJVcmwiKSwgb3JkZXIuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MuYWRkRnJhZ21lbnQoc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50KTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAobGluZUl0ZW1zKSB7CiAgICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgICB9KSwgbGluZUl0ZW1zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgICBub2RlLmFkZCgidGl0bGUiKSwgbm9kZS5hZGQoInZhcmlhbnQiLCBmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJxdWFudGl0eSIpLCBub2RlLmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJkaXNjb3VudEFsbG9jYXRpb25zIiwgZnVuY3Rpb24gKGRpc2NvdW50QWxsb2NhdGlvbnMpIHsKICAgICAgICAgICAgICBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiYWxsb2NhdGVkQW1vdW50IiwgZnVuY3Rpb24gKGFsbG9jYXRlZEFtb3VudCkgewogICAgICAgICAgICAgICAgYWxsb2NhdGVkQW1vdW50LmFkZCgiYW1vdW50IiksIGFsbG9jYXRlZEFtb3VudC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICAgIH0pLCBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChkaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9uLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkTXV0YXRpb24oImNoZWNrb3V0R2lmdENhcmRzQXBwZW5kIiwgW3ZhcmlhYmxlcy5jaGVja291dEdpZnRDYXJkc0FwcGVuZC5naWZ0Q2FyZENvZGVzLCB2YXJpYWJsZXMuY2hlY2tvdXRHaWZ0Q2FyZHNBcHBlbmQuY2hlY2tvdXRJZF0sIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJjaGVja291dEdpZnRDYXJkc0FwcGVuZCIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBnaWZ0Q2FyZENvZGVzOiB2YXJpYWJsZXMuY2hlY2tvdXRHaWZ0Q2FyZHNBcHBlbmQuZ2lmdENhcmRDb2RlcywKICAgICAgICAgIGNoZWNrb3V0SWQ6IHZhcmlhYmxlcy5jaGVja291dEdpZnRDYXJkc0FwcGVuZC5jaGVja291dElkCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoY2hlY2tvdXRHaWZ0Q2FyZHNBcHBlbmQpIHsKICAgICAgICBjaGVja291dEdpZnRDYXJkc0FwcGVuZC5hZGQoInVzZXJFcnJvcnMiLCBmdW5jdGlvbiAodXNlckVycm9ycykgewogICAgICAgICAgdXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLlVzZXJFcnJvckZyYWdtZW50KTsKICAgICAgICB9KSwgY2hlY2tvdXRHaWZ0Q2FyZHNBcHBlbmQuYWRkKCJjaGVja291dFVzZXJFcnJvcnMiLCBmdW5jdGlvbiAoY2hlY2tvdXRVc2VyRXJyb3JzKSB7CiAgICAgICAgICBjaGVja291dFVzZXJFcnJvcnMuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50KTsKICAgICAgICB9KSwgY2hlY2tvdXRHaWZ0Q2FyZHNBcHBlbmQuYWRkKCJjaGVja291dCIsIGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgICAgY2hlY2tvdXQuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dEZyYWdtZW50KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQyMShjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIGNoZWNrb3V0R2lmdENhcmRSZW1vdmVWMjoge30KICAgIH07CiAgICByZXR1cm4gdmFyaWFibGVzLmNoZWNrb3V0R2lmdENhcmRSZW1vdmVWMi5hcHBsaWVkR2lmdENhcmRJZCA9IGNsaWVudC52YXJpYWJsZSgiYXBwbGllZEdpZnRDYXJkSWQiLCAiSUQhIiksIHZhcmlhYmxlcy5jaGVja291dEdpZnRDYXJkUmVtb3ZlVjIuY2hlY2tvdXRJZCA9IGNsaWVudC52YXJpYWJsZSgiY2hlY2tvdXRJZCIsICJJRCEiKSwgc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJ0aXRsZSIpLCByb290LmFkZCgicHJpY2UiKSwgcm9vdC5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50UHJpY2VzIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKHByZXNlbnRtZW50UHJpY2VzKSB7CiAgICAgICAgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBwcmVzZW50bWVudFByaWNlcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgicHJpY2UiLCBmdW5jdGlvbiAocHJpY2UpIHsKICAgICAgICAgICAgICBwcmljZS5hZGQoImFtb3VudCIpLCBwcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImNvbXBhcmVBdFByaWNlIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlKSB7CiAgICAgICAgICAgICAgY29tcGFyZUF0UHJpY2UuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWlnaHQiKSwgcm9vdC5hZGQoImF2YWlsYWJsZUZvclNhbGUiLCB7CiAgICAgICAgYWxpYXM6ICJhdmFpbGFibGUiCiAgICAgIH0pLCByb290LmFkZCgic2t1IiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2VWMiIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZVYyKSB7CiAgICAgICAgY29tcGFyZUF0UHJpY2VWMi5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaW1hZ2UiLCBmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICBpbWFnZS5hZGQoImlkIiksIGltYWdlLmFkZCgib3JpZ2luYWxTcmMiLCB7CiAgICAgICAgICBhbGlhczogInNyYyIKICAgICAgICB9KSwgaW1hZ2UuYWRkKCJhbHRUZXh0Iik7CiAgICAgIH0pLCByb290LmFkZCgic2VsZWN0ZWRPcHRpb25zIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICAgIHNlbGVjdGVkT3B0aW9ucy5hZGQoIm5hbWUiKSwgc2VsZWN0ZWRPcHRpb25zLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2UiLCBmdW5jdGlvbiAodW5pdFByaWNlKSB7CiAgICAgICAgdW5pdFByaWNlLmFkZCgiYW1vdW50IiksIHVuaXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZU1lYXN1cmVtZW50IiwgZnVuY3Rpb24gKHVuaXRQcmljZU1lYXN1cmVtZW50KSB7CiAgICAgICAgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJtZWFzdXJlZFR5cGUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJxdWFudGl0eVZhbHVlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVZhbHVlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCIsICJEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoInRhcmdldFNlbGVjdGlvbiIpLCByb290LmFkZCgiYWxsb2NhdGlvbk1ldGhvZCIpLCByb290LmFkZCgidGFyZ2V0VHlwZSIpLCByb290LmFkZCgidmFsdWUiLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJNb25leVYyIiwgZnVuY3Rpb24gKE1vbmV5VjIpIHsKICAgICAgICAgIE1vbmV5VjIuYWRkKCJhbW91bnQiKSwgTW9uZXlWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCB2YWx1ZS5hZGRJbmxpbmVGcmFnbWVudE9uKCJQcmljaW5nUGVyY2VudGFnZVZhbHVlIiwgZnVuY3Rpb24gKFByaWNpbmdQZXJjZW50YWdlVmFsdWUpIHsKICAgICAgICAgIFByaWNpbmdQZXJjZW50YWdlVmFsdWUuYWRkKCJwZXJjZW50YWdlIik7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIk1hbnVhbERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpLCBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiRGlzY291bnRDb2RlQXBwbGljYXRpb24iLCBmdW5jdGlvbiAoRGlzY291bnRDb2RlQXBwbGljYXRpb24pIHsKICAgICAgICBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImNvZGUiKSwgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJhcHBsaWNhYmxlIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIlNjcmlwdERpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJBcHBsaWVkR2lmdENhcmRGcmFnbWVudCIsICJBcHBsaWVkR2lmdENhcmQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiYW1vdW50VXNlZFYyIiwgZnVuY3Rpb24gKGFtb3VudFVzZWRWMikgewogICAgICAgIGFtb3VudFVzZWRWMi5hZGQoImFtb3VudCIpLCBhbW91bnRVc2VkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJiYWxhbmNlVjIiLCBmdW5jdGlvbiAoYmFsYW5jZVYyKSB7CiAgICAgICAgYmFsYW5jZVYyLmFkZCgiYW1vdW50IiksIGJhbGFuY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInByZXNlbnRtZW50QW1vdW50VXNlZCIsIGZ1bmN0aW9uIChwcmVzZW50bWVudEFtb3VudFVzZWQpIHsKICAgICAgICBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJhbW91bnQiKSwgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImxhc3RDaGFyYWN0ZXJzIik7CiAgICB9KSwgc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50RnJhZ21lbnQpLCByb290LmFkZCgicHJvZHVjdCIsIGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgcHJvZHVjdC5hZGQoImlkIiksIHByb2R1Y3QuYWRkKCJoYW5kbGUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5Vc2VyRXJyb3JGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJVc2VyRXJyb3JGcmFnbWVudCIsICJVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCIsICJDaGVja291dFVzZXJFcnJvciIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJmaWVsZCIpLCByb290LmFkZCgibWVzc2FnZSIpLCByb290LmFkZCgiY29kZSIpOwogICAgfSksIHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJNYWlsaW5nQWRkcmVzc0ZyYWdtZW50IiwgIk1haWxpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJhZGRyZXNzMSIpLCByb290LmFkZCgiYWRkcmVzczIiKSwgcm9vdC5hZGQoImNpdHkiKSwgcm9vdC5hZGQoImNvbXBhbnkiKSwgcm9vdC5hZGQoImNvdW50cnkiKSwgcm9vdC5hZGQoImZpcnN0TmFtZSIpLCByb290LmFkZCgiZm9ybWF0dGVkIiksIHJvb3QuYWRkKCJsYXN0TmFtZSIpLCByb290LmFkZCgibGF0aXR1ZGUiKSwgcm9vdC5hZGQoImxvbmdpdHVkZSIpLCByb290LmFkZCgicGhvbmUiKSwgcm9vdC5hZGQoInByb3ZpbmNlIiksIHJvb3QuYWRkKCJ6aXAiKSwgcm9vdC5hZGQoIm5hbWUiKSwgcm9vdC5hZGQoImNvdW50cnlDb2RlVjIiLCB7CiAgICAgICAgYWxpYXM6ICJjb3VudHJ5Q29kZSIKICAgICAgfSksIHJvb3QuYWRkKCJwcm92aW5jZUNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLkNoZWNrb3V0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQ2hlY2tvdXRGcmFnbWVudCIsICJDaGVja291dCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgicmVhZHkiKSwgcm9vdC5hZGQoInJlcXVpcmVzU2hpcHBpbmciKSwgcm9vdC5hZGQoIm5vdGUiKSwgcm9vdC5hZGQoInBheW1lbnREdWUiKSwgcm9vdC5hZGQoInBheW1lbnREdWVWMiIsIGZ1bmN0aW9uIChwYXltZW50RHVlVjIpIHsKICAgICAgICBwYXltZW50RHVlVjIuYWRkKCJhbW91bnQiKSwgcGF5bWVudER1ZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgid2ViVXJsIiksIHJvb3QuYWRkKCJvcmRlclN0YXR1c1VybCIpLCByb290LmFkZCgidGF4RXhlbXB0IiksIHJvb3QuYWRkKCJ0YXhlc0luY2x1ZGVkIiksIHJvb3QuYWRkKCJjdXJyZW5jeUNvZGUiKSwgcm9vdC5hZGQoInRvdGFsVGF4IiksIHJvb3QuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXNTdWJ0b3RhbFByaWNlIiwgZnVuY3Rpb24gKGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UpIHsKICAgICAgICBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiYW1vdW50IiksIGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInRvdGFsUHJpY2UiKSwgcm9vdC5hZGQoInRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFByaWNlVjIpIHsKICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiY29tcGxldGVkQXQiKSwgcm9vdC5hZGQoImNyZWF0ZWRBdCIpLCByb290LmFkZCgidXBkYXRlZEF0IiksIHJvb3QuYWRkKCJlbWFpbCIpLCByb290LmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbnMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDEwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoZGlzY291bnRBcHBsaWNhdGlvbnMpIHsKICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGRpc2NvdW50QXBwbGljYXRpb25zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgiYXBwbGllZEdpZnRDYXJkcyIsIGZ1bmN0aW9uIChhcHBsaWVkR2lmdENhcmRzKSB7CiAgICAgICAgYXBwbGllZEdpZnRDYXJkcy5hZGRGcmFnbWVudChzcHJlYWRzLkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50KTsKICAgICAgfSksIHJvb3QuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgc2hpcHBpbmdBZGRyZXNzLmFkZEZyYWdtZW50KHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdMaW5lIiwgZnVuY3Rpb24gKHNoaXBwaW5nTGluZSkgewogICAgICAgIHNoaXBwaW5nTGluZS5hZGQoImhhbmRsZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZSIpLCBzaGlwcGluZ0xpbmUuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICAgIHByaWNlVjIuYWRkKCJhbW91bnQiKSwgcHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBzaGlwcGluZ0xpbmUuYWRkKCJ0aXRsZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgib3JkZXIiLCBmdW5jdGlvbiAob3JkZXIpIHsKICAgICAgICBvcmRlci5hZGQoImlkIiksIG9yZGVyLmFkZCgicHJvY2Vzc2VkQXQiKSwgb3JkZXIuYWRkKCJvcmRlck51bWJlciIpLCBvcmRlci5hZGQoInN1YnRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAoc3VidG90YWxQcmljZVYyKSB7CiAgICAgICAgICBzdWJ0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgc3VidG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlIiksIG9yZGVyLmFkZCgidG90YWxTaGlwcGluZ1ByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxTaGlwcGluZ1ByaWNlVjIpIHsKICAgICAgICAgIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsU2hpcHBpbmdQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxUYXgiKSwgb3JkZXIuYWRkKCJ0b3RhbFRheFYyIiwgZnVuY3Rpb24gKHRvdGFsVGF4VjIpIHsKICAgICAgICAgIHRvdGFsVGF4VjIuYWRkKCJhbW91bnQiKSwgdG90YWxUYXhWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsUHJpY2UiKSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VycmVuY3lDb2RlIiksIG9yZGVyLmFkZCgidG90YWxSZWZ1bmRlZCIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWRWMiIsIGZ1bmN0aW9uICh0b3RhbFJlZnVuZGVkVjIpIHsKICAgICAgICAgIHRvdGFsUmVmdW5kZWRWMi5hZGQoImFtb3VudCIpLCB0b3RhbFJlZnVuZGVkVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJjdXN0b21lclVybCIpLCBvcmRlci5hZGQoInNoaXBwaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChzaGlwcGluZ0FkZHJlc3MpIHsKICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImxpbmVJdGVtcyIsIHsKICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICAgIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pLCBub2RlLmFkZCgicXVhbnRpdHkiKSwgbm9kZS5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDI1MAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGxpbmVJdGVtcykgewogICAgICAgIGxpbmVJdGVtcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIGxpbmVJdGVtcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoImN1cnNvciIpLCBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZCgiaWQiKSwgbm9kZS5hZGQoInRpdGxlIiksIG5vZGUuYWRkKCJ2YXJpYW50IiwgZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICAgICAgICB2YXJpYW50LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICAgICAgICB9KSwgbm9kZS5hZGQoImRpc2NvdW50QWxsb2NhdGlvbnMiLCBmdW5jdGlvbiAoZGlzY291bnRBbGxvY2F0aW9ucykgewogICAgICAgICAgICAgIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJhbGxvY2F0ZWRBbW91bnQiLCBmdW5jdGlvbiAoYWxsb2NhdGVkQW1vdW50KSB7CiAgICAgICAgICAgICAgICBhbGxvY2F0ZWRBbW91bnQuYWRkKCJhbW91bnQiKSwgYWxsb2NhdGVkQW1vdW50LmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgICAgfSksIGRpc2NvdW50QWxsb2NhdGlvbnMuYWRkKCJkaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICAgICAgICAgIGRpc2NvdW50QXBwbGljYXRpb24uYWRkRnJhZ21lbnQoc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pLCBkb2N1bWVudC5hZGRNdXRhdGlvbigiY2hlY2tvdXRHaWZ0Q2FyZFJlbW92ZVYyIiwgW3ZhcmlhYmxlcy5jaGVja291dEdpZnRDYXJkUmVtb3ZlVjIuYXBwbGllZEdpZnRDYXJkSWQsIHZhcmlhYmxlcy5jaGVja291dEdpZnRDYXJkUmVtb3ZlVjIuY2hlY2tvdXRJZF0sIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJjaGVja291dEdpZnRDYXJkUmVtb3ZlVjIiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgYXBwbGllZEdpZnRDYXJkSWQ6IHZhcmlhYmxlcy5jaGVja291dEdpZnRDYXJkUmVtb3ZlVjIuYXBwbGllZEdpZnRDYXJkSWQsCiAgICAgICAgICBjaGVja291dElkOiB2YXJpYWJsZXMuY2hlY2tvdXRHaWZ0Q2FyZFJlbW92ZVYyLmNoZWNrb3V0SWQKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChjaGVja291dEdpZnRDYXJkUmVtb3ZlVjIpIHsKICAgICAgICBjaGVja291dEdpZnRDYXJkUmVtb3ZlVjIuYWRkKCJ1c2VyRXJyb3JzIiwgZnVuY3Rpb24gKHVzZXJFcnJvcnMpIHsKICAgICAgICAgIHVzZXJFcnJvcnMuYWRkRnJhZ21lbnQoc3ByZWFkcy5Vc2VyRXJyb3JGcmFnbWVudCk7CiAgICAgICAgfSksIGNoZWNrb3V0R2lmdENhcmRSZW1vdmVWMi5hZGQoImNoZWNrb3V0VXNlckVycm9ycyIsIGZ1bmN0aW9uIChjaGVja291dFVzZXJFcnJvcnMpIHsKICAgICAgICAgIGNoZWNrb3V0VXNlckVycm9ycy5hZGRGcmFnbWVudChzcHJlYWRzLkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dEdpZnRDYXJkUmVtb3ZlVjIuYWRkKCJjaGVja291dCIsIGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgICAgY2hlY2tvdXQuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dEZyYWdtZW50KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICBmdW5jdGlvbiBxdWVyeSQyMihjbGllbnQpIHsKICAgIHZhciBkb2N1bWVudCA9IGNsaWVudC5kb2N1bWVudCgpLAogICAgICAgIHNwcmVhZHMgPSB7fSwKICAgICAgICB2YXJpYWJsZXMgPSB7CiAgICAgIGNoZWNrb3V0RW1haWxVcGRhdGVWMjoge30KICAgIH07CiAgICByZXR1cm4gdmFyaWFibGVzLmNoZWNrb3V0RW1haWxVcGRhdGVWMi5jaGVja291dElkID0gY2xpZW50LnZhcmlhYmxlKCJjaGVja291dElkIiwgIklEISIpLCB2YXJpYWJsZXMuY2hlY2tvdXRFbWFpbFVwZGF0ZVYyLmVtYWlsID0gY2xpZW50LnZhcmlhYmxlKCJlbWFpbCIsICJTdHJpbmchIiksIHNwcmVhZHMuVmFyaWFudEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlZhcmlhbnRGcmFnbWVudCIsICJQcm9kdWN0VmFyaWFudCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgidGl0bGUiKSwgcm9vdC5hZGQoInByaWNlIiksIHJvb3QuYWRkKCJwcmljZVYyIiwgZnVuY3Rpb24gKHByaWNlVjIpIHsKICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJwcmVzZW50bWVudFByaWNlcyIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBmaXJzdDogMjAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChwcmVzZW50bWVudFByaWNlcykgewogICAgICAgIHByZXNlbnRtZW50UHJpY2VzLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgcHJlc2VudG1lbnRQcmljZXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoInByaWNlIiwgZnVuY3Rpb24gKHByaWNlKSB7CiAgICAgICAgICAgICAgcHJpY2UuYWRkKCJhbW91bnQiKSwgcHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJjb21wYXJlQXRQcmljZSIsIGZ1bmN0aW9uIChjb21wYXJlQXRQcmljZSkgewogICAgICAgICAgICAgIGNvbXBhcmVBdFByaWNlLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgid2VpZ2h0IiksIHJvb3QuYWRkKCJhdmFpbGFibGVGb3JTYWxlIiwgewogICAgICAgIGFsaWFzOiAiYXZhaWxhYmxlIgogICAgICB9KSwgcm9vdC5hZGQoInNrdSIpLCByb290LmFkZCgiY29tcGFyZUF0UHJpY2UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlVjIiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2VWMikgewogICAgICAgIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJhbW91bnQiKSwgY29tcGFyZUF0UHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImltYWdlIiwgZnVuY3Rpb24gKGltYWdlKSB7CiAgICAgICAgaW1hZ2UuYWRkKCJpZCIpLCBpbWFnZS5hZGQoIm9yaWdpbmFsU3JjIiwgewogICAgICAgICAgYWxpYXM6ICJzcmMiCiAgICAgICAgfSksIGltYWdlLmFkZCgiYWx0VGV4dCIpOwogICAgICB9KSwgcm9vdC5hZGQoInNlbGVjdGVkT3B0aW9ucyIsIGZ1bmN0aW9uIChzZWxlY3RlZE9wdGlvbnMpIHsKICAgICAgICBzZWxlY3RlZE9wdGlvbnMuYWRkKCJuYW1lIiksIHNlbGVjdGVkT3B0aW9ucy5hZGQoInZhbHVlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlIiwgZnVuY3Rpb24gKHVuaXRQcmljZSkgewogICAgICAgIHVuaXRQcmljZS5hZGQoImFtb3VudCIpLCB1bml0UHJpY2UuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ1bml0UHJpY2VNZWFzdXJlbWVudCIsIGZ1bmN0aW9uICh1bml0UHJpY2VNZWFzdXJlbWVudCkgewogICAgICAgIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgibWVhc3VyZWRUeXBlIiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicXVhbnRpdHlVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicXVhbnRpdHlWYWx1ZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInJlZmVyZW5jZVVuaXQiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VWYWx1ZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJEaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQiLCAiRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJ0YXJnZXRTZWxlY3Rpb24iKSwgcm9vdC5hZGQoImFsbG9jYXRpb25NZXRob2QiKSwgcm9vdC5hZGQoInRhcmdldFR5cGUiKSwgcm9vdC5hZGQoInZhbHVlIiwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgdmFsdWUuYWRkSW5saW5lRnJhZ21lbnRPbigiTW9uZXlWMiIsIGZ1bmN0aW9uIChNb25leVYyKSB7CiAgICAgICAgICBNb25leVYyLmFkZCgiYW1vdW50IiksIE1vbmV5VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgdmFsdWUuYWRkSW5saW5lRnJhZ21lbnRPbigiUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZSIsIGZ1bmN0aW9uIChQcmljaW5nUGVyY2VudGFnZVZhbHVlKSB7CiAgICAgICAgICBQcmljaW5nUGVyY2VudGFnZVZhbHVlLmFkZCgicGVyY2VudGFnZSIpOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgidGl0bGUiKSwgTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoImRlc2NyaXB0aW9uIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIkRpc2NvdW50Q29kZUFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKERpc2NvdW50Q29kZUFwcGxpY2F0aW9uKSB7CiAgICAgICAgRGlzY291bnRDb2RlQXBwbGljYXRpb24uYWRkKCJjb2RlIiksIERpc2NvdW50Q29kZUFwcGxpY2F0aW9uLmFkZCgiYXBwbGljYWJsZSIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uIiwgZnVuY3Rpb24gKFNjcmlwdERpc2NvdW50QXBwbGljYXRpb24pIHsKICAgICAgICBTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uLmFkZCgiZGVzY3JpcHRpb24iKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoInRpdGxlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQiLCAiQXBwbGllZEdpZnRDYXJkIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImFtb3VudFVzZWRWMiIsIGZ1bmN0aW9uIChhbW91bnRVc2VkVjIpIHsKICAgICAgICBhbW91bnRVc2VkVjIuYWRkKCJhbW91bnQiKSwgYW1vdW50VXNlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgiYmFsYW5jZVYyIiwgZnVuY3Rpb24gKGJhbGFuY2VWMikgewogICAgICAgIGJhbGFuY2VWMi5hZGQoImFtb3VudCIpLCBiYWxhbmNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJwcmVzZW50bWVudEFtb3VudFVzZWQiLCBmdW5jdGlvbiAocHJlc2VudG1lbnRBbW91bnRVc2VkKSB7CiAgICAgICAgcHJlc2VudG1lbnRBbW91bnRVc2VkLmFkZCgiYW1vdW50IiksIHByZXNlbnRtZW50QW1vdW50VXNlZC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJsYXN0Q2hhcmFjdGVycyIpOwogICAgfSksIHNwcmVhZHMuVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVmFyaWFudFdpdGhQcm9kdWN0RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZEZyYWdtZW50KHNwcmVhZHMuVmFyaWFudEZyYWdtZW50KSwgcm9vdC5hZGQoInByb2R1Y3QiLCBmdW5jdGlvbiAocHJvZHVjdCkgewogICAgICAgIHByb2R1Y3QuYWRkKCJpZCIpLCBwcm9kdWN0LmFkZCgiaGFuZGxlIik7CiAgICAgIH0pOwogICAgfSksIHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiVXNlckVycm9yRnJhZ21lbnQiLCAiVXNlckVycm9yIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImZpZWxkIiksIHJvb3QuYWRkKCJtZXNzYWdlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0VXNlckVycm9yRnJhZ21lbnQiLCAiQ2hlY2tvdXRVc2VyRXJyb3IiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiZmllbGQiKSwgcm9vdC5hZGQoIm1lc3NhZ2UiKSwgcm9vdC5hZGQoImNvZGUiKTsKICAgIH0pLCBzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiTWFpbGluZ0FkZHJlc3NGcmFnbWVudCIsICJNYWlsaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgiYWRkcmVzczEiKSwgcm9vdC5hZGQoImFkZHJlc3MyIiksIHJvb3QuYWRkKCJjaXR5IiksIHJvb3QuYWRkKCJjb21wYW55IiksIHJvb3QuYWRkKCJjb3VudHJ5IiksIHJvb3QuYWRkKCJmaXJzdE5hbWUiKSwgcm9vdC5hZGQoImZvcm1hdHRlZCIpLCByb290LmFkZCgibGFzdE5hbWUiKSwgcm9vdC5hZGQoImxhdGl0dWRlIiksIHJvb3QuYWRkKCJsb25naXR1ZGUiKSwgcm9vdC5hZGQoInBob25lIiksIHJvb3QuYWRkKCJwcm92aW5jZSIpLCByb290LmFkZCgiemlwIiksIHJvb3QuYWRkKCJuYW1lIiksIHJvb3QuYWRkKCJjb3VudHJ5Q29kZVYyIiwgewogICAgICAgIGFsaWFzOiAiY291bnRyeUNvZGUiCiAgICAgIH0pLCByb290LmFkZCgicHJvdmluY2VDb2RlIik7CiAgICB9KSwgc3ByZWFkcy5DaGVja291dEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkNoZWNrb3V0RnJhZ21lbnQiLCAiQ2hlY2tvdXQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInJlYWR5IiksIHJvb3QuYWRkKCJyZXF1aXJlc1NoaXBwaW5nIiksIHJvb3QuYWRkKCJub3RlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlIiksIHJvb3QuYWRkKCJwYXltZW50RHVlVjIiLCBmdW5jdGlvbiAocGF5bWVudER1ZVYyKSB7CiAgICAgICAgcGF5bWVudER1ZVYyLmFkZCgiYW1vdW50IiksIHBheW1lbnREdWVWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIndlYlVybCIpLCByb290LmFkZCgib3JkZXJTdGF0dXNVcmwiKSwgcm9vdC5hZGQoInRheEV4ZW1wdCIpLCByb290LmFkZCgidGF4ZXNJbmNsdWRlZCIpLCByb290LmFkZCgiY3VycmVuY3lDb2RlIiksIHJvb3QuYWRkKCJ0b3RhbFRheCIpLCByb290LmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgdG90YWxUYXhWMi5hZGQoImFtb3VudCIpLCB0b3RhbFRheFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zU3VidG90YWxQcmljZSIsIGZ1bmN0aW9uIChsaW5lSXRlbXNTdWJ0b3RhbFByaWNlKSB7CiAgICAgICAgbGluZUl0ZW1zU3VidG90YWxQcmljZS5hZGQoImFtb3VudCIpLCBsaW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgic3VidG90YWxQcmljZSIpLCByb290LmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgIHN1YnRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCBzdWJ0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ0b3RhbFByaWNlIiksIHJvb3QuYWRkKCJ0b3RhbFByaWNlVjIiLCBmdW5jdGlvbiAodG90YWxQcmljZVYyKSB7CiAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImNvbXBsZXRlZEF0IiksIHJvb3QuYWRkKCJjcmVhdGVkQXQiKSwgcm9vdC5hZGQoInVwZGF0ZWRBdCIpLCByb290LmFkZCgiZW1haWwiKSwgcm9vdC5hZGQoImRpc2NvdW50QXBwbGljYXRpb25zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAxMAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGRpc2NvdW50QXBwbGljYXRpb25zKSB7CiAgICAgICAgZGlzY291bnRBcHBsaWNhdGlvbnMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBkaXNjb3VudEFwcGxpY2F0aW9ucy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICBlZGdlcy5hZGQoIm5vZGUiLCBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBub2RlLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoImFwcGxpZWRHaWZ0Q2FyZHMiLCBmdW5jdGlvbiAoYXBwbGllZEdpZnRDYXJkcykgewogICAgICAgIGFwcGxpZWRHaWZ0Q2FyZHMuYWRkRnJhZ21lbnQoc3ByZWFkcy5BcHBsaWVkR2lmdENhcmRGcmFnbWVudCk7CiAgICAgIH0pLCByb290LmFkZCgic2hpcHBpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHNoaXBwaW5nQWRkcmVzcykgewogICAgICAgIHNoaXBwaW5nQWRkcmVzcy5hZGRGcmFnbWVudChzcHJlYWRzLk1haWxpbmdBZGRyZXNzRnJhZ21lbnQpOwogICAgICB9KSwgcm9vdC5hZGQoInNoaXBwaW5nTGluZSIsIGZ1bmN0aW9uIChzaGlwcGluZ0xpbmUpIHsKICAgICAgICBzaGlwcGluZ0xpbmUuYWRkKCJoYW5kbGUiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2UiKSwgc2hpcHBpbmdMaW5lLmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgICBwcmljZVYyLmFkZCgiYW1vdW50IiksIHByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgc2hpcHBpbmdMaW5lLmFkZCgidGl0bGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoIm9yZGVyIiwgZnVuY3Rpb24gKG9yZGVyKSB7CiAgICAgICAgb3JkZXIuYWRkKCJpZCIpLCBvcmRlci5hZGQoInByb2Nlc3NlZEF0IiksIG9yZGVyLmFkZCgib3JkZXJOdW1iZXIiKSwgb3JkZXIuYWRkKCJzdWJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgic3VidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHN1YnRvdGFsUHJpY2VWMikgewogICAgICAgICAgc3VidG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHN1YnRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZSIpLCBvcmRlci5hZGQoInRvdGFsU2hpcHBpbmdQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsU2hpcHBpbmdQcmljZVYyKSB7CiAgICAgICAgICB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFNoaXBwaW5nUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoInRvdGFsVGF4IiksIG9yZGVyLmFkZCgidG90YWxUYXhWMiIsIGZ1bmN0aW9uICh0b3RhbFRheFYyKSB7CiAgICAgICAgICB0b3RhbFRheFYyLmFkZCgiYW1vdW50IiksIHRvdGFsVGF4VjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFByaWNlIiksIG9yZGVyLmFkZCgidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsUHJpY2VWMikgewogICAgICAgICAgdG90YWxQcmljZVYyLmFkZCgiYW1vdW50IiksIHRvdGFsUHJpY2VWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImN1cnJlbmN5Q29kZSIpLCBvcmRlci5hZGQoInRvdGFsUmVmdW5kZWQiKSwgb3JkZXIuYWRkKCJ0b3RhbFJlZnVuZGVkVjIiLCBmdW5jdGlvbiAodG90YWxSZWZ1bmRlZFYyKSB7CiAgICAgICAgICB0b3RhbFJlZnVuZGVkVjIuYWRkKCJhbW91bnQiKSwgdG90YWxSZWZ1bmRlZFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgiY3VzdG9tZXJVcmwiKSwgb3JkZXIuYWRkKCJzaGlwcGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7CiAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MuYWRkRnJhZ21lbnQoc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50KTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJsaW5lSXRlbXMiLCB7CiAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAobGluZUl0ZW1zKSB7CiAgICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgICB9KSwgbGluZUl0ZW1zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgICBub2RlLmFkZCgidGl0bGUiKSwgbm9kZS5hZGQoInZhcmlhbnQiLCBmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgICB9KSwgbm9kZS5hZGQoInF1YW50aXR5IiksIG5vZGUuYWRkKCJjdXN0b21BdHRyaWJ1dGVzIiwgZnVuY3Rpb24gKGN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLCByb290LmFkZCgibGluZUl0ZW1zIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGZpcnN0OiAyNTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICBsaW5lSXRlbXMuYWRkKCJwYWdlSW5mbyIsIGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgIH0pLCBsaW5lSXRlbXMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJjdXJzb3IiKSwgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGQoImlkIiksIG5vZGUuYWRkKCJ0aXRsZSIpLCBub2RlLmFkZCgidmFyaWFudCIsIGZ1bmN0aW9uICh2YXJpYW50KSB7CiAgICAgICAgICAgICAgdmFyaWFudC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50KTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJxdWFudGl0eSIpLCBub2RlLmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJkaXNjb3VudEFsbG9jYXRpb25zIiwgZnVuY3Rpb24gKGRpc2NvdW50QWxsb2NhdGlvbnMpIHsKICAgICAgICAgICAgICBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiYWxsb2NhdGVkQW1vdW50IiwgZnVuY3Rpb24gKGFsbG9jYXRlZEFtb3VudCkgewogICAgICAgICAgICAgICAgYWxsb2NhdGVkQW1vdW50LmFkZCgiYW1vdW50IiksIGFsbG9jYXRlZEFtb3VudC5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICAgIH0pLCBkaXNjb3VudEFsbG9jYXRpb25zLmFkZCgiZGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChkaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgICAgICAgICBkaXNjb3VudEFwcGxpY2F0aW9uLmFkZEZyYWdtZW50KHNwcmVhZHMuRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQuYWRkTXV0YXRpb24oImNoZWNrb3V0RW1haWxVcGRhdGVWMiIsIFt2YXJpYWJsZXMuY2hlY2tvdXRFbWFpbFVwZGF0ZVYyLmNoZWNrb3V0SWQsIHZhcmlhYmxlcy5jaGVja291dEVtYWlsVXBkYXRlVjIuZW1haWxdLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiY2hlY2tvdXRFbWFpbFVwZGF0ZVYyIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGNoZWNrb3V0SWQ6IHZhcmlhYmxlcy5jaGVja291dEVtYWlsVXBkYXRlVjIuY2hlY2tvdXRJZCwKICAgICAgICAgIGVtYWlsOiB2YXJpYWJsZXMuY2hlY2tvdXRFbWFpbFVwZGF0ZVYyLmVtYWlsCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoY2hlY2tvdXRFbWFpbFVwZGF0ZVYyKSB7CiAgICAgICAgY2hlY2tvdXRFbWFpbFVwZGF0ZVYyLmFkZCgidXNlckVycm9ycyIsIGZ1bmN0aW9uICh1c2VyRXJyb3JzKSB7CiAgICAgICAgICB1c2VyRXJyb3JzLmFkZEZyYWdtZW50KHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dEVtYWlsVXBkYXRlVjIuYWRkKCJjaGVja291dFVzZXJFcnJvcnMiLCBmdW5jdGlvbiAoY2hlY2tvdXRVc2VyRXJyb3JzKSB7CiAgICAgICAgICBjaGVja291dFVzZXJFcnJvcnMuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dFVzZXJFcnJvckZyYWdtZW50KTsKICAgICAgICB9KSwgY2hlY2tvdXRFbWFpbFVwZGF0ZVYyLmFkZCgiY2hlY2tvdXQiLCBmdW5jdGlvbiAoY2hlY2tvdXQpIHsKICAgICAgICAgIGNoZWNrb3V0LmFkZEZyYWdtZW50KHNwcmVhZHMuQ2hlY2tvdXRGcmFnbWVudCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50OwogIH0KCiAgZnVuY3Rpb24gcXVlcnkkMjMoY2xpZW50KSB7CiAgICB2YXIgZG9jdW1lbnQgPSBjbGllbnQuZG9jdW1lbnQoKSwKICAgICAgICBzcHJlYWRzID0ge30sCiAgICAgICAgdmFyaWFibGVzID0gewogICAgICBjaGVja291dFNoaXBwaW5nQWRkcmVzc1VwZGF0ZVYyOiB7fQogICAgfTsKICAgIHJldHVybiB2YXJpYWJsZXMuY2hlY2tvdXRTaGlwcGluZ0FkZHJlc3NVcGRhdGVWMi5zaGlwcGluZ0FkZHJlc3MgPSBjbGllbnQudmFyaWFibGUoInNoaXBwaW5nQWRkcmVzcyIsICJNYWlsaW5nQWRkcmVzc0lucHV0ISIpLCB2YXJpYWJsZXMuY2hlY2tvdXRTaGlwcGluZ0FkZHJlc3NVcGRhdGVWMi5jaGVja291dElkID0gY2xpZW50LnZhcmlhYmxlKCJjaGVja291dElkIiwgIklEISIpLCBzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJWYXJpYW50RnJhZ21lbnQiLCAiUHJvZHVjdFZhcmlhbnQiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoInRpdGxlIiksIHJvb3QuYWRkKCJwcmljZSIpLCByb290LmFkZCgicHJpY2VWMiIsIGZ1bmN0aW9uIChwcmljZVYyKSB7CiAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRQcmljZXMiLCB7CiAgICAgICAgYXJnczogewogICAgICAgICAgZmlyc3Q6IDIwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAocHJlc2VudG1lbnRQcmljZXMpIHsKICAgICAgICBwcmVzZW50bWVudFByaWNlcy5hZGQoInBhZ2VJbmZvIiwgZnVuY3Rpb24gKHBhZ2VJbmZvKSB7CiAgICAgICAgICBwYWdlSW5mby5hZGQoImhhc05leHRQYWdlIiksIHBhZ2VJbmZvLmFkZCgiaGFzUHJldmlvdXNQYWdlIik7CiAgICAgICAgfSksIHByZXNlbnRtZW50UHJpY2VzLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJwcmljZSIsIGZ1bmN0aW9uIChwcmljZSkgewogICAgICAgICAgICAgIHByaWNlLmFkZCgiYW1vdW50IiksIHByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiY29tcGFyZUF0UHJpY2UiLCBmdW5jdGlvbiAoY29tcGFyZUF0UHJpY2UpIHsKICAgICAgICAgICAgICBjb21wYXJlQXRQcmljZS5hZGQoImFtb3VudCIpLCBjb21wYXJlQXRQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoIndlaWdodCIpLCByb290LmFkZCgiYXZhaWxhYmxlRm9yU2FsZSIsIHsKICAgICAgICBhbGlhczogImF2YWlsYWJsZSIKICAgICAgfSksIHJvb3QuYWRkKCJza3UiKSwgcm9vdC5hZGQoImNvbXBhcmVBdFByaWNlIiksIHJvb3QuYWRkKCJjb21wYXJlQXRQcmljZVYyIiwgZnVuY3Rpb24gKGNvbXBhcmVBdFByaWNlVjIpIHsKICAgICAgICBjb21wYXJlQXRQcmljZVYyLmFkZCgiYW1vdW50IiksIGNvbXBhcmVBdFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpbWFnZSIsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIGltYWdlLmFkZCgiaWQiKSwgaW1hZ2UuYWRkKCJvcmlnaW5hbFNyYyIsIHsKICAgICAgICAgIGFsaWFzOiAic3JjIgogICAgICAgIH0pLCBpbWFnZS5hZGQoImFsdFRleHQiKTsKICAgICAgfSksIHJvb3QuYWRkKCJzZWxlY3RlZE9wdGlvbnMiLCBmdW5jdGlvbiAoc2VsZWN0ZWRPcHRpb25zKSB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zLmFkZCgibmFtZSIpLCBzZWxlY3RlZE9wdGlvbnMuYWRkKCJ2YWx1ZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInVuaXRQcmljZSIsIGZ1bmN0aW9uICh1bml0UHJpY2UpIHsKICAgICAgICB1bml0UHJpY2UuYWRkKCJhbW91bnQiKSwgdW5pdFByaWNlLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidW5pdFByaWNlTWVhc3VyZW1lbnQiLCBmdW5jdGlvbiAodW5pdFByaWNlTWVhc3VyZW1lbnQpIHsKICAgICAgICB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoIm1lYXN1cmVkVHlwZSIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VW5pdCIpLCB1bml0UHJpY2VNZWFzdXJlbWVudC5hZGQoInF1YW50aXR5VmFsdWUiKSwgdW5pdFByaWNlTWVhc3VyZW1lbnQuYWRkKCJyZWZlcmVuY2VVbml0IiksIHVuaXRQcmljZU1lYXN1cmVtZW50LmFkZCgicmVmZXJlbmNlVmFsdWUiKTsKICAgICAgfSk7CiAgICB9KSwgc3ByZWFkcy5EaXNjb3VudEFwcGxpY2F0aW9uRnJhZ21lbnQgPSBkb2N1bWVudC5kZWZpbmVGcmFnbWVudCgiRGlzY291bnRBcHBsaWNhdGlvbkZyYWdtZW50IiwgIkRpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgidGFyZ2V0U2VsZWN0aW9uIiksIHJvb3QuYWRkKCJhbGxvY2F0aW9uTWV0aG9kIiksIHJvb3QuYWRkKCJ0YXJnZXRUeXBlIiksIHJvb3QuYWRkKCJ2YWx1ZSIsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHZhbHVlLmFkZElubGluZUZyYWdtZW50T24oIk1vbmV5VjIiLCBmdW5jdGlvbiAoTW9uZXlWMikgewogICAgICAgICAgTW9uZXlWMi5hZGQoImFtb3VudCIpLCBNb25leVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIHZhbHVlLmFkZElubGluZUZyYWdtZW50T24oIlByaWNpbmdQZXJjZW50YWdlVmFsdWUiLCBmdW5jdGlvbiAoUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZSkgewogICAgICAgICAgUHJpY2luZ1BlcmNlbnRhZ2VWYWx1ZS5hZGQoInBlcmNlbnRhZ2UiKTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChNYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbi5hZGQoInRpdGxlIiksIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24uYWRkKCJkZXNjcmlwdGlvbiIpOwogICAgICB9KSwgcm9vdC5hZGRJbmxpbmVGcmFnbWVudE9uKCJEaXNjb3VudENvZGVBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChEaXNjb3VudENvZGVBcHBsaWNhdGlvbikgewogICAgICAgIERpc2NvdW50Q29kZUFwcGxpY2F0aW9uLmFkZCgiY29kZSIpLCBEaXNjb3VudENvZGVBcHBsaWNhdGlvbi5hZGQoImFwcGxpY2FibGUiKTsKICAgICAgfSksIHJvb3QuYWRkSW5saW5lRnJhZ21lbnRPbigiU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbiIsIGZ1bmN0aW9uIChTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uKSB7CiAgICAgICAgU2NyaXB0RGlzY291bnRBcHBsaWNhdGlvbi5hZGQoImRlc2NyaXB0aW9uIik7CiAgICAgIH0pLCByb290LmFkZElubGluZUZyYWdtZW50T24oIkF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgIEF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24uYWRkKCJ0aXRsZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIkFwcGxpZWRHaWZ0Q2FyZEZyYWdtZW50IiwgIkFwcGxpZWRHaWZ0Q2FyZCIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJhbW91bnRVc2VkVjIiLCBmdW5jdGlvbiAoYW1vdW50VXNlZFYyKSB7CiAgICAgICAgYW1vdW50VXNlZFYyLmFkZCgiYW1vdW50IiksIGFtb3VudFVzZWRWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImJhbGFuY2VWMiIsIGZ1bmN0aW9uIChiYWxhbmNlVjIpIHsKICAgICAgICBiYWxhbmNlVjIuYWRkKCJhbW91bnQiKSwgYmFsYW5jZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgicHJlc2VudG1lbnRBbW91bnRVc2VkIiwgZnVuY3Rpb24gKHByZXNlbnRtZW50QW1vdW50VXNlZCkgewogICAgICAgIHByZXNlbnRtZW50QW1vdW50VXNlZC5hZGQoImFtb3VudCIpLCBwcmVzZW50bWVudEFtb3VudFVzZWQuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJpZCIpLCByb290LmFkZCgibGFzdENoYXJhY3RlcnMiKTsKICAgIH0pLCBzcHJlYWRzLlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlZhcmlhbnRXaXRoUHJvZHVjdEZyYWdtZW50IiwgIlByb2R1Y3RWYXJpYW50IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGRGcmFnbWVudChzcHJlYWRzLlZhcmlhbnRGcmFnbWVudCksIHJvb3QuYWRkKCJwcm9kdWN0IiwgZnVuY3Rpb24gKHByb2R1Y3QpIHsKICAgICAgICBwcm9kdWN0LmFkZCgiaWQiKSwgcHJvZHVjdC5hZGQoImhhbmRsZSIpOwogICAgICB9KTsKICAgIH0pLCBzcHJlYWRzLlVzZXJFcnJvckZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIlVzZXJFcnJvckZyYWdtZW50IiwgIlVzZXJFcnJvciIsIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJmaWVsZCIpLCByb290LmFkZCgibWVzc2FnZSIpOwogICAgfSksIHNwcmVhZHMuQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJDaGVja291dFVzZXJFcnJvckZyYWdtZW50IiwgIkNoZWNrb3V0VXNlckVycm9yIiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImZpZWxkIiksIHJvb3QuYWRkKCJtZXNzYWdlIiksIHJvb3QuYWRkKCJjb2RlIik7CiAgICB9KSwgc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50ID0gZG9jdW1lbnQuZGVmaW5lRnJhZ21lbnQoIk1haWxpbmdBZGRyZXNzRnJhZ21lbnQiLCAiTWFpbGluZ0FkZHJlc3MiLCBmdW5jdGlvbiAocm9vdCkgewogICAgICByb290LmFkZCgiaWQiKSwgcm9vdC5hZGQoImFkZHJlc3MxIiksIHJvb3QuYWRkKCJhZGRyZXNzMiIpLCByb290LmFkZCgiY2l0eSIpLCByb290LmFkZCgiY29tcGFueSIpLCByb290LmFkZCgiY291bnRyeSIpLCByb290LmFkZCgiZmlyc3ROYW1lIiksIHJvb3QuYWRkKCJmb3JtYXR0ZWQiKSwgcm9vdC5hZGQoImxhc3ROYW1lIiksIHJvb3QuYWRkKCJsYXRpdHVkZSIpLCByb290LmFkZCgibG9uZ2l0dWRlIiksIHJvb3QuYWRkKCJwaG9uZSIpLCByb290LmFkZCgicHJvdmluY2UiKSwgcm9vdC5hZGQoInppcCIpLCByb290LmFkZCgibmFtZSIpLCByb290LmFkZCgiY291bnRyeUNvZGVWMiIsIHsKICAgICAgICBhbGlhczogImNvdW50cnlDb2RlIgogICAgICB9KSwgcm9vdC5hZGQoInByb3ZpbmNlQ29kZSIpOwogICAgfSksIHNwcmVhZHMuQ2hlY2tvdXRGcmFnbWVudCA9IGRvY3VtZW50LmRlZmluZUZyYWdtZW50KCJDaGVja291dEZyYWdtZW50IiwgIkNoZWNrb3V0IiwgZnVuY3Rpb24gKHJvb3QpIHsKICAgICAgcm9vdC5hZGQoImlkIiksIHJvb3QuYWRkKCJyZWFkeSIpLCByb290LmFkZCgicmVxdWlyZXNTaGlwcGluZyIpLCByb290LmFkZCgibm90ZSIpLCByb290LmFkZCgicGF5bWVudER1ZSIpLCByb290LmFkZCgicGF5bWVudER1ZVYyIiwgZnVuY3Rpb24gKHBheW1lbnREdWVWMikgewogICAgICAgIHBheW1lbnREdWVWMi5hZGQoImFtb3VudCIpLCBwYXltZW50RHVlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJ3ZWJVcmwiKSwgcm9vdC5hZGQoIm9yZGVyU3RhdHVzVXJsIiksIHJvb3QuYWRkKCJ0YXhFeGVtcHQiKSwgcm9vdC5hZGQoInRheGVzSW5jbHVkZWQiKSwgcm9vdC5hZGQoImN1cnJlbmN5Q29kZSIpLCByb290LmFkZCgidG90YWxUYXgiKSwgcm9vdC5hZGQoInRvdGFsVGF4VjIiLCBmdW5jdGlvbiAodG90YWxUYXhWMikgewogICAgICAgIHRvdGFsVGF4VjIuYWRkKCJhbW91bnQiKSwgdG90YWxUYXhWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoImxpbmVJdGVtc1N1YnRvdGFsUHJpY2UiLCBmdW5jdGlvbiAobGluZUl0ZW1zU3VidG90YWxQcmljZSkgewogICAgICAgIGxpbmVJdGVtc1N1YnRvdGFsUHJpY2UuYWRkKCJhbW91bnQiKSwgbGluZUl0ZW1zU3VidG90YWxQcmljZS5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICB9KSwgcm9vdC5hZGQoInN1YnRvdGFsUHJpY2UiKSwgcm9vdC5hZGQoInN1YnRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uIChzdWJ0b3RhbFByaWNlVjIpIHsKICAgICAgICBzdWJ0b3RhbFByaWNlVjIuYWRkKCJhbW91bnQiKSwgc3VidG90YWxQcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgIH0pLCByb290LmFkZCgidG90YWxQcmljZSIpLCByb290LmFkZCgidG90YWxQcmljZVYyIiwgZnVuY3Rpb24gKHRvdGFsUHJpY2VWMikgewogICAgICAgIHRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJjb21wbGV0ZWRBdCIpLCByb290LmFkZCgiY3JlYXRlZEF0IiksIHJvb3QuYWRkKCJ1cGRhdGVkQXQiKSwgcm9vdC5hZGQoImVtYWlsIiksIHJvb3QuYWRkKCJkaXNjb3VudEFwcGxpY2F0aW9ucyIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBmaXJzdDogMTAKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIChkaXNjb3VudEFwcGxpY2F0aW9ucykgewogICAgICAgIGRpc2NvdW50QXBwbGljYXRpb25zLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgZGlzY291bnRBcHBsaWNhdGlvbnMuYWRkKCJlZGdlcyIsIGZ1bmN0aW9uIChlZGdlcykgewogICAgICAgICAgZWRnZXMuYWRkKCJub2RlIiwgZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5hZGRGcmFnbWVudChzcHJlYWRzLkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSksIHJvb3QuYWRkKCJhcHBsaWVkR2lmdENhcmRzIiwgZnVuY3Rpb24gKGFwcGxpZWRHaWZ0Q2FyZHMpIHsKICAgICAgICBhcHBsaWVkR2lmdENhcmRzLmFkZEZyYWdtZW50KHNwcmVhZHMuQXBwbGllZEdpZnRDYXJkRnJhZ21lbnQpOwogICAgICB9KSwgcm9vdC5hZGQoInNoaXBwaW5nQWRkcmVzcyIsIGZ1bmN0aW9uIChzaGlwcGluZ0FkZHJlc3MpIHsKICAgICAgICBzaGlwcGluZ0FkZHJlc3MuYWRkRnJhZ21lbnQoc3ByZWFkcy5NYWlsaW5nQWRkcmVzc0ZyYWdtZW50KTsKICAgICAgfSksIHJvb3QuYWRkKCJzaGlwcGluZ0xpbmUiLCBmdW5jdGlvbiAoc2hpcHBpbmdMaW5lKSB7CiAgICAgICAgc2hpcHBpbmdMaW5lLmFkZCgiaGFuZGxlIiksIHNoaXBwaW5nTGluZS5hZGQoInByaWNlIiksIHNoaXBwaW5nTGluZS5hZGQoInByaWNlVjIiLCBmdW5jdGlvbiAocHJpY2VWMikgewogICAgICAgICAgcHJpY2VWMi5hZGQoImFtb3VudCIpLCBwcmljZVYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIHNoaXBwaW5nTGluZS5hZGQoInRpdGxlIik7CiAgICAgIH0pLCByb290LmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgY3VzdG9tQXR0cmlidXRlcy5hZGQoImtleSIpLCBjdXN0b21BdHRyaWJ1dGVzLmFkZCgidmFsdWUiKTsKICAgICAgfSksIHJvb3QuYWRkKCJvcmRlciIsIGZ1bmN0aW9uIChvcmRlcikgewogICAgICAgIG9yZGVyLmFkZCgiaWQiKSwgb3JkZXIuYWRkKCJwcm9jZXNzZWRBdCIpLCBvcmRlci5hZGQoIm9yZGVyTnVtYmVyIiksIG9yZGVyLmFkZCgic3VidG90YWxQcmljZSIpLCBvcmRlci5hZGQoInN1YnRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uIChzdWJ0b3RhbFByaWNlVjIpIHsKICAgICAgICAgIHN1YnRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCBzdWJ0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFNoaXBwaW5nUHJpY2UiKSwgb3JkZXIuYWRkKCJ0b3RhbFNoaXBwaW5nUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFNoaXBwaW5nUHJpY2VWMikgewogICAgICAgICAgdG90YWxTaGlwcGluZ1ByaWNlVjIuYWRkKCJhbW91bnQiKSwgdG90YWxTaGlwcGluZ1ByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJ0b3RhbFRheCIpLCBvcmRlci5hZGQoInRvdGFsVGF4VjIiLCBmdW5jdGlvbiAodG90YWxUYXhWMikgewogICAgICAgICAgdG90YWxUYXhWMi5hZGQoImFtb3VudCIpLCB0b3RhbFRheFYyLmFkZCgiY3VycmVuY3lDb2RlIik7CiAgICAgICAgfSksIG9yZGVyLmFkZCgidG90YWxQcmljZSIpLCBvcmRlci5hZGQoInRvdGFsUHJpY2VWMiIsIGZ1bmN0aW9uICh0b3RhbFByaWNlVjIpIHsKICAgICAgICAgIHRvdGFsUHJpY2VWMi5hZGQoImFtb3VudCIpLCB0b3RhbFByaWNlVjIuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICB9KSwgb3JkZXIuYWRkKCJjdXJyZW5jeUNvZGUiKSwgb3JkZXIuYWRkKCJ0b3RhbFJlZnVuZGVkIiksIG9yZGVyLmFkZCgidG90YWxSZWZ1bmRlZFYyIiwgZnVuY3Rpb24gKHRvdGFsUmVmdW5kZWRWMikgewogICAgICAgICAgdG90YWxSZWZ1bmRlZFYyLmFkZCgiYW1vdW50IiksIHRvdGFsUmVmdW5kZWRWMi5hZGQoImN1cnJlbmN5Q29kZSIpOwogICAgICAgIH0pLCBvcmRlci5hZGQoImN1c3RvbWVyVXJsIiksIG9yZGVyLmFkZCgic2hpcHBpbmdBZGRyZXNzIiwgZnVuY3Rpb24gKHNoaXBwaW5nQWRkcmVzcykgewogICAgICAgICAgc2hpcHBpbmdBZGRyZXNzLmFkZEZyYWdtZW50KHNwcmVhZHMuTWFpbGluZ0FkZHJlc3NGcmFnbWVudCk7CiAgICAgICAgfSksIG9yZGVyLmFkZCgibGluZUl0ZW1zIiwgewogICAgICAgICAgYXJnczogewogICAgICAgICAgICBmaXJzdDogMjUwCiAgICAgICAgICB9CiAgICAgICAgfSwgZnVuY3Rpb24gKGxpbmVJdGVtcykgewogICAgICAgICAgbGluZUl0ZW1zLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgICAgcGFnZUluZm8uYWRkKCJoYXNOZXh0UGFnZSIpLCBwYWdlSW5mby5hZGQoImhhc1ByZXZpb3VzUGFnZSIpOwogICAgICAgICAgfSksIGxpbmVJdGVtcy5hZGQoImVkZ2VzIiwgZnVuY3Rpb24gKGVkZ2VzKSB7CiAgICAgICAgICAgIGVkZ2VzLmFkZCgiY3Vyc29yIiksIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgICAgbm9kZS5hZGQoInRpdGxlIiksIG5vZGUuYWRkKCJ2YXJpYW50IiwgZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICAgICAgICAgIHZhcmlhbnQuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCk7CiAgICAgICAgICAgICAgfSksIG5vZGUuYWRkKCJxdWFudGl0eSIpLCBub2RlLmFkZCgiY3VzdG9tQXR0cmlidXRlcyIsIGZ1bmN0aW9uIChjdXN0b21BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmFkZCgia2V5IiksIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJ2YWx1ZSIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgcm9vdC5hZGQoImxpbmVJdGVtcyIsIHsKICAgICAgICBhcmdzOiB7CiAgICAgICAgICBmaXJzdDogMjUwCiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAobGluZUl0ZW1zKSB7CiAgICAgICAgbGluZUl0ZW1zLmFkZCgicGFnZUluZm8iLCBmdW5jdGlvbiAocGFnZUluZm8pIHsKICAgICAgICAgIHBhZ2VJbmZvLmFkZCgiaGFzTmV4dFBhZ2UiKSwgcGFnZUluZm8uYWRkKCJoYXNQcmV2aW91c1BhZ2UiKTsKICAgICAgICB9KSwgbGluZUl0ZW1zLmFkZCgiZWRnZXMiLCBmdW5jdGlvbiAoZWRnZXMpIHsKICAgICAgICAgIGVkZ2VzLmFkZCgiY3Vyc29yIiksIGVkZ2VzLmFkZCgibm9kZSIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgIG5vZGUuYWRkKCJpZCIpLCBub2RlLmFkZCgidGl0bGUiKSwgbm9kZS5hZGQoInZhcmlhbnQiLCBmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgICAgIHZhcmlhbnQuYWRkRnJhZ21lbnQoc3ByZWFkcy5WYXJpYW50V2l0aFByb2R1Y3RGcmFnbWVudCk7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgicXVhbnRpdHkiKSwgbm9kZS5hZGQoImN1c3RvbUF0dHJpYnV0ZXMiLCBmdW5jdGlvbiAoY3VzdG9tQXR0cmlidXRlcykgewogICAgICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuYWRkKCJrZXkiKSwgY3VzdG9tQXR0cmlidXRlcy5hZGQoInZhbHVlIik7CiAgICAgICAgICAgIH0pLCBub2RlLmFkZCgiZGlzY291bnRBbGxvY2F0aW9ucyIsIGZ1bmN0aW9uIChkaXNjb3VudEFsbG9jYXRpb25zKSB7CiAgICAgICAgICAgICAgZGlzY291bnRBbGxvY2F0aW9ucy5hZGQoImFsbG9jYXRlZEFtb3VudCIsIGZ1bmN0aW9uIChhbGxvY2F0ZWRBbW91bnQpIHsKICAgICAgICAgICAgICAgIGFsbG9jYXRlZEFtb3VudC5hZGQoImFtb3VudCIpLCBhbGxvY2F0ZWRBbW91bnQuYWRkKCJjdXJyZW5jeUNvZGUiKTsKICAgICAgICAgICAgICB9KSwgZGlzY291bnRBbGxvY2F0aW9ucy5hZGQoImRpc2NvdW50QXBwbGljYXRpb24iLCBmdW5jdGlvbiAoZGlzY291bnRBcHBsaWNhdGlvbikgewogICAgICAgICAgICAgICAgZGlzY291bnRBcHBsaWNhdGlvbi5hZGRGcmFnbWVudChzcHJlYWRzLkRpc2NvdW50QXBwbGljYXRpb25GcmFnbWVudCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIGRvY3VtZW50LmFkZE11dGF0aW9uKCJjaGVja291dFNoaXBwaW5nQWRkcmVzc1VwZGF0ZVYyIiwgW3ZhcmlhYmxlcy5jaGVja291dFNoaXBwaW5nQWRkcmVzc1VwZGF0ZVYyLnNoaXBwaW5nQWRkcmVzcywgdmFyaWFibGVzLmNoZWNrb3V0U2hpcHBpbmdBZGRyZXNzVXBkYXRlVjIuY2hlY2tvdXRJZF0sIGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHJvb3QuYWRkKCJjaGVja291dFNoaXBwaW5nQWRkcmVzc1VwZGF0ZVYyIiwgewogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIHNoaXBwaW5nQWRkcmVzczogdmFyaWFibGVzLmNoZWNrb3V0U2hpcHBpbmdBZGRyZXNzVXBkYXRlVjIuc2hpcHBpbmdBZGRyZXNzLAogICAgICAgICAgY2hlY2tvdXRJZDogdmFyaWFibGVzLmNoZWNrb3V0U2hpcHBpbmdBZGRyZXNzVXBkYXRlVjIuY2hlY2tvdXRJZAogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gKGNoZWNrb3V0U2hpcHBpbmdBZGRyZXNzVXBkYXRlVjIpIHsKICAgICAgICBjaGVja291dFNoaXBwaW5nQWRkcmVzc1VwZGF0ZVYyLmFkZCgidXNlckVycm9ycyIsIGZ1bmN0aW9uICh1c2VyRXJyb3JzKSB7CiAgICAgICAgICB1c2VyRXJyb3JzLmFkZEZyYWdtZW50KHNwcmVhZHMuVXNlckVycm9yRnJhZ21lbnQpOwogICAgICAgIH0pLCBjaGVja291dFNoaXBwaW5nQWRkcmVzc1VwZGF0ZVYyLmFkZCgiY2hlY2tvdXRVc2VyRXJyb3JzIiwgZnVuY3Rpb24gKGNoZWNrb3V0VXNlckVycm9ycykgewogICAgICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzLmFkZEZyYWdtZW50KHNwcmVhZHMuQ2hlY2tvdXRVc2VyRXJyb3JGcmFnbWVudCk7CiAgICAgICAgfSksIGNoZWNrb3V0U2hpcHBpbmdBZGRyZXNzVXBkYXRlVjIuYWRkKCJjaGVja291dCIsIGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgICAgY2hlY2tvdXQuYWRkRnJhZ21lbnQoc3ByZWFkcy5DaGVja291dEZyYWdtZW50KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG9jdW1lbnQ7CiAgfQoKICB2YXIgQ2hlY2tvdXRSZXNvdXJjZSA9IGZ1bmN0aW9uIChfUmVzb3VyY2UpIHsKICAgIGZ1bmN0aW9uIENoZWNrb3V0UmVzb3VyY2UoKSB7CiAgICAgIHJldHVybiBjbGFzc0NhbGxDaGVjayQxKHRoaXMsIENoZWNrb3V0UmVzb3VyY2UpLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJDEodGhpcywgKENoZWNrb3V0UmVzb3VyY2UuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDaGVja291dFJlc291cmNlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICB9CgogICAgcmV0dXJuIGluaGVyaXRzJDEoQ2hlY2tvdXRSZXNvdXJjZSwgX1Jlc291cmNlKSwgY3JlYXRlQ2xhc3MkMShDaGVja291dFJlc291cmNlLCBbewogICAgICBrZXk6ICJmZXRjaCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaChpZCkgewogICAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LnNlbmQocXVlcnkkMTEsIHsKICAgICAgICAgIGlkOiBpZAogICAgICAgIH0pLnRoZW4oZGVmYXVsdFJlc29sdmVyKCJub2RlIikpLnRoZW4oZnVuY3Rpb24gKGNoZWNrb3V0KSB7CiAgICAgICAgICByZXR1cm4gY2hlY2tvdXQgPyBfdGhpczIuZ3JhcGhRTENsaWVudC5mZXRjaEFsbFBhZ2VzKGNoZWNrb3V0LmxpbmVJdGVtcywgewogICAgICAgICAgICBwYWdlU2l6ZTogMjUwCiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChsaW5lSXRlbXMpIHsKICAgICAgICAgICAgcmV0dXJuIGNoZWNrb3V0LmF0dHJzLmxpbmVJdGVtcyA9IGxpbmVJdGVtcywgY2hlY2tvdXQ7CiAgICAgICAgICB9KSA6IG51bGw7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY3JlYXRlIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHsKICAgICAgICB2YXIgaW5wdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1swXSA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICAgIHJldHVybiB0aGlzLmdyYXBoUUxDbGllbnQuc2VuZChxdWVyeSQxMiwgewogICAgICAgICAgaW5wdXQ6IGlucHV0CiAgICAgICAgfSkudGhlbihoYW5kbGVDaGVja291dE11dGF0aW9uKCJjaGVja291dENyZWF0ZSIsIHRoaXMuZ3JhcGhRTENsaWVudCkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInVwZGF0ZUF0dHJpYnV0ZXMiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQXR0cmlidXRlcyhjaGVja291dElkKSB7CiAgICAgICAgdmFyIGlucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LnNlbmQocXVlcnkkMTcsIHsKICAgICAgICAgIGNoZWNrb3V0SWQ6IGNoZWNrb3V0SWQsCiAgICAgICAgICBpbnB1dDogaW5wdXQKICAgICAgICB9KS50aGVuKGhhbmRsZUNoZWNrb3V0TXV0YXRpb24oImNoZWNrb3V0QXR0cmlidXRlc1VwZGF0ZVYyIiwgdGhpcy5ncmFwaFFMQ2xpZW50KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAidXBkYXRlRW1haWwiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRW1haWwoY2hlY2tvdXRJZCwgZW1haWwpIHsKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LnNlbmQocXVlcnkkMjIsIHsKICAgICAgICAgIGNoZWNrb3V0SWQ6IGNoZWNrb3V0SWQsCiAgICAgICAgICBlbWFpbDogZW1haWwKICAgICAgICB9KS50aGVuKGhhbmRsZUNoZWNrb3V0TXV0YXRpb24oImNoZWNrb3V0RW1haWxVcGRhdGVWMiIsIHRoaXMuZ3JhcGhRTENsaWVudCkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImFkZExpbmVJdGVtcyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaW5lSXRlbXMoY2hlY2tvdXRJZCwgbGluZUl0ZW1zKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDEzLCB7CiAgICAgICAgICBjaGVja291dElkOiBjaGVja291dElkLAogICAgICAgICAgbGluZUl0ZW1zOiBsaW5lSXRlbXMKICAgICAgICB9KS50aGVuKGhhbmRsZUNoZWNrb3V0TXV0YXRpb24oImNoZWNrb3V0TGluZUl0ZW1zQWRkIiwgdGhpcy5ncmFwaFFMQ2xpZW50KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYWRkRGlzY291bnQiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRGlzY291bnQoY2hlY2tvdXRJZCwgZGlzY291bnRDb2RlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDE4LCB7CiAgICAgICAgICBjaGVja291dElkOiBjaGVja291dElkLAogICAgICAgICAgZGlzY291bnRDb2RlOiBkaXNjb3VudENvZGUKICAgICAgICB9KS50aGVuKGhhbmRsZUNoZWNrb3V0TXV0YXRpb24oImNoZWNrb3V0RGlzY291bnRDb2RlQXBwbHlWMiIsIHRoaXMuZ3JhcGhRTENsaWVudCkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInJlbW92ZURpc2NvdW50IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZURpc2NvdW50KGNoZWNrb3V0SWQpIHsKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LnNlbmQocXVlcnkkMTksIHsKICAgICAgICAgIGNoZWNrb3V0SWQ6IGNoZWNrb3V0SWQKICAgICAgICB9KS50aGVuKGhhbmRsZUNoZWNrb3V0TXV0YXRpb24oImNoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlIiwgdGhpcy5ncmFwaFFMQ2xpZW50KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYWRkR2lmdENhcmRzIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEdpZnRDYXJkcyhjaGVja291dElkLCBnaWZ0Q2FyZENvZGVzKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDIwLCB7CiAgICAgICAgICBjaGVja291dElkOiBjaGVja291dElkLAogICAgICAgICAgZ2lmdENhcmRDb2RlczogZ2lmdENhcmRDb2RlcwogICAgICAgIH0pLnRoZW4oaGFuZGxlQ2hlY2tvdXRNdXRhdGlvbigiY2hlY2tvdXRHaWZ0Q2FyZHNBcHBlbmQiLCB0aGlzLmdyYXBoUUxDbGllbnQpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJyZW1vdmVHaWZ0Q2FyZCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVHaWZ0Q2FyZChjaGVja291dElkLCBhcHBsaWVkR2lmdENhcmRJZCkgewogICAgICAgIHJldHVybiB0aGlzLmdyYXBoUUxDbGllbnQuc2VuZChxdWVyeSQyMSwgewogICAgICAgICAgY2hlY2tvdXRJZDogY2hlY2tvdXRJZCwKICAgICAgICAgIGFwcGxpZWRHaWZ0Q2FyZElkOiBhcHBsaWVkR2lmdENhcmRJZAogICAgICAgIH0pLnRoZW4oaGFuZGxlQ2hlY2tvdXRNdXRhdGlvbigiY2hlY2tvdXRHaWZ0Q2FyZFJlbW92ZVYyIiwgdGhpcy5ncmFwaFFMQ2xpZW50KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAicmVtb3ZlTGluZUl0ZW1zIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUxpbmVJdGVtcyhjaGVja291dElkLCBsaW5lSXRlbUlkcykgewogICAgICAgIHJldHVybiB0aGlzLmdyYXBoUUxDbGllbnQuc2VuZChxdWVyeSQxNCwgewogICAgICAgICAgY2hlY2tvdXRJZDogY2hlY2tvdXRJZCwKICAgICAgICAgIGxpbmVJdGVtSWRzOiBsaW5lSXRlbUlkcwogICAgICAgIH0pLnRoZW4oaGFuZGxlQ2hlY2tvdXRNdXRhdGlvbigiY2hlY2tvdXRMaW5lSXRlbXNSZW1vdmUiLCB0aGlzLmdyYXBoUUxDbGllbnQpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJyZXBsYWNlTGluZUl0ZW1zIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VMaW5lSXRlbXMoY2hlY2tvdXRJZCwgbGluZUl0ZW1zKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDE1LCB7CiAgICAgICAgICBjaGVja291dElkOiBjaGVja291dElkLAogICAgICAgICAgbGluZUl0ZW1zOiBsaW5lSXRlbXMKICAgICAgICB9KS50aGVuKGhhbmRsZUNoZWNrb3V0TXV0YXRpb24oImNoZWNrb3V0TGluZUl0ZW1zUmVwbGFjZSIsIHRoaXMuZ3JhcGhRTENsaWVudCkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInVwZGF0ZUxpbmVJdGVtcyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVMaW5lSXRlbXMoY2hlY2tvdXRJZCwgbGluZUl0ZW1zKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhRTENsaWVudC5zZW5kKHF1ZXJ5JDE2LCB7CiAgICAgICAgICBjaGVja291dElkOiBjaGVja291dElkLAogICAgICAgICAgbGluZUl0ZW1zOiBsaW5lSXRlbXMKICAgICAgICB9KS50aGVuKGhhbmRsZUNoZWNrb3V0TXV0YXRpb24oImNoZWNrb3V0TGluZUl0ZW1zVXBkYXRlIiwgdGhpcy5ncmFwaFFMQ2xpZW50KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAidXBkYXRlU2hpcHBpbmdBZGRyZXNzIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhjaGVja291dElkLCBzaGlwcGluZ0FkZHJlc3MpIHsKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LnNlbmQocXVlcnkkMjMsIHsKICAgICAgICAgIGNoZWNrb3V0SWQ6IGNoZWNrb3V0SWQsCiAgICAgICAgICBzaGlwcGluZ0FkZHJlc3M6IHNoaXBwaW5nQWRkcmVzcwogICAgICAgIH0pLnRoZW4oaGFuZGxlQ2hlY2tvdXRNdXRhdGlvbigiY2hlY2tvdXRTaGlwcGluZ0FkZHJlc3NVcGRhdGVWMiIsIHRoaXMuZ3JhcGhRTENsaWVudCkpOwogICAgICB9CiAgICB9XSksIENoZWNrb3V0UmVzb3VyY2U7CiAgfShSZXNvdXJjZSksCiAgICAgIGltYWdlSGVscGVycyA9IHsKICAgIGltYWdlRm9yU2l6ZTogZnVuY3Rpb24gaW1hZ2VGb3JTaXplKGltYWdlLCBfcmVmKSB7CiAgICAgIHZhciBtYXhXaWR0aCA9IF9yZWYubWF4V2lkdGgsCiAgICAgICAgICBtYXhIZWlnaHQgPSBfcmVmLm1heEhlaWdodCwKICAgICAgICAgIHNwbGl0VXJsID0gaW1hZ2Uuc3JjLnNwbGl0KCI/IiksCiAgICAgICAgICBub3RRdWVyeSA9IHNwbGl0VXJsWzBdLAogICAgICAgICAgcXVlcnkgPSBzcGxpdFVybFsxXSA/ICI/IiArIHNwbGl0VXJsWzFdIDogIiIsCiAgICAgICAgICBpbWFnZVRva2VucyA9IG5vdFF1ZXJ5LnNwbGl0KCIuIiksCiAgICAgICAgICBpbWFnZVBhdGhJbmRleCA9IGltYWdlVG9rZW5zLmxlbmd0aCAtIDI7CiAgICAgIHJldHVybiBpbWFnZVRva2Vuc1tpbWFnZVBhdGhJbmRleF0gPSBpbWFnZVRva2Vuc1tpbWFnZVBhdGhJbmRleF0gKyAiXyIgKyBtYXhXaWR0aCArICJ4IiArIG1heEhlaWdodCwgIiIgKyBpbWFnZVRva2Vucy5qb2luKCIuIikgKyBxdWVyeTsKICAgIH0KICB9LAogICAgICBJbWFnZVJlc291cmNlID0gZnVuY3Rpb24gKF9SZXNvdXJjZSkgewogICAgZnVuY3Rpb24gSW1hZ2VSZXNvdXJjZSgpIHsKICAgICAgcmV0dXJuIGNsYXNzQ2FsbENoZWNrJDEodGhpcywgSW1hZ2VSZXNvdXJjZSksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4kMSh0aGlzLCAoSW1hZ2VSZXNvdXJjZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEltYWdlUmVzb3VyY2UpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsKICAgIH0KCiAgICByZXR1cm4gaW5oZXJpdHMkMShJbWFnZVJlc291cmNlLCBfUmVzb3VyY2UpLCBjcmVhdGVDbGFzcyQxKEltYWdlUmVzb3VyY2UsIFt7CiAgICAgIGtleTogImhlbHBlcnMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHsKICAgICAgICByZXR1cm4gaW1hZ2VIZWxwZXJzOwogICAgICB9CiAgICB9XSksIEltYWdlUmVzb3VyY2U7CiAgfShSZXNvdXJjZSksCiAgICAgIHZlcnNpb24gPSAiMi4xMS4wIiwKICAgICAgQXBwbGllZEdpZnRDYXJkID0gewogICAgbmFtZTogIkFwcGxpZWRHaWZ0Q2FyZCIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGFtb3VudFVzZWRWMjogIk1vbmV5VjIiLAogICAgICBiYWxhbmNlVjI6ICJNb25leVYyIiwKICAgICAgaWQ6ICJJRCIsCiAgICAgIGxhc3RDaGFyYWN0ZXJzOiAiU3RyaW5nIiwKICAgICAgcHJlc2VudG1lbnRBbW91bnRVc2VkOiAiTW9uZXlWMiIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITAKICB9LAogICAgICBBdHRyaWJ1dGUgPSB7CiAgICBuYW1lOiAiQXR0cmlidXRlIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAga2V5OiAiU3RyaW5nIiwKICAgICAgdmFsdWU6ICJTdHJpbmciCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgQXV0b21hdGljRGlzY291bnRBcHBsaWNhdGlvbiA9IHsKICAgIG5hbWU6ICJBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgdGl0bGU6ICJTdHJpbmciCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgQm9vbGVhbiQxID0gewogICAgbmFtZTogIkJvb2xlYW4iLAogICAga2luZDogIlNDQUxBUiIKICB9LAogICAgICBDaGVja291dCA9IHsKICAgIG5hbWU6ICJDaGVja291dCIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGFwcGxpZWRHaWZ0Q2FyZHM6ICJBcHBsaWVkR2lmdENhcmQiLAogICAgICBjb21wbGV0ZWRBdDogIkRhdGVUaW1lIiwKICAgICAgY3JlYXRlZEF0OiAiRGF0ZVRpbWUiLAogICAgICBjdXJyZW5jeUNvZGU6ICJDdXJyZW5jeUNvZGUiLAogICAgICBjdXN0b21BdHRyaWJ1dGVzOiAiQXR0cmlidXRlIiwKICAgICAgZGlzY291bnRBcHBsaWNhdGlvbnM6ICJEaXNjb3VudEFwcGxpY2F0aW9uQ29ubmVjdGlvbiIsCiAgICAgIGVtYWlsOiAiU3RyaW5nIiwKICAgICAgaWQ6ICJJRCIsCiAgICAgIGxpbmVJdGVtczogIkNoZWNrb3V0TGluZUl0ZW1Db25uZWN0aW9uIiwKICAgICAgbGluZUl0ZW1zU3VidG90YWxQcmljZTogIk1vbmV5VjIiLAogICAgICBub3RlOiAiU3RyaW5nIiwKICAgICAgb3JkZXI6ICJPcmRlciIsCiAgICAgIG9yZGVyU3RhdHVzVXJsOiAiVVJMIiwKICAgICAgcGF5bWVudER1ZTogIk1vbmV5IiwKICAgICAgcGF5bWVudER1ZVYyOiAiTW9uZXlWMiIsCiAgICAgIHJlYWR5OiAiQm9vbGVhbiIsCiAgICAgIHJlcXVpcmVzU2hpcHBpbmc6ICJCb29sZWFuIiwKICAgICAgc2hpcHBpbmdBZGRyZXNzOiAiTWFpbGluZ0FkZHJlc3MiLAogICAgICBzaGlwcGluZ0xpbmU6ICJTaGlwcGluZ1JhdGUiLAogICAgICBzdWJ0b3RhbFByaWNlOiAiTW9uZXkiLAogICAgICBzdWJ0b3RhbFByaWNlVjI6ICJNb25leVYyIiwKICAgICAgdGF4RXhlbXB0OiAiQm9vbGVhbiIsCiAgICAgIHRheGVzSW5jbHVkZWQ6ICJCb29sZWFuIiwKICAgICAgdG90YWxQcmljZTogIk1vbmV5IiwKICAgICAgdG90YWxQcmljZVYyOiAiTW9uZXlWMiIsCiAgICAgIHRvdGFsVGF4OiAiTW9uZXkiLAogICAgICB0b3RhbFRheFYyOiAiTW9uZXlWMiIsCiAgICAgIHVwZGF0ZWRBdDogIkRhdGVUaW1lIiwKICAgICAgd2ViVXJsOiAiVVJMIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMAogIH0sCiAgICAgIENoZWNrb3V0QXR0cmlidXRlc1VwZGF0ZVYyUGF5bG9hZCA9IHsKICAgIG5hbWU6ICJDaGVja291dEF0dHJpYnV0ZXNVcGRhdGVWMlBheWxvYWQiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjaGVja291dDogIkNoZWNrb3V0IiwKICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzOiAiQ2hlY2tvdXRVc2VyRXJyb3IiLAogICAgICB1c2VyRXJyb3JzOiAiVXNlckVycm9yIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENoZWNrb3V0Q3JlYXRlUGF5bG9hZCA9IHsKICAgIG5hbWU6ICJDaGVja291dENyZWF0ZVBheWxvYWQiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjaGVja291dDogIkNoZWNrb3V0IiwKICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzOiAiQ2hlY2tvdXRVc2VyRXJyb3IiLAogICAgICB1c2VyRXJyb3JzOiAiVXNlckVycm9yIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENoZWNrb3V0RGlzY291bnRDb2RlQXBwbHlWMlBheWxvYWQgPSB7CiAgICBuYW1lOiAiQ2hlY2tvdXREaXNjb3VudENvZGVBcHBseVYyUGF5bG9hZCIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGNoZWNrb3V0OiAiQ2hlY2tvdXQiLAogICAgICBjaGVja291dFVzZXJFcnJvcnM6ICJDaGVja291dFVzZXJFcnJvciIsCiAgICAgIHVzZXJFcnJvcnM6ICJVc2VyRXJyb3IiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgQ2hlY2tvdXREaXNjb3VudENvZGVSZW1vdmVQYXlsb2FkID0gewogICAgbmFtZTogIkNoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlUGF5bG9hZCIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGNoZWNrb3V0OiAiQ2hlY2tvdXQiLAogICAgICBjaGVja291dFVzZXJFcnJvcnM6ICJDaGVja291dFVzZXJFcnJvciIsCiAgICAgIHVzZXJFcnJvcnM6ICJVc2VyRXJyb3IiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgQ2hlY2tvdXRFbWFpbFVwZGF0ZVYyUGF5bG9hZCA9IHsKICAgIG5hbWU6ICJDaGVja291dEVtYWlsVXBkYXRlVjJQYXlsb2FkIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgY2hlY2tvdXQ6ICJDaGVja291dCIsCiAgICAgIGNoZWNrb3V0VXNlckVycm9yczogIkNoZWNrb3V0VXNlckVycm9yIiwKICAgICAgdXNlckVycm9yczogIlVzZXJFcnJvciIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBDaGVja291dEVycm9yQ29kZSA9IHsKICAgIG5hbWU6ICJDaGVja291dEVycm9yQ29kZSIsCiAgICBraW5kOiAiRU5VTSIKICB9LAogICAgICBDaGVja291dEdpZnRDYXJkUmVtb3ZlVjJQYXlsb2FkID0gewogICAgbmFtZTogIkNoZWNrb3V0R2lmdENhcmRSZW1vdmVWMlBheWxvYWQiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjaGVja291dDogIkNoZWNrb3V0IiwKICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzOiAiQ2hlY2tvdXRVc2VyRXJyb3IiLAogICAgICB1c2VyRXJyb3JzOiAiVXNlckVycm9yIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENoZWNrb3V0R2lmdENhcmRzQXBwZW5kUGF5bG9hZCA9IHsKICAgIG5hbWU6ICJDaGVja291dEdpZnRDYXJkc0FwcGVuZFBheWxvYWQiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjaGVja291dDogIkNoZWNrb3V0IiwKICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzOiAiQ2hlY2tvdXRVc2VyRXJyb3IiLAogICAgICB1c2VyRXJyb3JzOiAiVXNlckVycm9yIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENoZWNrb3V0TGluZUl0ZW0gPSB7CiAgICBuYW1lOiAiQ2hlY2tvdXRMaW5lSXRlbSIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGN1c3RvbUF0dHJpYnV0ZXM6ICJBdHRyaWJ1dGUiLAogICAgICBkaXNjb3VudEFsbG9jYXRpb25zOiAiRGlzY291bnRBbGxvY2F0aW9uIiwKICAgICAgaWQ6ICJJRCIsCiAgICAgIHF1YW50aXR5OiAiSW50IiwKICAgICAgdGl0bGU6ICJTdHJpbmciLAogICAgICB2YXJpYW50OiAiUHJvZHVjdFZhcmlhbnQiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICEwCiAgfSwKICAgICAgQ2hlY2tvdXRMaW5lSXRlbUNvbm5lY3Rpb24gPSB7CiAgICBuYW1lOiAiQ2hlY2tvdXRMaW5lSXRlbUNvbm5lY3Rpb24iLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBlZGdlczogIkNoZWNrb3V0TGluZUl0ZW1FZGdlIiwKICAgICAgcGFnZUluZm86ICJQYWdlSW5mbyIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBDaGVja291dExpbmVJdGVtRWRnZSA9IHsKICAgIG5hbWU6ICJDaGVja291dExpbmVJdGVtRWRnZSIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGN1cnNvcjogIlN0cmluZyIsCiAgICAgIG5vZGU6ICJDaGVja291dExpbmVJdGVtIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENoZWNrb3V0TGluZUl0ZW1zQWRkUGF5bG9hZCA9IHsKICAgIG5hbWU6ICJDaGVja291dExpbmVJdGVtc0FkZFBheWxvYWQiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjaGVja291dDogIkNoZWNrb3V0IiwKICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzOiAiQ2hlY2tvdXRVc2VyRXJyb3IiLAogICAgICB1c2VyRXJyb3JzOiAiVXNlckVycm9yIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENoZWNrb3V0TGluZUl0ZW1zUmVtb3ZlUGF5bG9hZCA9IHsKICAgIG5hbWU6ICJDaGVja291dExpbmVJdGVtc1JlbW92ZVBheWxvYWQiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjaGVja291dDogIkNoZWNrb3V0IiwKICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzOiAiQ2hlY2tvdXRVc2VyRXJyb3IiLAogICAgICB1c2VyRXJyb3JzOiAiVXNlckVycm9yIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENoZWNrb3V0TGluZUl0ZW1zUmVwbGFjZVBheWxvYWQgPSB7CiAgICBuYW1lOiAiQ2hlY2tvdXRMaW5lSXRlbXNSZXBsYWNlUGF5bG9hZCIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGNoZWNrb3V0OiAiQ2hlY2tvdXQiLAogICAgICB1c2VyRXJyb3JzOiAiQ2hlY2tvdXRVc2VyRXJyb3IiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgQ2hlY2tvdXRMaW5lSXRlbXNVcGRhdGVQYXlsb2FkID0gewogICAgbmFtZTogIkNoZWNrb3V0TGluZUl0ZW1zVXBkYXRlUGF5bG9hZCIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGNoZWNrb3V0OiAiQ2hlY2tvdXQiLAogICAgICBjaGVja291dFVzZXJFcnJvcnM6ICJDaGVja291dFVzZXJFcnJvciIsCiAgICAgIHVzZXJFcnJvcnM6ICJVc2VyRXJyb3IiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgQ2hlY2tvdXRTaGlwcGluZ0FkZHJlc3NVcGRhdGVWMlBheWxvYWQgPSB7CiAgICBuYW1lOiAiQ2hlY2tvdXRTaGlwcGluZ0FkZHJlc3NVcGRhdGVWMlBheWxvYWQiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjaGVja291dDogIkNoZWNrb3V0IiwKICAgICAgY2hlY2tvdXRVc2VyRXJyb3JzOiAiQ2hlY2tvdXRVc2VyRXJyb3IiLAogICAgICB1c2VyRXJyb3JzOiAiVXNlckVycm9yIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENoZWNrb3V0VXNlckVycm9yID0gewogICAgbmFtZTogIkNoZWNrb3V0VXNlckVycm9yIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgY29kZTogIkNoZWNrb3V0RXJyb3JDb2RlIiwKICAgICAgZmllbGQ6ICJTdHJpbmciLAogICAgICBtZXNzYWdlOiAiU3RyaW5nIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENvbGxlY3Rpb24gPSB7CiAgICBuYW1lOiAiQ29sbGVjdGlvbiIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGRlc2NyaXB0aW9uOiAiU3RyaW5nIiwKICAgICAgZGVzY3JpcHRpb25IdG1sOiAiSFRNTCIsCiAgICAgIGhhbmRsZTogIlN0cmluZyIsCiAgICAgIGlkOiAiSUQiLAogICAgICBpbWFnZTogIkltYWdlIiwKICAgICAgcHJvZHVjdHM6ICJQcm9kdWN0Q29ubmVjdGlvbiIsCiAgICAgIHRpdGxlOiAiU3RyaW5nIiwKICAgICAgdXBkYXRlZEF0OiAiRGF0ZVRpbWUiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICEwCiAgfSwKICAgICAgQ29sbGVjdGlvbkNvbm5lY3Rpb24gPSB7CiAgICBuYW1lOiAiQ29sbGVjdGlvbkNvbm5lY3Rpb24iLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBlZGdlczogIkNvbGxlY3Rpb25FZGdlIiwKICAgICAgcGFnZUluZm86ICJQYWdlSW5mbyIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBDb2xsZWN0aW9uRWRnZSA9IHsKICAgIG5hbWU6ICJDb2xsZWN0aW9uRWRnZSIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGN1cnNvcjogIlN0cmluZyIsCiAgICAgIG5vZGU6ICJDb2xsZWN0aW9uIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIENvdW50cnlDb2RlID0gewogICAgbmFtZTogIkNvdW50cnlDb2RlIiwKICAgIGtpbmQ6ICJFTlVNIgogIH0sCiAgICAgIEN1cnJlbmN5Q29kZSA9IHsKICAgIG5hbWU6ICJDdXJyZW5jeUNvZGUiLAogICAga2luZDogIkVOVU0iCiAgfSwKICAgICAgRGF0ZVRpbWUgPSB7CiAgICBuYW1lOiAiRGF0ZVRpbWUiLAogICAga2luZDogIlNDQUxBUiIKICB9LAogICAgICBEZWNpbWFsID0gewogICAgbmFtZTogIkRlY2ltYWwiLAogICAga2luZDogIlNDQUxBUiIKICB9LAogICAgICBEaXNjb3VudEFsbG9jYXRpb24gPSB7CiAgICBuYW1lOiAiRGlzY291bnRBbGxvY2F0aW9uIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgYWxsb2NhdGVkQW1vdW50OiAiTW9uZXlWMiIsCiAgICAgIGRpc2NvdW50QXBwbGljYXRpb246ICJEaXNjb3VudEFwcGxpY2F0aW9uIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIERpc2NvdW50QXBwbGljYXRpb24gPSB7CiAgICBuYW1lOiAiRGlzY291bnRBcHBsaWNhdGlvbiIsCiAgICBraW5kOiAiSU5URVJGQUNFIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGFsbG9jYXRpb25NZXRob2Q6ICJEaXNjb3VudEFwcGxpY2F0aW9uQWxsb2NhdGlvbk1ldGhvZCIsCiAgICAgIHRhcmdldFNlbGVjdGlvbjogIkRpc2NvdW50QXBwbGljYXRpb25UYXJnZXRTZWxlY3Rpb24iLAogICAgICB0YXJnZXRUeXBlOiAiRGlzY291bnRBcHBsaWNhdGlvblRhcmdldFR5cGUiLAogICAgICB2YWx1ZTogIlByaWNpbmdWYWx1ZSIKICAgIH0sCiAgICBwb3NzaWJsZVR5cGVzOiBbIkF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24iLCAiRGlzY291bnRDb2RlQXBwbGljYXRpb24iLCAiTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbiIsICJTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uIl0KICB9LAogICAgICBEaXNjb3VudEFwcGxpY2F0aW9uQWxsb2NhdGlvbk1ldGhvZCA9IHsKICAgIG5hbWU6ICJEaXNjb3VudEFwcGxpY2F0aW9uQWxsb2NhdGlvbk1ldGhvZCIsCiAgICBraW5kOiAiRU5VTSIKICB9LAogICAgICBEaXNjb3VudEFwcGxpY2F0aW9uQ29ubmVjdGlvbiA9IHsKICAgIG5hbWU6ICJEaXNjb3VudEFwcGxpY2F0aW9uQ29ubmVjdGlvbiIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGVkZ2VzOiAiRGlzY291bnRBcHBsaWNhdGlvbkVkZ2UiLAogICAgICBwYWdlSW5mbzogIlBhZ2VJbmZvIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIERpc2NvdW50QXBwbGljYXRpb25FZGdlID0gewogICAgbmFtZTogIkRpc2NvdW50QXBwbGljYXRpb25FZGdlIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgbm9kZTogIkRpc2NvdW50QXBwbGljYXRpb24iCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgRGlzY291bnRBcHBsaWNhdGlvblRhcmdldFNlbGVjdGlvbiA9IHsKICAgIG5hbWU6ICJEaXNjb3VudEFwcGxpY2F0aW9uVGFyZ2V0U2VsZWN0aW9uIiwKICAgIGtpbmQ6ICJFTlVNIgogIH0sCiAgICAgIERpc2NvdW50QXBwbGljYXRpb25UYXJnZXRUeXBlID0gewogICAgbmFtZTogIkRpc2NvdW50QXBwbGljYXRpb25UYXJnZXRUeXBlIiwKICAgIGtpbmQ6ICJFTlVNIgogIH0sCiAgICAgIERpc2NvdW50Q29kZUFwcGxpY2F0aW9uID0gewogICAgbmFtZTogIkRpc2NvdW50Q29kZUFwcGxpY2F0aW9uIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgYXBwbGljYWJsZTogIkJvb2xlYW4iLAogICAgICBjb2RlOiAiU3RyaW5nIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIERvbWFpbiA9IHsKICAgIG5hbWU6ICJEb21haW4iLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBob3N0OiAiU3RyaW5nIiwKICAgICAgc3NsRW5hYmxlZDogIkJvb2xlYW4iLAogICAgICB1cmw6ICJVUkwiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgRmxvYXQgPSB7CiAgICBuYW1lOiAiRmxvYXQiLAogICAga2luZDogIlNDQUxBUiIKICB9LAogICAgICBIVE1MID0gewogICAgbmFtZTogIkhUTUwiLAogICAga2luZDogIlNDQUxBUiIKICB9LAogICAgICBJRCA9IHsKICAgIG5hbWU6ICJJRCIsCiAgICBraW5kOiAiU0NBTEFSIgogIH0sCiAgICAgIEltYWdlID0gewogICAgbmFtZTogIkltYWdlIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgYWx0VGV4dDogIlN0cmluZyIsCiAgICAgIGlkOiAiSUQiLAogICAgICBvcmlnaW5hbFNyYzogIlVSTCIsCiAgICAgIHNyYzogIlVSTCIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBJbWFnZUNvbm5lY3Rpb24gPSB7CiAgICBuYW1lOiAiSW1hZ2VDb25uZWN0aW9uIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgZWRnZXM6ICJJbWFnZUVkZ2UiLAogICAgICBwYWdlSW5mbzogIlBhZ2VJbmZvIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIEltYWdlRWRnZSA9IHsKICAgIG5hbWU6ICJJbWFnZUVkZ2UiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjdXJzb3I6ICJTdHJpbmciLAogICAgICBub2RlOiAiSW1hZ2UiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgSW50ID0gewogICAgbmFtZTogIkludCIsCiAgICBraW5kOiAiU0NBTEFSIgogIH0sCiAgICAgIE1haWxpbmdBZGRyZXNzID0gewogICAgbmFtZTogIk1haWxpbmdBZGRyZXNzIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgYWRkcmVzczE6ICJTdHJpbmciLAogICAgICBhZGRyZXNzMjogIlN0cmluZyIsCiAgICAgIGNpdHk6ICJTdHJpbmciLAogICAgICBjb21wYW55OiAiU3RyaW5nIiwKICAgICAgY291bnRyeTogIlN0cmluZyIsCiAgICAgIGNvdW50cnlDb2RlVjI6ICJDb3VudHJ5Q29kZSIsCiAgICAgIGZpcnN0TmFtZTogIlN0cmluZyIsCiAgICAgIGZvcm1hdHRlZDogIlN0cmluZyIsCiAgICAgIGlkOiAiSUQiLAogICAgICBsYXN0TmFtZTogIlN0cmluZyIsCiAgICAgIGxhdGl0dWRlOiAiRmxvYXQiLAogICAgICBsb25naXR1ZGU6ICJGbG9hdCIsCiAgICAgIG5hbWU6ICJTdHJpbmciLAogICAgICBwaG9uZTogIlN0cmluZyIsCiAgICAgIHByb3ZpbmNlOiAiU3RyaW5nIiwKICAgICAgcHJvdmluY2VDb2RlOiAiU3RyaW5nIiwKICAgICAgemlwOiAiU3RyaW5nIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMAogIH0sCiAgICAgIE1hbnVhbERpc2NvdW50QXBwbGljYXRpb24gPSB7CiAgICBuYW1lOiAiTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbiIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGRlc2NyaXB0aW9uOiAiU3RyaW5nIiwKICAgICAgdGl0bGU6ICJTdHJpbmciCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgTW9uZXkgPSB7CiAgICBuYW1lOiAiTW9uZXkiLAogICAga2luZDogIlNDQUxBUiIKICB9LAogICAgICBNb25leVYyID0gewogICAgbmFtZTogIk1vbmV5VjIiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBhbW91bnQ6ICJEZWNpbWFsIiwKICAgICAgY3VycmVuY3lDb2RlOiAiQ3VycmVuY3lDb2RlIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIE11dGF0aW9uJDEgPSB7CiAgICBuYW1lOiAiTXV0YXRpb24iLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjaGVja291dEF0dHJpYnV0ZXNVcGRhdGVWMjogIkNoZWNrb3V0QXR0cmlidXRlc1VwZGF0ZVYyUGF5bG9hZCIsCiAgICAgIGNoZWNrb3V0Q3JlYXRlOiAiQ2hlY2tvdXRDcmVhdGVQYXlsb2FkIiwKICAgICAgY2hlY2tvdXREaXNjb3VudENvZGVBcHBseVYyOiAiQ2hlY2tvdXREaXNjb3VudENvZGVBcHBseVYyUGF5bG9hZCIsCiAgICAgIGNoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlOiAiQ2hlY2tvdXREaXNjb3VudENvZGVSZW1vdmVQYXlsb2FkIiwKICAgICAgY2hlY2tvdXRFbWFpbFVwZGF0ZVYyOiAiQ2hlY2tvdXRFbWFpbFVwZGF0ZVYyUGF5bG9hZCIsCiAgICAgIGNoZWNrb3V0R2lmdENhcmRSZW1vdmVWMjogIkNoZWNrb3V0R2lmdENhcmRSZW1vdmVWMlBheWxvYWQiLAogICAgICBjaGVja291dEdpZnRDYXJkc0FwcGVuZDogIkNoZWNrb3V0R2lmdENhcmRzQXBwZW5kUGF5bG9hZCIsCiAgICAgIGNoZWNrb3V0TGluZUl0ZW1zQWRkOiAiQ2hlY2tvdXRMaW5lSXRlbXNBZGRQYXlsb2FkIiwKICAgICAgY2hlY2tvdXRMaW5lSXRlbXNSZW1vdmU6ICJDaGVja291dExpbmVJdGVtc1JlbW92ZVBheWxvYWQiLAogICAgICBjaGVja291dExpbmVJdGVtc1JlcGxhY2U6ICJDaGVja291dExpbmVJdGVtc1JlcGxhY2VQYXlsb2FkIiwKICAgICAgY2hlY2tvdXRMaW5lSXRlbXNVcGRhdGU6ICJDaGVja291dExpbmVJdGVtc1VwZGF0ZVBheWxvYWQiLAogICAgICBjaGVja291dFNoaXBwaW5nQWRkcmVzc1VwZGF0ZVYyOiAiQ2hlY2tvdXRTaGlwcGluZ0FkZHJlc3NVcGRhdGVWMlBheWxvYWQiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExLAogICAgcmVsYXlJbnB1dE9iamVjdEJhc2VUeXBlczogewogICAgICBjaGVja291dEF0dHJpYnV0ZXNVcGRhdGU6ICJDaGVja291dEF0dHJpYnV0ZXNVcGRhdGVJbnB1dCIsCiAgICAgIGNoZWNrb3V0QXR0cmlidXRlc1VwZGF0ZVYyOiAiQ2hlY2tvdXRBdHRyaWJ1dGVzVXBkYXRlVjJJbnB1dCIsCiAgICAgIGNoZWNrb3V0Q3JlYXRlOiAiQ2hlY2tvdXRDcmVhdGVJbnB1dCIsCiAgICAgIGN1c3RvbWVyQWNjZXNzVG9rZW5DcmVhdGU6ICJDdXN0b21lckFjY2Vzc1Rva2VuQ3JlYXRlSW5wdXQiLAogICAgICBjdXN0b21lckFjdGl2YXRlOiAiQ3VzdG9tZXJBY3RpdmF0ZUlucHV0IiwKICAgICAgY3VzdG9tZXJDcmVhdGU6ICJDdXN0b21lckNyZWF0ZUlucHV0IiwKICAgICAgY3VzdG9tZXJSZXNldDogIkN1c3RvbWVyUmVzZXRJbnB1dCIKICAgIH0KICB9LAogICAgICBOb2RlID0gewogICAgbmFtZTogIk5vZGUiLAogICAga2luZDogIklOVEVSRkFDRSIsCiAgICBmaWVsZEJhc2VUeXBlczoge30sCiAgICBwb3NzaWJsZVR5cGVzOiBbIkFwcGxpZWRHaWZ0Q2FyZCIsICJBcnRpY2xlIiwgIkJsb2ciLCAiQ2hlY2tvdXQiLCAiQ2hlY2tvdXRMaW5lSXRlbSIsICJDb2xsZWN0aW9uIiwgIkNvbW1lbnQiLCAiRXh0ZXJuYWxWaWRlbyIsICJNYWlsaW5nQWRkcmVzcyIsICJNZWRpYUltYWdlIiwgIk1ldGFmaWVsZCIsICJNb2RlbDNkIiwgIk9yZGVyIiwgIlBhZ2UiLCAiUGF5bWVudCIsICJQcm9kdWN0IiwgIlByb2R1Y3RPcHRpb24iLCAiUHJvZHVjdFZhcmlhbnQiLCAiU2hvcFBvbGljeSIsICJWaWRlbyJdCiAgfSwKICAgICAgT3JkZXIgPSB7CiAgICBuYW1lOiAiT3JkZXIiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjdXJyZW5jeUNvZGU6ICJDdXJyZW5jeUNvZGUiLAogICAgICBjdXN0b21lclVybDogIlVSTCIsCiAgICAgIGlkOiAiSUQiLAogICAgICBsaW5lSXRlbXM6ICJPcmRlckxpbmVJdGVtQ29ubmVjdGlvbiIsCiAgICAgIG9yZGVyTnVtYmVyOiAiSW50IiwKICAgICAgcHJvY2Vzc2VkQXQ6ICJEYXRlVGltZSIsCiAgICAgIHNoaXBwaW5nQWRkcmVzczogIk1haWxpbmdBZGRyZXNzIiwKICAgICAgc3VidG90YWxQcmljZTogIk1vbmV5IiwKICAgICAgc3VidG90YWxQcmljZVYyOiAiTW9uZXlWMiIsCiAgICAgIHRvdGFsUHJpY2U6ICJNb25leSIsCiAgICAgIHRvdGFsUHJpY2VWMjogIk1vbmV5VjIiLAogICAgICB0b3RhbFJlZnVuZGVkOiAiTW9uZXkiLAogICAgICB0b3RhbFJlZnVuZGVkVjI6ICJNb25leVYyIiwKICAgICAgdG90YWxTaGlwcGluZ1ByaWNlOiAiTW9uZXkiLAogICAgICB0b3RhbFNoaXBwaW5nUHJpY2VWMjogIk1vbmV5VjIiLAogICAgICB0b3RhbFRheDogIk1vbmV5IiwKICAgICAgdG90YWxUYXhWMjogIk1vbmV5VjIiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICEwCiAgfSwKICAgICAgT3JkZXJMaW5lSXRlbSA9IHsKICAgIG5hbWU6ICJPcmRlckxpbmVJdGVtIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgY3VzdG9tQXR0cmlidXRlczogIkF0dHJpYnV0ZSIsCiAgICAgIHF1YW50aXR5OiAiSW50IiwKICAgICAgdGl0bGU6ICJTdHJpbmciLAogICAgICB2YXJpYW50OiAiUHJvZHVjdFZhcmlhbnQiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgT3JkZXJMaW5lSXRlbUNvbm5lY3Rpb24gPSB7CiAgICBuYW1lOiAiT3JkZXJMaW5lSXRlbUNvbm5lY3Rpb24iLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBlZGdlczogIk9yZGVyTGluZUl0ZW1FZGdlIiwKICAgICAgcGFnZUluZm86ICJQYWdlSW5mbyIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBPcmRlckxpbmVJdGVtRWRnZSA9IHsKICAgIG5hbWU6ICJPcmRlckxpbmVJdGVtRWRnZSIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGN1cnNvcjogIlN0cmluZyIsCiAgICAgIG5vZGU6ICJPcmRlckxpbmVJdGVtIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIFBhZ2VJbmZvID0gewogICAgbmFtZTogIlBhZ2VJbmZvIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgaGFzTmV4dFBhZ2U6ICJCb29sZWFuIiwKICAgICAgaGFzUHJldmlvdXNQYWdlOiAiQm9vbGVhbiIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBQYXltZW50U2V0dGluZ3MgPSB7CiAgICBuYW1lOiAiUGF5bWVudFNldHRpbmdzIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgZW5hYmxlZFByZXNlbnRtZW50Q3VycmVuY2llczogIkN1cnJlbmN5Q29kZSIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBQcmljaW5nUGVyY2VudGFnZVZhbHVlID0gewogICAgbmFtZTogIlByaWNpbmdQZXJjZW50YWdlVmFsdWUiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBwZXJjZW50YWdlOiAiRmxvYXQiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgUHJpY2luZ1ZhbHVlID0gewogICAgbmFtZTogIlByaWNpbmdWYWx1ZSIsCiAgICBraW5kOiAiVU5JT04iCiAgfSwKICAgICAgUHJvZHVjdCA9IHsKICAgIG5hbWU6ICJQcm9kdWN0IiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgYXZhaWxhYmxlRm9yU2FsZTogIkJvb2xlYW4iLAogICAgICBjcmVhdGVkQXQ6ICJEYXRlVGltZSIsCiAgICAgIGRlc2NyaXB0aW9uOiAiU3RyaW5nIiwKICAgICAgZGVzY3JpcHRpb25IdG1sOiAiSFRNTCIsCiAgICAgIGhhbmRsZTogIlN0cmluZyIsCiAgICAgIGlkOiAiSUQiLAogICAgICBpbWFnZXM6ICJJbWFnZUNvbm5lY3Rpb24iLAogICAgICBvbmxpbmVTdG9yZVVybDogIlVSTCIsCiAgICAgIG9wdGlvbnM6ICJQcm9kdWN0T3B0aW9uIiwKICAgICAgcHJvZHVjdFR5cGU6ICJTdHJpbmciLAogICAgICBwdWJsaXNoZWRBdDogIkRhdGVUaW1lIiwKICAgICAgdGl0bGU6ICJTdHJpbmciLAogICAgICB1cGRhdGVkQXQ6ICJEYXRlVGltZSIsCiAgICAgIHZhcmlhbnRzOiAiUHJvZHVjdFZhcmlhbnRDb25uZWN0aW9uIiwKICAgICAgdmVuZG9yOiAiU3RyaW5nIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMAogIH0sCiAgICAgIFByb2R1Y3RDb25uZWN0aW9uID0gewogICAgbmFtZTogIlByb2R1Y3RDb25uZWN0aW9uIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgZWRnZXM6ICJQcm9kdWN0RWRnZSIsCiAgICAgIHBhZ2VJbmZvOiAiUGFnZUluZm8iCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgUHJvZHVjdEVkZ2UgPSB7CiAgICBuYW1lOiAiUHJvZHVjdEVkZ2UiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjdXJzb3I6ICJTdHJpbmciLAogICAgICBub2RlOiAiUHJvZHVjdCIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBQcm9kdWN0T3B0aW9uID0gewogICAgbmFtZTogIlByb2R1Y3RPcHRpb24iLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBuYW1lOiAiU3RyaW5nIiwKICAgICAgdmFsdWVzOiAiU3RyaW5nIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMAogIH0sCiAgICAgIFByb2R1Y3RWYXJpYW50ID0gewogICAgbmFtZTogIlByb2R1Y3RWYXJpYW50IiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgYXZhaWxhYmxlRm9yU2FsZTogIkJvb2xlYW4iLAogICAgICBjb21wYXJlQXRQcmljZTogIk1vbmV5IiwKICAgICAgY29tcGFyZUF0UHJpY2VWMjogIk1vbmV5VjIiLAogICAgICBpZDogIklEIiwKICAgICAgaW1hZ2U6ICJJbWFnZSIsCiAgICAgIHByZXNlbnRtZW50UHJpY2VzOiAiUHJvZHVjdFZhcmlhbnRQcmljZVBhaXJDb25uZWN0aW9uIiwKICAgICAgcHJpY2U6ICJNb25leSIsCiAgICAgIHByaWNlVjI6ICJNb25leVYyIiwKICAgICAgcHJvZHVjdDogIlByb2R1Y3QiLAogICAgICBzZWxlY3RlZE9wdGlvbnM6ICJTZWxlY3RlZE9wdGlvbiIsCiAgICAgIHNrdTogIlN0cmluZyIsCiAgICAgIHRpdGxlOiAiU3RyaW5nIiwKICAgICAgdW5pdFByaWNlOiAiTW9uZXlWMiIsCiAgICAgIHVuaXRQcmljZU1lYXN1cmVtZW50OiAiVW5pdFByaWNlTWVhc3VyZW1lbnQiLAogICAgICB3ZWlnaHQ6ICJGbG9hdCIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITAKICB9LAogICAgICBQcm9kdWN0VmFyaWFudENvbm5lY3Rpb24gPSB7CiAgICBuYW1lOiAiUHJvZHVjdFZhcmlhbnRDb25uZWN0aW9uIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgZWRnZXM6ICJQcm9kdWN0VmFyaWFudEVkZ2UiLAogICAgICBwYWdlSW5mbzogIlBhZ2VJbmZvIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIFByb2R1Y3RWYXJpYW50RWRnZSA9IHsKICAgIG5hbWU6ICJQcm9kdWN0VmFyaWFudEVkZ2UiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjdXJzb3I6ICJTdHJpbmciLAogICAgICBub2RlOiAiUHJvZHVjdFZhcmlhbnQiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgUHJvZHVjdFZhcmlhbnRQcmljZVBhaXIgPSB7CiAgICBuYW1lOiAiUHJvZHVjdFZhcmlhbnRQcmljZVBhaXIiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjb21wYXJlQXRQcmljZTogIk1vbmV5VjIiLAogICAgICBwcmljZTogIk1vbmV5VjIiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgUHJvZHVjdFZhcmlhbnRQcmljZVBhaXJDb25uZWN0aW9uID0gewogICAgbmFtZTogIlByb2R1Y3RWYXJpYW50UHJpY2VQYWlyQ29ubmVjdGlvbiIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGVkZ2VzOiAiUHJvZHVjdFZhcmlhbnRQcmljZVBhaXJFZGdlIiwKICAgICAgcGFnZUluZm86ICJQYWdlSW5mbyIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBQcm9kdWN0VmFyaWFudFByaWNlUGFpckVkZ2UgPSB7CiAgICBuYW1lOiAiUHJvZHVjdFZhcmlhbnRQcmljZVBhaXJFZGdlIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgbm9kZTogIlByb2R1Y3RWYXJpYW50UHJpY2VQYWlyIgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIFF1ZXJ5Um9vdCA9IHsKICAgIG5hbWU6ICJRdWVyeVJvb3QiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBjb2xsZWN0aW9uQnlIYW5kbGU6ICJDb2xsZWN0aW9uIiwKICAgICAgY29sbGVjdGlvbnM6ICJDb2xsZWN0aW9uQ29ubmVjdGlvbiIsCiAgICAgIG5vZGU6ICJOb2RlIiwKICAgICAgbm9kZXM6ICJOb2RlIiwKICAgICAgcHJvZHVjdEJ5SGFuZGxlOiAiUHJvZHVjdCIsCiAgICAgIHByb2R1Y3RzOiAiUHJvZHVjdENvbm5lY3Rpb24iLAogICAgICBzaG9wOiAiU2hvcCIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uID0gewogICAgbmFtZTogIlNjcmlwdERpc2NvdW50QXBwbGljYXRpb24iLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBkZXNjcmlwdGlvbjogIlN0cmluZyIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBTZWxlY3RlZE9wdGlvbiA9IHsKICAgIG5hbWU6ICJTZWxlY3RlZE9wdGlvbiIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIG5hbWU6ICJTdHJpbmciLAogICAgICB2YWx1ZTogIlN0cmluZyIKICAgIH0sCiAgICBpbXBsZW1lbnRzTm9kZTogITEKICB9LAogICAgICBTaGlwcGluZ1JhdGUgPSB7CiAgICBuYW1lOiAiU2hpcHBpbmdSYXRlIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgaGFuZGxlOiAiU3RyaW5nIiwKICAgICAgcHJpY2U6ICJNb25leSIsCiAgICAgIHByaWNlVjI6ICJNb25leVYyIiwKICAgICAgdGl0bGU6ICJTdHJpbmciCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgU2hvcCA9IHsKICAgIG5hbWU6ICJTaG9wIiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgY3VycmVuY3lDb2RlOiAiQ3VycmVuY3lDb2RlIiwKICAgICAgZGVzY3JpcHRpb246ICJTdHJpbmciLAogICAgICBtb25leUZvcm1hdDogIlN0cmluZyIsCiAgICAgIG5hbWU6ICJTdHJpbmciLAogICAgICBwYXltZW50U2V0dGluZ3M6ICJQYXltZW50U2V0dGluZ3MiLAogICAgICBwcmltYXJ5RG9tYWluOiAiRG9tYWluIiwKICAgICAgcHJpdmFjeVBvbGljeTogIlNob3BQb2xpY3kiLAogICAgICByZWZ1bmRQb2xpY3k6ICJTaG9wUG9saWN5IiwKICAgICAgdGVybXNPZlNlcnZpY2U6ICJTaG9wUG9saWN5IgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIFNob3BQb2xpY3kgPSB7CiAgICBuYW1lOiAiU2hvcFBvbGljeSIsCiAgICBraW5kOiAiT0JKRUNUIiwKICAgIGZpZWxkQmFzZVR5cGVzOiB7CiAgICAgIGJvZHk6ICJTdHJpbmciLAogICAgICBpZDogIklEIiwKICAgICAgdGl0bGU6ICJTdHJpbmciLAogICAgICB1cmw6ICJVUkwiCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICEwCiAgfSwKICAgICAgU3RyaW5nJDEgPSB7CiAgICBuYW1lOiAiU3RyaW5nIiwKICAgIGtpbmQ6ICJTQ0FMQVIiCiAgfSwKICAgICAgVVJMID0gewogICAgbmFtZTogIlVSTCIsCiAgICBraW5kOiAiU0NBTEFSIgogIH0sCiAgICAgIFVuaXRQcmljZU1lYXN1cmVtZW50ID0gewogICAgbmFtZTogIlVuaXRQcmljZU1lYXN1cmVtZW50IiwKICAgIGtpbmQ6ICJPQkpFQ1QiLAogICAgZmllbGRCYXNlVHlwZXM6IHsKICAgICAgbWVhc3VyZWRUeXBlOiAiVW5pdFByaWNlTWVhc3VyZW1lbnRNZWFzdXJlZFR5cGUiLAogICAgICBxdWFudGl0eVVuaXQ6ICJVbml0UHJpY2VNZWFzdXJlbWVudE1lYXN1cmVkVW5pdCIsCiAgICAgIHF1YW50aXR5VmFsdWU6ICJGbG9hdCIsCiAgICAgIHJlZmVyZW5jZVVuaXQ6ICJVbml0UHJpY2VNZWFzdXJlbWVudE1lYXN1cmVkVW5pdCIsCiAgICAgIHJlZmVyZW5jZVZhbHVlOiAiSW50IgogICAgfSwKICAgIGltcGxlbWVudHNOb2RlOiAhMQogIH0sCiAgICAgIFVuaXRQcmljZU1lYXN1cmVtZW50TWVhc3VyZWRUeXBlID0gewogICAgbmFtZTogIlVuaXRQcmljZU1lYXN1cmVtZW50TWVhc3VyZWRUeXBlIiwKICAgIGtpbmQ6ICJFTlVNIgogIH0sCiAgICAgIFVuaXRQcmljZU1lYXN1cmVtZW50TWVhc3VyZWRVbml0ID0gewogICAgbmFtZTogIlVuaXRQcmljZU1lYXN1cmVtZW50TWVhc3VyZWRVbml0IiwKICAgIGtpbmQ6ICJFTlVNIgogIH0sCiAgICAgIFVzZXJFcnJvciA9IHsKICAgIG5hbWU6ICJVc2VyRXJyb3IiLAogICAga2luZDogIk9CSkVDVCIsCiAgICBmaWVsZEJhc2VUeXBlczogewogICAgICBmaWVsZDogIlN0cmluZyIsCiAgICAgIG1lc3NhZ2U6ICJTdHJpbmciCiAgICB9LAogICAgaW1wbGVtZW50c05vZGU6ICExCiAgfSwKICAgICAgVHlwZXMgPSB7CiAgICB0eXBlczoge30KICB9OwoKICBmdW5jdGlvbiByZWN1cnNpdmVseUZyZWV6ZU9iamVjdChzdHJ1Y3R1cmUpIHsKICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzdHJ1Y3R1cmUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICB2YXIgdmFsdWUgPSBzdHJ1Y3R1cmVba2V5XTsKICAgICAgdmFsdWUgJiYgIm9iamVjdCIgPT09ICh2b2lkIDAgPT09IHZhbHVlID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKHZhbHVlKSkgJiYgcmVjdXJzaXZlbHlGcmVlemVPYmplY3QodmFsdWUpOwogICAgfSksIE9iamVjdC5mcmVlemUoc3RydWN0dXJlKSwgc3RydWN0dXJlOwogIH0KCiAgVHlwZXMudHlwZXMuQXBwbGllZEdpZnRDYXJkID0gQXBwbGllZEdpZnRDYXJkLCBUeXBlcy50eXBlcy5BdHRyaWJ1dGUgPSBBdHRyaWJ1dGUsIFR5cGVzLnR5cGVzLkF1dG9tYXRpY0Rpc2NvdW50QXBwbGljYXRpb24gPSBBdXRvbWF0aWNEaXNjb3VudEFwcGxpY2F0aW9uLCBUeXBlcy50eXBlcy5Cb29sZWFuID0gQm9vbGVhbiQxLCBUeXBlcy50eXBlcy5DaGVja291dCA9IENoZWNrb3V0LCBUeXBlcy50eXBlcy5DaGVja291dEF0dHJpYnV0ZXNVcGRhdGVWMlBheWxvYWQgPSBDaGVja291dEF0dHJpYnV0ZXNVcGRhdGVWMlBheWxvYWQsIFR5cGVzLnR5cGVzLkNoZWNrb3V0Q3JlYXRlUGF5bG9hZCA9IENoZWNrb3V0Q3JlYXRlUGF5bG9hZCwgVHlwZXMudHlwZXMuQ2hlY2tvdXREaXNjb3VudENvZGVBcHBseVYyUGF5bG9hZCA9IENoZWNrb3V0RGlzY291bnRDb2RlQXBwbHlWMlBheWxvYWQsIFR5cGVzLnR5cGVzLkNoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlUGF5bG9hZCA9IENoZWNrb3V0RGlzY291bnRDb2RlUmVtb3ZlUGF5bG9hZCwgVHlwZXMudHlwZXMuQ2hlY2tvdXRFbWFpbFVwZGF0ZVYyUGF5bG9hZCA9IENoZWNrb3V0RW1haWxVcGRhdGVWMlBheWxvYWQsIFR5cGVzLnR5cGVzLkNoZWNrb3V0RXJyb3JDb2RlID0gQ2hlY2tvdXRFcnJvckNvZGUsIFR5cGVzLnR5cGVzLkNoZWNrb3V0R2lmdENhcmRSZW1vdmVWMlBheWxvYWQgPSBDaGVja291dEdpZnRDYXJkUmVtb3ZlVjJQYXlsb2FkLCBUeXBlcy50eXBlcy5DaGVja291dEdpZnRDYXJkc0FwcGVuZFBheWxvYWQgPSBDaGVja291dEdpZnRDYXJkc0FwcGVuZFBheWxvYWQsIFR5cGVzLnR5cGVzLkNoZWNrb3V0TGluZUl0ZW0gPSBDaGVja291dExpbmVJdGVtLCBUeXBlcy50eXBlcy5DaGVja291dExpbmVJdGVtQ29ubmVjdGlvbiA9IENoZWNrb3V0TGluZUl0ZW1Db25uZWN0aW9uLCBUeXBlcy50eXBlcy5DaGVja291dExpbmVJdGVtRWRnZSA9IENoZWNrb3V0TGluZUl0ZW1FZGdlLCBUeXBlcy50eXBlcy5DaGVja291dExpbmVJdGVtc0FkZFBheWxvYWQgPSBDaGVja291dExpbmVJdGVtc0FkZFBheWxvYWQsIFR5cGVzLnR5cGVzLkNoZWNrb3V0TGluZUl0ZW1zUmVtb3ZlUGF5bG9hZCA9IENoZWNrb3V0TGluZUl0ZW1zUmVtb3ZlUGF5bG9hZCwgVHlwZXMudHlwZXMuQ2hlY2tvdXRMaW5lSXRlbXNSZXBsYWNlUGF5bG9hZCA9IENoZWNrb3V0TGluZUl0ZW1zUmVwbGFjZVBheWxvYWQsIFR5cGVzLnR5cGVzLkNoZWNrb3V0TGluZUl0ZW1zVXBkYXRlUGF5bG9hZCA9IENoZWNrb3V0TGluZUl0ZW1zVXBkYXRlUGF5bG9hZCwgVHlwZXMudHlwZXMuQ2hlY2tvdXRTaGlwcGluZ0FkZHJlc3NVcGRhdGVWMlBheWxvYWQgPSBDaGVja291dFNoaXBwaW5nQWRkcmVzc1VwZGF0ZVYyUGF5bG9hZCwgVHlwZXMudHlwZXMuQ2hlY2tvdXRVc2VyRXJyb3IgPSBDaGVja291dFVzZXJFcnJvciwgVHlwZXMudHlwZXMuQ29sbGVjdGlvbiA9IENvbGxlY3Rpb24sIFR5cGVzLnR5cGVzLkNvbGxlY3Rpb25Db25uZWN0aW9uID0gQ29sbGVjdGlvbkNvbm5lY3Rpb24sIFR5cGVzLnR5cGVzLkNvbGxlY3Rpb25FZGdlID0gQ29sbGVjdGlvbkVkZ2UsIFR5cGVzLnR5cGVzLkNvdW50cnlDb2RlID0gQ291bnRyeUNvZGUsIFR5cGVzLnR5cGVzLkN1cnJlbmN5Q29kZSA9IEN1cnJlbmN5Q29kZSwgVHlwZXMudHlwZXMuRGF0ZVRpbWUgPSBEYXRlVGltZSwgVHlwZXMudHlwZXMuRGVjaW1hbCA9IERlY2ltYWwsIFR5cGVzLnR5cGVzLkRpc2NvdW50QWxsb2NhdGlvbiA9IERpc2NvdW50QWxsb2NhdGlvbiwgVHlwZXMudHlwZXMuRGlzY291bnRBcHBsaWNhdGlvbiA9IERpc2NvdW50QXBwbGljYXRpb24sIFR5cGVzLnR5cGVzLkRpc2NvdW50QXBwbGljYXRpb25BbGxvY2F0aW9uTWV0aG9kID0gRGlzY291bnRBcHBsaWNhdGlvbkFsbG9jYXRpb25NZXRob2QsIFR5cGVzLnR5cGVzLkRpc2NvdW50QXBwbGljYXRpb25Db25uZWN0aW9uID0gRGlzY291bnRBcHBsaWNhdGlvbkNvbm5lY3Rpb24sIFR5cGVzLnR5cGVzLkRpc2NvdW50QXBwbGljYXRpb25FZGdlID0gRGlzY291bnRBcHBsaWNhdGlvbkVkZ2UsIFR5cGVzLnR5cGVzLkRpc2NvdW50QXBwbGljYXRpb25UYXJnZXRTZWxlY3Rpb24gPSBEaXNjb3VudEFwcGxpY2F0aW9uVGFyZ2V0U2VsZWN0aW9uLCBUeXBlcy50eXBlcy5EaXNjb3VudEFwcGxpY2F0aW9uVGFyZ2V0VHlwZSA9IERpc2NvdW50QXBwbGljYXRpb25UYXJnZXRUeXBlLCBUeXBlcy50eXBlcy5EaXNjb3VudENvZGVBcHBsaWNhdGlvbiA9IERpc2NvdW50Q29kZUFwcGxpY2F0aW9uLCBUeXBlcy50eXBlcy5Eb21haW4gPSBEb21haW4sIFR5cGVzLnR5cGVzLkZsb2F0ID0gRmxvYXQsIFR5cGVzLnR5cGVzLkhUTUwgPSBIVE1MLCBUeXBlcy50eXBlcy5JRCA9IElELCBUeXBlcy50eXBlcy5JbWFnZSA9IEltYWdlLCBUeXBlcy50eXBlcy5JbWFnZUNvbm5lY3Rpb24gPSBJbWFnZUNvbm5lY3Rpb24sIFR5cGVzLnR5cGVzLkltYWdlRWRnZSA9IEltYWdlRWRnZSwgVHlwZXMudHlwZXMuSW50ID0gSW50LCBUeXBlcy50eXBlcy5NYWlsaW5nQWRkcmVzcyA9IE1haWxpbmdBZGRyZXNzLCBUeXBlcy50eXBlcy5NYW51YWxEaXNjb3VudEFwcGxpY2F0aW9uID0gTWFudWFsRGlzY291bnRBcHBsaWNhdGlvbiwgVHlwZXMudHlwZXMuTW9uZXkgPSBNb25leSwgVHlwZXMudHlwZXMuTW9uZXlWMiA9IE1vbmV5VjIsIFR5cGVzLnR5cGVzLk11dGF0aW9uID0gTXV0YXRpb24kMSwgVHlwZXMudHlwZXMuTm9kZSA9IE5vZGUsIFR5cGVzLnR5cGVzLk9yZGVyID0gT3JkZXIsIFR5cGVzLnR5cGVzLk9yZGVyTGluZUl0ZW0gPSBPcmRlckxpbmVJdGVtLCBUeXBlcy50eXBlcy5PcmRlckxpbmVJdGVtQ29ubmVjdGlvbiA9IE9yZGVyTGluZUl0ZW1Db25uZWN0aW9uLCBUeXBlcy50eXBlcy5PcmRlckxpbmVJdGVtRWRnZSA9IE9yZGVyTGluZUl0ZW1FZGdlLCBUeXBlcy50eXBlcy5QYWdlSW5mbyA9IFBhZ2VJbmZvLCBUeXBlcy50eXBlcy5QYXltZW50U2V0dGluZ3MgPSBQYXltZW50U2V0dGluZ3MsIFR5cGVzLnR5cGVzLlByaWNpbmdQZXJjZW50YWdlVmFsdWUgPSBQcmljaW5nUGVyY2VudGFnZVZhbHVlLCBUeXBlcy50eXBlcy5QcmljaW5nVmFsdWUgPSBQcmljaW5nVmFsdWUsIFR5cGVzLnR5cGVzLlByb2R1Y3QgPSBQcm9kdWN0LCBUeXBlcy50eXBlcy5Qcm9kdWN0Q29ubmVjdGlvbiA9IFByb2R1Y3RDb25uZWN0aW9uLCBUeXBlcy50eXBlcy5Qcm9kdWN0RWRnZSA9IFByb2R1Y3RFZGdlLCBUeXBlcy50eXBlcy5Qcm9kdWN0T3B0aW9uID0gUHJvZHVjdE9wdGlvbiwgVHlwZXMudHlwZXMuUHJvZHVjdFZhcmlhbnQgPSBQcm9kdWN0VmFyaWFudCwgVHlwZXMudHlwZXMuUHJvZHVjdFZhcmlhbnRDb25uZWN0aW9uID0gUHJvZHVjdFZhcmlhbnRDb25uZWN0aW9uLCBUeXBlcy50eXBlcy5Qcm9kdWN0VmFyaWFudEVkZ2UgPSBQcm9kdWN0VmFyaWFudEVkZ2UsIFR5cGVzLnR5cGVzLlByb2R1Y3RWYXJpYW50UHJpY2VQYWlyID0gUHJvZHVjdFZhcmlhbnRQcmljZVBhaXIsIFR5cGVzLnR5cGVzLlByb2R1Y3RWYXJpYW50UHJpY2VQYWlyQ29ubmVjdGlvbiA9IFByb2R1Y3RWYXJpYW50UHJpY2VQYWlyQ29ubmVjdGlvbiwgVHlwZXMudHlwZXMuUHJvZHVjdFZhcmlhbnRQcmljZVBhaXJFZGdlID0gUHJvZHVjdFZhcmlhbnRQcmljZVBhaXJFZGdlLCBUeXBlcy50eXBlcy5RdWVyeVJvb3QgPSBRdWVyeVJvb3QsIFR5cGVzLnR5cGVzLlNjcmlwdERpc2NvdW50QXBwbGljYXRpb24gPSBTY3JpcHREaXNjb3VudEFwcGxpY2F0aW9uLCBUeXBlcy50eXBlcy5TZWxlY3RlZE9wdGlvbiA9IFNlbGVjdGVkT3B0aW9uLCBUeXBlcy50eXBlcy5TaGlwcGluZ1JhdGUgPSBTaGlwcGluZ1JhdGUsIFR5cGVzLnR5cGVzLlNob3AgPSBTaG9wLCBUeXBlcy50eXBlcy5TaG9wUG9saWN5ID0gU2hvcFBvbGljeSwgVHlwZXMudHlwZXMuU3RyaW5nID0gU3RyaW5nJDEsIFR5cGVzLnR5cGVzLlVSTCA9IFVSTCwgVHlwZXMudHlwZXMuVW5pdFByaWNlTWVhc3VyZW1lbnQgPSBVbml0UHJpY2VNZWFzdXJlbWVudCwgVHlwZXMudHlwZXMuVW5pdFByaWNlTWVhc3VyZW1lbnRNZWFzdXJlZFR5cGUgPSBVbml0UHJpY2VNZWFzdXJlbWVudE1lYXN1cmVkVHlwZSwgVHlwZXMudHlwZXMuVW5pdFByaWNlTWVhc3VyZW1lbnRNZWFzdXJlZFVuaXQgPSBVbml0UHJpY2VNZWFzdXJlbWVudE1lYXN1cmVkVW5pdCwgVHlwZXMudHlwZXMuVXNlckVycm9yID0gVXNlckVycm9yLCBUeXBlcy5xdWVyeVR5cGUgPSAiUXVlcnlSb290IiwgVHlwZXMubXV0YXRpb25UeXBlID0gIk11dGF0aW9uIiwgVHlwZXMuc3Vic2NyaXB0aW9uVHlwZSA9IG51bGw7CgogIHZhciB0eXBlcyA9IHJlY3Vyc2l2ZWx5RnJlZXplT2JqZWN0KFR5cGVzKSwKICAgICAgQ2xpZW50LAogICAgICBzaG9waWZ5QnV5ID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gQ2xpZW50KGNvbmZpZykgewogICAgICB2YXIgR3JhcGhRTENsaWVudENsYXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiBDbGllbnQkMiwKICAgICAgICAgIGZldGNoRnVuY3Rpb24gPSBhcmd1bWVudHNbMl07CiAgICAgIGNsYXNzQ2FsbENoZWNrJDEodGhpcywgQ2xpZW50KTsKICAgICAgdmFyIHVybCA9ICJodHRwczovLyIgKyBjb25maWcuZG9tYWluICsgIi9hcGkvIiArIGNvbmZpZy5hcGlWZXJzaW9uICsgIi9ncmFwaHFsIiwKICAgICAgICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIlgtU0RLLVZhcmlhbnQiOiAiamF2YXNjcmlwdCIsCiAgICAgICAgIlgtU0RLLVZlcnNpb24iOiB2ZXJzaW9uLAogICAgICAgICJYLVNob3BpZnktU3RvcmVmcm9udC1BY2Nlc3MtVG9rZW4iOiBjb25maWcuc3RvcmVmcm9udEFjY2Vzc1Rva2VuCiAgICAgIH07CiAgICAgIGNvbmZpZy5zb3VyY2UgJiYgKGhlYWRlcnNbIlgtU0RLLVZhcmlhbnQtU291cmNlIl0gPSBjb25maWcuc291cmNlKTsKICAgICAgdmFyIGxhbmd1YWdlSGVhZGVyID0gY29uZmlnLmxhbmd1YWdlID8gY29uZmlnLmxhbmd1YWdlIDogIioiOwogICAgICBoZWFkZXJzWyJBY2NlcHQtTGFuZ3VhZ2UiXSA9IGxhbmd1YWdlSGVhZGVyLCBmZXRjaEZ1bmN0aW9uID8gKGhlYWRlcnNbIkNvbnRlbnQtVHlwZSJdID0gImFwcGxpY2F0aW9uL2pzb24iLCBoZWFkZXJzLkFjY2VwdCA9ICJhcHBsaWNhdGlvbi9qc29uIiwgdGhpcy5ncmFwaFFMQ2xpZW50ID0gbmV3IEdyYXBoUUxDbGllbnRDbGFzcyh0eXBlcywgewogICAgICAgIGZldGNoZXI6IGZ1bmN0aW9uIGZldGNoZXIoZ3JhcGhRTFBhcmFtcykgewogICAgICAgICAgcmV0dXJuIGZldGNoRnVuY3Rpb24odXJsLCB7CiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGdyYXBoUUxQYXJhbXMpLAogICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgbW9kZTogImNvcnMiLAogICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KSkgOiB0aGlzLmdyYXBoUUxDbGllbnQgPSBuZXcgR3JhcGhRTENsaWVudENsYXNzKHR5cGVzLCB7CiAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgZmV0Y2hlck9wdGlvbnM6IHsKICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgICB9CiAgICAgIH0pLCB0aGlzLnByb2R1Y3QgPSBuZXcgUHJvZHVjdFJlc291cmNlKHRoaXMuZ3JhcGhRTENsaWVudCksIHRoaXMuY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uUmVzb3VyY2UodGhpcy5ncmFwaFFMQ2xpZW50KSwgdGhpcy5zaG9wID0gbmV3IFNob3BSZXNvdXJjZSh0aGlzLmdyYXBoUUxDbGllbnQpLCB0aGlzLmNoZWNrb3V0ID0gbmV3IENoZWNrb3V0UmVzb3VyY2UodGhpcy5ncmFwaFFMQ2xpZW50KSwgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZVJlc291cmNlKHRoaXMuZ3JhcGhRTENsaWVudCk7CiAgICB9CgogICAgcmV0dXJuIGNyZWF0ZUNsYXNzJDEoQ2xpZW50LCBudWxsLCBbewogICAgICBrZXk6ICJidWlsZENsaWVudCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZENsaWVudChjb25maWcsIGZldGNoRnVuY3Rpb24pIHsKICAgICAgICB2YXIgbmV3Q29uZmlnID0gbmV3IENvbmZpZyhjb25maWcpLAogICAgICAgICAgICBjbGllbnQgPSBuZXcgQ2xpZW50KG5ld0NvbmZpZywgQ2xpZW50JDIsIGZldGNoRnVuY3Rpb24pOwogICAgICAgIHJldHVybiBjbGllbnQuY29uZmlnID0gbmV3Q29uZmlnLCBjbGllbnQ7CiAgICAgIH0KICAgIH1dKSwgY3JlYXRlQ2xhc3MkMShDbGllbnQsIFt7CiAgICAgIGtleTogImZldGNoTmV4dFBhZ2UiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hOZXh0UGFnZShtb2RlbHMpIHsKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaFFMQ2xpZW50LmZldGNoTmV4dFBhZ2UobW9kZWxzKTsKICAgICAgfQogICAgfV0pLCBDbGllbnQ7CiAgfSgpOwoKICBmdW5jdGlvbiBtZXJnZSh0YXJnZXQpIHsKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzb3VyY2VzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgc291cmNlc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgcmV0dXJuIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7CiAgICAgIHNvdXJjZSAmJiBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgICJbb2JqZWN0IE9iamVjdF0iID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc291cmNlW2tleV0pID8gdGFyZ2V0W2tleV0gPSBtZXJnZSh0YXJnZXRba2V5XSB8fCB7fSwgc291cmNlW2tleV0pIDogdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICAgICAgfSk7CiAgICB9KSwgdGFyZ2V0OwogIH0KCiAgZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHsKICAgIHJldHVybiAhIShvYmogJiYgb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jYWxsICYmIG9iai5hcHBseSk7CiAgfQoKICB2YXIgcXVhbnRpdHlUZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0LnF1YW50aXR5fX0ge3tkYXRhLnF1YW50aXR5Q2xhc3N9fSIgZGF0YS1lbGVtZW50PSJwcm9kdWN0LnF1YW50aXR5Ij5cbiAgICAgICAgICAgIHt7I2RhdGEuY29udGVudHMucXVhbnRpdHlEZWNyZW1lbnR9fVxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0LnF1YW50aXR5QnV0dG9ufX0ge3tkYXRhLmNsYXNzZXMucHJvZHVjdC5xdWFudGl0eURlY3JlbWVudH19IiB0eXBlPSJidXR0b24iIGRhdGEtZWxlbWVudD0icHJvZHVjdC5xdWFudGl0eURlY3JlbWVudCI+PHNwYW4+LTwvc3Bhbj48c3BhbiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPkRlY3JlbWVudDwvc3Bhbj48L2J1dHRvbj5cbiAgICAgICAgICAgIHt7L2RhdGEuY29udGVudHMucXVhbnRpdHlEZWNyZW1lbnR9fVxuICAgICAgICAgICAge3sjZGF0YS5jb250ZW50cy5xdWFudGl0eUlucHV0fX1cbiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0LnF1YW50aXR5SW5wdXR9fSIgdHlwZT0ibnVtYmVyIiBtaW49IjAiIGFyaWEtbGFiZWw9IlF1YW50aXR5IiB2YWx1ZT0ie3tkYXRhLnNlbGVjdGVkUXVhbnRpdHl9fSIgZGF0YS1lbGVtZW50PSJwcm9kdWN0LnF1YW50aXR5SW5wdXQiPlxuICAgICAgICAgICAge3svZGF0YS5jb250ZW50cy5xdWFudGl0eUlucHV0fX1cbiAgICAgICAgICAgIHt7I2RhdGEuY29udGVudHMucXVhbnRpdHlJbmNyZW1lbnR9fVxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0LnF1YW50aXR5QnV0dG9ufX0ge3tkYXRhLmNsYXNzZXMucHJvZHVjdC5xdWFudGl0eUluY3JlbWVudH19IiB0eXBlPSJidXR0b24iIGRhdGEtZWxlbWVudD0icHJvZHVjdC5xdWFudGl0eUluY3JlbWVudCI+PHNwYW4+Kzwvc3Bhbj48c3BhbiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPkluY3JlbWVudDwvc3Bhbj48L2J1dHRvbj5cbiAgICAgICAgICAgIHt7L2RhdGEuY29udGVudHMucXVhbnRpdHlJbmNyZW1lbnR9fVxuICAgICAgICAgICA8L2Rpdj4nLAogICAgICBidXR0b25UZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0LmJ1dHRvbldyYXBwZXJ9fSIgZGF0YS1lbGVtZW50PSJwcm9kdWN0LmJ1dHRvbldyYXBwZXIiPjxidXR0b24ge3sjZGF0YS5idXR0b25EaXNhYmxlZH19ZGlzYWJsZWR7ey9kYXRhLmJ1dHRvbkRpc2FibGVkfX0gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3QuYnV0dG9ufX0ge3tkYXRhLmJ1dHRvbkNsYXNzfX0iIGRhdGEtZWxlbWVudD0icHJvZHVjdC5idXR0b24iPnt7ZGF0YS5idXR0b25UZXh0fX08L2J1dHRvbj48L2Rpdj4nLAogICAgICBwcm9kdWN0VGVtcGxhdGUgPSB7CiAgICBpbWc6ICd7eyNkYXRhLmN1cnJlbnRJbWFnZS5zcmNMYXJnZX19PGRpdiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMucHJvZHVjdC5pbWdXcmFwcGVyfX0iIGRhdGEtZWxlbWVudD0icHJvZHVjdC5pbWdXcmFwcGVyIj48aW1nIGFsdD0ie3tkYXRhLmN1cnJlbnRJbWFnZS5hbHRUZXh0fX0iIGRhdGEtZWxlbWVudD0icHJvZHVjdC5pbWciIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0LmltZ319IiBzcmM9Int7ZGF0YS5jdXJyZW50SW1hZ2Uuc3JjTGFyZ2V9fSIgLz48L2Rpdj57ey9kYXRhLmN1cnJlbnRJbWFnZS5zcmNMYXJnZX19JywKICAgIGltZ1dpdGhDYXJvdXNlbDogJzxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3QuaW1nV3JhcHBlcn19IiBkYXRhLWVsZW1lbnQ9InByb2R1Y3QuaW1hZ2VXcmFwcGVyIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLWltYWdlLXdyYXBwZXIiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjYXJvdXNlbC1idXR0b24gY2Fyb3VzZWwtYnV0dG9uLS1wcmV2aW91cyI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIExlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iY2Fyb3VzZWwtYnV0dG9uLWFycm93IiBzcmM9Ii8vc2Rrcy5zaG9waWZ5Y2RuLmNvbS9idXktYnV0dG9uL2xhdGVzdC9hcnJvdy5zdmciIGFsdD0iQ2Fyb3VzZWwgQXJyb3ciLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ie3tkYXRhLmNsYXNzZXMucHJvZHVjdC5pbWd9fSIgYWx0PSJ7e2RhdGEuY3VycmVudEltYWdlLmFsdFRleHR9fSIgc3JjPSJ7e2RhdGEuY3VycmVudEltYWdlLnNyY319IiBkYXRhLWVsZW1lbnQ9InByb2R1Y3QuaW1nIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjYXJvdXNlbC1idXR0b24gY2Fyb3VzZWwtYnV0dG9uLS1uZXh0Ij5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgUmlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iY2Fyb3VzZWwtYnV0dG9uLWFycm93IiBzcmM9Ii8vc2Rrcy5zaG9waWZ5Y2RuLmNvbS9idXktYnV0dG9uL2xhdGVzdC9hcnJvdy5zdmciIGFsdD0iQ2Fyb3VzZWwgQXJyb3ciLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3QuY2Fyb3VzZWx9fSI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyNkYXRhLmNhcm91c2VsSW1hZ2VzfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZWxlbWVudD0icHJvZHVjdC5jYXJvdXNlbGl0ZW0iIGFyaWEtbGFiZWw9Int7YWx0VGV4dH19IiBocmVmPSJ7e3NyY319IiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMucHJvZHVjdC5jYXJvdXNlbEl0ZW19fSB7eyNpc1NlbGVjdGVkfX0ge3tkYXRhLmNsYXNzZXMucHJvZHVjdC5jYXJvdXNlbEl0ZW1TZWxlY3RlZH19IHt7L2lzU2VsZWN0ZWR9fSIgZGF0YS1pbWFnZS1pZD0ie3tpZH19IiBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKHt7Y2Fyb3VzZWxTcmN9fSkiPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7L2RhdGEuY2Fyb3VzZWxJbWFnZXN9fVxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nLAogICAgdGl0bGU6ICc8aDEgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3QudGl0bGV9fSIgZGF0YS1lbGVtZW50PSJwcm9kdWN0LnRpdGxlIj57e2RhdGEudGl0bGV9fTwvaDE+JywKICAgIHZhcmlhbnRUaXRsZTogJ3t7I2RhdGEuaGFzVmFyaWFudHN9fTxoMiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMucHJvZHVjdC52YXJpYW50VGl0bGV9fSIgZGF0YS1lbGVtZW50PSJwcm9kdWN0LnZhcmlhbnRUaXRsZSI+e3tkYXRhLnNlbGVjdGVkVmFyaWFudC50aXRsZX19PC9oMj57ey9kYXRhLmhhc1ZhcmlhbnRzfX0nLAogICAgb3B0aW9uczogJ3t7I2RhdGEuaGFzVmFyaWFudHN9fTxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3Qub3B0aW9uc319IiBkYXRhLWVsZW1lbnQ9InByb2R1Y3Qub3B0aW9ucyI+e3t7ZGF0YS5vcHRpb25zSHRtbH19fTwvZGl2Pnt7L2RhdGEuaGFzVmFyaWFudHN9fScsCiAgICBwcmljZTogJzxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3QucHJpY2VzfX0iIGRhdGEtZWxlbWVudD0icHJvZHVjdC5wcmljZXMiPlxuICAgICAgICAgICAge3sjZGF0YS5zZWxlY3RlZFZhcmlhbnR9fVxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3QucHJpY2V9fSB7e2RhdGEucHJpY2VDbGFzc319IiBkYXRhLWVsZW1lbnQ9InByb2R1Y3QucHJpY2UiPnt7ZGF0YS5mb3JtYXR0ZWRQcmljZX19PC9zcGFuPlxuICAgICAgICAgICAge3sjZGF0YS5zZWxlY3RlZFZhcmlhbnQuY29tcGFyZUF0UHJpY2V9fTxzcGFuIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0LmNvbXBhcmVBdH19IiBkYXRhLWVsZW1lbnQ9InByb2R1Y3QuY29tcGFyZUF0Ij57e2RhdGEuZm9ybWF0dGVkQ29tcGFyZUF0UHJpY2V9fTwvc3Bhbj57ey9kYXRhLnNlbGVjdGVkVmFyaWFudC5jb21wYXJlQXRQcmljZX19XG4gICAgICAgICAgICB7eyNkYXRhLnNob3dVbml0UHJpY2V9fVxuICAgICAgICAgICAgPGRpdiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMucHJvZHVjdC51bml0UHJpY2V9fSIgZGF0YS1lbGVtZW50PSJwcm9kdWN0LnVuaXRQcmljZSI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseWhpZGRlbiI+e3tkYXRhLnRleHQudW5pdFByaWNlQWNjZXNzaWJpbGl0eUxhYmVsfX08L3NwYW4+XG4gICAgICAgICAgICAgIHt7ZGF0YS5mb3JtYXR0ZWRVbml0UHJpY2V9fTxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4vPC9zcGFuPjxzcGFuIGNsYXNzPSJ2aXN1YWxseWhpZGRlbiI+Jm5ic3A7e3tkYXRhLnRleHQudW5pdFByaWNlQWNjZXNzaWJpbGl0eVNlcGFyYXRvcn19Jm5ic3A7PC9zcGFuPnt7ZGF0YS5mb3JtYXR0ZWRVbml0UHJpY2VCYXNlVW5pdH19XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHt7L2RhdGEuc2hvd1VuaXRQcmljZX19XG4gICAgICAgICAgICB7ey9kYXRhLnNlbGVjdGVkVmFyaWFudH19XG4gICAgICAgICAgPC9kaXY+JywKICAgIGRlc2NyaXB0aW9uOiAnPGRpdiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMucHJvZHVjdC5kZXNjcmlwdGlvbn19IiBkYXRhLWVsZW1lbnQ9InByb2R1Y3QuZGVzY3JpcHRpb24iPnt7e2RhdGEuZGVzY3JpcHRpb25IdG1sfX19PC9kaXY+JywKICAgIGJ1dHRvbjogYnV0dG9uVGVtcGxhdGUsCiAgICBxdWFudGl0eTogcXVhbnRpdHlUZW1wbGF0ZSwKICAgIGJ1dHRvbldpdGhRdWFudGl0eTogJzxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3QuYnV0dG9uV2l0aFF1YW50aXR5fX0iIGRhdGEtZWxlbWVudD0icHJvZHVjdC5idXR0b25XaXRoUXVhbnRpdHkiPicuY29uY2F0KHF1YW50aXR5VGVtcGxhdGUpLmNvbmNhdChidXR0b25UZW1wbGF0ZSwgIjwvZGl2PiIpCiAgfSwKICAgICAgY2FydFRlbXBsYXRlcywKICAgICAgb3B0aW9uVGVtcGxhdGVzLAogICAgICB0b2dnbGVUZW1wbGF0ZXMsCiAgICAgIGxpbmVJdGVtVGVtcGxhdGVzLAogICAgICBtb2RhbFRlbXBsYXRlcywKICAgICAgZGVmYXVsdHMgPSB7CiAgICBwcm9kdWN0OiB7CiAgICAgIGlmcmFtZTogITAsCiAgICAgIGJ1dHRvbkRlc3RpbmF0aW9uOiAiY2FydCIsCiAgICAgIGlzQnV0dG9uOiAhMSwKICAgICAgbGF5b3V0OiAidmVydGljYWwiLAogICAgICBtYW5pZmVzdDogWyJwcm9kdWN0IiwgIm9wdGlvbiJdLAogICAgICB3aWR0aDogIjI4MHB4IiwKICAgICAgb3JkZXI6IFsiaW1nIiwgImltZ1dpdGhDYXJvdXNlbCIsICJ0aXRsZSIsICJ2YXJpYW50VGl0bGUiLCAicHJpY2UiLCAib3B0aW9ucyIsICJxdWFudGl0eSIsICJidXR0b24iLCAiYnV0dG9uV2l0aFF1YW50aXR5IiwgImRlc2NyaXB0aW9uIl0sCiAgICAgIGNvbnRlbnRzOiB7CiAgICAgICAgaW1nOiAhMCwKICAgICAgICBpbWdXaXRoQ2Fyb3VzZWw6ICExLAogICAgICAgIHRpdGxlOiAhMCwKICAgICAgICB2YXJpYW50VGl0bGU6ICExLAogICAgICAgIHByaWNlOiAhMCwKICAgICAgICB1bml0UHJpY2U6ICEwLAogICAgICAgIG9wdGlvbnM6ICEwLAogICAgICAgIHF1YW50aXR5OiAhMSwKICAgICAgICBxdWFudGl0eUluY3JlbWVudDogITEsCiAgICAgICAgcXVhbnRpdHlEZWNyZW1lbnQ6ICExLAogICAgICAgIHF1YW50aXR5SW5wdXQ6ICEwLAogICAgICAgIGJ1dHRvbjogITAsCiAgICAgICAgYnV0dG9uV2l0aFF1YW50aXR5OiAhMSwKICAgICAgICBkZXNjcmlwdGlvbjogITEKICAgICAgfSwKICAgICAgdGVtcGxhdGVzOiBwcm9kdWN0VGVtcGxhdGUsCiAgICAgIGNsYXNzZXM6IHsKICAgICAgICB3cmFwcGVyOiAic2hvcGlmeS1idXlfX3Byb2R1Y3Qtd3JhcHBlciIsCiAgICAgICAgcHJvZHVjdDogInNob3BpZnktYnV5X19wcm9kdWN0IiwKICAgICAgICBpbWc6ICJzaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1pbWciLAogICAgICAgIGltZ1dyYXBwZXI6ICJzaG9waWZ5LWJ1eV9fcHJvZHVjdC1pbWctd3JhcHBlciIsCiAgICAgICAgY2Fyb3VzZWw6ICJzaG9waWZ5LWJ1eV9fY2Fyb3VzZWwiLAogICAgICAgIGNhcm91c2VsTmV4dDogImNhcm91c2VsLWJ1dHRvbi0tbmV4dCIsCiAgICAgICAgY2Fyb3VzZWxQcmV2aW91czogImNhcm91c2VsLWJ1dHRvbi0tcHJldmlvdXMiLAogICAgICAgIGNhcm91c2VsSXRlbTogInNob3BpZnktYnV5X19jYXJvdXNlbC1pdGVtIiwKICAgICAgICBjYXJvdXNlbEl0ZW1TZWxlY3RlZDogInNob3BpZnktYnV5X19jYXJvdXNlbC1pdGVtLS1zZWxlY3RlZCIsCiAgICAgICAgYmxvY2tCdXR0b246ICJzaG9waWZ5LWJ1eV9fYnRuLS1wYXJlbnQiLAogICAgICAgIGJ1dHRvbjogInNob3BpZnktYnV5X19idG4iLAogICAgICAgIGJ1dHRvbldyYXBwZXI6ICJzaG9waWZ5LWJ1eV9fYnRuLXdyYXBwZXIiLAogICAgICAgIHRpdGxlOiAic2hvcGlmeS1idXlfX3Byb2R1Y3RfX3RpdGxlIiwKICAgICAgICBwcmljZXM6ICJzaG9waWZ5LWJ1eV9fcHJvZHVjdF9fcHJpY2UiLAogICAgICAgIHByaWNlOiAic2hvcGlmeS1idXlfX3Byb2R1Y3RfX2FjdHVhbC1wcmljZSIsCiAgICAgICAgY29tcGFyZUF0OiAic2hvcGlmeS1idXlfX3Byb2R1Y3RfX2NvbXBhcmUtcHJpY2UiLAogICAgICAgIHVuaXRQcmljZTogInNob3BpZnktYnV5X19wcm9kdWN0X191bml0LXByaWNlIiwKICAgICAgICBsb3dlcmVkUHJpY2U6ICJzaG9waWZ5LWJ1eV9fcHJpY2UtLWxvd2VyZWQiLAogICAgICAgIHZhcmlhbnRUaXRsZTogInNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LXRpdGxlIiwKICAgICAgICBkZXNjcmlwdGlvbjogInNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIiwKICAgICAgICBvcHRpb25zOiAic2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtc2VsZWN0b3JzIiwKICAgICAgICBkaXNhYmxlZDogInNob3BpZnktYnV5X19idG4tZGlzYWJsZWQiLAogICAgICAgIGJ1dHRvbkJlc2lkZVF0eTogInNob3BpZnktYnV5X19iZXNpZGUtcXVhbnRpdHkiLAogICAgICAgIHF1YW50aXR5OiAic2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lciIsCiAgICAgICAgcXVhbnRpdHlJbnB1dDogInNob3BpZnktYnV5X19xdWFudGl0eSIsCiAgICAgICAgcXVhbnRpdHlCdXR0b246ICJzaG9waWZ5LWJ1eV9fYnRuLS1zZWFtbGVzcyIsCiAgICAgICAgcXVhbnRpdHlJbmNyZW1lbnQ6ICJzaG9waWZ5LWJ1eV9fcXVhbnRpdHktaW5jcmVtZW50IiwKICAgICAgICBxdWFudGl0eURlY3JlbWVudDogInNob3BpZnktYnV5X19xdWFudGl0eS1kZWNyZW1lbnQiLAogICAgICAgIGJ1dHRvbldpdGhRdWFudGl0eTogInNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IiwKICAgICAgICBxdWFudGl0eVdpdGhCdXR0b25zOiAic2hvcGlmeS1idXlfX3F1YW50aXR5LXdpdGgtYnRucyIsCiAgICAgICAgdmVydGljYWw6ICJzaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIiwKICAgICAgICBob3Jpem9udGFsOiAic2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIgogICAgICB9LAogICAgICB0ZXh0OiB7CiAgICAgICAgYnV0dG9uOiAiQUREIFRPIENBUlQiLAogICAgICAgIG91dE9mU3RvY2s6ICJPdXQgb2Ygc3RvY2siLAogICAgICAgIHVuYXZhaWxhYmxlOiAiVW5hdmFpbGFibGUiLAogICAgICAgIHVuaXRQcmljZUFjY2Vzc2liaWxpdHlMYWJlbDogIlVuaXQgcHJpY2UiLAogICAgICAgIHVuaXRQcmljZUFjY2Vzc2liaWxpdHlTZXBhcmF0b3I6ICJwZXIiCiAgICAgIH0KICAgIH0sCiAgICBtb2RhbFByb2R1Y3Q6IHsKICAgICAgaWZyYW1lOiAhMSwKICAgICAgbGF5b3V0OiAiaG9yaXpvbnRhbCIsCiAgICAgIGNvbnRlbnRzOiB7CiAgICAgICAgaW1nOiAhMCwKICAgICAgICBpbWdXaXRoQ2Fyb3VzZWw6ICExLAogICAgICAgIHRpdGxlOiAhMCwKICAgICAgICB2YXJpYW50VGl0bGU6ICExLAogICAgICAgIHByaWNlOiAhMCwKICAgICAgICB1bml0UHJpY2U6ICEwLAogICAgICAgIG9wdGlvbnM6ICEwLAogICAgICAgIGJ1dHRvbjogITAsCiAgICAgICAgYnV0dG9uV2l0aFF1YW50aXR5OiAhMSwKICAgICAgICBxdWFudGl0eTogITEsCiAgICAgICAgcXVhbnRpdHlJbmNyZW1lbnQ6ICExLAogICAgICAgIHF1YW50aXR5RGVjcmVtZW50OiAhMSwKICAgICAgICBkZXNjcmlwdGlvbjogITAKICAgICAgfSwKICAgICAgb3JkZXI6IFsiaW1nIiwgImltZ1dpdGhDYXJvdXNlbCIsICJ0aXRsZSIsICJ2YXJpYW50VGl0bGUiLCAicHJpY2UiLCAib3B0aW9ucyIsICJidXR0b25XaXRoUXVhbnRpdHkiLCAiYnV0dG9uIiwgImRlc2NyaXB0aW9uIl0sCiAgICAgIGNsYXNzZXM6IHsKICAgICAgICB3cmFwcGVyOiAic2hvcGlmeS1idXlfX21vZGFsLXByb2R1Y3Qtd3JhcHBlciIsCiAgICAgICAgaGFzSW1hZ2U6ICJoYXMtaW1hZ2UiCiAgICAgIH0sCiAgICAgIGJ1dHRvbkRlc3RpbmF0aW9uOiAiY2FydCIsCiAgICAgIHRleHQ6IHsKICAgICAgICBidXR0b246ICJBREQgVE8gQ0FSVCIKICAgICAgfQogICAgfSwKICAgIG1vZGFsOiB7CiAgICAgIGlmcmFtZTogITAsCiAgICAgIG1hbmlmZXN0OiBbIm1vZGFsIiwgInByb2R1Y3QiLCAib3B0aW9uIl0sCiAgICAgIGNsYXNzZXM6IHsKICAgICAgICBvdmVybGF5OiAic2hvcGlmeS1idXlfX21vZGFsLW92ZXJsYXkiLAogICAgICAgIG1vZGFsOiAic2hvcGlmeS1idXlfX21vZGFsIiwKICAgICAgICBjb250ZW50czogInNob3BpZnktYnV5X19tb2RhbC1jb250ZW50cyIsCiAgICAgICAgY2xvc2U6ICJzaG9waWZ5LWJ1eV9fYnRuLS1jbG9zZSIsCiAgICAgICAgd3JhcHBlcjogInNob3BpZnktYnV5X19tb2RhbC13cmFwcGVyIiwKICAgICAgICBwcm9kdWN0OiAic2hvcGlmeS1idXlfX3Byb2R1Y3QtbW9kYWwiLAogICAgICAgIGltZzogInNob3BpZnktYnV5X19tb2RhbC1pbWciLAogICAgICAgIGltZ1dpdGhDYXJvdXNlbDogInNob3BpZnktYnV5X19tb2RhbC1pbWciLAogICAgICAgIGZvb3RlcjogInNob3BpZnktYnV5X19tb2RhbC1mb290ZXIiLAogICAgICAgIGZvb3RlcldpdGhJbWc6ICJzaG9waWZ5LWJ1eV9fbW9kYWwtZm9vdGVyLS1oYXMtaW1nIiwKICAgICAgICBpbWdXaXRoSW1nOiAic2hvcGlmeS1idXlfX21vZGFsLWltZy0taGFzLWltZyIsCiAgICAgICAgY29udGVudHNXaXRoSW1nOiAic2hvcGlmeS1idXlfX21vZGFsLWNvbnRlbnRzLS1oYXMtaW1nIiwKICAgICAgICBzY3JvbGxDb250ZW50czogInNob3BpZnktYnV5X19tb2RhbC1zY3JvbGwtY29udGVudHMiCiAgICAgIH0sCiAgICAgIGNvbnRlbnRzOiB7CiAgICAgICAgY29udGVudHM6ICEwCiAgICAgIH0sCiAgICAgIG9yZGVyOiBbImNvbnRlbnRzIl0sCiAgICAgIHRlbXBsYXRlczogewogICAgICAgIGNvbnRlbnRzOiAnXG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLm1vZGFsLmNsb3NlfX0iIGRhdGEtZWxlbWVudD0ibW9kYWwuY2xvc2UiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtcm9sZT0iaGlkZGVuIj4mdGltZXM7PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseWhpZGRlbiI+Q2xvc2U8L3NwYW4+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgJwogICAgICB9CiAgICB9LAogICAgcHJvZHVjdFNldDogewogICAgICBpZnJhbWU6ICEwLAogICAgICBtYW5pZmVzdDogWyJwcm9kdWN0IiwgIm9wdGlvbiIsICJwcm9kdWN0U2V0Il0sCiAgICAgIGNvbnRlbnRzOiB7CiAgICAgICAgdGl0bGU6ICExLAogICAgICAgIHByb2R1Y3RzOiAhMCwKICAgICAgICBwYWdpbmF0aW9uOiAhMAogICAgICB9LAogICAgICBvcmRlcjogWyJ0aXRsZSIsICJwcm9kdWN0cyIsICJwYWdpbmF0aW9uIl0sCiAgICAgIHRlbXBsYXRlczogewogICAgICAgIHRpdGxlOiAnPGgyIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0U2V0LnRpdGxlfX0iPnt7ZGF0YS5jb2xsZWN0aW9uLmF0dHJzLnRpdGxlfX08L2gyPicsCiAgICAgICAgcHJvZHVjdHM6ICc8ZGl2IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5wcm9kdWN0U2V0LnByb2R1Y3RzfX0iPjwvZGl2PicsCiAgICAgICAgcGFnaW5hdGlvbjogJzxidXR0b24gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnByb2R1Y3RTZXQucGFnaW5hdGlvbkJ1dHRvbn19IHt7ZGF0YS5uZXh0QnV0dG9uQ2xhc3N9fSI+e3tkYXRhLnRleHQubmV4dFBhZ2VCdXR0b259fTwvYnV0dG9uPicKICAgICAgfSwKICAgICAgY2xhc3NlczogewogICAgICAgIHdyYXBwZXI6ICJzaG9waWZ5LWJ1eV9fY29sbGVjdGlvbi13cmFwcGVyIiwKICAgICAgICBwcm9kdWN0U2V0OiAic2hvcGlmeS1idXlfX2NvbGxlY3Rpb24iLAogICAgICAgIHRpdGxlOiAic2hvcGlmeS1idXlfX2NvbGxlY3Rpb25fX3RpdGxlIiwKICAgICAgICBjb2xsZWN0aW9uOiAic2hvcGlmeS1idXlfX2NvbGxlY3Rpb24iLAogICAgICAgIHByb2R1Y3RzOiAic2hvcGlmeS1idXlfX2NvbGxlY3Rpb24tcHJvZHVjdHMiLAogICAgICAgIHByb2R1Y3Q6ICJzaG9waWZ5LWJ1eV9fY29sbGVjdGlvbi1wcm9kdWN0IiwKICAgICAgICBwYWdpbmF0aW9uQnV0dG9uOiAic2hvcGlmeS1idXlfX2NvbGxlY3Rpb24tcGFnaW5hdGlvbi1idXR0b24gc2hvcGlmeS1idXlfX2J0biIKICAgICAgfSwKICAgICAgdGV4dDogewogICAgICAgIG5leHRQYWdlQnV0dG9uOiAiTmV4dCBwYWdlIgogICAgICB9CiAgICB9LAogICAgb3B0aW9uOiB7CiAgICAgIHRlbXBsYXRlczogewogICAgICAgIG9wdGlvbjogJzxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLm9wdGlvbi5vcHRpb259fSIgZGF0YS1lbGVtZW50PSJvcHRpb24ub3B0aW9uIj5cbiAgICA8bGFiZWwgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLm9wdGlvbi5sYWJlbH19IHt7I2RhdGEub25seU9wdGlvbn19e3tkYXRhLmNsYXNzZXMub3B0aW9uLmhpZGRlbkxhYmVsfX17ey9kYXRhLm9ubHlPcHRpb259fSIgZGF0YS1lbGVtZW50PSJvcHRpb24ubGFiZWwiPnt7ZGF0YS5uYW1lfX08L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMub3B0aW9uLndyYXBwZXJ9fSIgZGF0YS1lbGVtZW50PSJvcHRpb24ud3JhcHBlciI+XG4gICAgICA8c2VsZWN0IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5vcHRpb24uc2VsZWN0fX0iIG5hbWU9Int7ZGF0YS5uYW1lfX0iIGRhdGEtZWxlbWVudD0ib3B0aW9uLnNlbGVjdCI+XG4gICAgICAgIHt7I2RhdGEudmFsdWVzfX1cbiAgICAgICAgICA8b3B0aW9uIHt7I3NlbGVjdGVkfX1zZWxlY3RlZHt7L3NlbGVjdGVkfX0gdmFsdWU9Int7bmFtZX19Ij57e25hbWV9fTwvb3B0aW9uPlxuICAgICAgICB7ey9kYXRhLnZhbHVlc319XG4gICAgICA8L3NlbGVjdD5cbiAgICAgIDxzdmcgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLm9wdGlvbi5zZWxlY3RJY29ufX0iIGRhdGEtZWxlbWVudD0ib3B0aW9uLnNlbGVjdEljb24iIHZpZXdCb3g9IjAgMCAyNCAyNCI+PHBhdGggZD0iTTIxIDUuMTc2bC05LjA4NiA5LjM1M0wzIDUuMTc2LjY4NiA3LjY0NyAxMiAxOS4zODIgMjMuMzE0IDcuNjQ3IDIxIDUuMTc2eiI+PC9wYXRoPjwvc3ZnPlxuICAgIDwvZGl2PlxuICA8L2Rpdj4nCiAgICAgIH0sCiAgICAgIGNvbnRlbnRzOiB7CiAgICAgICAgb3B0aW9uOiAhMAogICAgICB9LAogICAgICBvcmRlcjogWyJvcHRpb24iXSwKICAgICAgY2xhc3NlczogewogICAgICAgIG9wdGlvbjogInNob3BpZnktYnV5X19vcHRpb24tc2VsZWN0IiwKICAgICAgICB3cmFwcGVyOiAic2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3Qtd3JhcHBlciIsCiAgICAgICAgc2VsZWN0OiAic2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3RfX3NlbGVjdCIsCiAgICAgICAgbGFiZWw6ICJzaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdF9fbGFiZWwiLAogICAgICAgIG9wdGlvbkRpc2FibGVkOiAic2hvcGlmeS1idXlfX29wdGlvbi0tZGlzYWJsZWQiLAogICAgICAgIG9wdGlvblNlbGVjdGVkOiAic2hvcGlmeS1idXlfX29wdGlvbi0tc2VsZWN0ZWQiLAogICAgICAgIHNlbGVjdEljb246ICJzaG9waWZ5LWJ1eV9fc2VsZWN0LWljb24iLAogICAgICAgIGhpZGRlbkxhYmVsOiAidmlzdWFsbHloaWRkZW4iCiAgICAgIH0KICAgIH0sCiAgICBjYXJ0OiB7CiAgICAgIGlmcmFtZTogITAsCiAgICAgIHRlbXBsYXRlczogewogICAgICAgIHRpdGxlOiAnPGRpdiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMuY2FydC5oZWFkZXJ9fSIgZGF0YS1lbGVtZW50PSJjYXJ0LmhlYWRlciI+XG4gICAgICAgICAgICA8aDIgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmNhcnQudGl0bGV9fSIgZGF0YS1lbGVtZW50PSJjYXJ0LnRpdGxlIj57e2RhdGEudGV4dC50aXRsZX19PC9oMj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmNhcnQuY2xvc2V9fSIgZGF0YS1lbGVtZW50PSJjYXJ0LmNsb3NlIj5cbiAgICAgICAgICAgICAgPHNwYW4gYXJpYS1yb2xlPSJoaWRkZW4iPiZ0aW1lczs8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseWhpZGRlbiI+Q2xvc2U8L3NwYW4+XG4gICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+JywKICAgICAgICBsaW5lSXRlbXM6ICc8ZGl2IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5jYXJ0LmNhcnRTY3JvbGx9fXt7I2RhdGEuY29udGVudHMubm90ZX19IHt7ZGF0YS5jbGFzc2VzLmNhcnQuY2FydFNjcm9sbFdpdGhDYXJ0Tm90ZX19e3svZGF0YS5jb250ZW50cy5ub3RlfX17eyNkYXRhLmRpc2NvdW50c319IHt7ZGF0YS5jbGFzc2VzLmNhcnQuY2FydFNjcm9sbFdpdGhEaXNjb3VudHN9fXt7L2RhdGEuZGlzY291bnRzfX0iIGRhdGEtZWxlbWVudD0iY2FydC5jYXJ0U2Nyb2xsIj5cbiAgICAgICAgICAgICAgICB7eyNkYXRhLmlzRW1wdHl9fTxwIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5jYXJ0LmVtcHR5fX0ge3tkYXRhLmNsYXNzZXMuY2FydC5lbXB0eUNhcnR9fSIgZGF0YS1lbGVtZW50PSJjYXJ0LmVtcHR5Ij57e2RhdGEudGV4dC5lbXB0eX19PC9wPnt7L2RhdGEuaXNFbXB0eX19XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMuY2FydC5saW5lSXRlbXN9fSIgZGF0YS1lbGVtZW50PSJjYXJ0LmxpbmVJdGVtcyI+e3t7ZGF0YS5saW5lSXRlbXNIdG1sfX19PC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PicsCiAgICAgICAgZm9vdGVyOiAne3teZGF0YS5pc0VtcHR5fX1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmNhcnQuZm9vdGVyfX0iIGRhdGEtZWxlbWVudD0iY2FydC5mb290ZXIiPlxuICAgICAgICAgICAgICB7eyNkYXRhLmRpc2NvdW50c319XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMuY2FydC5kaXNjb3VudH19IiBkYXRhLWVsZW1lbnQ9ImNhcnQuZGlzY291bnQiPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmNhcnQuZGlzY291bnRUZXh0fX0iIGRhdGEtZWxlbWVudD0iY2FydC5kaXNjb3VudFRleHQiPlxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDEyIDEyIiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMuY2FydC5kaXNjb3VudEljb259fSIgZGF0YS1lbGVtZW50PSJjYXJ0LmRpc2NvdW50SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPlxuICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xMC4wMDEgMi45OTg1NkM5LjgwMzI3IDIuOTk4NTYgOS42MTAwMiAyLjkzOTk0IDkuNDQ1NjUgMi44MzAxMUM5LjI4MTI4IDIuNzIwMjkgOS4xNTMxNyAyLjU2NDE4IDkuMDc3NTIgMi4zODE1NUM5LjAwMTg3IDIuMTk4OTEgOC45ODIwNyAxLjk5Nzk0IDkuMDIwNjQgMS44MDQwNUM5LjA1OTIxIDEuNjEwMTYgOS4xNTQ0IDEuNDMyMDcgOS4yOTQxOSAxLjI5MjI4QzkuNDMzOTcgMS4xNTI1IDkuNjEyMDcgMS4wNTczIDkuODA1OTYgMS4wMTg3NEM5Ljk5OTg0IDAuOTgwMTcxIDEwLjIwMDggMC45OTk5NjUgMTAuMzgzNCAxLjA3NTYyQzEwLjU2NjEgMS4xNTEyNyAxMC43MjIyIDEuMjc5MzggMTAuODMyIDEuNDQzNzVDMTAuOTQxOCAxLjYwODEyIDExLjAwMDUgMS44MDEzNiAxMS4wMDA1IDEuOTk5MDVDMTEuMDAwNSAyLjI2NDE0IDEwLjg5NTIgMi41MTgzNyAxMC43MDc3IDIuNzA1ODFDMTAuNTIwMyAyLjg5MzI2IDEwLjI2NiAyLjk5ODU2IDEwLjAwMSAyLjk5ODU2Wk0xMC4wMDEgMS42NzA2MmUtMDVINy4wMDI0QzYuODcwODYgLTAuMDAwNzQzODE4IDYuNzQwNDYgMC4wMjQ0NjkgNi42MTg2OCAwLjA3NDIwOTVDNi40OTY5MSAwLjEyMzk1IDYuMzg2MTQgMC4xOTcyNCA2LjI5Mjc1IDAuMjg5ODc2TDAuMjk1NjU1IDYuMjg2OTdDMC4yMDE5NzIgNi4zNzk4OSAwLjEyNzYxNCA2LjQ5MDQ0IDAuMDc2ODY5NyA2LjYxMjI0QzAuMDI2MTI1NiA2LjczNDA0IDAgNi44NjQ2OCAwIDYuOTk2NjNDMCA3LjEyODU3IDAuMDI2MTI1NiA3LjI1OTIyIDAuMDc2ODY5NyA3LjM4MTAyQzAuMTI3NjE0IDcuNTAyODIgMC4yMDE5NzIgNy42MTMzNiAwLjI5NTY1NSA3LjcwNjI4TDQuMjkzNzIgMTEuNzA0M0M0LjM4NjY0IDExLjc5OCA0LjQ5NzE4IDExLjg3MjQgNC42MTg5OCAxMS45MjMxQzQuNzQwNzggMTEuOTczOSA0Ljg3MTQzIDEyIDUuMDAzMzcgMTJDNS4xMzUzMiAxMiA1LjI2NTk2IDExLjk3MzkgNS4zODc3NiAxMS45MjMxQzUuNTA5NTYgMTEuODcyNCA1LjYyMDExIDExLjc5OCA1LjcxMzAzIDExLjcwNDNDNS45MDI5NCAxMS41MDQ0IDExLjUxMDIgNS44OTcxNiAxMS43MTAxIDUuNzA3MjVDMTEuODAyOCA1LjYxMzg2IDExLjg3NiA1LjUwMzA5IDExLjkyNTggNS4zODEzMkMxMS45NzU1IDUuMjU5NTQgMTIuMDAwNyA1LjEyOTE0IDEyIDQuOTk3NTlWMS45OTkwNUMxMiAxLjQ2ODg3IDExLjc4OTQgMC45NjA0MSAxMS40MTQ1IDAuNTg1NTE5QzExLjAzOTYgMC4yMTA2MjggMTAuNTMxMSAxLjY3MDYyZS0wNSAxMC4wMDEgMS42NzA2MmUtMDVaIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5aGlkZGVuIj5EaXNjb3VudDo8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIHt7dGV4dH19XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMuY2FydC5kaXNjb3VudEFtb3VudH19IiBkYXRhLWVsZW1lbnQ9ImNhcnQuZGlzY291bnRBbW91bnQiPnt7YW1vdW50fX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIHt7L2RhdGEuZGlzY291bnRzfX1cbiAgICAgICAgICAgICAgPHAgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmNhcnQuc3VidG90YWxUZXh0fX0iIGRhdGEtZWxlbWVudD0iY2FydC50b3RhbCI+e3tkYXRhLnRleHQudG90YWx9fTwvcD5cbiAgICAgICAgICAgICAgPHAgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmNhcnQuc3VidG90YWx9fSIgZGF0YS1lbGVtZW50PSJjYXJ0LnN1YnRvdGFsIj57e2RhdGEuZm9ybWF0dGVkVG90YWx9fTwvcD5cbiAgICAgICAgICAgICAge3sjZGF0YS5jb250ZW50cy5ub3RlfX1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5jYXJ0Lm5vdGV9fSIgZGF0YS1lbGVtZW50PSJjYXJ0Lm5vdGUiPlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmNhcnQubm90ZURlc2NyaXB0aW9ufX0iIGRhdGEtZWxlbWVudD0iY2FydC5ub3RlRGVzY3JpcHRpb24iPnt7ZGF0YS50ZXh0Lm5vdGVEZXNjcmlwdGlvbn19PC9wPlxuICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5jYXJ0Lm5vdGVUZXh0QXJlYX19IiBkYXRhLWVsZW1lbnQ9ImNhcnQubm90ZVRleHRBcmVhIiByb3dzPSIzIi8+e3tkYXRhLmNhcnROb3RlfX08L3RleHRhcmVhPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB7ey9kYXRhLmNvbnRlbnRzLm5vdGV9fVxuICAgICAgICAgICAgICA8cCBjbGFzcz0ie3tkYXRhLmNsYXNzZXMuY2FydC5ub3RpY2V9fSIgZGF0YS1lbGVtZW50PSJjYXJ0Lm5vdGljZSI+e3tkYXRhLnRleHQubm90aWNlfX08L3A+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmNhcnQuYnV0dG9ufX0iIHR5cGU9ImJ1dHRvbiIgZGF0YS1lbGVtZW50PSJjYXJ0LmJ1dHRvbiI+e3tkYXRhLnRleHQuYnV0dG9ufX08L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICB7ey9kYXRhLmlzRW1wdHl9fScKICAgICAgfSwKICAgICAgc3RhcnRPcGVuOiAhMSwKICAgICAgcG9wdXA6ICExLAogICAgICBtYW5pZmVzdDogWyJjYXJ0IiwgImxpbmVJdGVtIiwgInRvZ2dsZSJdLAogICAgICBjb250ZW50czogewogICAgICAgIHRpdGxlOiAhMCwKICAgICAgICBsaW5lSXRlbXM6ICEwLAogICAgICAgIGZvb3RlcjogITAsCiAgICAgICAgbm90ZTogITEsCiAgICAgICAgZGlzY291bnRzOiAhMAogICAgICB9LAogICAgICBvcmRlcjogWyJ0aXRsZSIsICJsaW5lSXRlbXMiLCAiZm9vdGVyIl0sCiAgICAgIGNsYXNzZXM6IHsKICAgICAgICB3cmFwcGVyOiAic2hvcGlmeS1idXlfX2NhcnQtd3JhcHBlciIsCiAgICAgICAgY2FydDogInNob3BpZnktYnV5X19jYXJ0IiwKICAgICAgICBoZWFkZXI6ICJzaG9waWZ5LWJ1eV9fY2FydF9faGVhZGVyIiwKICAgICAgICB0aXRsZTogInNob3BpZnktYnV5X19jYXJ0X190aXRsZSIsCiAgICAgICAgbGluZUl0ZW1zOiAic2hvcGlmeS1idXlfX2NhcnQtaXRlbXMiLAogICAgICAgIGZvb3RlcjogInNob3BpZnktYnV5X19jYXJ0LWJvdHRvbSIsCiAgICAgICAgZGlzY291bnQ6ICJzaG9waWZ5LWJ1eV9fY2FydF9fZGlzY291bnQiLAogICAgICAgIGRpc2NvdW50VGV4dDogInNob3BpZnktYnV5X19jYXJ0X19kaXNjb3VudF9fdGV4dCIsCiAgICAgICAgZGlzY291bnRJY29uOiAic2hvcGlmeS1idXlfX2NhcnRfX2Rpc2NvdW50X190ZXh0X19pY29uIiwKICAgICAgICBkaXNjb3VudEFtb3VudDogInNob3BpZnktYnV5X19jYXJ0X19kaXNjb3VudF9fYW1vdW50IiwKICAgICAgICBzdWJ0b3RhbFRleHQ6ICJzaG9waWZ5LWJ1eV9fY2FydF9fc3VidG90YWxfX3RleHQiLAogICAgICAgIHN1YnRvdGFsOiAic2hvcGlmeS1idXlfX2NhcnRfX3N1YnRvdGFsX19wcmljZSIsCiAgICAgICAgbm90aWNlOiAic2hvcGlmeS1idXlfX2NhcnRfX25vdGljZSIsCiAgICAgICAgY3VycmVuY3k6ICJzaG9waWZ5LWJ1eV9fY2FydF9fY3VycmVuY3kiLAogICAgICAgIGJ1dHRvbjogInNob3BpZnktYnV5X19idG4gc2hvcGlmeS1idXlfX2J0bi0tY2FydC1jaGVja291dCIsCiAgICAgICAgY2xvc2U6ICJzaG9waWZ5LWJ1eV9fYnRuLS1jbG9zZSIsCiAgICAgICAgY2FydFNjcm9sbDogInNob3BpZnktYnV5X19jYXJ0LXNjcm9sbCIsCiAgICAgICAgY2FydFNjcm9sbFdpdGhEaXNjb3VudHM6ICJzaG9waWZ5LWJ1eV9fY2FydC1zY3JvbGwtLWRpc2NvdW50cyIsCiAgICAgICAgY2FydFNjcm9sbFdpdGhDYXJ0Tm90ZTogInNob3BpZnktYnV5X19jYXJ0LXNjcm9sbC0tY2FydC1ub3RlIiwKICAgICAgICBlbXB0eTogInNob3BpZnktYnV5X19jYXJ0LWVtcHR5LXRleHQiLAogICAgICAgIG5vdGU6ICJzaG9waWZ5LWJ1eV9fY2FydF9fbm90ZSIsCiAgICAgICAgbm90ZURlc2NyaXB0aW9uOiAic2hvcGlmeS1idXlfX2NhcnRfX25vdGVfX2Rlc2NyaXB0aW9uIiwKICAgICAgICBub3RlVGV4dEFyZWE6ICJzaG9waWZ5LWJ1eV9fY2FydF9fbm90ZV9fdGV4dC1hcmVhIgogICAgICB9LAogICAgICB0ZXh0OiB7CiAgICAgICAgdGl0bGU6ICJDYXJ0IiwKICAgICAgICBlbXB0eTogIllvdXIgY2FydCBpcyBlbXB0eS4iLAogICAgICAgIGJ1dHRvbjogIkNIRUNLT1VUIiwKICAgICAgICB0b3RhbDogIlNVQlRPVEFMIiwKICAgICAgICBjdXJyZW5jeTogIkNBRCIsCiAgICAgICAgbm90aWNlOiAiU2hpcHBpbmcgYW5kIGRpc2NvdW50IGNvZGVzIGFyZSBhZGRlZCBhdCBjaGVja291dC4iLAogICAgICAgIG5vdGVEZXNjcmlwdGlvbjogIlNwZWNpYWwgaW5zdHJ1Y3Rpb25zIGZvciBzZWxsZXIiCiAgICAgIH0KICAgIH0sCiAgICBsaW5lSXRlbTogewogICAgICB0ZW1wbGF0ZXM6IHsKICAgICAgICBpbWFnZTogJzxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmxpbmVJdGVtLmltYWdlfX0iIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoe3tkYXRhLmxpbmVJdGVtSW1hZ2V9fSkiIGRhdGEtZWxlbWVudD0ibGluZUl0ZW0uaW1hZ2UiPjwvZGl2PicsCiAgICAgICAgdmFyaWFudFRpdGxlOiAnPGRpdiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMubGluZUl0ZW0udmFyaWFudFRpdGxlfX0iIGRhdGEtZWxlbWVudD0ibGluZUl0ZW0udmFyaWFudFRpdGxlIj57e2RhdGEudmFyaWFudFRpdGxlfX08L2Rpdj4nLAogICAgICAgIHRpdGxlOiAnPHNwYW4gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmxpbmVJdGVtLml0ZW1UaXRsZX19IiBkYXRhLWVsZW1lbnQ9ImxpbmVJdGVtLml0ZW1UaXRsZSI+e3tkYXRhLnRpdGxlfX08L3NwYW4+JywKICAgICAgICBwcmljZTogJzxzcGFuIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5saW5lSXRlbS5wcmljZX19IiBkYXRhLWVsZW1lbnQ9ImxpbmVJdGVtLnByaWNlIj57e2RhdGEuZm9ybWF0dGVkUHJpY2V9fTwvc3Bhbj4nLAogICAgICAgIHByaWNlV2l0aERpc2NvdW50czogJzxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmxpbmVJdGVtLnByaWNlV2l0aERpc2NvdW50c319IiBkYXRhLWVsZW1lbnQ9ImxpbmVJdGVtLnByaWNlIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7I2RhdGEuZm9ybWF0dGVkRnVsbFByaWNlfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5aGlkZGVuIj5SZWd1bGFyIHByaWNlPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVsIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5saW5lSXRlbS5mdWxsUHJpY2V9fSIgZGF0YS1lbGVtZW50PSJsaW5lSXRlbS5mdWxsUHJpY2UiPnt7ZGF0YS5mb3JtYXR0ZWRGdWxsUHJpY2V9fTwvZGVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPlNhbGUgcHJpY2U8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ey9kYXRhLmZvcm1hdHRlZEZ1bGxQcmljZX19XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5saW5lSXRlbS5wcmljZX19IiBkYXRhLWVsZW1lbnQ9ImxpbmVJdGVtLnByaWNlIj57e2RhdGEuZm9ybWF0dGVkQWN0dWFsUHJpY2V9fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAge3sjZGF0YS5kaXNjb3VudHN9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5saW5lSXRlbS5kaXNjb3VudH19IiBkYXRhLWVsZW1lbnQ9ImxpbmVJdGVtLmRpc2NvdW50Ij5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDEyIDEyIiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMubGluZUl0ZW0uZGlzY291bnRJY29ufX0iIGRhdGEtZWxlbWVudD0ibGluZUl0ZW0uZGlzY291bnRJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMTAuMDAxIDIuOTk4NTZDOS44MDMyNyAyLjk5ODU2IDkuNjEwMDIgMi45Mzk5NCA5LjQ0NTY1IDIuODMwMTFDOS4yODEyOCAyLjcyMDI5IDkuMTUzMTcgMi41NjQxOCA5LjA3NzUyIDIuMzgxNTVDOS4wMDE4NyAyLjE5ODkxIDguOTgyMDcgMS45OTc5NCA5LjAyMDY0IDEuODA0MDVDOS4wNTkyMSAxLjYxMDE2IDkuMTU0NCAxLjQzMjA3IDkuMjk0MTkgMS4yOTIyOEM5LjQzMzk3IDEuMTUyNSA5LjYxMjA3IDEuMDU3MyA5LjgwNTk2IDEuMDE4NzRDOS45OTk4NCAwLjk4MDE3MSAxMC4yMDA4IDAuOTk5OTY1IDEwLjM4MzQgMS4wNzU2MkMxMC41NjYxIDEuMTUxMjcgMTAuNzIyMiAxLjI3OTM4IDEwLjgzMiAxLjQ0Mzc1QzEwLjk0MTggMS42MDgxMiAxMS4wMDA1IDEuODAxMzYgMTEuMDAwNSAxLjk5OTA1QzExLjAwMDUgMi4yNjQxNCAxMC44OTUyIDIuNTE4MzcgMTAuNzA3NyAyLjcwNTgxQzEwLjUyMDMgMi44OTMyNiAxMC4yNjYgMi45OTg1NiAxMC4wMDEgMi45OTg1NlpNMTAuMDAxIDEuNjcwNjJlLTA1SDcuMDAyNEM2Ljg3MDg2IC0wLjAwMDc0MzgxOCA2Ljc0MDQ2IDAuMDI0NDY5IDYuNjE4NjggMC4wNzQyMDk1QzYuNDk2OTEgMC4xMjM5NSA2LjM4NjE0IDAuMTk3MjQgNi4yOTI3NSAwLjI4OTg3NkwwLjI5NTY1NSA2LjI4Njk3QzAuMjAxOTcyIDYuMzc5ODkgMC4xMjc2MTQgNi40OTA0NCAwLjA3Njg2OTcgNi42MTIyNEMwLjAyNjEyNTYgNi43MzQwNCAwIDYuODY0NjggMCA2Ljk5NjYzQzAgNy4xMjg1NyAwLjAyNjEyNTYgNy4yNTkyMiAwLjA3Njg2OTcgNy4zODEwMkMwLjEyNzYxNCA3LjUwMjgyIDAuMjAxOTcyIDcuNjEzMzYgMC4yOTU2NTUgNy43MDYyOEw0LjI5MzcyIDExLjcwNDNDNC4zODY2NCAxMS43OTggNC40OTcxOCAxMS44NzI0IDQuNjE4OTggMTEuOTIzMUM0Ljc0MDc4IDExLjk3MzkgNC44NzE0MyAxMiA1LjAwMzM3IDEyQzUuMTM1MzIgMTIgNS4yNjU5NiAxMS45NzM5IDUuMzg3NzYgMTEuOTIzMUM1LjUwOTU2IDExLjg3MjQgNS42MjAxMSAxMS43OTggNS43MTMwMyAxMS43MDQzQzUuOTAyOTQgMTEuNTA0NCAxMS41MTAyIDUuODk3MTYgMTEuNzEwMSA1LjcwNzI1QzExLjgwMjggNS42MTM4NiAxMS44NzYgNS41MDMwOSAxMS45MjU4IDUuMzgxMzJDMTEuOTc1NSA1LjI1OTU0IDEyLjAwMDcgNS4xMjkxNCAxMiA0Ljk5NzU5VjEuOTk5MDVDMTIgMS40Njg4NyAxMS43ODk0IDAuOTYwNDEgMTEuNDE0NSAwLjU4NTUxOUMxMS4wMzk2IDAuMjEwNjI4IDEwLjUzMTEgMS42NzA2MmUtMDUgMTAuMDAxIDEuNjcwNjJlLTA1WiIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPkRpc2NvdW50Ojwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e2Rpc2NvdW50fX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ey9kYXRhLmRpc2NvdW50c319XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JywKICAgICAgICBxdWFudGl0eTogJzxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmxpbmVJdGVtLnF1YW50aXR5fX0iIGRhdGEtZWxlbWVudD0ibGluZUl0ZW0ucXVhbnRpdHkiPlxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5saW5lSXRlbS5xdWFudGl0eUJ1dHRvbn19IHt7ZGF0YS5jbGFzc2VzLmxpbmVJdGVtLnF1YW50aXR5RGVjcmVtZW50fX0iIHR5cGU9ImJ1dHRvbiIgZGF0YS1saW5lLWl0ZW0taWQ9Int7ZGF0YS5pZH19IiBkYXRhLWVsZW1lbnQ9ImxpbmVJdGVtLnF1YW50aXR5RGVjcmVtZW50Ij5cbiAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDE2IDE2Ij48cGF0aCBkPSJNNCA3aDh2Mkg0eiIvPjwvc3ZnPjxzcGFuIGNsYXNzPSJ2aXN1YWxseWhpZGRlbiI+RGVjcmVtZW50PC9zcGFuPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy5saW5lSXRlbS5xdWFudGl0eUlucHV0fX0iIHR5cGU9Im51bWJlciIgbWluPSIwIiBhcmlhLWxhYmVsPSJRdWFudGl0eSIgZGF0YS1saW5lLWl0ZW0taWQ9Int7ZGF0YS5pZH19IiB2YWx1ZT0ie3tkYXRhLnF1YW50aXR5fX0iIGRhdGEtZWxlbWVudD0ibGluZUl0ZW0ucXVhbnRpdHlJbnB1dCI+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Int7ZGF0YS5jbGFzc2VzLmxpbmVJdGVtLnF1YW50aXR5QnV0dG9ufX0ge3tkYXRhLmNsYXNzZXMubGluZUl0ZW0ucXVhbnRpdHlJbmNyZW1lbnR9fSIgdHlwZT0iYnV0dG9uIiBkYXRhLWxpbmUtaXRlbS1pZD0ie3tkYXRhLmlkfX0iIGRhdGEtZWxlbWVudD0ibGluZUl0ZW0ucXVhbnRpdHlJbmNyZW1lbnQiPlxuICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMTYgMTYiPjxwYXRoIGQ9Ik0xMiA3SDlWNEg3djNINHYyaDN2M2gyVjloM3oiLz48L3N2Zz48c3BhbiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPkluY3JlbWVudDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj4nCiAgICAgIH0sCiAgICAgIGNvbnRlbnRzOiB7CiAgICAgICAgaW1hZ2U6ICEwLAogICAgICAgIHZhcmlhbnRUaXRsZTogITAsCiAgICAgICAgdGl0bGU6ICEwLAogICAgICAgIHByaWNlOiAhMSwKICAgICAgICBwcmljZVdpdGhEaXNjb3VudHM6ICEwLAogICAgICAgIHF1YW50aXR5OiAhMCwKICAgICAgICBxdWFudGl0eUluY3JlbWVudDogITAsCiAgICAgICAgcXVhbnRpdHlEZWNyZW1lbnQ6ICEwLAogICAgICAgIHF1YW50aXR5SW5wdXQ6ICEwCiAgICAgIH0sCiAgICAgIG9yZGVyOiBbImltYWdlIiwgInRpdGxlIiwgInZhcmlhbnRUaXRsZSIsICJwcmljZSIsICJwcmljZVdpdGhEaXNjb3VudHMiLCAicXVhbnRpdHkiXSwKICAgICAgY2xhc3NlczogewogICAgICAgIGxpbmVJdGVtOiAic2hvcGlmeS1idXlfX2NhcnQtaXRlbSIsCiAgICAgICAgaW1hZ2U6ICJzaG9waWZ5LWJ1eV9fY2FydC1pdGVtX19pbWFnZSIsCiAgICAgICAgdmFyaWFudFRpdGxlOiAic2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fdmFyaWFudC10aXRsZSIsCiAgICAgICAgaXRlbVRpdGxlOiAic2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fdGl0bGUiLAogICAgICAgIHByaWNlOiAic2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fcHJpY2UiLAogICAgICAgIHByaWNlV2l0aERpc2NvdW50czogInNob3BpZnktYnV5X19jYXJ0LWl0ZW1fX3ByaWNlLWFuZC1kaXNjb3VudHMiLAogICAgICAgIGZ1bGxQcmljZTogInNob3BpZnktYnV5X19jYXJ0LWl0ZW1fX2Z1bGwtcHJpY2UiLAogICAgICAgIGRpc2NvdW50OiAic2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fZGlzY291bnQiLAogICAgICAgIGRpc2NvdW50SWNvbjogInNob3BpZnktYnV5X19jYXJ0LWl0ZW1fX2Rpc2NvdW50X19pY29uIiwKICAgICAgICBxdWFudGl0eTogInNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIgY2xlYXJmaXgiLAogICAgICAgIHF1YW50aXR5SW5wdXQ6ICJzaG9waWZ5LWJ1eV9fcXVhbnRpdHkgc2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fcXVhbnRpdHktaW5wdXQiLAogICAgICAgIHF1YW50aXR5QnV0dG9uOiAic2hvcGlmeS1idXlfX2J0bi0tc2VhbWxlc3MiLAogICAgICAgIHF1YW50aXR5SW5jcmVtZW50OiAic2hvcGlmeS1idXlfX3F1YW50aXR5LWluY3JlbWVudCIsCiAgICAgICAgcXVhbnRpdHlEZWNyZW1lbnQ6ICJzaG9waWZ5LWJ1eV9fcXVhbnRpdHktZGVjcmVtZW50IgogICAgICB9CiAgICB9LAogICAgdG9nZ2xlOiB7CiAgICAgIHRlbXBsYXRlczogewogICAgICAgIHRpdGxlOiAnPGg1IGNsYXNzPSJ7e2RhdGEuY2xhc3Nlcy50b2dnbGUudGl0bGV9fSIgZGF0YS1lbGVtZW50PSJ0b2dnbGUudGl0bGUiPnt7ZGF0YS50ZXh0LnRpdGxlfX08L2g1PicsCiAgICAgICAgaWNvbjogJzxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBjbGFzcz0ie3tkYXRhLmNsYXNzZXMudG9nZ2xlLmljb259fSIgZGF0YS1lbGVtZW50PSJ0b2dnbGUuaWNvbiIgdmlld0JveD0iMCAwIDI1IDI1IiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCAyNSAyNSI+PGcgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnRvZ2dsZS5pY29uUGF0aH19Ij48cGF0aCBkPSJNMjQuNiAzLjZjLS4zLS40LS44LS42LTEuMy0uNmgtMTguNGwtLjEtLjVjLS4zLTEuNS0xLjctMS41LTIuNS0xLjVoLTEuM2MtLjYgMC0xIC40LTEgMXMuNCAxIDEgMWgxLjhsMyAxMy42Yy4yIDEuMiAxLjMgMi40IDIuNSAyLjRoMTIuN2MuNiAwIDEtLjQgMS0xcy0uNC0xLTEtMWgtMTIuN2MtLjIgMC0uNS0uNC0uNi0uOGwtLjItMS4yaDEyLjZjMS4zIDAgMi4zLTEuNCAyLjUtMi40bDIuNC03LjR2LS4yYy4xLS41LS4xLTEtLjQtMS40em0tNCA4LjV2LjJjLS4xLjMtLjQuOC0uNS44aC0xM2wtMS44LTguMWgxNy42bC0yLjMgNy4xeiIvPjxjaXJjbGUgY3g9IjkiIGN5PSIyMiIgcj0iMiIvPjxjaXJjbGUgY3g9IjE5IiBjeT0iMjIiIHI9IjIiLz48L2c+PC9zdmc+JywKICAgICAgICBjb3VudDogJzxkaXYgY2xhc3M9Int7ZGF0YS5jbGFzc2VzLnRvZ2dsZS5jb3VudH19IiBkYXRhLWVsZW1lbnQ9InRvZ2dsZS5jb3VudCI+e3tkYXRhLmNvdW50fX08L2Rpdj4nCiAgICAgIH0sCiAgICAgIG1hbmlmZXN0OiBbInRvZ2dsZSJdLAogICAgICBpZnJhbWU6ICEwLAogICAgICBzdGlja3k6ICEwLAogICAgICBjb250ZW50czogewogICAgICAgIGNvdW50OiAhMCwKICAgICAgICBpY29uOiAhMCwKICAgICAgICB0aXRsZTogITEKICAgICAgfSwKICAgICAgb3JkZXI6IFsiY291bnQiLCAiaWNvbiIsICJ0aXRsZSJdLAogICAgICBjbGFzc2VzOiB7CiAgICAgICAgd3JhcHBlcjogInNob3BpZnktYnV5X19jYXJ0LXRvZ2dsZS13cmFwcGVyIiwKICAgICAgICB0b2dnbGU6ICJzaG9waWZ5LWJ1eV9fY2FydC10b2dnbGUiLAogICAgICAgIHRpdGxlOiAic2hvcGlmeS1idXlfX2NhcnQtdG9nZ2xlX190aXRsZSIsCiAgICAgICAgY291bnQ6ICJzaG9waWZ5LWJ1eV9fY2FydC10b2dnbGVfX2NvdW50IiwKICAgICAgICBpY29uOiAic2hvcGlmeS1idXlfX2ljb24tY2FydCBzaG9waWZ5LWJ1eV9faWNvbi1jYXJ0LS1zaWRlIiwKICAgICAgICBpY29uUGF0aDogInNob3BpZnktYnV5X19pY29uLWNhcnRfX2dyb3VwIgogICAgICB9LAogICAgICB0ZXh0OiB7CiAgICAgICAgdGl0bGU6ICJjYXJ0IgogICAgICB9CiAgICB9LAogICAgd2luZG93OiB7CiAgICAgIGhlaWdodDogNjAwLAogICAgICB3aWR0aDogNDAwLAogICAgICB0b29sYmFyOiAwLAogICAgICBzY3JvbGxiYXJzOiAxLAogICAgICBzdGF0dXM6IDAsCiAgICAgIHJlc2l6YWJsZTogMSwKICAgICAgY2VudGVyOiAwLAogICAgICBjcmVhdGVuZXc6IDEsCiAgICAgIGxvY2F0aW9uOiAwLAogICAgICBtZW51YmFyOiAwLAogICAgICBvblVubG9hZDogbnVsbCwKICAgICAgdGl0bGViYXI6ICJ5ZXMiCiAgICB9CiAgfTsKCiAgZnVuY3Rpb24gd3JhcENvbnNvbGUobG9nQ29tbWFuZCkgewogICAgdmFyIGxvZ01ldGhvZCA9IGZ1bmN0aW9uIGxvZ01ldGhvZCgpIHsKICAgICAgdmFyIGhvc3RDb25zb2xlID0gd2luZG93LmNvbnNvbGUsCiAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykuam9pbigiICIpOwogICAgICBob3N0Q29uc29sZSAmJiBob3N0Q29uc29sZVtsb2dDb21tYW5kXShhcmdzKTsKICAgIH07CgogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgICBhcmdzLnVuc2hpZnQoIltTSE9QSUZZLUJVWS1VSV06ICIpLCBsb2dNZXRob2QuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpOwogICAgfTsKICB9CgogIHZhciBsb2dnZXIgPSB7CiAgICBkZWJ1Zzogd3JhcENvbnNvbGUoImRlYnVnIiksCiAgICBpbmZvOiB3cmFwQ29uc29sZSgiaW5mbyIpLAogICAgd2Fybjogd3JhcENvbnNvbGUoIndhcm4iKSwKICAgIGVycm9yOiB3cmFwQ29uc29sZSgiZXJyb3IiKSwKICAgIGxvZzogd3JhcENvbnNvbGUoImxvZyIpCiAgfTsKCiAgZnVuY3Rpb24gaXNBcnJheShhcmcpIHsKICAgIHJldHVybiAiW29iamVjdCBBcnJheV0iID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKTsKICB9CgogIGZ1bmN0aW9uIGxvZ05vdEZvdW5kKGNvbXBvbmVudCkgewogICAgdmFyIGVyckluZm8gPSAiIjsKICAgIGNvbXBvbmVudC5pZCA/IGVyckluZm8gPSBpc0FycmF5KGNvbXBvbmVudC5pZCkgPyAiZm9yIGlkcyAiLmNvbmNhdChjb21wb25lbnQuaWQuam9pbigiLCAiKSwgIi4iKSA6ICJmb3IgaWQgIi5jb25jYXQoY29tcG9uZW50LmlkLCAiLiIpIDogY29tcG9uZW50LmhhbmRsZSAmJiAoZXJySW5mbyA9ICdmb3IgaGFuZGxlICInLmNvbmNhdChjb21wb25lbnQuaGFuZGxlLCAnIi4nKSk7CiAgICB2YXIgbWVzc2FnZSA9ICJOb3QgRm91bmQ6ICIuY29uY2F0KGNvbXBvbmVudC50eXBlS2V5LCAiIG5vdCBmb3VuZCAiKS5jb25jYXQoZXJySW5mbyk7CiAgICBsb2dnZXIud2FybihtZXNzYWdlKTsKICB9CgogIHZhciBkZWZhdWx0TW9uZXlGb3JtYXQgPSAiJHt7YW1vdW50fX0iLAogICAgICByYW5nZTsKCiAgZnVuY3Rpb24gbW9ycGhBdHRycyhmcm9tTm9kZSwgdG9Ob2RlKSB7CiAgICB2YXIgYXR0cnMgPSB0b05vZGUuYXR0cmlidXRlcywKICAgICAgICBpLAogICAgICAgIGF0dHIsCiAgICAgICAgYXR0ck5hbWUsCiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSwKICAgICAgICBhdHRyVmFsdWUsCiAgICAgICAgZnJvbVZhbHVlOwoKICAgIGZvciAoaSA9IGF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgIGF0dHJOYW1lID0gKGF0dHIgPSBhdHRyc1tpXSkubmFtZSwgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJLCBhdHRyVmFsdWUgPSBhdHRyLnZhbHVlLCBhdHRyTmFtZXNwYWNlVVJJID8gKGF0dHJOYW1lID0gYXR0ci5sb2NhbE5hbWUgfHwgYXR0ck5hbWUsIChmcm9tVmFsdWUgPSBmcm9tTm9kZS5nZXRBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSkpICE9PSBhdHRyVmFsdWUgJiYgZnJvbU5vZGUuc2V0QXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUsIGF0dHJWYWx1ZSkpIDogKGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyTmFtZSkpICE9PSBhdHRyVmFsdWUgJiYgZnJvbU5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUpOwogICAgfQoKICAgIGZvciAoaSA9IChhdHRycyA9IGZyb21Ob2RlLmF0dHJpYnV0ZXMpLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICExICE9PSAoYXR0ciA9IGF0dHJzW2ldKS5zcGVjaWZpZWQgJiYgKGF0dHJOYW1lID0gYXR0ci5uYW1lLCAoYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJKSA/IChhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lLCB0b05vZGUuaGFzQXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUpIHx8IGZyb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKSkgOiB0b05vZGUuaGFzQXR0cmlidXRlKGF0dHJOYW1lKSB8fCBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpKTsKICAgIH0KICB9CgogIHZhciBOU19YSFRNTCA9ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiwKICAgICAgZG9jID0gInVuZGVmaW5lZCIgPT0gdHlwZW9mIGRvY3VtZW50ID8gdm9pZCAwIDogZG9jdW1lbnQsCiAgICAgIEhBU19URU1QTEFURV9TVVBQT1JUID0gISFkb2MgJiYgImNvbnRlbnQiIGluIGRvYy5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpLAogICAgICBIQVNfUkFOR0VfU1VQUE9SVCA9ICEhZG9jICYmIGRvYy5jcmVhdGVSYW5nZSAmJiAiY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50IiBpbiBkb2MuY3JlYXRlUmFuZ2UoKTsKCiAgZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKSB7CiAgICB2YXIgdGVtcGxhdGUgPSBkb2MuY3JlYXRlRWxlbWVudCgidGVtcGxhdGUiKTsKICAgIHJldHVybiB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBzdHIsIHRlbXBsYXRlLmNvbnRlbnQuY2hpbGROb2Rlc1swXTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cikgewogICAgdmFyIGZyYWdtZW50OwogICAgcmV0dXJuIHJhbmdlIHx8IChyYW5nZSA9IGRvYy5jcmVhdGVSYW5nZSgpKS5zZWxlY3ROb2RlKGRvYy5ib2R5KSwgcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHN0cikuY2hpbGROb2Rlc1swXTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKSB7CiAgICB2YXIgZnJhZ21lbnQgPSBkb2MuY3JlYXRlRWxlbWVudCgiYm9keSIpOwogICAgcmV0dXJuIGZyYWdtZW50LmlubmVySFRNTCA9IHN0ciwgZnJhZ21lbnQuY2hpbGROb2Rlc1swXTsKICB9CgogIGZ1bmN0aW9uIHRvRWxlbWVudChzdHIpIHsKICAgIHJldHVybiBIQVNfVEVNUExBVEVfU1VQUE9SVCA/IGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cikgOiBIQVNfUkFOR0VfU1VQUE9SVCA/IGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cikgOiBjcmVhdGVGcmFnbWVudEZyb21XcmFwKHN0cik7CiAgfQoKICBmdW5jdGlvbiBjb21wYXJlTm9kZU5hbWVzKGZyb21FbCwgdG9FbCkgewogICAgdmFyIGZyb21Ob2RlTmFtZSA9IGZyb21FbC5ub2RlTmFtZSwKICAgICAgICB0b05vZGVOYW1lID0gdG9FbC5ub2RlTmFtZTsKICAgIHJldHVybiBmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUgfHwgISEodG9FbC5hY3R1YWxpemUgJiYgZnJvbU5vZGVOYW1lLmNoYXJDb2RlQXQoMCkgPCA5MSAmJiB0b05vZGVOYW1lLmNoYXJDb2RlQXQoMCkgPiA5MCkgJiYgZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lLnRvVXBwZXJDYXNlKCk7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMobmFtZSwgbmFtZXNwYWNlVVJJKSB7CiAgICByZXR1cm4gbmFtZXNwYWNlVVJJICYmIG5hbWVzcGFjZVVSSSAhPT0gTlNfWEhUTUwgPyBkb2MuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgbmFtZSkgOiBkb2MuY3JlYXRlRWxlbWVudChuYW1lKTsKICB9CgogIGZ1bmN0aW9uIG1vdmVDaGlsZHJlbihmcm9tRWwsIHRvRWwpIHsKICAgIGZvciAodmFyIGN1ckNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7IGN1ckNoaWxkOykgewogICAgICB2YXIgbmV4dENoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7CiAgICAgIHRvRWwuYXBwZW5kQ2hpbGQoY3VyQ2hpbGQpLCBjdXJDaGlsZCA9IG5leHRDaGlsZDsKICAgIH0KCiAgICByZXR1cm4gdG9FbDsKICB9CgogIGZ1bmN0aW9uIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCBuYW1lKSB7CiAgICBmcm9tRWxbbmFtZV0gIT09IHRvRWxbbmFtZV0gJiYgKGZyb21FbFtuYW1lXSA9IHRvRWxbbmFtZV0sIGZyb21FbFtuYW1lXSA/IGZyb21FbC5zZXRBdHRyaWJ1dGUobmFtZSwgIiIpIDogZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKSk7CiAgfQoKICB2YXIgc3BlY2lhbEVsSGFuZGxlcnMgPSB7CiAgICBPUFRJT046IGZ1bmN0aW9uIE9QVElPTihmcm9tRWwsIHRvRWwpIHsKICAgICAgdmFyIHBhcmVudE5vZGUgPSBmcm9tRWwucGFyZW50Tm9kZTsKCiAgICAgIGlmIChwYXJlbnROb2RlKSB7CiAgICAgICAgdmFyIHBhcmVudE5hbWUgPSBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgIk9QVEdST1VQIiA9PT0gcGFyZW50TmFtZSAmJiAocGFyZW50TmFtZSA9IChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlKSAmJiBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkpLCAiU0VMRUNUIiAhPT0gcGFyZW50TmFtZSB8fCBwYXJlbnROb2RlLmhhc0F0dHJpYnV0ZSgibXVsdGlwbGUiKSB8fCAoZnJvbUVsLmhhc0F0dHJpYnV0ZSgic2VsZWN0ZWQiKSAmJiAhdG9FbC5zZWxlY3RlZCAmJiAoZnJvbUVsLnNldEF0dHJpYnV0ZSgic2VsZWN0ZWQiLCAic2VsZWN0ZWQiKSwgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZSgic2VsZWN0ZWQiKSksIHBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCA9IC0xKTsKICAgICAgfQoKICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICJzZWxlY3RlZCIpOwogICAgfSwKICAgIElOUFVUOiBmdW5jdGlvbiBJTlBVVChmcm9tRWwsIHRvRWwpIHsKICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICJjaGVja2VkIiksIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCAiZGlzYWJsZWQiKSwgZnJvbUVsLnZhbHVlICE9PSB0b0VsLnZhbHVlICYmIChmcm9tRWwudmFsdWUgPSB0b0VsLnZhbHVlKSwgdG9FbC5oYXNBdHRyaWJ1dGUoInZhbHVlIikgfHwgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZSgidmFsdWUiKTsKICAgIH0sCiAgICBURVhUQVJFQTogZnVuY3Rpb24gVEVYVEFSRUEoZnJvbUVsLCB0b0VsKSB7CiAgICAgIHZhciBuZXdWYWx1ZSA9IHRvRWwudmFsdWU7CiAgICAgIGZyb21FbC52YWx1ZSAhPT0gbmV3VmFsdWUgJiYgKGZyb21FbC52YWx1ZSA9IG5ld1ZhbHVlKTsKICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDsKCiAgICAgIGlmIChmaXJzdENoaWxkKSB7CiAgICAgICAgdmFyIG9sZFZhbHVlID0gZmlyc3RDaGlsZC5ub2RlVmFsdWU7CiAgICAgICAgaWYgKG9sZFZhbHVlID09IG5ld1ZhbHVlIHx8ICFuZXdWYWx1ZSAmJiBvbGRWYWx1ZSA9PSBmcm9tRWwucGxhY2Vob2xkZXIpIHJldHVybjsKICAgICAgICBmaXJzdENoaWxkLm5vZGVWYWx1ZSA9IG5ld1ZhbHVlOwogICAgICB9CiAgICB9LAogICAgU0VMRUNUOiBmdW5jdGlvbiBTRUxFQ1QoZnJvbUVsLCB0b0VsKSB7CiAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoIm11bHRpcGxlIikpIHsKICAgICAgICBmb3IgKHZhciBzZWxlY3RlZEluZGV4ID0gLTEsIGkgPSAwLCBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkLCBvcHRncm91cCwgbm9kZU5hbWU7IGN1ckNoaWxkOykgewogICAgICAgICAgaWYgKCJPUFRHUk9VUCIgPT09IChub2RlTmFtZSA9IGN1ckNoaWxkLm5vZGVOYW1lICYmIGN1ckNoaWxkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkpKSBjdXJDaGlsZCA9IChvcHRncm91cCA9IGN1ckNoaWxkKS5maXJzdENoaWxkO2Vsc2UgewogICAgICAgICAgICBpZiAoIk9QVElPTiIgPT09IG5vZGVOYW1lKSB7CiAgICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmhhc0F0dHJpYnV0ZSgic2VsZWN0ZWQiKSkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IGk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIShjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nKSAmJiBvcHRncm91cCAmJiAoY3VyQ2hpbGQgPSBvcHRncm91cC5uZXh0U2libGluZywgb3B0Z3JvdXAgPSBudWxsKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZyb21FbC5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDsKICAgICAgfQogICAgfQogIH0sCiAgICAgIEVMRU1FTlRfTk9ERSA9IDEsCiAgICAgIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgPSAxMSwKICAgICAgVEVYVF9OT0RFID0gMywKICAgICAgQ09NTUVOVF9OT0RFID0gODsKCiAgZnVuY3Rpb24gbm9vcCQxKCkge30KCiAgZnVuY3Rpb24gZGVmYXVsdEdldE5vZGVLZXkobm9kZSkgewogICAgcmV0dXJuIG5vZGUuaWQ7CiAgfQoKICBmdW5jdGlvbiBtb3JwaGRvbUZhY3RvcnkobW9ycGhBdHRycykgewogICAgcmV0dXJuIGZ1bmN0aW9uIG1vcnBoZG9tKGZyb21Ob2RlLCB0b05vZGUsIG9wdGlvbnMpIHsKICAgICAgaWYgKG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSksICJzdHJpbmciID09IHR5cGVvZiB0b05vZGUpIGlmICgiI2RvY3VtZW50IiA9PT0gZnJvbU5vZGUubm9kZU5hbWUgfHwgIkhUTUwiID09PSBmcm9tTm9kZS5ub2RlTmFtZSkgewogICAgICAgIHZhciB0b05vZGVIdG1sID0gdG9Ob2RlOwogICAgICAgICh0b05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgiaHRtbCIpKS5pbm5lckhUTUwgPSB0b05vZGVIdG1sOwogICAgICB9IGVsc2UgdG9Ob2RlID0gdG9FbGVtZW50KHRvTm9kZSk7CiAgICAgIHZhciBnZXROb2RlS2V5ID0gb3B0aW9ucy5nZXROb2RlS2V5IHx8IGRlZmF1bHRHZXROb2RlS2V5LAogICAgICAgICAgb25CZWZvcmVOb2RlQWRkZWQgPSBvcHRpb25zLm9uQmVmb3JlTm9kZUFkZGVkIHx8IG5vb3AkMSwKICAgICAgICAgIG9uTm9kZUFkZGVkID0gb3B0aW9ucy5vbk5vZGVBZGRlZCB8fCBub29wJDEsCiAgICAgICAgICBvbkJlZm9yZUVsVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbFVwZGF0ZWQgfHwgbm9vcCQxLAogICAgICAgICAgb25FbFVwZGF0ZWQgPSBvcHRpb25zLm9uRWxVcGRhdGVkIHx8IG5vb3AkMSwKICAgICAgICAgIG9uQmVmb3JlTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlRGlzY2FyZGVkIHx8IG5vb3AkMSwKICAgICAgICAgIG9uTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25Ob2RlRGlzY2FyZGVkIHx8IG5vb3AkMSwKICAgICAgICAgIG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQgPSBvcHRpb25zLm9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQgfHwgbm9vcCQxLAogICAgICAgICAgY2hpbGRyZW5Pbmx5ID0gITAgPT09IG9wdGlvbnMuY2hpbGRyZW5Pbmx5LAogICAgICAgICAgZnJvbU5vZGVzTG9va3VwID0ge30sCiAgICAgICAgICBrZXllZFJlbW92YWxMaXN0OwoKICAgICAgZnVuY3Rpb24gYWRkS2V5ZWRSZW1vdmFsKGtleSkgewogICAgICAgIGtleWVkUmVtb3ZhbExpc3QgPyBrZXllZFJlbW92YWxMaXN0LnB1c2goa2V5KSA6IGtleWVkUmVtb3ZhbExpc3QgPSBba2V5XTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpIHsKICAgICAgICBpZiAoMSA9PT0gbm9kZS5ub2RlVHlwZSkgZm9yICh2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7IGN1ckNoaWxkOykgewogICAgICAgICAgdmFyIGtleSA9IHZvaWQgMDsKICAgICAgICAgIHNraXBLZXllZE5vZGVzICYmIChrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKSkgPyBhZGRLZXllZFJlbW92YWwoa2V5KSA6IChvbk5vZGVEaXNjYXJkZWQoY3VyQ2hpbGQpLCBjdXJDaGlsZC5maXJzdENoaWxkICYmIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKGN1ckNoaWxkLCBza2lwS2V5ZWROb2RlcykpLCBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlLCBwYXJlbnROb2RlLCBza2lwS2V5ZWROb2RlcykgewogICAgICAgICExICE9PSBvbkJlZm9yZU5vZGVEaXNjYXJkZWQobm9kZSkgJiYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKSwgb25Ob2RlRGlzY2FyZGVkKG5vZGUpLCB3YWxrRGlzY2FyZGVkQ2hpbGROb2Rlcyhub2RlLCBza2lwS2V5ZWROb2RlcykpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBpbmRleFRyZWUobm9kZSkgewogICAgICAgIGlmICgxID09PSBub2RlLm5vZGVUeXBlIHx8IDExID09PSBub2RlLm5vZGVUeXBlKSBmb3IgKHZhciBjdXJDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDsgY3VyQ2hpbGQ7KSB7CiAgICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7CiAgICAgICAgICBrZXkgJiYgKGZyb21Ob2Rlc0xvb2t1cFtrZXldID0gY3VyQ2hpbGQpLCBpbmRleFRyZWUoY3VyQ2hpbGQpLCBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gaGFuZGxlTm9kZUFkZGVkKGVsKSB7CiAgICAgICAgb25Ob2RlQWRkZWQoZWwpOwoKICAgICAgICBmb3IgKHZhciBjdXJDaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7IGN1ckNoaWxkOykgewogICAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gY3VyQ2hpbGQubmV4dFNpYmxpbmcsCiAgICAgICAgICAgICAga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7CgogICAgICAgICAgaWYgKGtleSkgewogICAgICAgICAgICB2YXIgdW5tYXRjaGVkRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2tleV07CiAgICAgICAgICAgIHVubWF0Y2hlZEZyb21FbCAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckNoaWxkLCB1bm1hdGNoZWRGcm9tRWwpICYmIChjdXJDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh1bm1hdGNoZWRGcm9tRWwsIGN1ckNoaWxkKSwgbW9ycGhFbCh1bm1hdGNoZWRGcm9tRWwsIGN1ckNoaWxkKSk7CiAgICAgICAgICB9CgogICAgICAgICAgaGFuZGxlTm9kZUFkZGVkKGN1ckNoaWxkKSwgY3VyQ2hpbGQgPSBuZXh0U2libGluZzsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSkgewogICAgICAgIGZvciAoOyBjdXJGcm9tTm9kZUNoaWxkOykgewogICAgICAgICAgdmFyIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7CiAgICAgICAgICAoY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpKSA/IGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSkgOiByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgITApLCBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gbW9ycGhFbChmcm9tRWwsIHRvRWwsIGNoaWxkcmVuT25seSkgewogICAgICAgIHZhciB0b0VsS2V5ID0gZ2V0Tm9kZUtleSh0b0VsKTsKCiAgICAgICAgaWYgKHRvRWxLZXkgJiYgZGVsZXRlIGZyb21Ob2Rlc0xvb2t1cFt0b0VsS2V5XSwgIXRvTm9kZS5pc1NhbWVOb2RlIHx8ICF0b05vZGUuaXNTYW1lTm9kZShmcm9tTm9kZSkpIHsKICAgICAgICAgIGlmICghY2hpbGRyZW5Pbmx5KSB7CiAgICAgICAgICAgIGlmICghMSA9PT0gb25CZWZvcmVFbFVwZGF0ZWQoZnJvbUVsLCB0b0VsKSkgcmV0dXJuOwogICAgICAgICAgICBpZiAobW9ycGhBdHRycyhmcm9tRWwsIHRvRWwpLCBvbkVsVXBkYXRlZChmcm9tRWwpLCAhMSA9PT0gb25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZChmcm9tRWwsIHRvRWwpKSByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgIlRFWFRBUkVBIiAhPT0gZnJvbUVsLm5vZGVOYW1lID8gbW9ycGhDaGlsZHJlbihmcm9tRWwsIHRvRWwpIDogc3BlY2lhbEVsSGFuZGxlcnMuVEVYVEFSRUEoZnJvbUVsLCB0b0VsKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIG1vcnBoQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7CiAgICAgICAgdmFyIGN1clRvTm9kZUNoaWxkID0gdG9FbC5maXJzdENoaWxkLAogICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQsCiAgICAgICAgICAgIGN1clRvTm9kZUtleSwKICAgICAgICAgICAgY3VyRnJvbU5vZGVLZXksCiAgICAgICAgICAgIGZyb21OZXh0U2libGluZywKICAgICAgICAgICAgdG9OZXh0U2libGluZywKICAgICAgICAgICAgbWF0Y2hpbmdGcm9tRWw7CgogICAgICAgIG91dGVyOiBmb3IgKDsgY3VyVG9Ob2RlQ2hpbGQ7KSB7CiAgICAgICAgICBmb3IgKHRvTmV4dFNpYmxpbmcgPSBjdXJUb05vZGVDaGlsZC5uZXh0U2libGluZywgY3VyVG9Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJUb05vZGVDaGlsZCk7IGN1ckZyb21Ob2RlQ2hpbGQ7KSB7CiAgICAgICAgICAgIGlmIChmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nLCBjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlICYmIGN1clRvTm9kZUNoaWxkLmlzU2FtZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCkpIHsKICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmcsIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7CiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGN1ckZyb21Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJGcm9tTm9kZUNoaWxkKTsKICAgICAgICAgICAgdmFyIGN1ckZyb21Ob2RlVHlwZSA9IGN1ckZyb21Ob2RlQ2hpbGQubm9kZVR5cGUsCiAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSB2b2lkIDA7CgogICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBjdXJUb05vZGVDaGlsZC5ub2RlVHlwZSAmJiAoMSA9PT0gY3VyRnJvbU5vZGVUeXBlID8gKGN1clRvTm9kZUtleSA/IGN1clRvTm9kZUtleSAhPT0gY3VyRnJvbU5vZGVLZXkgJiYgKChtYXRjaGluZ0Zyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtjdXJUb05vZGVLZXldKSA/IGZyb21OZXh0U2libGluZyA9PT0gbWF0Y2hpbmdGcm9tRWwgPyBpc0NvbXBhdGlibGUgPSAhMSA6IChmcm9tRWwuaW5zZXJ0QmVmb3JlKG1hdGNoaW5nRnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkKSwgY3VyRnJvbU5vZGVLZXkgPyBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpIDogcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsICEwKSwgY3VyRnJvbU5vZGVDaGlsZCA9IG1hdGNoaW5nRnJvbUVsKSA6IGlzQ29tcGF0aWJsZSA9ICExKSA6IGN1ckZyb21Ob2RlS2V5ICYmIChpc0NvbXBhdGlibGUgPSAhMSksIChpc0NvbXBhdGlibGUgPSAhMSAhPT0gaXNDb21wYXRpYmxlICYmIGNvbXBhcmVOb2RlTmFtZXMoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpKSAmJiBtb3JwaEVsKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKSkgOiAzICE9PSBjdXJGcm9tTm9kZVR5cGUgJiYgOCAhPSBjdXJGcm9tTm9kZVR5cGUgfHwgKGlzQ29tcGF0aWJsZSA9ICEwLCBjdXJGcm9tTm9kZUNoaWxkLm5vZGVWYWx1ZSAhPT0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlICYmIChjdXJGcm9tTm9kZUNoaWxkLm5vZGVWYWx1ZSA9IGN1clRvTm9kZUNoaWxkLm5vZGVWYWx1ZSkpKSwgaXNDb21wYXRpYmxlKSB7CiAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nLCBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nOwogICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjdXJGcm9tTm9kZUtleSA/IGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSkgOiByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgITApLCBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjdXJUb05vZGVLZXkgJiYgKG1hdGNoaW5nRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2N1clRvTm9kZUtleV0pICYmIGNvbXBhcmVOb2RlTmFtZXMobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKSkgZnJvbUVsLmFwcGVuZENoaWxkKG1hdGNoaW5nRnJvbUVsKSwgbW9ycGhFbChtYXRjaGluZ0Zyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpO2Vsc2UgewogICAgICAgICAgICB2YXIgb25CZWZvcmVOb2RlQWRkZWRSZXN1bHQgPSBvbkJlZm9yZU5vZGVBZGRlZChjdXJUb05vZGVDaGlsZCk7CiAgICAgICAgICAgICExICE9PSBvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCAmJiAob25CZWZvcmVOb2RlQWRkZWRSZXN1bHQgJiYgKGN1clRvTm9kZUNoaWxkID0gb25CZWZvcmVOb2RlQWRkZWRSZXN1bHQpLCBjdXJUb05vZGVDaGlsZC5hY3R1YWxpemUgJiYgKGN1clRvTm9kZUNoaWxkID0gY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKGZyb21FbC5vd25lckRvY3VtZW50IHx8IGRvYykpLCBmcm9tRWwuYXBwZW5kQ2hpbGQoY3VyVG9Ob2RlQ2hpbGQpLCBoYW5kbGVOb2RlQWRkZWQoY3VyVG9Ob2RlQ2hpbGQpKTsKICAgICAgICAgIH0KICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZywgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZzsKICAgICAgICB9CgogICAgICAgIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSk7CiAgICAgICAgdmFyIHNwZWNpYWxFbEhhbmRsZXIgPSBzcGVjaWFsRWxIYW5kbGVyc1tmcm9tRWwubm9kZU5hbWVdOwogICAgICAgIHNwZWNpYWxFbEhhbmRsZXIgJiYgc3BlY2lhbEVsSGFuZGxlcihmcm9tRWwsIHRvRWwpOwogICAgICB9CgogICAgICBpbmRleFRyZWUoZnJvbU5vZGUpOwogICAgICB2YXIgbW9ycGhlZE5vZGUgPSBmcm9tTm9kZSwKICAgICAgICAgIG1vcnBoZWROb2RlVHlwZSA9IG1vcnBoZWROb2RlLm5vZGVUeXBlLAogICAgICAgICAgdG9Ob2RlVHlwZSA9IHRvTm9kZS5ub2RlVHlwZTsKICAgICAgaWYgKCFjaGlsZHJlbk9ubHkpIGlmICgxID09PSBtb3JwaGVkTm9kZVR5cGUpIDEgPT09IHRvTm9kZVR5cGUgPyBjb21wYXJlTm9kZU5hbWVzKGZyb21Ob2RlLCB0b05vZGUpIHx8IChvbk5vZGVEaXNjYXJkZWQoZnJvbU5vZGUpLCBtb3JwaGVkTm9kZSA9IG1vdmVDaGlsZHJlbihmcm9tTm9kZSwgY3JlYXRlRWxlbWVudE5TKHRvTm9kZS5ub2RlTmFtZSwgdG9Ob2RlLm5hbWVzcGFjZVVSSSkpKSA6IG1vcnBoZWROb2RlID0gdG9Ob2RlO2Vsc2UgaWYgKDMgPT09IG1vcnBoZWROb2RlVHlwZSB8fCA4ID09PSBtb3JwaGVkTm9kZVR5cGUpIHsKICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gbW9ycGhlZE5vZGVUeXBlKSByZXR1cm4gbW9ycGhlZE5vZGUubm9kZVZhbHVlICE9PSB0b05vZGUubm9kZVZhbHVlICYmIChtb3JwaGVkTm9kZS5ub2RlVmFsdWUgPSB0b05vZGUubm9kZVZhbHVlKSwgbW9ycGhlZE5vZGU7CiAgICAgICAgbW9ycGhlZE5vZGUgPSB0b05vZGU7CiAgICAgIH0KICAgICAgaWYgKG1vcnBoZWROb2RlID09PSB0b05vZGUpIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7ZWxzZSBpZiAobW9ycGhFbChtb3JwaGVkTm9kZSwgdG9Ob2RlLCBjaGlsZHJlbk9ubHkpLCBrZXllZFJlbW92YWxMaXN0KSBmb3IgKHZhciBpID0gMCwgbGVuID0ga2V5ZWRSZW1vdmFsTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgIHZhciBlbFRvUmVtb3ZlID0gZnJvbU5vZGVzTG9va3VwW2tleWVkUmVtb3ZhbExpc3RbaV1dOwogICAgICAgIGVsVG9SZW1vdmUgJiYgcmVtb3ZlTm9kZShlbFRvUmVtb3ZlLCBlbFRvUmVtb3ZlLnBhcmVudE5vZGUsICExKTsKICAgICAgfQogICAgICByZXR1cm4gIWNoaWxkcmVuT25seSAmJiBtb3JwaGVkTm9kZSAhPT0gZnJvbU5vZGUgJiYgZnJvbU5vZGUucGFyZW50Tm9kZSAmJiAobW9ycGhlZE5vZGUuYWN0dWFsaXplICYmIChtb3JwaGVkTm9kZSA9IG1vcnBoZWROb2RlLmFjdHVhbGl6ZShmcm9tTm9kZS5vd25lckRvY3VtZW50IHx8IGRvYykpLCBmcm9tTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChtb3JwaGVkTm9kZSwgZnJvbU5vZGUpKSwgbW9ycGhlZE5vZGU7CiAgICB9OwogIH0KCiAgdmFyIG1vcnBoZG9tID0gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpLAogICAgICBjb21tb25qc0dsb2JhbCA9ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWxUaGlzID8gZ2xvYmFsVGhpcyA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgZ2xvYmFsID8gZ2xvYmFsIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHNlbGYgPyBzZWxmIDoge307CgogIGZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHsKICAgIHJldHVybiBmbihtb2R1bGUgPSB7CiAgICAgIGV4cG9ydHM6IHt9CiAgICB9LCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzOwogIH0KCiAgdmFyIG11c3RhY2hlID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICAgLyohCiAgICAgICAgICogbXVzdGFjaGUuanMgLSBMb2dpYy1sZXNzIHt7bXVzdGFjaGV9fSB0ZW1wbGF0ZXMgd2l0aCBKYXZhU2NyaXB0CiAgICAgICAgICogaHR0cDovL2dpdGh1Yi5jb20vamFubC9tdXN0YWNoZS5qcwogICAgICAgICAqLwogICAgIWZ1bmN0aW9uIGRlZmluZU11c3RhY2hlKGdsb2JhbCwgZmFjdG9yeSkgewogICAgICBleHBvcnRzICYmICJzdHJpbmciICE9IHR5cGVvZiBleHBvcnRzLm5vZGVOYW1lID8gZmFjdG9yeShleHBvcnRzKSA6IChnbG9iYWwuTXVzdGFjaGUgPSB7fSwgZmFjdG9yeShnbG9iYWwuTXVzdGFjaGUpKTsKICAgIH0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIG11c3RhY2hlRmFjdG9yeShtdXN0YWNoZSkgewogICAgICB2YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLAogICAgICAgICAgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheVBvbHlmaWxsKG9iamVjdCkgewogICAgICAgIHJldHVybiAiW29iamVjdCBBcnJheV0iID09PSBvYmplY3RUb1N0cmluZy5jYWxsKG9iamVjdCk7CiAgICAgIH07CgogICAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKG9iamVjdCkgewogICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiBvYmplY3Q7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHR5cGVTdHIob2JqKSB7CiAgICAgICAgcmV0dXJuIGlzQXJyYXkob2JqKSA/ICJhcnJheSIgOiBfdHlwZW9mMihvYmopOwogICAgICB9CgogICAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bXC1cW1xde30oKSorPy4sXFxcXiR8I1xzXS9nLCAiXFwkJiIpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBoYXNQcm9wZXJ0eShvYmosIHByb3BOYW1lKSB7CiAgICAgICAgcmV0dXJuIG51bGwgIT0gb2JqICYmICJvYmplY3QiID09IF90eXBlb2YyKG9iaikgJiYgcHJvcE5hbWUgaW4gb2JqOwogICAgICB9CgogICAgICBmdW5jdGlvbiBwcmltaXRpdmVIYXNPd25Qcm9wZXJ0eShwcmltaXRpdmUsIHByb3BOYW1lKSB7CiAgICAgICAgcmV0dXJuIG51bGwgIT0gcHJpbWl0aXZlICYmICJvYmplY3QiICE9IF90eXBlb2YyKHByaW1pdGl2ZSkgJiYgcHJpbWl0aXZlLmhhc093blByb3BlcnR5ICYmIHByaW1pdGl2ZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSk7CiAgICAgIH0KCiAgICAgIHZhciByZWdFeHBUZXN0ID0gUmVnRXhwLnByb3RvdHlwZS50ZXN0OwoKICAgICAgZnVuY3Rpb24gdGVzdFJlZ0V4cChyZSwgc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHJlZ0V4cFRlc3QuY2FsbChyZSwgc3RyaW5nKTsKICAgICAgfQoKICAgICAgdmFyIG5vblNwYWNlUmUgPSAvXFMvOwoKICAgICAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKHN0cmluZykgewogICAgICAgIHJldHVybiAhdGVzdFJlZ0V4cChub25TcGFjZVJlLCBzdHJpbmcpOwogICAgICB9CgogICAgICB2YXIgZW50aXR5TWFwID0gewogICAgICAgICImIjogIiZhbXA7IiwKICAgICAgICAiPCI6ICImbHQ7IiwKICAgICAgICAiPiI6ICImZ3Q7IiwKICAgICAgICAnIic6ICImcXVvdDsiLAogICAgICAgICInIjogIiYjMzk7IiwKICAgICAgICAiLyI6ICImI3gyRjsiLAogICAgICAgICJgIjogIiYjeDYwOyIsCiAgICAgICAgIj0iOiAiJiN4M0Q7IgogICAgICB9OwoKICAgICAgZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZSgvWyY8PiInYD1cL10vZywgZnVuY3Rpb24gZnJvbUVudGl0eU1hcChzKSB7CiAgICAgICAgICByZXR1cm4gZW50aXR5TWFwW3NdOwogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgd2hpdGVSZSA9IC9ccyovLAogICAgICAgICAgc3BhY2VSZSA9IC9ccysvLAogICAgICAgICAgZXF1YWxzUmUgPSAvXHMqPS8sCiAgICAgICAgICBjdXJseVJlID0gL1xzKlx9LywKICAgICAgICAgIHRhZ1JlID0gLyN8XF58XC98Pnxce3wmfD18IS87CgogICAgICBmdW5jdGlvbiBwYXJzZVRlbXBsYXRlKHRlbXBsYXRlLCB0YWdzKSB7CiAgICAgICAgaWYgKCF0ZW1wbGF0ZSkgcmV0dXJuIFtdOwogICAgICAgIHZhciBzZWN0aW9ucyA9IFtdLAogICAgICAgICAgICB0b2tlbnMgPSBbXSwKICAgICAgICAgICAgc3BhY2VzID0gW10sCiAgICAgICAgICAgIGhhc1RhZyA9ICExLAogICAgICAgICAgICBub25TcGFjZSA9ICExLAogICAgICAgICAgICBvcGVuaW5nVGFnUmUsCiAgICAgICAgICAgIGNsb3NpbmdUYWdSZSwKICAgICAgICAgICAgY2xvc2luZ0N1cmx5UmU7CgogICAgICAgIGZ1bmN0aW9uIHN0cmlwU3BhY2UoKSB7CiAgICAgICAgICBpZiAoaGFzVGFnICYmICFub25TcGFjZSkgZm9yICg7IHNwYWNlcy5sZW5ndGg7KSB7CiAgICAgICAgICAgIGRlbGV0ZSB0b2tlbnNbc3BhY2VzLnBvcCgpXTsKICAgICAgICAgIH0gZWxzZSBzcGFjZXMgPSBbXTsKICAgICAgICAgIGhhc1RhZyA9ICExLCBub25TcGFjZSA9ICExOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gY29tcGlsZVRhZ3ModGFnc1RvQ29tcGlsZSkgewogICAgICAgICAgaWYgKCJzdHJpbmciID09IHR5cGVvZiB0YWdzVG9Db21waWxlICYmICh0YWdzVG9Db21waWxlID0gdGFnc1RvQ29tcGlsZS5zcGxpdChzcGFjZVJlLCAyKSksICFpc0FycmF5KHRhZ3NUb0NvbXBpbGUpIHx8IDIgIT09IHRhZ3NUb0NvbXBpbGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgdGFnczogIiArIHRhZ3NUb0NvbXBpbGUpOwogICAgICAgICAgb3BlbmluZ1RhZ1JlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAodGFnc1RvQ29tcGlsZVswXSkgKyAiXFxzKiIpLCBjbG9zaW5nVGFnUmUgPSBuZXcgUmVnRXhwKCJcXHMqIiArIGVzY2FwZVJlZ0V4cCh0YWdzVG9Db21waWxlWzFdKSksIGNsb3NpbmdDdXJseVJlID0gbmV3IFJlZ0V4cCgiXFxzKiIgKyBlc2NhcGVSZWdFeHAoIn0iICsgdGFnc1RvQ29tcGlsZVsxXSkpOwogICAgICAgIH0KCiAgICAgICAgY29tcGlsZVRhZ3ModGFncyB8fCBtdXN0YWNoZS50YWdzKTsKCiAgICAgICAgZm9yICh2YXIgc2Nhbm5lciA9IG5ldyBTY2FubmVyKHRlbXBsYXRlKSwgc3RhcnQsIHR5cGUsIHZhbHVlLCBjaHIsIHRva2VuLCBvcGVuU2VjdGlvbjsgIXNjYW5uZXIuZW9zKCk7KSB7CiAgICAgICAgICBpZiAoc3RhcnQgPSBzY2FubmVyLnBvcywgdmFsdWUgPSBzY2FubmVyLnNjYW5VbnRpbChvcGVuaW5nVGFnUmUpKSBmb3IgKHZhciBpID0gMCwgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCB2YWx1ZUxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlzV2hpdGVzcGFjZShjaHIgPSB2YWx1ZS5jaGFyQXQoaSkpID8gc3BhY2VzLnB1c2godG9rZW5zLmxlbmd0aCkgOiBub25TcGFjZSA9ICEwLCB0b2tlbnMucHVzaChbInRleHQiLCBjaHIsIHN0YXJ0LCBzdGFydCArIDFdKSwgc3RhcnQgKz0gMSwgIlxuIiA9PT0gY2hyICYmIHN0cmlwU3BhY2UoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghc2Nhbm5lci5zY2FuKG9wZW5pbmdUYWdSZSkpIGJyZWFrOwogICAgICAgICAgaWYgKGhhc1RhZyA9ICEwLCB0eXBlID0gc2Nhbm5lci5zY2FuKHRhZ1JlKSB8fCAibmFtZSIsIHNjYW5uZXIuc2Nhbih3aGl0ZVJlKSwgIj0iID09PSB0eXBlID8gKHZhbHVlID0gc2Nhbm5lci5zY2FuVW50aWwoZXF1YWxzUmUpLCBzY2FubmVyLnNjYW4oZXF1YWxzUmUpLCBzY2FubmVyLnNjYW5VbnRpbChjbG9zaW5nVGFnUmUpKSA6ICJ7IiA9PT0gdHlwZSA/ICh2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKGNsb3NpbmdDdXJseVJlKSwgc2Nhbm5lci5zY2FuKGN1cmx5UmUpLCBzY2FubmVyLnNjYW5VbnRpbChjbG9zaW5nVGFnUmUpLCB0eXBlID0gIiYiKSA6IHZhbHVlID0gc2Nhbm5lci5zY2FuVW50aWwoY2xvc2luZ1RhZ1JlKSwgIXNjYW5uZXIuc2NhbihjbG9zaW5nVGFnUmUpKSB0aHJvdyBuZXcgRXJyb3IoIlVuY2xvc2VkIHRhZyBhdCAiICsgc2Nhbm5lci5wb3MpOwogICAgICAgICAgaWYgKHRva2VuID0gW3R5cGUsIHZhbHVlLCBzdGFydCwgc2Nhbm5lci5wb3NdLCB0b2tlbnMucHVzaCh0b2tlbiksICIjIiA9PT0gdHlwZSB8fCAiXiIgPT09IHR5cGUpIHNlY3Rpb25zLnB1c2godG9rZW4pO2Vsc2UgaWYgKCIvIiA9PT0gdHlwZSkgewogICAgICAgICAgICBpZiAoIShvcGVuU2VjdGlvbiA9IHNlY3Rpb25zLnBvcCgpKSkgdGhyb3cgbmV3IEVycm9yKCdVbm9wZW5lZCBzZWN0aW9uICInICsgdmFsdWUgKyAnIiBhdCAnICsgc3RhcnQpOwogICAgICAgICAgICBpZiAob3BlblNlY3Rpb25bMV0gIT09IHZhbHVlKSB0aHJvdyBuZXcgRXJyb3IoJ1VuY2xvc2VkIHNlY3Rpb24gIicgKyBvcGVuU2VjdGlvblsxXSArICciIGF0ICcgKyBzdGFydCk7CiAgICAgICAgICB9IGVsc2UgIm5hbWUiID09PSB0eXBlIHx8ICJ7IiA9PT0gdHlwZSB8fCAiJiIgPT09IHR5cGUgPyBub25TcGFjZSA9ICEwIDogIj0iID09PSB0eXBlICYmIGNvbXBpbGVUYWdzKHZhbHVlKTsKICAgICAgICB9CgogICAgICAgIGlmIChvcGVuU2VjdGlvbiA9IHNlY3Rpb25zLnBvcCgpKSB0aHJvdyBuZXcgRXJyb3IoJ1VuY2xvc2VkIHNlY3Rpb24gIicgKyBvcGVuU2VjdGlvblsxXSArICciIGF0ICcgKyBzY2FubmVyLnBvcyk7CiAgICAgICAgcmV0dXJuIG5lc3RUb2tlbnMoc3F1YXNoVG9rZW5zKHRva2VucykpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBzcXVhc2hUb2tlbnModG9rZW5zKSB7CiAgICAgICAgZm9yICh2YXIgc3F1YXNoZWRUb2tlbnMgPSBbXSwgdG9rZW4sIGxhc3RUb2tlbiwgaSA9IDAsIG51bVRva2VucyA9IHRva2Vucy5sZW5ndGg7IGkgPCBudW1Ub2tlbnM7ICsraSkgewogICAgICAgICAgKHRva2VuID0gdG9rZW5zW2ldKSAmJiAoInRleHQiID09PSB0b2tlblswXSAmJiBsYXN0VG9rZW4gJiYgInRleHQiID09PSBsYXN0VG9rZW5bMF0gPyAobGFzdFRva2VuWzFdICs9IHRva2VuWzFdLCBsYXN0VG9rZW5bM10gPSB0b2tlblszXSkgOiAoc3F1YXNoZWRUb2tlbnMucHVzaCh0b2tlbiksIGxhc3RUb2tlbiA9IHRva2VuKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3F1YXNoZWRUb2tlbnM7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIG5lc3RUb2tlbnModG9rZW5zKSB7CiAgICAgICAgZm9yICh2YXIgbmVzdGVkVG9rZW5zID0gW10sIGNvbGxlY3RvciA9IG5lc3RlZFRva2Vucywgc2VjdGlvbnMgPSBbXSwgdG9rZW4sIHNlY3Rpb24sIGkgPSAwLCBudW1Ub2tlbnMgPSB0b2tlbnMubGVuZ3RoOyBpIDwgbnVtVG9rZW5zOyArK2kpIHsKICAgICAgICAgIHN3aXRjaCAoKHRva2VuID0gdG9rZW5zW2ldKVswXSkgewogICAgICAgICAgICBjYXNlICIjIjoKICAgICAgICAgICAgY2FzZSAiXiI6CiAgICAgICAgICAgICAgY29sbGVjdG9yLnB1c2godG9rZW4pLCBzZWN0aW9ucy5wdXNoKHRva2VuKSwgY29sbGVjdG9yID0gdG9rZW5bNF0gPSBbXTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgIi8iOgogICAgICAgICAgICAgIChzZWN0aW9uID0gc2VjdGlvbnMucG9wKCkpWzVdID0gdG9rZW5bMl0sIGNvbGxlY3RvciA9IHNlY3Rpb25zLmxlbmd0aCA+IDAgPyBzZWN0aW9uc1tzZWN0aW9ucy5sZW5ndGggLSAxXVs0XSA6IG5lc3RlZFRva2VuczsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgY29sbGVjdG9yLnB1c2godG9rZW4pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5lc3RlZFRva2VuczsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gU2Nhbm5lcihzdHJpbmcpIHsKICAgICAgICB0aGlzLnN0cmluZyA9IHN0cmluZywgdGhpcy50YWlsID0gc3RyaW5nLCB0aGlzLnBvcyA9IDA7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIENvbnRleHQodmlldywgcGFyZW50Q29udGV4dCkgewogICAgICAgIHRoaXMudmlldyA9IHZpZXcsIHRoaXMuY2FjaGUgPSB7CiAgICAgICAgICAiLiI6IHRoaXMudmlldwogICAgICAgIH0sIHRoaXMucGFyZW50ID0gcGFyZW50Q29udGV4dDsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gV3JpdGVyKCkgewogICAgICAgIHRoaXMuY2FjaGUgPSB7fTsKICAgICAgfQoKICAgICAgU2Nhbm5lci5wcm90b3R5cGUuZW9zID0gZnVuY3Rpb24gZW9zKCkgewogICAgICAgIHJldHVybiAiIiA9PT0gdGhpcy50YWlsOwogICAgICB9LCBTY2FubmVyLnByb3RvdHlwZS5zY2FuID0gZnVuY3Rpb24gc2NhbihyZSkgewogICAgICAgIHZhciBtYXRjaCA9IHRoaXMudGFpbC5tYXRjaChyZSk7CiAgICAgICAgaWYgKCFtYXRjaCB8fCAwICE9PSBtYXRjaC5pbmRleCkgcmV0dXJuICIiOwogICAgICAgIHZhciBzdHJpbmcgPSBtYXRjaFswXTsKICAgICAgICByZXR1cm4gdGhpcy50YWlsID0gdGhpcy50YWlsLnN1YnN0cmluZyhzdHJpbmcubGVuZ3RoKSwgdGhpcy5wb3MgKz0gc3RyaW5nLmxlbmd0aCwgc3RyaW5nOwogICAgICB9LCBTY2FubmVyLnByb3RvdHlwZS5zY2FuVW50aWwgPSBmdW5jdGlvbiBzY2FuVW50aWwocmUpIHsKICAgICAgICB2YXIgaW5kZXggPSB0aGlzLnRhaWwuc2VhcmNoKHJlKSwKICAgICAgICAgICAgbWF0Y2g7CgogICAgICAgIHN3aXRjaCAoaW5kZXgpIHsKICAgICAgICAgIGNhc2UgLTE6CiAgICAgICAgICAgIG1hdGNoID0gdGhpcy50YWlsLCB0aGlzLnRhaWwgPSAiIjsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBtYXRjaCA9ICIiOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBtYXRjaCA9IHRoaXMudGFpbC5zdWJzdHJpbmcoMCwgaW5kZXgpLCB0aGlzLnRhaWwgPSB0aGlzLnRhaWwuc3Vic3RyaW5nKGluZGV4KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLnBvcyArPSBtYXRjaC5sZW5ndGgsIG1hdGNoOwogICAgICB9LCBDb250ZXh0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2aWV3KSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb250ZXh0KHZpZXcsIHRoaXMpOwogICAgICB9LCBDb250ZXh0LnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbiBsb29rdXAobmFtZSkgewogICAgICAgIHZhciBjYWNoZSA9IHRoaXMuY2FjaGUsCiAgICAgICAgICAgIHZhbHVlOwogICAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgdmFsdWUgPSBjYWNoZVtuYW1lXTtlbHNlIHsKICAgICAgICAgIGZvciAodmFyIGNvbnRleHQgPSB0aGlzLCBpbnRlcm1lZGlhdGVWYWx1ZSwgbmFtZXMsIGluZGV4LCBsb29rdXBIaXQgPSAhMTsgY29udGV4dDspIHsKICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZigiLiIpID4gMCkgZm9yIChpbnRlcm1lZGlhdGVWYWx1ZSA9IGNvbnRleHQudmlldywgbmFtZXMgPSBuYW1lLnNwbGl0KCIuIiksIGluZGV4ID0gMDsgbnVsbCAhPSBpbnRlcm1lZGlhdGVWYWx1ZSAmJiBpbmRleCA8IG5hbWVzLmxlbmd0aDspIHsKICAgICAgICAgICAgICBpbmRleCA9PT0gbmFtZXMubGVuZ3RoIC0gMSAmJiAobG9va3VwSGl0ID0gaGFzUHJvcGVydHkoaW50ZXJtZWRpYXRlVmFsdWUsIG5hbWVzW2luZGV4XSkgfHwgcHJpbWl0aXZlSGFzT3duUHJvcGVydHkoaW50ZXJtZWRpYXRlVmFsdWUsIG5hbWVzW2luZGV4XSkpLCBpbnRlcm1lZGlhdGVWYWx1ZSA9IGludGVybWVkaWF0ZVZhbHVlW25hbWVzW2luZGV4KytdXTsKICAgICAgICAgICAgfSBlbHNlIGludGVybWVkaWF0ZVZhbHVlID0gY29udGV4dC52aWV3W25hbWVdLCBsb29rdXBIaXQgPSBoYXNQcm9wZXJ0eShjb250ZXh0LnZpZXcsIG5hbWUpOwoKICAgICAgICAgICAgaWYgKGxvb2t1cEhpdCkgewogICAgICAgICAgICAgIHZhbHVlID0gaW50ZXJtZWRpYXRlVmFsdWU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0LnBhcmVudDsKICAgICAgICAgIH0KCiAgICAgICAgICBjYWNoZVtuYW1lXSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSkgJiYgKHZhbHVlID0gdmFsdWUuY2FsbCh0aGlzLnZpZXcpKSwgdmFsdWU7CiAgICAgIH0sIFdyaXRlci5wcm90b3R5cGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uIGNsZWFyQ2FjaGUoKSB7CiAgICAgICAgdGhpcy5jYWNoZSA9IHt9OwogICAgICB9LCBXcml0ZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UodGVtcGxhdGUsIHRhZ3MpIHsKICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLmNhY2hlLAogICAgICAgICAgICBjYWNoZUtleSA9IHRlbXBsYXRlICsgIjoiICsgKHRhZ3MgfHwgbXVzdGFjaGUudGFncykuam9pbigiOiIpLAogICAgICAgICAgICB0b2tlbnMgPSBjYWNoZVtjYWNoZUtleV07CiAgICAgICAgcmV0dXJuIG51bGwgPT0gdG9rZW5zICYmICh0b2tlbnMgPSBjYWNoZVtjYWNoZUtleV0gPSBwYXJzZVRlbXBsYXRlKHRlbXBsYXRlLCB0YWdzKSksIHRva2VuczsKICAgICAgfSwgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodGVtcGxhdGUsIHZpZXcsIHBhcnRpYWxzLCB0YWdzKSB7CiAgICAgICAgdmFyIHRva2VucyA9IHRoaXMucGFyc2UodGVtcGxhdGUsIHRhZ3MpLAogICAgICAgICAgICBjb250ZXh0ID0gdmlldyBpbnN0YW5jZW9mIENvbnRleHQgPyB2aWV3IDogbmV3IENvbnRleHQodmlldyk7CiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyVG9rZW5zKHRva2VucywgY29udGV4dCwgcGFydGlhbHMsIHRlbXBsYXRlLCB0YWdzKTsKICAgICAgfSwgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXJUb2tlbnMgPSBmdW5jdGlvbiByZW5kZXJUb2tlbnModG9rZW5zLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSwgdGFncykgewogICAgICAgIGZvciAodmFyIGJ1ZmZlciA9ICIiLCB0b2tlbiwgc3ltYm9sLCB2YWx1ZSwgaSA9IDAsIG51bVRva2VucyA9IHRva2Vucy5sZW5ndGg7IGkgPCBudW1Ub2tlbnM7ICsraSkgewogICAgICAgICAgdmFsdWUgPSB2b2lkIDAsICIjIiA9PT0gKHN5bWJvbCA9ICh0b2tlbiA9IHRva2Vuc1tpXSlbMF0pID8gdmFsdWUgPSB0aGlzLnJlbmRlclNlY3Rpb24odG9rZW4sIGNvbnRleHQsIHBhcnRpYWxzLCBvcmlnaW5hbFRlbXBsYXRlKSA6ICJeIiA9PT0gc3ltYm9sID8gdmFsdWUgPSB0aGlzLnJlbmRlckludmVydGVkKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSkgOiAiPiIgPT09IHN5bWJvbCA/IHZhbHVlID0gdGhpcy5yZW5kZXJQYXJ0aWFsKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgdGFncykgOiAiJiIgPT09IHN5bWJvbCA/IHZhbHVlID0gdGhpcy51bmVzY2FwZWRWYWx1ZSh0b2tlbiwgY29udGV4dCkgOiAibmFtZSIgPT09IHN5bWJvbCA/IHZhbHVlID0gdGhpcy5lc2NhcGVkVmFsdWUodG9rZW4sIGNvbnRleHQpIDogInRleHQiID09PSBzeW1ib2wgJiYgKHZhbHVlID0gdGhpcy5yYXdWYWx1ZSh0b2tlbikpLCB2b2lkIDAgIT09IHZhbHVlICYmIChidWZmZXIgKz0gdmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGJ1ZmZlcjsKICAgICAgfSwgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXJTZWN0aW9uID0gZnVuY3Rpb24gcmVuZGVyU2VjdGlvbih0b2tlbiwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgICAgIGJ1ZmZlciA9ICIiLAogICAgICAgICAgICB2YWx1ZSA9IGNvbnRleHQubG9va3VwKHRva2VuWzFdKTsKCiAgICAgICAgZnVuY3Rpb24gc3ViUmVuZGVyKHRlbXBsYXRlKSB7CiAgICAgICAgICByZXR1cm4gc2VsZi5yZW5kZXIodGVtcGxhdGUsIGNvbnRleHQsIHBhcnRpYWxzKTsKICAgICAgICB9CgogICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSBmb3IgKHZhciBqID0gMCwgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGogPCB2YWx1ZUxlbmd0aDsgKytqKSB7CiAgICAgICAgICAgIGJ1ZmZlciArPSB0aGlzLnJlbmRlclRva2Vucyh0b2tlbls0XSwgY29udGV4dC5wdXNoKHZhbHVlW2pdKSwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpOwogICAgICAgICAgfSBlbHNlIGlmICgib2JqZWN0IiA9PSBfdHlwZW9mMih2YWx1ZSkgfHwgInN0cmluZyIgPT0gdHlwZW9mIHZhbHVlIHx8ICJudW1iZXIiID09IHR5cGVvZiB2YWx1ZSkgYnVmZmVyICs9IHRoaXMucmVuZGVyVG9rZW5zKHRva2VuWzRdLCBjb250ZXh0LnB1c2godmFsdWUpLCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7ZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHsKICAgICAgICAgICAgaWYgKCJzdHJpbmciICE9IHR5cGVvZiBvcmlnaW5hbFRlbXBsYXRlKSB0aHJvdyBuZXcgRXJyb3IoIkNhbm5vdCB1c2UgaGlnaGVyLW9yZGVyIHNlY3Rpb25zIHdpdGhvdXQgdGhlIG9yaWdpbmFsIHRlbXBsYXRlIik7CiAgICAgICAgICAgIG51bGwgIT0gKHZhbHVlID0gdmFsdWUuY2FsbChjb250ZXh0LnZpZXcsIG9yaWdpbmFsVGVtcGxhdGUuc2xpY2UodG9rZW5bM10sIHRva2VuWzVdKSwgc3ViUmVuZGVyKSkgJiYgKGJ1ZmZlciArPSB2YWx1ZSk7CiAgICAgICAgICB9IGVsc2UgYnVmZmVyICs9IHRoaXMucmVuZGVyVG9rZW5zKHRva2VuWzRdLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7CiAgICAgICAgICByZXR1cm4gYnVmZmVyOwogICAgICAgIH0KICAgICAgfSwgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXJJbnZlcnRlZCA9IGZ1bmN0aW9uIHJlbmRlckludmVydGVkKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSkgewogICAgICAgIHZhciB2YWx1ZSA9IGNvbnRleHQubG9va3VwKHRva2VuWzFdKTsKICAgICAgICBpZiAoIXZhbHVlIHx8IGlzQXJyYXkodmFsdWUpICYmIDAgPT09IHZhbHVlLmxlbmd0aCkgcmV0dXJuIHRoaXMucmVuZGVyVG9rZW5zKHRva2VuWzRdLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7CiAgICAgIH0sIFdyaXRlci5wcm90b3R5cGUucmVuZGVyUGFydGlhbCA9IGZ1bmN0aW9uIHJlbmRlclBhcnRpYWwodG9rZW4sIGNvbnRleHQsIHBhcnRpYWxzLCB0YWdzKSB7CiAgICAgICAgaWYgKHBhcnRpYWxzKSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKHBhcnRpYWxzKSA/IHBhcnRpYWxzKHRva2VuWzFdKSA6IHBhcnRpYWxzW3Rva2VuWzFdXTsKICAgICAgICAgIHJldHVybiBudWxsICE9IHZhbHVlID8gdGhpcy5yZW5kZXJUb2tlbnModGhpcy5wYXJzZSh2YWx1ZSwgdGFncyksIGNvbnRleHQsIHBhcnRpYWxzLCB2YWx1ZSkgOiB2b2lkIDA7CiAgICAgICAgfQogICAgICB9LCBXcml0ZXIucHJvdG90eXBlLnVuZXNjYXBlZFZhbHVlID0gZnVuY3Rpb24gdW5lc2NhcGVkVmFsdWUodG9rZW4sIGNvbnRleHQpIHsKICAgICAgICB2YXIgdmFsdWUgPSBjb250ZXh0Lmxvb2t1cCh0b2tlblsxXSk7CiAgICAgICAgaWYgKG51bGwgIT0gdmFsdWUpIHJldHVybiB2YWx1ZTsKICAgICAgfSwgV3JpdGVyLnByb3RvdHlwZS5lc2NhcGVkVmFsdWUgPSBmdW5jdGlvbiBlc2NhcGVkVmFsdWUodG9rZW4sIGNvbnRleHQpIHsKICAgICAgICB2YXIgdmFsdWUgPSBjb250ZXh0Lmxvb2t1cCh0b2tlblsxXSk7CiAgICAgICAgaWYgKG51bGwgIT0gdmFsdWUpIHJldHVybiBtdXN0YWNoZS5lc2NhcGUodmFsdWUpOwogICAgICB9LCBXcml0ZXIucHJvdG90eXBlLnJhd1ZhbHVlID0gZnVuY3Rpb24gcmF3VmFsdWUodG9rZW4pIHsKICAgICAgICByZXR1cm4gdG9rZW5bMV07CiAgICAgIH0sIG11c3RhY2hlLm5hbWUgPSAibXVzdGFjaGUuanMiLCBtdXN0YWNoZS52ZXJzaW9uID0gIjMuMC4xIiwgbXVzdGFjaGUudGFncyA9IFsie3siLCAifX0iXTsKICAgICAgdmFyIGRlZmF1bHRXcml0ZXIgPSBuZXcgV3JpdGVyKCk7CiAgICAgIHJldHVybiBtdXN0YWNoZS5jbGVhckNhY2hlID0gZnVuY3Rpb24gY2xlYXJDYWNoZSgpIHsKICAgICAgICByZXR1cm4gZGVmYXVsdFdyaXRlci5jbGVhckNhY2hlKCk7CiAgICAgIH0sIG11c3RhY2hlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UodGVtcGxhdGUsIHRhZ3MpIHsKICAgICAgICByZXR1cm4gZGVmYXVsdFdyaXRlci5wYXJzZSh0ZW1wbGF0ZSwgdGFncyk7CiAgICAgIH0sIG11c3RhY2hlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0ZW1wbGF0ZSwgdmlldywgcGFydGlhbHMsIHRhZ3MpIHsKICAgICAgICBpZiAoInN0cmluZyIgIT0gdHlwZW9mIHRlbXBsYXRlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHRlbXBsYXRlISBUZW1wbGF0ZSBzaG91bGQgYmUgYSAic3RyaW5nIiBidXQgIicgKyB0eXBlU3RyKHRlbXBsYXRlKSArICciIHdhcyBnaXZlbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgZm9yIG11c3RhY2hlI3JlbmRlcih0ZW1wbGF0ZSwgdmlldywgcGFydGlhbHMpJyk7CiAgICAgICAgcmV0dXJuIGRlZmF1bHRXcml0ZXIucmVuZGVyKHRlbXBsYXRlLCB2aWV3LCBwYXJ0aWFscywgdGFncyk7CiAgICAgIH0sIG11c3RhY2hlLnRvX2h0bWwgPSBmdW5jdGlvbiB0b19odG1sKHRlbXBsYXRlLCB2aWV3LCBwYXJ0aWFscywgc2VuZCkgewogICAgICAgIHZhciByZXN1bHQgPSBtdXN0YWNoZS5yZW5kZXIodGVtcGxhdGUsIHZpZXcsIHBhcnRpYWxzKTsKICAgICAgICBpZiAoIWlzRnVuY3Rpb24oc2VuZCkpIHJldHVybiByZXN1bHQ7CiAgICAgICAgc2VuZChyZXN1bHQpOwogICAgICB9LCBtdXN0YWNoZS5lc2NhcGUgPSBlc2NhcGVIdG1sLCBtdXN0YWNoZS5TY2FubmVyID0gU2Nhbm5lciwgbXVzdGFjaGUuQ29udGV4dCA9IENvbnRleHQsIG11c3RhY2hlLldyaXRlciA9IFdyaXRlciwgbXVzdGFjaGU7CiAgICB9KTsKICB9KSwKICAgICAgVGVtcGxhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBUZW1wbGF0ZSh0ZW1wbGF0ZXMsIGNvbnRlbnRzLCBvcmRlcikgewogICAgICB0aGlzLnRlbXBsYXRlcyA9IHRlbXBsYXRlcywgdGhpcy5jb250ZW50cyA9IGNvbnRlbnRzLCB0aGlzLm9yZGVyID0gb3JkZXI7CiAgICB9CgogICAgdmFyIF9wcm90bzsKCiAgICByZXR1cm4gVGVtcGxhdGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihkYXRhLCBjYikgewogICAgICB2YXIgb3V0cHV0ID0gbXVzdGFjaGUucmVuZGVyKHRoaXMubWFzdGVyVGVtcGxhdGUsIGRhdGEpOwogICAgICByZXR1cm4gY2IgPyBjYihvdXRwdXQpIDogb3V0cHV0OwogICAgfSwgX2NyZWF0ZUNsYXNzKFRlbXBsYXRlLCBbewogICAgICBrZXk6ICJtYXN0ZXJUZW1wbGF0ZSIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgIHJldHVybiB0aGlzLm9yZGVyLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHsKICAgICAgICAgIHZhciBzdHJpbmcgPSAiIjsKICAgICAgICAgIHJldHVybiBfdGhpcy5jb250ZW50c1trZXldICYmIChzdHJpbmcgPSBfdGhpcy50ZW1wbGF0ZXNba2V5XSB8fCAiIiksIGFjYyArIHN0cmluZzsKICAgICAgICB9LCAiIik7CiAgICAgIH0KICAgIH1dKSwgVGVtcGxhdGU7CiAgfSgpLAogICAgICBzdHlsZXNUZW1wbGF0ZSA9ICJ7eyNzZWxlY3RvcnN9fXt7I21lZGlhfX0ge3ttZWRpYX19IHsge3svbWVkaWF9fXt7c2VsZWN0b3J9fSB7IHt7I2RlY2xhcmF0aW9uc319e3twcm9wZXJ0eX19OiB7e3t2YWx1ZX19fTt7ey9kZWNsYXJhdGlvbnN9fSB9IHt7I21lZGlhfX0gfSB7ey9tZWRpYX19e3svc2VsZWN0b3JzfX0iLAogICAgICBjb25kaXRpb25hbFN0eWxlcyA9ICIuc2hvcGlmeS1idXlfX21vZGFsIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmlzLWFjdGl2ZSAuc2hvcGlmeS1idXlfX21vZGFsIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBvcGFjaXR5OiAxO1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgfVxuIjsKCiAgZnVuY3Rpb24gYWRkQ2xhc3NUb0VsZW1lbnQoY2xhc3NOYW1lLCBlbGVtZW50KSB7CiAgICBpZiAoY2xhc3NOYW1lKSBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO2Vsc2UgewogICAgICB2YXIgY2xhc3NlczsKICAgICAgaWYgKGVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KCIgIikuaW5kZXhPZihjbGFzc05hbWUpID4gLTEpIHJldHVybjsKICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoImNsYXNzIiwgIiIuY29uY2F0KGVsZW1lbnQuY2xhc3NOYW1lLCAiICIpLmNvbmNhdChjbGFzc05hbWUpKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlbW92ZUNsYXNzRnJvbUVsZW1lbnQoY2xhc3NOYW1lLCBlbGVtZW50KSB7CiAgICBjbGFzc05hbWUgJiYgKGVsZW1lbnQuY2xhc3NMaXN0ID8gZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSkgOiBlbGVtZW50LnNldEF0dHJpYnV0ZSgiY2xhc3MiLCBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKGNsYXNzTmFtZSwgIiIpKSk7CiAgfQoKICB2YXIgaWZyYW1lU3R5bGVzID0gewogICAgd2lkdGg6ICIxMDAlIiwKICAgIG92ZXJmbG93OiAiaGlkZGVuIiwKICAgIGJvcmRlcjogIm5vbmUiCiAgfSwKICAgICAgaWZyYW1lQXR0cnMgPSB7CiAgICBob3Jpem9udGFsc2Nyb2xsaW5nOiAibm8iLAogICAgdmVydGljYWxzY3JvbGxpbmc6ICJubyIsCiAgICBhbGxvd1RyYW5zcGFyZW5jeTogInRydWUiLAogICAgZnJhbWVCb3JkZXI6ICIwIiwKICAgIHNjcm9sbGluZzogIm5vIgogIH0sCiAgICAgIHdlYmZvbnRTY3JpcHQgPSAiaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy93ZWJmb250LzEuNi4xNi93ZWJmb250LmpzIjsKCiAgZnVuY3Rpb24gaXNQc2V1ZG9TZWxlY3RvcihrZXkpIHsKICAgIHJldHVybiAiOiIgPT09IGtleS5jaGFyQXQoMCk7CiAgfQoKICBmdW5jdGlvbiBpc01lZGlhKGtleSkgewogICAgcmV0dXJuICJAIiA9PT0ga2V5LmNoYXJBdCgwKTsKICB9CgogIGZ1bmN0aW9uIGlzVmFsdWUkMSh0ZXN0KSB7CiAgICByZXR1cm4gInN0cmluZyIgPT0gdHlwZW9mIHRlc3QgfHwgIm51bWJlciIgPT0gdHlwZW9mIHRlc3Q7CiAgfQoKICBmdW5jdGlvbiBydWxlRGVjbGFyYXRpb25zKHJ1bGUpIHsKICAgIHJldHVybiBPYmplY3Qua2V5cyhydWxlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkgewogICAgICByZXR1cm4gaXNWYWx1ZSQxKHJ1bGVba2V5XSk7CiAgICB9KS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgICByZXR1cm4gewogICAgICAgIHByb3BlcnR5OiBrZXksCiAgICAgICAgdmFsdWU6IHJ1bGVba2V5XQogICAgICB9OwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBzZWxlY3RvclN0eWxlR3JvdXAoc2VsZWN0b3IsIHNlbGVjdG9yQ2xhc3MsIGNsYXNzZXMpIHsKICAgIHZhciBzdHlsZUdyb3VwID0gW107CgogICAgaWYgKHNlbGVjdG9yICYmIHNlbGVjdG9yQ2xhc3MpIHsKICAgICAgdmFyIGZvcm1hdHRlZFNlbGVjdG9yID0gc2VsZWN0b3JDbGFzcy5zcGxpdCgiICIpLmpvaW4oIi4iKTsKICAgICAgaXNQc2V1ZG9TZWxlY3Rvcihmb3JtYXR0ZWRTZWxlY3RvcikgfHwgKGZvcm1hdHRlZFNlbGVjdG9yID0gIi4iLmNvbmNhdChmb3JtYXR0ZWRTZWxlY3RvcikpLCBzdHlsZUdyb3VwID0gT2JqZWN0LmtleXMoc2VsZWN0b3IpLmZpbHRlcihmdW5jdGlvbiAoZGVjS2V5KSB7CiAgICAgICAgcmV0dXJuICFpc1ZhbHVlJDEoc2VsZWN0b3JbZGVjS2V5XSk7CiAgICAgIH0pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBkZWNLZXkpIHsKICAgICAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3Nlc1tkZWNLZXldIHx8IGRlY0tleTsKICAgICAgICByZXR1cm4gYWNjLmNvbmNhdChzZWxlY3RvclN0eWxlR3JvdXAoc2VsZWN0b3JbZGVjS2V5XSwgY2xhc3NOYW1lLCBjbGFzc2VzKS5tYXAoZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgICB2YXIgZ3JvdXBTZWxlY3RvciA9ICIiOwogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgc2VsZWN0b3I6IGdyb3VwU2VsZWN0b3IgPSBpc1BzZXVkb1NlbGVjdG9yKGdyb3VwLnNlbGVjdG9yKSA/ICIiLmNvbmNhdChmb3JtYXR0ZWRTZWxlY3RvcikuY29uY2F0KGdyb3VwLnNlbGVjdG9yKSA6IGlzTWVkaWEoZGVjS2V5KSA/IGZvcm1hdHRlZFNlbGVjdG9yIDogIiIuY29uY2F0KGZvcm1hdHRlZFNlbGVjdG9yLCAiICIpLmNvbmNhdChncm91cC5zZWxlY3RvciksCiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogZ3JvdXAuZGVjbGFyYXRpb25zLAogICAgICAgICAgICBtZWRpYTogaXNNZWRpYShkZWNLZXkpID8gZGVjS2V5IDogbnVsbAogICAgICAgICAgfTsKICAgICAgICB9KSk7CiAgICAgIH0sIFtdKTsKICAgICAgdmFyIGRlY2xhcmF0aW9ucyA9IHJ1bGVEZWNsYXJhdGlvbnMoc2VsZWN0b3IpOwogICAgICBkZWNsYXJhdGlvbnMubGVuZ3RoICYmIHN0eWxlR3JvdXAucHVzaCh7CiAgICAgICAgc2VsZWN0b3I6ICIiLmNvbmNhdChmb3JtYXR0ZWRTZWxlY3RvciksCiAgICAgICAgZGVjbGFyYXRpb25zOiBkZWNsYXJhdGlvbnMKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIHN0eWxlR3JvdXA7CiAgfQoKICB2YXIgaWZyYW1lID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gaWZyYW1lKG5vZGUsIGNvbmZpZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlmcmFtZSIpLCB0aGlzLnBhcmVudCA9IG5vZGUsIHRoaXMuc3R5bGVzaGVldCA9IGNvbmZpZy5zdHlsZXNoZWV0LCB0aGlzLmN1c3RvbVN0eWxlc0hhc2ggPSBjb25maWcuY3VzdG9tU3R5bGVzIHx8IHt9LCB0aGlzLmNsYXNzZXMgPSBjb25maWcuY2xhc3NlcywgdGhpcy5icm93c2VyRmVhdHVyZXMgPSBjb25maWcuYnJvd3NlckZlYXR1cmVzLCB0aGlzLmdvb2dsZUZvbnRzID0gY29uZmlnLmdvb2dsZUZvbnRzIHx8IFtdLCB0aGlzLm5hbWUgPSBjb25maWcubmFtZSwgY29uZmlnLndpZHRoICYmIHRoaXMuc2V0V2lkdGgoY29uZmlnLndpZHRoKSwgT2JqZWN0LmtleXMoaWZyYW1lU3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfdGhpcy5lbC5zdHlsZVtrZXldID0gaWZyYW1lU3R5bGVzW2tleV07CiAgICAgIH0pLCBPYmplY3Qua2V5cyhpZnJhbWVBdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgcmV0dXJuIF90aGlzLmVsLnNldEF0dHJpYnV0ZShrZXksIGlmcmFtZUF0dHJzW2tleV0pOwogICAgICB9KSwgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoIm5hbWUiLCBjb25maWcubmFtZSksIHRoaXMuc3R5bGVUYWcgPSBudWxsOwogICAgfQoKICAgIHZhciBfcHJvdG8gPSBpZnJhbWUucHJvdG90eXBlOwogICAgcmV0dXJuIF9wcm90by5sb2FkID0gZnVuY3Rpb24gbG9hZCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICBfdGhpczIuZWwub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi5sb2FkRm9udHMoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5hcHBlbmRTdHlsZVRhZygpLCByZXNvbHZlKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9LCBfdGhpczIucGFyZW50LmFwcGVuZENoaWxkKF90aGlzMi5lbCk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLmxvYWRGb250cyA9IGZ1bmN0aW9uIGxvYWRGb250cygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5nb29nbGVGb250cyAmJiB0aGlzLmdvb2dsZUZvbnRzLmxlbmd0aCA/IHRoaXMubG9hZEZvbnRTY3JpcHQoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgIHJldHVybiB3aW5kb3cuV2ViRm9udCA/ICh3aW5kb3cuV2ViRm9udC5sb2FkKHsKICAgICAgICAgICAgZ29vZ2xlOiB7CiAgICAgICAgICAgICAgZmFtaWxpZXM6IF90aGlzMy5nb29nbGVGb250cwogICAgICAgICAgICB9LAogICAgICAgICAgICBmb250YWN0aXZlOiBmdW5jdGlvbiBmb250YWN0aXZlKCkgewogICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbnRleHQ6IF90aGlzMy5lbC5jb250ZW50V2luZG93IHx8IGZyYW1lc1tfdGhpczMubmFtZV0KICAgICAgICAgIH0pLCB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7CiAgICAgICAgICB9LCAxZTMpKSA6IHJlc29sdmUoKTsKICAgICAgICB9KTsKICAgICAgfSkgOiBQcm9taXNlLnJlc29sdmUoITApOwogICAgfSwgX3Byb3RvLmxvYWRGb250U2NyaXB0ID0gZnVuY3Rpb24gbG9hZEZvbnRTY3JpcHQoKSB7CiAgICAgIGlmICh3aW5kb3cuV2ViRm9udCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgICB2YXIgZm9udFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICBmb250U2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICB9LCBmb250U2NyaXB0LnNyYyA9IHdlYmZvbnRTY3JpcHQsIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZm9udFNjcmlwdCksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH0sIDUwMCk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLnNldFdpZHRoID0gZnVuY3Rpb24gc2V0V2lkdGgod2lkdGgpIHsKICAgICAgdGhpcy5wYXJlbnQuc3R5bGVbIm1heC13aWR0aCJdID0gd2lkdGg7CiAgICB9LCBfcHJvdG8uYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhjbGFzc05hbWUpIHsKICAgICAgYWRkQ2xhc3NUb0VsZW1lbnQoY2xhc3NOYW1lLCB0aGlzLnBhcmVudCk7CiAgICB9LCBfcHJvdG8ucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHsKICAgICAgcmVtb3ZlQ2xhc3NGcm9tRWxlbWVudChjbGFzc05hbWUsIHRoaXMucGFyZW50KTsKICAgIH0sIF9wcm90by5zZXROYW1lID0gZnVuY3Rpb24gc2V0TmFtZShuYW1lKSB7CiAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCJuYW1lIiwgbmFtZSk7CiAgICB9LCBfcHJvdG8udXBkYXRlU3R5bGVzID0gZnVuY3Rpb24gdXBkYXRlU3R5bGVzKGN1c3RvbVN0eWxlcywgZ29vZ2xlRm9udHMpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5nb29nbGVGb250cyA9IGdvb2dsZUZvbnRzLCB0aGlzLmxvYWRGb250cygpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNC5jdXN0b21TdHlsZXNIYXNoID0gY3VzdG9tU3R5bGVzLCBfdGhpczQuc3R5bGVUYWcuaW5uZXJIVE1MID0gX3RoaXM0LmNzczsKICAgICAgfSk7CiAgICB9LCBfcHJvdG8uYXBwZW5kU3R5bGVUYWcgPSBmdW5jdGlvbiBhcHBlbmRTdHlsZVRhZygpIHsKICAgICAgdGhpcy5kb2N1bWVudC5oZWFkICYmICh0aGlzLnN0eWxlVGFnID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpLCB0aGlzLnN0eWxlVGFnLnN0eWxlU2hlZXQgPyB0aGlzLnN0eWxlVGFnLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRoaXMuY3NzIDogdGhpcy5zdHlsZVRhZy5hcHBlbmRDaGlsZCh0aGlzLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuY3NzKSksIHRoaXMuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlVGFnKSk7CiAgICB9LCBfY3JlYXRlQ2xhc3MoaWZyYW1lLCBbewogICAgICBrZXk6ICJ3aWR0aCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5zdHlsZVsibWF4LXdpZHRoIl07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZG9jdW1lbnQiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgZG9jOwogICAgICAgIHJldHVybiB0aGlzLmVsLmNvbnRlbnRXaW5kb3cgJiYgdGhpcy5lbC5jb250ZW50V2luZG93LmRvY3VtZW50LmJvZHkgPyBkb2MgPSB0aGlzLmVsLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQgOiB0aGlzLmVsLmRvY3VtZW50ICYmIHRoaXMuZWwuZG9jdW1lbnQuYm9keSA/IGRvYyA9IHRoaXMuZWwuZG9jdW1lbnQgOiB0aGlzLmVsLmNvbnRlbnREb2N1bWVudCAmJiB0aGlzLmVsLmNvbnRlbnREb2N1bWVudC5ib2R5ICYmIChkb2MgPSB0aGlzLmVsLmNvbnRlbnREb2N1bWVudCksIGRvYzsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJjdXN0b21TdHlsZXMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcywKICAgICAgICAgICAgY3VzdG9tU3R5bGVzID0gW107CgogICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmN1c3RvbVN0eWxlc0hhc2gpLmZvckVhY2goZnVuY3Rpb24gKHR5cGVLZXkpIHsKICAgICAgICAgIF90aGlzNS5jdXN0b21TdHlsZXNIYXNoW3R5cGVLZXldICYmIE9iamVjdC5rZXlzKF90aGlzNS5jdXN0b21TdHlsZXNIYXNoW3R5cGVLZXldKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgdmFyIHN0eWxlR3JvdXAgPSBzZWxlY3RvclN0eWxlR3JvdXAoX3RoaXM1LmN1c3RvbVN0eWxlc0hhc2hbdHlwZUtleV1ba2V5XSwgX3RoaXM1LmNsYXNzZXNbdHlwZUtleV1ba2V5XSwgX3RoaXM1LmNsYXNzZXNbdHlwZUtleV0pOwogICAgICAgICAgICBjdXN0b21TdHlsZXMgPSBjdXN0b21TdHlsZXMuY29uY2F0KHN0eWxlR3JvdXApOwogICAgICAgICAgfSk7CiAgICAgICAgfSksIGN1c3RvbVN0eWxlczsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJjb25kaXRpb25hbENTUyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLmJyb3dzZXJGZWF0dXJlcy50cmFuc2l0aW9uICYmIHRoaXMuYnJvd3NlckZlYXR1cmVzLnRyYW5zZm9ybSAmJiB0aGlzLmJyb3dzZXJGZWF0dXJlcy5hbmltYXRpb24gPyAiIiA6IGNvbmRpdGlvbmFsU3R5bGVzOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImNzcyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciBjb21waWxlZCA9IG11c3RhY2hlLnJlbmRlcihzdHlsZXNUZW1wbGF0ZSwgewogICAgICAgICAgc2VsZWN0b3JzOiB0aGlzLmN1c3RvbVN0eWxlcwogICAgICAgIH0pOwogICAgICAgIHJldHVybiAiIi5jb25jYXQodGhpcy5zdHlsZXNoZWV0LCAiIFxuICIpLmNvbmNhdChjb21waWxlZCwgIiBcbiAiKS5jb25jYXQodGhpcy5jb25kaXRpb25hbENTUyk7CiAgICAgIH0KICAgIH1dKSwgaWZyYW1lOwogIH0oKSwKICAgICAgc3R5bGVzID0gewogICAgY2FydDogJ2h0bWwsIGJvZHksIGgxLCBoMiwgaDMsIGg0LCBoNSwgcCB7ICAgcGFkZGluZzogMDsgICBtYXJnaW46IDA7IH0gKiB7ICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94OyAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfSBib2R5LCBodG1sIHsgICBtaW4taGVpZ2h0OiAxMDAlOyB9IGh0bWwgeyAgIGZvbnQtZmFtaWx5OiAiSGVsdmV0aWNhIE5ldWUiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyAgIGZvbnQtc2l6ZTogMTRweDsgICBsaW5lLWhlaWdodDogMS4yOyAgIGNvbG9yOiAjNGM0YzRjOyAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7ICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7ICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsgfSBzZWxlY3QgeyAgIHRleHQtcmVuZGVyaW5nOiBhdXRvICFpbXBvcnRhbnQ7IH0gdWwgeyAgIGxpc3Qtc3R5bGU6IG5vbmU7ICAgcGFkZGluZy1sZWZ0OiAwOyAgIG1hcmdpbjogMDsgfSBpbWcgeyAgIGRpc3BsYXk6IGJsb2NrOyAgIG1heC13aWR0aDogMTAwJTsgfSBpbnB1dCB7ICAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7ICAgbWFyZ2luOiAwOyB9IC5jbGVhcmZpeDphZnRlciB7ICAgICBjb250ZW50OiAiIjsgICAgIGRpc3BsYXk6IHRhYmxlOyAgICAgY2xlYXI6IGJvdGg7ICAgfSAudmlzdWFsbHloaWRkZW4geyAgIGJvcmRlcjogMDsgICBoZWlnaHQ6IDFweDsgICBtYXJnaW46IC0xcHg7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgICBwYWRkaW5nOiAwOyAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgICB3aWR0aDogMXB4OyB9IC5jb21wb25lbnQtY29udGFpbmVyIHsgICBvdmVyZmxvdzogaGlkZGVuOyB9IC5zaG9waWZ5LWJ1eV9fdHlwZS0tY2VudGVyIHsgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH0gLnNob3BpZnktYnV5LS12aXN1YWxseS1oaWRkZW4geyAgIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50OyAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTsgICBwYWRkaW5nOjAgIWltcG9ydGFudDsgICBib3JkZXI6MCAhaW1wb3J0YW50OyAgIGhlaWdodDogMXB4ICFpbXBvcnRhbnQ7ICAgd2lkdGg6IDFweCAhaW1wb3J0YW50OyAgIG92ZXJmbG93OiBoaWRkZW47IH0gLnNob3BpZnktYnV5X19idG4geyAgIGNvbG9yOiAjZmZmOyAgIGZvbnQtc2l6ZTogMTVweDsgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzhiNjU3OyAgIHBhZGRpbmc6IDEycHggNDBweDsgICBsZXR0ZXItc3BhY2luZzogLjNweDsgICBkaXNwbGF5OiBibG9jazsgICBib3JkZXItcmFkaXVzOiAzcHg7ICAgY3Vyc29yOiBwb2ludGVyOyAgIC13ZWJraXQtdHJhbnNpdGlvbjogYmFja2dyb3VuZCAyMDBtcyBlYXNlOyAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMjAwbXMgZWFzZTsgICBtYXgtd2lkdGg6IDEwMCU7ICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgICBsaW5lLWhlaWdodDogMS4yOyAgIGJvcmRlcjogMDsgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7ICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lIH0gLnNob3BpZnktYnV5X19idG46aG92ZXIsICAgLnNob3BpZnktYnV5X19idG46Zm9jdXMgeyAgICAgYmFja2dyb3VuZC1jb2xvcjogIzVmOWQzZTsgICB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1wYXJlbnQgeyAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAgIGJvcmRlcjogMDsgICBwYWRkaW5nOiAwOyAgIGN1cnNvcjogcG9pbnRlciB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1wYXJlbnQ6aG92ZXIgLnByb2R1Y3RfX3ZhcmlhbnQtaW1nLCAuc2hvcGlmeS1idXlfX2J0bi0tcGFyZW50OmZvY3VzIC5wcm9kdWN0X192YXJpYW50LWltZyB7ICAgICAgIG9wYWNpdHk6IC43OyAgICAgfSAuc2hvcGlmeS1idXlfX2J0bi0tY2FydC10YWIgeyAgIHBhZGRpbmc6IDVweCAxMXB4OyAgIGJvcmRlci1yYWRpdXM6IDNweCAwIDAgM3B4OyAgIHBvc2l0aW9uOiBmaXhlZDsgICByaWdodDogMDsgICB0b3A6IDUwJTsgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDEwMCUsIC01MCUpOyAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwJSwgLTUwJSk7ICAgb3BhY2l0eTogMDsgICBtaW4td2lkdGg6IGluaGVyaXQ7ICAgd2lkdGg6IGF1dG87ICAgaGVpZ2h0OiBhdXRvOyAgIHotaW5kZXg6IDIxNDc0ODM2NDcgfSAuc2hvcGlmeS1idXlfX2J0bi0tY2FydC10YWIuaXMtYWN0aXZlIHsgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOyAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7ICAgICBvcGFjaXR5OiAxOyAgIH0gLnNob3BpZnktYnV5X19idG5fX2NvdW50ZXIgeyAgIGRpc3BsYXk6IGJsb2NrOyAgIG1hcmdpbjogMCBhdXRvIDEwcHggYXV0bzsgICBmb250LXNpemU6IDE4cHg7IH0gLnNob3BpZnktYnV5X19pY29uLWNhcnQtLXNpZGUgeyAgIGhlaWdodDogMjBweDsgICB3aWR0aDogMjBweDsgfSAuc2hvcGlmeS1idXlfX2J0bltkaXNhYmxlZF0geyAgIGJhY2tncm91bmQtY29sb3I6ICM5OTk7ICAgcG9pbnRlci1ldmVudHM6IG5vbmU7IH0gLnNob3BpZnktYnV5X19idG4tLWNsb3NlIHsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgcmlnaHQ6IDlweDsgICB0b3A6IDhweDsgICBmb250LXNpemU6IDM1cHg7ICAgY29sb3I6ICM3Njc2NzY7ICAgYm9yZGVyOiBub25lOyAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAgIC13ZWJraXQtdHJhbnNpdGlvbjogY29sb3IgMTAwbXMgZWFzZSwgLXdlYmtpdC10cmFuc2Zvcm0gMTAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiBjb2xvciAxMDBtcyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAxMDBtcyBlYXNlOyAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxMDBtcyBlYXNlLCBjb2xvciAxMDBtcyBlYXNlOyAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxMDBtcyBlYXNlLCBjb2xvciAxMDBtcyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAxMDBtcyBlYXNlOyAgIGN1cnNvcjogcG9pbnRlcjsgICBmb250LWZhbWlseTogIkhlbHZldGljYSBOZXVlIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgICBwYWRkaW5nLXJpZ2h0OiA5cHggfSAuc2hvcGlmeS1idXlfX2J0bi0tY2xvc2U6aG92ZXIgeyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMik7ICAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTsgICAgIGNvbG9yOiBoc2woMCwgMCUsIDQxLjI3NDUwOTgwMzklKTsgICB9IEAtd2Via2l0LWtleWZyYW1lcyBmbGlwSW4geyAgIGZyb20geyAgICAgbWF4LWhlaWdodDogMDsgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGV4KDkwZGVnKSB0cmFuc2xhdGV5KC01MCUpOyAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZXgoOTBkZWcpIHRyYW5zbGF0ZXkoLTUwJSk7ICAgICBtYXJnaW4tYm90dG9tOiAtNjVweDsgICAgIG9wYWNpdHk6IDA7ICAgfSAgICB0byB7ICAgICBtYXgtaGVpZ2h0OiBub25lOyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7ICAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZTsgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7ICAgICBvcGFjaXR5OiAxOyAgIH0gfSBAa2V5ZnJhbWVzIGZsaXBJbiB7ICAgZnJvbSB7ICAgICBtYXgtaGVpZ2h0OiAwOyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZXgoOTBkZWcpIHRyYW5zbGF0ZXkoLTUwJSk7ICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRleCg5MGRlZykgdHJhbnNsYXRleSgtNTAlKTsgICAgIG1hcmdpbi1ib3R0b206IC02NXB4OyAgICAgb3BhY2l0eTogMDsgICB9ICAgIHRvIHsgICAgIG1heC1oZWlnaHQ6IG5vbmU7ICAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTsgICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lOyAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsgICAgIG9wYWNpdHk6IDE7ICAgfSB9IEAtd2Via2l0LWtleWZyYW1lcyBmbGlwT3V0IHsgICBmcm9tIHsgICAgIG1heC1oZWlnaHQ6IG5vbmU7ICAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTsgICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lOyAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsgICAgIG9wYWNpdHk6IDE7ICAgfSAgICB0byB7ICAgICBtYXgtaGVpZ2h0OiAwOyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZXgoOTBkZWcpIHRyYW5zbGF0ZXkoLTUwJSk7ICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRleCg5MGRlZykgdHJhbnNsYXRleSgtNTAlKTsgICAgIG1hcmdpbi1ib3R0b206IC02NXB4OyAgICAgb3BhY2l0eTogMDsgICB9IH0gQGtleWZyYW1lcyBmbGlwT3V0IHsgICBmcm9tIHsgICAgIG1heC1oZWlnaHQ6IG5vbmU7ICAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTsgICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lOyAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsgICAgIG9wYWNpdHk6IDE7ICAgfSAgICB0byB7ICAgICBtYXgtaGVpZ2h0OiAwOyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZXgoOTBkZWcpIHRyYW5zbGF0ZXkoLTUwJSk7ICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRleCg5MGRlZykgdHJhbnNsYXRleSgtNTAlKTsgICAgIG1hcmdpbi1ib3R0b206IC02NXB4OyAgICAgb3BhY2l0eTogMDsgICB9IH0gLnNob3BpZnktYnV5X19jYXJ0LXdyYXBwZXIgeyAgIGhlaWdodDogMTAwJTsgICBwYWRkaW5nLWxlZnQ6IDEwcHg7IH0gLnNob3BpZnktYnV5X19jYXJ0IHsgICBoZWlnaHQ6IDEwMCU7ICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgICB3aWR0aDogY2FsYygxMDAlIC0gMTBweCk7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIHJpZ2h0OiAwOyAgIC13ZWJraXQtYm94LXNoYWRvdzogLTVweCAwIDVweCByZ2JhKDAsIDAsIDAsIDAuMSk7ICAgICAgICAgICBib3gtc2hhZG93OiAtNXB4IDAgNXB4IHJnYmEoMCwgMCwgMCwgMC4xKTsgfSAuc2hvcGlmeS1idXlfX2NhcnRfX2hlYWRlciB7ICAgcGFkZGluZzogMjBweDsgICBwYWRkaW5nLXJpZ2h0OiA0MHB4OyAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgICB6LWluZGV4OiAyMTQ3NDgzNjQ3OyAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7IH0gLnNob3BpZnktYnV5X19jYXJ0X190aXRsZSB7ICAgZm9udC1zaXplOiAxOHB4OyAgIGNvbG9yOiAjNzY3Njc2OyAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfSAuc2hvcGlmeS1idXlfX2NhcnQtc2Nyb2xsIHsgICBwYWRkaW5nOiA3MHB4IDAgMTM1cHggMDsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgdG9wOiAwOyAgIGhlaWdodDogMTAwJTsgICB3aWR0aDogMTAwJTsgfSAuc2hvcGlmeS1idXlfX2NhcnQtc2Nyb2xsLS1kaXNjb3VudHMgeyAgIHBhZGRpbmctYm90dG9tOiAxNzBweDsgfSAuc2hvcGlmeS1idXlfX2NhcnQtc2Nyb2xsLS1jYXJ0LW5vdGUgeyAgIHBhZGRpbmctYm90dG9tOiAyMDBweDsgfSAuc2hvcGlmeS1idXlfX2NhcnQtc2Nyb2xsLS1jYXJ0LW5vdGUuc2hvcGlmeS1idXlfX2NhcnQtc2Nyb2xsLS1kaXNjb3VudHMgeyAgIHBhZGRpbmctYm90dG9tOiAyMzBweDsgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbXMgeyAgIG92ZXJmbG93OiBoaWRkZW47ICAgb3ZlcmZsb3cteTogYXV0bzsgICBoZWlnaHQ6IDEwMCU7ICAgcG9zaXRpb246IHJlbGF0aXZlOyAgIHBhZGRpbmc6IDAgMjBweCAyMHB4OyAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDsgICAtd2Via2l0LXBlcnNwZWN0aXZlOiA0MDBweDsgICAgICAgICAgIHBlcnNwZWN0aXZlOiA0MDBweDsgICAtd2Via2l0LXBlcnNwZWN0aXZlLW9yaWdpbjogNTAlIDBweDsgICAgICAgICAgIHBlcnNwZWN0aXZlLW9yaWdpbjogNTAlIDBweDsgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbSB7ICAgbWluLWhlaWdodDogNjVweDsgICBtYXJnaW4tYm90dG9tOiAyMHB4OyAgIG92ZXJmbG93OiBoaWRkZW47ICAgcG9zaXRpb246IHJlbGF0aXZlOyAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogdmlzaWJsZTsgICAgICAgICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IHZpc2libGU7ICAgLXdlYmtpdC1hbmltYXRpb246IDIwMG1zIGZsaXBJbiBmb3J3YXJkczsgICAgICAgICAgIGFuaW1hdGlvbjogMjAwbXMgZmxpcEluIGZvcndhcmRzOyB9IC5zaG9waWZ5LWJ1eV9fY2FydC1pdGVtLmlzLWhpZGRlbiB7ICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmxpcE91dDsgICAgICAgICAgIGFuaW1hdGlvbi1uYW1lOiBmbGlwT3V0OyB9IC5zaG9waWZ5LWJ1eV9fY2FydC1pdGVtX19pbWFnZSB7ICAgd2lkdGg6IDY1cHg7ICAgaGVpZ2h0OiA2NXB4OyAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjsgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7ICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIGxlZnQ6IDA7ICAgdG9wOiAwOyB9IC5zaG9waWZ5LWJ1eV9fY2FydC1pdGVtX190aXRsZSB7ICAgZm9udC1zaXplOiAxNHB4OyAgIG1hcmdpbi1sZWZ0OiA4MHB4OyAgIG1hcmdpbi1ib3R0b206IDNweDsgICBkaXNwbGF5OiBibG9jazsgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fcHJpY2UgeyAgIGZsb2F0OiByaWdodDsgICBmb250LXNpemU6IDE0cHg7ICAgZm9udC13ZWlnaHQ6IGJvbGQ7ICAgbGluZS1oZWlnaHQ6IDI2cHg7IH0gLnNob3BpZnktYnV5X19jYXJ0LWl0ZW1fX3ByaWNlLWFuZC1kaXNjb3VudHMgeyAgIGZsb2F0OiByaWdodDsgICB0ZXh0LWFsaWduOiByaWdodDsgICBtYXgtd2lkdGg6IDEwMHB4IH0gLnNob3BpZnktYnV5X19jYXJ0LWl0ZW1fX3ByaWNlLWFuZC1kaXNjb3VudHMgLnNob3BpZnktYnV5X19jYXJ0LWl0ZW1fX3ByaWNlIHsgICAgIGZsb2F0OiBub25lOyAgIH0gLnNob3BpZnktYnV5X19jYXJ0LWl0ZW1fX2Z1bGwtcHJpY2UgeyAgIGZvbnQtc2l6ZTogMTJweDsgICBsaW5lLWhlaWdodDogMTJweDsgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fZGlzY291bnQgeyAgIGZvbnQtc2l6ZTogMTJweDsgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7ICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZSB9IC5zaG9waWZ5LWJ1eV9fY2FydC1pdGVtX19kaXNjb3VudCArIC5zaG9waWZ5LWJ1eV9fY2FydC1pdGVtX19kaXNjb3VudCB7ICAgICBtYXJnaW4tdG9wOiA1cHg7ICAgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fZGlzY291bnRfX2ljb24geyAgIHdpZHRoOiAxMnB4OyAgIGhlaWdodDogMTJweDsgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyAgIGZpbGw6IGN1cnJlbnRDb2xvcjsgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fdmFyaWFudC10aXRsZSB7ICAgbWFyZ2luLWxlZnQ6IDgwcHg7ICAgbWFyZ2luLWJvdHRvbTogMTBweDsgICBjb2xvcjogIzRjNGM0YzsgICBmb250LXNpemU6IDEycHg7ICAgbWF4LXdpZHRoOiAyMjBweDsgICBvdmVyZmxvdzogaGlkZGVuOyAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyB9IC5zaG9waWZ5LWJ1eV9fY2FydC1ib3R0b20geyAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIHdpZHRoOiAxMDAlOyAgIGJvdHRvbTogMDsgICBwYWRkaW5nOiAxNXB4IDIwcHggMjBweCAyMHB4OyB9IC5zaG9waWZ5LWJ1eV9fY2FydF9fc3VidG90YWxfX3RleHQgeyAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7ICAgZmxvYXQ6IGxlZnQ7ICAgZm9udC1zaXplOiAxMXB4OyAgIGNvbG9yOiAjNGM0YzRjOyB9IC5zaG9waWZ5LWJ1eV9fY2FydF9fc3VidG90YWxfX3ByaWNlIHsgICBmbG9hdDogcmlnaHQ7IH0gLnNob3BpZnktYnV5X19jYXJ0X19kaXNjb3VudCB7ICAgZGlzcGxheTogLXdlYmtpdC1ib3g7ICAgZGlzcGxheTogLXdlYmtpdC1mbGV4OyAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94OyAgIGRpc3BsYXk6IGZsZXg7ICAgbWFyZ2luLWJvdHRvbTogMTBweDsgICBjb2xvcjogIzRjNGM0YzsgfSAuc2hvcGlmeS1idXlfX2NhcnRfX2Rpc2NvdW50X190ZXh0IHsgICBmb250LXNpemU6IDExcHg7ICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsgICBtYXJnaW4tcmlnaHQ6IDEwcHg7ICAgLXdlYmtpdC1ib3gtZmxleDogMTsgICAtd2Via2l0LWZsZXgtZ3JvdzogMTsgICAgICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7ICAgICAgICAgICBmbGV4LWdyb3c6IDE7IH0gLnNob3BpZnktYnV5X19jYXJ0X19kaXNjb3VudF9fdGV4dF9faWNvbiB7ICAgd2lkdGg6IDExcHg7ICAgaGVpZ2h0OiAxMXB4OyAgIHZlcnRpY2FsLWFsaWduOiB0b3A7ICAgZmlsbDogY3VycmVudENvbG9yOyB9IC5zaG9waWZ5LWJ1eV9fY2FydF9fZGlzY291bnRfX2Ftb3VudCB7ICAgZm9udC1zaXplOiAxMnB4OyAgIGxpbmUtaGVpZ2h0OiAxMnB4OyAgIC13ZWJraXQtZmxleC1zaHJpbms6IDA7ICAgICAgIC1tcy1mbGV4LW5lZ2F0aXZlOiAwOyAgICAgICAgICAgZmxleC1zaHJpbms6IDA7IH0gLnNob3BpZnktYnV5X19jYXJ0X19jdXJyZW5jeSB7ICAgZm9udC1zaXplOiAxMnB4OyB9IC5zaG9waWZ5LWJ1eV9fY2FydF9fbm90aWNlIHsgICBmb250LXNpemU6IDExcHg7ICAgY2xlYXI6IGJvdGg7ICAgcGFkZGluZy10b3A6IDEwcHg7ICAgdGV4dC1hbGlnbjogY2VudGVyOyAgIGNvbG9yOiAjNGM0YzRjOyB9IC5zaG9waWZ5LWJ1eV9fY2FydF9fbm90ZSB7ICAgY2xlYXI6IGJvdGg7ICAgcGFkZGluZy10b3A6IDEwcHg7IH0gLnNob3BpZnktYnV5X19jYXJ0X19ub3RlX19kZXNjcmlwdGlvbiB7ICAgZm9udC1zaXplOiAxMXB4OyAgIGNvbG9yOiAjNGM0YzRjOyB9IC5zaG9waWZ5LWJ1eV9fY2FydF9fbm90ZV9fdGV4dC1hcmVhIHsgICByZXNpemU6IG5vbmU7ICAgZm9udC1zaXplOiAxMXB4OyAgIHdpZHRoOiAxMDAlOyAgIGNvbG9yOiAjNGM0YzRjOyB9IC5zaG9waWZ5LWJ1eV9fY2FydC1lbXB0eS10ZXh0IHsgICBwYWRkaW5nOiAxMHB4IDE1cHg7ICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1jYXJ0LWNoZWNrb3V0IHsgICBjbGVhcjogYm90aDsgICBtYXJnaW4tdG9wOiAxNXB4OyAgIHdpZHRoOiAxMDAlOyAgIHBhZGRpbmc6IDEwcHggNXB4OyAgIGZvbnQtc2l6ZTogMTZweDsgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lciB7ICAgbWFyZ2luLWxlZnQ6IDgwcHg7ICAgbWFyZ2luLXJpZ2h0OiAxMDBweDsgICBoZWlnaHQ6IDI2cHg7ICAgbGluZS1oZWlnaHQ6IDI2cHg7IH0gLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIuaXMtbG9hZGluZyB7ICAgb3BhY2l0eTogMC42NTsgICBwb2ludGVyLWV2ZW50czogbm9uZTsgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fcXVhbnRpdHktaW5wdXQgeyAgIGZsb2F0OiBsZWZ0OyAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyB9IEBtZWRpYSAobWF4LXdpZHRoOiAzMzBweCkgeyAgIC5zaG9waWZ5LWJ1eV9fY2FydC1pdGVtX19wcmljZS1hbmQtZGlzY291bnRzIHsgICAgIG1heC13aWR0aDogOTBweDsgICB9ICAgIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyIHsgICAgIG1hcmdpbi1yaWdodDogOTBweDsgICB9IH0gLnNob3BpZnktYnV5X19xdWFudGl0eS1kZWNyZW1lbnQsIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktaW5jcmVtZW50IHsgICBjb2xvcjogIzRjNGM0YzsgICBkaXNwbGF5OiBibG9jazsgICBoZWlnaHQ6IDMwcHg7ICAgZmxvYXQ6IGxlZnQ7ICAgbGluZS1oZWlnaHQ6IDE2cHg7ICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTsgICB3aWR0aDogMjZweDsgICBwYWRkaW5nOiAwOyAgIGJvcmRlcjogbm9uZTsgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgICAtd2Via2l0LWJveC1zaGFkb3c6IG5vbmU7ICAgICAgICAgICBib3gtc2hhZG93OiBub25lOyAgIGN1cnNvcjogcG9pbnRlcjsgICBmb250LXNpemU6IDE4cHg7ICAgdGV4dC1hbGlnbjogY2VudGVyOyAgIGZvbnQtZmFtaWx5OiAiSGVsdmV0aWNhIE5ldWUiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyAgIGJvcmRlcjogMXB4IHNvbGlkICM3Njc2NzY7ICAgcG9zaXRpb246IHJlbGF0aXZlIH0gLnNob3BpZnktYnV5X19xdWFudGl0eS1kZWNyZW1lbnQgc3ZnLCAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWluY3JlbWVudCBzdmcgeyAgICAgd2lkdGg6IDE0cHg7ICAgICBoZWlnaHQ6IDE0cHg7ICAgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgICB0b3A6IDUwJTsgICAgIGxlZnQ6IDUwJTsgICAgIG1hcmdpbi10b3A6IC02cHg7ICAgICBtYXJnaW4tbGVmdDogLTdweDsgICAgIGZpbGw6IGN1cnJlbnRDb2xvcjsgICB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktZGVjcmVtZW50IHsgICBib3JkZXItcmFkaXVzOiAzcHggMCAwIDNweDsgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWluY3JlbWVudCB7ICAgYm9yZGVyLXJhZGl1czogMCAzcHggM3B4IDA7IH0gLnNob3BpZnktYnV5X19xdWFudGl0eSB7ICAgY29sb3I6IGJsYWNrOyAgIHdpZHRoOiA0NXB4OyAgIGhlaWdodDogMzBweDsgICBmb250LXNpemU6IDE2cHg7ICAgYm9yZGVyOiBub25lOyAgIHRleHQtYWxpZ246IGNlbnRlcjsgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7ICAgLW1vei1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7ICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgIHBhZGRpbmc6IDA7ICAgYm9yZGVyLXJhZGl1czogMDsgICBib3JkZXItdG9wOiAxcHggc29saWQgIzc2NzY3NjsgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzc2NzY3NjsgfSBpbnB1dFt0eXBlPW51bWJlcl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sIGlucHV0W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7ICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyAgIG1hcmdpbjogMDsgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lci5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktd2l0aC1idG5zIHsgICBvdmVyZmxvdzogaGlkZGVuIH0gLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIuc2hvcGlmeS1idXlfX3F1YW50aXR5LXdpdGgtYnRucyAuc2hvcGlmeS1idXlfX3F1YW50aXR5IHsgICAgIGJvcmRlci1sZWZ0OiAwOyAgICAgYm9yZGVyLXJpZ2h0OiAwOyAgICAgZmxvYXQ6IGxlZnQ7ICAgfSAnLAogICAgbW9kYWw6ICdodG1sLCBib2R5LCBoMSwgaDIsIGgzLCBoNCwgaDUsIHAgeyAgIHBhZGRpbmc6IDA7ICAgbWFyZ2luOiAwOyB9ICogeyAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH0gYm9keSwgaHRtbCB7ICAgbWluLWhlaWdodDogMTAwJTsgfSBodG1sIHsgICBmb250LWZhbWlseTogIkhlbHZldGljYSBOZXVlIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgICBmb250LXNpemU6IDE0cHg7ICAgbGluZS1oZWlnaHQ6IDEuMjsgICBjb2xvcjogIzRjNGM0YzsgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5OyAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOyAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7IH0gc2VsZWN0IHsgICB0ZXh0LXJlbmRlcmluZzogYXV0byAhaW1wb3J0YW50OyB9IHVsIHsgICBsaXN0LXN0eWxlOiBub25lOyAgIHBhZGRpbmctbGVmdDogMDsgICBtYXJnaW46IDA7IH0gaW1nIHsgICBkaXNwbGF5OiBibG9jazsgICBtYXgtd2lkdGg6IDEwMCU7IH0gaW5wdXQgeyAgIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAgIG1hcmdpbjogMDsgfSAuY2xlYXJmaXg6YWZ0ZXIgeyAgICAgY29udGVudDogIiI7ICAgICBkaXNwbGF5OiB0YWJsZTsgICAgIGNsZWFyOiBib3RoOyAgIH0gLnZpc3VhbGx5aGlkZGVuIHsgICBib3JkZXI6IDA7ICAgaGVpZ2h0OiAxcHg7ICAgbWFyZ2luOiAtMXB4OyAgIG92ZXJmbG93OiBoaWRkZW47ICAgcGFkZGluZzogMDsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgd2lkdGg6IDFweDsgfSAuY29tcG9uZW50LWNvbnRhaW5lciB7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgfSAuc2hvcGlmeS1idXlfX3R5cGUtLWNlbnRlciB7ICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IC5zaG9waWZ5LWJ1eS0tdmlzdWFsbHktaGlkZGVuIHsgICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDsgICBjbGlwOiByZWN0KDFweCwgMXB4LCAxcHgsIDFweCk7ICAgcGFkZGluZzowICFpbXBvcnRhbnQ7ICAgYm9yZGVyOjAgIWltcG9ydGFudDsgICBoZWlnaHQ6IDFweCAhaW1wb3J0YW50OyAgIHdpZHRoOiAxcHggIWltcG9ydGFudDsgICBvdmVyZmxvdzogaGlkZGVuOyB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktZGVjcmVtZW50LCAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWluY3JlbWVudCB7ICAgY29sb3I6ICM0YzRjNGM7ICAgZGlzcGxheTogYmxvY2s7ICAgaGVpZ2h0OiAzMHB4OyAgIGZsb2F0OiBsZWZ0OyAgIGxpbmUtaGVpZ2h0OiAxNnB4OyAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7ICAgd2lkdGg6IDI2cHg7ICAgcGFkZGluZzogMDsgICBib3JkZXI6IG5vbmU7ICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7ICAgLXdlYmtpdC1ib3gtc2hhZG93OiBub25lOyAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTsgICBjdXJzb3I6IHBvaW50ZXI7ICAgZm9udC1zaXplOiAxOHB4OyAgIHRleHQtYWxpZ246IGNlbnRlcjsgICBmb250LWZhbWlseTogIkhlbHZldGljYSBOZXVlIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgICBib3JkZXI6IDFweCBzb2xpZCAjNzY3Njc2OyAgIHBvc2l0aW9uOiByZWxhdGl2ZSB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktZGVjcmVtZW50IHN2ZywgLnNob3BpZnktYnV5X19xdWFudGl0eS1pbmNyZW1lbnQgc3ZnIHsgICAgIHdpZHRoOiAxNHB4OyAgICAgaGVpZ2h0OiAxNHB4OyAgICAgcG9zaXRpb246IGFic29sdXRlOyAgICAgdG9wOiA1MCU7ICAgICBsZWZ0OiA1MCU7ICAgICBtYXJnaW4tdG9wOiAtNnB4OyAgICAgbWFyZ2luLWxlZnQ6IC03cHg7ICAgICBmaWxsOiBjdXJyZW50Q29sb3I7ICAgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWRlY3JlbWVudCB7ICAgYm9yZGVyLXJhZGl1czogM3B4IDAgMCAzcHg7IH0gLnNob3BpZnktYnV5X19xdWFudGl0eS1pbmNyZW1lbnQgeyAgIGJvcmRlci1yYWRpdXM6IDAgM3B4IDNweCAwOyB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHkgeyAgIGNvbG9yOiBibGFjazsgICB3aWR0aDogNDVweDsgICBoZWlnaHQ6IDMwcHg7ICAgZm9udC1zaXplOiAxNnB4OyAgIGJvcmRlcjogbm9uZTsgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyAgIC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICBwYWRkaW5nOiAwOyAgIGJvcmRlci1yYWRpdXM6IDA7ICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM3Njc2NzY7ICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM3Njc2NzY7IH0gaW5wdXRbdHlwZT1udW1iZXJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLCBpbnB1dFt0eXBlPW51bWJlcl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24geyAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgICBtYXJnaW46IDA7IH0gLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIuc2hvcGlmeS1idXlfX3F1YW50aXR5LXdpdGgtYnRucyB7ICAgb3ZlcmZsb3c6IGhpZGRlbiB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyLnNob3BpZnktYnV5X19xdWFudGl0eS13aXRoLWJ0bnMgLnNob3BpZnktYnV5X19xdWFudGl0eSB7ICAgICBib3JkZXItbGVmdDogMDsgICAgIGJvcmRlci1yaWdodDogMDsgICAgIGZsb2F0OiBsZWZ0OyAgIH0gLnNob3BpZnktYnV5X19idG4geyAgIGNvbG9yOiAjZmZmOyAgIGZvbnQtc2l6ZTogMTVweDsgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzhiNjU3OyAgIHBhZGRpbmc6IDEycHggNDBweDsgICBsZXR0ZXItc3BhY2luZzogLjNweDsgICBkaXNwbGF5OiBibG9jazsgICBib3JkZXItcmFkaXVzOiAzcHg7ICAgY3Vyc29yOiBwb2ludGVyOyAgIC13ZWJraXQtdHJhbnNpdGlvbjogYmFja2dyb3VuZCAyMDBtcyBlYXNlOyAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMjAwbXMgZWFzZTsgICBtYXgtd2lkdGg6IDEwMCU7ICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgICBsaW5lLWhlaWdodDogMS4yOyAgIGJvcmRlcjogMDsgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7ICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lIH0gLnNob3BpZnktYnV5X19idG46aG92ZXIsICAgLnNob3BpZnktYnV5X19idG46Zm9jdXMgeyAgICAgYmFja2dyb3VuZC1jb2xvcjogIzVmOWQzZTsgICB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1wYXJlbnQgeyAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAgIGJvcmRlcjogMDsgICBwYWRkaW5nOiAwOyAgIGN1cnNvcjogcG9pbnRlciB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1wYXJlbnQ6aG92ZXIgLnByb2R1Y3RfX3ZhcmlhbnQtaW1nLCAuc2hvcGlmeS1idXlfX2J0bi0tcGFyZW50OmZvY3VzIC5wcm9kdWN0X192YXJpYW50LWltZyB7ICAgICAgIG9wYWNpdHk6IC43OyAgICAgfSAuc2hvcGlmeS1idXlfX2J0bi0tY2FydC10YWIgeyAgIHBhZGRpbmc6IDVweCAxMXB4OyAgIGJvcmRlci1yYWRpdXM6IDNweCAwIDAgM3B4OyAgIHBvc2l0aW9uOiBmaXhlZDsgICByaWdodDogMDsgICB0b3A6IDUwJTsgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDEwMCUsIC01MCUpOyAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwJSwgLTUwJSk7ICAgb3BhY2l0eTogMDsgICBtaW4td2lkdGg6IGluaGVyaXQ7ICAgd2lkdGg6IGF1dG87ICAgaGVpZ2h0OiBhdXRvOyAgIHotaW5kZXg6IDIxNDc0ODM2NDcgfSAuc2hvcGlmeS1idXlfX2J0bi0tY2FydC10YWIuaXMtYWN0aXZlIHsgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOyAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7ICAgICBvcGFjaXR5OiAxOyAgIH0gLnNob3BpZnktYnV5X19idG5fX2NvdW50ZXIgeyAgIGRpc3BsYXk6IGJsb2NrOyAgIG1hcmdpbjogMCBhdXRvIDEwcHggYXV0bzsgICBmb250LXNpemU6IDE4cHg7IH0gLnNob3BpZnktYnV5X19pY29uLWNhcnQtLXNpZGUgeyAgIGhlaWdodDogMjBweDsgICB3aWR0aDogMjBweDsgfSAuc2hvcGlmeS1idXlfX2J0bltkaXNhYmxlZF0geyAgIGJhY2tncm91bmQtY29sb3I6ICM5OTk7ICAgcG9pbnRlci1ldmVudHM6IG5vbmU7IH0gLnNob3BpZnktYnV5X19idG4tLWNsb3NlIHsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgcmlnaHQ6IDlweDsgICB0b3A6IDhweDsgICBmb250LXNpemU6IDM1cHg7ICAgY29sb3I6ICM3Njc2NzY7ICAgYm9yZGVyOiBub25lOyAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAgIC13ZWJraXQtdHJhbnNpdGlvbjogY29sb3IgMTAwbXMgZWFzZSwgLXdlYmtpdC10cmFuc2Zvcm0gMTAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiBjb2xvciAxMDBtcyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAxMDBtcyBlYXNlOyAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxMDBtcyBlYXNlLCBjb2xvciAxMDBtcyBlYXNlOyAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxMDBtcyBlYXNlLCBjb2xvciAxMDBtcyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAxMDBtcyBlYXNlOyAgIGN1cnNvcjogcG9pbnRlcjsgICBmb250LWZhbWlseTogIkhlbHZldGljYSBOZXVlIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgICBwYWRkaW5nLXJpZ2h0OiA5cHggfSAuc2hvcGlmeS1idXlfX2J0bi0tY2xvc2U6aG92ZXIgeyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMik7ICAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTsgICAgIGNvbG9yOiBoc2woMCwgMCUsIDQxLjI3NDUwOTgwMzklKTsgICB9IC5zaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdC13cmFwcGVyIHsgICBib3JkZXI6IDFweCBzb2xpZCAjZDNkYmUyOyAgIGJvcmRlci1yYWRpdXM6IDNweDsgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7ICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgICBiYWNrZ3JvdW5kOiAjZmZmOyAgIG92ZXJmbG93OiBoaWRkZW47ICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsgfSAuc2hvcGlmeS1idXlfX3NlbGVjdC1pY29uIHsgICBjdXJzb3I6IHBvaW50ZXI7ICAgZGlzcGxheTogYmxvY2s7ICAgZmlsbDogIzc5OGM5YzsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgcmlnaHQ6IDEwcHg7ICAgdG9wOiA1MCU7ICAgbWFyZ2luLXRvcDogLTZweDsgICBwb2ludGVyLWV2ZW50czogbm9uZTsgICB3aWR0aDogMTJweDsgICBoZWlnaHQ6IDEycHg7ICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfSAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3QgKyAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3QgeyAgICAgbWFyZ2luLXRvcDogNy41cHg7ICAgfSAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3RfX2xhYmVsIHsgICBkaXNwbGF5OiBibG9jazsgICBmb250LXNpemU6IDE0cHg7ICAgbWFyZ2luLXRvcDogMTVweDsgICBtYXJnaW4tYm90dG9tOiA1cHg7IH0gLnNob3BpZnktYnV5X19idG4tLXBhcmVudCAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3RfX2xhYmVsIHsgICAgIGN1cnNvcjogcG9pbnRlcjsgICB9IC5zaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdF9fc2VsZWN0IHsgICBmb250LXNpemU6IGluaGVyaXQ7ICAgcGFkZGluZzogN3B4IDEwcHg7ICAgcGFkZGluZy1yaWdodDogMzJweDsgICBib3JkZXI6IDA7ICAgd2lkdGg6IDEwMCU7ICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7ICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyAgIC1tb3otYXBwZWFyYW5jZTogbm9uZSB9IC5zaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdF9fc2VsZWN0OjotbXMtZXhwYW5kIHsgICAgIGRpc3BsYXk6IG5vbmU7ICAgfSAuc2hvcGlmeS1idXlfX2J0bi0tcGFyZW50IC5zaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdF9fc2VsZWN0IHsgICAgIGN1cnNvcjogcG9pbnRlcjsgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdCB7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgICB3aWR0aDogMTAwJTsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtaW1nIHsgICBtYXJnaW46IDAgYXV0byAxNXB4IGF1dG87ICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZTsgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZTsgICBvcGFjaXR5OiAxIH0gLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LWltZy5pcy10cmFuc2l0aW9uaW5nIHsgICAgIG9wYWNpdHk6IDA7ICAgfSAuc2hvcGlmeS1idXlfX2lzLWJ1dHRvbiB7ICAgY3Vyc29yOiBwb2ludGVyOyB9IC5zaG9waWZ5LWJ1eV9fbm8taW1hZ2UgLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LWltZyB7ICAgICBkaXNwbGF5OiBub25lOyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0X190aXRsZSB7ICAgZm9udC1zaXplOiAxOHB4OyAgIGxpbmUtaGVpZ2h0OiAxLjI7ICAgY29sb3I6ICM0YTRhNGE7ICAgbWFyZ2luLWJvdHRvbTogMTVweDsgICBmb250LXdlaWdodDogNzAwOyB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19wcm9kdWN0X190aXRsZSB7ICAgICBtYXJnaW4tdG9wOiAxMHB4OyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LXRpdGxlIHsgICBmb250LXNpemU6IDE4cHg7ICAgY29sb3I6ICM2NjY7ICAgZm9udC13ZWlnaHQ6IDQwMDsgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgbWFyZ2luLWJvdHRvbTogMTVweDsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ByaWNlIHsgICBtYXJnaW4tYm90dG9tOiAxNXB4OyB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiB7ICAgbWFyZ2luLXRvcDogMzBweDsgICBsaW5lLWhlaWdodDogMS42NTsgICBjb2xvcjogIzRhNGE0YSB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBwLCAgIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiB1bCwgICAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gb2wsICAgLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIGltZyB7ICAgICBtYXJnaW4tYm90dG9tOiAxMHB4ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gcDpsYXN0LWNoaWxkLCAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gdWw6bGFzdC1jaGlsZCwgLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIG9sOmxhc3QtY2hpbGQsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBpbWc6bGFzdC1jaGlsZCB7ICAgICAgIG1hcmdpbi1ib3R0b206IDA7ICAgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBhIHsgICAgIGNvbG9yOiBpbmhlcml0OyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIGltZyB7ICAgICBtYXgtd2lkdGg6IDEwMCU7ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gaDEgeyAgICAgZm9udC1zaXplOiAyMHB4OyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIGgyIHsgICAgIGZvbnQtc2l6ZTogMThweDsgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBoMyB7ICAgICBmb250LXNpemU6IDE3cHg7ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gdWwsICAgLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIG9sIHsgICAgIG1hcmdpbi1sZWZ0OiAyZW07ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gdWwgeyAgICAgbGlzdC1zdHlsZS10eXBlOiBkaXNjOyAgIH0gLnNob3BpZnktYnV5X19sYXlvdXQtdmVydGljYWwgeyAgIHRleHQtYWxpZ246IGNlbnRlcjsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX2FjdHVhbC1wcmljZSwgLnNob3BpZnktYnV5X19wcm9kdWN0X19jb21wYXJlLXByaWNlIHsgICBjb2xvcjogIzRhNGE0YTsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X19hY3R1YWwtcHJpY2UgeyAgIGZvbnQtc2l6ZTogMTRweDsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX2NvbXBhcmUtcHJpY2UgeyAgIGZvbnQtc2l6ZTogMTJweDsgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDsgICBwYWRkaW5nLWxlZnQ6IDVweDsgICBvcGFjaXR5OiAwLjY1OyB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdW5pdC1wcmljZSB7ICAgY29sb3I6ICM0YTRhNGE7ICAgcGFkZGluZy10b3A6IDVweDsgICBmb250LXNpemU6IDEycHg7ICAgb3BhY2l0eTogMC44OyB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1zZWxlY3RvcnMgeyAgIHRleHQtYWxpZ246IGxlZnQ7ICAgZm9udC1zaXplOiAxNHB4OyB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1zZWxlY3RvcnMgeyAgICAgd2lkdGg6IDEwMCU7ICAgICBtYXgtd2lkdGg6IDI4MHB4OyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgIH0gLnNob3BpZnktYnV5X19xdWFudGl0eSB7ICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZDsgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZDsgICBib3JkZXItcmFkaXVzOiAzcHg7IH0gLnNob3BpZnktYnV5X19xdWFudGl0eSwgLnNob3BpZnktYnV5X19xdWFudGl0eS1pbmNyZW1lbnQsIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktZGVjcmVtZW50IHsgICBib3JkZXItY29sb3I6ICNkM2RiZTI7ICAgbGluZS1oZWlnaHQ6IDEuMjsgICBmb250LXNpemU6IDE1cHg7ICAgaGVpZ2h0OiBhdXRvOyAgIHBhZGRpbmctdG9wOiAxMnB4OyAgIHBhZGRpbmctYm90dG9tOiAxMnB4OyB9IC5zaG9waWZ5LWJ1eV9fYnRuIHsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0gLnNob3BpZnktYnV5X19idG4td3JhcHBlciB7ICAgbWFyZ2luLXRvcDogMjBweDsgfSAuc2hvcGlmeS1idXlfX2J0bi5zaG9waWZ5LWJ1eV9fYmVzaWRlLXF1YW50aXR5IHsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgdmVydGljYWwtYWxpZ246IHRvcDsgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwOyAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7ICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7IH0gLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHkgeyAgICAgYm9yZGVyLXJpZ2h0OiAwOyAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7ICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDsgICAgIGJhY2tncm91bmQ6ICNmZmY7ICAgfSAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHkgLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIgeyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgICAgdmVydGljYWwtYWxpZ246IHRvcDsgICB9IC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSAuc2hvcGlmeS1idXlfX2J0bi13cmFwcGVyIHsgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7ICAgICBtYXJnaW46IDA7ICAgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fcXVhbnRpdHktY29udGFpbmVyIHsgICBtYXJnaW4tdG9wOiAyMHB4OyAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfSAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX2J0biwgICAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lciwgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fYnRuLCAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIgeyAgICAgbWFyZ2luOiAyMHB4IGF1dG8gMDsgICB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fYnRuOmZpcnN0LWNoaWxkLCAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fYnRuOmZpcnN0LWNoaWxkIHsgICAgIG1hcmdpbi10b3A6IDA7ICAgfSAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHksIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IHsgICAgIG1hcmdpbjogMjBweCBhdXRvIDAgICB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSAuc2hvcGlmeS1idXlfX2J0biwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lciwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IC5zaG9waWZ5LWJ1eV9fYnRuLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbCAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHkgLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIgeyAgICAgICBtYXJnaW46IDAgYXV0bzsgICAgIH0gLnNob3BpZnktYnV5X19sYXlvdXQtdmVydGljYWwgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5OmZpcnN0LWNoaWxkLCAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eTpmaXJzdC1jaGlsZCB7ICAgICBtYXJnaW46IDAgYXV0bzsgICB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1pbWcsIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LWltZyB7ICAgICBtYXgtd2lkdGg6IDEwMCU7ICAgfSBAbWVkaWEgKG1pbi13aWR0aDogNTAwcHgpIHsgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIHsgICAgIHRleHQtYWxpZ246IGxlZnQ7ICAgICBtYXJnaW4tYm90dG9tOiAwOyAgICAgbWFyZ2luLWxlZnQ6IDAgICB9ICAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtaW1nLXdyYXBwZXIgeyAgICAgICBmbG9hdDogbGVmdDsgICAgICAgd2lkdGg6IDQwJTsgICAgIH0gICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC10aXRsZSB7ICAgICAgIHRleHQtYWxpZ246IGxlZnQ7ICAgICB9ICAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3RpdGxlLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtdGl0bGUsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fcHJpY2UsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5LCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSA+IC5zaG9waWZ5LWJ1eV9fYnRuLXdyYXBwZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpID4gLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1zZWxlY3RvcnMgeyAgICAgICBtYXJnaW4tbGVmdDogY2FsYyg0MCUgKyAyNXB4KTsgICAgIH0gfSBAbWVkaWEgKG1pbi13aWR0aDogNjgwcHgpIHsgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19wcm9kdWN0LWltZy13cmFwcGVyIHsgICAgICAgZmxvYXQ6IGxlZnQ7ICAgICAgIHdpZHRoOiA2MCU7ICAgICB9ICAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3RpdGxlLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtdGl0bGUsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fcHJpY2UsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5LCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSA+IC5zaG9waWZ5LWJ1eV9fYnRuLXdyYXBwZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpID4gLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1zZWxlY3RvcnMgeyAgICAgICBtYXJnaW4tbGVmdDogY2FsYyg2MCUgKyAyNXB4KTsgICAgIH0gfSAubm8taW1hZ2UgLnNob3BpZnktYnV5X19wcm9kdWN0LWltZy13cmFwcGVyIHsgICAgIGRpc3BsYXk6IG5vbmU7ICAgfSBALXdlYmtpdC1rZXlmcmFtZXMgZGFzaCB7ICAgdG8geyAgICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IDA7ICAgfSB9IEBrZXlmcmFtZXMgZGFzaCB7ICAgdG8geyAgICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IDA7ICAgfSB9IC5zaG9waWZ5LWJ1eV9fY2Fyb3VzZWwgeyAgIGZvbnQtc2l6ZTogMDsgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgbWluLWhlaWdodDogOTBweDsgICBtYXJnaW4tbGVmdDogLTE1cHg7ICAgbWFyZ2luLXRvcDogMTVweDsgfSAuc2hvcGlmeS1idXlfX2Nhcm91c2VsLWl0ZW0geyAgIHdpZHRoOiBjYWxjKDE2LjY2NiUgLSAxNXB4KTsgICBtYXJnaW4tbGVmdDogMTVweDsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgICBjdXJzb3I6IHBvaW50ZXI7ICAgcG9zaXRpb246IHJlbGF0aXZlOyAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7ICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOyAgIHBhZGRpbmc6IDA7ICAgYm9yZGVyOiBub25lIH0gLnNob3BpZnktYnV5X19jYXJvdXNlbC1pdGVtOm50aC1jaGlsZChuKzcpIHsgICAgIG1hcmdpbi10b3A6IDE1cHg7ICAgfSAuc2hvcGlmeS1idXlfX2Nhcm91c2VsLWl0ZW06YmVmb3JlIHsgICAgIGNvbnRlbnQ6ICIiOyAgICAgZGlzcGxheTogYmxvY2s7ICAgICBwYWRkaW5nLXRvcDogMTAwJTsgICB9IC5tYWluLWltYWdlLXdyYXBwZXIgeyAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgfSAuY2Fyb3VzZWwtYnV0dG9uIHsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgd2lkdGg6IDc1cHg7ICAgdG9wOiAwOyAgIGhlaWdodDogMTAwJTsgICBib3JkZXI6IG5vbmU7ICAgZm9udC1zaXplOiAwOyAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAgIG9wYWNpdHk6IDAuNDsgICBjdXJzb3I6IHBvaW50ZXIgfSAuY2Fyb3VzZWwtYnV0dG9uOmhvdmVyLCAgIC5jYXJvdXNlbC1idXR0b246Zm9jdXMgeyAgICAgb3BhY2l0eTogMC45OyAgICAgb3V0bGluZTogbm9uZTsgICB9IC5jYXJvdXNlbC1idXR0b24tYXJyb3cgeyAgIHdpZHRoOiAyMHB4OyAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICBtYXJnaW4tbGVmdDogMjVweDsgfSAuY2Fyb3VzZWwtYnV0dG9uLS1wcmV2aW91cyB7ICAgbGVmdDogMDsgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7ICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOyB9IC5jYXJvdXNlbC1idXR0b24tLW5leHQgeyAgIHJpZ2h0OiAwOyB9IC5zaG9waWZ5LWJ1eV9fY2Fyb3VzZWwtaXRlbS0tc2VsZWN0ZWQgeyAgIG9wYWNpdHk6IDAuNDsgfSAuc2hvcGlmeS1idXlfX2J0bi0tY2xvc2UgeyAgIHJpZ2h0OiAwcHg7ICAgZm9udC1zaXplOiA0NXB4OyAgIGZvbnQtd2VpZ2h0OiAxMDA7ICAgei1pbmRleDogMjE0NzQ4MzY0NzsgICBwYWRkaW5nOiAwIDEwcHg7IH0gLnNob3BpZnktYnV5X19tb2RhbCB7ICAgYmFja2dyb3VuZDogI2ZmZjsgICB3aWR0aDogY2FsYygxMDAlIC0gMjBweCk7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIGxlZnQ6IDA7ICAgcmlnaHQ6IDA7ICAgei1pbmRleDogMjE0NzQ4MzY0NjsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QgeyAgIHRleHQtYWxpZ246IGxlZnQ7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X190aXRsZSwgLnNob3BpZnktYnV5X19wcm9kdWN0X19wcmljZSwgLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LXRpdGxlIHsgICB0ZXh0LWFsaWduOiBsZWZ0OyB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdGl0bGUgeyAgIGZvbnQtc2l6ZTogMjZweDsgICBmb250LXdlaWdodDogNzAwOyAgIGxpbmUtaGVpZ2h0OiAxLjQ7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X19jb21wYXJlLXByaWNlIHsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgbWFyZ2luLXJpZ2h0OiA1cHg7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X19hY3R1YWwtcHJpY2UgeyAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfSAuc2hvcGlmeS1idXlfX21vZGFsIC5zaG9waWZ5LWJ1eV9fbW9kYWwtcHJvZHVjdC13cmFwcGVyIHsgICB3aWR0aDogMTAwJTsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtaW1hZ2UgeyAgIG1hcmdpbjogMDsgfSBAbWVkaWEgKG1heC13aWR0aDogNDk5cHgpIHsgICBib2R5LmlzLWFjdGl2ZSB7ICAgICBvdmVyZmxvdzogaGlkZGVuOyAgICAgcG9zaXRpb246IGZpeGVkOyAgICAgaGVpZ2h0OiAxMDB2aDsgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDBzOyAgICAgdHJhbnNpdGlvbjogYWxsIDBzOyAgIH0gICAgLnNob3BpZnktYnV5X19tb2RhbCB7ICAgICB3aWR0aDogMTAwJTsgICAgIG1pbi1oZWlnaHQ6IDEwMHZoOyAgICAgcG9zaXRpb246IGZpeGVkOyAgICAgb3ZlcmZsb3cteTogYXV0bzsgICB9ICAgIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdCB7ICAgICBwYWRkaW5nOiAxNXB4OyAgICAgcG9zaXRpb246IGFic29sdXRlOyAgICAgdG9wOiAwOyAgICAgbGVmdDogMDsgICB9ICAgIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1pbWcgeyAgICAgbWF4LWhlaWdodDogNjB2aDsgICAgIG1hcmdpbjogMCBhdXRvOyAgICAgd2lkdGg6IGF1dG87ICAgICBtYXgtd2lkdGg6IDEwMCU7ICAgfSAgICAuc2hvcGlmeS1idXlfX2J0bi0tY2xvc2UgeyAgICAgcG9zaXRpb246IGZpeGVkOyAgICAgdG9wOiAwOyAgICAgcmlnaHQ6IDA7ICAgfSB9IEAtd2Via2l0LWtleWZyYW1lcyBzbGlkZUluIHsgICBmcm9tIHsgICAgIG9wYWNpdHk6IDA7ICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTIwMHB4KTsgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0yMDBweCk7ICAgfSAgICB0byB7ICAgICBvcGFjaXR5OiAxOyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7ICAgfSB9IEBrZXlmcmFtZXMgc2xpZGVJbiB7ICAgZnJvbSB7ICAgICBvcGFjaXR5OiAwOyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0yMDBweCk7ICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMjAwcHgpOyAgIH0gICAgdG8geyAgICAgb3BhY2l0eTogMTsgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyAgIH0gfSBALXdlYmtpdC1rZXlmcmFtZXMgc2xpZGVPdXQgeyAgIGZyb20geyAgICAgb3BhY2l0eTogMTsgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyAgIH0gICAgdG8geyAgICAgb3BhY2l0eTogMDsgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMjAwcHgpOyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTIwMHB4KTsgICB9IH0gQGtleWZyYW1lcyBzbGlkZU91dCB7ICAgZnJvbSB7ICAgICBvcGFjaXR5OiAxOyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7ICAgfSAgICB0byB7ICAgICBvcGFjaXR5OiAwOyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0yMDBweCk7ICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMjAwcHgpOyAgIH0gfSBAbWVkaWEgKG1pbi13aWR0aDogNTAwcHgpIHsgICBodG1sLCAgIGJvZHkuaXMtYWN0aXZlIHsgICAgIGhlaWdodDogMTAwJTsgICB9ICAgIC5zaG9waWZ5LWJ1eV9fbW9kYWwtb3ZlcmxheSB7ICAgICB3aWR0aDogMTAwJTsgICAgIGhlaWdodDogMTAwJTsgICAgIHBvc2l0aW9uOiBmaXhlZDsgICAgIG92ZXJmbG93LXk6IHNjcm9sbDsgICB9ICAgIC5zaG9waWZ5LWJ1eV9fbW9kYWwgeyAgICAgbWFyZ2luOiAxMDBweCBhdXRvIDQwcHggYXV0bzsgICAgIG9wYWNpdHk6IDA7ICAgICBib3JkZXItcmFkaXVzOiAycHg7ICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuNzIpOyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTIwMHB4KTsgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0yMDBweCk7ICAgICBtYXgtd2lkdGg6IDEwMDBweDsgICAgIC13ZWJraXQtYW5pbWF0aW9uOiAyMDBtcyBzbGlkZU91dCBmb3J3YXJkczsgICAgICAgICAgICAgYW5pbWF0aW9uOiAyMDBtcyBzbGlkZU91dCBmb3J3YXJkczsgICB9ICAgICAuaXMtYWN0aXZlIC5zaG9waWZ5LWJ1eV9fbW9kYWwgeyAgICAgICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBzbGlkZUluOyAgICAgICAgICAgICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZUluOyAgICAgfSAgICAuc2hvcGlmeS1idXlfX3Byb2R1Y3QgeyAgICAgcGFkZGluZzogMzBweDsgICB9ICAgIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1pbWctd3JhcHBlciB7ICAgICBoZWlnaHQ6IDEwMCU7ICAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4OyAgIH0gICAgLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LWltZyB7ICAgICBtYXJnaW46IDAgYXV0bzsgICB9ICAgIC5zaG9waWZ5LWJ1eV9fYnRuLS1jbG9zZSB7ICAgICB0b3A6IC02MHB4OyAgICAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSkgICB9ICAgICAgLnNob3BpZnktYnV5X19idG4tLWNsb3NlOmhvdmVyIHsgICAgICAgY29sb3I6ICNmZmY7ICAgICB9IH0gQG1lZGlhIChtaW4td2lkdGg6IDY4MHB4KSB7ICAgLnNob3BpZnktYnV5X19wcm9kdWN0IHsgICAgIHBhZGRpbmc6IDQ1cHg7ICAgfSB9ICcsCiAgICBwcm9kdWN0OiAnaHRtbCwgYm9keSwgaDEsIGgyLCBoMywgaDQsIGg1LCBwIHsgICBwYWRkaW5nOiAwOyAgIG1hcmdpbjogMDsgfSAqIHsgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7ICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9IGJvZHksIGh0bWwgeyAgIG1pbi1oZWlnaHQ6IDEwMCU7IH0gaHRtbCB7ICAgZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7ICAgZm9udC1zaXplOiAxNHB4OyAgIGxpbmUtaGVpZ2h0OiAxLjI7ICAgY29sb3I6ICM0YzRjNGM7ICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTsgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOyB9IHNlbGVjdCB7ICAgdGV4dC1yZW5kZXJpbmc6IGF1dG8gIWltcG9ydGFudDsgfSB1bCB7ICAgbGlzdC1zdHlsZTogbm9uZTsgICBwYWRkaW5nLWxlZnQ6IDA7ICAgbWFyZ2luOiAwOyB9IGltZyB7ICAgZGlzcGxheTogYmxvY2s7ICAgbWF4LXdpZHRoOiAxMDAlOyB9IGlucHV0IHsgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgICBtYXJnaW46IDA7IH0gLmNsZWFyZml4OmFmdGVyIHsgICAgIGNvbnRlbnQ6ICIiOyAgICAgZGlzcGxheTogdGFibGU7ICAgICBjbGVhcjogYm90aDsgICB9IC52aXN1YWxseWhpZGRlbiB7ICAgYm9yZGVyOiAwOyAgIGhlaWdodDogMXB4OyAgIG1hcmdpbjogLTFweDsgICBvdmVyZmxvdzogaGlkZGVuOyAgIHBhZGRpbmc6IDA7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIHdpZHRoOiAxcHg7IH0gLmNvbXBvbmVudC1jb250YWluZXIgeyAgIG92ZXJmbG93OiBoaWRkZW47IH0gLnNob3BpZnktYnV5X190eXBlLS1jZW50ZXIgeyAgIHRleHQtYWxpZ246IGNlbnRlcjsgfSAuc2hvcGlmeS1idXktLXZpc3VhbGx5LWhpZGRlbiB7ICAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7ICAgY2xpcDogcmVjdCgxcHgsIDFweCwgMXB4LCAxcHgpOyAgIHBhZGRpbmc6MCAhaW1wb3J0YW50OyAgIGJvcmRlcjowICFpbXBvcnRhbnQ7ICAgaGVpZ2h0OiAxcHggIWltcG9ydGFudDsgICB3aWR0aDogMXB4ICFpbXBvcnRhbnQ7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWRlY3JlbWVudCwgLnNob3BpZnktYnV5X19xdWFudGl0eS1pbmNyZW1lbnQgeyAgIGNvbG9yOiAjNGM0YzRjOyAgIGRpc3BsYXk6IGJsb2NrOyAgIGhlaWdodDogMzBweDsgICBmbG9hdDogbGVmdDsgICBsaW5lLWhlaWdodDogMTZweDsgICBmb250LWZhbWlseTogbW9ub3NwYWNlOyAgIHdpZHRoOiAyNnB4OyAgIHBhZGRpbmc6IDA7ICAgYm9yZGVyOiBub25lOyAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyAgIC13ZWJraXQtYm94LXNoYWRvdzogbm9uZTsgICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7ICAgY3Vyc29yOiBwb2ludGVyOyAgIGZvbnQtc2l6ZTogMThweDsgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7ICAgYm9yZGVyOiAxcHggc29saWQgIzc2NzY3NjsgICBwb3NpdGlvbjogcmVsYXRpdmUgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWRlY3JlbWVudCBzdmcsIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktaW5jcmVtZW50IHN2ZyB7ICAgICB3aWR0aDogMTRweDsgICAgIGhlaWdodDogMTRweDsgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgICAgIHRvcDogNTAlOyAgICAgbGVmdDogNTAlOyAgICAgbWFyZ2luLXRvcDogLTZweDsgICAgIG1hcmdpbi1sZWZ0OiAtN3B4OyAgICAgZmlsbDogY3VycmVudENvbG9yOyAgIH0gLnNob3BpZnktYnV5X19xdWFudGl0eS1kZWNyZW1lbnQgeyAgIGJvcmRlci1yYWRpdXM6IDNweCAwIDAgM3B4OyB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktaW5jcmVtZW50IHsgICBib3JkZXItcmFkaXVzOiAwIDNweCAzcHggMDsgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5IHsgICBjb2xvcjogYmxhY2s7ICAgd2lkdGg6IDQ1cHg7ICAgaGVpZ2h0OiAzMHB4OyAgIGZvbnQtc2l6ZTogMTZweDsgICBib3JkZXI6IG5vbmU7ICAgdGV4dC1hbGlnbjogY2VudGVyOyAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgICAtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgcGFkZGluZzogMDsgICBib3JkZXItcmFkaXVzOiAwOyAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNzY3Njc2OyAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNzY3Njc2OyB9IGlucHV0W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiwgaW5wdXRbdHlwZT1udW1iZXJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHsgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7ICAgbWFyZ2luOiAwOyB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyLnNob3BpZnktYnV5X19xdWFudGl0eS13aXRoLWJ0bnMgeyAgIG92ZXJmbG93OiBoaWRkZW4gfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lci5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktd2l0aC1idG5zIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHkgeyAgICAgYm9yZGVyLWxlZnQ6IDA7ICAgICBib3JkZXItcmlnaHQ6IDA7ICAgICBmbG9hdDogbGVmdDsgICB9IC5zaG9waWZ5LWJ1eV9fYnRuIHsgICBjb2xvcjogI2ZmZjsgICBmb250LXNpemU6IDE1cHg7ICAgYmFja2dyb3VuZC1jb2xvcjogIzc4YjY1NzsgICBwYWRkaW5nOiAxMnB4IDQwcHg7ICAgbGV0dGVyLXNwYWNpbmc6IC4zcHg7ICAgZGlzcGxheTogYmxvY2s7ICAgYm9yZGVyLXJhZGl1czogM3B4OyAgIGN1cnNvcjogcG9pbnRlcjsgICAtd2Via2l0LXRyYW5zaXRpb246IGJhY2tncm91bmQgMjAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDIwMG1zIGVhc2U7ICAgbWF4LXdpZHRoOiAxMDAlOyAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyAgIG92ZXJmbG93OiBoaWRkZW47ICAgbGluZS1oZWlnaHQ6IDEuMjsgICBib3JkZXI6IDA7ICAgLW1vei1hcHBlYXJhbmNlOiBub25lOyAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZSB9IC5zaG9waWZ5LWJ1eV9fYnRuOmhvdmVyLCAgIC5zaG9waWZ5LWJ1eV9fYnRuOmZvY3VzIHsgICAgIGJhY2tncm91bmQtY29sb3I6ICM1ZjlkM2U7ICAgfSAuc2hvcGlmeS1idXlfX2J0bi0tcGFyZW50IHsgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgICBib3JkZXI6IDA7ICAgcGFkZGluZzogMDsgICBjdXJzb3I6IHBvaW50ZXIgfSAuc2hvcGlmeS1idXlfX2J0bi0tcGFyZW50OmhvdmVyIC5wcm9kdWN0X192YXJpYW50LWltZywgLnNob3BpZnktYnV5X19idG4tLXBhcmVudDpmb2N1cyAucHJvZHVjdF9fdmFyaWFudC1pbWcgeyAgICAgICBvcGFjaXR5OiAuNzsgICAgIH0gLnNob3BpZnktYnV5X19idG4tLWNhcnQtdGFiIHsgICBwYWRkaW5nOiA1cHggMTFweDsgICBib3JkZXItcmFkaXVzOiAzcHggMCAwIDNweDsgICBwb3NpdGlvbjogZml4ZWQ7ICAgcmlnaHQ6IDA7ICAgdG9wOiA1MCU7ICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDAlLCAtNTAlKTsgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDEwMCUsIC01MCUpOyAgIG9wYWNpdHk6IDA7ICAgbWluLXdpZHRoOiBpbmhlcml0OyAgIHdpZHRoOiBhdXRvOyAgIGhlaWdodDogYXV0bzsgICB6LWluZGV4OiAyMTQ3NDgzNjQ3IH0gLnNob3BpZnktYnV5X19idG4tLWNhcnQtdGFiLmlzLWFjdGl2ZSB7ICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOyAgICAgb3BhY2l0eTogMTsgICB9IC5zaG9waWZ5LWJ1eV9fYnRuX19jb3VudGVyIHsgICBkaXNwbGF5OiBibG9jazsgICBtYXJnaW46IDAgYXV0byAxMHB4IGF1dG87ICAgZm9udC1zaXplOiAxOHB4OyB9IC5zaG9waWZ5LWJ1eV9faWNvbi1jYXJ0LS1zaWRlIHsgICBoZWlnaHQ6IDIwcHg7ICAgd2lkdGg6IDIwcHg7IH0gLnNob3BpZnktYnV5X19idG5bZGlzYWJsZWRdIHsgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTk5OyAgIHBvaW50ZXItZXZlbnRzOiBub25lOyB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1jbG9zZSB7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIHJpZ2h0OiA5cHg7ICAgdG9wOiA4cHg7ICAgZm9udC1zaXplOiAzNXB4OyAgIGNvbG9yOiAjNzY3Njc2OyAgIGJvcmRlcjogbm9uZTsgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgICAtd2Via2l0LXRyYW5zaXRpb246IGNvbG9yIDEwMG1zIGVhc2UsIC13ZWJraXQtdHJhbnNmb3JtIDEwMG1zIGVhc2U7ICAgdHJhbnNpdGlvbjogY29sb3IgMTAwbXMgZWFzZSwgLXdlYmtpdC10cmFuc2Zvcm0gMTAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgZWFzZSwgY29sb3IgMTAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgZWFzZSwgY29sb3IgMTAwbXMgZWFzZSwgLXdlYmtpdC10cmFuc2Zvcm0gMTAwbXMgZWFzZTsgICBjdXJzb3I6IHBvaW50ZXI7ICAgZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7ICAgcGFkZGluZy1yaWdodDogOXB4IH0gLnNob3BpZnktYnV5X19idG4tLWNsb3NlOmhvdmVyIHsgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjIpOyAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7ICAgICBjb2xvcjogaHNsKDAsIDAlLCA0MS4yNzQ1MDk4MDM5JSk7ICAgfSAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3Qtd3JhcHBlciB7ICAgYm9yZGVyOiAxcHggc29saWQgI2QzZGJlMjsgICBib3JkZXItcmFkaXVzOiAzcHg7ICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94OyAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgICBwb3NpdGlvbjogcmVsYXRpdmU7ICAgYmFja2dyb3VuZDogI2ZmZjsgICBvdmVyZmxvdzogaGlkZGVuOyAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207IH0gLnNob3BpZnktYnV5X19zZWxlY3QtaWNvbiB7ICAgY3Vyc29yOiBwb2ludGVyOyAgIGRpc3BsYXk6IGJsb2NrOyAgIGZpbGw6ICM3OThjOWM7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIHJpZ2h0OiAxMHB4OyAgIHRvcDogNTAlOyAgIG1hcmdpbi10b3A6IC02cHg7ICAgcG9pbnRlci1ldmVudHM6IG5vbmU7ICAgd2lkdGg6IDEycHg7ICAgaGVpZ2h0OiAxMnB4OyAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH0gLnNob3BpZnktYnV5X19vcHRpb24tc2VsZWN0ICsgLnNob3BpZnktYnV5X19vcHRpb24tc2VsZWN0IHsgICAgIG1hcmdpbi10b3A6IDcuNXB4OyAgIH0gLnNob3BpZnktYnV5X19vcHRpb24tc2VsZWN0X19sYWJlbCB7ICAgZGlzcGxheTogYmxvY2s7ICAgZm9udC1zaXplOiAxNHB4OyAgIG1hcmdpbi10b3A6IDE1cHg7ICAgbWFyZ2luLWJvdHRvbTogNXB4OyB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1wYXJlbnQgLnNob3BpZnktYnV5X19vcHRpb24tc2VsZWN0X19sYWJlbCB7ICAgICBjdXJzb3I6IHBvaW50ZXI7ICAgfSAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3RfX3NlbGVjdCB7ICAgZm9udC1zaXplOiBpbmhlcml0OyAgIHBhZGRpbmc6IDdweCAxMHB4OyAgIHBhZGRpbmctcmlnaHQ6IDMycHg7ICAgYm9yZGVyOiAwOyAgIHdpZHRoOiAxMDAlOyAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgICAtbW96LWFwcGVhcmFuY2U6IG5vbmUgfSAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3RfX3NlbGVjdDo6LW1zLWV4cGFuZCB7ICAgICBkaXNwbGF5OiBub25lOyAgIH0gLnNob3BpZnktYnV5X19idG4tLXBhcmVudCAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3RfX3NlbGVjdCB7ICAgICBjdXJzb3I6IHBvaW50ZXI7ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QgeyAgIG92ZXJmbG93OiBoaWRkZW47ICAgd2lkdGg6IDEwMCU7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LWltZyB7ICAgbWFyZ2luOiAwIGF1dG8gMTVweCBhdXRvOyAgIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGVhc2U7ICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGVhc2U7ICAgb3BhY2l0eTogMSB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1pbWcuaXMtdHJhbnNpdGlvbmluZyB7ICAgICBvcGFjaXR5OiAwOyAgIH0gLnNob3BpZnktYnV5X19pcy1idXR0b24geyAgIGN1cnNvcjogcG9pbnRlcjsgfSAuc2hvcGlmeS1idXlfX25vLWltYWdlIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1pbWcgeyAgICAgZGlzcGxheTogbm9uZTsgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdGl0bGUgeyAgIGZvbnQtc2l6ZTogMThweDsgICBsaW5lLWhlaWdodDogMS4yOyAgIGNvbG9yOiAjNGE0YTRhOyAgIG1hcmdpbi1ib3R0b206IDE1cHg7ICAgZm9udC13ZWlnaHQ6IDcwMDsgfSAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdGl0bGUgeyAgICAgbWFyZ2luLXRvcDogMTBweDsgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC10aXRsZSB7ICAgZm9udC1zaXplOiAxOHB4OyAgIGNvbG9yOiAjNjY2OyAgIGZvbnQtd2VpZ2h0OiA0MDA7ICAgdGV4dC1hbGlnbjogY2VudGVyOyAgIG1hcmdpbi1ib3R0b206IDE1cHg7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X19wcmljZSB7ICAgbWFyZ2luLWJvdHRvbTogMTVweDsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24geyAgIG1hcmdpbi10b3A6IDMwcHg7ICAgbGluZS1oZWlnaHQ6IDEuNjU7ICAgY29sb3I6ICM0YTRhNGEgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gcCwgICAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gdWwsICAgLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIG9sLCAgIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBpbWcgeyAgICAgbWFyZ2luLWJvdHRvbTogMTBweCAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIHA6bGFzdC1jaGlsZCwgLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIHVsOmxhc3QtY2hpbGQsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBvbDpsYXN0LWNoaWxkLCAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gaW1nOmxhc3QtY2hpbGQgeyAgICAgICBtYXJnaW4tYm90dG9tOiAwOyAgICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gYSB7ICAgICBjb2xvcjogaW5oZXJpdDsgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBpbWcgeyAgICAgbWF4LXdpZHRoOiAxMDAlOyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIGgxIHsgICAgIGZvbnQtc2l6ZTogMjBweDsgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBoMiB7ICAgICBmb250LXNpemU6IDE4cHg7ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gaDMgeyAgICAgZm9udC1zaXplOiAxN3B4OyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIHVsLCAgIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBvbCB7ICAgICBtYXJnaW4tbGVmdDogMmVtOyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIHVsIHsgICAgIGxpc3Qtc3R5bGUtdHlwZTogZGlzYzsgICB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIHsgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X19hY3R1YWwtcHJpY2UsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fY29tcGFyZS1wcmljZSB7ICAgY29sb3I6ICM0YTRhNGE7ICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fYWN0dWFsLXByaWNlIHsgICBmb250LXNpemU6IDE0cHg7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X19jb21wYXJlLXByaWNlIHsgICBmb250LXNpemU6IDEycHg7ICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7ICAgcGFkZGluZy1sZWZ0OiA1cHg7ICAgb3BhY2l0eTogMC42NTsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3VuaXQtcHJpY2UgeyAgIGNvbG9yOiAjNGE0YTRhOyAgIHBhZGRpbmctdG9wOiA1cHg7ICAgZm9udC1zaXplOiAxMnB4OyAgIG9wYWNpdHk6IDAuODsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtc2VsZWN0b3JzIHsgICB0ZXh0LWFsaWduOiBsZWZ0OyAgIGZvbnQtc2l6ZTogMTRweDsgfSAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtc2VsZWN0b3JzIHsgICAgIHdpZHRoOiAxMDAlOyAgICAgbWF4LXdpZHRoOiAyODBweDsgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHkgeyAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQ7ICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQ7ICAgYm9yZGVyLXJhZGl1czogM3B4OyB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHksIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktaW5jcmVtZW50LCAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWRlY3JlbWVudCB7ICAgYm9yZGVyLWNvbG9yOiAjZDNkYmUyOyAgIGxpbmUtaGVpZ2h0OiAxLjI7ICAgZm9udC1zaXplOiAxNXB4OyAgIGhlaWdodDogYXV0bzsgICBwYWRkaW5nLXRvcDogMTJweDsgICBwYWRkaW5nLWJvdHRvbTogMTJweDsgfSAuc2hvcGlmeS1idXlfX2J0biB7ICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9IC5zaG9waWZ5LWJ1eV9fYnRuLXdyYXBwZXIgeyAgIG1hcmdpbi10b3A6IDIwcHg7IH0gLnNob3BpZnktYnV5X19idG4uc2hvcGlmeS1idXlfX2Jlc2lkZS1xdWFudGl0eSB7ICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgIHZlcnRpY2FsLWFsaWduOiB0b3A7ICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDsgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwOyAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50OyB9IC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSAuc2hvcGlmeS1idXlfX3F1YW50aXR5IHsgICAgIGJvcmRlci1yaWdodDogMDsgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwOyAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7ICAgICBiYWNrZ3JvdW5kOiAjZmZmOyAgIH0gLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyIHsgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7ICAgfSAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHkgLnNob3BpZnktYnV5X19idG4td3JhcHBlciB7ICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyAgICAgbWFyZ2luOiAwOyAgIH0gLnNob3BpZnktYnV5X19jYXJ0LWl0ZW1fX3F1YW50aXR5LWNvbnRhaW5lciB7ICAgbWFyZ2luLXRvcDogMjBweDsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0gLnNob3BpZnktYnV5X19sYXlvdXQtdmVydGljYWwgLnNob3BpZnktYnV5X19idG4sICAgLnNob3BpZnktYnV5X19sYXlvdXQtdmVydGljYWwgLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIsICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbCAuc2hvcGlmeS1idXlfX2J0biwgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyIHsgICAgIG1hcmdpbjogMjBweCBhdXRvIDA7ICAgfSAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX2J0bjpmaXJzdC1jaGlsZCwgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbCAuc2hvcGlmeS1idXlfX2J0bjpmaXJzdC1jaGlsZCB7ICAgICBtYXJnaW4tdG9wOiAwOyAgIH0gLnNob3BpZnktYnV5X19sYXlvdXQtdmVydGljYWwgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5LCAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSB7ICAgICBtYXJnaW46IDIwcHggYXV0byAwICAgfSAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHkgLnNob3BpZnktYnV5X19idG4sICAgICAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHkgLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSAuc2hvcGlmeS1idXlfX2J0biwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyIHsgICAgICAgbWFyZ2luOiAwIGF1dG87ICAgICB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eTpmaXJzdC1jaGlsZCwgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbCAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHk6Zmlyc3QtY2hpbGQgeyAgICAgbWFyZ2luOiAwIGF1dG87ICAgfSAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtaW1nLCAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1pbWcgeyAgICAgbWF4LXdpZHRoOiAxMDAlOyAgIH0gQG1lZGlhIChtaW4td2lkdGg6IDUwMHB4KSB7ICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSB7ICAgICB0ZXh0LWFsaWduOiBsZWZ0OyAgICAgbWFyZ2luLWJvdHRvbTogMDsgICAgIG1hcmdpbi1sZWZ0OiAwICAgfSAgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19wcm9kdWN0LWltZy13cmFwcGVyIHsgICAgICAgZmxvYXQ6IGxlZnQ7ICAgICAgIHdpZHRoOiA0MCU7ICAgICB9ICAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtdGl0bGUgeyAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OyAgICAgfSAgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19wcm9kdWN0X190aXRsZSwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LXRpdGxlLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ByaWNlLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24sICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgPiAuc2hvcGlmeS1idXlfX2J0bi13cmFwcGVyLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSA+IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtc2VsZWN0b3JzIHsgICAgICAgbWFyZ2luLWxlZnQ6IGNhbGMoNDAlICsgMjVweCk7ICAgICB9IH0gQG1lZGlhIChtaW4td2lkdGg6IDY4MHB4KSB7ICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1pbWctd3JhcHBlciB7ICAgICAgIGZsb2F0OiBsZWZ0OyAgICAgICB3aWR0aDogNjAlOyAgICAgfSAgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19wcm9kdWN0X190aXRsZSwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LXRpdGxlLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ByaWNlLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24sICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgPiAuc2hvcGlmeS1idXlfX2J0bi13cmFwcGVyLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSA+IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtc2VsZWN0b3JzIHsgICAgICAgbWFyZ2luLWxlZnQ6IGNhbGMoNjAlICsgMjVweCk7ICAgICB9IH0gLm5vLWltYWdlIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1pbWctd3JhcHBlciB7ICAgICBkaXNwbGF5OiBub25lOyAgIH0gQC13ZWJraXQta2V5ZnJhbWVzIGRhc2ggeyAgIHRvIHsgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwOyAgIH0gfSBAa2V5ZnJhbWVzIGRhc2ggeyAgIHRvIHsgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwOyAgIH0gfSAuc2hvcGlmeS1idXlfX2Nhcm91c2VsIHsgICBmb250LXNpemU6IDA7ICAgdGV4dC1hbGlnbjogY2VudGVyOyAgIG1pbi1oZWlnaHQ6IDkwcHg7ICAgbWFyZ2luLWxlZnQ6IC0xNXB4OyAgIG1hcmdpbi10b3A6IDE1cHg7IH0gLnNob3BpZnktYnV5X19jYXJvdXNlbC1pdGVtIHsgICB3aWR0aDogY2FsYygxNi42NjYlIC0gMTVweCk7ICAgbWFyZ2luLWxlZnQ6IDE1cHg7ICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7ICAgY3Vyc29yOiBwb2ludGVyOyAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsgICBwYWRkaW5nOiAwOyAgIGJvcmRlcjogbm9uZSB9IC5zaG9waWZ5LWJ1eV9fY2Fyb3VzZWwtaXRlbTpudGgtY2hpbGQobis3KSB7ICAgICBtYXJnaW4tdG9wOiAxNXB4OyAgIH0gLnNob3BpZnktYnV5X19jYXJvdXNlbC1pdGVtOmJlZm9yZSB7ICAgICBjb250ZW50OiAiIjsgICAgIGRpc3BsYXk6IGJsb2NrOyAgICAgcGFkZGluZy10b3A6IDEwMCU7ICAgfSAubWFpbi1pbWFnZS13cmFwcGVyIHsgICBwb3NpdGlvbjogcmVsYXRpdmU7IH0gLmNhcm91c2VsLWJ1dHRvbiB7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIHdpZHRoOiA3NXB4OyAgIHRvcDogMDsgICBoZWlnaHQ6IDEwMCU7ICAgYm9yZGVyOiBub25lOyAgIGZvbnQtc2l6ZTogMDsgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgICBvcGFjaXR5OiAwLjQ7ICAgY3Vyc29yOiBwb2ludGVyIH0gLmNhcm91c2VsLWJ1dHRvbjpob3ZlciwgICAuY2Fyb3VzZWwtYnV0dG9uOmZvY3VzIHsgICAgIG9wYWNpdHk6IDAuOTsgICAgIG91dGxpbmU6IG5vbmU7ICAgfSAuY2Fyb3VzZWwtYnV0dG9uLWFycm93IHsgICB3aWR0aDogMjBweDsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgbWFyZ2luLWxlZnQ6IDI1cHg7IH0gLmNhcm91c2VsLWJ1dHRvbi0tcHJldmlvdXMgeyAgIGxlZnQ6IDA7ICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOyAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTsgfSAuY2Fyb3VzZWwtYnV0dG9uLS1uZXh0IHsgICByaWdodDogMDsgfSAuc2hvcGlmeS1idXlfX2Nhcm91c2VsLWl0ZW0tLXNlbGVjdGVkIHsgICBvcGFjaXR5OiAwLjQ7IH0gJywKICAgIHByb2R1Y3RTZXQ6ICdodG1sLCBib2R5LCBoMSwgaDIsIGgzLCBoNCwgaDUsIHAgeyAgIHBhZGRpbmc6IDA7ICAgbWFyZ2luOiAwOyB9ICogeyAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH0gYm9keSwgaHRtbCB7ICAgbWluLWhlaWdodDogMTAwJTsgfSBodG1sIHsgICBmb250LWZhbWlseTogIkhlbHZldGljYSBOZXVlIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgICBmb250LXNpemU6IDE0cHg7ICAgbGluZS1oZWlnaHQ6IDEuMjsgICBjb2xvcjogIzRjNGM0YzsgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5OyAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOyAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7IH0gc2VsZWN0IHsgICB0ZXh0LXJlbmRlcmluZzogYXV0byAhaW1wb3J0YW50OyB9IHVsIHsgICBsaXN0LXN0eWxlOiBub25lOyAgIHBhZGRpbmctbGVmdDogMDsgICBtYXJnaW46IDA7IH0gaW1nIHsgICBkaXNwbGF5OiBibG9jazsgICBtYXgtd2lkdGg6IDEwMCU7IH0gaW5wdXQgeyAgIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAgIG1hcmdpbjogMDsgfSAuY2xlYXJmaXg6YWZ0ZXIgeyAgICAgY29udGVudDogIiI7ICAgICBkaXNwbGF5OiB0YWJsZTsgICAgIGNsZWFyOiBib3RoOyAgIH0gLnZpc3VhbGx5aGlkZGVuIHsgICBib3JkZXI6IDA7ICAgaGVpZ2h0OiAxcHg7ICAgbWFyZ2luOiAtMXB4OyAgIG92ZXJmbG93OiBoaWRkZW47ICAgcGFkZGluZzogMDsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgd2lkdGg6IDFweDsgfSAuY29tcG9uZW50LWNvbnRhaW5lciB7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgfSAuc2hvcGlmeS1idXlfX3R5cGUtLWNlbnRlciB7ICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IC5zaG9waWZ5LWJ1eS0tdmlzdWFsbHktaGlkZGVuIHsgICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDsgICBjbGlwOiByZWN0KDFweCwgMXB4LCAxcHgsIDFweCk7ICAgcGFkZGluZzowICFpbXBvcnRhbnQ7ICAgYm9yZGVyOjAgIWltcG9ydGFudDsgICBoZWlnaHQ6IDFweCAhaW1wb3J0YW50OyAgIHdpZHRoOiAxcHggIWltcG9ydGFudDsgICBvdmVyZmxvdzogaGlkZGVuOyB9IC5zaG9waWZ5LWJ1eV9fYnRuIHsgICBjb2xvcjogI2ZmZjsgICBmb250LXNpemU6IDE1cHg7ICAgYmFja2dyb3VuZC1jb2xvcjogIzc4YjY1NzsgICBwYWRkaW5nOiAxMnB4IDQwcHg7ICAgbGV0dGVyLXNwYWNpbmc6IC4zcHg7ICAgZGlzcGxheTogYmxvY2s7ICAgYm9yZGVyLXJhZGl1czogM3B4OyAgIGN1cnNvcjogcG9pbnRlcjsgICAtd2Via2l0LXRyYW5zaXRpb246IGJhY2tncm91bmQgMjAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDIwMG1zIGVhc2U7ICAgbWF4LXdpZHRoOiAxMDAlOyAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyAgIG92ZXJmbG93OiBoaWRkZW47ICAgbGluZS1oZWlnaHQ6IDEuMjsgICBib3JkZXI6IDA7ICAgLW1vei1hcHBlYXJhbmNlOiBub25lOyAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZSB9IC5zaG9waWZ5LWJ1eV9fYnRuOmhvdmVyLCAgIC5zaG9waWZ5LWJ1eV9fYnRuOmZvY3VzIHsgICAgIGJhY2tncm91bmQtY29sb3I6ICM1ZjlkM2U7ICAgfSAuc2hvcGlmeS1idXlfX2J0bi0tcGFyZW50IHsgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgICBib3JkZXI6IDA7ICAgcGFkZGluZzogMDsgICBjdXJzb3I6IHBvaW50ZXIgfSAuc2hvcGlmeS1idXlfX2J0bi0tcGFyZW50OmhvdmVyIC5wcm9kdWN0X192YXJpYW50LWltZywgLnNob3BpZnktYnV5X19idG4tLXBhcmVudDpmb2N1cyAucHJvZHVjdF9fdmFyaWFudC1pbWcgeyAgICAgICBvcGFjaXR5OiAuNzsgICAgIH0gLnNob3BpZnktYnV5X19idG4tLWNhcnQtdGFiIHsgICBwYWRkaW5nOiA1cHggMTFweDsgICBib3JkZXItcmFkaXVzOiAzcHggMCAwIDNweDsgICBwb3NpdGlvbjogZml4ZWQ7ICAgcmlnaHQ6IDA7ICAgdG9wOiA1MCU7ICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDAlLCAtNTAlKTsgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDEwMCUsIC01MCUpOyAgIG9wYWNpdHk6IDA7ICAgbWluLXdpZHRoOiBpbmhlcml0OyAgIHdpZHRoOiBhdXRvOyAgIGhlaWdodDogYXV0bzsgICB6LWluZGV4OiAyMTQ3NDgzNjQ3IH0gLnNob3BpZnktYnV5X19idG4tLWNhcnQtdGFiLmlzLWFjdGl2ZSB7ICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOyAgICAgb3BhY2l0eTogMTsgICB9IC5zaG9waWZ5LWJ1eV9fYnRuX19jb3VudGVyIHsgICBkaXNwbGF5OiBibG9jazsgICBtYXJnaW46IDAgYXV0byAxMHB4IGF1dG87ICAgZm9udC1zaXplOiAxOHB4OyB9IC5zaG9waWZ5LWJ1eV9faWNvbi1jYXJ0LS1zaWRlIHsgICBoZWlnaHQ6IDIwcHg7ICAgd2lkdGg6IDIwcHg7IH0gLnNob3BpZnktYnV5X19idG5bZGlzYWJsZWRdIHsgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTk5OyAgIHBvaW50ZXItZXZlbnRzOiBub25lOyB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1jbG9zZSB7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIHJpZ2h0OiA5cHg7ICAgdG9wOiA4cHg7ICAgZm9udC1zaXplOiAzNXB4OyAgIGNvbG9yOiAjNzY3Njc2OyAgIGJvcmRlcjogbm9uZTsgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgICAtd2Via2l0LXRyYW5zaXRpb246IGNvbG9yIDEwMG1zIGVhc2UsIC13ZWJraXQtdHJhbnNmb3JtIDEwMG1zIGVhc2U7ICAgdHJhbnNpdGlvbjogY29sb3IgMTAwbXMgZWFzZSwgLXdlYmtpdC10cmFuc2Zvcm0gMTAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgZWFzZSwgY29sb3IgMTAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgZWFzZSwgY29sb3IgMTAwbXMgZWFzZSwgLXdlYmtpdC10cmFuc2Zvcm0gMTAwbXMgZWFzZTsgICBjdXJzb3I6IHBvaW50ZXI7ICAgZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7ICAgcGFkZGluZy1yaWdodDogOXB4IH0gLnNob3BpZnktYnV5X19idG4tLWNsb3NlOmhvdmVyIHsgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjIpOyAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7ICAgICBjb2xvcjogaHNsKDAsIDAlLCA0MS4yNzQ1MDk4MDM5JSk7ICAgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWRlY3JlbWVudCwgLnNob3BpZnktYnV5X19xdWFudGl0eS1pbmNyZW1lbnQgeyAgIGNvbG9yOiAjNGM0YzRjOyAgIGRpc3BsYXk6IGJsb2NrOyAgIGhlaWdodDogMzBweDsgICBmbG9hdDogbGVmdDsgICBsaW5lLWhlaWdodDogMTZweDsgICBmb250LWZhbWlseTogbW9ub3NwYWNlOyAgIHdpZHRoOiAyNnB4OyAgIHBhZGRpbmc6IDA7ICAgYm9yZGVyOiBub25lOyAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyAgIC13ZWJraXQtYm94LXNoYWRvdzogbm9uZTsgICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7ICAgY3Vyc29yOiBwb2ludGVyOyAgIGZvbnQtc2l6ZTogMThweDsgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7ICAgYm9yZGVyOiAxcHggc29saWQgIzc2NzY3NjsgICBwb3NpdGlvbjogcmVsYXRpdmUgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWRlY3JlbWVudCBzdmcsIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktaW5jcmVtZW50IHN2ZyB7ICAgICB3aWR0aDogMTRweDsgICAgIGhlaWdodDogMTRweDsgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgICAgIHRvcDogNTAlOyAgICAgbGVmdDogNTAlOyAgICAgbWFyZ2luLXRvcDogLTZweDsgICAgIG1hcmdpbi1sZWZ0OiAtN3B4OyAgICAgZmlsbDogY3VycmVudENvbG9yOyAgIH0gLnNob3BpZnktYnV5X19xdWFudGl0eS1kZWNyZW1lbnQgeyAgIGJvcmRlci1yYWRpdXM6IDNweCAwIDAgM3B4OyB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktaW5jcmVtZW50IHsgICBib3JkZXItcmFkaXVzOiAwIDNweCAzcHggMDsgfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5IHsgICBjb2xvcjogYmxhY2s7ICAgd2lkdGg6IDQ1cHg7ICAgaGVpZ2h0OiAzMHB4OyAgIGZvbnQtc2l6ZTogMTZweDsgICBib3JkZXI6IG5vbmU7ICAgdGV4dC1hbGlnbjogY2VudGVyOyAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgICAtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgcGFkZGluZzogMDsgICBib3JkZXItcmFkaXVzOiAwOyAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNzY3Njc2OyAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNzY3Njc2OyB9IGlucHV0W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiwgaW5wdXRbdHlwZT1udW1iZXJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHsgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7ICAgbWFyZ2luOiAwOyB9IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktY29udGFpbmVyLnNob3BpZnktYnV5X19xdWFudGl0eS13aXRoLWJ0bnMgeyAgIG92ZXJmbG93OiBoaWRkZW4gfSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lci5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktd2l0aC1idG5zIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHkgeyAgICAgYm9yZGVyLWxlZnQ6IDA7ICAgICBib3JkZXItcmlnaHQ6IDA7ICAgICBmbG9hdDogbGVmdDsgICB9IC5zaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdC13cmFwcGVyIHsgICBib3JkZXI6IDFweCBzb2xpZCAjZDNkYmUyOyAgIGJvcmRlci1yYWRpdXM6IDNweDsgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7ICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgICBiYWNrZ3JvdW5kOiAjZmZmOyAgIG92ZXJmbG93OiBoaWRkZW47ICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsgfSAuc2hvcGlmeS1idXlfX3NlbGVjdC1pY29uIHsgICBjdXJzb3I6IHBvaW50ZXI7ICAgZGlzcGxheTogYmxvY2s7ICAgZmlsbDogIzc5OGM5YzsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgcmlnaHQ6IDEwcHg7ICAgdG9wOiA1MCU7ICAgbWFyZ2luLXRvcDogLTZweDsgICBwb2ludGVyLWV2ZW50czogbm9uZTsgICB3aWR0aDogMTJweDsgICBoZWlnaHQ6IDEycHg7ICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfSAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3QgKyAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3QgeyAgICAgbWFyZ2luLXRvcDogNy41cHg7ICAgfSAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3RfX2xhYmVsIHsgICBkaXNwbGF5OiBibG9jazsgICBmb250LXNpemU6IDE0cHg7ICAgbWFyZ2luLXRvcDogMTVweDsgICBtYXJnaW4tYm90dG9tOiA1cHg7IH0gLnNob3BpZnktYnV5X19idG4tLXBhcmVudCAuc2hvcGlmeS1idXlfX29wdGlvbi1zZWxlY3RfX2xhYmVsIHsgICAgIGN1cnNvcjogcG9pbnRlcjsgICB9IC5zaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdF9fc2VsZWN0IHsgICBmb250LXNpemU6IGluaGVyaXQ7ICAgcGFkZGluZzogN3B4IDEwcHg7ICAgcGFkZGluZy1yaWdodDogMzJweDsgICBib3JkZXI6IDA7ICAgd2lkdGg6IDEwMCU7ICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7ICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyAgIC1tb3otYXBwZWFyYW5jZTogbm9uZSB9IC5zaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdF9fc2VsZWN0OjotbXMtZXhwYW5kIHsgICAgIGRpc3BsYXk6IG5vbmU7ICAgfSAuc2hvcGlmeS1idXlfX2J0bi0tcGFyZW50IC5zaG9waWZ5LWJ1eV9fb3B0aW9uLXNlbGVjdF9fc2VsZWN0IHsgICAgIGN1cnNvcjogcG9pbnRlcjsgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdCB7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgICB3aWR0aDogMTAwJTsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtaW1nIHsgICBtYXJnaW46IDAgYXV0byAxNXB4IGF1dG87ICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZTsgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZTsgICBvcGFjaXR5OiAxIH0gLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LWltZy5pcy10cmFuc2l0aW9uaW5nIHsgICAgIG9wYWNpdHk6IDA7ICAgfSAuc2hvcGlmeS1idXlfX2lzLWJ1dHRvbiB7ICAgY3Vyc29yOiBwb2ludGVyOyB9IC5zaG9waWZ5LWJ1eV9fbm8taW1hZ2UgLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LWltZyB7ICAgICBkaXNwbGF5OiBub25lOyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0X190aXRsZSB7ICAgZm9udC1zaXplOiAxOHB4OyAgIGxpbmUtaGVpZ2h0OiAxLjI7ICAgY29sb3I6ICM0YTRhNGE7ICAgbWFyZ2luLWJvdHRvbTogMTVweDsgICBmb250LXdlaWdodDogNzAwOyB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19wcm9kdWN0X190aXRsZSB7ICAgICBtYXJnaW4tdG9wOiAxMHB4OyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LXRpdGxlIHsgICBmb250LXNpemU6IDE4cHg7ICAgY29sb3I6ICM2NjY7ICAgZm9udC13ZWlnaHQ6IDQwMDsgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgbWFyZ2luLWJvdHRvbTogMTVweDsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ByaWNlIHsgICBtYXJnaW4tYm90dG9tOiAxNXB4OyB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiB7ICAgbWFyZ2luLXRvcDogMzBweDsgICBsaW5lLWhlaWdodDogMS42NTsgICBjb2xvcjogIzRhNGE0YSB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBwLCAgIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiB1bCwgICAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gb2wsICAgLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIGltZyB7ICAgICBtYXJnaW4tYm90dG9tOiAxMHB4ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gcDpsYXN0LWNoaWxkLCAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gdWw6bGFzdC1jaGlsZCwgLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIG9sOmxhc3QtY2hpbGQsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBpbWc6bGFzdC1jaGlsZCB7ICAgICAgIG1hcmdpbi1ib3R0b206IDA7ICAgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBhIHsgICAgIGNvbG9yOiBpbmhlcml0OyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIGltZyB7ICAgICBtYXgtd2lkdGg6IDEwMCU7ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gaDEgeyAgICAgZm9udC1zaXplOiAyMHB4OyAgIH0gLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIGgyIHsgICAgIGZvbnQtc2l6ZTogMThweDsgICB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiBoMyB7ICAgICBmb250LXNpemU6IDE3cHg7ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gdWwsICAgLnNob3BpZnktYnV5X19wcm9kdWN0LWRlc2NyaXB0aW9uIG9sIHsgICAgIG1hcmdpbi1sZWZ0OiAyZW07ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtZGVzY3JpcHRpb24gdWwgeyAgICAgbGlzdC1zdHlsZS10eXBlOiBkaXNjOyAgIH0gLnNob3BpZnktYnV5X19sYXlvdXQtdmVydGljYWwgeyAgIHRleHQtYWxpZ246IGNlbnRlcjsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX2FjdHVhbC1wcmljZSwgLnNob3BpZnktYnV5X19wcm9kdWN0X19jb21wYXJlLXByaWNlIHsgICBjb2xvcjogIzRhNGE0YTsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0gLnNob3BpZnktYnV5X19wcm9kdWN0X19hY3R1YWwtcHJpY2UgeyAgIGZvbnQtc2l6ZTogMTRweDsgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX2NvbXBhcmUtcHJpY2UgeyAgIGZvbnQtc2l6ZTogMTJweDsgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDsgICBwYWRkaW5nLWxlZnQ6IDVweDsgICBvcGFjaXR5OiAwLjY1OyB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdW5pdC1wcmljZSB7ICAgY29sb3I6ICM0YTRhNGE7ICAgcGFkZGluZy10b3A6IDVweDsgICBmb250LXNpemU6IDEycHg7ICAgb3BhY2l0eTogMC44OyB9IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1zZWxlY3RvcnMgeyAgIHRleHQtYWxpZ246IGxlZnQ7ICAgZm9udC1zaXplOiAxNHB4OyB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1zZWxlY3RvcnMgeyAgICAgd2lkdGg6IDEwMCU7ICAgICBtYXgtd2lkdGg6IDI4MHB4OyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgIH0gLnNob3BpZnktYnV5X19xdWFudGl0eSB7ICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZDsgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZDsgICBib3JkZXItcmFkaXVzOiAzcHg7IH0gLnNob3BpZnktYnV5X19xdWFudGl0eSwgLnNob3BpZnktYnV5X19xdWFudGl0eS1pbmNyZW1lbnQsIC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHktZGVjcmVtZW50IHsgICBib3JkZXItY29sb3I6ICNkM2RiZTI7ICAgbGluZS1oZWlnaHQ6IDEuMjsgICBmb250LXNpemU6IDE1cHg7ICAgaGVpZ2h0OiBhdXRvOyAgIHBhZGRpbmctdG9wOiAxMnB4OyAgIHBhZGRpbmctYm90dG9tOiAxMnB4OyB9IC5zaG9waWZ5LWJ1eV9fYnRuIHsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0gLnNob3BpZnktYnV5X19idG4td3JhcHBlciB7ICAgbWFyZ2luLXRvcDogMjBweDsgfSAuc2hvcGlmeS1idXlfX2J0bi5zaG9waWZ5LWJ1eV9fYmVzaWRlLXF1YW50aXR5IHsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgdmVydGljYWwtYWxpZ246IHRvcDsgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwOyAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7ICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7IH0gLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IC5zaG9waWZ5LWJ1eV9fcXVhbnRpdHkgeyAgICAgYm9yZGVyLXJpZ2h0OiAwOyAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7ICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDsgICAgIGJhY2tncm91bmQ6ICNmZmY7ICAgfSAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHkgLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIgeyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgICAgdmVydGljYWwtYWxpZ246IHRvcDsgICB9IC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSAuc2hvcGlmeS1idXlfX2J0bi13cmFwcGVyIHsgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7ICAgICBtYXJnaW46IDA7ICAgfSAuc2hvcGlmeS1idXlfX2NhcnQtaXRlbV9fcXVhbnRpdHktY29udGFpbmVyIHsgICBtYXJnaW4tdG9wOiAyMHB4OyAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfSAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX2J0biwgICAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lciwgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fYnRuLCAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIgeyAgICAgbWFyZ2luOiAyMHB4IGF1dG8gMDsgICB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fYnRuOmZpcnN0LWNoaWxkLCAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fYnRuOmZpcnN0LWNoaWxkIHsgICAgIG1hcmdpbi10b3A6IDA7ICAgfSAuc2hvcGlmeS1idXlfX2xheW91dC12ZXJ0aWNhbCAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHksIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IHsgICAgIG1hcmdpbjogMjBweCBhdXRvIDAgICB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSAuc2hvcGlmeS1idXlfX2J0biwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eSAuc2hvcGlmeS1idXlfX3F1YW50aXR5LWNvbnRhaW5lciwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5IC5zaG9waWZ5LWJ1eV9fYnRuLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbCAuc2hvcGlmeS1idXlfX2J0bi1hbmQtcXVhbnRpdHkgLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIgeyAgICAgICBtYXJnaW46IDAgYXV0bzsgICAgIH0gLnNob3BpZnktYnV5X19sYXlvdXQtdmVydGljYWwgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5OmZpcnN0LWNoaWxkLCAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIC5zaG9waWZ5LWJ1eV9fYnRuLWFuZC1xdWFudGl0eTpmaXJzdC1jaGlsZCB7ICAgICBtYXJnaW46IDAgYXV0bzsgICB9IC5zaG9waWZ5LWJ1eV9fbGF5b3V0LXZlcnRpY2FsIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1pbWcsIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgLnNob3BpZnktYnV5X19wcm9kdWN0X192YXJpYW50LWltZyB7ICAgICBtYXgtd2lkdGg6IDEwMCU7ICAgfSBAbWVkaWEgKG1pbi13aWR0aDogNTAwcHgpIHsgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIHsgICAgIHRleHQtYWxpZ246IGxlZnQ7ICAgICBtYXJnaW4tYm90dG9tOiAwOyAgICAgbWFyZ2luLWxlZnQ6IDAgICB9ICAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QtaW1nLXdyYXBwZXIgeyAgICAgICBmbG9hdDogbGVmdDsgICAgICAgd2lkdGg6IDQwJTsgICAgIH0gICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC10aXRsZSB7ICAgICAgIHRleHQtYWxpZ246IGxlZnQ7ICAgICB9ICAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3RpdGxlLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtdGl0bGUsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fcHJpY2UsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5LCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSA+IC5zaG9waWZ5LWJ1eV9fYnRuLXdyYXBwZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpID4gLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1zZWxlY3RvcnMgeyAgICAgICBtYXJnaW4tbGVmdDogY2FsYyg0MCUgKyAyNXB4KTsgICAgIH0gfSBAbWVkaWEgKG1pbi13aWR0aDogNjgwcHgpIHsgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19wcm9kdWN0LWltZy13cmFwcGVyIHsgICAgICAgZmxvYXQ6IGxlZnQ7ICAgICAgIHdpZHRoOiA2MCU7ICAgICB9ICAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3RpdGxlLCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSAuc2hvcGlmeS1idXlfX3Byb2R1Y3RfX3ZhcmlhbnQtdGl0bGUsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fcHJpY2UsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdC1kZXNjcmlwdGlvbiwgICAgIC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWw6bm90KC5uby1pbWFnZSkgLnNob3BpZnktYnV5X19idG4tYW5kLXF1YW50aXR5LCAgICAgLnNob3BpZnktYnV5X19sYXlvdXQtaG9yaXpvbnRhbDpub3QoLm5vLWltYWdlKSA+IC5zaG9waWZ5LWJ1eV9fYnRuLXdyYXBwZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpID4gLnNob3BpZnktYnV5X19xdWFudGl0eS1jb250YWluZXIsICAgICAuc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsOm5vdCgubm8taW1hZ2UpIC5zaG9waWZ5LWJ1eV9fcHJvZHVjdF9fdmFyaWFudC1zZWxlY3RvcnMgeyAgICAgICBtYXJnaW4tbGVmdDogY2FsYyg2MCUgKyAyNXB4KTsgICAgIH0gfSAubm8taW1hZ2UgLnNob3BpZnktYnV5X19wcm9kdWN0LWltZy13cmFwcGVyIHsgICAgIGRpc3BsYXk6IG5vbmU7ICAgfSBALXdlYmtpdC1rZXlmcmFtZXMgZGFzaCB7ICAgdG8geyAgICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IDA7ICAgfSB9IEBrZXlmcmFtZXMgZGFzaCB7ICAgdG8geyAgICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IDA7ICAgfSB9IC5zaG9waWZ5LWJ1eV9fY2Fyb3VzZWwgeyAgIGZvbnQtc2l6ZTogMDsgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgbWluLWhlaWdodDogOTBweDsgICBtYXJnaW4tbGVmdDogLTE1cHg7ICAgbWFyZ2luLXRvcDogMTVweDsgfSAuc2hvcGlmeS1idXlfX2Nhcm91c2VsLWl0ZW0geyAgIHdpZHRoOiBjYWxjKDE2LjY2NiUgLSAxNXB4KTsgICBtYXJnaW4tbGVmdDogMTVweDsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgICBjdXJzb3I6IHBvaW50ZXI7ICAgcG9zaXRpb246IHJlbGF0aXZlOyAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7ICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOyAgIHBhZGRpbmc6IDA7ICAgYm9yZGVyOiBub25lIH0gLnNob3BpZnktYnV5X19jYXJvdXNlbC1pdGVtOm50aC1jaGlsZChuKzcpIHsgICAgIG1hcmdpbi10b3A6IDE1cHg7ICAgfSAuc2hvcGlmeS1idXlfX2Nhcm91c2VsLWl0ZW06YmVmb3JlIHsgICAgIGNvbnRlbnQ6ICIiOyAgICAgZGlzcGxheTogYmxvY2s7ICAgICBwYWRkaW5nLXRvcDogMTAwJTsgICB9IC5tYWluLWltYWdlLXdyYXBwZXIgeyAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgfSAuY2Fyb3VzZWwtYnV0dG9uIHsgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgd2lkdGg6IDc1cHg7ICAgdG9wOiAwOyAgIGhlaWdodDogMTAwJTsgICBib3JkZXI6IG5vbmU7ICAgZm9udC1zaXplOiAwOyAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAgIG9wYWNpdHk6IDAuNDsgICBjdXJzb3I6IHBvaW50ZXIgfSAuY2Fyb3VzZWwtYnV0dG9uOmhvdmVyLCAgIC5jYXJvdXNlbC1idXR0b246Zm9jdXMgeyAgICAgb3BhY2l0eTogMC45OyAgICAgb3V0bGluZTogbm9uZTsgICB9IC5jYXJvdXNlbC1idXR0b24tYXJyb3cgeyAgIHdpZHRoOiAyMHB4OyAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICBtYXJnaW4tbGVmdDogMjVweDsgfSAuY2Fyb3VzZWwtYnV0dG9uLS1wcmV2aW91cyB7ICAgbGVmdDogMDsgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7ICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOyB9IC5jYXJvdXNlbC1idXR0b24tLW5leHQgeyAgIHJpZ2h0OiAwOyB9IC5zaG9waWZ5LWJ1eV9fY2Fyb3VzZWwtaXRlbS0tc2VsZWN0ZWQgeyAgIG9wYWNpdHk6IDAuNDsgfSAuc2hvcGlmeS1idXlfX2NvbGxlY3Rpb24geyAgIG92ZXJmbG93OiBoaWRkZW47IH0gLnNob3BpZnktYnV5X19jb2xsZWN0aW9uLXByb2R1Y3RzIHsgICBtYXJnaW4tbGVmdDogLTE1cHg7ICAgdGV4dC1hbGlnbjogY2VudGVyIH0gQG1lZGlhKG1pbi13aWR0aDogNjAxcHgpIHsgLnNob3BpZnktYnV5X19jb2xsZWN0aW9uLXByb2R1Y3RzIHsgICAgIG1hcmdpbi1sZWZ0OiAtMjBweCB9ICAgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QgeyAgIG1pbi13aWR0aDogMjQwcHg7ICAgd2lkdGg6IGF1dG87ICAgbWFyZ2luLWxlZnQ6IDE1cHg7ICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgIHZlcnRpY2FsLWFsaWduOiB0b3AgfSAuc2hvcGlmeS1idXlfX3Byb2R1Y3QgKyAuc2hvcGlmeS1idXlfX3Byb2R1Y3QgeyAgICAgbWFyZ2luLXRvcDogMTVweDsgICB9IEBtZWRpYShtaW4td2lkdGg6IDYwMXB4KSB7IC5zaG9waWZ5LWJ1eV9fcHJvZHVjdCB7ICAgICB3aWR0aDogY2FsYygyNSUgLSAyMHB4KTsgICAgIG1hcmdpbi1sZWZ0OiAyMHB4OyAgICAgbWFyZ2luLWJvdHRvbTogNTBweCB9ICAgICAgLnNob3BpZnktYnV5X19wcm9kdWN0ICsgLnNob3BpZnktYnV5X19wcm9kdWN0IHsgICAgICAgbWFyZ2luLXRvcDogMDsgICAgIH0gICB9IC5zaG9waWZ5LWJ1eV9fYnRuLnNob3BpZnktYnV5X19jb2xsZWN0aW9uLXBhZ2luYXRpb24tYnV0dG9uICB7ICAgZGlzcGxheTogbm9uZTsgICBtYXJnaW46IDE1cHggYXV0byB9IC5zaG9waWZ5LWJ1eV9fYnRuLnNob3BpZnktYnV5X19jb2xsZWN0aW9uLXBhZ2luYXRpb24tYnV0dG9uLmlzLWFjdGl2ZSB7ICAgICBkaXNwbGF5OiBibG9jazsgICB9ICAnLAogICAgdG9nZ2xlOiAnaHRtbCwgYm9keSwgaDEsIGgyLCBoMywgaDQsIGg1LCBwIHsgICBwYWRkaW5nOiAwOyAgIG1hcmdpbjogMDsgfSAqIHsgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7ICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9IGJvZHksIGh0bWwgeyAgIG1pbi1oZWlnaHQ6IDEwMCU7IH0gaHRtbCB7ICAgZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7ICAgZm9udC1zaXplOiAxNHB4OyAgIGxpbmUtaGVpZ2h0OiAxLjI7ICAgY29sb3I6ICM0YzRjNGM7ICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTsgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOyB9IHNlbGVjdCB7ICAgdGV4dC1yZW5kZXJpbmc6IGF1dG8gIWltcG9ydGFudDsgfSB1bCB7ICAgbGlzdC1zdHlsZTogbm9uZTsgICBwYWRkaW5nLWxlZnQ6IDA7ICAgbWFyZ2luOiAwOyB9IGltZyB7ICAgZGlzcGxheTogYmxvY2s7ICAgbWF4LXdpZHRoOiAxMDAlOyB9IGlucHV0IHsgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgICBtYXJnaW46IDA7IH0gLmNsZWFyZml4OmFmdGVyIHsgICAgIGNvbnRlbnQ6ICIiOyAgICAgZGlzcGxheTogdGFibGU7ICAgICBjbGVhcjogYm90aDsgICB9IC52aXN1YWxseWhpZGRlbiB7ICAgYm9yZGVyOiAwOyAgIGhlaWdodDogMXB4OyAgIG1hcmdpbjogLTFweDsgICBvdmVyZmxvdzogaGlkZGVuOyAgIHBhZGRpbmc6IDA7ICAgcG9zaXRpb246IGFic29sdXRlOyAgIHdpZHRoOiAxcHg7IH0gLmNvbXBvbmVudC1jb250YWluZXIgeyAgIG92ZXJmbG93OiBoaWRkZW47IH0gLnNob3BpZnktYnV5X190eXBlLS1jZW50ZXIgeyAgIHRleHQtYWxpZ246IGNlbnRlcjsgfSAuc2hvcGlmeS1idXktLXZpc3VhbGx5LWhpZGRlbiB7ICAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7ICAgY2xpcDogcmVjdCgxcHgsIDFweCwgMXB4LCAxcHgpOyAgIHBhZGRpbmc6MCAhaW1wb3J0YW50OyAgIGJvcmRlcjowICFpbXBvcnRhbnQ7ICAgaGVpZ2h0OiAxcHggIWltcG9ydGFudDsgICB3aWR0aDogMXB4ICFpbXBvcnRhbnQ7ICAgb3ZlcmZsb3c6IGhpZGRlbjsgfSAuc2hvcGlmeS1idXlfX2J0biB7ICAgY29sb3I6ICNmZmY7ICAgZm9udC1zaXplOiAxNXB4OyAgIGJhY2tncm91bmQtY29sb3I6ICM3OGI2NTc7ICAgcGFkZGluZzogMTJweCA0MHB4OyAgIGxldHRlci1zcGFjaW5nOiAuM3B4OyAgIGRpc3BsYXk6IGJsb2NrOyAgIGJvcmRlci1yYWRpdXM6IDNweDsgICBjdXJzb3I6IHBvaW50ZXI7ICAgLXdlYmtpdC10cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDIwMG1zIGVhc2U7ICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAyMDBtcyBlYXNlOyAgIG1heC13aWR0aDogMTAwJTsgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgICBvdmVyZmxvdzogaGlkZGVuOyAgIGxpbmUtaGVpZ2h0OiAxLjI7ICAgYm9yZGVyOiAwOyAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTsgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmUgfSAuc2hvcGlmeS1idXlfX2J0bjpob3ZlciwgICAuc2hvcGlmeS1idXlfX2J0bjpmb2N1cyB7ICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWY5ZDNlOyAgIH0gLnNob3BpZnktYnV5X19idG4tLXBhcmVudCB7ICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7ICAgYm9yZGVyOiAwOyAgIHBhZGRpbmc6IDA7ICAgY3Vyc29yOiBwb2ludGVyIH0gLnNob3BpZnktYnV5X19idG4tLXBhcmVudDpob3ZlciAucHJvZHVjdF9fdmFyaWFudC1pbWcsIC5zaG9waWZ5LWJ1eV9fYnRuLS1wYXJlbnQ6Zm9jdXMgLnByb2R1Y3RfX3ZhcmlhbnQtaW1nIHsgICAgICAgb3BhY2l0eTogLjc7ICAgICB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1jYXJ0LXRhYiB7ICAgcGFkZGluZzogNXB4IDExcHg7ICAgYm9yZGVyLXJhZGl1czogM3B4IDAgMCAzcHg7ICAgcG9zaXRpb246IGZpeGVkOyAgIHJpZ2h0OiAwOyAgIHRvcDogNTAlOyAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwJSwgLTUwJSk7ICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDAlLCAtNTAlKTsgICBvcGFjaXR5OiAwOyAgIG1pbi13aWR0aDogaW5oZXJpdDsgICB3aWR0aDogYXV0bzsgICBoZWlnaHQ6IGF1dG87ICAgei1pbmRleDogMjE0NzQ4MzY0NyB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1jYXJ0LXRhYi5pcy1hY3RpdmUgeyAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7ICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgICAgIG9wYWNpdHk6IDE7ICAgfSAuc2hvcGlmeS1idXlfX2J0bl9fY291bnRlciB7ICAgZGlzcGxheTogYmxvY2s7ICAgbWFyZ2luOiAwIGF1dG8gMTBweCBhdXRvOyAgIGZvbnQtc2l6ZTogMThweDsgfSAuc2hvcGlmeS1idXlfX2ljb24tY2FydC0tc2lkZSB7ICAgaGVpZ2h0OiAyMHB4OyAgIHdpZHRoOiAyMHB4OyB9IC5zaG9waWZ5LWJ1eV9fYnRuW2Rpc2FibGVkXSB7ICAgYmFja2dyb3VuZC1jb2xvcjogIzk5OTsgICBwb2ludGVyLWV2ZW50czogbm9uZTsgfSAuc2hvcGlmeS1idXlfX2J0bi0tY2xvc2UgeyAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgICByaWdodDogOXB4OyAgIHRvcDogOHB4OyAgIGZvbnQtc2l6ZTogMzVweDsgICBjb2xvcjogIzc2NzY3NjsgICBib3JkZXI6IG5vbmU7ICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7ICAgLXdlYmtpdC10cmFuc2l0aW9uOiBjb2xvciAxMDBtcyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAxMDBtcyBlYXNlOyAgIHRyYW5zaXRpb246IGNvbG9yIDEwMG1zIGVhc2UsIC13ZWJraXQtdHJhbnNmb3JtIDEwMG1zIGVhc2U7ICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDEwMG1zIGVhc2UsIGNvbG9yIDEwMG1zIGVhc2U7ICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDEwMG1zIGVhc2UsIGNvbG9yIDEwMG1zIGVhc2UsIC13ZWJraXQtdHJhbnNmb3JtIDEwMG1zIGVhc2U7ICAgY3Vyc29yOiBwb2ludGVyOyAgIGZvbnQtZmFtaWx5OiAiSGVsdmV0aWNhIE5ldWUiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyAgIHBhZGRpbmctcmlnaHQ6IDlweCB9IC5zaG9waWZ5LWJ1eV9fYnRuLS1jbG9zZTpob3ZlciB7ICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4yKTsgICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpOyAgICAgY29sb3I6IGhzbCgwLCAwJSwgNDEuMjc0NTA5ODAzOSUpOyAgIH0gLnNob3BpZnktYnV5X19jYXJ0LXRvZ2dsZS13cmFwcGVyIHsgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0gLnNob3BpZnktYnV5X19jYXJ0LXRvZ2dsZSB7ICAgYmFja2dyb3VuZC1jb2xvcjogIzc4YjY1NzsgICBjb2xvcjogI2ZmZjsgICBib3JkZXItcmFkaXVzOiAzcHggMCAwIDNweDs7ICAgcGFkZGluZzogOHB4IDEwcHg7ICAgdGV4dC1hbGlnbjogY2VudGVyOyAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICBtaW4td2lkdGg6IDQ2cHg7ICAgbWFyZ2luLXJpZ2h0OiAwOyAgIGN1cnNvcjogcG9pbnRlcjsgICAtd2Via2l0LXRyYW5zaXRpb246IGJhY2tncm91bmQgMjAwbXMgZWFzZTsgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDIwMG1zIGVhc2UgfSAuc2hvcGlmeS1idXlfX2NhcnQtdG9nZ2xlOmhvdmVyIHsgICAgIGJhY2tncm91bmQtY29sb3I6ICM1ZjlkM2U7ICAgfSAuc2hvcGlmeS1idXlfX2NhcnQtdG9nZ2xlX19jb3VudCB7ICAgZm9udC1zaXplOiAxOHB4OyAgIG1hcmdpbi1ib3R0b206IDEwcHg7IH0gLnNob3BpZnktYnV5X19pY29uLWNhcnRfX2dyb3VwIHsgICBmaWxsOiAjZmZmOyB9IC5pcy1pbmxpbmUgLnNob3BpZnktYnV5X19pY29uLWNhcnQsICAgLmlzLWlubGluZSAuc2hvcGlmeS1idXlfX2NhcnQtdG9nZ2xlX190aXRsZSwgICAuaXMtaW5saW5lIC5zaG9waWZ5LWJ1eV9fY2FydC10b2dnbGVfX2NvdW50IHsgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7ICAgfSAuaXMtaW5saW5lIHsgICAgLnNob3BpZnktYnV5X19pY29uLWNhcnQgeyAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7ICAgfSAgICAuc2hvcGlmeS1idXlfX2NhcnQtdG9nZ2xlX190aXRsZSB7ICAgICBmb250LXNpemU6IDE2cHg7ICAgICBmb250LXdlaWdodDogbm9ybWFsOyAgIH0gICAgLnNob3BpZnktYnV5X19jYXJ0LXRvZ2dsZV9fY291bnQgeyAgICAgbWFyZ2luLWxlZnQ6IDIxcHg7ICAgICBtYXJnaW4tYm90dG9tOiAwOyAgICAgcG9zaXRpb246IHJlbGF0aXZlICAgfSAgICAgIC5zaG9waWZ5LWJ1eV9fY2FydC10b2dnbGVfX2NvdW50OmJlZm9yZSB7ICAgICAgIGNvbnRlbnQ6ICIiOyAgICAgICBkaXNwbGF5OiBibG9jazsgICAgICAgcG9zaXRpb246IGFic29sdXRlOyAgICAgICBsZWZ0OiAtMTJweDsgICAgICAgaGVpZ2h0OiAxMDAlOyAgICAgICB3aWR0aDogMXB4OyAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyAgICAgICBvcGFjaXR5OiAwLjM7ICAgICB9IH0gLmlzLWlubGluZS5zaG9waWZ5LWJ1eV9fY2FydC10b2dnbGUgeyAgICAgYm9yZGVyLXJhZGl1czogM3B4OyAgICAgcGFkZGluZzogNXB4IDEwcHg7ICAgfSAnCiAgfSwKICAgICAgZGVsZWdhdGVFdmVudFNwbGl0dGVyID0gL14oXFMrKVxzKiguKikkLywKICAgICAgRVNDX0tFWSA9IDI3LAogICAgICBWaWV3ID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gVmlldyhjb21wb25lbnQpIHsKICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQsIHRoaXMuaWZyYW1lID0gbnVsbCwgdGhpcy5ub2RlID0gdGhpcy5jb21wb25lbnQubm9kZSwgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSh0aGlzLmNvbXBvbmVudC5vcHRpb25zLnRlbXBsYXRlcywgdGhpcy5jb21wb25lbnQub3B0aW9ucy5jb250ZW50cywgdGhpcy5jb21wb25lbnQub3B0aW9ucy5vcmRlciksIHRoaXMuZXZlbnRzQm91bmQgPSAhMTsKICAgIH0KCiAgICB2YXIgX3Byb3RvID0gVmlldy5wcm90b3R5cGU7CiAgICByZXR1cm4gX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KCkgewogICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubm9kZS5jbGFzc05hbWUgKz0gIiBzaG9waWZ5LWJ1eS1mcmFtZSBzaG9waWZ5LWJ1eS1mcmFtZS0tIi5jb25jYXQodGhpcy5jb21wb25lbnQudHlwZUtleSksIHRoaXMuaWZyYW1lIHx8ICF0aGlzLmNvbXBvbmVudC5vcHRpb25zLmlmcmFtZSA/IFByb21pc2UucmVzb2x2ZSh0aGlzLmlmcmFtZSkgOiAodGhpcy5pZnJhbWUgPSBuZXcgaWZyYW1lKHRoaXMuY29tcG9uZW50Lm5vZGUsIHsKICAgICAgICBjbGFzc2VzOiB0aGlzLmNvbXBvbmVudC5jbGFzc2VzLAogICAgICAgIGN1c3RvbVN0eWxlczogdGhpcy5jb21wb25lbnQuc3R5bGVzLAogICAgICAgIHN0eWxlc2hlZXQ6IHN0eWxlc1t0aGlzLmNvbXBvbmVudC50eXBlS2V5XSwKICAgICAgICBicm93c2VyRmVhdHVyZXM6IHRoaXMuY29tcG9uZW50LnByb3BzLmJyb3dzZXJGZWF0dXJlcywKICAgICAgICBnb29nbGVGb250czogdGhpcy5jb21wb25lbnQuZ29vZ2xlRm9udHMsCiAgICAgICAgbmFtZTogdGhpcy5jb21wb25lbnQubmFtZSwKICAgICAgICB3aWR0aDogInZlcnRpY2FsIiA9PT0gdGhpcy5jb21wb25lbnQub3B0aW9ucy5sYXlvdXQgPyB0aGlzLmNvbXBvbmVudC5vcHRpb25zLndpZHRoIDogbnVsbAogICAgICB9KSwgdGhpcy5pZnJhbWUuYWRkQ2xhc3ModGhpcy5jbGFzc05hbWUpLCB0aGlzLmlmcmFtZS5sb2FkKCkpOwogICAgfSwgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHRoaXMuY29tcG9uZW50Ll91c2VyRXZlbnQoImJlZm9yZVJlbmRlciIpOwoKICAgICAgdmFyIGh0bWwgPSB0aGlzLnRlbXBsYXRlLnJlbmRlcih7CiAgICAgICAgZGF0YTogdGhpcy5jb21wb25lbnQudmlld0RhdGEKICAgICAgfSwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICByZXR1cm4gX3RoaXMud3JhcFRlbXBsYXRlKGRhdGEpOwogICAgICB9KTsKICAgICAgdGhpcy53cmFwcGVyIHx8ICh0aGlzLndyYXBwZXIgPSB0aGlzLl9jcmVhdGVXcmFwcGVyKCkpLCB0aGlzLnVwZGF0ZU5vZGUodGhpcy53cmFwcGVyLCBodG1sKSwgdGhpcy5yZXNpemUoKSwgdGhpcy5jb21wb25lbnQuX3VzZXJFdmVudCgiYWZ0ZXJSZW5kZXIiKTsKICAgIH0sIF9wcm90by5kZWxlZ2F0ZUV2ZW50cyA9IGZ1bmN0aW9uIGRlbGVnYXRlRXZlbnRzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuZXZlbnRzQm91bmQgfHwgKHRoaXMuY2xvc2VDb21wb25lbnRzT25Fc2MoKSwgT2JqZWN0LmtleXModGhpcy5jb21wb25lbnQuRE9NRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICB2YXIgX2tleSRtYXRjaCwKICAgICAgICAgICAgX2tleSRtYXRjaDIgPSBfc2xpY2VkVG9BcnJheShrZXkubWF0Y2goZGVsZWdhdGVFdmVudFNwbGl0dGVyKSwgMyksCiAgICAgICAgICAgIGV2ZW50TmFtZSA9IF9rZXkkbWF0Y2gyWzFdLAogICAgICAgICAgICBzZWxlY3RvclN0cmluZyA9IF9rZXkkbWF0Y2gyWzJdOwoKICAgICAgICBzZWxlY3RvclN0cmluZyA/IF90aGlzMi5fb24oZXZlbnROYW1lLCBzZWxlY3RvclN0cmluZywgZnVuY3Rpb24gKGV2dCwgdGFyZ2V0KSB7CiAgICAgICAgICBfdGhpczIuY29tcG9uZW50LkRPTUV2ZW50c1trZXldLmNhbGwoX3RoaXMyLCBldnQsIHRhcmdldCk7CiAgICAgICAgfSkgOiBfdGhpczIud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgIF90aGlzMi5jb21wb25lbnQuRE9NRXZlbnRzW2tleV0uY2FsbChfdGhpczIsIGV2dCk7CiAgICAgICAgfSk7CiAgICAgIH0pLCB0aGlzLmlmcmFtZSAmJiAodGhpcy5pZnJhbWUuZWwub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMi5pZnJhbWUuZWwub25sb2FkID0gbnVsbCwgX3RoaXMyLnJlbG9hZElmcmFtZSgpOwogICAgICB9KSwgdGhpcy5ldmVudHNCb3VuZCA9ICEwKTsKICAgIH0sIF9wcm90by5yZWxvYWRJZnJhbWUgPSBmdW5jdGlvbiByZWxvYWRJZnJhbWUoKSB7CiAgICAgIHRoaXMubm9kZS5yZW1vdmVDaGlsZCh0aGlzLmlmcmFtZS5lbCksIHRoaXMud3JhcHBlciA9IG51bGwsIHRoaXMuaWZyYW1lID0gbnVsbCwgdGhpcy5jb21wb25lbnQuaW5pdCgpOwogICAgfSwgX3Byb3RvLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZCh3cmFwcGVyKSB7CiAgICAgIHRoaXMuaWZyYW1lID8gdGhpcy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHdyYXBwZXIpIDogdGhpcy5jb21wb25lbnQubm9kZS5hcHBlbmRDaGlsZCh3cmFwcGVyKTsKICAgIH0sIF9wcm90by5hZGRDbGFzcyA9IGZ1bmN0aW9uIGFkZENsYXNzKGNsYXNzTmFtZSkgewogICAgICB0aGlzLmlmcmFtZSA/IHRoaXMuaWZyYW1lLmFkZENsYXNzKGNsYXNzTmFtZSkgOiBhZGRDbGFzc1RvRWxlbWVudChjbGFzc05hbWUsIHRoaXMuY29tcG9uZW50Lm5vZGUpOwogICAgfSwgX3Byb3RvLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKSB7CiAgICAgIHRoaXMuaWZyYW1lID8gdGhpcy5pZnJhbWUucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKSA6IHJlbW92ZUNsYXNzRnJvbUVsZW1lbnQoY2xhc3NOYW1lLCB0aGlzLmNvbXBvbmVudC5ub2RlKTsKICAgIH0sIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgdGhpcy5ub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlKTsKICAgIH0sIF9wcm90by5yZW5kZXJDaGlsZCA9IGZ1bmN0aW9uIHJlbmRlckNoaWxkKGNsYXNzTmFtZSwgdGVtcGxhdGUpIHsKICAgICAgdmFyIHNlbGVjdG9yID0gIi4iLmNvbmNhdChjbGFzc05hbWUuc3BsaXQoIiAiKS5qb2luKCIuIikpLAogICAgICAgICAgbm9kZSA9IHRoaXMud3JhcHBlci5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSwKICAgICAgICAgIGh0bWwgPSB0ZW1wbGF0ZS5yZW5kZXIoewogICAgICAgIGRhdGE6IHRoaXMuY29tcG9uZW50LnZpZXdEYXRhCiAgICAgIH0pOwogICAgICB0aGlzLnVwZGF0ZU5vZGUobm9kZSwgaHRtbCk7CiAgICB9LCBfcHJvdG8udXBkYXRlTm9kZSA9IGZ1bmN0aW9uIHVwZGF0ZU5vZGUobm9kZSwgaHRtbCkgewogICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sLCBtb3JwaGRvbShub2RlLCBkaXYuZmlyc3RFbGVtZW50Q2hpbGQpOwogICAgfSwgX3Byb3RvLndyYXBUZW1wbGF0ZSA9IGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZShodG1sKSB7CiAgICAgIHJldHVybiAnPGRpdiBjbGFzcz0iJy5jb25jYXQodGhpcy5jb21wb25lbnQuY2xhc3Nlc1t0aGlzLmNvbXBvbmVudC50eXBlS2V5XVt0aGlzLmNvbXBvbmVudC50eXBlS2V5XSwgJyI+JykuY29uY2F0KGh0bWwsICI8L2Rpdj4iKTsKICAgIH0sIF9wcm90by5yZXNpemUgPSBmdW5jdGlvbiByZXNpemUoKSB7CiAgICAgIHRoaXMuaWZyYW1lICYmIHRoaXMud3JhcHBlciAmJiAodGhpcy5zaG91bGRSZXNpemVYICYmIHRoaXMuX3Jlc2l6ZVgoKSwgdGhpcy5zaG91bGRSZXNpemVZICYmIHRoaXMuX3Jlc2l6ZVkoKSk7CiAgICB9LCBfcHJvdG8uc2V0Rm9jdXMgPSBmdW5jdGlvbiBzZXRGb2N1cygpIHsKICAgICAgdmFyIGZvY3VzYWJsZSA9IHRoaXMud3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCJhLCBidXR0b24sIGlucHV0LCBzZWxlY3QiKVswXTsKICAgICAgZm9jdXNhYmxlICYmIGZvY3VzYWJsZS5mb2N1cygpOwogICAgfSwgX3Byb3RvLmNsb3NlQ29tcG9uZW50c09uRXNjID0gZnVuY3Rpb24gY2xvc2VDb21wb25lbnRzT25Fc2MoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdGhpcy5pZnJhbWUgJiYgdGhpcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgZnVuY3Rpb24gKGV2dCkgewogICAgICAgIDI3ID09PSBldnQua2V5Q29kZSAmJiAoX3RoaXMzLmNvbXBvbmVudC5wcm9wcy5jbG9zZU1vZGFsKCksIF90aGlzMy5jb21wb25lbnQucHJvcHMuY2xvc2VDYXJ0KCkpOwogICAgICB9KTsKICAgIH0sIF9wcm90by5hbmltYXRlUmVtb3ZlTm9kZSA9IGZ1bmN0aW9uIGFuaW1hdGVSZW1vdmVOb2RlKGlkKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzLAogICAgICAgICAgZWwgPSB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsKCiAgICAgIGFkZENsYXNzVG9FbGVtZW50KCJpcy1oaWRkZW4iLCBlbCksIHRoaXMuY29tcG9uZW50LnByb3BzLmJyb3dzZXJGZWF0dXJlcy5hbmltYXRpb24gPyBlbC5hZGRFdmVudExpc3RlbmVyKCJhbmltYXRpb25lbmQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgZWwucGFyZW50Tm9kZSAmJiBfdGhpczQucmVtb3ZlTm9kZShlbCk7CiAgICAgIH0pIDogdGhpcy5yZW1vdmVOb2RlKGVsKTsKICAgIH0sIF9wcm90by5yZW1vdmVOb2RlID0gZnVuY3Rpb24gcmVtb3ZlTm9kZShlbCkgewogICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKSwgdGhpcy5yZW5kZXIoKTsKICAgIH0sIF9wcm90by5fY3JlYXRlV3JhcHBlciA9IGZ1bmN0aW9uIF9jcmVhdGVXcmFwcGVyKCkgewogICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICByZXR1cm4gd3JhcHBlci5jbGFzc05hbWUgPSB0aGlzLmNvbXBvbmVudC5jbGFzc2VzW3RoaXMuY29tcG9uZW50LnR5cGVLZXldW3RoaXMuY29tcG9uZW50LnR5cGVLZXldLCB0aGlzLmFwcGVuZCh3cmFwcGVyKSwgd3JhcHBlcjsKICAgIH0sIF9wcm90by5fcmVzaXplWCA9IGZ1bmN0aW9uIF9yZXNpemVYKCkgewogICAgICB0aGlzLmlmcmFtZS5lbC5zdHlsZS53aWR0aCA9ICIiLmNvbmNhdCh0aGlzLmRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGgsICJweCIpOwogICAgfSwgX3Byb3RvLl9yZXNpemVZID0gZnVuY3Rpb24gX3Jlc2l6ZVkodmFsdWUpIHsKICAgICAgdmFyIG5ld0hlaWdodCA9IHZhbHVlIHx8IHRoaXMub3V0ZXJIZWlnaHQ7CiAgICAgIHRoaXMuaWZyYW1lLmVsLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodDsKICAgIH0sIF9wcm90by5fb24gPSBmdW5jdGlvbiBfb24oZXZlbnROYW1lLCBzZWxlY3RvciwgZm4pIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB0aGlzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICB2YXIgcG9zc2libGVUYXJnZXRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoX3RoaXM1LndyYXBwZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLAogICAgICAgICAgICB0YXJnZXQgPSBldnQudGFyZ2V0OwogICAgICAgIHBvc3NpYmxlVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uIChwb3NzaWJsZVRhcmdldCkgewogICAgICAgICAgZm9yICh2YXIgZWwgPSB0YXJnZXQ7IGVsICYmIGVsICE9PSBfdGhpczUud3JhcHBlcjspIHsKICAgICAgICAgICAgaWYgKGVsID09PSBwb3NzaWJsZVRhcmdldCkgcmV0dXJuIGZuLmNhbGwocG9zc2libGVUYXJnZXQsIGV2dCwgcG9zc2libGVUYXJnZXQpOwogICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGVsOwogICAgICAgIH0pOwogICAgICB9LCAiYmx1ciIgPT09IGV2ZW50TmFtZSk7CiAgICB9LCBfY3JlYXRlQ2xhc3MoVmlldywgW3sKICAgICAga2V5OiAib3V0ZXJIZWlnaHQiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLndyYXBwZXIsICIiKTsKICAgICAgICBpZiAoIXN0eWxlKSByZXR1cm4gIiIuY29uY2F0KHRoaXMud3JhcHBlci5jbGllbnRIZWlnaHQsICJweCIpOwogICAgICAgIHZhciBoZWlnaHQgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCJoZWlnaHQiKTsKCiAgICAgICAgaWYgKCFoZWlnaHQgfHwgIjBweCIgPT09IGhlaWdodCB8fCAiYXV0byIgPT09IGhlaWdodCkgewogICAgICAgICAgdmFyIGNsaWVudEhlaWdodCA9IHRoaXMud3JhcHBlci5jbGllbnRIZWlnaHQ7CiAgICAgICAgICBoZWlnaHQgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCJoZWlnaHQiKSB8fCAiIi5jb25jYXQoY2xpZW50SGVpZ2h0LCAicHgiKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBoZWlnaHQ7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY2xhc3NOYW1lIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuICIiOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInNob3VsZFJlc2l6ZVgiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gITE7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2hvdWxkUmVzaXplWSIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiAhMTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJkb2N1bWVudCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLmlmcmFtZSA/IHRoaXMuaWZyYW1lLmRvY3VtZW50IDogd2luZG93LmRvY3VtZW50OwogICAgICB9CiAgICB9XSksIFZpZXc7CiAgfSgpLAogICAgICBVcGRhdGVyID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gVXBkYXRlcihjb21wb25lbnQpIHsKICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7CiAgICB9CgogICAgdmFyIF9wcm90bzsKCiAgICByZXR1cm4gVXBkYXRlci5wcm90b3R5cGUudXBkYXRlQ29uZmlnID0gZnVuY3Rpb24gdXBkYXRlQ29uZmlnKGNvbmZpZykgewogICAgICB0aGlzLmNvbXBvbmVudC5jb25maWcgPSBtZXJnZSh0aGlzLmNvbXBvbmVudC5jb25maWcsIGNvbmZpZy5vcHRpb25zKSwgdGhpcy5jb21wb25lbnQudmlldy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSh0aGlzLmNvbXBvbmVudC5vcHRpb25zLnRlbXBsYXRlcywgdGhpcy5jb21wb25lbnQub3B0aW9ucy5jb250ZW50cywgdGhpcy5jb21wb25lbnQub3B0aW9ucy5vcmRlciksIHRoaXMuY29tcG9uZW50LnZpZXcuaWZyYW1lICYmIHRoaXMuY29tcG9uZW50LnZpZXcuaWZyYW1lLnVwZGF0ZVN0eWxlcyh0aGlzLmNvbXBvbmVudC5zdHlsZXMsIHRoaXMuY29tcG9uZW50Lmdvb2dsZUZvbnRzKSwgdGhpcy5jb21wb25lbnQudmlldy5yZW5kZXIoKSwgdGhpcy5jb21wb25lbnQudmlldy5yZXNpemUoKTsKICAgIH0sIFVwZGF0ZXI7CiAgfSgpOwoKICBmdW5jdGlvbiBtb25leUZvcm1hdCgpIHsKICAgIHZhciBmb3JtYXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1swXSA/IGFyZ3VtZW50c1swXSA6ICIke3thbW91bnR9fSI7CiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGZvcm1hdCk7CiAgfQoKICB2YXIgQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gQ29tcG9uZW50KGNvbmZpZywgcHJvcHMpIHsKICAgICAgdGhpcy5pZCA9IGNvbmZpZy5pZCwgdGhpcy5zdG9yZWZyb250SWQgPSBjb25maWcuc3RvcmVmcm9udElkLCB0aGlzLmhhbmRsZSA9IGNvbmZpZy5oYW5kbGUsIHRoaXMubm9kZSA9IGNvbmZpZy5ub2RlLCB0aGlzLmdsb2JhbENvbmZpZyA9IHsKICAgICAgICBkZWJ1ZzogY29uZmlnLmRlYnVnLAogICAgICAgIG1vbmV5Rm9ybWF0OiBtb25leUZvcm1hdChjb25maWcubW9uZXlGb3JtYXQpLAogICAgICAgIGNhcnROb2RlOiBjb25maWcuY2FydE5vZGUsCiAgICAgICAgbW9kYWxOb2RlOiBjb25maWcubW9kYWxOb2RlLAogICAgICAgIHRvZ2dsZXM6IGNvbmZpZy50b2dnbGVzCiAgICAgIH0sIHRoaXMuY29uZmlnID0gbWVyZ2Uoe30sIGRlZmF1bHRzLCBjb25maWcub3B0aW9ucyB8fCB7fSksIHRoaXMucHJvcHMgPSBwcm9wcywgdGhpcy5tb2RlbCA9IHt9LCB0aGlzLnVwZGF0ZXIgPSBuZXcgVXBkYXRlcih0aGlzKSwgdGhpcy52aWV3ID0gbmV3IFZpZXcodGhpcyk7CiAgICB9CgogICAgdmFyIF9wcm90byA9IENvbXBvbmVudC5wcm90b3R5cGU7CiAgICByZXR1cm4gX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiB0aGlzLl91c2VyRXZlbnQoImJlZm9yZUluaXQiKSwgdGhpcy52aWV3LmluaXQoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXMuc2V0dXBNb2RlbChkYXRhKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAobW9kZWwpIHsKICAgICAgICByZXR1cm4gX3RoaXMubW9kZWwgPSBtb2RlbCwgX3RoaXMudmlldy5yZW5kZXIoKSwgX3RoaXMudmlldy5kZWxlZ2F0ZUV2ZW50cygpLCBfdGhpcy5fdXNlckV2ZW50KCJhZnRlckluaXQiKSwgX3RoaXM7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICB0aHJvdyBlcnIubWVzc2FnZS5pbmRleE9mKCJOb3QgRm91bmQiKSA+IC0xICYmIGxvZ05vdEZvdW5kKF90aGlzKSwgZXJyOwogICAgICB9KTsKICAgIH0sIF9wcm90by5zZXR1cE1vZGVsID0gZnVuY3Rpb24gc2V0dXBNb2RlbChkYXRhKSB7CiAgICAgIHJldHVybiBkYXRhID8gUHJvbWlzZS5yZXNvbHZlKGRhdGEpIDogdGhpcy5mZXRjaERhdGEoKTsKICAgIH0sIF9wcm90by51cGRhdGVDb25maWcgPSBmdW5jdGlvbiB1cGRhdGVDb25maWcoY29uZmlnKSB7CiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZXIudXBkYXRlQ29uZmlnKGNvbmZpZyk7CiAgICB9LCBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIHRoaXMudmlldy5kZXN0cm95KCk7CiAgICB9LCBfcHJvdG8uX3VzZXJFdmVudCA9IGZ1bmN0aW9uIF91c2VyRXZlbnQobWV0aG9kTmFtZSkgewogICAgICB0aGlzLmdsb2JhbENvbmZpZy5kZWJ1ZyAmJiBsb2dnZXIuaW5mbygiRVZFTlQ6ICIuY29uY2F0KG1ldGhvZE5hbWUsICIgKCIpLmNvbmNhdCh0aGlzLnR5cGVLZXksICIpIikpLCBpc0Z1bmN0aW9uKHRoaXMuZXZlbnRzW21ldGhvZE5hbWVdKSAmJiB0aGlzLmV2ZW50c1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIHRoaXMpOwogICAgfSwgX2NyZWF0ZUNsYXNzKENvbXBvbmVudCwgW3sKICAgICAga2V5OiAibmFtZSIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciB1bmlxdWVIYW5kbGUgPSAiIjsKICAgICAgICByZXR1cm4gdGhpcy5pZCA/IHVuaXF1ZUhhbmRsZSA9ICItIi5jb25jYXQodGhpcy5pZCkgOiB0aGlzLmhhbmRsZSAmJiAodW5pcXVlSGFuZGxlID0gIi0iLmNvbmNhdCh0aGlzLmhhbmRsZSkpLCAiZnJhbWUtIi5jb25jYXQodGhpcy50eXBlS2V5KS5jb25jYXQodW5pcXVlSGFuZGxlKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJvcHRpb25zIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIG1lcmdlKHt9LCB0aGlzLmNvbmZpZ1t0aGlzLnR5cGVLZXldKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJET01FdmVudHMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLkRPTUV2ZW50cyB8fCB7fTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJldmVudHMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmV2ZW50cyB8fCB7fTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJjbGFzc2VzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubWFuaWZlc3QuZmlsdGVyKGZ1bmN0aW9uIChjb21wb25lbnQpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIuY29uZmlnW2NvbXBvbmVudF0uY2xhc3NlczsKICAgICAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGhhc2gsIGNvbXBvbmVudCkgewogICAgICAgICAgcmV0dXJuIGhhc2hbY29tcG9uZW50XSA9IF90aGlzMi5jb25maWdbY29tcG9uZW50XS5jbGFzc2VzLCBoYXNoOwogICAgICAgIH0sIHt9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZWxlY3RvcnMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5tYW5pZmVzdC5maWx0ZXIoZnVuY3Rpb24gKGNvbXBvbmVudCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMy5jb25maWdbY29tcG9uZW50XS5jbGFzc2VzOwogICAgICAgIH0pLnJlZHVjZShmdW5jdGlvbiAoaGFzaCwgY29tcG9uZW50KSB7CiAgICAgICAgICByZXR1cm4gaGFzaFtjb21wb25lbnRdID0gT2JqZWN0LmtleXMoX3RoaXMzLmNvbmZpZ1tjb21wb25lbnRdLmNsYXNzZXMpLnJlZHVjZShmdW5jdGlvbiAoY2xhc3NlcywgY2xhc3NLZXkpIHsKICAgICAgICAgICAgcmV0dXJuIGNsYXNzZXNbY2xhc3NLZXldID0gIi4iLmNvbmNhdChfdGhpczMuY2xhc3Nlc1tjb21wb25lbnRdW2NsYXNzS2V5XS5zcGxpdCgiICIpLmpvaW4oIi4iKSksIGNsYXNzZXM7CiAgICAgICAgICB9LCB7fSksIGhhc2g7CiAgICAgICAgfSwge30pOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInN0eWxlcyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm1hbmlmZXN0LmZpbHRlcihmdW5jdGlvbiAoY29tcG9uZW50KSB7CiAgICAgICAgICByZXR1cm4gX3RoaXM0LmNvbmZpZ1tjb21wb25lbnRdLnN0eWxlczsKICAgICAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGhhc2gsIGNvbXBvbmVudCkgewogICAgICAgICAgcmV0dXJuIGhhc2hbY29tcG9uZW50XSA9IF90aGlzNC5jb25maWdbY29tcG9uZW50XS5zdHlsZXMsIGhhc2g7CiAgICAgICAgfSwge30pOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImdvb2dsZUZvbnRzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubWFuaWZlc3QuZmlsdGVyKGZ1bmN0aW9uIChjb21wb25lbnQpIHsKICAgICAgICAgIHJldHVybiBfdGhpczUuY29uZmlnW2NvbXBvbmVudF0uZ29vZ2xlRm9udHM7CiAgICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uIChmb250cywgY29tcG9uZW50KSB7CiAgICAgICAgICByZXR1cm4gZm9udHMuY29uY2F0KF90aGlzNS5jb25maWdbY29tcG9uZW50XS5nb29nbGVGb250cyk7CiAgICAgICAgfSwgW10pOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInZpZXdEYXRhIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIG1lcmdlKHRoaXMubW9kZWwsIHRoaXMub3B0aW9ucy52aWV3RGF0YSwgewogICAgICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLAogICAgICAgICAgdGV4dDogdGhpcy5vcHRpb25zLnRleHQKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJtb3JwaENhbGxiYWNrcyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBvbkJlZm9yZUVsVXBkYXRlZDogZnVuY3Rpb24gb25CZWZvcmVFbFVwZGF0ZWQoZnJvbUVsLCB0b0VsKSB7CiAgICAgICAgICAgIHJldHVybiAiSU1HIiAhPT0gZnJvbUVsLnRhZ05hbWUgfHwgZnJvbUVsLnNyYyAhPT0gdG9FbC5nZXRBdHRyaWJ1dGUoImRhdGEtc3JjIik7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQogICAgfV0pLCBDb21wb25lbnQ7CiAgfSgpLAogICAgICBDaGVja291dE5hdmlnYXRvciA9IGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIENoZWNrb3V0TmF2aWdhdG9yKGNvbmZpZykgewogICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZzsKICAgIH0KCiAgICB2YXIgX3Byb3RvOwoKICAgIHJldHVybiBDaGVja291dE5hdmlnYXRvci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIG9wZW4odXJsKSB7CiAgICAgIHRoaXMuY29uZmlnLmNhcnQucG9wdXAgPyB3aW5kb3cub3Blbih1cmwsICJjaGVja291dCIsIHRoaXMucGFyYW1zKSA6IHdpbmRvdy5vcGVuKHVybCwgImNoZWNrb3V0Iik7CiAgICB9LCBfY3JlYXRlQ2xhc3MoQ2hlY2tvdXROYXZpZ2F0b3IsIFt7CiAgICAgIGtleTogInBhcmFtcyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciBjb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZy53aW5kb3csIHsKICAgICAgICAgIGxlZnQ6IHdpbmRvdy5vdXRlcldpZHRoIC8gMiAtIDIwMCwKICAgICAgICAgIHRvcDogd2luZG93Lm91dGVySGVpZ2h0IC8gMiAtIDMwMAogICAgICAgIH0pOwogICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhjb25maWcpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHsKICAgICAgICAgIHJldHVybiAiIi5jb25jYXQoYWNjKS5jb25jYXQoa2V5LCAiPSIpLmNvbmNhdChjb25maWdba2V5XSwgIiwiKTsKICAgICAgICB9LCAiIik7CiAgICAgIH0KICAgIH1dKSwgQ2hlY2tvdXROYXZpZ2F0b3I7CiAgfSgpLAogICAgICB3aW5kb3dVdGlsc19sb2NhdGlvbiA9IGZ1bmN0aW9uIGxvY2F0aW9uKCkgewogICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogIH0sCiAgICAgIHBsYWNlaG9sZGVyUmVnZXggPSAvXHtce1xzKihcdyspXHMqXH1cfS8sCiAgICAgIHRob3VzYW5kc1JlZ2V4ID0gLyhcZCkoPz0oXGRcZFxkKSsoPyFcZCkpL2c7CgogIGZ1bmN0aW9uIGZvcm1hdFdpdGhEZWxpbWl0ZXJzKG51bWJlcikgewogICAgdmFyIHByZWNpc2lvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzFdID8gYXJndW1lbnRzWzFdIDogMiwKICAgICAgICB0aG91c2FuZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1syXSA/IGFyZ3VtZW50c1syXSA6ICIsIiwKICAgICAgICBkZWNpbWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbM10gPyBhcmd1bWVudHNbM10gOiAiLiI7CiAgICBpZiAoaXNOYU4obnVtYmVyKSB8fCBudWxsID09IG51bWJlcikgcmV0dXJuIDA7CiAgICB2YXIgZml4ZWROdW1iZXIgPSAobnVtYmVyIC8gMTAwKS50b0ZpeGVkKHByZWNpc2lvbiksCiAgICAgICAgcGFydHMgPSBmaXhlZE51bWJlci5zcGxpdCgiLiIpLAogICAgICAgIGRvbGxhcnMgPSBwYXJ0c1swXS5yZXBsYWNlKHRob3VzYW5kc1JlZ2V4LCAiJDEiLmNvbmNhdCh0aG91c2FuZHMpKSwKICAgICAgICBjZW50cyA9IHBhcnRzWzFdID8gZGVjaW1hbCArIHBhcnRzWzFdIDogIiI7CiAgICByZXR1cm4gZG9sbGFycyArIGNlbnRzOwogIH0KCiAgZnVuY3Rpb24gZm9ybWF0TW9uZXkoYW1vdW50LCBmb3JtYXQpIHsKICAgIHZhciBjZW50cyA9IDEwMCAqIGFtb3VudDsKICAgICJzdHJpbmciID09IHR5cGVvZiBjZW50cyAmJiAoY2VudHMgPSBjZW50cy5yZXBsYWNlKCIuIiwgIiIpKTsKICAgIHZhciB2YWx1ZSA9ICIiLAogICAgICAgIGZvcm1hdFN0cmluZyA9IGZvcm1hdCB8fCAiJHt7YW1vdW50fX0iLAogICAgICAgIHBsYWNlaG9sZGVyTWF0Y2ggPSBmb3JtYXRTdHJpbmcubWF0Y2gocGxhY2Vob2xkZXJSZWdleCk7CgogICAgc3dpdGNoIChwbGFjZWhvbGRlck1hdGNoIHx8IChwbGFjZWhvbGRlck1hdGNoID0gKGZvcm1hdFN0cmluZyA9ICIke3thbW91bnR9fSIpLm1hdGNoKHBsYWNlaG9sZGVyUmVnZXgpKSwgcGxhY2Vob2xkZXJNYXRjaFsxXSkgewogICAgICBjYXNlICJhbW91bnQiOgogICAgICAgIHZhbHVlID0gZm9ybWF0V2l0aERlbGltaXRlcnMoY2VudHMpOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSAiYW1vdW50X25vX2RlY2ltYWxzIjoKICAgICAgICB2YWx1ZSA9IGZvcm1hdFdpdGhEZWxpbWl0ZXJzKGNlbnRzLCAwKTsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgImFtb3VudF93aXRoX2NvbW1hX3NlcGFyYXRvciI6CiAgICAgICAgdmFsdWUgPSBmb3JtYXRXaXRoRGVsaW1pdGVycyhjZW50cywgMiwgIi4iLCAiLCIpOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSAiYW1vdW50X25vX2RlY2ltYWxzX3dpdGhfY29tbWFfc2VwYXJhdG9yIjoKICAgICAgICB2YWx1ZSA9IGZvcm1hdFdpdGhEZWxpbWl0ZXJzKGNlbnRzLCAwLCAiLiIsICIsIik7CiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlICJhbW91bnRfbm9fZGVjaW1hbHNfd2l0aF9zcGFjZV9zZXBhcmF0b3IiOgogICAgICAgIHZhbHVlID0gZm9ybWF0V2l0aERlbGltaXRlcnMoY2VudHMsIDAsICIgIik7CiAgICAgICAgYnJlYWs7CgogICAgICBkZWZhdWx0OgogICAgICAgIHZhbHVlID0gZm9ybWF0V2l0aERlbGltaXRlcnMoY2VudHMpOwogICAgfQoKICAgIHJldHVybiBmb3JtYXRTdHJpbmcucmVwbGFjZShwbGFjZWhvbGRlclJlZ2V4LCB2YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBub3JtYWxpemVJZCh0eXBlLCBkYXRhYmFzZUtleSkgewogICAgcmV0dXJuIGJ0b2EoImdpZDovL3Nob3BpZnkvIi5jb25jYXQodHlwZSwgIi8iKS5jb25jYXQoZGF0YWJhc2VLZXkpKTsKICB9CgogIGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWRJZEZyb21Db25maWcodHlwZSwgY29uZmlnLCBkYXRhYmFzZUtleSwgc3RvcmVmcm9udEtleSkgewogICAgdmFyIGRlbm9ybWFsaXplZFZhbHVlID0gY29uZmlnW2RhdGFiYXNlS2V5XSwKICAgICAgICBub3JtYWxpemVkVmFsdWUgPSBjb25maWdbc3RvcmVmcm9udEtleV07CiAgICByZXR1cm4gbm9ybWFsaXplZFZhbHVlIHx8IChkZW5vcm1hbGl6ZWRWYWx1ZSA/IEFycmF5LmlzQXJyYXkoZGVub3JtYWxpemVkVmFsdWUpID8gZGVub3JtYWxpemVkVmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICByZXR1cm4gbm9ybWFsaXplSWQodHlwZSwgdmFsdWUpOwogICAgfSkgOiBub3JtYWxpemVJZCh0eXBlLCBkZW5vcm1hbGl6ZWRWYWx1ZSkgOiBudWxsKTsKICB9CgogIGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbmZpZyhjb25maWcpIHsKICAgIHZhciBiYXNlUmVzb3VyY2VUeXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiAiUHJvZHVjdCI7CiAgICByZXR1cm4gKGNvbmZpZy5pZCB8fCBjb25maWcuc3RvcmVmcm9udElkKSAmJiAoY29uZmlnLnN0b3JlZnJvbnRJZCA9IGdldE5vcm1hbGl6ZWRJZEZyb21Db25maWcoYmFzZVJlc291cmNlVHlwZSwgY29uZmlnLCAiaWQiLCAic3RvcmVmcm9udElkIikpLCAoY29uZmlnLnZhcmlhbnRJZCB8fCBjb25maWcuc3RvcmVmcm9udFZhcmlhbnRJZCkgJiYgKGNvbmZpZy5zdG9yZWZyb250VmFyaWFudElkID0gZ2V0Tm9ybWFsaXplZElkRnJvbUNvbmZpZygiUHJvZHVjdFZhcmlhbnQiLCBjb25maWcsICJ2YXJpYW50SWQiLCAic3RvcmVmcm9udFZhcmlhbnRJZCIpKSwgY29uZmlnOwogIH0KCiAgZnVuY3Rpb24gZGV0ZWN0Q1NTRmVhdHVyZShmZWF0dXJlbmFtZSkgewogICAgdmFyIGZlYXR1cmUgPSAhMSwKICAgICAgICBkb21QcmVmaXhlcyA9ICJXZWJraXQgTW96IG1zIE8iLnNwbGl0KCIgIiksCiAgICAgICAgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksCiAgICAgICAgZmVhdHVyZW5hbWVDYXBpdGFsID0gbnVsbDsKCiAgICBpZiAoZmVhdHVyZW5hbWUgPSBmZWF0dXJlbmFtZS50b0xvd2VyQ2FzZSgpLCB2b2lkIDAgIT09IGVsbS5zdHlsZVtmZWF0dXJlbmFtZV0gJiYgKGZlYXR1cmUgPSAhMCksICExID09PSBmZWF0dXJlKSB7CiAgICAgIGZlYXR1cmVuYW1lQ2FwaXRhbCA9IGZlYXR1cmVuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZmVhdHVyZW5hbWUuc3Vic3RyKDEpOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb21QcmVmaXhlcy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh2b2lkIDAgIT09IGVsbS5zdHlsZVtkb21QcmVmaXhlc1tpXSArIGZlYXR1cmVuYW1lQ2FwaXRhbF0pIHsKICAgICAgICAgIGZlYXR1cmUgPSAhMDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiBmZWF0dXJlOwogIH0KCiAgdmFyIHN1cHBvcnRzQW5pbWF0aW9ucywKICAgICAgc3VwcG9ydHNUcmFuc2l0aW9ucyA9IGZ1bmN0aW9uIHN1cHBvcnRzVHJhbnNpdGlvbnMoKSB7CiAgICByZXR1cm4gZGV0ZWN0Q1NTRmVhdHVyZSgidHJhbnNpdGlvbiIpOwogIH0sCiAgICAgIHN1cHBvcnRzVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIHN1cHBvcnRzVHJhbnNmb3JtcygpIHsKICAgIHJldHVybiBkZXRlY3RDU1NGZWF0dXJlKCJ0cmFuc2Zvcm0iKTsKICB9LAogICAgICBzdXBwb3J0c1dpbmRvd09wZW4gPSBmdW5jdGlvbiBzdXBwb3J0c1dpbmRvd09wZW4oKSB7CiAgICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYSwKICAgICAgICB1blN1cHBvcnRlZEFwcHM7CiAgICByZXR1cm4gLTEgPT09IHVzZXJBZ2VudC5pbmRleE9mKCJNYWMgT1MgWCIpIHx8ICFbIkluc3RhZ3JhbSIsICJQaW50ZXJlc3QvaU9TIiwgIkZCQU4vRkJJT1MiLCAiRkJBTi9NZXNzZW5nZXJGb3JpT1MiXS5zb21lKGZ1bmN0aW9uIChhcHBOYW1lKSB7CiAgICAgIHJldHVybiB1c2VyQWdlbnQuaW5kZXhPZihhcHBOYW1lKSA+IC0xOwogICAgfSk7CiAgfSwKICAgICAgYnJvd3NlckZlYXR1cmVzID0gewogICAgYW5pbWF0aW9uOiBmdW5jdGlvbiBzdXBwb3J0c0FuaW1hdGlvbnMoKSB7CiAgICAgIHJldHVybiBkZXRlY3RDU1NGZWF0dXJlKCJhbmltYXRpb24iKTsKICAgIH0oKSwKICAgIHRyYW5zaXRpb246IHN1cHBvcnRzVHJhbnNpdGlvbnMoKSwKICAgIHRyYW5zZm9ybTogc3VwcG9ydHNUcmFuc2Zvcm1zKCksCiAgICB3aW5kb3dPcGVuOiBzdXBwb3J0c1dpbmRvd09wZW4KICB9OwoKICBmdW5jdGlvbiBnZXRVbml0U3RyaW5nKHVuaXRFbnVtKSB7CiAgICByZXR1cm4gIkwiID09PSB1bml0RW51bSA/ICJMIiA6ICJNMyIgPT09IHVuaXRFbnVtID8gIm3DgsKzIiA6ICJNMiIgPT09IHVuaXRFbnVtID8gIm3DgsKyIiA6IHVuaXRFbnVtLnRvTG93ZXJDYXNlKCk7CiAgfQoKICBmdW5jdGlvbiBnZXRVbml0UHJpY2VCYXNlVW5pdChyZWZlcmVuY2VWYWx1ZSwgcmVmZXJlbmNlVW5pdCkgewogICAgdmFyIHVuaXRTdHJpbmcgPSBnZXRVbml0U3RyaW5nKHJlZmVyZW5jZVVuaXQpOwogICAgcmV0dXJuIDEgPT09IHJlZmVyZW5jZVZhbHVlID8gIiIuY29uY2F0KHVuaXRTdHJpbmcpIDogIiIuY29uY2F0KHJlZmVyZW5jZVZhbHVlKS5jb25jYXQodW5pdFN0cmluZyk7CiAgfQoKICB2YXIgUHJvZHVjdFZpZXcgPSBmdW5jdGlvbiAoX1ZpZXcpIHsKICAgIGZ1bmN0aW9uIFByb2R1Y3RWaWV3KCkgewogICAgICByZXR1cm4gX1ZpZXcuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzOwogICAgfQoKICAgIF9pbmhlcml0c0xvb3NlKFByb2R1Y3RWaWV3LCBfVmlldyk7CgogICAgdmFyIF9wcm90byA9IFByb2R1Y3RWaWV3LnByb3RvdHlwZTsKICAgIHJldHVybiBfcHJvdG8ucmVzaXplT25Mb2FkID0gZnVuY3Rpb24gcmVzaXplT25Mb2FkKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzLAogICAgICAgICAgcHJvZHVjdENvbnRlbnRzID0gdGhpcy5jb21wb25lbnQuY29uZmlnLnByb2R1Y3QuY29udGVudHM7CgogICAgICBpZiAocHJvZHVjdENvbnRlbnRzLmltZyB8fCBwcm9kdWN0Q29udGVudHMuaW1nV2l0aENhcm91c2VsKSB7CiAgICAgICAgdmFyIGltYWdlID0gdGhpcy53cmFwcGVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUodGhpcy5jb21wb25lbnQuY2xhc3Nlcy5wcm9kdWN0LmltZylbMF07CiAgICAgICAgaW1hZ2UgJiYgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzLnJlc2l6ZSgpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LCBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICBfVmlldy5wcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcyksIHRoaXMucmVzaXplT25Mb2FkKCk7CiAgICB9LCBfcHJvdG8ud3JhcFRlbXBsYXRlID0gZnVuY3Rpb24gd3JhcFRlbXBsYXRlKGh0bWwpIHsKICAgICAgdmFyIGFyaWFMYWJlbDsKCiAgICAgIHN3aXRjaCAodGhpcy5jb21wb25lbnQub3B0aW9ucy5idXR0b25EZXN0aW5hdGlvbikgewogICAgICAgIGNhc2UgIm1vZGFsIjoKICAgICAgICAgIGFyaWFMYWJlbCA9ICJWaWV3IGRldGFpbHMiOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgImNhcnQiOgogICAgICAgICAgYXJpYUxhYmVsID0gIkFkZCB0byBjYXJ0IjsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgYXJpYUxhYmVsID0gIkJ1eSBOb3ciOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuaXNCdXR0b24gPyAnPGRpdiBjbGFzcz0iJy5jb25jYXQodGhpcy53cmFwcGVyQ2xhc3MsICIgIikuY29uY2F0KHRoaXMuY29tcG9uZW50LmNsYXNzZXMucHJvZHVjdC5wcm9kdWN0LCAnIj48ZGl2IHRhYmluZGV4PSIwIiByb2xlPSJidXR0b24iIGFyaWEtbGFiZWw9IicpLmNvbmNhdChhcmlhTGFiZWwsICciIGNsYXNzPSInKS5jb25jYXQodGhpcy5jb21wb25lbnQuY2xhc3Nlcy5wcm9kdWN0LmJsb2NrQnV0dG9uLCAnIj4nKS5jb25jYXQoaHRtbCwgIjwvZGl2PjwvZGl2PiIpIDogJzxkaXYgY2xhc3M9IicuY29uY2F0KHRoaXMud3JhcHBlckNsYXNzLCAiICIpLmNvbmNhdCh0aGlzLmNvbXBvbmVudC5jbGFzc2VzLnByb2R1Y3QucHJvZHVjdCwgJyI+JykuY29uY2F0KGh0bWwsICI8L2Rpdj4iKTsKICAgIH0sIF9jcmVhdGVDbGFzcyhQcm9kdWN0VmlldywgW3sKICAgICAga2V5OiAiY2xhc3NOYW1lIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmNsYXNzZXMucHJvZHVjdFt0aGlzLmNvbXBvbmVudC5vcHRpb25zLmxheW91dF07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2hvdWxkUmVzaXplWCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiAhMTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzaG91bGRSZXNpemVZIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuICEwOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIm91dGVySGVpZ2h0IiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuICIiLmNvbmNhdCh0aGlzLndyYXBwZXIuY2xpZW50SGVpZ2h0LCAicHgiKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJ3cmFwcGVyQ2xhc3MiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gIiIuY29uY2F0KHRoaXMuY29tcG9uZW50LmN1cnJlbnRJbWFnZSA/ICJoYXMtaW1hZ2UiIDogIm5vLWltYWdlIiwgIiAiKS5jb25jYXQodGhpcy5jb21wb25lbnQuY2xhc3Nlcy5wcm9kdWN0W3RoaXMuY29tcG9uZW50Lm9wdGlvbnMubGF5b3V0XSk7CiAgICAgIH0KICAgIH1dKSwgUHJvZHVjdFZpZXc7CiAgfShWaWV3KSwKICAgICAgTUFYX1dJRFRIID0gIjk1MHB4IiwKICAgICAgUHJvZHVjdFVwZGF0ZXIgPSBmdW5jdGlvbiAoX1VwZGF0ZXIpIHsKICAgIGZ1bmN0aW9uIFByb2R1Y3RVcGRhdGVyKCkgewogICAgICByZXR1cm4gX1VwZGF0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzOwogICAgfQoKICAgIHZhciBfcHJvdG87CgogICAgcmV0dXJuIF9pbmhlcml0c0xvb3NlKFByb2R1Y3RVcGRhdGVyLCBfVXBkYXRlciksIFByb2R1Y3RVcGRhdGVyLnByb3RvdHlwZS51cGRhdGVDb25maWcgPSBmdW5jdGlvbiB1cGRhdGVDb25maWcoY29uZmlnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXMsCiAgICAgICAgICBuZXdDb25maWcgPSBub3JtYWxpemVDb25maWcoY29uZmlnKTsKCiAgICAgIGlmIChuZXdDb25maWcuc3RvcmVmcm9udElkIHx8IG5ld0NvbmZpZy5zdG9yZWZyb250VmFyaWFudElkKSByZXR1cm4gdGhpcy5jb21wb25lbnQuc3RvcmVmcm9udElkID0gbmV3Q29uZmlnLnN0b3JlZnJvbnRJZCB8fCB0aGlzLmNvbXBvbmVudC5zdG9yZWZyb250SWQsIHRoaXMuY29tcG9uZW50LmRlZmF1bHRTdG9yZWZyb250VmFyaWFudElkID0gbmV3Q29uZmlnLnN0b3JlZnJvbnRWYXJpYW50SWQgfHwgdGhpcy5jb21wb25lbnQuZGVmYXVsdFN0b3JlZnJvbnRWYXJpYW50SWQsIHZvaWQgdGhpcy5jb21wb25lbnQuaW5pdCgpOwogICAgICB2YXIgbGF5b3V0ID0gdGhpcy5jb21wb25lbnQub3B0aW9ucy5sYXlvdXQ7CiAgICAgIGNvbmZpZy5vcHRpb25zICYmIGNvbmZpZy5vcHRpb25zLnByb2R1Y3QgJiYgKGNvbmZpZy5vcHRpb25zLnByb2R1Y3QubGF5b3V0ICYmIChsYXlvdXQgPSBjb25maWcub3B0aW9ucy5wcm9kdWN0LmxheW91dCksIHRoaXMuY29tcG9uZW50LnZpZXcuaWZyYW1lICYmICgidmVydGljYWwiID09PSBsYXlvdXQgJiYgIjk1MHB4IiA9PT0gdGhpcy5jb21wb25lbnQudmlldy5pZnJhbWUud2lkdGggJiYgdGhpcy5jb21wb25lbnQudmlldy5pZnJhbWUuc2V0V2lkdGgodGhpcy5jb21wb25lbnQub3B0aW9ucy53aWR0aCksICJob3Jpem9udGFsIiA9PT0gbGF5b3V0ICYmIHRoaXMuY29tcG9uZW50LnZpZXcuaWZyYW1lLndpZHRoICYmICI5NTBweCIgIT09IHRoaXMuY29tcG9uZW50LnZpZXcuaWZyYW1lLndpZHRoICYmIHRoaXMuY29tcG9uZW50LnZpZXcuaWZyYW1lLnNldFdpZHRoKCI5NTBweCIpLCBjb25maWcub3B0aW9ucy5wcm9kdWN0LndpZHRoICYmICJ2ZXJ0aWNhbCIgPT09IGxheW91dCAmJiB0aGlzLmNvbXBvbmVudC52aWV3LmlmcmFtZS5zZXRXaWR0aChjb25maWcub3B0aW9ucy5wcm9kdWN0LndpZHRoKSwgY29uZmlnLm9wdGlvbnMucHJvZHVjdC5sYXlvdXQgJiYgKHRoaXMuY29tcG9uZW50LnZpZXcuaWZyYW1lLmVsLnN0eWxlLndpZHRoID0gIjEwMCUiKSkpLCB0aGlzLmNvbXBvbmVudC52aWV3LmlmcmFtZSAmJiAodGhpcy5jb21wb25lbnQudmlldy5pZnJhbWUucmVtb3ZlQ2xhc3ModGhpcy5jb21wb25lbnQuY2xhc3Nlcy5wcm9kdWN0LnZlcnRpY2FsKSwgdGhpcy5jb21wb25lbnQudmlldy5pZnJhbWUucmVtb3ZlQ2xhc3ModGhpcy5jb21wb25lbnQuY2xhc3Nlcy5wcm9kdWN0Lmhvcml6b250YWwpLCB0aGlzLmNvbXBvbmVudC52aWV3LmlmcmFtZS5hZGRDbGFzcyh0aGlzLmNvbXBvbmVudC5jbGFzc2VzLnByb2R1Y3RbbGF5b3V0XSksIHRoaXMuY29tcG9uZW50LnZpZXcucmVzaXplKCkpLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jb21wb25lbnQudmlldy53cmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoImltZyIpKS5mb3JFYWNoKGZ1bmN0aW9uIChpbWcpIHsKICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzLmNvbXBvbmVudC52aWV3LnJlc2l6ZSgpOwogICAgICAgIH0pOwogICAgICB9KSwgX1VwZGF0ZXIucHJvdG90eXBlLnVwZGF0ZUNvbmZpZy5jYWxsKHRoaXMsIGNvbmZpZyksIHRoaXMuY29tcG9uZW50LmNhcnQgJiYgdGhpcy5jb21wb25lbnQuY2FydC51cGRhdGVDb25maWcoY29uZmlnKSwgdGhpcy5jb21wb25lbnQubW9kYWwgJiYgdGhpcy5jb21wb25lbnQubW9kYWwudXBkYXRlQ29uZmlnKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZywgewogICAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29tcG9uZW50LmNvbmZpZywgewogICAgICAgICAgcHJvZHVjdDogdGhpcy5jb21wb25lbnQubW9kYWxQcm9kdWN0Q29uZmlnCiAgICAgICAgfSkKICAgICAgfSkpOwogICAgfSwgUHJvZHVjdFVwZGF0ZXI7CiAgfShVcGRhdGVyKTsKCiAgZnVuY3Rpb24gaXNGdW5jdGlvbiQxKG9iaikgewogICAgcmV0dXJuIEJvb2xlYW4ob2JqICYmIG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY2FsbCAmJiBvYmouYXBwbHkpOwogIH0KCiAgZnVuY3Rpb24gaXNQc2V1ZG9TZWxlY3RvciQxKGtleSkgewogICAgcmV0dXJuICI6IiA9PT0ga2V5LmNoYXJBdCgwKTsKICB9CgogIGZ1bmN0aW9uIGlzTWVkaWEkMShrZXkpIHsKICAgIHJldHVybiAiQCIgPT09IGtleS5jaGFyQXQoMCk7CiAgfQoKICB2YXIgRU5URVJfS0VZID0gMTMsCiAgICAgIHByb3BlcnRpZXNXaGl0ZWxpc3QgPSBbImJhY2tncm91bmQiLCAiYmFja2dyb3VuZC1jb2xvciIsICJib3JkZXIiLCAiYm9yZGVyLXJhZGl1cyIsICJjb2xvciIsICJib3JkZXItY29sb3IiLCAiYm9yZGVyLXdpZHRoIiwgImJvcmRlci1zdHlsZSIsICJ0cmFuc2l0aW9uIiwgInRleHQtdHJhbnNmb3JtIiwgInRleHQtc2hhZG93IiwgImJveC1zaGFkb3ciLCAiZm9udC1zaXplIiwgImZvbnQtZmFtaWx5Il07CgogIGZ1bmN0aW9uIHdoaXRlbGlzdGVkUHJvcGVydGllcyhzZWxlY3RvclN0eWxlcykgewogICAgcmV0dXJuIE9iamVjdC5rZXlzKHNlbGVjdG9yU3R5bGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGZpbHRlcmVkU3R5bGVzLCBwcm9wZXJ0eU5hbWUpIHsKICAgICAgcmV0dXJuIGlzUHNldWRvU2VsZWN0b3IkMShwcm9wZXJ0eU5hbWUpIHx8IGlzTWVkaWEkMShwcm9wZXJ0eU5hbWUpID8gKGZpbHRlcmVkU3R5bGVzW3Byb3BlcnR5TmFtZV0gPSB3aGl0ZWxpc3RlZFByb3BlcnRpZXMoc2VsZWN0b3JTdHlsZXNbcHJvcGVydHlOYW1lXSksIGZpbHRlcmVkU3R5bGVzKSA6IChwcm9wZXJ0aWVzV2hpdGVsaXN0LmluZGV4T2YocHJvcGVydHlOYW1lKSA+IC0xICYmIChmaWx0ZXJlZFN0eWxlc1twcm9wZXJ0eU5hbWVdID0gc2VsZWN0b3JTdHlsZXNbcHJvcGVydHlOYW1lXSksIGZpbHRlcmVkU3R5bGVzKTsKICAgIH0sIHt9KTsKICB9CgogIHZhciBQcm9kdWN0JDEgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogICAgZnVuY3Rpb24gUHJvZHVjdChjb25maWcsIHByb3BzKSB7CiAgICAgIHZhciBfdGhpczsKCiAgICAgIHJldHVybiBjb25maWcgPSBub3JtYWxpemVDb25maWcoY29uZmlnKSwgKF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIGNvbmZpZywgcHJvcHMpIHx8IHRoaXMpLnR5cGVLZXkgPSAicHJvZHVjdCIsIF90aGlzLmRlZmF1bHRTdG9yZWZyb250VmFyaWFudElkID0gY29uZmlnLnN0b3JlZnJvbnRWYXJpYW50SWQsIF90aGlzLmNhY2hlZEltYWdlID0gbnVsbCwgX3RoaXMuY2hpbGRUZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShfdGhpcy5jb25maWcub3B0aW9uLnRlbXBsYXRlcywgX3RoaXMuY29uZmlnLm9wdGlvbi5jb250ZW50cywgX3RoaXMuY29uZmlnLm9wdGlvbi5vcmRlciksIF90aGlzLmNhcnQgPSBudWxsLCBfdGhpcy5tb2RhbCA9IG51bGwsIF90aGlzLmltZ1N0eWxlID0gIiIsIF90aGlzLnNlbGVjdGVkUXVhbnRpdHkgPSAxLCBfdGhpcy5zZWxlY3RlZFZhcmlhbnQgPSB7fSwgX3RoaXMuc2VsZWN0ZWRPcHRpb25zID0ge30sIF90aGlzLnNlbGVjdGVkSW1hZ2UgPSBudWxsLCBfdGhpcy51cGRhdGVyID0gbmV3IFByb2R1Y3RVcGRhdGVyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgX3RoaXMudmlldyA9IG5ldyBQcm9kdWN0VmlldyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIF90aGlzOwogICAgfQoKICAgIF9pbmhlcml0c0xvb3NlKFByb2R1Y3QsIF9Db21wb25lbnQpOwoKICAgIHZhciBfcHJvdG8gPSBQcm9kdWN0LnByb3RvdHlwZTsKICAgIHJldHVybiBfcHJvdG8uc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKGV2dCkgewogICAgICB0aGlzLmlzQnV0dG9uICYmIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKICAgIH0sIF9wcm90by5vcHRpb25WYWx1ZUNhbkJlU2VsZWN0ZWQgPSBmdW5jdGlvbiBvcHRpb25WYWx1ZUNhbkJlU2VsZWN0ZWQoc2VsZWN0aW9ucywgbmFtZSwgdmFsdWUpIHsKICAgICAgdmFyIHZhcmlhbnRzID0gdGhpcy52YXJpYW50QXJyYXksCiAgICAgICAgICBzZWxlY3RhYmxlVmFsdWVzID0gT2JqZWN0LmFzc2lnbih7fSwgc2VsZWN0aW9ucywgX2RlZmluZVByb3BlcnR5KHt9LCBuYW1lLCB2YWx1ZSkpLAogICAgICAgICAgc2F0aXNmYWN0b3J5VmFyaWFudHMgPSB2YXJpYW50cy5maWx0ZXIoZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICB2YXIgbWF0Y2hpbmdPcHRpb25zOwogICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhzZWxlY3RhYmxlVmFsdWVzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgcmV0dXJuIHZhcmlhbnQub3B0aW9uVmFsdWVzW2tleV0gPT09IHNlbGVjdGFibGVWYWx1ZXNba2V5XTsKICAgICAgICB9KS5sZW5ndGggPT09IE9iamVjdC5rZXlzKHNlbGVjdGFibGVWYWx1ZXMpLmxlbmd0aDsKICAgICAgfSksCiAgICAgICAgICB2YXJpYW50U2VsZWN0YWJsZSA9ICExOwogICAgICByZXR1cm4gY29uc28sIHZhcmlhbnRTZWxlY3RhYmxlID0gc2F0aXNmYWN0b3J5VmFyaWFudHMucmVkdWNlKGZ1bmN0aW9uICh2YXJpYW50RXhpc3RzLCB2YXJpYW50KSB7CiAgICAgICAgdmFyIHZhcmlhbnRBdmFpbGFibGUgPSB2YXJpYW50LmF2YWlsYWJsZTsKICAgICAgICByZXR1cm4gdmFyaWFudEV4aXN0cyB8fCB2YXJpYW50QXZhaWxhYmxlOwogICAgICB9LCAhMSk7CiAgICB9LCBfcHJvdG8ub3Blbk9ubGluZVN0b3JlID0gZnVuY3Rpb24gb3Blbk9ubGluZVN0b3JlKCkgewogICAgICB0aGlzLl91c2VyRXZlbnQoIm9wZW5PbmxpbmVTdG9yZSIpLCB3aW5kb3cub3Blbih0aGlzLm9ubGluZVN0b3JlVVJMKTsKICAgIH0sIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdChkYXRhKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ2FydCgpLnRoZW4oZnVuY3Rpb24gKGNhcnQpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLmNhcnQgPSBjYXJ0LCBfQ29tcG9uZW50LnByb3RvdHlwZS5pbml0LmNhbGwoX3RoaXMyLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChtb2RlbCkgewogICAgICAgICAgcmV0dXJuIG1vZGVsICYmIF90aGlzMi52aWV3LnJlbmRlcigpLCBtb2RlbDsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LCBfcHJvdG8uY3JlYXRlQ2FydCA9IGZ1bmN0aW9uIGNyZWF0ZUNhcnQoKSB7CiAgICAgIHZhciBjYXJ0Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5nbG9iYWxDb25maWcsIHsKICAgICAgICBub2RlOiB0aGlzLmdsb2JhbENvbmZpZy5jYXJ0Tm9kZSwKICAgICAgICBvcHRpb25zOiB0aGlzLmNvbmZpZwogICAgICB9KTsKICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY3JlYXRlQ2FydChjYXJ0Q29uZmlnKTsKICAgIH0sIF9wcm90by5zZXR1cE1vZGVsID0gZnVuY3Rpb24gc2V0dXBNb2RlbChkYXRhKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLnNldHVwTW9kZWwuY2FsbCh0aGlzLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChtb2RlbCkgewogICAgICAgIHJldHVybiBfdGhpczMuc2V0RGVmYXVsdFZhcmlhbnQobW9kZWwpOwogICAgICB9KTsKICAgIH0sIF9wcm90by5zZGtGZXRjaCA9IGZ1bmN0aW9uIHNka0ZldGNoKCkgewogICAgICByZXR1cm4gdGhpcy5zdG9yZWZyb250SWQgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnN0b3JlZnJvbnRJZCkgJiYgdGhpcy5zdG9yZWZyb250SWRbMF0gPyB0aGlzLnByb3BzLmNsaWVudC5wcm9kdWN0LmZldGNoKHRoaXMuc3RvcmVmcm9udElkWzBdKSA6IHRoaXMuc3RvcmVmcm9udElkICYmICFBcnJheS5pc0FycmF5KHRoaXMuc3RvcmVmcm9udElkKSA/IHRoaXMucHJvcHMuY2xpZW50LnByb2R1Y3QuZmV0Y2godGhpcy5zdG9yZWZyb250SWQpIDogdGhpcy5oYW5kbGUgPyB0aGlzLnByb3BzLmNsaWVudC5wcm9kdWN0LmZldGNoQnlIYW5kbGUodGhpcy5oYW5kbGUpLnRoZW4oZnVuY3Rpb24gKHByb2R1Y3QpIHsKICAgICAgICByZXR1cm4gcHJvZHVjdDsKICAgICAgfSkgOiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoIlNESyBGZXRjaCBGYWlsZWQiKSk7CiAgICB9LCBfcHJvdG8uZmV0Y2hEYXRhID0gZnVuY3Rpb24gZmV0Y2hEYXRhKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHJldHVybiB0aGlzLnNka0ZldGNoKCkudGhlbihmdW5jdGlvbiAobW9kZWwpIHsKICAgICAgICBpZiAobW9kZWwpIHJldHVybiBfdGhpczQuc3RvcmVmcm9udElkID0gbW9kZWwuaWQsIF90aGlzNC5oYW5kbGUgPSBtb2RlbC5oYW5kbGUsIG1vZGVsOwogICAgICAgIHRocm93IF90aGlzNC5ub2RlLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIsIG5ldyBFcnJvcigiTm90IEZvdW5kIik7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLm9uQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiBvbkJ1dHRvbkNsaWNrKGV2dCwgdGFyZ2V0KSB7CiAgICAgIGlmIChldnQuc3RvcFByb3BhZ2F0aW9uKCksIGlzRnVuY3Rpb24kMSh0aGlzLm9wdGlvbnMuYnV0dG9uRGVzdGluYXRpb24pKSB0aGlzLm9wdGlvbnMuYnV0dG9uRGVzdGluYXRpb24odGhpcyk7ZWxzZSBpZiAoImNhcnQiID09PSB0aGlzLm9wdGlvbnMuYnV0dG9uRGVzdGluYXRpb24pIHRoaXMucHJvcHMuY2xvc2VNb2RhbCgpLCB0aGlzLl91c2VyRXZlbnQoImFkZFZhcmlhbnRUb0NhcnQiKSwgdGhpcy5wcm9wcy50cmFja2VyLnRyYWNrTWV0aG9kKHRoaXMuY2FydC5hZGRWYXJpYW50VG9DYXJ0LmJpbmQodGhpcyksICJVcGRhdGUgQ2FydCIsIHRoaXMuc2VsZWN0ZWRWYXJpYW50VHJhY2tpbmdJbmZvKSh0aGlzLnNlbGVjdGVkVmFyaWFudCwgdGhpcy5zZWxlY3RlZFF1YW50aXR5KSwgdGhpcy5pZnJhbWUgJiYgdGhpcy5wcm9wcy5zZXRBY3RpdmVFbCh0YXJnZXQpO2Vsc2UgaWYgKCJtb2RhbCIgPT09IHRoaXMub3B0aW9ucy5idXR0b25EZXN0aW5hdGlvbikgdGhpcy5wcm9wcy5zZXRBY3RpdmVFbCh0YXJnZXQpLCB0aGlzLnByb3BzLnRyYWNrZXIudHJhY2soIk9wZW4gbW9kYWwiLCB0aGlzLnByb2R1Y3RUcmFja2luZ0luZm8pLCB0aGlzLm9wZW5Nb2RhbCgpO2Vsc2UgaWYgKCJvbmxpbmVTdG9yZSIgPT09IHRoaXMub3B0aW9ucy5idXR0b25EZXN0aW5hdGlvbikgdGhpcy5vcGVuT25saW5lU3RvcmUoKTtlbHNlIHsKICAgICAgICB2YXIgY2hlY2tvdXRXaW5kb3c7CgogICAgICAgIGlmICh0aGlzLl91c2VyRXZlbnQoIm9wZW5DaGVja291dCIpLCB0aGlzLnByb3BzLnRyYWNrZXIudHJhY2soIkRpcmVjdCBDaGVja291dCIsIHt9KSwgdGhpcy5jb25maWcuY2FydC5wb3B1cCAmJiBicm93c2VyRmVhdHVyZXMud2luZG93T3BlbigpKSB7CiAgICAgICAgICB2YXIgcGFyYW1zID0gbmV3IENoZWNrb3V0TmF2aWdhdG9yKHRoaXMuY29uZmlnKS5wYXJhbXM7CiAgICAgICAgICBjaGVja291dFdpbmRvdyA9IHdpbmRvdy5vcGVuKCIiLCAiY2hlY2tvdXQiLCBwYXJhbXMpOwogICAgICAgIH0gZWxzZSBjaGVja291dFdpbmRvdyA9IHdpbmRvdzsKCiAgICAgICAgdmFyIGlucHV0ID0gewogICAgICAgICAgbGluZUl0ZW1zOiBbewogICAgICAgICAgICB2YXJpYW50SWQ6IHRoaXMuc2VsZWN0ZWRWYXJpYW50LmlkLAogICAgICAgICAgICBxdWFudGl0eTogdGhpcy5zZWxlY3RlZFF1YW50aXR5CiAgICAgICAgICB9XQogICAgICAgIH07CiAgICAgICAgdGhpcy5wcm9wcy5jbGllbnQuY2hlY2tvdXQuY3JlYXRlKGlucHV0KS50aGVuKGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgICAgY2hlY2tvdXRXaW5kb3cubG9jYXRpb24gPSBjaGVja291dC53ZWJVcmw7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIF9wcm90by5vbkJsb2NrQnV0dG9uS2V5dXAgPSBmdW5jdGlvbiBvbkJsb2NrQnV0dG9uS2V5dXAoZXZ0LCB0YXJnZXQpIHsKICAgICAgMTMgPT09IGV2dC5rZXlDb2RlICYmIHRoaXMub25CdXR0b25DbGljayhldnQsIHRhcmdldCk7CiAgICB9LCBfcHJvdG8ub25PcHRpb25TZWxlY3QgPSBmdW5jdGlvbiBvbk9wdGlvblNlbGVjdChldnQpIHsKICAgICAgdmFyIHRhcmdldCA9IGV2dC50YXJnZXQsCiAgICAgICAgICB2YWx1ZSA9IHRhcmdldC5vcHRpb25zW3RhcmdldC5zZWxlY3RlZEluZGV4XS52YWx1ZSwKICAgICAgICAgIG5hbWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCJuYW1lIik7CiAgICAgIHRoaXMudXBkYXRlVmFyaWFudChuYW1lLCB2YWx1ZSk7CiAgICB9LCBfcHJvdG8ub25RdWFudGl0eUJsdXIgPSBmdW5jdGlvbiBvblF1YW50aXR5Qmx1cihldnQsIHRhcmdldCkgewogICAgICB0aGlzLnVwZGF0ZVF1YW50aXR5KGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gcGFyc2VJbnQodGFyZ2V0LnZhbHVlLCAxMCk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLm9uUXVhbnRpdHlJbmNyZW1lbnQgPSBmdW5jdGlvbiBvblF1YW50aXR5SW5jcmVtZW50KHF0eSkgewogICAgICB0aGlzLnVwZGF0ZVF1YW50aXR5KGZ1bmN0aW9uIChwcmV2UXR5KSB7CiAgICAgICAgcmV0dXJuIHByZXZRdHkgKyBxdHk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLmNsb3NlQ2FydE9uQmdDbGljayA9IGZ1bmN0aW9uIGNsb3NlQ2FydE9uQmdDbGljaygpIHsKICAgICAgdGhpcy5jYXJ0ICYmIHRoaXMuY2FydC5pc1Zpc2libGUgJiYgdGhpcy5jYXJ0LmNsb3NlKCk7CiAgICB9LCBfcHJvdG8ub25DYXJvdXNlbEl0ZW1DbGljayA9IGZ1bmN0aW9uIG9uQ2Fyb3VzZWxJdGVtQ2xpY2soZXZ0LCB0YXJnZXQpIHsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIHZhciBzZWxlY3RlZEltYWdlSWQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCJkYXRhLWltYWdlLWlkIiksCiAgICAgICAgICBpbWFnZUxpc3QsCiAgICAgICAgICBmb3VuZEltYWdlID0gdGhpcy5tb2RlbC5pbWFnZXMuZmluZChmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICByZXR1cm4gaW1hZ2UuaWQgPT09IHNlbGVjdGVkSW1hZ2VJZDsKICAgICAgfSk7CiAgICAgIGZvdW5kSW1hZ2UgJiYgKHRoaXMuc2VsZWN0ZWRJbWFnZSA9IGZvdW5kSW1hZ2UsIHRoaXMuY2FjaGVkSW1hZ2UgPSBmb3VuZEltYWdlKSwgdGhpcy52aWV3LnJlbmRlcigpOwogICAgfSwgX3Byb3RvLm5leHRJbmRleCA9IGZ1bmN0aW9uIG5leHRJbmRleChjdXJyZW50SW5kZXgsIG9mZnNldCkgewogICAgICB2YXIgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgb2Zmc2V0OwogICAgICByZXR1cm4gbmV4dEluZGV4ID49IHRoaXMubW9kZWwuaW1hZ2VzLmxlbmd0aCA/IDAgOiBuZXh0SW5kZXggPCAwID8gdGhpcy5tb2RlbC5pbWFnZXMubGVuZ3RoIC0gMSA6IG5leHRJbmRleDsKICAgIH0sIF9wcm90by5vbkNhcm91c2VsQ2hhbmdlID0gZnVuY3Rpb24gb25DYXJvdXNlbENoYW5nZShvZmZzZXQpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXMsCiAgICAgICAgICBpbWFnZUxpc3QgPSB0aGlzLm1vZGVsLmltYWdlcywKICAgICAgICAgIGN1cnJlbnRJbWFnZSA9IGltYWdlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGltYWdlKSB7CiAgICAgICAgcmV0dXJuIGltYWdlLmlkID09PSBfdGhpczUuY3VycmVudEltYWdlLmlkOwogICAgICB9KVswXSwKICAgICAgICAgIGN1cnJlbnRJbWFnZUluZGV4ID0gaW1hZ2VMaXN0LmluZGV4T2YoY3VycmVudEltYWdlKTsKCiAgICAgIHRoaXMuc2VsZWN0ZWRJbWFnZSA9IGltYWdlTGlzdFt0aGlzLm5leHRJbmRleChjdXJyZW50SW1hZ2VJbmRleCwgb2Zmc2V0KV0sIHRoaXMuY2FjaGVkSW1hZ2UgPSB0aGlzLnNlbGVjdGVkSW1hZ2UsIHRoaXMudmlldy5yZW5kZXIoKTsKICAgIH0sIF9wcm90by5vcGVuTW9kYWwgPSBmdW5jdGlvbiBvcGVuTW9kYWwoKSB7CiAgICAgIGlmICghdGhpcy5tb2RhbCkgewogICAgICAgIHZhciBtb2RhbENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZ2xvYmFsQ29uZmlnLCB7CiAgICAgICAgICBub2RlOiB0aGlzLmdsb2JhbENvbmZpZy5tb2RhbE5vZGUsCiAgICAgICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZywgewogICAgICAgICAgICBwcm9kdWN0OiB0aGlzLm1vZGFsUHJvZHVjdENvbmZpZywKICAgICAgICAgICAgbW9kYWw6IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnLm1vZGFsLCB7CiAgICAgICAgICAgICAgZ29vZ2xlRm9udHM6IHRoaXMub3B0aW9ucy5nb29nbGVGb250cwogICAgICAgICAgICB9KQogICAgICAgICAgfSkKICAgICAgICB9KTsKICAgICAgICB0aGlzLm1vZGFsID0gdGhpcy5wcm9wcy5jcmVhdGVNb2RhbChtb2RhbENvbmZpZywgdGhpcy5wcm9wcyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLl91c2VyRXZlbnQoIm9wZW5Nb2RhbCIpLCB0aGlzLm1vZGFsLmluaXQodGhpcy5tb2RlbCk7CiAgICB9LCBfcHJvdG8udXBkYXRlUXVhbnRpdHkgPSBmdW5jdGlvbiB1cGRhdGVRdWFudGl0eShmbikgewogICAgICB2YXIgcXVhbnRpdHkgPSBmbih0aGlzLnNlbGVjdGVkUXVhbnRpdHkpOwogICAgICBxdWFudGl0eSA8IDAgJiYgKHF1YW50aXR5ID0gMCksIHRoaXMuc2VsZWN0ZWRRdWFudGl0eSA9IHF1YW50aXR5LCB0aGlzLl91c2VyRXZlbnQoInVwZGF0ZVF1YW50aXR5IiksIHRoaXMudmlldy5yZW5kZXIoKTsKICAgIH0sIF9wcm90by51cGRhdGVWYXJpYW50ID0gZnVuY3Rpb24gdXBkYXRlVmFyaWFudChvcHRpb25OYW1lLCB2YWx1ZSkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpcywKICAgICAgICAgIHVwZGF0ZWRPcHRpb24gPSB0aGlzLm1vZGVsLm9wdGlvbnMuZmluZChmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgcmV0dXJuIG9wdGlvbi5uYW1lID09PSBvcHRpb25OYW1lOwogICAgICB9KTsKCiAgICAgIHJldHVybiB1cGRhdGVkT3B0aW9uICYmICh0aGlzLnNlbGVjdGVkT3B0aW9uc1t1cGRhdGVkT3B0aW9uLm5hbWVdID0gdmFsdWUsIHRoaXMuc2VsZWN0ZWRWYXJpYW50ID0gdGhpcy5wcm9wcy5jbGllbnQucHJvZHVjdC5oZWxwZXJzLnZhcmlhbnRGb3JPcHRpb25zKHRoaXMubW9kZWwsIHRoaXMuc2VsZWN0ZWRPcHRpb25zKSksIHRoaXMudmFyaWFudEV4aXN0cyA/ICh0aGlzLmNhY2hlZEltYWdlID0gdGhpcy5zZWxlY3RlZFZhcmlhbnQuaW1hZ2UsIHRoaXMuc2VsZWN0ZWRWYXJpYW50LmltYWdlID8gdGhpcy5zZWxlY3RlZEltYWdlID0gbnVsbCA6IHRoaXMuc2VsZWN0ZWRJbWFnZSA9IHRoaXMubW9kZWwuaW1hZ2VzWzBdKSA6IHRoaXMuc2VsZWN0ZWRJbWFnZSA9IHRoaXMubW9kZWwuaW1hZ2VzLmZpbmQoZnVuY3Rpb24gKGltYWdlKSB7CiAgICAgICAgcmV0dXJuIGltYWdlLmlkID09PSBfdGhpczYuY2FjaGVkSW1hZ2UuaWQ7CiAgICAgIH0pLCB0aGlzLnZpZXcucmVuZGVyKCksIHRoaXMuX3VzZXJFdmVudCgidXBkYXRlVmFyaWFudCIpLCB1cGRhdGVkT3B0aW9uOwogICAgfSwgX3Byb3RvLnNldERlZmF1bHRWYXJpYW50ID0gZnVuY3Rpb24gc2V0RGVmYXVsdFZhcmlhbnQobW9kZWwpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXMsCiAgICAgICAgICBzZWxlY3RlZFZhcmlhbnQ7CgogICAgICByZXR1cm4gdGhpcy5kZWZhdWx0U3RvcmVmcm9udFZhcmlhbnRJZCA/IHNlbGVjdGVkVmFyaWFudCA9IG1vZGVsLnZhcmlhbnRzLmZpbmQoZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICByZXR1cm4gdmFyaWFudC5pZCA9PT0gX3RoaXM3LmRlZmF1bHRTdG9yZWZyb250VmFyaWFudElkOwogICAgICB9KSA6ICh0aGlzLmRlZmF1bHRTdG9yZWZyb250VmFyaWFudElkID0gbW9kZWwudmFyaWFudHNbMF0uaWQsIHNlbGVjdGVkVmFyaWFudCA9IG1vZGVsLnZhcmlhbnRzWzBdLCB0aGlzLnNlbGVjdGVkSW1hZ2UgPSBtb2RlbC5pbWFnZXNbMF0pLCBzZWxlY3RlZFZhcmlhbnQgfHwgKHNlbGVjdGVkVmFyaWFudCA9IG1vZGVsLnZhcmlhbnRzWzBdKSwgdGhpcy5zZWxlY3RlZE9wdGlvbnMgPSBzZWxlY3RlZFZhcmlhbnQuc2VsZWN0ZWRPcHRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBvcHRpb24pIHsKICAgICAgICByZXR1cm4gYWNjW29wdGlvbi5uYW1lXSA9IG9wdGlvbi52YWx1ZSwgYWNjOwogICAgICB9LCB7fSksIHRoaXMuc2VsZWN0ZWRWYXJpYW50ID0gc2VsZWN0ZWRWYXJpYW50LCBtb2RlbDsKICAgIH0sIF9wcm90by5pbWFnZUFsdFRleHQgPSBmdW5jdGlvbiBpbWFnZUFsdFRleHQoYWx0VGV4dCkgewogICAgICByZXR1cm4gYWx0VGV4dCB8fCB0aGlzLm1vZGVsLnRpdGxlOwogICAgfSwgX2NyZWF0ZUNsYXNzKFByb2R1Y3QsIFt7CiAgICAgIGtleTogInNob3VsZFVwZGF0ZUltYWdlIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuICF0aGlzLmNhY2hlZEltYWdlIHx8IHRoaXMuaW1hZ2UgJiYgdGhpcy5pbWFnZS5zcmMgIT09IHRoaXMuY2FjaGVkSW1hZ2U7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY3VycmVudEltYWdlIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2hvdWxkVXBkYXRlSW1hZ2UgJiYgKHRoaXMuY2FjaGVkSW1hZ2UgPSB0aGlzLmltYWdlKSwgdGhpcy5jYWNoZWRJbWFnZTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJpbWFnZSIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciBERUZBVUxUX0lNQUdFX1NJWkUgPSA0ODAsCiAgICAgICAgICAgIE1PREFMX0lNQUdFX1NJWkUgPSA1NTAsCiAgICAgICAgICAgIGltYWdlU2l6ZSwKICAgICAgICAgICAgaWQsCiAgICAgICAgICAgIHNyYywKICAgICAgICAgICAgc3JjTGFyZ2UsCiAgICAgICAgICAgIHNyY09yaWdpbmFsLAogICAgICAgICAgICBhbHRUZXh0OwogICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFZhcmlhbnQgJiYgIXRoaXMub3B0aW9ucy5jb250ZW50cy5pbWdXaXRoQ2Fyb3VzZWwpIHJldHVybiBudWxsOwogICAgICAgIHZhciBpbWFnZU9wdGlvbnMgPSB7CiAgICAgICAgICBtYXhXaWR0aDogaW1hZ2VTaXplID0gdGhpcy5vcHRpb25zLndpZHRoICYmICIlIiA9PT0gdGhpcy5vcHRpb25zLndpZHRoLnNsaWNlKC0xKSA/IDFlMyA6IHBhcnNlSW50KHRoaXMub3B0aW9ucy53aWR0aCwgMTApIHx8IDQ4MCwKICAgICAgICAgIG1heEhlaWdodDogMS41ICogaW1hZ2VTaXplCiAgICAgICAgfSwKICAgICAgICAgICAgaW1hZ2VPcHRpb25zTGFyZ2UgPSB7CiAgICAgICAgICBtYXhXaWR0aDogNTUwLAogICAgICAgICAgbWF4SGVpZ2h0OiA4MjUKICAgICAgICB9OwogICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSW1hZ2UgPyAoaWQgPSB0aGlzLnNlbGVjdGVkSW1hZ2UuaWQsIHNyYyA9IHRoaXMucHJvcHMuY2xpZW50LmltYWdlLmhlbHBlcnMuaW1hZ2VGb3JTaXplKHRoaXMuc2VsZWN0ZWRJbWFnZSwgaW1hZ2VPcHRpb25zKSwgc3JjTGFyZ2UgPSB0aGlzLnByb3BzLmNsaWVudC5pbWFnZS5oZWxwZXJzLmltYWdlRm9yU2l6ZSh0aGlzLnNlbGVjdGVkSW1hZ2UsIGltYWdlT3B0aW9uc0xhcmdlKSwgc3JjT3JpZ2luYWwgPSB0aGlzLnNlbGVjdGVkSW1hZ2Uuc3JjLCBhbHRUZXh0ID0gdGhpcy5pbWFnZUFsdFRleHQodGhpcy5zZWxlY3RlZEltYWdlLmFsdFRleHQpKSA6IG51bGwgPT0gdGhpcy5zZWxlY3RlZFZhcmlhbnQuaW1hZ2UgJiYgbnVsbCA9PSB0aGlzLm1vZGVsLmltYWdlc1swXSA/IChpZCA9IG51bGwsIHNyYyA9ICIiLCBzcmNMYXJnZSA9ICIiLCBzcmNPcmlnaW5hbCA9ICIiLCBhbHRUZXh0ID0gIiIpIDogbnVsbCA9PSB0aGlzLnNlbGVjdGVkVmFyaWFudC5pbWFnZSA/IChpZCA9IHRoaXMubW9kZWwuaW1hZ2VzWzBdLmlkLCBzcmMgPSB0aGlzLm1vZGVsLmltYWdlc1swXS5zcmMsIHNyY0xhcmdlID0gdGhpcy5wcm9wcy5jbGllbnQuaW1hZ2UuaGVscGVycy5pbWFnZUZvclNpemUodGhpcy5tb2RlbC5pbWFnZXNbMF0sIGltYWdlT3B0aW9uc0xhcmdlKSwgc3JjT3JpZ2luYWwgPSB0aGlzLm1vZGVsLmltYWdlc1swXS5zcmMsIGFsdFRleHQgPSB0aGlzLmltYWdlQWx0VGV4dCh0aGlzLm1vZGVsLmltYWdlc1swXS5hbHRUZXh0KSkgOiAoaWQgPSB0aGlzLnNlbGVjdGVkVmFyaWFudC5pbWFnZS5pZCwgc3JjID0gdGhpcy5wcm9wcy5jbGllbnQuaW1hZ2UuaGVscGVycy5pbWFnZUZvclNpemUodGhpcy5zZWxlY3RlZFZhcmlhbnQuaW1hZ2UsIGltYWdlT3B0aW9ucyksIHNyY0xhcmdlID0gdGhpcy5wcm9wcy5jbGllbnQuaW1hZ2UuaGVscGVycy5pbWFnZUZvclNpemUodGhpcy5zZWxlY3RlZFZhcmlhbnQuaW1hZ2UsIGltYWdlT3B0aW9uc0xhcmdlKSwgc3JjT3JpZ2luYWwgPSB0aGlzLnNlbGVjdGVkVmFyaWFudC5pbWFnZS5zcmMsIGFsdFRleHQgPSB0aGlzLmltYWdlQWx0VGV4dCh0aGlzLnNlbGVjdGVkVmFyaWFudC5pbWFnZS5hbHRUZXh0KSksIHsKICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgIHNyYzogc3JjLAogICAgICAgICAgc3JjTGFyZ2U6IHNyY0xhcmdlLAogICAgICAgICAgc3JjT3JpZ2luYWw6IHNyY09yaWdpbmFsLAogICAgICAgICAgYWx0VGV4dDogYWx0VGV4dAogICAgICAgIH07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZm9ybWF0dGVkUHJpY2UiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZFZhcmlhbnQgPyBmb3JtYXRNb25leSh0aGlzLnNlbGVjdGVkVmFyaWFudC5wcmljZVYyLmFtb3VudCwgdGhpcy5nbG9iYWxDb25maWcubW9uZXlGb3JtYXQpIDogIiI7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZm9ybWF0dGVkQ29tcGFyZUF0UHJpY2UiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZFZhcmlhbnQgJiYgdGhpcy5zZWxlY3RlZFZhcmlhbnQuY29tcGFyZUF0UHJpY2VWMiA/IGZvcm1hdE1vbmV5KHRoaXMuc2VsZWN0ZWRWYXJpYW50LmNvbXBhcmVBdFByaWNlVjIuYW1vdW50LCB0aGlzLmdsb2JhbENvbmZpZy5tb25leUZvcm1hdCkgOiAiIjsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzaG93VW5pdFByaWNlIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuICEhKHRoaXMuc2VsZWN0ZWRWYXJpYW50ICYmIHRoaXMuc2VsZWN0ZWRWYXJpYW50LnVuaXRQcmljZSAmJiB0aGlzLm9wdGlvbnMuY29udGVudHMudW5pdFByaWNlKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmb3JtYXR0ZWRVbml0UHJpY2UiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5zaG93VW5pdFByaWNlID8gZm9ybWF0TW9uZXkodGhpcy5zZWxlY3RlZFZhcmlhbnQudW5pdFByaWNlLmFtb3VudCwgdGhpcy5nbG9iYWxDb25maWcubW9uZXlGb3JtYXQpIDogIiI7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZm9ybWF0dGVkVW5pdFByaWNlQmFzZVVuaXQiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICBpZiAoIXRoaXMuc2hvd1VuaXRQcmljZSkgcmV0dXJuICIiOwogICAgICAgIHZhciB1bml0UHJpY2VNZWFzdXJlbWVudCA9IHRoaXMuc2VsZWN0ZWRWYXJpYW50LnVuaXRQcmljZU1lYXN1cmVtZW50OwogICAgICAgIHJldHVybiBnZXRVbml0UHJpY2VCYXNlVW5pdCh1bml0UHJpY2VNZWFzdXJlbWVudC5yZWZlcmVuY2VWYWx1ZSwgdW5pdFByaWNlTWVhc3VyZW1lbnQucmVmZXJlbmNlVW5pdCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAidmlld0RhdGEiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5tb2RlbCwgdGhpcy5vcHRpb25zLnZpZXdEYXRhLCB7CiAgICAgICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsCiAgICAgICAgICBjb250ZW50czogdGhpcy5vcHRpb25zLmNvbnRlbnRzLAogICAgICAgICAgdGV4dDogdGhpcy5vcHRpb25zLnRleHQsCiAgICAgICAgICBvcHRpb25zSHRtbDogdGhpcy5vcHRpb25zSHRtbCwKICAgICAgICAgIGRlY29yYXRlZE9wdGlvbnM6IHRoaXMuZGVjb3JhdGVkT3B0aW9ucywKICAgICAgICAgIGN1cnJlbnRJbWFnZTogdGhpcy5jdXJyZW50SW1hZ2UsCiAgICAgICAgICBidXR0b25DbGFzczogdGhpcy5idXR0b25DbGFzcywKICAgICAgICAgIGhhc1ZhcmlhbnRzOiB0aGlzLmhhc1ZhcmlhbnRzLAogICAgICAgICAgYnV0dG9uRGlzYWJsZWQ6ICF0aGlzLmJ1dHRvbkVuYWJsZWQsCiAgICAgICAgICBzZWxlY3RlZFZhcmlhbnQ6IHRoaXMuc2VsZWN0ZWRWYXJpYW50LAogICAgICAgICAgc2VsZWN0ZWRRdWFudGl0eTogdGhpcy5zZWxlY3RlZFF1YW50aXR5LAogICAgICAgICAgYnV0dG9uVGV4dDogdGhpcy5idXR0b25UZXh0LAogICAgICAgICAgaW1nU3R5bGU6IHRoaXMuaW1nU3R5bGUsCiAgICAgICAgICBxdWFudGl0eUNsYXNzOiB0aGlzLnF1YW50aXR5Q2xhc3MsCiAgICAgICAgICBwcmljZUNsYXNzOiB0aGlzLnByaWNlQ2xhc3MsCiAgICAgICAgICBmb3JtYXR0ZWRQcmljZTogdGhpcy5mb3JtYXR0ZWRQcmljZSwKICAgICAgICAgIGZvcm1hdHRlZENvbXBhcmVBdFByaWNlOiB0aGlzLmZvcm1hdHRlZENvbXBhcmVBdFByaWNlLAogICAgICAgICAgc2hvd1VuaXRQcmljZTogdGhpcy5zaG93VW5pdFByaWNlLAogICAgICAgICAgZm9ybWF0dGVkVW5pdFByaWNlOiB0aGlzLmZvcm1hdHRlZFVuaXRQcmljZSwKICAgICAgICAgIGZvcm1hdHRlZFVuaXRQcmljZUJhc2VVbml0OiB0aGlzLmZvcm1hdHRlZFVuaXRQcmljZUJhc2VVbml0LAogICAgICAgICAgY2Fyb3VzZWxJbmRleDogMCwKICAgICAgICAgIGNhcm91c2VsSW1hZ2VzOiB0aGlzLmNhcm91c2VsSW1hZ2VzCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY2Fyb3VzZWxJbWFnZXMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuaW1hZ2VzLm1hcChmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGlkOiBpbWFnZS5pZCwKICAgICAgICAgICAgc3JjOiBpbWFnZS5zcmMsCiAgICAgICAgICAgIGNhcm91c2VsU3JjOiBfdGhpczgucHJvcHMuY2xpZW50LmltYWdlLmhlbHBlcnMuaW1hZ2VGb3JTaXplKGltYWdlLCB7CiAgICAgICAgICAgICAgbWF4V2lkdGg6IDEwMCwKICAgICAgICAgICAgICBtYXhIZWlnaHQ6IDEwMAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgaXNTZWxlY3RlZDogaW1hZ2UuaWQgPT09IF90aGlzOC5jdXJyZW50SW1hZ2UuaWQsCiAgICAgICAgICAgIGFsdFRleHQ6IF90aGlzOC5pbWFnZUFsdFRleHQoaW1hZ2UuYWx0VGV4dCkKICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYnV0dG9uQ2xhc3MiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgZGlzYWJsZWRDbGFzcyA9IHRoaXMuYnV0dG9uRW5hYmxlZCA/ICIiIDogdGhpcy5jbGFzc2VzLnByb2R1Y3QuZGlzYWJsZWQsCiAgICAgICAgICAgIHF1YW50aXR5Q2xhc3MgPSB0aGlzLm9wdGlvbnMuY29udGVudHMuYnV0dG9uV2l0aFF1YW50aXR5ID8gdGhpcy5jbGFzc2VzLnByb2R1Y3QuYnV0dG9uQmVzaWRlUXR5IDogIiI7CiAgICAgICAgcmV0dXJuICIiLmNvbmNhdChkaXNhYmxlZENsYXNzLCAiICIpLmNvbmNhdChxdWFudGl0eUNsYXNzKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJxdWFudGl0eUNsYXNzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jb250ZW50cy5xdWFudGl0eUluY3JlbWVudCB8fCB0aGlzLm9wdGlvbnMuY29udGVudHMucXVhbnRpdHlEZWNyZW1lbnQgPyB0aGlzLmNsYXNzZXMucHJvZHVjdC5xdWFudGl0eVdpdGhCdXR0b25zIDogIiI7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYnV0dG9uVGV4dCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiAibW9kYWwiID09PSB0aGlzLm9wdGlvbnMuYnV0dG9uRGVzdGluYXRpb24gPyB0aGlzLm9wdGlvbnMudGV4dC5idXR0b24gOiB0aGlzLnZhcmlhbnRFeGlzdHMgPyB0aGlzLnZhcmlhbnRJblN0b2NrID8gdGhpcy5vcHRpb25zLnRleHQuYnV0dG9uIDogdGhpcy5vcHRpb25zLnRleHQub3V0T2ZTdG9jayA6IHRoaXMub3B0aW9ucy50ZXh0LnVuYXZhaWxhYmxlOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImJ1dHRvbkVuYWJsZWQiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gIm1vZGFsIiA9PT0gdGhpcy5vcHRpb25zLmJ1dHRvbkRlc3RpbmF0aW9uIHx8IHRoaXMuYnV0dG9uQWN0aW9uQXZhaWxhYmxlICYmIHRoaXMudmFyaWFudEV4aXN0cyAmJiB0aGlzLnZhcmlhbnRJblN0b2NrOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInZhcmlhbnRFeGlzdHMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFyaWFudHMuc29tZShmdW5jdGlvbiAodmFyaWFudCkgewogICAgICAgICAgcmV0dXJuICEhX3RoaXM5LnNlbGVjdGVkVmFyaWFudCAmJiB2YXJpYW50LmlkID09PSBfdGhpczkuc2VsZWN0ZWRWYXJpYW50LmlkOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInZhcmlhbnRJblN0b2NrIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudmFyaWFudEV4aXN0cyAmJiB0aGlzLnNlbGVjdGVkVmFyaWFudC5hdmFpbGFibGU7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiaGFzVmFyaWFudHMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC52YXJpYW50cy5sZW5ndGggPiAxOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInJlcXVpcmVzQ2FydCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiAiY2FydCIgPT09IHRoaXMub3B0aW9ucy5idXR0b25EZXN0aW5hdGlvbjsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJidXR0b25BY3Rpb25BdmFpbGFibGUiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gIXRoaXMucmVxdWlyZXNDYXJ0IHx8IEJvb2xlYW4odGhpcy5jYXJ0KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJoYXNRdWFudGl0eSIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY29udGVudHMucXVhbnRpdHlJbnB1dDsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJwcmljZUNsYXNzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRWYXJpYW50ICYmIHRoaXMuc2VsZWN0ZWRWYXJpYW50LmNvbXBhcmVBdFByaWNlVjIgPyB0aGlzLmNsYXNzZXMucHJvZHVjdC5sb3dlcmVkUHJpY2UgOiAiIjsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJpc0J1dHRvbiIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaXNCdXR0b24gJiYgISh0aGlzLm9wdGlvbnMuY29udGVudHMuYnV0dG9uIHx8IHRoaXMub3B0aW9ucy5jb250ZW50cy5idXR0b25XaXRoUXVhbnRpdHkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIkRPTUV2ZW50cyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciBfbWVyZ2U7CgogICAgICAgIHJldHVybiBtZXJnZSh7fSwgKF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UgPSB7CiAgICAgICAgICBjbGljazogdGhpcy5jbG9zZUNhcnRPbkJnQ2xpY2suYmluZCh0aGlzKQogICAgICAgIH0sICJjbGljayAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5vcHRpb24uc2VsZWN0KSwgdGhpcy5zdG9wUHJvcGFnYXRpb24uYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJmb2N1cyAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5vcHRpb24uc2VsZWN0KSwgdGhpcy5zdG9wUHJvcGFnYXRpb24uYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJjbGljayAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5vcHRpb24ud3JhcHBlciksIHRoaXMuc3RvcFByb3BhZ2F0aW9uLmJpbmQodGhpcykpLCBfZGVmaW5lUHJvcGVydHkoX21lcmdlLCAiY2xpY2sgIi5jb25jYXQodGhpcy5zZWxlY3RvcnMucHJvZHVjdC5xdWFudGl0eUlucHV0KSwgdGhpcy5zdG9wUHJvcGFnYXRpb24uYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJjbGljayAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5wcm9kdWN0LnF1YW50aXR5QnV0dG9uKSwgdGhpcy5zdG9wUHJvcGFnYXRpb24uYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJjaGFuZ2UgIi5jb25jYXQodGhpcy5zZWxlY3RvcnMub3B0aW9uLnNlbGVjdCksIHRoaXMub25PcHRpb25TZWxlY3QuYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJjbGljayAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5wcm9kdWN0LmJ1dHRvbiksIHRoaXMub25CdXR0b25DbGljay5iaW5kKHRoaXMpKSwgX2RlZmluZVByb3BlcnR5KF9tZXJnZSwgImNsaWNrICIuY29uY2F0KHRoaXMuc2VsZWN0b3JzLnByb2R1Y3QuYmxvY2tCdXR0b24pLCB0aGlzLm9uQnV0dG9uQ2xpY2suYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJrZXl1cCAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5wcm9kdWN0LmJsb2NrQnV0dG9uKSwgdGhpcy5vbkJsb2NrQnV0dG9uS2V5dXAuYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJjbGljayAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5wcm9kdWN0LnF1YW50aXR5SW5jcmVtZW50KSwgdGhpcy5vblF1YW50aXR5SW5jcmVtZW50LmJpbmQodGhpcywgMSkpLCBfZGVmaW5lUHJvcGVydHkoX21lcmdlLCAiY2xpY2sgIi5jb25jYXQodGhpcy5zZWxlY3RvcnMucHJvZHVjdC5xdWFudGl0eURlY3JlbWVudCksIHRoaXMub25RdWFudGl0eUluY3JlbWVudC5iaW5kKHRoaXMsIC0xKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJibHVyICIuY29uY2F0KHRoaXMuc2VsZWN0b3JzLnByb2R1Y3QucXVhbnRpdHlJbnB1dCksIHRoaXMub25RdWFudGl0eUJsdXIuYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJjbGljayAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5wcm9kdWN0LmNhcm91c2VsSXRlbSksIHRoaXMub25DYXJvdXNlbEl0ZW1DbGljay5iaW5kKHRoaXMpKSwgX2RlZmluZVByb3BlcnR5KF9tZXJnZSwgImNsaWNrICIuY29uY2F0KHRoaXMuc2VsZWN0b3JzLnByb2R1Y3QuY2Fyb3VzZWxOZXh0KSwgdGhpcy5vbkNhcm91c2VsQ2hhbmdlLmJpbmQodGhpcywgMSkpLCBfZGVmaW5lUHJvcGVydHkoX21lcmdlLCAiY2xpY2sgIi5jb25jYXQodGhpcy5zZWxlY3RvcnMucHJvZHVjdC5jYXJvdXNlbFByZXZpb3VzKSwgdGhpcy5vbkNhcm91c2VsQ2hhbmdlLmJpbmQodGhpcywgLTEpKSwgX21lcmdlKSwgdGhpcy5vcHRpb25zLkRPTUV2ZW50cyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAib3B0aW9uc0h0bWwiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY29udGVudHMub3B0aW9ucyA/IHRoaXMuZGVjb3JhdGVkT3B0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgb3B0aW9uKSB7CiAgICAgICAgICB2YXIgZGF0YSA9IG1lcmdlKG9wdGlvbiwgX3RoaXMxMC5vcHRpb25zLnZpZXdEYXRhKTsKICAgICAgICAgIHJldHVybiBkYXRhLmNsYXNzZXMgPSBfdGhpczEwLmNsYXNzZXMsIGRhdGEub25seU9wdGlvbiA9IDEgPT09IF90aGlzMTAubW9kZWwub3B0aW9ucy5sZW5ndGgsIGFjYyArIF90aGlzMTAuY2hpbGRUZW1wbGF0ZS5yZW5kZXIoewogICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICB9KTsKICAgICAgICB9LCAiIikgOiAiIjsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJ2YXJpYW50QXJyYXkiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMudmFyaWFudEFycmF5TWVtbywgdGhpcy52YXJpYW50QXJyYXlNZW1vID0gdGhpcy5tb2RlbC52YXJpYW50cy5tYXAoZnVuY3Rpb24gKHZhcmlhbnQpIHsKICAgICAgICAgIHZhciBiZXR0ZXJWYXJpYW50ID0gewogICAgICAgICAgICBpZDogdmFyaWFudC5pZCwKICAgICAgICAgICAgYXZhaWxhYmxlOiB2YXJpYW50LmF2YWlsYWJsZSwKICAgICAgICAgICAgb3B0aW9uVmFsdWVzOiB7fQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiB2YXJpYW50Lm9wdGlvblZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25WYWx1ZSkgewogICAgICAgICAgICBiZXR0ZXJWYXJpYW50Lm9wdGlvblZhbHVlc1tvcHRpb25WYWx1ZS5uYW1lXSA9IG9wdGlvblZhbHVlLnZhbHVlOwogICAgICAgICAgfSksIGJldHRlclZhcmlhbnQ7CiAgICAgICAgfSksIHRoaXMudmFyaWFudEFycmF5TWVtbzsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJkZWNvcmF0ZWRPcHRpb25zIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgdmFyIF90aGlzMTEgPSB0aGlzOwoKICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5vcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBuYW1lOiBvcHRpb24ubmFtZSwKICAgICAgICAgICAgdmFsdWVzOiBvcHRpb24udmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgbmFtZTogdmFsdWUudmFsdWUsCiAgICAgICAgICAgICAgICBzZWxlY3RlZDogX3RoaXMxMS5zZWxlY3RlZE9wdGlvbnNbb3B0aW9uLm5hbWVdID09PSB2YWx1ZS52YWx1ZQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pCiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInRyYWNraW5nSW5mbyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciB2YXJpYW50ID0gdGhpcy5zZWxlY3RlZFZhcmlhbnQgfHwgdGhpcy5tb2RlbC52YXJpYW50c1swXSwKICAgICAgICAgICAgY29udGVudHMgPSB0aGlzLm9wdGlvbnMuY29udGVudHMsCiAgICAgICAgICAgIGNvbnRlbnRTdHJpbmcgPSBPYmplY3Qua2V5cyhjb250ZW50cykuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgIHJldHVybiBjb250ZW50c1trZXldOwogICAgICAgIH0pLnRvU3RyaW5nKCk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGlkOiB0aGlzLm1vZGVsLmlkLAogICAgICAgICAgbmFtZTogdGhpcy5tb2RlbC50aXRsZSwKICAgICAgICAgIHZhcmlhbnRJZDogdmFyaWFudC5pZCwKICAgICAgICAgIHZhcmlhbnROYW1lOiB2YXJpYW50LnRpdGxlLAogICAgICAgICAgcHJpY2U6IHZhcmlhbnQucHJpY2VWMi5hbW91bnQsCiAgICAgICAgICBkZXN0aW5hdGlvbjogdGhpcy5vcHRpb25zLmJ1dHRvbkRlc3RpbmF0aW9uLAogICAgICAgICAgbGF5b3V0OiB0aGlzLm9wdGlvbnMubGF5b3V0LAogICAgICAgICAgY29udGVudHM6IGNvbnRlbnRTdHJpbmcsCiAgICAgICAgICBjaGVja291dFBvcHVwOiB0aGlzLmNvbmZpZy5jYXJ0LnBvcHVwLAogICAgICAgICAgc2t1OiBudWxsCiAgICAgICAgfTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZWxlY3RlZFZhcmlhbnRUcmFja2luZ0luZm8iLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgdmFyaWFudCA9IHRoaXMuc2VsZWN0ZWRWYXJpYW50OwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBpZDogdmFyaWFudC5pZCwKICAgICAgICAgIG5hbWU6IHZhcmlhbnQudGl0bGUsCiAgICAgICAgICBwcm9kdWN0SWQ6IHRoaXMubW9kZWwuaWQsCiAgICAgICAgICBwcm9kdWN0TmFtZTogdGhpcy5tb2RlbC50aXRsZSwKICAgICAgICAgIHF1YW50aXR5OiB0aGlzLnNlbGVjdGVkUXVhbnRpdHksCiAgICAgICAgICBwcmljZTogdmFyaWFudC5wcmljZVYyLmFtb3VudCwKICAgICAgICAgIHNrdTogbnVsbAogICAgICAgIH07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAicHJvZHVjdFRyYWNraW5nSW5mbyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBpZDogdGhpcy5tb2RlbC5pZAogICAgICAgIH07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAibW9kYWxQcm9kdWN0Q29uZmlnIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgdmFyIF90aGlzMTIgPSB0aGlzLAogICAgICAgICAgICBtb2RhbFByb2R1Y3RTdHlsZXM7CgogICAgICAgIHJldHVybiBtb2RhbFByb2R1Y3RTdHlsZXMgPSB0aGlzLmNvbmZpZy5wcm9kdWN0LnN0eWxlcyA/IG1lcmdlKHt9LCBPYmplY3Qua2V5cyh0aGlzLmNvbmZpZy5wcm9kdWN0LnN0eWxlcykucmVkdWNlKGZ1bmN0aW9uIChwcm9kdWN0U3R5bGVzLCBzZWxlY3RvcktleSkgewogICAgICAgICAgcmV0dXJuIHByb2R1Y3RTdHlsZXNbc2VsZWN0b3JLZXldID0gd2hpdGVsaXN0ZWRQcm9wZXJ0aWVzKF90aGlzMTIuY29uZmlnLnByb2R1Y3Quc3R5bGVzW3NlbGVjdG9yS2V5XSksIHByb2R1Y3RTdHlsZXM7CiAgICAgICAgfSwge30pLCB0aGlzLmNvbmZpZy5tb2RhbFByb2R1Y3Quc3R5bGVzKSA6IHt9LCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZy5tb2RhbFByb2R1Y3QsIHsKICAgICAgICAgIHN0eWxlczogbW9kYWxQcm9kdWN0U3R5bGVzCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAib25saW5lU3RvcmVQYXJhbXMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgY2hhbm5lbDogImJ1eV9idXR0b24iLAogICAgICAgICAgcmVmZXJyZXI6IGVuY29kZVVSSUNvbXBvbmVudCh3aW5kb3dVdGlsc19sb2NhdGlvbigpKSwKICAgICAgICAgIHZhcmlhbnQ6IGF0b2IodGhpcy5zZWxlY3RlZFZhcmlhbnQuaWQpLnNwbGl0KCIvIilbNF0KICAgICAgICB9OwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIm9ubGluZVN0b3JlUXVlcnlTdHJpbmciLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7CgogICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLm9ubGluZVN0b3JlUGFyYW1zKS5yZWR1Y2UoZnVuY3Rpb24gKHN0cmluZywga2V5KSB7CiAgICAgICAgICByZXR1cm4gIiIuY29uY2F0KHN0cmluZykuY29uY2F0KGtleSwgIj0iKS5jb25jYXQoX3RoaXMxMy5vbmxpbmVTdG9yZVBhcmFtc1trZXldLCAiJiIpOwogICAgICAgIH0sICI/Iik7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAib25saW5lU3RvcmVVUkwiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gIiIuY29uY2F0KHRoaXMubW9kZWwub25saW5lU3RvcmVVcmwpLmNvbmNhdCh0aGlzLm9ubGluZVN0b3JlUXVlcnlTdHJpbmcpOwogICAgICB9CiAgICB9XSksIFByb2R1Y3Q7CiAgfShDb21wb25lbnQpLAogICAgICBNb2RhbFZpZXcgPSBmdW5jdGlvbiAoX1ZpZXcpIHsKICAgIGZ1bmN0aW9uIE1vZGFsVmlldygpIHsKICAgICAgcmV0dXJuIF9WaWV3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpczsKICAgIH0KCiAgICBfaW5oZXJpdHNMb29zZShNb2RhbFZpZXcsIF9WaWV3KTsKCiAgICB2YXIgX3Byb3RvID0gTW9kYWxWaWV3LnByb3RvdHlwZTsKICAgIHJldHVybiBfcHJvdG8ud3JhcFRlbXBsYXRlID0gZnVuY3Rpb24gd3JhcFRlbXBsYXRlKGh0bWwpIHsKICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPSInLmNvbmNhdCh0aGlzLmNvbXBvbmVudC5jbGFzc2VzLm1vZGFsLm92ZXJsYXksICciPjxkaXYgY2xhc3M9IicpLmNvbmNhdCh0aGlzLmNvbXBvbmVudC5jbGFzc2VzLm1vZGFsLm1vZGFsLCAnIj4nKS5jb25jYXQoaHRtbCwgIjwvZGl2PjwvZGl2PiIpOwogICAgfSwgX3Byb3RvLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAodGhpcy5jb21wb25lbnQuaXNWaXNpYmxlID0gITEsIHRoaXMud3JhcHBlciAmJiB0aGlzLl9jbG9zZU9uQmdDbGljayAmJiB0aGlzLndyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLCB0aGlzLl9jbG9zZU9uQmdDbGljayksIHJlbW92ZUNsYXNzRnJvbUVsZW1lbnQoImlzLWFjdGl2ZSIsIHRoaXMud3JhcHBlciksIHJlbW92ZUNsYXNzRnJvbUVsZW1lbnQoImlzLWFjdGl2ZSIsIHRoaXMuZG9jdW1lbnQuYm9keSksIHJlbW92ZUNsYXNzRnJvbUVsZW1lbnQoInNob3BpZnktYnV5LW1vZGFsLWlzLWFjdGl2ZSIsIGRvY3VtZW50LmJvZHkpLCByZW1vdmVDbGFzc0Zyb21FbGVtZW50KCJzaG9waWZ5LWJ1eS1tb2RhbC1pcy1hY3RpdmUiLCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaHRtbCIpWzBdKSwgIXRoaXMuaWZyYW1lKSByZXR1cm4gcmVtb3ZlQ2xhc3NGcm9tRWxlbWVudCgiaXMtYWN0aXZlIiwgdGhpcy5jb21wb25lbnQubm9kZSksIHZvaWQgcmVtb3ZlQ2xhc3NGcm9tRWxlbWVudCgiaXMtYmxvY2siLCB0aGlzLmNvbXBvbmVudC5ub2RlKTsKICAgICAgdGhpcy5pZnJhbWUucmVtb3ZlQ2xhc3MoImlzLWJsb2NrIiksIHRoaXMuY29tcG9uZW50LnByb3BzLmJyb3dzZXJGZWF0dXJlcy50cmFuc2l0aW9uID8gdGhpcy5pZnJhbWUucGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoInRyYW5zaXRpb25lbmQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMuaWZyYW1lLnJlbW92ZUNsYXNzKCJpcy1hY3RpdmUiKTsKICAgICAgfSkgOiB0aGlzLmlmcmFtZS5yZW1vdmVDbGFzcygiaXMtYWN0aXZlIik7CiAgICB9LCBfcHJvdG8uZGVsZWdhdGVFdmVudHMgPSBmdW5jdGlvbiBkZWxlZ2F0ZUV2ZW50cygpIHsKICAgICAgX1ZpZXcucHJvdG90eXBlLmRlbGVnYXRlRXZlbnRzLmNhbGwodGhpcyksIHRoaXMuX2Nsb3NlT25CZ0NsaWNrID0gdGhpcy5jb21wb25lbnQuY2xvc2VPbkJnQ2xpY2suYmluZCh0aGlzLmNvbXBvbmVudCksIHRoaXMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHRoaXMuX2Nsb3NlT25CZ0NsaWNrKTsKICAgIH0sIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHRoaXMuY29tcG9uZW50LmlzVmlzaWJsZSAmJiAoX1ZpZXcucHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMpLCBhZGRDbGFzc1RvRWxlbWVudCgiaXMtYWN0aXZlIiwgdGhpcy5kb2N1bWVudC5ib2R5KSwgYWRkQ2xhc3NUb0VsZW1lbnQoInNob3BpZnktYnV5LW1vZGFsLWlzLWFjdGl2ZSIsIGRvY3VtZW50LmJvZHkpLCBhZGRDbGFzc1RvRWxlbWVudCgic2hvcGlmeS1idXktbW9kYWwtaXMtYWN0aXZlIiwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImh0bWwiKVswXSksIGFkZENsYXNzVG9FbGVtZW50KCJpcy1hY3RpdmUiLCB0aGlzLndyYXBwZXIpLCB0aGlzLmlmcmFtZSA/ICh0aGlzLmlmcmFtZS5hZGRDbGFzcygiaXMtYWN0aXZlIiksIHRoaXMuaWZyYW1lLmFkZENsYXNzKCJpcy1ibG9jayIpKSA6IChhZGRDbGFzc1RvRWxlbWVudCgiaXMtYWN0aXZlIiwgdGhpcy5jb21wb25lbnQubm9kZSksIGFkZENsYXNzVG9FbGVtZW50KCJpcy1ibG9jayIsIHRoaXMuY29tcG9uZW50Lm5vZGUpKSk7CiAgICB9LCBNb2RhbFZpZXc7CiAgfShWaWV3KSwKICAgICAgTW9kYWxVcGRhdGVyID0gZnVuY3Rpb24gKF9VcGRhdGVyKSB7CiAgICBmdW5jdGlvbiBNb2RhbFVwZGF0ZXIoKSB7CiAgICAgIHJldHVybiBfVXBkYXRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7CiAgICB9CgogICAgdmFyIF9wcm90bzsKCiAgICByZXR1cm4gX2luaGVyaXRzTG9vc2UoTW9kYWxVcGRhdGVyLCBfVXBkYXRlciksIE1vZGFsVXBkYXRlci5wcm90b3R5cGUudXBkYXRlQ29uZmlnID0gZnVuY3Rpb24gdXBkYXRlQ29uZmlnKGNvbmZpZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9VcGRhdGVyLnByb3RvdHlwZS51cGRhdGVDb25maWcuY2FsbCh0aGlzLCBjb25maWcpLCB0aGlzLmNvbXBvbmVudC5wcm9kdWN0ID0gbmV3IFByb2R1Y3QkMSh0aGlzLmNvbXBvbmVudC5wcm9kdWN0Q29uZmlnLCB0aGlzLmNvbXBvbmVudC5wcm9wcyksIHRoaXMuY29tcG9uZW50LnByb2R1Y3QuaW5pdCh0aGlzLmNvbXBvbmVudC5tb2RlbCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLmNvbXBvbmVudC52aWV3LnJlc2l6ZSgpOwogICAgICB9KTsKICAgIH0sIE1vZGFsVXBkYXRlcjsKICB9KFVwZGF0ZXIpLAogICAgICBNb2RhbCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgICBmdW5jdGlvbiBNb2RhbChjb25maWcsIHByb3BzKSB7CiAgICAgIHZhciBfdGhpczsKCiAgICAgIHJldHVybiAoX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgY29uZmlnLCBwcm9wcykgfHwgdGhpcykudHlwZUtleSA9ICJtb2RhbCIsIF90aGlzLm5vZGUgPSBjb25maWcubm9kZSA/IGNvbmZpZy5ub2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKSA6IGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikpLCBfdGhpcy5ub2RlLmNsYXNzTmFtZSA9ICJzaG9waWZ5LWJ1eS1tb2RhbC13cmFwcGVyIiwgX3RoaXMucHJvZHVjdCA9IG51bGwsIF90aGlzLnVwZGF0ZXIgPSBuZXcgTW9kYWxVcGRhdGVyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgX3RoaXMudmlldyA9IG5ldyBNb2RhbFZpZXcoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBfdGhpczsKICAgIH0KCiAgICBfaW5oZXJpdHNMb29zZShNb2RhbCwgX0NvbXBvbmVudCk7CgogICAgdmFyIF9wcm90byA9IE1vZGFsLnByb3RvdHlwZTsKICAgIHJldHVybiBfcHJvdG8uY2xvc2VPbkJnQ2xpY2sgPSBmdW5jdGlvbiBjbG9zZU9uQmdDbGljayhldnQpIHsKICAgICAgdGhpcy5wcm9kdWN0V3JhcHBlci5jb250YWlucyhldnQudGFyZ2V0KSB8fCB0aGlzLnByb3BzLmNsb3NlTW9kYWwoKTsKICAgIH0sIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdChkYXRhKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIHRoaXMuaXNWaXNpYmxlID0gITAsIF9Db21wb25lbnQucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzLCBkYXRhKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLnByb2R1Y3RXcmFwcGVyID0gX3RoaXMyLnZpZXcud3JhcHBlci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKF90aGlzMi5jbGFzc2VzLm1vZGFsLm1vZGFsKVswXSwgX3RoaXMyLnByb2R1Y3QgPSBuZXcgUHJvZHVjdCQxKF90aGlzMi5wcm9kdWN0Q29uZmlnLCBfdGhpczIucHJvcHMpLCBfdGhpczIucHJvZHVjdC5pbml0KF90aGlzMi5tb2RlbCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnZpZXcuc2V0Rm9jdXMoKSwgX3RoaXMyLnZpZXcucmVzaXplKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgIHRoaXMuX3VzZXJFdmVudCgiY2xvc2VNb2RhbCIpLCB0aGlzLnZpZXcuY2xvc2UoKTsKICAgIH0sIF9jcmVhdGVDbGFzcyhNb2RhbCwgW3sKICAgICAga2V5OiAiRE9NRXZlbnRzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgImNsaWNrICIuY29uY2F0KHRoaXMuc2VsZWN0b3JzLm1vZGFsLmNsb3NlKSwgdGhpcy5wcm9wcy5jbG9zZU1vZGFsLmJpbmQodGhpcykpLCB0aGlzLm9wdGlvbnMuRE9NRXZlbnRzKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJwcm9kdWN0Q29uZmlnIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZ2xvYmFsQ29uZmlnLCB7CiAgICAgICAgICBub2RlOiB0aGlzLnByb2R1Y3RXcmFwcGVyLAogICAgICAgICAgb3B0aW9uczogbWVyZ2Uoe30sIHRoaXMuY29uZmlnKQogICAgICAgIH0pOwogICAgICB9CiAgICB9XSksIE1vZGFsOwogIH0oQ29tcG9uZW50KSwKICAgICAgUHJvZHVjdFNldFVwZGF0ZXIgPSBmdW5jdGlvbiAoX1VwZGF0ZXIpIHsKICAgIGZ1bmN0aW9uIFByb2R1Y3RTZXRVcGRhdGVyKCkgewogICAgICByZXR1cm4gX1VwZGF0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzOwogICAgfQoKICAgIHZhciBfcHJvdG87CgogICAgcmV0dXJuIF9pbmhlcml0c0xvb3NlKFByb2R1Y3RTZXRVcGRhdGVyLCBfVXBkYXRlciksIFByb2R1Y3RTZXRVcGRhdGVyLnByb3RvdHlwZS51cGRhdGVDb25maWcgPSBmdW5jdGlvbiB1cGRhdGVDb25maWcoY29uZmlnKSB7CiAgICAgIF9VcGRhdGVyLnByb3RvdHlwZS51cGRhdGVDb25maWcuY2FsbCh0aGlzLCBjb25maWcpLCB0aGlzLmNvbXBvbmVudC5wcm9kdWN0c1swXS51cGRhdGVDb25maWcoewogICAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZy5vcHRpb25zKQogICAgICB9KSwgdGhpcy5jb21wb25lbnQuY2FydC51cGRhdGVDb25maWcoY29uZmlnKSwgdGhpcy5jb21wb25lbnQucmVuZGVyUHJvZHVjdHMoKTsKICAgIH0sIFByb2R1Y3RTZXRVcGRhdGVyOwogIH0oVXBkYXRlciksCiAgICAgIHBvbGxJbnRlcnZhbCA9IDIwMCwKICAgICAgUHJvZHVjdFNldFZpZXcgPSBmdW5jdGlvbiAoX1ZpZXcpIHsKICAgIGZ1bmN0aW9uIFByb2R1Y3RTZXRWaWV3KGNvbXBvbmVudCkgewogICAgICB2YXIgX3RoaXM7CgogICAgICByZXR1cm4gKF90aGlzID0gX1ZpZXcuY2FsbCh0aGlzLCBjb21wb25lbnQpIHx8IHRoaXMpLmhlaWdodCA9IDAsIF90aGlzLnJlc2l6ZUNvbXBsZXRlZCA9ICExLCBfdGhpczsKICAgIH0KCiAgICBfaW5oZXJpdHNMb29zZShQcm9kdWN0U2V0VmlldywgX1ZpZXcpOwoKICAgIHZhciBfcHJvdG8gPSBQcm9kdWN0U2V0Vmlldy5wcm90b3R5cGU7CiAgICByZXR1cm4gX3Byb3RvLndyYXBUZW1wbGF0ZSA9IGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZShodG1sKSB7CiAgICAgIHJldHVybiAnPGRpdiBjbGFzcz0iJy5jb25jYXQodGhpcy5jb21wb25lbnQuY2xhc3Nlcy5wcm9kdWN0U2V0LnByb2R1Y3RTZXQsICciPicpLmNvbmNhdChodG1sLCAiPC9kaXY+Iik7CiAgICB9LCBfcHJvdG8ucmVzaXplVW50aWxGaXRzID0gZnVuY3Rpb24gcmVzaXplVW50aWxGaXRzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmlmcmFtZSAmJiAhdGhpcy5yZXNpemVDb21wbGV0ZWQpIHsKICAgICAgICB2YXIgbWF4UmVzaXplcyA9IHRoaXMuY29tcG9uZW50LnByb2R1Y3RzLmxlbmd0aCwKICAgICAgICAgICAgcmVzaXplcyA9IDA7CiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm91dGVySGVpZ2h0LCB0aGlzLnJlc2l6ZSgpOwogICAgICAgIHZhciBwcm9kdWN0U2V0UmVzaXplID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGN1cnJlbnRIZWlnaHQgPSBfdGhpczIub3V0ZXJIZWlnaHQ7CiAgICAgICAgICBwYXJzZUludChjdXJyZW50SGVpZ2h0LCAxMCkgPiBwYXJzZUludChfdGhpczIuaGVpZ2h0LCAxMCkgJiYgKHJlc2l6ZXMrKywgX3RoaXMyLmhlaWdodCA9IGN1cnJlbnRIZWlnaHQsIF90aGlzMi5yZXNpemUoY3VycmVudEhlaWdodCkpLCByZXNpemVzID4gbWF4UmVzaXplcyAmJiAoX3RoaXMyLnJlc2l6ZUNvbXBsZXRlZCA9ICEwLCBjbGVhckludGVydmFsKHByb2R1Y3RTZXRSZXNpemUpKTsKICAgICAgICB9LCAyMDApOwogICAgICB9CiAgICB9LCBfY3JlYXRlQ2xhc3MoUHJvZHVjdFNldFZpZXcsIFt7CiAgICAgIGtleTogInNob3VsZFJlc2l6ZVkiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gITA7CiAgICAgIH0KICAgIH1dKSwgUHJvZHVjdFNldFZpZXc7CiAgfShWaWV3KTsKCiAgZnVuY3Rpb24gaXNBcnJheSQxKGFyZykgewogICAgcmV0dXJuICJbb2JqZWN0IEFycmF5XSIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpOwogIH0KCiAgdmFyIFByb2R1Y3RTZXQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogICAgZnVuY3Rpb24gUHJvZHVjdFNldChjb25maWcsIHByb3BzKSB7CiAgICAgIHZhciBfdGhpczsKCiAgICAgIHJldHVybiBjb25maWcgPSBBcnJheS5pc0FycmF5KGNvbmZpZy5pZCkgPyBub3JtYWxpemVDb25maWcoY29uZmlnKSA6IG5vcm1hbGl6ZUNvbmZpZyhjb25maWcsICJDb2xsZWN0aW9uIiksIChfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBjb25maWcsIHByb3BzKSB8fCB0aGlzKS50eXBlS2V5ID0gInByb2R1Y3RTZXQiLCBfdGhpcy5wcm9kdWN0cyA9IFtdLCBfdGhpcy5jYXJ0ID0gbnVsbCwgX3RoaXMucGFnZSA9IDEsIF90aGlzLm5leHRNb2RlbCA9IHsKICAgICAgICBwcm9kdWN0czogW10KICAgICAgfSwgX3RoaXMudXBkYXRlciA9IG5ldyBQcm9kdWN0U2V0VXBkYXRlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIF90aGlzLnZpZXcgPSBuZXcgUHJvZHVjdFNldFZpZXcoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBfdGhpczsKICAgIH0KCiAgICBfaW5oZXJpdHNMb29zZShQcm9kdWN0U2V0LCBfQ29tcG9uZW50KTsKCiAgICB2YXIgX3Byb3RvID0gUHJvZHVjdFNldC5wcm90b3R5cGU7CiAgICByZXR1cm4gX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KGRhdGEpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXMsCiAgICAgICAgICBjYXJ0Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5nbG9iYWxDb25maWcsIHsKICAgICAgICBub2RlOiB0aGlzLmdsb2JhbENvbmZpZy5jYXJ0Tm9kZSwKICAgICAgICBvcHRpb25zOiB0aGlzLmNvbmZpZwogICAgICB9KTsKCiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNyZWF0ZUNhcnQoY2FydENvbmZpZykudGhlbihmdW5jdGlvbiAoY2FydCkgewogICAgICAgIHJldHVybiBfdGhpczIuY2FydCA9IGNhcnQsIF9Db21wb25lbnQucHJvdG90eXBlLmluaXQuY2FsbChfdGhpczIsIGRhdGEpLnRoZW4oZnVuY3Rpb24gKG1vZGVsKSB7CiAgICAgICAgICByZXR1cm4gbW9kZWwgPyBfdGhpczIucmVuZGVyUHJvZHVjdHMoX3RoaXMyLm1vZGVsLnByb2R1Y3RzKSA6IF90aGlzMjsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LCBfcHJvdG8uc2RrRmV0Y2ggPSBmdW5jdGlvbiBzZGtGZXRjaCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXMsCiAgICAgICAgICBwcm9taXNlOwoKICAgICAgcmV0dXJuIHRoaXMuc3RvcmVmcm9udElkID8gcHJvbWlzZSA9IEFycmF5LmlzQXJyYXkodGhpcy5zdG9yZWZyb250SWQpID8gdGhpcy5wcm9wcy5jbGllbnQucHJvZHVjdC5mZXRjaE11bHRpcGxlKHRoaXMuc3RvcmVmcm9udElkKSA6IHRoaXMucHJvcHMuY2xpZW50LmNvbGxlY3Rpb24uZmV0Y2hXaXRoUHJvZHVjdHModGhpcy5zdG9yZWZyb250SWQpIDogdGhpcy5oYW5kbGUgJiYgKHByb21pc2UgPSB0aGlzLnByb3BzLmNsaWVudC5jb2xsZWN0aW9uLmZldGNoQnlIYW5kbGUodGhpcy5oYW5kbGUpLnRoZW4oZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gX3RoaXMzLnN0b3JlZnJvbnRJZCA9IGNvbGxlY3Rpb24uaWQsIF90aGlzMy5wcm9wcy5jbGllbnQuY29sbGVjdGlvbi5mZXRjaFdpdGhQcm9kdWN0cyhfdGhpczMuc3RvcmVmcm9udElkKTsKICAgICAgfSkpLCBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGNvbGxlY3Rpb25PclByb2R1Y3RzKSB7CiAgICAgICAgdmFyIHByb2R1Y3RzOwogICAgICAgIHJldHVybiBwcm9kdWN0cyA9IEFycmF5LmlzQXJyYXkoY29sbGVjdGlvbk9yUHJvZHVjdHMpID8gY29sbGVjdGlvbk9yUHJvZHVjdHMgOiBjb2xsZWN0aW9uT3JQcm9kdWN0cy5wcm9kdWN0czsKICAgICAgfSk7CiAgICB9LCBfcHJvdG8uZmV0Y2hEYXRhID0gZnVuY3Rpb24gZmV0Y2hEYXRhKCkgewogICAgICByZXR1cm4gdGhpcy5zZGtGZXRjaCgpLnRoZW4oZnVuY3Rpb24gKHByb2R1Y3RzKSB7CiAgICAgICAgaWYgKHByb2R1Y3RzLmxlbmd0aCkgcmV0dXJuIHsKICAgICAgICAgIHByb2R1Y3RzOiBwcm9kdWN0cwogICAgICAgIH07CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJOb3QgRm91bmQiKTsKICAgICAgfSk7CiAgICB9LCBfcHJvdG8uc2hvd1BhZ2luYXRpb24gPSBmdW5jdGlvbiBzaG93UGFnaW5hdGlvbigpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5wcm9wcy5jbGllbnQuZmV0Y2hOZXh0UGFnZSh0aGlzLm1vZGVsLnByb2R1Y3RzKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgX3RoaXM0Lm5leHRNb2RlbCA9IHsKICAgICAgICAgIHByb2R1Y3RzOiBkYXRhLm1vZGVsCiAgICAgICAgfSwgX3RoaXM0LnZpZXcucmVuZGVyQ2hpbGQoX3RoaXM0LmNsYXNzZXMucHJvZHVjdFNldC5wYWdpbmF0aW9uQnV0dG9uLCBfdGhpczQucGFnaW5hdGlvblRlbXBsYXRlKSwgX3RoaXM0LnZpZXcucmVzaXplKCk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLm5leHRQYWdlID0gZnVuY3Rpb24gbmV4dFBhZ2UoKSB7CiAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm5leHRNb2RlbCwgdGhpcy5fdXNlckV2ZW50KCJsb2FkTmV4dFBhZ2UiKSwgdGhpcy5yZW5kZXJQcm9kdWN0cygpOwogICAgfSwgX3Byb3RvLnJlbmRlclByb2R1Y3RzID0gZnVuY3Rpb24gcmVuZGVyUHJvZHVjdHMoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLm1vZGVsLnByb2R1Y3RzLmxlbmd0aCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgICB2YXIgcHJvZHVjdENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZ2xvYmFsQ29uZmlnLCB7CiAgICAgICAgbm9kZTogdGhpcy52aWV3LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi4iLmNvbmNhdCh0aGlzLmNsYXNzZXMucHJvZHVjdFNldC5wcm9kdWN0cykpLAogICAgICAgIG9wdGlvbnM6IG1lcmdlKHt9LCB0aGlzLmNvbmZpZywgewogICAgICAgICAgcHJvZHVjdDogewogICAgICAgICAgICBpZnJhbWU6ICExLAogICAgICAgICAgICBjbGFzc2VzOiB7CiAgICAgICAgICAgICAgd3JhcHBlcjogdGhpcy5jbGFzc2VzLnByb2R1Y3RTZXQucHJvZHVjdAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgfSk7CiAgICAgICExID09PSB0aGlzLmNvbmZpZy5wcm9kdWN0U2V0LmlmcmFtZSAmJiAocHJvZHVjdENvbmZpZy5ub2RlID0gdGhpcy5ub2RlLnF1ZXJ5U2VsZWN0b3IoIi4iLmNvbmNhdCh0aGlzLmNsYXNzZXMucHJvZHVjdFNldC5wcm9kdWN0cykpKTsKICAgICAgdmFyIHByb21pc2VzID0gdGhpcy5tb2RlbC5wcm9kdWN0cy5tYXAoZnVuY3Rpb24gKHByb2R1Y3RNb2RlbCkgewogICAgICAgIHZhciBwcm9kdWN0ID0gbmV3IFByb2R1Y3QkMShwcm9kdWN0Q29uZmlnLCBfdGhpczUucHJvcHMpOwogICAgICAgIHJldHVybiBfdGhpczUucHJvZHVjdHMucHVzaChwcm9kdWN0KSwgcHJvZHVjdC5pbml0KHByb2R1Y3RNb2RlbCk7CiAgICAgIH0pOwogICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNS52aWV3LnJlc2l6ZVVudGlsRml0cygpOwoKICAgICAgICB2YXIgaGFzUGFnaW5hdGlvbiA9IF90aGlzNS5tb2RlbC5wcm9kdWN0c1swXS5oYXNPd25Qcm9wZXJ0eSgiaGFzTmV4dFBhZ2UiKTsKCiAgICAgICAgcmV0dXJuIF90aGlzNS5vcHRpb25zLmNvbnRlbnRzLnBhZ2luYXRpb24gJiYgaGFzUGFnaW5hdGlvbiAmJiBfdGhpczUuc2hvd1BhZ2luYXRpb24oKSwgX3RoaXM1OwogICAgICB9KTsKICAgIH0sIF9jcmVhdGVDbGFzcyhQcm9kdWN0U2V0LCBbewogICAgICBrZXk6ICJuZXh0QnV0dG9uQ2xhc3MiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5uZXh0TW9kZWwucHJvZHVjdHMubGVuZ3RoID8gImlzLWFjdGl2ZSIgOiAiIjsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJ2aWV3RGF0YSIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMudmlld0RhdGEsIHsKICAgICAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcywKICAgICAgICAgIHRleHQ6IHRoaXMub3B0aW9ucy50ZXh0LAogICAgICAgICAgbmV4dEJ1dHRvbkNsYXNzOiB0aGlzLm5leHRCdXR0b25DbGFzcwogICAgICAgIH0pOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIkRPTUV2ZW50cyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmaW5lUHJvcGVydHkoewogICAgICAgICAgY2xpY2s6IHRoaXMucHJvcHMuY2xvc2VDYXJ0LmJpbmQodGhpcykKICAgICAgICB9LCAiY2xpY2sgIi5jb25jYXQodGhpcy5zZWxlY3RvcnMucHJvZHVjdFNldC5wYWdpbmF0aW9uQnV0dG9uKSwgdGhpcy5uZXh0UGFnZS5iaW5kKHRoaXMpKSwgdGhpcy5vcHRpb25zLkRPTUV2ZW50cyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAicGFnaW5hdGlvblRlbXBsYXRlIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZ2luYXRpb25UZW1wbGF0ZSA9IHRoaXMuX3BhZ2luYXRpb25UZW1wbGF0ZSB8fCBuZXcgVGVtcGxhdGUoewogICAgICAgICAgcGFnaW5hdGlvbjogdGhpcy5vcHRpb25zLnRlbXBsYXRlcy5wYWdpbmF0aW9uCiAgICAgICAgfSwgewogICAgICAgICAgcGFnaW5hdGlvbjogITAKICAgICAgICB9LCBbInBhZ2luYXRpb24iXSksIHRoaXMuX3BhZ2luYXRpb25UZW1wbGF0ZTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJ0cmFja2luZ0luZm8iLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgY29udGVudHMgPSB0aGlzLmNvbmZpZy5wcm9kdWN0LmNvbnRlbnRzLAogICAgICAgICAgICBjb250ZW50U3RyaW5nID0gT2JqZWN0LmtleXMoY29udGVudHMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICByZXR1cm4gY29udGVudHNba2V5XTsKICAgICAgICB9KS50b1N0cmluZygpLAogICAgICAgICAgICBjb25maWcgPSB7CiAgICAgICAgICBkZXN0aW5hdGlvbjogdGhpcy5jb25maWcucHJvZHVjdC5idXR0b25EZXN0aW5hdGlvbiwKICAgICAgICAgIGxheW91dDogdGhpcy5jb25maWcucHJvZHVjdC5sYXlvdXQsCiAgICAgICAgICBjb250ZW50czogY29udGVudFN0cmluZywKICAgICAgICAgIGNoZWNrb3V0UG9wdXA6IHRoaXMuY29uZmlnLmNhcnQucG9wdXAKICAgICAgICB9OwogICAgICAgIHJldHVybiBpc0FycmF5JDEodGhpcy5pZCkgPyB0aGlzLm1vZGVsLnByb2R1Y3RzLm1hcChmdW5jdGlvbiAocHJvZHVjdCkgewogICAgICAgICAgdmFyIHZhcmlhbnQgPSBwcm9kdWN0LnZhcmlhbnRzWzBdOwogICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZywgewogICAgICAgICAgICBpZDogcHJvZHVjdC5pZCwKICAgICAgICAgICAgbmFtZTogcHJvZHVjdC50aXRsZSwKICAgICAgICAgICAgdmFyaWFudElkOiB2YXJpYW50LmlkLAogICAgICAgICAgICB2YXJpYW50TmFtZTogdmFyaWFudC50aXRsZSwKICAgICAgICAgICAgcHJpY2U6IHZhcmlhbnQucHJpY2VWMi5hbW91bnQsCiAgICAgICAgICAgIHNrdTogbnVsbCwKICAgICAgICAgICAgaXNQcm9kdWN0U2V0OiAhMAogICAgICAgICAgfSk7CiAgICAgICAgfSkgOiBPYmplY3QuYXNzaWduKGNvbmZpZywgewogICAgICAgICAgaWQ6IHRoaXMuc3RvcmVmcm9udElkCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH1dKSwgUHJvZHVjdFNldDsKICB9KENvbXBvbmVudCksCiAgICAgIEVOVEVSX0tFWSQxID0gMTMsCiAgICAgIFRvZ2dsZVZpZXcgPSBmdW5jdGlvbiAoX1ZpZXcpIHsKICAgIGZ1bmN0aW9uIFRvZ2dsZVZpZXcoKSB7CiAgICAgIHJldHVybiBfVmlldy5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7CiAgICB9CgogICAgX2luaGVyaXRzTG9vc2UoVG9nZ2xlVmlldywgX1ZpZXcpOwoKICAgIHZhciBfcHJvdG8gPSBUb2dnbGVWaWV3LnByb3RvdHlwZTsKICAgIHJldHVybiBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICBfVmlldy5wcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcyksIHRoaXMuY29tcG9uZW50Lm9wdGlvbnMuc3RpY2t5ICYmIHRoaXMuYWRkQ2xhc3MoImlzLXN0aWNreSIpLCB0aGlzLmlzVmlzaWJsZSA/IHRoaXMuYWRkQ2xhc3MoImlzLWFjdGl2ZSIpIDogdGhpcy5yZW1vdmVDbGFzcygiaXMtYWN0aXZlIiksIHRoaXMuaWZyYW1lICYmICh0aGlzLmlmcmFtZS5wYXJlbnQuc2V0QXR0cmlidXRlKCJ0YWJpbmRleCIsIDApLCB0aGlzLmlmcmFtZS5wYXJlbnQuc2V0QXR0cmlidXRlKCJyb2xlIiwgImJ1dHRvbiIpLCB0aGlzLmlmcmFtZS5wYXJlbnQuc2V0QXR0cmlidXRlKCJhcmlhLWxhYmVsIiwgdGhpcy5jb21wb25lbnQub3B0aW9ucy50ZXh0LnRpdGxlKSwgdGhpcy5yZXNpemUoKSk7CiAgICB9LCBfcHJvdG8uZGVsZWdhdGVFdmVudHMgPSBmdW5jdGlvbiBkZWxlZ2F0ZUV2ZW50cygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF9WaWV3LnByb3RvdHlwZS5kZWxlZ2F0ZUV2ZW50cy5jYWxsKHRoaXMpLCB0aGlzLmlmcmFtZSAmJiB0aGlzLmlmcmFtZS5wYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAxMyA9PT0gZXZ0LmtleUNvZGUgJiYgX3RoaXMuY29tcG9uZW50LnByb3BzLmNhcnQudG9nZ2xlVmlzaWJpbGl0eShfdGhpcy5jb21wb25lbnQucHJvcHMuY2FydCk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLndyYXBUZW1wbGF0ZSA9IGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZShodG1sKSB7CiAgICAgIHJldHVybiAnPGRpdiBjbGFzcz0iJy5jb25jYXQodGhpcy5zdGlja3lDbGFzcywgIiAiKS5jb25jYXQodGhpcy5jb21wb25lbnQuY2xhc3Nlcy50b2dnbGUudG9nZ2xlLCAnIj5cbiAgICAgICcpLmNvbmNhdChodG1sLCAiXG4gICAgICAiKS5jb25jYXQodGhpcy5yZWFkYWJsZUxhYmVsLCAiXG4gICAgPC9kaXY+Iik7CiAgICB9LCBfcHJvdG8uX3Jlc2l6ZVggPSBmdW5jdGlvbiBfcmVzaXplWCgpIHsKICAgICAgdGhpcy5pZnJhbWUuZWwuc3R5bGUud2lkdGggPSAiIi5jb25jYXQodGhpcy53cmFwcGVyLmNsaWVudFdpZHRoLCAicHgiKTsKICAgIH0sIF9jcmVhdGVDbGFzcyhUb2dnbGVWaWV3LCBbewogICAgICBrZXk6ICJzaG91bGRSZXNpemVZIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuICEwOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInNob3VsZFJlc2l6ZVgiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gITA7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiaXNWaXNpYmxlIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmNvdW50ID4gMDsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzdGlja3lDbGFzcyIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vcHRpb25zLnN0aWNreSA/ICJpcy1zdGlja3kiIDogImlzLWlubGluZSI7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAib3V0ZXJIZWlnaHQiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gIiIuY29uY2F0KHRoaXMud3JhcHBlci5jbGllbnRIZWlnaHQsICJweCIpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInJlYWRhYmxlTGFiZWwiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub3B0aW9ucy5jb250ZW50cy50aXRsZSA/ICIiIDogJzxwIGNsYXNzPSJzaG9waWZ5LWJ1eS0tdmlzdWFsbHktaGlkZGVuIj4nLmNvbmNhdCh0aGlzLmNvbXBvbmVudC5vcHRpb25zLnRleHQudGl0bGUsICI8L3A+Iik7CiAgICAgIH0KICAgIH1dKSwgVG9nZ2xlVmlldzsKICB9KFZpZXcpLAogICAgICBDYXJ0VG9nZ2xlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICAgIGZ1bmN0aW9uIENhcnRUb2dnbGUoY29uZmlnLCBwcm9wcykgewogICAgICB2YXIgX3RoaXM7CgogICAgICByZXR1cm4gKF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIGNvbmZpZywgcHJvcHMpIHx8IHRoaXMpLnR5cGVLZXkgPSAidG9nZ2xlIiwgX3RoaXMubm9kZSA9IGNvbmZpZy5ub2RlIHx8IF90aGlzLnByb3BzLmNhcnQubm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwgX3RoaXMucHJvcHMuY2FydC5ub2RlKSwgX3RoaXMudmlldyA9IG5ldyBUb2dnbGVWaWV3KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgX3RoaXM7CiAgICB9CgogICAgdmFyIF9wcm90bzsKCiAgICByZXR1cm4gX2luaGVyaXRzTG9vc2UoQ2FydFRvZ2dsZSwgX0NvbXBvbmVudCksIENhcnRUb2dnbGUucHJvdG90eXBlLnRvZ2dsZUNhcnQgPSBmdW5jdGlvbiB0b2dnbGVDYXJ0KGV2dCkgewogICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCksIHRoaXMucHJvcHMuY2FydC50b2dnbGVWaXNpYmlsaXR5KCk7CiAgICB9LCBfY3JlYXRlQ2xhc3MoQ2FydFRvZ2dsZSwgW3sKICAgICAga2V5OiAiY291bnQiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jYXJ0Lm1vZGVsID8gdGhpcy5wcm9wcy5jYXJ0Lm1vZGVsLmxpbmVJdGVtcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbGluZUl0ZW0pIHsKICAgICAgICAgIHJldHVybiBhY2MgKyBsaW5lSXRlbS5xdWFudGl0eTsKICAgICAgICB9LCAwKSA6IDA7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAidmlld0RhdGEiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zLnZpZXdEYXRhLCB7CiAgICAgICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsCiAgICAgICAgICB0ZXh0OiB0aGlzLm9wdGlvbnMudGV4dCwKICAgICAgICAgIGNvdW50OiB0aGlzLmNvdW50CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiRE9NRXZlbnRzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIG1lcmdlKHt9LCB7CiAgICAgICAgICBjbGljazogdGhpcy50b2dnbGVDYXJ0LmJpbmQodGhpcykKICAgICAgICB9LCB0aGlzLm9wdGlvbnMuRE9NRXZlbnRzKTsKICAgICAgfQogICAgfV0pLCBDYXJ0VG9nZ2xlOwogIH0oQ29tcG9uZW50KSwKICAgICAgQ2FydFZpZXcgPSBmdW5jdGlvbiAoX1ZpZXcpIHsKICAgIGZ1bmN0aW9uIENhcnRWaWV3KGNvbXBvbmVudCkgewogICAgICB2YXIgX3RoaXM7CgogICAgICByZXR1cm4gKF90aGlzID0gX1ZpZXcuY2FsbCh0aGlzLCBjb21wb25lbnQpIHx8IHRoaXMpLm5vZGUuY2xhc3NOYW1lID0gInNob3BpZnktYnV5LWNhcnQtd3JhcHBlciIsIF90aGlzOwogICAgfQoKICAgIF9pbmhlcml0c0xvb3NlKENhcnRWaWV3LCBfVmlldyk7CgogICAgdmFyIF9wcm90byA9IENhcnRWaWV3LnByb3RvdHlwZTsKICAgIHJldHVybiBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICBfVmlldy5wcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcyksIHRoaXMuY29tcG9uZW50LmlzVmlzaWJsZSA/ICh0aGlzLmFkZENsYXNzKCJpcy1hY3RpdmUiKSwgdGhpcy5hZGRDbGFzcygiaXMtaW5pdGlhbGl6ZWQiKSkgOiB0aGlzLnJlbW92ZUNsYXNzKCJpcy1hY3RpdmUiKTsKICAgIH0sIF9wcm90by53cmFwVGVtcGxhdGUgPSBmdW5jdGlvbiB3cmFwVGVtcGxhdGUoaHRtbCkgewogICAgICByZXR1cm4gJzxkaXYgY2xhc3M9IicuY29uY2F0KHRoaXMuY29tcG9uZW50LmNsYXNzZXMuY2FydC5jYXJ0LCAnIj4nKS5jb25jYXQoaHRtbCwgIjwvZGl2PiIpOwogICAgfSwgX2NyZWF0ZUNsYXNzKENhcnRWaWV3LCBbewogICAgICBrZXk6ICJ3cmFwcGVyQ2xhc3MiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuaXNWaXNpYmxlID8gImlzLWFjdGl2ZSIgOiAiIjsKICAgICAgfQogICAgfV0pLCBDYXJ0VmlldzsKICB9KFZpZXcpLAogICAgICBDYXJ0VXBkYXRlciA9IGZ1bmN0aW9uIChfVXBkYXRlcikgewogICAgZnVuY3Rpb24gQ2FydFVwZGF0ZXIoKSB7CiAgICAgIHJldHVybiBfVXBkYXRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7CiAgICB9CgogICAgdmFyIF9wcm90bzsKCiAgICByZXR1cm4gX2luaGVyaXRzTG9vc2UoQ2FydFVwZGF0ZXIsIF9VcGRhdGVyKSwgQ2FydFVwZGF0ZXIucHJvdG90eXBlLnVwZGF0ZUNvbmZpZyA9IGZ1bmN0aW9uIHVwZGF0ZUNvbmZpZyhjb25maWcpIHsKICAgICAgX1VwZGF0ZXIucHJvdG90eXBlLnVwZGF0ZUNvbmZpZy5jYWxsKHRoaXMsIGNvbmZpZyksIHRoaXMuY29tcG9uZW50LnRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbiAodG9nZ2xlKSB7CiAgICAgICAgcmV0dXJuIHRvZ2dsZS51cGRhdGVDb25maWcoY29uZmlnKTsKICAgICAgfSk7CiAgICB9LCBDYXJ0VXBkYXRlcjsKICB9KFVwZGF0ZXIpLAogICAgICBOT19JTUdfVVJMID0gIi8vc2Rrcy5zaG9waWZ5Y2RuLmNvbS9idXktYnV0dG9uL2xhdGVzdC9uby1pbWFnZS5qcGciLAogICAgICBMSU5FX0lURU1fVEFSR0VUX1NFTEVDVElPTlMgPSBbIkVOVElUTEVEIiwgIkVYUExJQ0lUIl0sCiAgICAgIENBUlRfVEFSR0VUX1NFTEVDVElPTiA9ICJBTEwiLAogICAgICBDYXJ0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICAgIGZ1bmN0aW9uIENhcnQoY29uZmlnLCBwcm9wcykgewogICAgICB2YXIgX3RoaXM7CgogICAgICAoX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgY29uZmlnLCBwcm9wcykgfHwgdGhpcykuYWRkVmFyaWFudFRvQ2FydCA9IF90aGlzLmFkZFZhcmlhbnRUb0NhcnQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIF90aGlzLmNoaWxkVGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoX3RoaXMuY29uZmlnLmxpbmVJdGVtLnRlbXBsYXRlcywgX3RoaXMuY29uZmlnLmxpbmVJdGVtLmNvbnRlbnRzLCBfdGhpcy5jb25maWcubGluZUl0ZW0ub3JkZXIpLCBfdGhpcy5ub2RlID0gY29uZmlnLm5vZGUgfHwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSksIF90aGlzLmlzVmlzaWJsZSA9IF90aGlzLm9wdGlvbnMuc3RhcnRPcGVuLCBfdGhpcy5saW5lSXRlbUNhY2hlID0gW10sIF90aGlzLm1vbmV5Rm9ybWF0ID0gX3RoaXMuZ2xvYmFsQ29uZmlnLm1vbmV5Rm9ybWF0LCBfdGhpcy5jaGVja291dCA9IG5ldyBDaGVja291dE5hdmlnYXRvcihfdGhpcy5jb25maWcpOwogICAgICB2YXIgdG9nZ2xlcyA9IF90aGlzLmdsb2JhbENvbmZpZy50b2dnbGVzIHx8IFt7CiAgICAgICAgbm9kZTogX3RoaXMubm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwgX3RoaXMubm9kZSkKICAgICAgfV07CiAgICAgIHJldHVybiBfdGhpcy50b2dnbGVzID0gdG9nZ2xlcy5tYXAoZnVuY3Rpb24gKHRvZ2dsZSkgewogICAgICAgIHJldHVybiBuZXcgQ2FydFRvZ2dsZShtZXJnZSh7fSwgY29uZmlnLCB0b2dnbGUpLCBPYmplY3QuYXNzaWduKHt9LCBfdGhpcy5wcm9wcywgewogICAgICAgICAgY2FydDogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykKICAgICAgICB9KSk7CiAgICAgIH0pLCBfdGhpcy51cGRhdGVyID0gbmV3IENhcnRVcGRhdGVyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgX3RoaXMudmlldyA9IG5ldyBDYXJ0VmlldyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIF90aGlzOwogICAgfQoKICAgIF9pbmhlcml0c0xvb3NlKENhcnQsIF9Db21wb25lbnQpOwoKICAgIHZhciBfcHJvdG8gPSBDYXJ0LnByb3RvdHlwZTsKICAgIHJldHVybiBfcHJvdG8uY3JlYXRlVG9nZ2xlcyA9IGZ1bmN0aW9uIGNyZWF0ZVRvZ2dsZXMoY29uZmlnKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlcyA9IHRoaXMudG9nZ2xlcy5jb25jYXQoY29uZmlnLnRvZ2dsZXMubWFwKGZ1bmN0aW9uICh0b2dnbGUpIHsKICAgICAgICByZXR1cm4gbmV3IENhcnRUb2dnbGUobWVyZ2Uoe30sIGNvbmZpZywgdG9nZ2xlKSwgT2JqZWN0LmFzc2lnbih7fSwgX3RoaXMyLnByb3BzLCB7CiAgICAgICAgICBjYXJ0OiBfdGhpczIKICAgICAgICB9KSk7CiAgICAgIH0pKSwgUHJvbWlzZS5hbGwodGhpcy50b2dnbGVzLm1hcChmdW5jdGlvbiAodG9nZ2xlKSB7CiAgICAgICAgcmV0dXJuIHRvZ2dsZS5pbml0KHsKICAgICAgICAgIGxpbmVJdGVtczogX3RoaXMyLmxpbmVJdGVtcwogICAgICAgIH0pOwogICAgICB9KSk7CiAgICB9LCBfcHJvdG8uaW1hZ2VGb3JMaW5lSXRlbSA9IGZ1bmN0aW9uIGltYWdlRm9yTGluZUl0ZW0obGluZUl0ZW0pIHsKICAgICAgdmFyIGltYWdlU2l6ZSA9IDE4MCwKICAgICAgICAgIGltYWdlT3B0aW9ucyA9IHsKICAgICAgICBtYXhXaWR0aDogMTgwLAogICAgICAgIG1heEhlaWdodDogMTgwCiAgICAgIH07CiAgICAgIHJldHVybiBsaW5lSXRlbS52YXJpYW50LmltYWdlID8gdGhpcy5wcm9wcy5jbGllbnQuaW1hZ2UuaGVscGVycy5pbWFnZUZvclNpemUobGluZUl0ZW0udmFyaWFudC5pbWFnZSwgaW1hZ2VPcHRpb25zKSA6IE5PX0lNR19VUkw7CiAgICB9LCBfcHJvdG8ucmVtb3ZlQ2hlY2tvdXQgPSBmdW5jdGlvbiByZW1vdmVDaGVja291dCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwgPSBudWxsLCBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmxvY2FsU3RvcmFnZUNoZWNrb3V0S2V5KSwgdGhpcy5tb2RlbDsKICAgIH0sIF9wcm90by5mZXRjaERhdGEgPSBmdW5jdGlvbiBmZXRjaERhdGEoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzLAogICAgICAgICAgY2hlY2tvdXRJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMubG9jYWxTdG9yYWdlQ2hlY2tvdXRLZXkpOwoKICAgICAgcmV0dXJuIGNoZWNrb3V0SWQgPyB0aGlzLnByb3BzLmNsaWVudC5jaGVja291dC5mZXRjaChjaGVja291dElkKS50aGVuKGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgIHJldHVybiBfdGhpczMubW9kZWwgPSBjaGVja291dCwgY2hlY2tvdXQuY29tcGxldGVkQXQgPyBfdGhpczMucmVtb3ZlQ2hlY2tvdXQoKSA6IF90aGlzMy5zYW5pdGl6ZUNoZWNrb3V0KGNoZWNrb3V0KS50aGVuKGZ1bmN0aW9uIChuZXdDaGVja291dCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMy51cGRhdGVDYWNoZShuZXdDaGVja291dC5saW5lSXRlbXMpLCBuZXdDaGVja291dDsKICAgICAgICB9KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfdGhpczMucmVtb3ZlQ2hlY2tvdXQoKTsKICAgICAgfSkgOiBQcm9taXNlLnJlc29sdmUobnVsbCk7CiAgICB9LCBfcHJvdG8uc2FuaXRpemVDaGVja291dCA9IGZ1bmN0aW9uIHNhbml0aXplQ2hlY2tvdXQoY2hlY2tvdXQpIHsKICAgICAgdmFyIGxpbmVJdGVtc1RvRGVsZXRlID0gY2hlY2tvdXQubGluZUl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiAhaXRlbS52YXJpYW50OwogICAgICB9KTsKICAgICAgaWYgKCFsaW5lSXRlbXNUb0RlbGV0ZS5sZW5ndGgpIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2hlY2tvdXQpOwogICAgICB2YXIgbGluZUl0ZW1JZHMgPSBsaW5lSXRlbXNUb0RlbGV0ZS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5pZDsKICAgICAgfSk7CiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNsaWVudC5jaGVja291dC5yZW1vdmVMaW5lSXRlbXMoY2hlY2tvdXQuaWQsIGxpbmVJdGVtSWRzKS50aGVuKGZ1bmN0aW9uIChuZXdDaGVja291dCkgewogICAgICAgIHJldHVybiBuZXdDaGVja291dDsKICAgICAgfSk7CiAgICB9LCBfcHJvdG8uZmV0Y2hNb25leUZvcm1hdCA9IGZ1bmN0aW9uIGZldGNoTW9uZXlGb3JtYXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNsaWVudC5zaG9wLmZldGNoSW5mbygpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIHJldHVybiByZXMubW9uZXlGb3JtYXQ7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KGRhdGEpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5tb25leUZvcm1hdCB8fCB0aGlzLmZldGNoTW9uZXlGb3JtYXQoKS50aGVuKGZ1bmN0aW9uIChtb25leUZvcm1hdCkgewogICAgICAgIF90aGlzNC5tb25leUZvcm1hdCA9IG1vbmV5Rm9ybWF0OwogICAgICB9KSwgX0NvbXBvbmVudC5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMsIGRhdGEpLnRoZW4oZnVuY3Rpb24gKGNhcnQpIHsKICAgICAgICByZXR1cm4gX3RoaXM0LnRvZ2dsZXMubWFwKGZ1bmN0aW9uICh0b2dnbGUpIHsKICAgICAgICAgIHZhciBsaW5lSXRlbXMgPSBjYXJ0Lm1vZGVsID8gY2FydC5tb2RlbC5saW5lSXRlbXMgOiBbXTsKICAgICAgICAgIHJldHVybiB0b2dnbGUuaW5pdCh7CiAgICAgICAgICAgIGxpbmVJdGVtczogbGluZUl0ZW1zCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzNDsKICAgICAgfSk7CiAgICB9LCBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIF9Db21wb25lbnQucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKSwgdGhpcy50b2dnbGVzLmZvckVhY2goZnVuY3Rpb24gKHRvZ2dsZSkgewogICAgICAgIHJldHVybiB0b2dnbGUuZGVzdHJveSgpOwogICAgICB9KTsKICAgIH0sIF9wcm90by5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkgewogICAgICB0aGlzLmlzVmlzaWJsZSA9ICExLCB0aGlzLnZpZXcucmVuZGVyKCk7CiAgICB9LCBfcHJvdG8ub3BlbiA9IGZ1bmN0aW9uIG9wZW4oKSB7CiAgICAgIHRoaXMuaXNWaXNpYmxlID0gITAsIHRoaXMudmlldy5yZW5kZXIoKSwgdGhpcy52aWV3LnNldEZvY3VzKCk7CiAgICB9LCBfcHJvdG8udG9nZ2xlVmlzaWJpbGl0eSA9IGZ1bmN0aW9uIHRvZ2dsZVZpc2liaWxpdHkodmlzaWJsZSkgewogICAgICB0aGlzLmlzVmlzaWJsZSA9IHZpc2libGUgfHwgIXRoaXMuaXNWaXNpYmxlLCB0aGlzLnZpZXcucmVuZGVyKCksIHRoaXMuaXNWaXNpYmxlICYmIHRoaXMudmlldy5zZXRGb2N1cygpOwogICAgfSwgX3Byb3RvLm9uUXVhbnRpdHlCbHVyID0gZnVuY3Rpb24gb25RdWFudGl0eUJsdXIoZXZ0LCB0YXJnZXQpIHsKICAgICAgdGhpcy5zZXRRdWFudGl0eSh0YXJnZXQsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gcGFyc2VJbnQodGFyZ2V0LnZhbHVlLCAxMCk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLm9uUXVhbnRpdHlJbmNyZW1lbnQgPSBmdW5jdGlvbiBvblF1YW50aXR5SW5jcmVtZW50KHF0eSwgZXZ0LCB0YXJnZXQpIHsKICAgICAgdGhpcy5zZXRRdWFudGl0eSh0YXJnZXQsIGZ1bmN0aW9uIChwcmV2UXR5KSB7CiAgICAgICAgcmV0dXJuIHByZXZRdHkgKyBxdHk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLm9uQ2hlY2tvdXQgPSBmdW5jdGlvbiBvbkNoZWNrb3V0KCkgewogICAgICB0aGlzLl91c2VyRXZlbnQoIm9wZW5DaGVja291dCIpLCB0aGlzLnByb3BzLnRyYWNrZXIudHJhY2soIk9wZW4gY2FydCBjaGVja291dCIsIHt9KSwgdGhpcy5jaGVja291dC5vcGVuKHRoaXMubW9kZWwud2ViVXJsKTsKICAgIH0sIF9wcm90by5zZXRRdWFudGl0eSA9IGZ1bmN0aW9uIHNldFF1YW50aXR5KHRhcmdldCwgZm4pIHsKICAgICAgdmFyIGlkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgiZGF0YS1saW5lLWl0ZW0taWQiKSwKICAgICAgICAgIGl0ZW0gPSB0aGlzLm1vZGVsLmxpbmVJdGVtcy5maW5kKGZ1bmN0aW9uIChsaW5lSXRlbSkgewogICAgICAgIHJldHVybiBsaW5lSXRlbS5pZCA9PT0gaWQ7CiAgICAgIH0pLAogICAgICAgICAgbmV3UXR5ID0gZm4oaXRlbS5xdWFudGl0eSk7CiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRyYWNrZXIudHJhY2tNZXRob2QodGhpcy51cGRhdGVJdGVtLmJpbmQodGhpcyksICJVcGRhdGUgQ2FydCIsIHRoaXMuY2FydEl0ZW1UcmFja2luZ0luZm8oaXRlbSwgbmV3UXR5KSkoaWQsIG5ld1F0eSk7CiAgICB9LCBfcHJvdG8uc2V0Tm90ZSA9IGZ1bmN0aW9uIHNldE5vdGUoZXZ0KSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzLAogICAgICAgICAgbm90ZSA9IGV2dC50YXJnZXQudmFsdWU7CgogICAgICByZXR1cm4gdGhpcy5wcm9wcy5jbGllbnQuY2hlY2tvdXQudXBkYXRlQXR0cmlidXRlcyh0aGlzLm1vZGVsLmlkLCB7CiAgICAgICAgbm90ZTogbm90ZQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgIHJldHVybiBfdGhpczUubW9kZWwgPSBjaGVja291dCwgY2hlY2tvdXQ7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLnVwZGF0ZUNhY2hlID0gZnVuY3Rpb24gdXBkYXRlQ2FjaGUobGluZUl0ZW1zKSB7CiAgICAgIHZhciBjYWNoZWRMaW5lSXRlbXMgPSB0aGlzLmxpbmVJdGVtQ2FjaGUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0pIHsKICAgICAgICByZXR1cm4gYWNjW2l0ZW0uaWRdID0gaXRlbSwgYWNjOwogICAgICB9LCB7fSk7CiAgICAgIHJldHVybiB0aGlzLmxpbmVJdGVtQ2FjaGUgPSBsaW5lSXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNhY2hlZExpbmVJdGVtc1tpdGVtLmlkXSwgaXRlbSk7CiAgICAgIH0pLCB0aGlzLmxpbmVJdGVtQ2FjaGU7CiAgICB9LCBfcHJvdG8udXBkYXRlQ2FjaGVJdGVtID0gZnVuY3Rpb24gdXBkYXRlQ2FjaGVJdGVtKGxpbmVJdGVtSWQsIHF1YW50aXR5KSB7CiAgICAgIHZhciBsaW5lSXRlbTsKICAgICAgMCAhPT0gdGhpcy5saW5lSXRlbUNhY2hlLmxlbmd0aCAmJiAodGhpcy5saW5lSXRlbUNhY2hlLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gbGluZUl0ZW1JZCA9PT0gaXRlbS5pZDsKICAgICAgfSkucXVhbnRpdHkgPSBxdWFudGl0eSwgdGhpcy52aWV3LnJlbmRlcigpKTsKICAgIH0sIF9wcm90by51cGRhdGVJdGVtID0gZnVuY3Rpb24gdXBkYXRlSXRlbShpZCwgcXVhbnRpdHkpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICB0aGlzLl91c2VyRXZlbnQoInVwZGF0ZUl0ZW1RdWFudGl0eSIpOwoKICAgICAgdmFyIGxpbmVJdGVtID0gewogICAgICAgIGlkOiBpZCwKICAgICAgICBxdWFudGl0eTogcXVhbnRpdHkKICAgICAgfSwKICAgICAgICAgIGxpbmVJdGVtRWwgPSB0aGlzLnZpZXcuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOwoKICAgICAgaWYgKGxpbmVJdGVtRWwpIHsKICAgICAgICB2YXIgcXVhbnRpdHlFbCA9IGxpbmVJdGVtRWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSh0aGlzLmNsYXNzZXMubGluZUl0ZW0ucXVhbnRpdHkpWzBdOwogICAgICAgIHF1YW50aXR5RWwgJiYgYWRkQ2xhc3NUb0VsZW1lbnQoImlzLWxvYWRpbmciLCBxdWFudGl0eUVsKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2xpZW50LmNoZWNrb3V0LnVwZGF0ZUxpbmVJdGVtcyh0aGlzLm1vZGVsLmlkLCBbbGluZUl0ZW1dKS50aGVuKGZ1bmN0aW9uIChjaGVja291dCkgewogICAgICAgIHJldHVybiBfdGhpczYubW9kZWwgPSBjaGVja291dCwgX3RoaXM2LnVwZGF0ZUNhY2hlKF90aGlzNi5tb2RlbC5saW5lSXRlbXMpLCBfdGhpczYudG9nZ2xlcy5mb3JFYWNoKGZ1bmN0aW9uICh0b2dnbGUpIHsKICAgICAgICAgIHJldHVybiB0b2dnbGUudmlldy5yZW5kZXIoKTsKICAgICAgICB9KSwgcXVhbnRpdHkgPiAwID8gX3RoaXM2LnZpZXcucmVuZGVyKCkgOiBfdGhpczYudmlldy5hbmltYXRlUmVtb3ZlTm9kZShpZCksIGNoZWNrb3V0OwogICAgICB9KTsKICAgIH0sIF9wcm90by5hZGRWYXJpYW50VG9DYXJ0ID0gZnVuY3Rpb24gYWRkVmFyaWFudFRvQ2FydCh2YXJpYW50KSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzLAogICAgICAgICAgcXVhbnRpdHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1sxXSA/IGFyZ3VtZW50c1sxXSA6IDEsCiAgICAgICAgICBvcGVuQ2FydCA9ICEoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0pIHx8IGFyZ3VtZW50c1syXTsKCiAgICAgIGlmIChxdWFudGl0eSA8PSAwKSByZXR1cm4gbnVsbDsKICAgICAgb3BlbkNhcnQgJiYgdGhpcy5vcGVuKCk7CiAgICAgIHZhciBsaW5lSXRlbSA9IHsKICAgICAgICB2YXJpYW50SWQ6IHZhcmlhbnQuaWQsCiAgICAgICAgcXVhbnRpdHk6IHF1YW50aXR5CiAgICAgIH07CiAgICAgIGlmICh0aGlzLm1vZGVsKSByZXR1cm4gdGhpcy5wcm9wcy5jbGllbnQuY2hlY2tvdXQuYWRkTGluZUl0ZW1zKHRoaXMubW9kZWwuaWQsIFtsaW5lSXRlbV0pLnRoZW4oZnVuY3Rpb24gKGNoZWNrb3V0KSB7CiAgICAgICAgcmV0dXJuIF90aGlzNy5tb2RlbCA9IGNoZWNrb3V0LCBfdGhpczcudXBkYXRlQ2FjaGUoX3RoaXM3Lm1vZGVsLmxpbmVJdGVtcyksIF90aGlzNy52aWV3LnJlbmRlcigpLCBfdGhpczcudG9nZ2xlcy5mb3JFYWNoKGZ1bmN0aW9uICh0b2dnbGUpIHsKICAgICAgICAgIHJldHVybiB0b2dnbGUudmlldy5yZW5kZXIoKTsKICAgICAgICB9KSwgX3RoaXM3LnZpZXcuc2V0Rm9jdXMoKSwgY2hlY2tvdXQ7CiAgICAgIH0pOwogICAgICB2YXIgaW5wdXQgPSB7CiAgICAgICAgbGluZUl0ZW1zOiBbbGluZUl0ZW1dCiAgICAgIH07CiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNsaWVudC5jaGVja291dC5jcmVhdGUoaW5wdXQpLnRoZW4oZnVuY3Rpb24gKGNoZWNrb3V0KSB7CiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5zZXRJdGVtKF90aGlzNy5sb2NhbFN0b3JhZ2VDaGVja291dEtleSwgY2hlY2tvdXQuaWQpLCBfdGhpczcubW9kZWwgPSBjaGVja291dCwgX3RoaXM3LnVwZGF0ZUNhY2hlKF90aGlzNy5tb2RlbC5saW5lSXRlbXMpLCBfdGhpczcudmlldy5yZW5kZXIoKSwgX3RoaXM3LnRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbiAodG9nZ2xlKSB7CiAgICAgICAgICByZXR1cm4gdG9nZ2xlLnZpZXcucmVuZGVyKCk7CiAgICAgICAgfSksIF90aGlzNy52aWV3LnNldEZvY3VzKCksIGNoZWNrb3V0OwogICAgICB9KTsKICAgIH0sIF9wcm90by5lbXB0eSA9IGZ1bmN0aW9uIGVtcHR5KCkgewogICAgICB2YXIgX3RoaXM4ID0gdGhpcywKICAgICAgICAgIGxpbmVJdGVtSWRzID0gdGhpcy5tb2RlbC5saW5lSXRlbXMgPyB0aGlzLm1vZGVsLmxpbmVJdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5pZDsKICAgICAgfSkgOiBbXTsKCiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNsaWVudC5jaGVja291dC5yZW1vdmVMaW5lSXRlbXModGhpcy5tb2RlbC5pZCwgbGluZUl0ZW1JZHMpLnRoZW4oZnVuY3Rpb24gKGNoZWNrb3V0KSB7CiAgICAgICAgcmV0dXJuIF90aGlzOC5tb2RlbCA9IGNoZWNrb3V0LCBfdGhpczgudmlldy5yZW5kZXIoKSwgX3RoaXM4LnRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbiAodG9nZ2xlKSB7CiAgICAgICAgICByZXR1cm4gdG9nZ2xlLnZpZXcucmVuZGVyKCk7CiAgICAgICAgfSksIGNoZWNrb3V0OwogICAgICB9KTsKICAgIH0sIF9wcm90by5jYXJ0SXRlbVRyYWNraW5nSW5mbyA9IGZ1bmN0aW9uIGNhcnRJdGVtVHJhY2tpbmdJbmZvKGl0ZW0sIHF1YW50aXR5KSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgaWQ6IGl0ZW0udmFyaWFudC5pZCwKICAgICAgICB2YXJpYW50TmFtZTogaXRlbS52YXJpYW50LnRpdGxlLAogICAgICAgIHByb2R1Y3RJZDogaXRlbS52YXJpYW50LnByb2R1Y3QuaWQsCiAgICAgICAgbmFtZTogaXRlbS50aXRsZSwKICAgICAgICBwcmljZTogaXRlbS52YXJpYW50LnByaWNlVjIuYW1vdW50LAogICAgICAgIHByZXZRdWFudGl0eTogaXRlbS5xdWFudGl0eSwKICAgICAgICBxdWFudGl0eTogcGFyc2VGbG9hdChxdWFudGl0eSksCiAgICAgICAgc2t1OiBudWxsCiAgICAgIH07CiAgICB9LCBfY3JlYXRlQ2xhc3MoQ2FydCwgW3sKICAgICAga2V5OiAidHlwZUtleSIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiAiY2FydCI7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiRE9NRXZlbnRzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgdmFyIF9tZXJnZTsKCiAgICAgICAgcmV0dXJuIG1lcmdlKHt9LCAoX2RlZmluZVByb3BlcnR5KF9tZXJnZSA9IHt9LCAiY2xpY2sgIi5jb25jYXQodGhpcy5zZWxlY3RvcnMuY2FydC5jbG9zZSksIHRoaXMucHJvcHMuY2xvc2VDYXJ0LmJpbmQodGhpcykpLCBfZGVmaW5lUHJvcGVydHkoX21lcmdlLCAiY2xpY2sgIi5jb25jYXQodGhpcy5zZWxlY3RvcnMubGluZUl0ZW0ucXVhbnRpdHlJbmNyZW1lbnQpLCB0aGlzLm9uUXVhbnRpdHlJbmNyZW1lbnQuYmluZCh0aGlzLCAxKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJjbGljayAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5saW5lSXRlbS5xdWFudGl0eURlY3JlbWVudCksIHRoaXMub25RdWFudGl0eUluY3JlbWVudC5iaW5kKHRoaXMsIC0xKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJjbGljayAiLmNvbmNhdCh0aGlzLnNlbGVjdG9ycy5jYXJ0LmJ1dHRvbiksIHRoaXMub25DaGVja291dC5iaW5kKHRoaXMpKSwgX2RlZmluZVByb3BlcnR5KF9tZXJnZSwgImJsdXIgIi5jb25jYXQodGhpcy5zZWxlY3RvcnMubGluZUl0ZW0ucXVhbnRpdHlJbnB1dCksIHRoaXMub25RdWFudGl0eUJsdXIuYmluZCh0aGlzKSksIF9kZWZpbmVQcm9wZXJ0eShfbWVyZ2UsICJibHVyICIuY29uY2F0KHRoaXMuc2VsZWN0b3JzLmNhcnQubm90ZSksIHRoaXMuc2V0Tm90ZS5iaW5kKHRoaXMpKSwgX21lcmdlKSwgdGhpcy5vcHRpb25zLkRPTUV2ZW50cyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAibGluZUl0ZW1zIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwgPyB0aGlzLm1vZGVsLmxpbmVJdGVtcyA6IFtdOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImxpbmVJdGVtc0h0bWwiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgICAgcmV0dXJuIHRoaXMubGluZUl0ZW1DYWNoZS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbGluZUl0ZW0pIHsKICAgICAgICAgIHZhciBkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgbGluZUl0ZW0sIF90aGlzOS5vcHRpb25zLnZpZXdEYXRhKSwKICAgICAgICAgICAgICBmdWxsUHJpY2UgPSBkYXRhLnZhcmlhbnQucHJpY2VWMi5hbW91bnQgKiBkYXRhLnF1YW50aXR5LAogICAgICAgICAgICAgIGZvcm1hdHRlZFByaWNlID0gZm9ybWF0TW9uZXkoZnVsbFByaWNlLCBfdGhpczkubW9uZXlGb3JtYXQpLAogICAgICAgICAgICAgIGRpc2NvdW50QWxsb2NhdGlvbnMsCiAgICAgICAgICAgICAgX2Rpc2NvdW50QWxsb2NhdGlvbnMkID0gZGF0YS5kaXNjb3VudEFsbG9jYXRpb25zLnJlZHVjZShmdW5jdGlvbiAoZGlzY291bnRBY2MsIGRpc2NvdW50KSB7CiAgICAgICAgICAgIHZhciB0YXJnZXRTZWxlY3Rpb24gPSBkaXNjb3VudC5kaXNjb3VudEFwcGxpY2F0aW9uLnRhcmdldFNlbGVjdGlvbjsKCiAgICAgICAgICAgIGlmIChMSU5FX0lURU1fVEFSR0VUX1NFTEVDVElPTlMuaW5kZXhPZih0YXJnZXRTZWxlY3Rpb24pID4gLTEpIHsKICAgICAgICAgICAgICB2YXIgZGlzY291bnRBbW91bnQgPSBkaXNjb3VudC5hbGxvY2F0ZWRBbW91bnQuYW1vdW50LAogICAgICAgICAgICAgICAgICBkaXNjb3VudERpc3BsYXlUZXh0ID0gZGlzY291bnQuZGlzY291bnRBcHBsaWNhdGlvbi50aXRsZSB8fCBkaXNjb3VudC5kaXNjb3VudEFwcGxpY2F0aW9uLmNvZGU7CiAgICAgICAgICAgICAgZGlzY291bnRBY2MudG90YWxEaXNjb3VudCArPSBkaXNjb3VudEFtb3VudCwgZGlzY291bnRBY2MuZGlzY291bnRzLnB1c2goewogICAgICAgICAgICAgICAgZGlzY291bnQ6ICIiLmNvbmNhdChkaXNjb3VudERpc3BsYXlUZXh0LCAiICgtIikuY29uY2F0KGZvcm1hdE1vbmV5KGRpc2NvdW50QW1vdW50LCBfdGhpczkubW9uZXlGb3JtYXQpLCAiKSIpCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBkaXNjb3VudEFjYzsKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgZGlzY291bnRzOiBbXSwKICAgICAgICAgICAgdG90YWxEaXNjb3VudDogMAogICAgICAgICAgfSksCiAgICAgICAgICAgICAgZGlzY291bnRzID0gX2Rpc2NvdW50QWxsb2NhdGlvbnMkLmRpc2NvdW50cywKICAgICAgICAgICAgICB0b3RhbERpc2NvdW50ID0gX2Rpc2NvdW50QWxsb2NhdGlvbnMkLnRvdGFsRGlzY291bnQ7CgogICAgICAgICAgcmV0dXJuIGRhdGEuZGlzY291bnRzID0gZGlzY291bnRzLmxlbmd0aCA+IDAgPyBkaXNjb3VudHMgOiBudWxsLCBkYXRhLmZvcm1hdHRlZEZ1bGxQcmljZSA9IHRvdGFsRGlzY291bnQgPiAwID8gZm9ybWF0dGVkUHJpY2UgOiBudWxsLCBkYXRhLmZvcm1hdHRlZEFjdHVhbFByaWNlID0gZm9ybWF0TW9uZXkoZnVsbFByaWNlIC0gdG90YWxEaXNjb3VudCwgX3RoaXM5Lm1vbmV5Rm9ybWF0KSwgZGF0YS5mb3JtYXR0ZWRQcmljZSA9IGZvcm1hdHRlZFByaWNlLCBkYXRhLmNsYXNzZXMgPSBfdGhpczkuY2xhc3NlcywgZGF0YS5saW5lSXRlbUltYWdlID0gX3RoaXM5LmltYWdlRm9yTGluZUl0ZW0oZGF0YSksIGRhdGEudmFyaWFudFRpdGxlID0gIkRlZmF1bHQgVGl0bGUiID09PSBkYXRhLnZhcmlhbnQudGl0bGUgPyAiIiA6IGRhdGEudmFyaWFudC50aXRsZSwgYWNjICsgX3RoaXM5LmNoaWxkVGVtcGxhdGUucmVuZGVyKHsKICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgfSwgZnVuY3Rpb24gKG91dHB1dCkgewogICAgICAgICAgICByZXR1cm4gJzxkaXYgaWQ9IicuY29uY2F0KGxpbmVJdGVtLmlkLCAnIiBjbGFzcz0nKS5jb25jYXQoX3RoaXM5LmNsYXNzZXMubGluZUl0ZW0ubGluZUl0ZW0sICI+IikuY29uY2F0KG91dHB1dCwgIjwvZGl2PiIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwgIiIpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInZpZXdEYXRhIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgdmFyIG1vZGVsRGF0YTsKICAgICAgICByZXR1cm4gbWVyZ2UodGhpcy5tb2RlbCB8fCB7fSwgdGhpcy5vcHRpb25zLnZpZXdEYXRhLCB7CiAgICAgICAgICB0ZXh0OiB0aGlzLm9wdGlvbnMudGV4dCwKICAgICAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcywKICAgICAgICAgIGxpbmVJdGVtc0h0bWw6IHRoaXMubGluZUl0ZW1zSHRtbCwKICAgICAgICAgIGlzRW1wdHk6IHRoaXMuaXNFbXB0eSwKICAgICAgICAgIGZvcm1hdHRlZFRvdGFsOiB0aGlzLmZvcm1hdHRlZFRvdGFsLAogICAgICAgICAgZGlzY291bnRzOiB0aGlzLmNhcnREaXNjb3VudHMsCiAgICAgICAgICBjb250ZW50czogdGhpcy5vcHRpb25zLmNvbnRlbnRzLAogICAgICAgICAgY2FydE5vdGU6IHRoaXMuY2FydE5vdGUKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJmb3JtYXR0ZWRUb3RhbCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLm1vZGVsID8gZm9ybWF0TW9uZXkodGhpcy5vcHRpb25zLmNvbnRlbnRzLmRpc2NvdW50cyA/IHRoaXMubW9kZWwuc3VidG90YWxQcmljZVYyLmFtb3VudCA6IHRoaXMubW9kZWwubGluZUl0ZW1zU3VidG90YWxQcmljZS5hbW91bnQsIHRoaXMubW9uZXlGb3JtYXQpIDogZm9ybWF0TW9uZXkoMCwgdGhpcy5tb25leUZvcm1hdCk7CiAgICAgICAgdmFyIHRvdGFsOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImNhcnREaXNjb3VudHMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY29udGVudHMuZGlzY291bnRzICYmIHRoaXMubW9kZWwgPyB0aGlzLm1vZGVsLmRpc2NvdW50QXBwbGljYXRpb25zLnJlZHVjZShmdW5jdGlvbiAoZGlzY291bnRBcnIsIGRpc2NvdW50KSB7CiAgICAgICAgICBpZiAoIkFMTCIgPT09IGRpc2NvdW50LnRhcmdldFNlbGVjdGlvbikgewogICAgICAgICAgICB2YXIgZGlzY291bnRWYWx1ZSA9IDA7CgogICAgICAgICAgICBpZiAoZGlzY291bnQudmFsdWUuYW1vdW50ID8gZGlzY291bnRWYWx1ZSA9IGRpc2NvdW50LnZhbHVlLmFtb3VudCA6IGRpc2NvdW50LnZhbHVlLnBlcmNlbnRhZ2UgJiYgKGRpc2NvdW50VmFsdWUgPSBkaXNjb3VudC52YWx1ZS5wZXJjZW50YWdlIC8gMTAwICogX3RoaXMxMC5tb2RlbC5saW5lSXRlbXNTdWJ0b3RhbFByaWNlLmFtb3VudCksIGRpc2NvdW50VmFsdWUgPiAwKSB7CiAgICAgICAgICAgICAgdmFyIGRpc2NvdW50RGlzcGxheVRleHQgPSBkaXNjb3VudC50aXRsZSB8fCBkaXNjb3VudC5jb2RlOwogICAgICAgICAgICAgIGRpc2NvdW50QXJyLnB1c2goewogICAgICAgICAgICAgICAgdGV4dDogZGlzY291bnREaXNwbGF5VGV4dCwKICAgICAgICAgICAgICAgIGFtb3VudDogIi0iLmNvbmNhdChmb3JtYXRNb25leShkaXNjb3VudFZhbHVlLCBfdGhpczEwLm1vbmV5Rm9ybWF0KSkKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBkaXNjb3VudEFycjsKICAgICAgICB9LCBbXSkgOiBbXTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJpc0VtcHR5IiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuICF0aGlzLm1vZGVsIHx8IHRoaXMubW9kZWwubGluZUl0ZW1zLmxlbmd0aCA8IDE7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY2FydE5vdGUiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5tb2RlbCAmJiB0aGlzLm1vZGVsLm5vdGU7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAid3JhcHBlckNsYXNzIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaXNWaXNpYmxlID8gImlzLWFjdGl2ZSIgOiAiIjsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJsb2NhbFN0b3JhZ2VDaGVja291dEtleSIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiAiIi5jb25jYXQodGhpcy5wcm9wcy5jbGllbnQuY29uZmlnLnN0b3JlZnJvbnRBY2Nlc3NUb2tlbiwgIi4iKS5jb25jYXQodGhpcy5wcm9wcy5jbGllbnQuY29uZmlnLmRvbWFpbiwgIi5jaGVja291dElkIik7CiAgICAgIH0KICAgIH1dKSwgQ2FydDsKICB9KENvbXBvbmVudCksCiAgICAgIFRyYWNrZXIgPSBmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBUcmFja2VyKGxpYiwgY2xpZW50Q29uZmlnKSB7CiAgICAgIHRoaXMubGliID0gbGliIHx8IG51bGwsIHRoaXMuY2xpZW50Q29uZmlnID0gY2xpZW50Q29uZmlnOwogICAgfQoKICAgIHZhciBfcHJvdG8gPSBUcmFja2VyLnByb3RvdHlwZTsKICAgIHJldHVybiBfcHJvdG8udHJhY2tNZXRob2QgPSBmdW5jdGlvbiB0cmFja01ldGhvZChmbiwgZXZlbnQsIHByb3BlcnRpZXMpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTsKICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWUgJiYgcmV0dXJuVmFsdWUudGhlbiA/IHJldHVyblZhbHVlLnRoZW4oZnVuY3Rpb24gKHZhbCkgewogICAgICAgICAgcmV0dXJuIHNlbGYuY2FsbExpYihldmVudCwgcHJvcGVydGllcyksIHZhbDsKICAgICAgICB9KSA6IChzZWxmLmNhbGxMaWIoZXZlbnQsIHByb3BlcnRpZXMpLCByZXR1cm5WYWx1ZSk7CiAgICAgIH07CiAgICB9LCBfcHJvdG8uY2FsbExpYiA9IGZ1bmN0aW9uIGNhbGxMaWIoZXZlbnROYW1lLCBwcm9wZXJ0aWVzKSB7CiAgICAgIHN3aXRjaCAoZXZlbnROYW1lKSB7CiAgICAgICAgY2FzZSAiVXBkYXRlIENhcnQiOgogICAgICAgICAgaWYgKHByb3BlcnRpZXMucXVhbnRpdHkgPCAxKSByZXR1cm4gdGhpcy50cmFjaygiUmVtb3ZlZCBQcm9kdWN0IiwgcHJvcGVydGllcyk7CiAgICAgICAgICBpZiAocHJvcGVydGllcy5wcmV2UXVhbnRpdHkgJiYgcHJvcGVydGllcy5xdWFudGl0eSA8IHByb3BlcnRpZXMucHJldlF1YW50aXR5KSByZXR1cm47CiAgICAgICAgICByZXR1cm4gdGhpcy50cmFjaygiQWRkZWQgUHJvZHVjdCIsIHByb3BlcnRpZXMpOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRoaXMudHJhY2soZXZlbnROYW1lLCBwcm9wZXJ0aWVzKTsKICAgICAgfQogICAgfSwgX3Byb3RvLnRyYWNrUGFnZXZpZXcgPSBmdW5jdGlvbiB0cmFja1BhZ2V2aWV3KCkgewogICAgICB0aGlzLmxpYiAmJiB0aGlzLmxpYi5wYWdlICYmIHRoaXMubGliLnBhZ2UoKTsKICAgIH0sIF9wcm90by50cmFja0NvbXBvbmVudCA9IGZ1bmN0aW9uIHRyYWNrQ29tcG9uZW50KHR5cGUsIHByb3BlcnRpZXMpIHsKICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgY2FzZSAicHJvZHVjdCI6CiAgICAgICAgICByZXR1cm4gdGhpcy50cmFjaygiVmlld2VkIFByb2R1Y3QiLCBwcm9wZXJ0aWVzKTsKCiAgICAgICAgY2FzZSAiY29sbGVjdGlvbiI6CiAgICAgICAgICByZXR1cm4gdGhpcy50cmFjaygiVmlld2VkIFByb2R1Y3QgQ2F0ZWdvcnkiLCBwcm9wZXJ0aWVzKTsKICAgICAgfQogICAgfSwgX3Byb3RvLnRyYWNrID0gZnVuY3Rpb24gdHJhY2soZXZlbnROYW1lLCBwcm9wZXJ0aWVzKSB7CiAgICAgIHByb3BlcnRpZXMucGFnZXVybCA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYsIHByb3BlcnRpZXMucmVmZXJyZXIgPSBkb2N1bWVudC5yZWZlcnJlciwgcHJvcGVydGllcy5zdWJkb21haW4gPSB0aGlzLmNsaWVudENvbmZpZy5kb21haW4sIHRoaXMubGliICYmIHRoaXMubGliLnRyYWNrICYmIHRoaXMubGliLnRyYWNrKGV2ZW50TmFtZSwgcHJvcGVydGllcyk7CiAgICB9LCBUcmFja2VyOwogIH0oKSwKICAgICAgaG9zdFN0eWxlcyA9ICIuc2hvcGlmeS1idXktbW9kYWwtaXMtYWN0aXZlIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLnNob3BpZnktYnV5LWZyYW1lIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrXG59XG5cbi5zaG9waWZ5LWJ1eS1mcmFtZSBpZnJhbWUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG5cbi5zaG9waWZ5LWJ1eS1mcmFtZS0tY2FydCB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDM1MHB4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGhlaWdodDogMTAwJTtcbiAgei1pbmRleDogMjE0NzQ4MzY0NztcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKVxufVxuXG4uc2hvcGlmeS1idXktZnJhbWUtLWNhcnQgaWZyYW1lIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cblxuLnNob3BpZnktYnV5LWZyYW1lLS1jYXJ0LmlzLWluaXRpYWxpemVkIHtcbiAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAyNTBtcyBjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQsIDAuNDQsIDEpO1xuICAgIHRyYW5zaXRpb246IGFsbCAyNTBtcyBjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQsIDAuNDQsIDEpO1xuICB9XG5cbi5zaG9waWZ5LWJ1eS1mcmFtZS0tY2FydC5pcy1hY3RpdmUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgfVxuXG4uc2hvcGlmeS1idXktZnJhbWUtLXByb2R1Y3Qge1xuICBkaXNwbGF5OiBibG9ja1xufVxuXG4uc2hvcGlmeS1idXktZnJhbWUtLXByb2R1Y3Quc2hvcGlmeS1idXlfX2xheW91dC1ob3Jpem9udGFsIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcblxuICAgIG1hcmdpbi1yaWdodDogYXV0b1xuICB9XG5cbi5zaG9waWZ5LWJ1eS1mcmFtZS0tcHJvZHVjdC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgaWZyYW1lIHtcbiAgICAgIG1heC13aWR0aDogMTAwJVxuICAgIH1cblxuQG1lZGlhIChtaW4td2lkdGg6IDk1MHB4KSB7XG5cbi5zaG9waWZ5LWJ1eS1mcmFtZS0tcHJvZHVjdC5zaG9waWZ5LWJ1eV9fbGF5b3V0LWhvcml6b250YWwgaWZyYW1lIHtcbiAgICAgICAgbWF4LXdpZHRoOiA5NTBweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgICAgIG1hcmdpbi1yaWdodDogYXV0b1xuICAgIH1cbiAgICAgIH1cblxuLnNob3BpZnktYnV5LWZyYW1lLS10b2dnbGUge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcbn1cblxuLnNob3BpZnktYnV5LWZyYW1lLS10b2dnbGU6bm90KC5pcy1zdGlja3kpIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHBhZGRpbmc6IDVweDtcbiAgfVxuXG4uc2hvcGlmeS1idXktZnJhbWUtLXRvZ2dsZS5pcy1zdGlja3kge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB6LWluZGV4OiAyMTQ3NDgzNjQ1O1xuICB9XG5cbi5zaG9waWZ5LWJ1eS1mcmFtZS0tdG9nZ2xlLmlzLWFjdGl2ZS5pcy1zdGlja3kge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG5cbi5pcy1hY3RpdmUgLnNob3BpZnktYnV5LWZyYW1lLS10b2dnbGUgaWZyYW1lIHtcbiAgICAgIG1pbi1oZWlnaHQ6IDY3cHg7XG4gICAgfVxuXG4uc2hvcGlmeS1idXktZnJhbWUtLXByb2R1Y3RTZXQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnNob3BpZnktYnV5LWZyYW1lLS1tb2RhbCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiAyMTQ3NDgzNjQ2O1xuICBkaXNwbGF5OiBub25lO1xuICAtd2Via2l0LXRyYW5zaXRpb246IGJhY2tncm91bmQgMzAwbXMgZWFzZTtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAzMDBtcyBlYXNlXG59XG5cbi5zaG9waWZ5LWJ1eS1mcmFtZS0tbW9kYWwgaWZyYW1lIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWF4LXdpZHRoOiBub25lO1xuICB9XG5cbi5zaG9waWZ5LWJ1eS1mcmFtZS0tbW9kYWwuaXMtYWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLDAuNik7XG4gIH1cblxuLnNob3BpZnktYnV5LWZyYW1lLS1tb2RhbC5pcy1ibG9jayB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbiIsCiAgICAgIGNvbmRpdGlvbmFsU3R5bGVzJDEgPSAiLnNob3BpZnktYnV5LWZyYW1lLS1jYXJ0IHtcbiAgZGlzcGxheTogbm9uZVxufVxuLnNob3BpZnktYnV5LWZyYW1lLS1jYXJ0LmlzLWFjdGl2ZSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbiIsCiAgICAgIGZyYW1lVXRpbHMgPSB7fSwKICAgICAgbGFzdFRpbWUgPSAwLAogICAgICB2ZW5kb3JzID0gWyJtcyIsICJtb3oiLCAid2Via2l0IiwgIm8iXTsKCiAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKSBmcmFtZVV0aWxzLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIGZyYW1lVXRpbHMuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7ZWxzZSB7CiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHZlbmRvcnMubGVuZ3RoICYmICFmcmFtZVV0aWxzLnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7CiAgICAgIGZyYW1lVXRpbHMucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvcnNbeF0gKyAiUmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0sIGZyYW1lVXRpbHMuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSArICJDYW5jZWxBbmltYXRpb25GcmFtZSJdIHx8IHdpbmRvd1t2ZW5kb3JzW3hdICsgIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSJdOwogICAgfQoKICAgIGZyYW1lVXRpbHMucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IChmcmFtZVV0aWxzLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZWxlbWVudCkgewogICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSwKICAgICAgICAgIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSksCiAgICAgICAgICBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpOwogICAgICB9LCB0aW1lVG9DYWxsKTsKICAgICAgcmV0dXJuIGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsLCBpZDsKICAgIH0pLCBmcmFtZVV0aWxzLmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IChmcmFtZVV0aWxzLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGlkKSB7CiAgICAgIGNsZWFyVGltZW91dChpZCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMpIHsKICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7CiAgICAgIGJ1YmJsZXM6ICExLAogICAgICBjYW5jZWxhYmxlOiAhMSwKICAgICAgZGV0YWlsOiB2b2lkIDAKICAgIH07CiAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoIkN1c3RvbUV2ZW50Iik7CiAgICByZXR1cm4gZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKSwgZXZ0OwogIH0KCiAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZTsKCiAgdmFyIHRocm90dGxlID0gZnVuY3Rpb24gdGhyb3R0bGUodHlwZSwgbmFtZSwgb2JqKSB7CiAgICBvYmogPSBvYmogfHwgd2luZG93OwoKICAgIHZhciBydW5uaW5nID0gITEsCiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMoKSB7CiAgICAgIHJ1bm5pbmcgfHwgKHJ1bm5pbmcgPSAhMCwgZnJhbWVVdGlscy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuY2FsbCh3aW5kb3csIGZ1bmN0aW9uICgpIHsKICAgICAgICBvYmouZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQobmFtZSkpLCBydW5uaW5nID0gITE7CiAgICAgIH0pKTsKICAgIH07CgogICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYyk7CiAgfSwKICAgICAgREFUQV9BVFRSSUJVVEUgPSAiZGF0YS1zaG9waWZ5LWJ1eS11aSIsCiAgICAgIEVTQ19LRVkkMSA9IDI3LAogICAgICBVSSA9IGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFVJKGNsaWVudCkgewogICAgICB2YXIgaW50ZWdyYXRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICAgIHN0eWxlT3ZlcnJpZGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiAiIjsKICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQsIHRoaXMuY29uZmlnID0ge30sIHRoaXMuY29uZmlnLmRvbWFpbiA9IHRoaXMuY2xpZW50LmNvbmZpZy5kb21haW4sIHRoaXMuaWZyYW1lQ29tcG9uZW50cyA9IFtdLCB0aGlzLmNvbXBvbmVudHMgPSB7CiAgICAgICAgcHJvZHVjdDogW10sCiAgICAgICAgY2FydDogW10sCiAgICAgICAgY29sbGVjdGlvbjogW10sCiAgICAgICAgcHJvZHVjdFNldDogW10sCiAgICAgICAgbW9kYWw6IFtdLAogICAgICAgIHRvZ2dsZTogW10KICAgICAgfSwgdGhpcy5jb21wb25lbnRUeXBlcyA9IHsKICAgICAgICBwcm9kdWN0OiBQcm9kdWN0JDEsCiAgICAgICAgY2FydDogQ2FydCwKICAgICAgICBjb2xsZWN0aW9uOiBQcm9kdWN0U2V0LAogICAgICAgIHByb2R1Y3RTZXQ6IFByb2R1Y3RTZXQsCiAgICAgICAgdG9nZ2xlOiBDYXJ0VG9nZ2xlCiAgICAgIH0sIHRoaXMuZXJyb3JSZXBvcnRlciA9IGludGVncmF0aW9ucy5lcnJvclJlcG9ydGVyLCB0aGlzLnRyYWNrZXIgPSBuZXcgVHJhY2tlcihpbnRlZ3JhdGlvbnMudHJhY2tlciwgdGhpcy5jb25maWcpLCB0aGlzLnN0eWxlT3ZlcnJpZGVzID0gc3R5bGVPdmVycmlkZXMsIHRoaXMudHJhY2tlci50cmFja1BhZ2V2aWV3KCksIHRoaXMuYWN0aXZlRWwgPSBudWxsLCB0aGlzLl9hcHBlbmRTdHlsZVRhZygpLCB0aGlzLl9iaW5kUmVzaXplKCksIHRoaXMuX2JpbmRIb3N0Q2xpY2soKSwgdGhpcy5fYmluZEVzYyh3aW5kb3cpLCB0aGlzLl9iaW5kUG9zdE1lc3NhZ2UoKTsKICAgIH0KCiAgICB2YXIgX3Byb3RvID0gVUkucHJvdG90eXBlOwogICAgcmV0dXJuIF9wcm90by5jcmVhdGVDb21wb25lbnQgPSBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQodHlwZSwgY29uZmlnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25maWcubm9kZSA9IGNvbmZpZy5ub2RlIHx8IHRoaXMuX3F1ZXJ5RW50cnlOb2RlKCk7CiAgICAgIHZhciBjb21wb25lbnQgPSBuZXcgdGhpcy5jb21wb25lbnRUeXBlc1t0eXBlXShjb25maWcsIHRoaXMuY29tcG9uZW50UHJvcHMpOwogICAgICByZXR1cm4gY29tcG9uZW50LmlmcmFtZSAmJiB0aGlzLl9iaW5kRXNjKGNvbXBvbmVudC5pZnJhbWUuZWwuY29udGVudFdpbmRvdyB8fCBjb21wb25lbnQuaWZyYW1lLmVsKSwgdGhpcy5jb21wb25lbnRzW3R5cGVdLnB1c2goY29tcG9uZW50KSwgY29tcG9uZW50LmluaXQoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXMudHJhY2tDb21wb25lbnQodHlwZSwgY29tcG9uZW50KSwgY29tcG9uZW50OwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBfdGhpcy5lcnJvclJlcG9ydGVyICYmIF90aGlzLmVycm9yUmVwb3J0ZXIubm90aWZ5RXhjZXB0aW9uKGVycm9yKSwgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLnRyYWNrQ29tcG9uZW50ID0gZnVuY3Rpb24gdHJhY2tDb21wb25lbnQodHlwZSwgY29tcG9uZW50KSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgInByb2R1Y3RTZXQiID09PSB0eXBlID8gY29tcG9uZW50LnRyYWNraW5nSW5mby5mb3JFYWNoKGZ1bmN0aW9uIChwcm9kdWN0KSB7CiAgICAgICAgX3RoaXMyLnRyYWNrZXIudHJhY2tDb21wb25lbnQoInByb2R1Y3QiLCBwcm9kdWN0KTsKICAgICAgfSkgOiB0aGlzLnRyYWNrZXIudHJhY2tDb21wb25lbnQodHlwZSwgY29tcG9uZW50LnRyYWNraW5nSW5mbyk7CiAgICB9LCBfcHJvdG8uZGVzdHJveUNvbXBvbmVudCA9IGZ1bmN0aW9uIGRlc3Ryb3lDb21wb25lbnQodHlwZSwgaWQpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLmNvbXBvbmVudHNbdHlwZV0uZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50LCBpbmRleCkgewogICAgICAgIGlkICYmICFjb21wb25lbnQubW9kZWwuaWQgPT09IGlkIHx8IChfdGhpczMuY29tcG9uZW50c1t0eXBlXVtpbmRleF0uZGVzdHJveSgpLCBfdGhpczMuY29tcG9uZW50c1t0eXBlXS5zcGxpY2UoaW5kZXgsIDEpKTsKICAgICAgfSk7CiAgICB9LCBfcHJvdG8uY3JlYXRlQ2FydCA9IGZ1bmN0aW9uIGNyZWF0ZUNhcnQoY29uZmlnKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuY29tcG9uZW50cy5jYXJ0Lmxlbmd0aCkgcmV0dXJuIGNvbmZpZy50b2dnbGVzICYmIGNvbmZpZy50b2dnbGVzLmxlbmd0aCA+IHRoaXMuY29tcG9uZW50cy5jYXJ0WzBdLnRvZ2dsZXMubGVuZ3RoID8gdGhpcy5jb21wb25lbnRzLmNhcnRbMF0uY3JlYXRlVG9nZ2xlcyhjb25maWcpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfdGhpczQuY29tcG9uZW50cy5jYXJ0WzBdOwogICAgICB9KSA6IFByb21pc2UucmVzb2x2ZSh0aGlzLmNvbXBvbmVudHMuY2FydFswXSk7CiAgICAgIHZhciBjYXJ0ID0gbmV3IENhcnQoY29uZmlnLCB0aGlzLmNvbXBvbmVudFByb3BzKTsKICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5jYXJ0LnB1c2goY2FydCksIGNhcnQuaW5pdCgpOwogICAgfSwgX3Byb3RvLmNsb3NlQ2FydCA9IGZ1bmN0aW9uIGNsb3NlQ2FydCgpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB0aGlzLmNvbXBvbmVudHMuY2FydC5sZW5ndGggJiYgdGhpcy5jb21wb25lbnRzLmNhcnQuZm9yRWFjaChmdW5jdGlvbiAoY2FydCkgewogICAgICAgIGNhcnQuaXNWaXNpYmxlICYmIChjYXJ0LmNsb3NlKCksIF90aGlzNS5yZXN0b3JlRm9jdXMoKSk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLm9wZW5DYXJ0ID0gZnVuY3Rpb24gb3BlbkNhcnQoKSB7CiAgICAgIHRoaXMuY29tcG9uZW50cy5jYXJ0Lmxlbmd0aCAmJiB0aGlzLmNvbXBvbmVudHMuY2FydC5mb3JFYWNoKGZ1bmN0aW9uIChjYXJ0KSB7CiAgICAgICAgY2FydC5vcGVuKCk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLnRvZ2dsZUNhcnQgPSBmdW5jdGlvbiB0b2dnbGVDYXJ0KHZpc2liaWxpdHkpIHsKICAgICAgdGhpcy5jb21wb25lbnRzLmNhcnQubGVuZ3RoICYmIHRoaXMuY29tcG9uZW50cy5jYXJ0LmZvckVhY2goZnVuY3Rpb24gKGNhcnQpIHsKICAgICAgICBjYXJ0LnRvZ2dsZVZpc2liaWxpdHkodmlzaWJpbGl0eSk7CiAgICAgIH0pLCB2aXNpYmlsaXR5IHx8IHRoaXMucmVzdG9yZUZvY3VzKCk7CiAgICB9LCBfcHJvdG8uY3JlYXRlTW9kYWwgPSBmdW5jdGlvbiBjcmVhdGVNb2RhbChjb25maWcpIHsKICAgICAgaWYgKHRoaXMuY29tcG9uZW50cy5tb2RhbC5sZW5ndGgpIHJldHVybiB0aGlzLmNvbXBvbmVudHMubW9kYWxbMF07CiAgICAgIHZhciBtb2RhbCA9IG5ldyBNb2RhbChjb25maWcsIHRoaXMuY29tcG9uZW50UHJvcHMpOwogICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLm1vZGFsLnB1c2gobW9kYWwpLCBtb2RhbDsKICAgIH0sIF9wcm90by5zZXRBY3RpdmVFbCA9IGZ1bmN0aW9uIHNldEFjdGl2ZUVsKGVsKSB7CiAgICAgIHRoaXMuYWN0aXZlRWwgPSBlbDsKICAgIH0sIF9wcm90by5jbG9zZU1vZGFsID0gZnVuY3Rpb24gY2xvc2VNb2RhbCgpIHsKICAgICAgdGhpcy5jb21wb25lbnRzLm1vZGFsLmxlbmd0aCAmJiAodGhpcy5jb21wb25lbnRzLm1vZGFsLmZvckVhY2goZnVuY3Rpb24gKG1vZGFsKSB7CiAgICAgICAgcmV0dXJuIG1vZGFsLmNsb3NlKCk7CiAgICAgIH0pLCB0aGlzLnJlc3RvcmVGb2N1cygpKTsKICAgIH0sIF9wcm90by5yZXN0b3JlRm9jdXMgPSBmdW5jdGlvbiByZXN0b3JlRm9jdXMoKSB7CiAgICAgICF0aGlzLmFjdGl2ZUVsIHx8IHRoaXMubW9kYWxPcGVuIHx8IHRoaXMuY2FydE9wZW4gfHwgdGhpcy5hY3RpdmVFbC5mb2N1cygpOwogICAgfSwgX3Byb3RvLl9xdWVyeUVudHJ5Tm9kZSA9IGZ1bmN0aW9uIF9xdWVyeUVudHJ5Tm9kZSgpIHsKICAgICAgdGhpcy5lbnRyeSA9IHRoaXMuZW50cnkgfHwgd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInNjcmlwdFsiLmNvbmNhdChEQVRBX0FUVFJJQlVURSwgIl0iKSlbMF07CiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKCiAgICAgIGlmICh0aGlzLmVudHJ5KSB7CiAgICAgICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLmVudHJ5LnBhcmVudE5vZGU7CiAgICAgICAgIkhFQUQiID09PSBwYXJlbnROb2RlLnRhZ05hbWUgfHwgIkhUTUwiID09PSBwYXJlbnROb2RlLnRhZ05hbWUgPyB0aGlzLl9hcHBlbmRUb0JvZHkoZGl2KSA6ICh0aGlzLmVudHJ5LnJlbW92ZUF0dHJpYnV0ZShEQVRBX0FUVFJJQlVURSksIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRpdiwgdGhpcy5lbnRyeSkpOwogICAgICB9IGVsc2UgdGhpcy5fYXBwZW5kVG9Cb2R5KGRpdik7CgogICAgICByZXR1cm4gZGl2OwogICAgfSwgX3Byb3RvLl9hcHBlbmRUb0JvZHkgPSBmdW5jdGlvbiBfYXBwZW5kVG9Cb2R5KGVsKSB7CiAgICAgIGRvY3VtZW50LmJvZHkgfHwgKGRvY3VtZW50LmJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJib2R5IikpLCBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTsKICAgIH0sIF9wcm90by5fYXBwZW5kU3R5bGVUYWcgPSBmdW5jdGlvbiBfYXBwZW5kU3R5bGVUYWcoKSB7CiAgICAgIHZhciBzdHlsZVRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CiAgICAgIHN0eWxlVGFnLnN0eWxlU2hlZXQgPyBzdHlsZVRhZy5zdHlsZVNoZWV0LmNzc1RleHQgPSB0aGlzLnN0eWxlVGV4dCA6IHN0eWxlVGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuc3R5bGVUZXh0KSksIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVUYWcpOwogICAgfSwgX3Byb3RvLl9iaW5kSG9zdENsaWNrID0gZnVuY3Rpb24gX2JpbmRIb3N0Q2xpY2soKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgaWYgKCEoX3RoaXM2LmNvbXBvbmVudHMuY2FydC5sZW5ndGggPCAxKSkgewogICAgICAgICAgdmFyIGNhcnROb2RlID0gX3RoaXM2LmNvbXBvbmVudHMuY2FydFswXS5ub2RlOwogICAgICAgICAgZXZ0LnRhcmdldCA9PT0gY2FydE5vZGUgfHwgY2FydE5vZGUuY29udGFpbnMoZXZ0LnRhcmdldCkgfHwgX3RoaXM2LmNsb3NlQ2FydCgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LCBfcHJvdG8uX2JpbmRSZXNpemUgPSBmdW5jdGlvbiBfYmluZFJlc2l6ZSgpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICB0aHJvdHRsZSgicmVzaXplIiwgInNhZmVSZXNpemUiKSwgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInNhZmVSZXNpemUiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXM3LmNvbXBvbmVudHMuY29sbGVjdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7CiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbi52aWV3LnJlc2l6ZSgpOwogICAgICAgIH0pLCBfdGhpczcuY29tcG9uZW50cy5wcm9kdWN0U2V0LmZvckVhY2goZnVuY3Rpb24gKHNldCkgewogICAgICAgICAgcmV0dXJuIHNldC52aWV3LnJlc2l6ZSgpOwogICAgICAgIH0pLCBfdGhpczcuY29tcG9uZW50cy5wcm9kdWN0LmZvckVhY2goZnVuY3Rpb24gKHByb2R1Y3QpIHsKICAgICAgICAgIHJldHVybiBwcm9kdWN0LnZpZXcucmVzaXplKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLl9iaW5kRXNjID0gZnVuY3Rpb24gX2JpbmRFc2MoY29udGV4dCkgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIGNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAyNyA9PT0gZXZ0LmtleUNvZGUgJiYgKF90aGlzOC5jbG9zZU1vZGFsKCksIF90aGlzOC5jbG9zZUNhcnQoKSk7CiAgICAgIH0pOwogICAgfSwgX3Byb3RvLl9iaW5kUG9zdE1lc3NhZ2UgPSBmdW5jdGlvbiBfYmluZFBvc3RNZXNzYWdlKCkgewogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICB2YXIgZGF0YTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG1zZy5kYXRhKTsKICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIGRhdGEgPSB7fTsKICAgICAgICB9CgogICAgICAgIChkYXRhLnN5bmNDYXJ0IHx8IGRhdGEuY3VycmVudF9jaGVja291dF9wYWdlICYmICIvY2hlY2tvdXQvdGhhbmtfeW91IiA9PT0gZGF0YS5jdXJyZW50X2NoZWNrb3V0X3BhZ2UpICYmIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgICB9KTsKICAgIH0sIF9jcmVhdGVDbGFzcyhVSSwgW3sKICAgICAga2V5OiAibW9kYWxPcGVuIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5tb2RhbC5yZWR1Y2UoZnVuY3Rpb24gKGlzT3BlbiwgbW9kYWwpIHsKICAgICAgICAgIHJldHVybiBpc09wZW4gfHwgbW9kYWwuaXNWaXNpYmxlOwogICAgICAgIH0sICExKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJjYXJ0T3BlbiIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMuY2FydC5yZWR1Y2UoZnVuY3Rpb24gKGlzT3BlbiwgY2FydCkgewogICAgICAgICAgcmV0dXJuIGlzT3BlbiB8fCBjYXJ0LmlzVmlzaWJsZTsKICAgICAgICB9LCAhMSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY29tcG9uZW50UHJvcHMiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgY2xpZW50OiB0aGlzLmNsaWVudCwKICAgICAgICAgIGNyZWF0ZUNhcnQ6IHRoaXMuY3JlYXRlQ2FydC5iaW5kKHRoaXMpLAogICAgICAgICAgY2xvc2VDYXJ0OiB0aGlzLmNsb3NlQ2FydC5iaW5kKHRoaXMpLAogICAgICAgICAgdG9nZ2xlQ2FydDogdGhpcy50b2dnbGVDYXJ0LmJpbmQodGhpcyksCiAgICAgICAgICBjcmVhdGVNb2RhbDogdGhpcy5jcmVhdGVNb2RhbC5iaW5kKHRoaXMpLAogICAgICAgICAgY2xvc2VNb2RhbDogdGhpcy5jbG9zZU1vZGFsLmJpbmQodGhpcyksCiAgICAgICAgICBzZXRBY3RpdmVFbDogdGhpcy5zZXRBY3RpdmVFbC5iaW5kKHRoaXMpLAogICAgICAgICAgZGVzdHJveUNvbXBvbmVudDogdGhpcy5kZXN0cm95Q29tcG9uZW50LmJpbmQodGhpcyksCiAgICAgICAgICB0cmFja2VyOiB0aGlzLnRyYWNrZXIsCiAgICAgICAgICBlcnJvclJlcG9ydGVyOiB0aGlzLmVycm9yUmVwb3J0ZXIsCiAgICAgICAgICBicm93c2VyRmVhdHVyZXM6IGJyb3dzZXJGZWF0dXJlcwogICAgICAgIH07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic3R5bGVUZXh0IiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIGJyb3dzZXJGZWF0dXJlcy50cmFuc2l0aW9uICYmIGJyb3dzZXJGZWF0dXJlcy50cmFuc2Zvcm0gJiYgYnJvd3NlckZlYXR1cmVzLmFuaW1hdGlvbiA/IGhvc3RTdHlsZXMgKyB0aGlzLnN0eWxlT3ZlcnJpZGVzIDogaG9zdFN0eWxlcyArIGNvbmRpdGlvbmFsU3R5bGVzJDEgKyB0aGlzLnN0eWxlT3ZlcnJpZGVzOwogICAgICB9CiAgICB9XSksIFVJOwogIH0oKSwKICAgICAgc3VwcG9ydF9zZWFyY2hQYXJhbXMgPSAoIlVSTFNlYXJjaFBhcmFtcyIgaW4gc2VsZiksCiAgICAgIHN1cHBvcnRfaXRlcmFibGUgPSAiU3ltYm9sIiBpbiBzZWxmICYmICJpdGVyYXRvciIgaW4gU3ltYm9sLAogICAgICBzdXBwb3J0X2Jsb2IgPSAiRmlsZVJlYWRlciIgaW4gc2VsZiAmJiAiQmxvYiIgaW4gc2VsZiAmJiBmdW5jdGlvbiAoKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gbmV3IEJsb2IoKSwgITA7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiAhMTsKICAgIH0KICB9KCksCiAgICAgIHN1cHBvcnRfZm9ybURhdGEgPSAoIkZvcm1EYXRhIiBpbiBzZWxmKSwKICAgICAgc3VwcG9ydF9hcnJheUJ1ZmZlciA9ICgiQXJyYXlCdWZmZXIiIGluIHNlbGYpOwoKICBmdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikgewogICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopOwogIH0KCiAgaWYgKHN1cHBvcnRfYXJyYXlCdWZmZXIpIHZhciB2aWV3Q2xhc3NlcyA9IFsiW29iamVjdCBJbnQ4QXJyYXldIiwgIltvYmplY3QgVWludDhBcnJheV0iLCAiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0iLCAiW29iamVjdCBJbnQxNkFycmF5XSIsICJbb2JqZWN0IFVpbnQxNkFycmF5XSIsICJbb2JqZWN0IEludDMyQXJyYXldIiwgIltvYmplY3QgVWludDMyQXJyYXldIiwgIltvYmplY3QgRmxvYXQzMkFycmF5XSIsICJbb2JqZWN0IEZsb2F0NjRBcnJheV0iXSwKICAgICAgaXNBcnJheUJ1ZmZlclZpZXcgPSBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKG9iaikgewogICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xOwogIH07CgogIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkgewogICAgaWYgKCJzdHJpbmciICE9IHR5cGVvZiBuYW1lICYmIChuYW1lID0gU3RyaW5nKG5hbWUpKSwgL1teYS16MC05XC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lIik7CiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpOwogIH0KCiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHsKICAgIHJldHVybiAic3RyaW5nIiAhPSB0eXBlb2YgdmFsdWUgJiYgKHZhbHVlID0gU3RyaW5nKHZhbHVlKSksIHZhbHVlOwogIH0KCiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHsKICAgIHZhciBpdGVyYXRvciA9IHsKICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBkb25lOiB2b2lkIDAgPT09IHZhbHVlLAogICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgfTsKICAgICAgfQogICAgfTsKICAgIHJldHVybiBzdXBwb3J0X2l0ZXJhYmxlICYmIChpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gaXRlcmF0b3I7CiAgICB9KSwgaXRlcmF0b3I7CiAgfQoKICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHsKICAgIHRoaXMubWFwID0ge30sIGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzID8gaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkgewogICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSk7CiAgICB9LCB0aGlzKSA6IEFycmF5LmlzQXJyYXkoaGVhZGVycykgPyBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlcikgewogICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSk7CiAgICB9LCB0aGlzKSA6IGhlYWRlcnMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKTsKICAgIH0sIHRoaXMpOwogIH0KCiAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkgewogICAgaWYgKGJvZHkuYm9keVVzZWQpIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCJBbHJlYWR5IHJlYWQiKSk7CiAgICBib2R5LmJvZHlVc2VkID0gITA7CiAgfQoKICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdCk7CiAgICAgIH0sIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpOwogICAgICB9OwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikgewogICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCksCiAgICAgICAgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpOwogICAgcmV0dXJuIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKSwgcHJvbWlzZTsKICB9CgogIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHsKICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpLAogICAgICAgIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKTsKICAgIHJldHVybiByZWFkZXIucmVhZEFzVGV4dChibG9iKSwgcHJvbWlzZTsKICB9CgogIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHsKICAgIGZvciAodmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpLCBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aCksIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykgewogICAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSk7CiAgICB9CgogICAgcmV0dXJuIGNoYXJzLmpvaW4oIiIpOwogIH0KCiAgZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7CiAgICBpZiAoYnVmLnNsaWNlKSByZXR1cm4gYnVmLnNsaWNlKDApOwogICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aCk7CiAgICByZXR1cm4gdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSksIHZpZXcuYnVmZmVyOwogIH0KCiAgZnVuY3Rpb24gQm9keSgpIHsKICAgIHJldHVybiB0aGlzLmJvZHlVc2VkID0gITEsIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24gKGJvZHkpIHsKICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5LCBib2R5ID8gInN0cmluZyIgPT0gdHlwZW9mIGJvZHkgPyB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgOiBzdXBwb3J0X2Jsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSA/IHRoaXMuX2JvZHlCbG9iID0gYm9keSA6IHN1cHBvcnRfZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgPyB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5IDogc3VwcG9ydF9zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpID8gdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKCkgOiBzdXBwb3J0X2FycmF5QnVmZmVyICYmIHN1cHBvcnRfYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpID8gKHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKSwgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpIDogc3VwcG9ydF9hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpID8gdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSkgOiB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSkgOiB0aGlzLl9ib2R5VGV4dCA9ICIiLCB0aGlzLmhlYWRlcnMuZ2V0KCJjb250ZW50LXR5cGUiKSB8fCAoInN0cmluZyIgPT0gdHlwZW9mIGJvZHkgPyB0aGlzLmhlYWRlcnMuc2V0KCJjb250ZW50LXR5cGUiLCAidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04IikgOiB0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlID8gdGhpcy5oZWFkZXJzLnNldCgiY29udGVudC10eXBlIiwgdGhpcy5fYm9keUJsb2IudHlwZSkgOiBzdXBwb3J0X3NlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgJiYgdGhpcy5oZWFkZXJzLnNldCgiY29udGVudC10eXBlIiwgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04IikpOwogICAgfSwgc3VwcG9ydF9ibG9iICYmICh0aGlzLmJsb2IgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpOwogICAgICBpZiAocmVqZWN0ZWQpIHJldHVybiByZWplY3RlZDsKICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKTsKICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpOwogICAgICBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB0aHJvdyBuZXcgRXJyb3IoImNvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYiIpOwogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKTsKICAgIH0sIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPyBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKSA6IHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKTsKICAgIH0pLCB0aGlzLnRleHQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpOwogICAgICBpZiAocmVqZWN0ZWQpIHJldHVybiByZWplY3RlZDsKICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpOwogICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKTsKICAgICAgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkgdGhyb3cgbmV3IEVycm9yKCJjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQiKTsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dCk7CiAgICB9LCBzdXBwb3J0X2Zvcm1EYXRhICYmICh0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUkMSk7CiAgICB9KSwgdGhpcy5qc29uID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKTsKICAgIH0sIHRoaXM7CiAgfQoKICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHsKICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpLCB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTsKICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdOwogICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgIiwgIiArIHZhbHVlIDogdmFsdWU7CiAgfSwgSGVhZGVycy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXTsKICB9LCBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobmFtZSkgewogICAgcmV0dXJuIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpLCB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbDsKICB9LCBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAobmFtZSkgewogICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpOwogIH0sIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7CiAgfSwgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykgewogICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkgewogICAgICB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKTsKICAgIH0KICB9LCBIZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGl0ZW1zID0gW107CiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkgewogICAgICBpdGVtcy5wdXNoKG5hbWUpOwogICAgfSksIGl0ZXJhdG9yRm9yKGl0ZW1zKTsKICB9LCBIZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgaXRlbXMgPSBbXTsKICAgIHJldHVybiB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgIGl0ZW1zLnB1c2godmFsdWUpOwogICAgfSksIGl0ZXJhdG9yRm9yKGl0ZW1zKTsKICB9LCBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGl0ZW1zID0gW107CiAgICByZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkgewogICAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pOwogICAgfSksIGl0ZXJhdG9yRm9yKGl0ZW1zKTsKICB9LCBzdXBwb3J0X2l0ZXJhYmxlICYmIChIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyk7CiAgdmFyIG1ldGhvZHMgPSBbIkRFTEVURSIsICJHRVQiLCAiSEVBRCIsICJPUFRJT05TIiwgIlBPU1QiLCAiUFVUIl07CgogIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHsKICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7CiAgICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kOwogIH0KCiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykgewogICAgdmFyIGJvZHkgPSAob3B0aW9ucyA9IG9wdGlvbnMgfHwge30pLmJvZHk7CgogICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkgewogICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHRocm93IG5ldyBUeXBlRXJyb3IoIkFscmVhZHkgcmVhZCIpOwogICAgICB0aGlzLnVybCA9IGlucHV0LnVybCwgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzLCBvcHRpb25zLmhlYWRlcnMgfHwgKHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpKSwgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2QsIHRoaXMubW9kZSA9IGlucHV0Lm1vZGUsIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsLCBib2R5IHx8IG51bGwgPT0gaW5wdXQuX2JvZHlJbml0IHx8IChib2R5ID0gaW5wdXQuX2JvZHlJbml0LCBpbnB1dC5ib2R5VXNlZCA9ICEwKTsKICAgIH0gZWxzZSB0aGlzLnVybCA9IFN0cmluZyhpbnB1dCk7CgogICAgaWYgKHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgInNhbWUtb3JpZ2luIiwgIW9wdGlvbnMuaGVhZGVycyAmJiB0aGlzLmhlYWRlcnMgfHwgKHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycykpLCB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAiR0VUIiksIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbCwgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbCwgdGhpcy5yZWZlcnJlciA9IG51bGwsICgiR0VUIiA9PT0gdGhpcy5tZXRob2QgfHwgIkhFQUQiID09PSB0aGlzLm1ldGhvZCkgJiYgYm9keSkgdGhyb3cgbmV3IFR5cGVFcnJvcigiQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMiKTsKCiAgICB0aGlzLl9pbml0Qm9keShib2R5KTsKICB9CgogIGZ1bmN0aW9uIGRlY29kZSQxKGJvZHkpIHsKICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKCk7CiAgICByZXR1cm4gYm9keS50cmltKCkuc3BsaXQoIiYiKS5mb3JFYWNoKGZ1bmN0aW9uIChieXRlcykgewogICAgICBpZiAoYnl0ZXMpIHsKICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgiPSIpLAogICAgICAgICAgICBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cKy9nLCAiICIpLAogICAgICAgICAgICB2YWx1ZSA9IHNwbGl0LmpvaW4oIj0iKS5yZXBsYWNlKC9cKy9nLCAiICIpOwogICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7CiAgICAgIH0KICAgIH0pLCBmb3JtOwogIH0KCiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHsKICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKSwKICAgICAgICBwcmVQcm9jZXNzZWRIZWFkZXJzOwogICAgcmV0dXJuIHJhd0hlYWRlcnMucmVwbGFjZSgvXHI/XG5bXHQgXSsvZywgIiAiKS5zcGxpdCgvXHI/XG4vKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7CiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoIjoiKSwKICAgICAgICAgIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpOwoKICAgICAgaWYgKGtleSkgewogICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oIjoiKS50cmltKCk7CiAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSk7CiAgICAgIH0KICAgIH0pLCBoZWFkZXJzOwogIH0KCiAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSksIHRoaXMudHlwZSA9ICJkZWZhdWx0IiwgdGhpcy5zdGF0dXMgPSB2b2lkIDAgPT09IG9wdGlvbnMuc3RhdHVzID8gMjAwIDogb3B0aW9ucy5zdGF0dXMsIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDAsIHRoaXMuc3RhdHVzVGV4dCA9ICJzdGF0dXNUZXh0IiBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogIk9LIiwgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKSwgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAiIiwgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpOwogIH0KCiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywgewogICAgICBib2R5OiB0aGlzLl9ib2R5SW5pdAogICAgfSk7CiAgfSwgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKSwgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSksIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHsKICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cywKICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LAogICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLAogICAgICB1cmw6IHRoaXMudXJsCiAgICB9KTsKICB9LCBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7CiAgICAgIHN0YXR1czogMCwKICAgICAgc3RhdHVzVGV4dDogIiIKICAgIH0pOwogICAgcmV0dXJuIHJlc3BvbnNlLnR5cGUgPSAiZXJyb3IiLCByZXNwb25zZTsKICB9OwogIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XTsKCiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbiAodXJsLCBzdGF0dXMpIHsKICAgIGlmICgtMSA9PT0gcmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykpIHRocm93IG5ldyBSYW5nZUVycm9yKCJJbnZhbGlkIHN0YXR1cyBjb2RlIik7CiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHsKICAgICAgc3RhdHVzOiBzdGF0dXMsCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBsb2NhdGlvbjogdXJsCiAgICAgIH0KICAgIH0pOwogIH07CgogIHZhciBET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvbjsKCiAgdHJ5IHsKICAgIG5ldyBET01FeGNlcHRpb24oKTsKICB9IGNhdGNoIChlcnIpIHsKICAgIChET01FeGNlcHRpb24gPSBmdW5jdGlvbiBET01FeGNlcHRpb24obWVzc2FnZSwgbmFtZSkgewogICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLCB0aGlzLm5hbWUgPSBuYW1lOwogICAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKTsKICAgICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrOwogICAgfSkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpLCBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uOwogIH0KCiAgZnVuY3Rpb24gZmV0Y2gkMShpbnB1dCwgaW5pdCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdCk7CiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oIkFib3J0ZWQiLCAiQWJvcnRFcnJvciIpKTsKICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoKICAgICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7CiAgICAgICAgeGhyLmFib3J0KCk7CiAgICAgIH0KCiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG9wdGlvbnMgPSB7CiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsCiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCwKICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgIiIpCiAgICAgICAgfTsKICAgICAgICBvcHRpb25zLnVybCA9ICJyZXNwb25zZVVSTCIgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgiWC1SZXF1ZXN0LVVSTCIpOwogICAgICAgIHZhciBib2R5ID0gInJlc3BvbnNlIiBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0OwogICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKTsKICAgICAgfSwgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoIk5ldHdvcmsgcmVxdWVzdCBmYWlsZWQiKSk7CiAgICAgIH0sIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoIk5ldHdvcmsgcmVxdWVzdCBmYWlsZWQiKSk7CiAgICAgIH0sIHhoci5vbmFib3J0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCJBYm9ydGVkIiwgIkFib3J0RXJyb3IiKSk7CiAgICAgIH0sIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgITApLCAiaW5jbHVkZSIgPT09IHJlcXVlc3QuY3JlZGVudGlhbHMgPyB4aHIud2l0aENyZWRlbnRpYWxzID0gITAgOiAib21pdCIgPT09IHJlcXVlc3QuY3JlZGVudGlhbHMgJiYgKHhoci53aXRoQ3JlZGVudGlhbHMgPSAhMSksICJyZXNwb25zZVR5cGUiIGluIHhociAmJiBzdXBwb3J0X2Jsb2IgJiYgKHhoci5yZXNwb25zZVR5cGUgPSAiYmxvYiIpLCByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG5hbWUpIHsKICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSk7CiAgICAgIH0pLCByZXF1ZXN0LnNpZ25hbCAmJiAocmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcigiYWJvcnQiLCBhYm9ydFhociksIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgNCA9PT0geGhyLnJlYWR5U3RhdGUgJiYgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYWJvcnQiLCBhYm9ydFhocik7CiAgICAgIH0pLCB4aHIuc2VuZCh2b2lkIDAgPT09IHJlcXVlc3QuX2JvZHlJbml0ID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KTsKICAgIH0pOwogIH0KCiAgZmV0Y2gkMS5wb2x5ZmlsbCA9ICEwLCBzZWxmLmZldGNoIHx8IChzZWxmLmZldGNoID0gZmV0Y2gkMSwgc2VsZi5IZWFkZXJzID0gSGVhZGVycywgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdCwgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlKTsKCiAgdmFyIE8gPSAib2JqZWN0IiwKICAgICAgY2hlY2sgPSBmdW5jdGlvbiBjaGVjayhpdCkgewogICAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDsKICB9LAogICAgICBnbG9iYWxfMSA9IGNoZWNrKCh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YyKGdsb2JhbFRoaXMpKSA9PSBPICYmIGdsb2JhbFRoaXMpIHx8IGNoZWNrKCh0eXBlb2Ygd2luZG93ID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZjIod2luZG93KSkgPT0gTyAmJiB3aW5kb3cpIHx8IGNoZWNrKCh0eXBlb2Ygc2VsZiA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YyKHNlbGYpKSA9PSBPICYmIHNlbGYpIHx8IGNoZWNrKF90eXBlb2YyKGNvbW1vbmpzR2xvYmFsKSA9PSBPICYmIGNvbW1vbmpzR2xvYmFsKSB8fCBGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpLAogICAgICBmYWlscyA9IGZ1bmN0aW9uIGZhaWxzKGV4ZWMpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiAhIWV4ZWMoKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIHJldHVybiAhMDsKICAgIH0KICB9LAogICAgICBkZXNjcmlwdG9ycyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gNyAhPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICJhIiwgewogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gNzsKICAgICAgfQogICAgfSkuYTsKICB9KSwKICAgICAgaXNPYmplY3QkMSA9IGZ1bmN0aW9uIGlzT2JqZWN0JDEoaXQpIHsKICAgIHJldHVybiAib2JqZWN0IiA9PSBfdHlwZW9mMihpdCkgPyBudWxsICE9PSBpdCA6ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGl0OwogIH0sCiAgICAgIGRvY3VtZW50JDEgPSBnbG9iYWxfMS5kb2N1bWVudCwKICAgICAgRVhJU1RTID0gaXNPYmplY3QkMShkb2N1bWVudCQxKSAmJiBpc09iamVjdCQxKGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudCksCiAgICAgIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIGRvY3VtZW50Q3JlYXRlRWxlbWVudChpdCkgewogICAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudChpdCkgOiB7fTsKICB9LAogICAgICBpZThEb21EZWZpbmUgPSAhZGVzY3JpcHRvcnMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiA3ICE9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudENyZWF0ZUVsZW1lbnQoImRpdiIpLCAiYSIsIHsKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIDc7CiAgICAgIH0KICAgIH0pLmE7CiAgfSksCiAgICAgIGFuT2JqZWN0ID0gZnVuY3Rpb24gYW5PYmplY3QoaXQpIHsKICAgIGlmICghaXNPYmplY3QkMShpdCkpIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgIiBpcyBub3QgYW4gb2JqZWN0Iik7CiAgICByZXR1cm4gaXQ7CiAgfSwKICAgICAgdG9QcmltaXRpdmUgPSBmdW5jdGlvbiB0b1ByaW1pdGl2ZShpbnB1dCwgUFJFRkVSUkVEX1NUUklORykgewogICAgaWYgKCFpc09iamVjdCQxKGlucHV0KSkgcmV0dXJuIGlucHV0OwogICAgdmFyIGZuLCB2YWw7CiAgICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0JDEodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsOwogICAgaWYgKCJmdW5jdGlvbiIgPT0gdHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCQxKHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDsKICAgIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0JDEodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsOwogICAgdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUiKTsKICB9LAogICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwKICAgICAgZiwKICAgICAgb2JqZWN0RGVmaW5lUHJvcGVydHkgPSB7CiAgICBmOiBkZXNjcmlwdG9ycyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykgewogICAgICBpZiAoYW5PYmplY3QoTyksIFAgPSB0b1ByaW1pdGl2ZShQLCAhMCksIGFuT2JqZWN0KEF0dHJpYnV0ZXMpLCBpZThEb21EZWZpbmUpIHRyeSB7CiAgICAgICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpOwogICAgICB9IGNhdGNoIChlcnJvcikge30KICAgICAgaWYgKCJnZXQiIGluIEF0dHJpYnV0ZXMgfHwgInNldCIgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCIpOwogICAgICByZXR1cm4gInZhbHVlIiBpbiBBdHRyaWJ1dGVzICYmIChPW1BdID0gQXR0cmlidXRlcy52YWx1ZSksIE87CiAgICB9CiAgfSwKICAgICAgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKGJpdG1hcCwgdmFsdWUpIHsKICAgIHJldHVybiB7CiAgICAgIGVudW1lcmFibGU6ICEoMSAmIGJpdG1hcCksCiAgICAgIGNvbmZpZ3VyYWJsZTogISgyICYgYml0bWFwKSwKICAgICAgd3JpdGFibGU6ICEoNCAmIGJpdG1hcCksCiAgICAgIHZhbHVlOiB2YWx1ZQogICAgfTsKICB9LAogICAgICBoaWRlID0gZGVzY3JpcHRvcnMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7CiAgICByZXR1cm4gb2JqZWN0RGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7CiAgfSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHsKICAgIHJldHVybiBvYmplY3Rba2V5XSA9IHZhbHVlLCBvYmplY3Q7CiAgfSwKICAgICAgc2V0R2xvYmFsID0gZnVuY3Rpb24gc2V0R2xvYmFsKGtleSwgdmFsdWUpIHsKICAgIHRyeSB7CiAgICAgIGhpZGUoZ2xvYmFsXzEsIGtleSwgdmFsdWUpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgZ2xvYmFsXzFba2V5XSA9IHZhbHVlOwogICAgfQoKICAgIHJldHVybiB2YWx1ZTsKICB9LAogICAgICBpc1B1cmUgPSAhMSwKICAgICAgc2hhcmVkID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkgewogICAgdmFyIFNIQVJFRCA9ICJfX2NvcmUtanNfc2hhcmVkX18iLAogICAgICAgIHN0b3JlID0gZ2xvYmFsXzFbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7CiAgICAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZvaWQgMCAhPT0gdmFsdWUgPyB2YWx1ZSA6IHt9KTsKICAgIH0pKCJ2ZXJzaW9ucyIsIFtdKS5wdXNoKHsKICAgICAgdmVyc2lvbjogIjMuMS4zIiwKICAgICAgbW9kZTogImdsb2JhbCIsCiAgICAgIGNvcHlyaWdodDogIsOCwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSIKICAgIH0pOwogIH0pLAogICAgICBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5LAogICAgICBoYXMgPSBmdW5jdGlvbiBoYXMoaXQsIGtleSkgewogICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7CiAgfSwKICAgICAgZnVuY3Rpb25Ub1N0cmluZyA9IHNoYXJlZCgibmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZyIsIEZ1bmN0aW9uLnRvU3RyaW5nKSwKICAgICAgV2Vha01hcCA9IGdsb2JhbF8xLldlYWtNYXAsCiAgICAgIG5hdGl2ZVdlYWtNYXAgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBXZWFrTWFwICYmIC9uYXRpdmUgY29kZS8udGVzdChmdW5jdGlvblRvU3RyaW5nLmNhbGwoV2Vha01hcCkpLAogICAgICBpZCA9IDAsCiAgICAgIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpLAogICAgICB1aWQgPSBmdW5jdGlvbiB1aWQoa2V5KSB7CiAgICByZXR1cm4gIlN5bWJvbCgiICsgU3RyaW5nKHZvaWQgMCA9PT0ga2V5ID8gIiIgOiBrZXkpICsgIilfIiArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpOwogIH0sCiAgICAgIGtleXMgPSBzaGFyZWQoImtleXMiKSwKICAgICAgc2hhcmVkS2V5ID0gZnVuY3Rpb24gc2hhcmVkS2V5KGtleSkgewogICAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpOwogIH0sCiAgICAgIGhpZGRlbktleXMgPSB7fSwKICAgICAgV2Vha01hcCQxID0gZ2xvYmFsXzEuV2Vha01hcCwKICAgICAgc2V0LAogICAgICBnZXQsCiAgICAgIGhhcyQxLAogICAgICBlbmZvcmNlID0gZnVuY3Rpb24gZW5mb3JjZShpdCkgewogICAgcmV0dXJuIGhhcyQxKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTsKICB9LAogICAgICBnZXR0ZXJGb3IgPSBmdW5jdGlvbiBnZXR0ZXJGb3IoVFlQRSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChpdCkgewogICAgICB2YXIgc3RhdGU7CiAgICAgIGlmICghaXNPYmplY3QkMShpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCJJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICIgKyBUWVBFICsgIiByZXF1aXJlZCIpOwogICAgICByZXR1cm4gc3RhdGU7CiAgICB9OwogIH07CgogIGlmIChuYXRpdmVXZWFrTWFwKSB7CiAgICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCQxKCksCiAgICAgICAgd21nZXQgPSBzdG9yZS5nZXQsCiAgICAgICAgd21oYXMgPSBzdG9yZS5oYXMsCiAgICAgICAgd21zZXQgPSBzdG9yZS5zZXQ7CiAgICBzZXQgPSBmdW5jdGlvbiBzZXQoaXQsIG1ldGFkYXRhKSB7CiAgICAgIHJldHVybiB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpLCBtZXRhZGF0YTsKICAgIH0sIGdldCA9IGZ1bmN0aW9uIGdldChpdCkgewogICAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9OwogICAgfSwgaGFzJDEgPSBmdW5jdGlvbiBoYXMkMShpdCkgewogICAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpOwogICAgfTsKICB9IGVsc2UgewogICAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCJzdGF0ZSIpOwogICAgaGlkZGVuS2V5c1tTVEFURV0gPSAhMCwgc2V0ID0gZnVuY3Rpb24gc2V0KGl0LCBtZXRhZGF0YSkgewogICAgICByZXR1cm4gaGlkZShpdCwgU1RBVEUsIG1ldGFkYXRhKSwgbWV0YWRhdGE7CiAgICB9LCBnZXQgPSBmdW5jdGlvbiBnZXQoaXQpIHsKICAgICAgcmV0dXJuIGhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307CiAgICB9LCBoYXMkMSA9IGZ1bmN0aW9uIGhhcyQxKGl0KSB7CiAgICAgIHJldHVybiBoYXMoaXQsIFNUQVRFKTsKICAgIH07CiAgfQoKICB2YXIgaW50ZXJuYWxTdGF0ZSA9IHsKICAgIHNldDogc2V0LAogICAgZ2V0OiBnZXQsCiAgICBoYXM6IGhhcyQxLAogICAgZW5mb3JjZTogZW5mb3JjZSwKICAgIGdldHRlckZvcjogZ2V0dGVyRm9yCiAgfSwKICAgICAgcmVkZWZpbmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7CiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGUuZ2V0LAogICAgICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZS5lbmZvcmNlLAogICAgICAgIFRFTVBMQVRFID0gU3RyaW5nKGZ1bmN0aW9uVG9TdHJpbmcpLnNwbGl0KCJ0b1N0cmluZyIpOwogICAgc2hhcmVkKCJpbnNwZWN0U291cmNlIiwgZnVuY3Rpb24gKGl0KSB7CiAgICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpOwogICAgfSksIChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7CiAgICAgIHZhciB1bnNhZmUgPSAhIW9wdGlvbnMgJiYgISFvcHRpb25zLnVuc2FmZSwKICAgICAgICAgIHNpbXBsZSA9ICEhb3B0aW9ucyAmJiAhIW9wdGlvbnMuZW51bWVyYWJsZSwKICAgICAgICAgIG5vVGFyZ2V0R2V0ID0gISFvcHRpb25zICYmICEhb3B0aW9ucy5ub1RhcmdldEdldDsKICAgICAgImZ1bmN0aW9uIiA9PSB0eXBlb2YgdmFsdWUgJiYgKCJzdHJpbmciICE9IHR5cGVvZiBrZXkgfHwgaGFzKHZhbHVlLCAibmFtZSIpIHx8IGhpZGUodmFsdWUsICJuYW1lIiwga2V5KSwgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4oInN0cmluZyIgPT0gdHlwZW9mIGtleSA/IGtleSA6ICIiKSksIE8gIT09IGdsb2JhbF8xID8gKHVuc2FmZSA/ICFub1RhcmdldEdldCAmJiBPW2tleV0gJiYgKHNpbXBsZSA9ICEwKSA6IGRlbGV0ZSBPW2tleV0sIHNpbXBsZSA/IE9ba2V5XSA9IHZhbHVlIDogaGlkZShPLCBrZXksIHZhbHVlKSkgOiBzaW1wbGUgPyBPW2tleV0gPSB2YWx1ZSA6IHNldEdsb2JhbChrZXksIHZhbHVlKTsKICAgIH0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgInRvU3RyaW5nIiwgZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiB0aGlzICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGZ1bmN0aW9uVG9TdHJpbmcuY2FsbCh0aGlzKTsKICAgIH0pOwogIH0pLAogICAgICB0b1N0cmluZyA9IHt9LnRvU3RyaW5nLAogICAgICBjbGFzc29mUmF3ID0gZnVuY3Rpb24gY2xhc3NvZlJhdyhpdCkgewogICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTsKICB9LAogICAgICBuYXRpdmVTeW1ib2wgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTsKICB9KSwKICAgICAgU3ltYm9sJDEgPSBnbG9iYWxfMS5TeW1ib2wsCiAgICAgIHN0b3JlJDEgPSBzaGFyZWQoIndrcyIpLAogICAgICB3ZWxsS25vd25TeW1ib2wgPSBmdW5jdGlvbiB3ZWxsS25vd25TeW1ib2wobmFtZSkgewogICAgcmV0dXJuIHN0b3JlJDFbbmFtZV0gfHwgKHN0b3JlJDFbbmFtZV0gPSBuYXRpdmVTeW1ib2wgJiYgU3ltYm9sJDFbbmFtZV0gfHwgKG5hdGl2ZVN5bWJvbCA/IFN5bWJvbCQxIDogdWlkKSgiU3ltYm9sLiIgKyBuYW1lKSk7CiAgfSwKICAgICAgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgidG9TdHJpbmdUYWciKSwKICAgICAgQ09SUkVDVF9BUkdVTUVOVFMgPSAiQXJndW1lbnRzIiA9PSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBhcmd1bWVudHM7CiAgfSgpKSwKICAgICAgdHJ5R2V0ID0gZnVuY3Rpb24gdHJ5R2V0KGl0LCBrZXkpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiBpdFtrZXldOwogICAgfSBjYXRjaCAoZXJyb3IpIHt9CiAgfSwKICAgICAgY2xhc3NvZiA9IGZ1bmN0aW9uIGNsYXNzb2YoaXQpIHsKICAgIHZhciBPLCB0YWcsIHJlc3VsdDsKICAgIHJldHVybiB2b2lkIDAgPT09IGl0ID8gIlVuZGVmaW5lZCIgOiBudWxsID09PSBpdCA/ICJOdWxsIiA6ICJzdHJpbmciID09IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPyB0YWcgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTykgOiAiT2JqZWN0IiA9PSAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgTy5jYWxsZWUgPyAiQXJndW1lbnRzIiA6IHJlc3VsdDsKICB9LAogICAgICBUT19TVFJJTkdfVEFHJDEsCiAgICAgIHRlc3QgPSB7fTsKCiAgdGVzdFt3ZWxsS25vd25TeW1ib2woInRvU3RyaW5nVGFnIildID0gInoiOwogIHZhciBvYmplY3RUb1N0cmluZyA9ICJbb2JqZWN0IHpdIiAhPT0gU3RyaW5nKHRlc3QpID8gZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICByZXR1cm4gIltvYmplY3QgIiArIGNsYXNzb2YodGhpcykgKyAiXSI7CiAgfSA6IHRlc3QudG9TdHJpbmcsCiAgICAgIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7CiAgb2JqZWN0VG9TdHJpbmcgIT09IE9iamVjdFByb3RvdHlwZS50b1N0cmluZyAmJiByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICJ0b1N0cmluZyIsIG9iamVjdFRvU3RyaW5nLCB7CiAgICB1bnNhZmU6ICEwCiAgfSk7CgogIHZhciBjZWlsID0gTWF0aC5jZWlsLAogICAgICBmbG9vciA9IE1hdGguZmxvb3IsCiAgICAgIHRvSW50ZWdlciA9IGZ1bmN0aW9uIHRvSW50ZWdlcihhcmd1bWVudCkgewogICAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7CiAgfSwKICAgICAgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IGZ1bmN0aW9uIHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpIHsKICAgIGlmIChudWxsID09IGl0KSB0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICIgKyBpdCk7CiAgICByZXR1cm4gaXQ7CiAgfSwKICAgICAgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gY3JlYXRlTWV0aG9kKENPTlZFUlRfVE9fU1RSSU5HKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHsKICAgICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpLAogICAgICAgICAgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKSwKICAgICAgICAgIHNpemUgPSBTLmxlbmd0aCwKICAgICAgICAgIGZpcnN0LAogICAgICAgICAgc2Vjb25kOwogICAgICByZXR1cm4gcG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUgPyBDT05WRVJUX1RPX1NUUklORyA/ICIiIDogdm9pZCAwIDogKGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKSkgPCA1NTI5NiB8fCBmaXJzdCA+IDU2MzE5IHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZSB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgNTYzMjAgfHwgc2Vjb25kID4gNTczNDMgPyBDT05WRVJUX1RPX1NUUklORyA/IFMuY2hhckF0KHBvc2l0aW9uKSA6IGZpcnN0IDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogc2Vjb25kIC0gNTYzMjAgKyAoZmlyc3QgLSA1NTI5NiA8PCAxMCkgKyA2NTUzNjsKICAgIH07CiAgfSwKICAgICAgc3RyaW5nTXVsdGlieXRlID0gewogICAgY29kZUF0OiBjcmVhdGVNZXRob2QoITEpLAogICAgY2hhckF0OiBjcmVhdGVNZXRob2QoITApCiAgfSwKICAgICAgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSwKICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwKICAgICAgTkFTSE9STl9CVUcsCiAgICAgIGYkMSwKICAgICAgb2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUgPSB7CiAgICBmOiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoewogICAgICAxOiAyCiAgICB9LCAxKSA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHsKICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7CiAgICAgIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlOwogICAgfSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlCiAgfSwKICAgICAgc3BsaXQgPSAiIi5zcGxpdCwKICAgICAgaW5kZXhlZE9iamVjdCA9IGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAhT2JqZWN0KCJ6IikucHJvcGVydHlJc0VudW1lcmFibGUoMCk7CiAgfSkgPyBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiAiU3RyaW5nIiA9PSBjbGFzc29mUmF3KGl0KSA/IHNwbGl0LmNhbGwoaXQsICIiKSA6IE9iamVjdChpdCk7CiAgfSA6IE9iamVjdCwKICAgICAgdG9JbmRleGVkT2JqZWN0ID0gZnVuY3Rpb24gdG9JbmRleGVkT2JqZWN0KGl0KSB7CiAgICByZXR1cm4gaW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7CiAgfSwKICAgICAgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwKICAgICAgZiQyLAogICAgICBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSB7CiAgICBmOiBkZXNjcmlwdG9ycyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7CiAgICAgIGlmIChPID0gdG9JbmRleGVkT2JqZWN0KE8pLCBQID0gdG9QcmltaXRpdmUoUCwgITApLCBpZThEb21EZWZpbmUpIHRyeSB7CiAgICAgICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHt9CiAgICAgIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIW9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlLmYuY2FsbChPLCBQKSwgT1tQXSk7CiAgICB9CiAgfSwKICAgICAgcGF0aCA9IGdsb2JhbF8xLAogICAgICBhRnVuY3Rpb24gPSBmdW5jdGlvbiBhRnVuY3Rpb24odmFyaWFibGUpIHsKICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiB2YXJpYWJsZSA/IHZhcmlhYmxlIDogdm9pZCAwOwogIH0sCiAgICAgIGdldEJ1aWx0SW4gPSBmdW5jdGlvbiBnZXRCdWlsdEluKG5hbWVzcGFjZSwgbWV0aG9kKSB7CiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsXzFbbmFtZXNwYWNlXSkgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsXzFbbmFtZXNwYWNlXSAmJiBnbG9iYWxfMVtuYW1lc3BhY2VdW21ldGhvZF07CiAgfSwKICAgICAgbWluID0gTWF0aC5taW4sCiAgICAgIHRvTGVuZ3RoID0gZnVuY3Rpb24gdG9MZW5ndGgoYXJndW1lbnQpIHsKICAgIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgOTAwNzE5OTI1NDc0MDk5MSkgOiAwOwogIH0sCiAgICAgIG1heCA9IE1hdGgubWF4LAogICAgICBtaW4kMSA9IE1hdGgubWluLAogICAgICB0b0Fic29sdXRlSW5kZXggPSBmdW5jdGlvbiB0b0Fic29sdXRlSW5kZXgoaW5kZXgsIGxlbmd0aCkgewogICAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpOwogICAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluJDEoaW50ZWdlciwgbGVuZ3RoKTsKICB9LAogICAgICBjcmVhdGVNZXRob2QkMSA9IGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZCQxKElTX0lOQ0xVREVTKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7CiAgICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKSwKICAgICAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwKICAgICAgICAgIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKSwKICAgICAgICAgIHZhbHVlOwoKICAgICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB7CiAgICAgICAgZm9yICg7IGxlbmd0aCA+IGluZGV4OykgewogICAgICAgICAgaWYgKCh2YWx1ZSA9IE9baW5kZXgrK10pICE9IHZhbHVlKSByZXR1cm4gITA7CiAgICAgICAgfQogICAgICB9IGVsc2UgZm9yICg7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7CiAgICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwOwogICAgICB9CgogICAgICByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xOwogICAgfTsKICB9LAogICAgICBhcnJheUluY2x1ZGVzLAogICAgICBpbmRleE9mID0gewogICAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCQxKCEwKSwKICAgIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZCQxKCExKQogIH0uaW5kZXhPZiwKICAgICAgb2JqZWN0S2V5c0ludGVybmFsID0gZnVuY3Rpb24gb2JqZWN0S2V5c0ludGVybmFsKG9iamVjdCwgbmFtZXMpIHsKICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCksCiAgICAgICAgaSA9IDAsCiAgICAgICAgcmVzdWx0ID0gW10sCiAgICAgICAga2V5OwoKICAgIGZvciAoa2V5IGluIE8pIHsKICAgICAgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7CiAgICB9CgogICAgZm9yICg7IG5hbWVzLmxlbmd0aCA+IGk7KSB7CiAgICAgIGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAofmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSkpOwogICAgfQoKICAgIHJldHVybiByZXN1bHQ7CiAgfSwKICAgICAgZW51bUJ1Z0tleXMgPSBbImNvbnN0cnVjdG9yIiwgImhhc093blByb3BlcnR5IiwgImlzUHJvdG90eXBlT2YiLCAicHJvcGVydHlJc0VudW1lcmFibGUiLCAidG9Mb2NhbGVTdHJpbmciLCAidG9TdHJpbmciLCAidmFsdWVPZiJdLAogICAgICBoaWRkZW5LZXlzJDEgPSBlbnVtQnVnS2V5cy5jb25jYXQoImxlbmd0aCIsICJwcm90b3R5cGUiKSwKICAgICAgZiQzLAogICAgICBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzID0gewogICAgZjogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7CiAgICAgIHJldHVybiBvYmplY3RLZXlzSW50ZXJuYWwoTywgaGlkZGVuS2V5cyQxKTsKICAgIH0KICB9LAogICAgICBmJDQsCiAgICAgIG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyA9IHsKICAgIGY6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMKICB9LAogICAgICBvd25LZXlzID0gZ2V0QnVpbHRJbigiUmVmbGVjdCIsICJvd25LZXlzIikgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkgewogICAgdmFyIGtleXMgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzLmYoYW5PYmplY3QoaXQpKSwKICAgICAgICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMuZjsKICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7CiAgfSwKICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IGZ1bmN0aW9uIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXModGFyZ2V0LCBzb3VyY2UpIHsKICAgIGZvciAodmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSksIGRlZmluZVByb3BlcnR5ID0gb2JqZWN0RGVmaW5lUHJvcGVydHkuZiwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmYsIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIga2V5ID0ga2V5c1tpXTsKICAgICAgaGFzKHRhcmdldCwga2V5KSB8fCBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICB9CiAgfSwKICAgICAgcmVwbGFjZW1lbnQgPSAvI3xcLnByb3RvdHlwZVwuLywKICAgICAgaXNGb3JjZWQgPSBmdW5jdGlvbiBpc0ZvcmNlZChmZWF0dXJlLCBkZXRlY3Rpb24pIHsKICAgIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTsKICAgIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCB8fCB2YWx1ZSAhPSBOQVRJVkUgJiYgKCJmdW5jdGlvbiIgPT0gdHlwZW9mIGRldGVjdGlvbiA/IGZhaWxzKGRldGVjdGlvbikgOiAhIWRldGVjdGlvbik7CiAgfSwKICAgICAgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykgewogICAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICIuIikudG9Mb3dlckNhc2UoKTsKICB9LAogICAgICBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9LAogICAgICBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAiTiIsCiAgICAgIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAiUCIsCiAgICAgIGlzRm9yY2VkXzEgPSBpc0ZvcmNlZCwKICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuZiwKICAgICAgX2V4cG9ydCA9IGZ1bmN0aW9uIF9leHBvcnQob3B0aW9ucywgc291cmNlKSB7CiAgICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQsCiAgICAgICAgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWwsCiAgICAgICAgU1RBVElDID0gb3B0aW9ucy5zdGF0LAogICAgICAgIEZPUkNFRCwKICAgICAgICB0YXJnZXQsCiAgICAgICAga2V5LAogICAgICAgIHRhcmdldFByb3BlcnR5LAogICAgICAgIHNvdXJjZVByb3BlcnR5LAogICAgICAgIGRlc2NyaXB0b3I7CiAgICBpZiAodGFyZ2V0ID0gR0xPQkFMID8gZ2xvYmFsXzEgOiBTVEFUSUMgPyBnbG9iYWxfMVtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KSA6IChnbG9iYWxfMVtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGUpIGZvciAoa2V5IGluIHNvdXJjZSkgewogICAgICBpZiAoc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XSwgdGFyZ2V0UHJvcGVydHkgPSBvcHRpb25zLm5vVGFyZ2V0R2V0ID8gKGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSh0YXJnZXQsIGtleSkpICYmIGRlc2NyaXB0b3IudmFsdWUgOiB0YXJnZXRba2V5XSwgIShGT1JDRUQgPSBpc0ZvcmNlZF8xKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAiLiIgOiAiIyIpICsga2V5LCBvcHRpb25zLmZvcmNlZCkpICYmIHZvaWQgMCAhPT0gdGFyZ2V0UHJvcGVydHkpIHsKICAgICAgICBpZiAoX3R5cGVvZjIoc291cmNlUHJvcGVydHkpID09IF90eXBlb2YyKHRhcmdldFByb3BlcnR5KSkgY29udGludWU7CiAgICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpOwogICAgICB9CgogICAgICAob3B0aW9ucy5zaGFtIHx8IHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pICYmIGhpZGUoc291cmNlUHJvcGVydHksICJzaGFtIiwgITApLCByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpOwogICAgfQogIH0sCiAgICAgIHRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QoYXJndW1lbnQpIHsKICAgIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpOwogIH0sCiAgICAgIGNvcnJlY3RQcm90b3R5cGVHZXR0ZXIgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gRigpIHt9CgogICAgcmV0dXJuIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbCwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTsKICB9KSwKICAgICAgSUVfUFJPVE8gPSBzaGFyZWRLZXkoIklFX1BST1RPIiksCiAgICAgIE9iamVjdFByb3RvdHlwZSQxID0gT2JqZWN0LnByb3RvdHlwZSwKICAgICAgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSBjb3JyZWN0UHJvdG90eXBlR2V0dGVyID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHsKICAgIHJldHVybiBPID0gdG9PYmplY3QoTyksIGhhcyhPLCBJRV9QUk9UTykgPyBPW0lFX1BST1RPXSA6ICJmdW5jdGlvbiIgPT0gdHlwZW9mIE8uY29uc3RydWN0b3IgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IgPyBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA6IE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUkMSA6IG51bGw7CiAgfSwKICAgICAgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woIml0ZXJhdG9yIiksCiAgICAgIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSAhMSwKICAgICAgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uIHJldHVyblRoaXMoKSB7CiAgICByZXR1cm4gdGhpczsKICB9LAogICAgICBJdGVyYXRvclByb3RvdHlwZSwKICAgICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLAogICAgICBhcnJheUl0ZXJhdG9yOwoKICBbXS5rZXlzICYmICgibmV4dCIgaW4gKGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCkpID8gKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IG9iamVjdEdldFByb3RvdHlwZU9mKG9iamVjdEdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKSkgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgKEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlKSA6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSAhMCksIG51bGwgPT0gSXRlcmF0b3JQcm90b3R5cGUgJiYgKEl0ZXJhdG9yUHJvdG90eXBlID0ge30pLCBoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSB8fCBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7CgogIHZhciBpdGVyYXRvcnNDb3JlID0gewogICAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLAogICAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SUwogIH0sCiAgICAgIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHsKICAgIHJldHVybiBvYmplY3RLZXlzSW50ZXJuYWwoTywgZW51bUJ1Z0tleXMpOwogIH0sCiAgICAgIG9iamVjdERlZmluZVByb3BlcnRpZXMgPSBkZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7CiAgICBhbk9iamVjdChPKTsKCiAgICBmb3IgKHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKSwgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGluZGV4ID0gMCwga2V5OyBsZW5ndGggPiBpbmRleDspIHsKICAgICAgb2JqZWN0RGVmaW5lUHJvcGVydHkuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pOwogICAgfQoKICAgIHJldHVybiBPOwogIH0sCiAgICAgIGh0bWwgPSBnZXRCdWlsdEluKCJkb2N1bWVudCIsICJkb2N1bWVudEVsZW1lbnQiKSwKICAgICAgSUVfUFJPVE8kMSA9IHNoYXJlZEtleSgiSUVfUFJPVE8iKSwKICAgICAgUFJPVE9UWVBFID0gInByb3RvdHlwZSIsCiAgICAgIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fSwKICAgICAgX2NyZWF0ZURpY3QgPSBmdW5jdGlvbiBjcmVhdGVEaWN0KCkgewogICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgiaWZyYW1lIiksCiAgICAgICAgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoLAogICAgICAgIGx0ID0gIjwiLAogICAgICAgIHNjcmlwdCA9ICJzY3JpcHQiLAogICAgICAgIGd0ID0gIj4iLAogICAgICAgIGpzID0gImphdmFzY3JpcHQ6IiwKICAgICAgICBpZnJhbWVEb2N1bWVudDsKCiAgICBmb3IgKGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiLCBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSksIGlmcmFtZS5zcmMgPSBTdHJpbmcoanMpLCAoaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudCkub3BlbigpLCBpZnJhbWVEb2N1bWVudC53cml0ZSgiPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDxcL3NjcmlwdD4iKSwgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKSwgX2NyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GOyBsZW5ndGgtLTspIHsKICAgICAgZGVsZXRlIF9jcmVhdGVEaWN0LnByb3RvdHlwZVtlbnVtQnVnS2V5c1tsZW5ndGhdXTsKICAgIH0KCiAgICByZXR1cm4gX2NyZWF0ZURpY3QoKTsKICB9LAogICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7CiAgICB2YXIgcmVzdWx0OwogICAgcmV0dXJuIG51bGwgIT09IE8gPyAoRW1wdHkucHJvdG90eXBlID0gYW5PYmplY3QoTyksIHJlc3VsdCA9IG5ldyBFbXB0eSgpLCBFbXB0eS5wcm90b3R5cGUgPSBudWxsLCByZXN1bHRbSUVfUFJPVE8kMV0gPSBPKSA6IHJlc3VsdCA9IF9jcmVhdGVEaWN0KCksIHZvaWQgMCA9PT0gUHJvcGVydGllcyA/IHJlc3VsdCA6IG9iamVjdERlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTsKICB9OwoKICBoaWRkZW5LZXlzW0lFX1BST1RPJDFdID0gITA7CgogIHZhciBkZWZpbmVQcm9wZXJ0eSA9IG9iamVjdERlZmluZVByb3BlcnR5LmYsCiAgICAgIFRPX1NUUklOR19UQUckMiA9IHdlbGxLbm93blN5bWJvbCgidG9TdHJpbmdUYWciKSwKICAgICAgc2V0VG9TdHJpbmdUYWcgPSBmdW5jdGlvbiBzZXRUb1N0cmluZ1RhZyhpdCwgVEFHLCBTVEFUSUMpIHsKICAgIGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRyQyKSAmJiBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRyQyLCB7CiAgICAgIGNvbmZpZ3VyYWJsZTogITAsCiAgICAgIHZhbHVlOiBUQUcKICAgIH0pOwogIH0sCiAgICAgIGl0ZXJhdG9ycyA9IHt9LAogICAgICBJdGVyYXRvclByb3RvdHlwZSQxID0gaXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZSwKICAgICAgcmV0dXJuVGhpcyQxID0gZnVuY3Rpb24gcmV0dXJuVGhpcyQxKCkgewogICAgcmV0dXJuIHRoaXM7CiAgfSwKICAgICAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkgewogICAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgIiBJdGVyYXRvciI7CiAgICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBvYmplY3RDcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUkMSwgewogICAgICBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkKICAgIH0pLCBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCAhMSksIGl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXMkMSwgSXRlcmF0b3JDb25zdHJ1Y3RvcjsKICB9LAogICAgICBhUG9zc2libGVQcm90b3R5cGUgPSBmdW5jdGlvbiBhUG9zc2libGVQcm90b3R5cGUoaXQpIHsKICAgIGlmICghaXNPYmplY3QkMShpdCkgJiYgbnVsbCAhPT0gaXQpIHRocm93IFR5cGVFcnJvcigiQ2FuJ3Qgc2V0ICIgKyBTdHJpbmcoaXQpICsgIiBhcyBhIHByb3RvdHlwZSIpOwogICAgcmV0dXJuIGl0OwogIH0sCiAgICAgIG9iamVjdFNldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgiX19wcm90b19fIiBpbiB7fSA/IGZ1bmN0aW9uICgpIHsKICAgIHZhciBDT1JSRUNUX1NFVFRFUiA9ICExLAogICAgICAgIHRlc3QgPSB7fSwKICAgICAgICBzZXR0ZXI7CgogICAgdHJ5IHsKICAgICAgKHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgIl9fcHJvdG9fXyIpLnNldCkuY2FsbCh0ZXN0LCBbXSksIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5OwogICAgfSBjYXRjaCAoZXJyb3IpIHt9CgogICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7CiAgICAgIHJldHVybiBhbk9iamVjdChPKSwgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKSwgQ09SUkVDVF9TRVRURVIgPyBzZXR0ZXIuY2FsbChPLCBwcm90bykgOiBPLl9fcHJvdG9fXyA9IHByb3RvLCBPOwogICAgfTsKICB9KCkgOiB2b2lkIDApLAogICAgICBJdGVyYXRvclByb3RvdHlwZSQyID0gaXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZSwKICAgICAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyQxID0gaXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTLAogICAgICBJVEVSQVRPUiQxID0gd2VsbEtub3duU3ltYm9sKCJpdGVyYXRvciIpLAogICAgICBLRVlTID0gImtleXMiLAogICAgICBWQUxVRVMgPSAidmFsdWVzIiwKICAgICAgRU5UUklFUyA9ICJlbnRyaWVzIiwKICAgICAgcmV0dXJuVGhpcyQyID0gZnVuY3Rpb24gcmV0dXJuVGhpcyQyKCkgewogICAgcmV0dXJuIHRoaXM7CiAgfSwKICAgICAgZGVmaW5lSXRlcmF0b3IgPSBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvcihJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHsKICAgIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7CgogICAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIGdldEl0ZXJhdGlvbk1ldGhvZChLSU5EKSB7CiAgICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjsKICAgICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTJDEgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdOwoKICAgICAgc3dpdGNoIChLSU5EKSB7CiAgICAgICAgY2FzZSBLRVlTOgogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsKICAgICAgICAgIH07CgogICAgICAgIGNhc2UgVkFMVUVTOgogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOwogICAgICAgICAgfTsKCiAgICAgICAgY2FzZSBFTlRSSUVTOgogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsKICAgICAgICAgIH07CiAgICAgIH0KCiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOwogICAgICB9OwogICAgfSwKICAgICAgICBUT19TVFJJTkdfVEFHID0gTkFNRSArICIgSXRlcmF0b3IiLAogICAgICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9ICExLAogICAgICAgIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlLAogICAgICAgIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1IkMV0gfHwgSXRlcmFibGVQcm90b3R5cGVbIkBAaXRlcmF0b3IiXSB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdLAogICAgICAgIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTJDEgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpLAogICAgICAgIGFueU5hdGl2ZUl0ZXJhdG9yID0gIkFycmF5IiA9PSBOQU1FICYmIEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IsCiAgICAgICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLAogICAgICAgIG1ldGhvZHMsCiAgICAgICAgS0VZOwoKICAgIGlmIChhbnlOYXRpdmVJdGVyYXRvciAmJiAoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gb2JqZWN0R2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpLCBJdGVyYXRvclByb3RvdHlwZSQyICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0ICYmIChvYmplY3RHZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSQyICYmIChvYmplY3RTZXRQcm90b3R5cGVPZiA/IG9iamVjdFNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUkMikgOiAiZnVuY3Rpb24iICE9IHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1IkMV0gJiYgaGlkZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SJDEsIHJldHVyblRoaXMkMikpLCBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsICEwKSkpLCBERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMgJiYgKElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9ICEwLCBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7CiAgICAgIHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpOwogICAgfSksIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SJDFdICE9PSBkZWZhdWx0SXRlcmF0b3IgJiYgaGlkZShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IkMSwgZGVmYXVsdEl0ZXJhdG9yKSwgaXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yLCBERUZBVUxUKSBpZiAobWV0aG9kcyA9IHsKICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSwKICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLAogICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUykKICAgIH0sIEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykgewogICAgICAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyQxICYmICFJTkNPUlJFQ1RfVkFMVUVTX05BTUUgJiYgS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlIHx8IHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7CiAgICB9IGVsc2UgX2V4cG9ydCh7CiAgICAgIHRhcmdldDogTkFNRSwKICAgICAgcHJvdG86ICEwLAogICAgICBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMkMSB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUKICAgIH0sIG1ldGhvZHMpOwogICAgcmV0dXJuIG1ldGhvZHM7CiAgfSwKICAgICAgY2hhckF0ID0gc3RyaW5nTXVsdGlieXRlLmNoYXJBdCwKICAgICAgU1RSSU5HX0lURVJBVE9SID0gIlN0cmluZyBJdGVyYXRvciIsCiAgICAgIHNldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlLnNldCwKICAgICAgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7CgogIGRlZmluZUl0ZXJhdG9yKFN0cmluZywgIlN0cmluZyIsIGZ1bmN0aW9uIChpdGVyYXRlZCkgewogICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7CiAgICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUiwKICAgICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLAogICAgICBpbmRleDogMAogICAgfSk7CiAgfSwgZnVuY3Rpb24gbmV4dCgpIHsKICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyksCiAgICAgICAgc3RyaW5nID0gc3RhdGUuc3RyaW5nLAogICAgICAgIGluZGV4ID0gc3RhdGUuaW5kZXgsCiAgICAgICAgcG9pbnQ7CiAgICByZXR1cm4gaW5kZXggPj0gc3RyaW5nLmxlbmd0aCA/IHsKICAgICAgdmFsdWU6IHZvaWQgMCwKICAgICAgZG9uZTogITAKICAgIH0gOiAocG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCksIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aCwgewogICAgICB2YWx1ZTogcG9pbnQsCiAgICAgIGRvbmU6ICExCiAgICB9KTsKICB9KTsKICB2YXIgZG9tSXRlcmFibGVzID0gewogICAgQ1NTUnVsZUxpc3Q6IDAsCiAgICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLAogICAgQ1NTVmFsdWVMaXN0OiAwLAogICAgQ2xpZW50UmVjdExpc3Q6IDAsCiAgICBET01SZWN0TGlzdDogMCwKICAgIERPTVN0cmluZ0xpc3Q6IDAsCiAgICBET01Ub2tlbkxpc3Q6IDEsCiAgICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCwKICAgIEZpbGVMaXN0OiAwLAogICAgSFRNTEFsbENvbGxlY3Rpb246IDAsCiAgICBIVE1MQ29sbGVjdGlvbjogMCwKICAgIEhUTUxGb3JtRWxlbWVudDogMCwKICAgIEhUTUxTZWxlY3RFbGVtZW50OiAwLAogICAgTWVkaWFMaXN0OiAwLAogICAgTWltZVR5cGVBcnJheTogMCwKICAgIE5hbWVkTm9kZU1hcDogMCwKICAgIE5vZGVMaXN0OiAxLAogICAgUGFpbnRSZXF1ZXN0TGlzdDogMCwKICAgIFBsdWdpbjogMCwKICAgIFBsdWdpbkFycmF5OiAwLAogICAgU1ZHTGVuZ3RoTGlzdDogMCwKICAgIFNWR051bWJlckxpc3Q6IDAsCiAgICBTVkdQYXRoU2VnTGlzdDogMCwKICAgIFNWR1BvaW50TGlzdDogMCwKICAgIFNWR1N0cmluZ0xpc3Q6IDAsCiAgICBTVkdUcmFuc2Zvcm1MaXN0OiAwLAogICAgU291cmNlQnVmZmVyTGlzdDogMCwKICAgIFN0eWxlU2hlZXRMaXN0OiAwLAogICAgVGV4dFRyYWNrQ3VlTGlzdDogMCwKICAgIFRleHRUcmFja0xpc3Q6IDAsCiAgICBUb3VjaExpc3Q6IDAKICB9LAogICAgICBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgidW5zY29wYWJsZXMiKSwKICAgICAgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7CiAgbnVsbCA9PSBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gJiYgaGlkZShBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIG9iamVjdENyZWF0ZShudWxsKSk7CgogIHZhciBhZGRUb1Vuc2NvcGFibGVzID0gZnVuY3Rpb24gYWRkVG9VbnNjb3BhYmxlcyhrZXkpIHsKICAgIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gITA7CiAgfSwKICAgICAgQVJSQVlfSVRFUkFUT1IgPSAiQXJyYXkgSXRlcmF0b3IiLAogICAgICBzZXRJbnRlcm5hbFN0YXRlJDEgPSBpbnRlcm5hbFN0YXRlLnNldCwKICAgICAgZ2V0SW50ZXJuYWxTdGF0ZSQxID0gaW50ZXJuYWxTdGF0ZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpLAogICAgICBlc19hcnJheV9pdGVyYXRvciA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAiQXJyYXkiLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHsKICAgIHNldEludGVybmFsU3RhdGUkMSh0aGlzLCB7CiAgICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLAogICAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksCiAgICAgIGluZGV4OiAwLAogICAgICBraW5kOiBraW5kCiAgICB9KTsKICB9LCBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlJDEodGhpcyksCiAgICAgICAgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0LAogICAgICAgIGtpbmQgPSBzdGF0ZS5raW5kLAogICAgICAgIGluZGV4ID0gc3RhdGUuaW5kZXgrKzsKICAgIHJldHVybiAhdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGggPyAoc3RhdGUudGFyZ2V0ID0gdm9pZCAwLCB7CiAgICAgIHZhbHVlOiB2b2lkIDAsCiAgICAgIGRvbmU6ICEwCiAgICB9KSA6ICJrZXlzIiA9PSBraW5kID8gewogICAgICB2YWx1ZTogaW5kZXgsCiAgICAgIGRvbmU6ICExCiAgICB9IDogInZhbHVlcyIgPT0ga2luZCA/IHsKICAgICAgdmFsdWU6IHRhcmdldFtpbmRleF0sCiAgICAgIGRvbmU6ICExCiAgICB9IDogewogICAgICB2YWx1ZTogW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwKICAgICAgZG9uZTogITEKICAgIH07CiAgfSwgInZhbHVlcyIpOwoKICBpdGVyYXRvcnMuQXJndW1lbnRzID0gaXRlcmF0b3JzLkFycmF5LCBhZGRUb1Vuc2NvcGFibGVzKCJrZXlzIiksIGFkZFRvVW5zY29wYWJsZXMoInZhbHVlcyIpLCBhZGRUb1Vuc2NvcGFibGVzKCJlbnRyaWVzIik7CiAgdmFyIElURVJBVE9SJDIgPSB3ZWxsS25vd25TeW1ib2woIml0ZXJhdG9yIiksCiAgICAgIFRPX1NUUklOR19UQUckMyA9IHdlbGxLbm93blN5bWJvbCgidG9TdHJpbmdUYWciKSwKICAgICAgQXJyYXlWYWx1ZXMgPSBlc19hcnJheV9pdGVyYXRvci52YWx1ZXM7CgogIGZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBkb21JdGVyYWJsZXMpIHsKICAgIHZhciBDb2xsZWN0aW9uJDEgPSBnbG9iYWxfMVtDT0xMRUNUSU9OX05BTUVdLAogICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uJDEgJiYgQ29sbGVjdGlvbiQxLnByb3RvdHlwZTsKCiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkgewogICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUiQyXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7CiAgICAgICAgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiQyLCBBcnJheVZhbHVlcyk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUiQyXSA9IEFycmF5VmFsdWVzOwogICAgICB9CiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUckM10gfHwgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHJDMsIENPTExFQ1RJT05fTkFNRSksIGRvbUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBlc19hcnJheV9pdGVyYXRvcikgewogICAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gZXNfYXJyYXlfaXRlcmF0b3JbTUVUSE9EX05BTUVdKSB0cnkgewogICAgICAgICAgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgZXNfYXJyYXlfaXRlcmF0b3JbTUVUSE9EX05BTUVdKTsKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBlc19hcnJheV9pdGVyYXRvcltNRVRIT0RfTkFNRV07CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICB2YXIgcmVkZWZpbmVBbGwgPSBmdW5jdGlvbiByZWRlZmluZUFsbCh0YXJnZXQsIHNyYywgb3B0aW9ucykgewogICAgZm9yICh2YXIga2V5IGluIHNyYykgewogICAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpOwogICAgfQoKICAgIHJldHVybiB0YXJnZXQ7CiAgfSwKICAgICAgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgic3BlY2llcyIpLAogICAgICBzZXRTcGVjaWVzID0gZnVuY3Rpb24gc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKSB7CiAgICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpLAogICAgICAgIGRlZmluZVByb3BlcnR5ID0gb2JqZWN0RGVmaW5lUHJvcGVydHkuZjsKICAgIGRlc2NyaXB0b3JzICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSAmJiBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywgewogICAgICBjb25maWd1cmFibGU6ICEwLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgfSk7CiAgfSwKICAgICAgYUZ1bmN0aW9uJDEgPSBmdW5jdGlvbiBhRnVuY3Rpb24kMShpdCkgewogICAgaWYgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIGl0KSB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICIgaXMgbm90IGEgZnVuY3Rpb24iKTsKICAgIHJldHVybiBpdDsKICB9LAogICAgICBhbkluc3RhbmNlID0gZnVuY3Rpb24gYW5JbnN0YW5jZShpdCwgQ29uc3RydWN0b3IsIG5hbWUpIHsKICAgIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB0aHJvdyBUeXBlRXJyb3IoIkluY29ycmVjdCAiICsgKG5hbWUgPyBuYW1lICsgIiAiIDogIiIpICsgImludm9jYXRpb24iKTsKICAgIHJldHVybiBpdDsKICB9LAogICAgICBJVEVSQVRPUiQzID0gd2VsbEtub3duU3ltYm9sKCJpdGVyYXRvciIpLAogICAgICBBcnJheVByb3RvdHlwZSQxID0gQXJyYXkucHJvdG90eXBlLAogICAgICBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXQpIHsKICAgIHJldHVybiB2b2lkIDAgIT09IGl0ICYmIChpdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlJDFbSVRFUkFUT1IkM10gPT09IGl0KTsKICB9LAogICAgICBiaW5kQ29udGV4dCA9IGZ1bmN0aW9uIGJpbmRDb250ZXh0KGZuLCB0aGF0LCBsZW5ndGgpIHsKICAgIGlmIChhRnVuY3Rpb24kMShmbiksIHZvaWQgMCA9PT0gdGhhdCkgcmV0dXJuIGZuOwoKICAgIHN3aXRjaCAobGVuZ3RoKSB7CiAgICAgIGNhc2UgMDoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7CiAgICAgICAgfTsKCiAgICAgIGNhc2UgMToKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpOwogICAgICAgIH07CgogICAgICBjYXNlIDI6CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTsKICAgICAgICB9OwoKICAgICAgY2FzZSAzOgogICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7CiAgICAgICAgfTsKICAgIH0KCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTsKICAgIH07CiAgfSwKICAgICAgSVRFUkFUT1IkNCA9IHdlbGxLbm93blN5bWJvbCgiaXRlcmF0b3IiKSwKICAgICAgZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiBnZXRJdGVyYXRvck1ldGhvZChpdCkgewogICAgaWYgKG51bGwgIT0gaXQpIHJldHVybiBpdFtJVEVSQVRPUiQ0XSB8fCBpdFsiQEBpdGVyYXRvciJdIHx8IGl0ZXJhdG9yc1tjbGFzc29mKGl0KV07CiAgfSwKICAgICAgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IGZ1bmN0aW9uIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvci5yZXR1cm47CiAgICAgIHRocm93IHZvaWQgMCAhPT0gcmV0dXJuTWV0aG9kICYmIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSksIGVycm9yOwogICAgfQogIH0sCiAgICAgIGl0ZXJhdGVfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHsKICAgIHZhciBSZXN1bHQgPSBmdW5jdGlvbiBSZXN1bHQoc3RvcHBlZCwgcmVzdWx0KSB7CiAgICAgIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQsIHRoaXMucmVzdWx0ID0gcmVzdWx0OwogICAgfSwKICAgICAgICBpdGVyYXRlOwoKICAgIChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZm4sIHRoYXQsIEFTX0VOVFJJRVMsIElTX0lURVJBVE9SKSB7CiAgICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZENvbnRleHQoZm4sIHRoYXQsIEFTX0VOVFJJRVMgPyAyIDogMSksCiAgICAgICAgICBpdGVyYXRvciwKICAgICAgICAgIGl0ZXJGbiwKICAgICAgICAgIGluZGV4LAogICAgICAgICAgbGVuZ3RoLAogICAgICAgICAgcmVzdWx0LAogICAgICAgICAgc3RlcDsKICAgICAgaWYgKElTX0lURVJBVE9SKSBpdGVyYXRvciA9IGl0ZXJhYmxlO2Vsc2UgewogICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiAoaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpKSkgdGhyb3cgVHlwZUVycm9yKCJUYXJnZXQgaXMgbm90IGl0ZXJhYmxlIik7CgogICAgICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkgewogICAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7CiAgICAgICAgICAgIGlmICgocmVzdWx0ID0gQVNfRU5UUklFUyA/IGJvdW5kRnVuY3Rpb24oYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogYm91bmRGdW5jdGlvbihpdGVyYWJsZVtpbmRleF0pKSAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQoITEpOwogICAgICAgIH0KCiAgICAgICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7CiAgICAgIH0KCiAgICAgIGZvciAoOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7CiAgICAgICAgaWYgKChyZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKSkgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0OwogICAgICB9CgogICAgICByZXR1cm4gbmV3IFJlc3VsdCghMSk7CiAgICB9KS5zdG9wID0gZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICByZXR1cm4gbmV3IFJlc3VsdCghMCwgcmVzdWx0KTsKICAgIH07CiAgfSksCiAgICAgIElURVJBVE9SJDUgPSB3ZWxsS25vd25TeW1ib2woIml0ZXJhdG9yIiksCiAgICAgIFNBRkVfQ0xPU0lORyA9ICExOwoKICB0cnkgewogICAgdmFyIGNhbGxlZCA9IDAsCiAgICAgICAgaXRlcmF0b3JXaXRoUmV0dXJuID0gewogICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBkb25lOiAhIWNhbGxlZCsrCiAgICAgICAgfTsKICAgICAgfSwKICAgICAgcmV0dXJuOiBmdW5jdGlvbiBfcmV0dXJuKCkgewogICAgICAgIFNBRkVfQ0xPU0lORyA9ICEwOwogICAgICB9CiAgICB9OwogICAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SJDVdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdGhpczsKICAgIH0sIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7CiAgICAgIHRocm93IDI7CiAgICB9KTsKICB9IGNhdGNoIChlcnJvcikge30KCiAgdmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IGZ1bmN0aW9uIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihleGVjLCBTS0lQX0NMT1NJTkcpIHsKICAgIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiAhMTsKICAgIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9ICExOwoKICAgIHRyeSB7CiAgICAgIHZhciBvYmplY3QgPSB7fTsKICAgICAgb2JqZWN0W0lURVJBVE9SJDVdID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gITAKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9LCBleGVjKG9iamVjdCk7CiAgICB9IGNhdGNoIChlcnJvcikge30KCiAgICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7CiAgfSwKICAgICAgU1BFQ0lFUyQxID0gd2VsbEtub3duU3ltYm9sKCJzcGVjaWVzIiksCiAgICAgIHNwZWNpZXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHsKICAgIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3IsCiAgICAgICAgUzsKICAgIHJldHVybiB2b2lkIDAgPT09IEMgfHwgbnVsbCA9PSAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVMkMV0pID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uJDEoUyk7CiAgfSwKICAgICAgbG9jYXRpb24kMSA9IGdsb2JhbF8xLmxvY2F0aW9uLAogICAgICBzZXQkMSA9IGdsb2JhbF8xLnNldEltbWVkaWF0ZSwKICAgICAgY2xlYXIgPSBnbG9iYWxfMS5jbGVhckltbWVkaWF0ZSwKICAgICAgcHJvY2VzcyA9IGdsb2JhbF8xLnByb2Nlc3MsCiAgICAgIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsXzEuTWVzc2FnZUNoYW5uZWwsCiAgICAgIERpc3BhdGNoID0gZ2xvYmFsXzEuRGlzcGF0Y2gsCiAgICAgIGNvdW50ZXIgPSAwLAogICAgICBxdWV1ZSA9IHt9LAogICAgICBPTlJFQURZU1RBVEVDSEFOR0UgPSAib25yZWFkeXN0YXRlY2hhbmdlIiwKICAgICAgZGVmZXIsCiAgICAgIGNoYW5uZWwsCiAgICAgIHBvcnQsCiAgICAgIHJ1biA9IGZ1bmN0aW9uIHJ1bihpZCkgewogICAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkgewogICAgICB2YXIgZm4gPSBxdWV1ZVtpZF07CiAgICAgIGRlbGV0ZSBxdWV1ZVtpZF0sIGZuKCk7CiAgICB9CiAgfSwKICAgICAgcnVubmVyID0gZnVuY3Rpb24gcnVubmVyKGlkKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBydW4oaWQpOwogICAgfTsKICB9LAogICAgICBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKGV2ZW50KSB7CiAgICBydW4oZXZlbnQuZGF0YSk7CiAgfSwKICAgICAgcG9zdCA9IGZ1bmN0aW9uIHBvc3QoaWQpIHsKICAgIGdsb2JhbF8xLnBvc3RNZXNzYWdlKGlkICsgIiIsIGxvY2F0aW9uJDEucHJvdG9jb2wgKyAiLy8iICsgbG9jYXRpb24kMS5ob3N0KTsKICB9OwoKICBzZXQkMSAmJiBjbGVhciB8fCAoc2V0JDEgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHsKICAgIGZvciAodmFyIGFyZ3MgPSBbXSwgaSA9IDE7IGFyZ3VtZW50cy5sZW5ndGggPiBpOykgewogICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOwogICAgfQoKICAgIHJldHVybiBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkgewogICAgICAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgZm4gPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodm9pZCAwLCBhcmdzKTsKICAgIH0sIGRlZmVyKGNvdW50ZXIpLCBjb3VudGVyOwogIH0sIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHsKICAgIGRlbGV0ZSBxdWV1ZVtpZF07CiAgfSwgInByb2Nlc3MiID09IGNsYXNzb2ZSYXcocHJvY2VzcykgPyBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGlkKSB7CiAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpOwogIH0gOiBEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cgPyBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGlkKSB7CiAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7CiAgfSA6IE1lc3NhZ2VDaGFubmVsID8gKHBvcnQgPSAoY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpKS5wb3J0MiwgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lciwgZGVmZXIgPSBiaW5kQ29udGV4dChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKSkgOiAhZ2xvYmFsXzEuYWRkRXZlbnRMaXN0ZW5lciB8fCAiZnVuY3Rpb24iICE9IHR5cGVvZiBwb3N0TWVzc2FnZSB8fCBnbG9iYWxfMS5pbXBvcnRTY3JpcHRzIHx8IGZhaWxzKHBvc3QpID8gZGVmZXIgPSBPTlJFQURZU1RBVEVDSEFOR0UgaW4gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCJzY3JpcHQiKSA/IGZ1bmN0aW9uIChpZCkgewogICAgaHRtbC5hcHBlbmRDaGlsZChkb2N1bWVudENyZWF0ZUVsZW1lbnQoInNjcmlwdCIpKS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyksIHJ1bihpZCk7CiAgICB9OwogIH0gOiBmdW5jdGlvbiAoaWQpIHsKICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7CiAgfSA6IChkZWZlciA9IHBvc3QsIGdsb2JhbF8xLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBsaXN0ZW5lciwgITEpKSk7CiAgdmFyIHRhc2sgPSB7CiAgICBzZXQ6IHNldCQxLAogICAgY2xlYXI6IGNsZWFyCiAgfSwKICAgICAgdXNlckFnZW50ID0gZ2V0QnVpbHRJbigibmF2aWdhdG9yIiwgInVzZXJBZ2VudCIpIHx8ICIiLAogICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMiA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mLAogICAgICBtYWNyb3Rhc2sgPSB0YXNrLnNldCwKICAgICAgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbF8xLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsXzEuV2ViS2l0TXV0YXRpb25PYnNlcnZlciwKICAgICAgcHJvY2VzcyQxID0gZ2xvYmFsXzEucHJvY2VzcywKICAgICAgUHJvbWlzZSQxID0gZ2xvYmFsXzEuUHJvbWlzZSwKICAgICAgSVNfTk9ERSA9ICJwcm9jZXNzIiA9PSBjbGFzc29mUmF3KHByb2Nlc3MkMSksCiAgICAgIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciQyKGdsb2JhbF8xLCAicXVldWVNaWNyb3Rhc2siKSwKICAgICAgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlLAogICAgICBmbHVzaCwKICAgICAgaGVhZCwKICAgICAgbGFzdCwKICAgICAgbm90aWZ5LAogICAgICB0b2dnbGUsCiAgICAgIG5vZGUsCiAgICAgIHByb21pc2U7CiAgcXVldWVNaWNyb3Rhc2sgfHwgKGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7CiAgICB2YXIgcGFyZW50LCBmbjsKCiAgICBmb3IgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MkMS5kb21haW4pICYmIHBhcmVudC5leGl0KCk7IGhlYWQ7KSB7CiAgICAgIGZuID0gaGVhZC5mbiwgaGVhZCA9IGhlYWQubmV4dDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm4oKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICB0aHJvdyBoZWFkID8gbm90aWZ5KCkgOiBsYXN0ID0gdm9pZCAwLCBlcnJvcjsKICAgICAgfQogICAgfQoKICAgIGxhc3QgPSB2b2lkIDAsIHBhcmVudCAmJiBwYXJlbnQuZW50ZXIoKTsKICB9LCBJU19OT0RFID8gbm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KCkgewogICAgcHJvY2VzcyQxLm5leHRUaWNrKGZsdXNoKTsKICB9IDogTXV0YXRpb25PYnNlcnZlciAmJiAhLyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCkgPyAodG9nZ2xlID0gITAsIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgiIiksIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsKICAgIGNoYXJhY3RlckRhdGE6ICEwCiAgfSksIG5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSgpIHsKICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7CiAgfSkgOiBQcm9taXNlJDEgJiYgUHJvbWlzZSQxLnJlc29sdmUgPyAocHJvbWlzZSA9IFByb21pc2UkMS5yZXNvbHZlKHZvaWQgMCksIG5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSgpIHsKICAgIHByb21pc2UudGhlbihmbHVzaCk7CiAgfSkgOiBub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkoKSB7CiAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWxfMSwgZmx1c2gpOwogIH0pOwoKICB2YXIgbWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7CiAgICB2YXIgdGFzayA9IHsKICAgICAgZm46IGZuLAogICAgICBuZXh0OiB2b2lkIDAKICAgIH07CiAgICBsYXN0ICYmIChsYXN0Lm5leHQgPSB0YXNrKSwgaGVhZCB8fCAoaGVhZCA9IHRhc2ssIG5vdGlmeSgpKSwgbGFzdCA9IHRhc2s7CiAgfSwKICAgICAgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7CiAgICB2YXIgcmVzb2x2ZSwgcmVqZWN0OwogICAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHsKICAgICAgaWYgKHZvaWQgMCAhPT0gcmVzb2x2ZSB8fCB2b2lkIDAgIT09IHJlamVjdCkgdGhyb3cgVHlwZUVycm9yKCJCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvciIpOwogICAgICByZXNvbHZlID0gJCRyZXNvbHZlLCByZWplY3QgPSAkJHJlamVjdDsKICAgIH0pLCB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24kMShyZXNvbHZlKSwgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24kMShyZWplY3QpOwogIH0sCiAgICAgIGYkNSwKICAgICAgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSB7CiAgICBmOiBmdW5jdGlvbiBmKEMpIHsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTsKICAgIH0KICB9LAogICAgICBwcm9taXNlUmVzb2x2ZSA9IGZ1bmN0aW9uIHByb21pc2VSZXNvbHZlKEMsIHgpIHsKICAgIGlmIChhbk9iamVjdChDKSwgaXNPYmplY3QkMSh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDsKICAgIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyksCiAgICAgICAgcmVzb2x2ZTsKICAgIHJldHVybiAoMCwgcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkoeCksIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7CiAgfSwKICAgICAgaG9zdFJlcG9ydEVycm9ycyA9IGZ1bmN0aW9uIGhvc3RSZXBvcnRFcnJvcnMoYSwgYikgewogICAgdmFyIGNvbnNvbGUgPSBnbG9iYWxfMS5jb25zb2xlOwogICAgY29uc29sZSAmJiBjb25zb2xlLmVycm9yICYmICgxID09PSBhcmd1bWVudHMubGVuZ3RoID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYikpOwogIH0sCiAgICAgIHBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKGV4ZWMpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZXJyb3I6ICExLAogICAgICAgIHZhbHVlOiBleGVjKCkKICAgICAgfTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZXJyb3I6ICEwLAogICAgICAgIHZhbHVlOiBlcnJvcgogICAgICB9OwogICAgfQogIH0sCiAgICAgIHRhc2skMSA9IHRhc2suc2V0LAogICAgICBTUEVDSUVTJDIgPSB3ZWxsS25vd25TeW1ib2woInNwZWNpZXMiKSwKICAgICAgUFJPTUlTRSA9ICJQcm9taXNlIiwKICAgICAgZ2V0SW50ZXJuYWxTdGF0ZSQyID0gaW50ZXJuYWxTdGF0ZS5nZXQsCiAgICAgIHNldEludGVybmFsU3RhdGUkMiA9IGludGVybmFsU3RhdGUuc2V0LAogICAgICBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IGludGVybmFsU3RhdGUuZ2V0dGVyRm9yKFBST01JU0UpLAogICAgICBQcm9taXNlQ29uc3RydWN0b3IgPSBnbG9iYWxfMS5Qcm9taXNlLAogICAgICBUeXBlRXJyb3IkMSA9IGdsb2JhbF8xLlR5cGVFcnJvciwKICAgICAgZG9jdW1lbnQkMiA9IGdsb2JhbF8xLmRvY3VtZW50LAogICAgICBwcm9jZXNzJDIgPSBnbG9iYWxfMS5wcm9jZXNzLAogICAgICAkZmV0Y2ggPSBnbG9iYWxfMS5mZXRjaCwKICAgICAgdmVyc2lvbnMgPSBwcm9jZXNzJDIgJiYgcHJvY2VzcyQyLnZlcnNpb25zLAogICAgICB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICIiLAogICAgICBuZXdQcm9taXNlQ2FwYWJpbGl0eSQxID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZiwKICAgICAgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkkMSwKICAgICAgSVNfTk9ERSQxID0gInByb2Nlc3MiID09IGNsYXNzb2ZSYXcocHJvY2VzcyQyKSwKICAgICAgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCQyICYmIGRvY3VtZW50JDIuY3JlYXRlRXZlbnQgJiYgZ2xvYmFsXzEuZGlzcGF0Y2hFdmVudCksCiAgICAgIFVOSEFORExFRF9SRUpFQ1RJT04gPSAidW5oYW5kbGVkcmVqZWN0aW9uIiwKICAgICAgUkVKRUNUSU9OX0hBTkRMRUQgPSAicmVqZWN0aW9uaGFuZGxlZCIsCiAgICAgIFBFTkRJTkcgPSAwLAogICAgICBGVUxGSUxMRUQgPSAxLAogICAgICBSRUpFQ1RFRCA9IDIsCiAgICAgIEhBTkRMRUQgPSAxLAogICAgICBVTkhBTkRMRUQgPSAyLAogICAgICBJbnRlcm5hbCwKICAgICAgT3duUHJvbWlzZUNhcGFiaWxpdHksCiAgICAgIFByb21pc2VXcmFwcGVyLAogICAgICBGT1JDRUQgPSBpc0ZvcmNlZF8xKFBST01JU0UsIGZ1bmN0aW9uICgpIHsKICAgIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSksCiAgICAgICAgZW1wdHkgPSBmdW5jdGlvbiBlbXB0eSgpIHt9LAogICAgICAgIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbU1BFQ0lFUyQyXSA9IGZ1bmN0aW9uIChleGVjKSB7CiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTsKICAgIH07CgogICAgcmV0dXJuICEoKElTX05PREUkMSB8fCAiZnVuY3Rpb24iID09IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSAmJiAwICE9PSB2OC5pbmRleE9mKCI2LjYiKSAmJiAtMSA9PT0gdXNlckFnZW50LmluZGV4T2YoIkNocm9tZS82NiIpKTsKICB9KSwKICAgICAgSU5DT1JSRUNUX0lURVJBVElPTiA9IEZPUkNFRCB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkgewogICAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSkuY2F0Y2goZnVuY3Rpb24gKCkge30pOwogIH0pLAogICAgICBpc1RoZW5hYmxlID0gZnVuY3Rpb24gaXNUaGVuYWJsZShpdCkgewogICAgdmFyIHRoZW47CiAgICByZXR1cm4gISghaXNPYmplY3QkMShpdCkgfHwgImZ1bmN0aW9uIiAhPSB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSkgJiYgdGhlbjsKICB9LAogICAgICBub3RpZnkkMSA9IGZ1bmN0aW9uIG5vdGlmeSQxKHByb21pc2UsIHN0YXRlLCBpc1JlamVjdCkgewogICAgaWYgKCFzdGF0ZS5ub3RpZmllZCkgewogICAgICBzdGF0ZS5ub3RpZmllZCA9ICEwOwogICAgICB2YXIgY2hhaW4gPSBzdGF0ZS5yZWFjdGlvbnM7CiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7CiAgICAgICAgZm9yICh2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZSwgb2sgPSAxID09IHN0YXRlLnN0YXRlLCBpbmRleCA9IDA7IGNoYWluLmxlbmd0aCA+IGluZGV4OykgewogICAgICAgICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK10sCiAgICAgICAgICAgICAgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsLAogICAgICAgICAgICAgIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlLAogICAgICAgICAgICAgIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdCwKICAgICAgICAgICAgICBkb21haW4gPSByZWFjdGlvbi5kb21haW4sCiAgICAgICAgICAgICAgcmVzdWx0LAogICAgICAgICAgICAgIHRoZW4sCiAgICAgICAgICAgICAgZXhpdGVkOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGhhbmRsZXIgPyAob2sgfHwgKDIgPT09IHN0YXRlLnJlamVjdGlvbiAmJiBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSksIHN0YXRlLnJlamVjdGlvbiA9IDEpLCAhMCA9PT0gaGFuZGxlciA/IHJlc3VsdCA9IHZhbHVlIDogKGRvbWFpbiAmJiBkb21haW4uZW50ZXIoKSwgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSksIGRvbWFpbiAmJiAoZG9tYWluLmV4aXQoKSwgZXhpdGVkID0gITApKSwgcmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlID8gcmVqZWN0KFR5cGVFcnJvciQxKCJQcm9taXNlLWNoYWluIGN5Y2xlIikpIDogKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpID8gdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KSA6IHJlc29sdmUocmVzdWx0KSkgOiByZWplY3QodmFsdWUpOwogICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgZG9tYWluICYmICFleGl0ZWQgJiYgZG9tYWluLmV4aXQoKSwgcmVqZWN0KGVycm9yKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdLCBzdGF0ZS5ub3RpZmllZCA9ICExLCBpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uICYmIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTsKICAgICAgfSk7CiAgICB9CiAgfSwKICAgICAgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7CiAgICB2YXIgZXZlbnQsIGhhbmRsZXI7CiAgICBESVNQQVRDSF9FVkVOVCA/ICgoZXZlbnQgPSBkb2N1bWVudCQyLmNyZWF0ZUV2ZW50KCJFdmVudCIpKS5wcm9taXNlID0gcHJvbWlzZSwgZXZlbnQucmVhc29uID0gcmVhc29uLCBldmVudC5pbml0RXZlbnQobmFtZSwgITEsICEwKSwgZ2xvYmFsXzEuZGlzcGF0Y2hFdmVudChldmVudCkpIDogZXZlbnQgPSB7CiAgICAgIHByb21pc2U6IHByb21pc2UsCiAgICAgIHJlYXNvbjogcmVhc29uCiAgICB9LCAoaGFuZGxlciA9IGdsb2JhbF8xWyJvbiIgKyBuYW1lXSkgPyBoYW5kbGVyKGV2ZW50KSA6IG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04gJiYgaG9zdFJlcG9ydEVycm9ycygiVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uIiwgcmVhc29uKTsKICB9LAogICAgICBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKSB7CiAgICB0YXNrJDEuY2FsbChnbG9iYWxfMSwgZnVuY3Rpb24gKCkgewogICAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZSwKICAgICAgICAgIElTX1VOSEFORExFRCwKICAgICAgICAgIHJlc3VsdDsKICAgICAgaWYgKGlzVW5oYW5kbGVkKHN0YXRlKSAmJiAocmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7CiAgICAgICAgSVNfTk9ERSQxID8gcHJvY2VzcyQyLmVtaXQoInVuaGFuZGxlZFJlamVjdGlvbiIsIHZhbHVlLCBwcm9taXNlKSA6IGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpOwogICAgICB9KSwgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSQxIHx8IGlzVW5oYW5kbGVkKHN0YXRlKSA/IDIgOiAxLCByZXN1bHQuZXJyb3IpKSB0aHJvdyByZXN1bHQudmFsdWU7CiAgICB9KTsKICB9LAogICAgICBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIGlzVW5oYW5kbGVkKHN0YXRlKSB7CiAgICByZXR1cm4gMSAhPT0gc3RhdGUucmVqZWN0aW9uICYmICFzdGF0ZS5wYXJlbnQ7CiAgfSwKICAgICAgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSkgewogICAgdGFzayQxLmNhbGwoZ2xvYmFsXzEsIGZ1bmN0aW9uICgpIHsKICAgICAgSVNfTk9ERSQxID8gcHJvY2VzcyQyLmVtaXQoInJlamVjdGlvbkhhbmRsZWQiLCBwcm9taXNlKSA6IGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTsKICAgIH0pOwogIH0sCiAgICAgIGJpbmQgPSBmdW5jdGlvbiBiaW5kKGZuLCBwcm9taXNlLCBzdGF0ZSwgdW53cmFwKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTsKICAgIH07CiAgfSwKICAgICAgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiBpbnRlcm5hbFJlamVjdChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkgewogICAgc3RhdGUuZG9uZSB8fCAoc3RhdGUuZG9uZSA9ICEwLCB1bndyYXAgJiYgKHN0YXRlID0gdW53cmFwKSwgc3RhdGUudmFsdWUgPSB2YWx1ZSwgc3RhdGUuc3RhdGUgPSAyLCBub3RpZnkkMShwcm9taXNlLCBzdGF0ZSwgITApKTsKICB9LAogICAgICBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiBpbnRlcm5hbFJlc29sdmUocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApIHsKICAgIGlmICghc3RhdGUuZG9uZSkgewogICAgICBzdGF0ZS5kb25lID0gITAsIHVud3JhcCAmJiAoc3RhdGUgPSB1bndyYXApOwoKICAgICAgdHJ5IHsKICAgICAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvciQxKCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOwogICAgICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7CiAgICAgICAgdGhlbiA/IG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgd3JhcHBlciA9IHsKICAgICAgICAgICAgZG9uZTogITEKICAgICAgICAgIH07CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgd3JhcHBlciwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSkpOwogICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgd3JhcHBlciwgZXJyb3IsIHN0YXRlKTsKICAgICAgICAgIH0KICAgICAgICB9KSA6IChzdGF0ZS52YWx1ZSA9IHZhbHVlLCBzdGF0ZS5zdGF0ZSA9IDEsIG5vdGlmeSQxKHByb21pc2UsIHN0YXRlLCAhMSkpOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHsKICAgICAgICAgIGRvbmU6ICExCiAgICAgICAgfSwgZXJyb3IsIHN0YXRlKTsKICAgICAgfQogICAgfQogIH07CgogIEZPUkNFRCAmJiAoUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikgewogICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpLCBhRnVuY3Rpb24kMShleGVjdXRvciksIEludGVybmFsLmNhbGwodGhpcyk7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlJDIodGhpcyk7CgogICAgdHJ5IHsKICAgICAgZXhlY3V0b3IoYmluZChpbnRlcm5hbFJlc29sdmUsIHRoaXMsIHN0YXRlKSwgYmluZChpbnRlcm5hbFJlamVjdCwgdGhpcywgc3RhdGUpKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGludGVybmFsUmVqZWN0KHRoaXMsIHN0YXRlLCBlcnJvcik7CiAgICB9CiAgfSwgKEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikgewogICAgc2V0SW50ZXJuYWxTdGF0ZSQyKHRoaXMsIHsKICAgICAgdHlwZTogUFJPTUlTRSwKICAgICAgZG9uZTogITEsCiAgICAgIG5vdGlmaWVkOiAhMSwKICAgICAgcGFyZW50OiAhMSwKICAgICAgcmVhY3Rpb25zOiBbXSwKICAgICAgcmVqZWN0aW9uOiAhMSwKICAgICAgc3RhdGU6IDAsCiAgICAgIHZhbHVlOiB2b2lkIDAKICAgIH0pOwogIH0pLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHsKICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHsKICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyksCiAgICAgICAgICByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5JDEoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpOwogICAgICByZXR1cm4gcmVhY3Rpb24ub2sgPSAiZnVuY3Rpb24iICE9IHR5cGVvZiBvbkZ1bGZpbGxlZCB8fCBvbkZ1bGZpbGxlZCwgcmVhY3Rpb24uZmFpbCA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIG9uUmVqZWN0ZWQgJiYgb25SZWplY3RlZCwgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSQxID8gcHJvY2VzcyQyLmRvbWFpbiA6IHZvaWQgMCwgc3RhdGUucGFyZW50ID0gITAsIHN0YXRlLnJlYWN0aW9ucy5wdXNoKHJlYWN0aW9uKSwgMCAhPSBzdGF0ZS5zdGF0ZSAmJiBub3RpZnkkMSh0aGlzLCBzdGF0ZSwgITEpLCByZWFjdGlvbi5wcm9taXNlOwogICAgfSwKICAgIGNhdGNoOiBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3RlZCkgewogICAgICByZXR1cm4gdGhpcy50aGVuKHZvaWQgMCwgb25SZWplY3RlZCk7CiAgICB9CiAgfSksIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gT3duUHJvbWlzZUNhcGFiaWxpdHkoKSB7CiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpLAogICAgICAgIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSQyKHByb21pc2UpOwogICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZSwgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHByb21pc2UsIHN0YXRlKSwgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCBzdGF0ZSk7CiAgfSwgbmV3UHJvbWlzZUNhcGFiaWxpdHkuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5JDEgPSBmdW5jdGlvbiBuZXdQcm9taXNlQ2FwYWJpbGl0eSQxKEMpIHsKICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQykgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7CiAgfSwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgJGZldGNoICYmIF9leHBvcnQoewogICAgZ2xvYmFsOiAhMCwKICAgIGVudW1lcmFibGU6ICEwLAogICAgZm9yY2VkOiAhMAogIH0sIHsKICAgIGZldGNoOiBmdW5jdGlvbiBmZXRjaChpbnB1dCkgewogICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsXzEsIGFyZ3VtZW50cykpOwogICAgfQogIH0pKSwgX2V4cG9ydCh7CiAgICBnbG9iYWw6ICEwLAogICAgd3JhcDogITAsCiAgICBmb3JjZWQ6IEZPUkNFRAogIH0sIHsKICAgIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvcgogIH0pLCBzZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsICExKSwgc2V0U3BlY2llcyhQUk9NSVNFKSwgUHJvbWlzZVdyYXBwZXIgPSBwYXRoLlByb21pc2UsIF9leHBvcnQoewogICAgdGFyZ2V0OiBQUk9NSVNFLAogICAgc3RhdDogITAsCiAgICBmb3JjZWQ6IEZPUkNFRAogIH0sIHsKICAgIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHsKICAgICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSQxKHRoaXMpOwogICAgICByZXR1cm4gY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh2b2lkIDAsIHIpLCBjYXBhYmlsaXR5LnByb21pc2U7CiAgICB9CiAgfSksIF9leHBvcnQoewogICAgdGFyZ2V0OiBQUk9NSVNFLAogICAgc3RhdDogITAsCiAgICBmb3JjZWQ6IEZPUkNFRAogIH0sIHsKICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkgewogICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUodGhpcywgeCk7CiAgICB9CiAgfSksIF9leHBvcnQoewogICAgdGFyZ2V0OiBQUk9NSVNFLAogICAgc3RhdDogITAsCiAgICBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04KICB9LCB7CiAgICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkgewogICAgICB2YXIgQyA9IHRoaXMsCiAgICAgICAgICBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkkMShDKSwKICAgICAgICAgIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmUsCiAgICAgICAgICByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdCwKICAgICAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkgewogICAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24kMShDLnJlc29sdmUpLAogICAgICAgICAgICB2YWx1ZXMgPSBbXSwKICAgICAgICAgICAgY291bnRlciA9IDAsCiAgICAgICAgICAgIHJlbWFpbmluZyA9IDE7CiAgICAgICAgaXRlcmF0ZV8xKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkgewogICAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrLAogICAgICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSAhMTsKICAgICAgICAgIHZhbHVlcy5wdXNoKHZvaWQgMCksIHJlbWFpbmluZysrLCAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBhbHJlYWR5Q2FsbGVkIHx8IChhbHJlYWR5Q2FsbGVkID0gITAsIHZhbHVlc1tpbmRleF0gPSB2YWx1ZSwgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpKTsKICAgICAgICAgIH0sIHJlamVjdCk7CiAgICAgICAgfSksIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsKICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQuZXJyb3IgJiYgcmVqZWN0KHJlc3VsdC52YWx1ZSksIGNhcGFiaWxpdHkucHJvbWlzZTsKICAgIH0sCiAgICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7CiAgICAgIHZhciBDID0gdGhpcywKICAgICAgICAgIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSQxKEMpLAogICAgICAgICAgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3QsCiAgICAgICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uJDEoQy5yZXNvbHZlKTsKICAgICAgICBpdGVyYXRlXzEoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7CiAgICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQuZXJyb3IgJiYgcmVqZWN0KHJlc3VsdC52YWx1ZSksIGNhcGFiaWxpdHkucHJvbWlzZTsKICAgIH0KICB9KSwgX2V4cG9ydCh7CiAgICB0YXJnZXQ6ICJQcm9taXNlIiwKICAgIHByb3RvOiAhMCwKICAgIHJlYWw6ICEwCiAgfSwgewogICAgZmluYWxseTogZnVuY3Rpb24gX2ZpbmFsbHkob25GaW5hbGx5KSB7CiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGdldEJ1aWx0SW4oIlByb21pc2UiKSksCiAgICAgICAgICBpc0Z1bmN0aW9uID0gImZ1bmN0aW9uIiA9PSB0eXBlb2Ygb25GaW5hbGx5OwogICAgICByZXR1cm4gdGhpcy50aGVuKGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkgewogICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4geDsKICAgICAgICB9KTsKICAgICAgfSA6IG9uRmluYWxseSwgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfSk7CiAgICAgIH0gOiBvbkZpbmFsbHkpOwogICAgfQogIH0pOwoKICB2YXIgcHJvbWlzZSQxID0gcGF0aC5Qcm9taXNlLAogICAgICAkQWdncmVnYXRlRXJyb3IgPSBmdW5jdGlvbiBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpIHsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIGlmICghKHRoYXQgaW5zdGFuY2VvZiAkQWdncmVnYXRlRXJyb3IpKSByZXR1cm4gbmV3ICRBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpOwogICAgb2JqZWN0U2V0UHJvdG90eXBlT2YgJiYgKHRoYXQgPSBvYmplY3RTZXRQcm90b3R5cGVPZihuZXcgRXJyb3IobWVzc2FnZSksIG9iamVjdEdldFByb3RvdHlwZU9mKHRoYXQpKSk7CiAgICB2YXIgZXJyb3JzQXJyYXkgPSBbXTsKICAgIHJldHVybiBpdGVyYXRlXzEoZXJyb3JzLCBlcnJvcnNBcnJheS5wdXNoLCBlcnJvcnNBcnJheSksIHRoYXQuZXJyb3JzID0gZXJyb3JzQXJyYXksIHZvaWQgMCAhPT0gbWVzc2FnZSAmJiBoaWRlKHRoYXQsICJtZXNzYWdlIiwgU3RyaW5nKG1lc3NhZ2UpKSwgdGhhdDsKICB9OwoKICAkQWdncmVnYXRlRXJyb3IucHJvdG90eXBlID0gb2JqZWN0Q3JlYXRlKEVycm9yLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAkQWdncmVnYXRlRXJyb3IpLAogICAgbmFtZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICJBZ2dyZWdhdGVFcnJvciIpCiAgfSksIF9leHBvcnQoewogICAgZ2xvYmFsOiAhMAogIH0sIHsKICAgIEFnZ3JlZ2F0ZUVycm9yOiAkQWdncmVnYXRlRXJyb3IKICB9KSwgX2V4cG9ydCh7CiAgICB0YXJnZXQ6ICJQcm9taXNlIiwKICAgIHN0YXQ6ICEwCiAgfSwgewogICAgYWxsU2V0dGxlZDogZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkgewogICAgICB2YXIgQyA9IHRoaXMsCiAgICAgICAgICBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKSwKICAgICAgICAgIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmUsCiAgICAgICAgICByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdCwKICAgICAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbiQxKEMucmVzb2x2ZSksCiAgICAgICAgICAgIHZhbHVlcyA9IFtdLAogICAgICAgICAgICBjb3VudGVyID0gMCwKICAgICAgICAgICAgcmVtYWluaW5nID0gMTsKICAgICAgICBpdGVyYXRlXzEoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7CiAgICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKyssCiAgICAgICAgICAgICAgYWxyZWFkeUNhbGxlZCA9ICExOwogICAgICAgICAgdmFsdWVzLnB1c2godm9pZCAwKSwgcmVtYWluaW5nKyssIHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgYWxyZWFkeUNhbGxlZCB8fCAoYWxyZWFkeUNhbGxlZCA9ICEwLCB2YWx1ZXNbaW5kZXhdID0gewogICAgICAgICAgICAgIHN0YXR1czogImZ1bGZpbGxlZCIsCiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgIH0sIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBhbHJlYWR5Q2FsbGVkIHx8IChhbHJlYWR5Q2FsbGVkID0gITAsIHZhbHVlc1tpbmRleF0gPSB7CiAgICAgICAgICAgICAgc3RhdHVzOiAicmVqZWN0ZWQiLAogICAgICAgICAgICAgIHJlYXNvbjogZQogICAgICAgICAgICB9LCAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcykpOwogICAgICAgICAgfSk7CiAgICAgICAgfSksIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsKICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQuZXJyb3IgJiYgcmVqZWN0KHJlc3VsdC52YWx1ZSksIGNhcGFiaWxpdHkucHJvbWlzZTsKICAgIH0KICB9KSwgX2V4cG9ydCh7CiAgICB0YXJnZXQ6ICJQcm9taXNlIiwKICAgIHN0YXQ6ICEwCiAgfSwgewogICAgdHJ5OiBmdW5jdGlvbiBfdHJ5KGNhbGxiYWNrZm4pIHsKICAgICAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKSwKICAgICAgICAgIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7CiAgICAgIHJldHVybiAocmVzdWx0LmVycm9yID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnZhbHVlKSwgcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTsKICAgIH0KICB9KTsKICB2YXIgUFJPTUlTRV9BTllfRVJST1IgPSAiTm8gb25lIHByb21pc2UgcmVzb2x2ZWQiOwoKICBfZXhwb3J0KHsKICAgIHRhcmdldDogIlByb21pc2UiLAogICAgc3RhdDogITAKICB9LCB7CiAgICBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkgewogICAgICB2YXIgQyA9IHRoaXMsCiAgICAgICAgICBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKSwKICAgICAgICAgIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmUsCiAgICAgICAgICByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdCwKICAgICAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbiQxKEMucmVzb2x2ZSksCiAgICAgICAgICAgIGVycm9ycyA9IFtdLAogICAgICAgICAgICBjb3VudGVyID0gMCwKICAgICAgICAgICAgcmVtYWluaW5nID0gMSwKICAgICAgICAgICAgYWxyZWFkeVJlc29sdmVkID0gITE7CiAgICAgICAgaXRlcmF0ZV8xKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkgewogICAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrLAogICAgICAgICAgICAgIGFscmVhZHlSZWplY3RlZCA9ICExOwogICAgICAgICAgZXJyb3JzLnB1c2godm9pZCAwKSwgcmVtYWluaW5nKyssIHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCB8fCAoYWxyZWFkeVJlc29sdmVkID0gITAsIHJlc29sdmUodmFsdWUpKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGFscmVhZHlSZWplY3RlZCB8fCBhbHJlYWR5UmVzb2x2ZWQgfHwgKGFscmVhZHlSZWplY3RlZCA9ICEwLCBlcnJvcnNbaW5kZXhdID0gZSwgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyAoZ2V0QnVpbHRJbigiQWdncmVnYXRlRXJyb3IiKSkoZXJyb3JzLCBQUk9NSVNFX0FOWV9FUlJPUikpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pLCAtLXJlbWFpbmluZyB8fCByZWplY3QobmV3IChnZXRCdWlsdEluKCJBZ2dyZWdhdGVFcnJvciIpKShlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0LmVycm9yICYmIHJlamVjdChyZXN1bHQudmFsdWUpLCBjYXBhYmlsaXR5LnByb21pc2U7CiAgICB9CiAgfSk7CgogIHZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgibWF0Y2giKSwKICAgICAgaXNSZWdleHAgPSBmdW5jdGlvbiBpc1JlZ2V4cChpdCkgewogICAgdmFyIGlzUmVnRXhwOwogICAgcmV0dXJuIGlzT2JqZWN0JDEoaXQpICYmICh2b2lkIDAgIT09IChpc1JlZ0V4cCA9IGl0W01BVENIXSkgPyAhIWlzUmVnRXhwIDogIlJlZ0V4cCIgPT0gY2xhc3NvZlJhdyhpdCkpOwogIH0sCiAgICAgIG5vdEFSZWdleHAgPSBmdW5jdGlvbiBub3RBUmVnZXhwKGl0KSB7CiAgICBpZiAoaXNSZWdleHAoaXQpKSB0aHJvdyBUeXBlRXJyb3IoIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9ucyIpOwogICAgcmV0dXJuIGl0OwogIH0sCiAgICAgIE1BVENIJDEgPSB3ZWxsS25vd25TeW1ib2woIm1hdGNoIiksCiAgICAgIGNvcnJlY3RJc1JlZ2V4cExvZ2ljID0gZnVuY3Rpb24gY29ycmVjdElzUmVnZXhwTG9naWMoTUVUSE9EX05BTUUpIHsKICAgIHZhciByZWdleHAgPSAvLi87CgogICAgdHJ5IHsKICAgICAgIi8uLyJbTUVUSE9EX05BTUVdKHJlZ2V4cCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIHJlZ2V4cFtNQVRDSCQxXSA9ICExLCAiLy4vIltNRVRIT0RfTkFNRV0ocmVnZXhwKTsKICAgICAgfSBjYXRjaCAoZikge30KICAgIH0KCiAgICByZXR1cm4gITE7CiAgfSwKICAgICAgbmF0aXZlRW5kc1dpdGggPSAiIi5lbmRzV2l0aCwKICAgICAgbWluJDIgPSBNYXRoLm1pbjsKCiAgX2V4cG9ydCh7CiAgICB0YXJnZXQ6ICJTdHJpbmciLAogICAgcHJvdG86ICEwLAogICAgZm9yY2VkOiAhY29ycmVjdElzUmVnZXhwTG9naWMoImVuZHNXaXRoIikKICB9LCB7CiAgICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nKSB7CiAgICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpOwogICAgICBub3RBUmVnZXhwKHNlYXJjaFN0cmluZyk7CiAgICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdm9pZCAwLAogICAgICAgICAgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpLAogICAgICAgICAgZW5kID0gdm9pZCAwID09PSBlbmRQb3NpdGlvbiA/IGxlbiA6IG1pbiQyKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKSwKICAgICAgICAgIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpOwogICAgICByZXR1cm4gbmF0aXZlRW5kc1dpdGggPyBuYXRpdmVFbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKSA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoOwogICAgfQogIH0pOwoKICB2YXIgY2FsbCA9IEZ1bmN0aW9uLmNhbGwsCiAgICAgIGVudHJ5VW5iaW5kID0gZnVuY3Rpb24gZW50cnlVbmJpbmQoQ09OU1RSVUNUT1IsIE1FVEhPRCwgbGVuZ3RoKSB7CiAgICByZXR1cm4gYmluZENvbnRleHQoY2FsbCwgZ2xvYmFsXzFbQ09OU1RSVUNUT1JdLnByb3RvdHlwZVtNRVRIT0RdLCBsZW5ndGgpOwogIH0sCiAgICAgIGVuZHNXaXRoID0gZW50cnlVbmJpbmQoIlN0cmluZyIsICJlbmRzV2l0aCIpLAogICAgICBpdGVyYXRvciA9IGVudHJ5VW5iaW5kKCJBcnJheSIsICJ2YWx1ZXMiKSwKICAgICAgaXNBcnJheSQyID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykgewogICAgcmV0dXJuICJBcnJheSIgPT0gY2xhc3NvZlJhdyhhcmcpOwogIH0sCiAgICAgIFNQRUNJRVMkMyA9IHdlbGxLbm93blN5bWJvbCgic3BlY2llcyIpLAogICAgICBhcnJheVNwZWNpZXNDcmVhdGUgPSBmdW5jdGlvbiBhcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7CiAgICB2YXIgQzsKICAgIHJldHVybiBpc0FycmF5JDIob3JpZ2luYWxBcnJheSkgJiYgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIChDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcikgfHwgQyAhPT0gQXJyYXkgJiYgIWlzQXJyYXkkMihDLnByb3RvdHlwZSkgPyBpc09iamVjdCQxKEMpICYmIG51bGwgPT09IChDID0gQ1tTUEVDSUVTJDNdKSAmJiAoQyA9IHZvaWQgMCkgOiBDID0gdm9pZCAwKSwgbmV3ICh2b2lkIDAgPT09IEMgPyBBcnJheSA6IEMpKDAgPT09IGxlbmd0aCA/IDAgOiBsZW5ndGgpOwogIH0sCiAgICAgIHB1c2ggPSBbXS5wdXNoLAogICAgICBjcmVhdGVNZXRob2QkMiA9IGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZCQyKFRZUEUpIHsKICAgIHZhciBJU19NQVAgPSAxID09IFRZUEUsCiAgICAgICAgSVNfRklMVEVSID0gMiA9PSBUWVBFLAogICAgICAgIElTX1NPTUUgPSAzID09IFRZUEUsCiAgICAgICAgSVNfRVZFUlkgPSA0ID09IFRZUEUsCiAgICAgICAgSVNfRklORF9JTkRFWCA9IDYgPT0gVFlQRSwKICAgICAgICBOT19IT0xFUyA9IDUgPT0gVFlQRSB8fCBJU19GSU5EX0lOREVYOwogICAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHsKICAgICAgZm9yICh2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKSwgc2VsZiA9IGluZGV4ZWRPYmplY3QoTyksIGJvdW5kRnVuY3Rpb24gPSBiaW5kQ29udGV4dChjYWxsYmFja2ZuLCB0aGF0LCAzKSwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpLCBpbmRleCA9IDAsIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZSwgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHZvaWQgMCwgdmFsdWUsIHJlc3VsdDsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHsKICAgICAgICBpZiAoKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpICYmIChyZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlID0gc2VsZltpbmRleF0sIGluZGV4LCBPKSwgVFlQRSkpIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7ZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmV0dXJuICEwOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgcmV0dXJuIGluZGV4OwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiAhMTsKICAgICAgfQoKICAgICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDsKICAgIH07CiAgfSwKICAgICAgYXJyYXlJdGVyYXRpb24sCiAgICAgICRmaW5kID0gewogICAgZm9yRWFjaDogY3JlYXRlTWV0aG9kJDIoMCksCiAgICBtYXA6IGNyZWF0ZU1ldGhvZCQyKDEpLAogICAgZmlsdGVyOiBjcmVhdGVNZXRob2QkMigyKSwKICAgIHNvbWU6IGNyZWF0ZU1ldGhvZCQyKDMpLAogICAgZXZlcnk6IGNyZWF0ZU1ldGhvZCQyKDQpLAogICAgZmluZDogY3JlYXRlTWV0aG9kJDIoNSksCiAgICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCQyKDYpCiAgfS5maW5kLAogICAgICBGSU5EID0gImZpbmQiLAogICAgICBTS0lQU19IT0xFUyA9ICEwOwoKICBGSU5EIGluIFtdICYmIEFycmF5KDEpLmZpbmQoZnVuY3Rpb24gKCkgewogICAgU0tJUFNfSE9MRVMgPSAhMTsKICB9KSwgX2V4cG9ydCh7CiAgICB0YXJnZXQ6ICJBcnJheSIsCiAgICBwcm90bzogITAsCiAgICBmb3JjZWQ6IFNLSVBTX0hPTEVTCiAgfSwgewogICAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuKSB7CiAgICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgMCk7CiAgICB9CiAgfSksIGFkZFRvVW5zY29wYWJsZXMoRklORCk7CiAgdmFyIGZpbmQgPSBlbnRyeVVuYmluZCgiQXJyYXkiLCAiZmluZCIpLAogICAgICBuYXRpdmVBc3NpZ24gPSBPYmplY3QuYXNzaWduLAogICAgICBvYmplY3RBc3NpZ24gPSAhbmF0aXZlQXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIHZhciBBID0ge30sCiAgICAgICAgQiA9IHt9LAogICAgICAgIHN5bWJvbCA9IFN5bWJvbCgpLAogICAgICAgIGFscGhhYmV0ID0gImFiY2RlZmdoaWprbG1ub3BxcnN0IjsKICAgIHJldHVybiBBW3N5bWJvbF0gPSA3LCBhbHBoYWJldC5zcGxpdCgiIikuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7CiAgICAgIEJbY2hyXSA9IGNocjsKICAgIH0pLCA3ICE9IG5hdGl2ZUFzc2lnbih7fSwgQSlbc3ltYm9sXSB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oIiIpICE9IGFscGhhYmV0OwogIH0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7CiAgICBmb3IgKHZhciBUID0gdG9PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCwgaW5kZXggPSAxLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMuZiwgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZS5mOyBhcmd1bWVudHNMZW5ndGggPiBpbmRleDspIHsKICAgICAgZm9yICh2YXIgUyA9IGluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKSwga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IG9iamVjdEtleXMoUykuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwgaiA9IDAsIGtleTsgbGVuZ3RoID4gajspIHsKICAgICAgICBrZXkgPSBrZXlzW2orK10sIGRlc2NyaXB0b3JzICYmICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkgfHwgKFRba2V5XSA9IFNba2V5XSk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gVDsKICB9IDogbmF0aXZlQXNzaWduOwoKICBfZXhwb3J0KHsKICAgIHRhcmdldDogIk9iamVjdCIsCiAgICBzdGF0OiAhMCwKICAgIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gb2JqZWN0QXNzaWduCiAgfSwgewogICAgYXNzaWduOiBvYmplY3RBc3NpZ24KICB9KTsKCiAgdmFyIGFzc2lnbiA9IHBhdGguT2JqZWN0LmFzc2lnbiwKICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZS5mLAogICAgICBjcmVhdGVNZXRob2QkMyA9IGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZCQzKFRPX0VOVFJJRVMpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoaXQpIHsKICAgICAgZm9yICh2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChpdCksIGtleXMgPSBvYmplY3RLZXlzKE8pLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwgaSA9IDAsIHJlc3VsdCA9IFtdLCBrZXk7IGxlbmd0aCA+IGk7KSB7CiAgICAgICAga2V5ID0ga2V5c1tpKytdLCBkZXNjcmlwdG9ycyAmJiAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChPLCBrZXkpIHx8IHJlc3VsdC5wdXNoKFRPX0VOVFJJRVMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CiAgfSwKICAgICAgb2JqZWN0VG9BcnJheSwKICAgICAgJHZhbHVlcyA9IHsKICAgIGVudHJpZXM6IGNyZWF0ZU1ldGhvZCQzKCEwKSwKICAgIHZhbHVlczogY3JlYXRlTWV0aG9kJDMoITEpCiAgfS52YWx1ZXM7CgogIF9leHBvcnQoewogICAgdGFyZ2V0OiAiT2JqZWN0IiwKICAgIHN0YXQ6ICEwCiAgfSwgewogICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoTykgewogICAgICByZXR1cm4gJHZhbHVlcyhPKTsKICAgIH0KICB9KTsKCiAgdmFyIHZhbHVlcyA9IHBhdGguT2JqZWN0LnZhbHVlcywKICAgICAgVXBkYXRlZFNob3BpZnlCdXkgPSBmdW5jdGlvbiAoX1Nob3BpZnlCdXkpIHsKICAgIGZ1bmN0aW9uIFVwZGF0ZWRTaG9waWZ5QnV5KCkgewogICAgICByZXR1cm4gX1Nob3BpZnlCdXkuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzOwogICAgfQoKICAgIHJldHVybiBfaW5oZXJpdHNMb29zZShVcGRhdGVkU2hvcGlmeUJ1eSwgX1Nob3BpZnlCdXkpLCBVcGRhdGVkU2hvcGlmeUJ1eS5idWlsZENsaWVudCA9IGZ1bmN0aW9uIGJ1aWxkQ2xpZW50KGNvbmZpZykgewogICAgICB2YXIgbmV3Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnLCB7CiAgICAgICAgc291cmNlOiAiYnV5LWJ1dHRvbi1qcyIKICAgICAgfSk7CiAgICAgIHJldHVybiBfU2hvcGlmeUJ1eS5idWlsZENsaWVudC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7CiAgICB9LCBVcGRhdGVkU2hvcGlmeUJ1eTsKICB9KHNob3BpZnlCdXkpOwoKICByZXR1cm4gd2luZG93LlNob3BpZnlCdXkgPSB3aW5kb3cuU2hvcGlmeUJ1eSB8fCBVcGRhdGVkU2hvcGlmeUJ1eSwgVXBkYXRlZFNob3BpZnlCdXkuVUkgPSB3aW5kb3cuU2hvcGlmeUJ1eS5VSSB8fCB7CiAgICBkb21haW5zOiB7fSwKICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoY2xpZW50KSB7CiAgICAgIHZhciBpbnRlZ3JhdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1sxXSA/IGFyZ3VtZW50c1sxXSA6IHt9LAogICAgICAgICAgc3R5bGVPdmVycmlkZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHZvaWQgMCwKICAgICAgICAgIHVuaXF1ZUNsaWVudEtleSA9ICIiLmNvbmNhdChjbGllbnQuY29uZmlnLmRvbWFpbiwgIi4iKS5jb25jYXQoY2xpZW50LmNvbmZpZy5zdG9yZWZyb250QWNjZXNzVG9rZW4pOwogICAgICByZXR1cm4gdGhpcy5kb21haW5zW3VuaXF1ZUNsaWVudEtleV0gfHwgKHRoaXMuZG9tYWluc1t1bmlxdWVDbGllbnRLZXldID0gbmV3IFVJKGNsaWVudCwgaW50ZWdyYXRpb25zLCBzdHlsZU92ZXJyaWRlcykpLCB0aGlzLmRvbWFpbnNbdW5pcXVlQ2xpZW50S2V5XTsKICAgIH0sCiAgICBhZGFwdGVySGVscGVyczogewogICAgICB0ZW1wbGF0ZXM6IHsKICAgICAgICBwcm9kdWN0OiBwcm9kdWN0VGVtcGxhdGUKICAgICAgfQogICAgfQogIH0sIFVwZGF0ZWRTaG9waWZ5QnV5Owp9KCk7"},null]}