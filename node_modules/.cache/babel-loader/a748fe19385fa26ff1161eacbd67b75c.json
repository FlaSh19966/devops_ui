{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/eslint-loader/index.js??ref--13-0!/home/vimalesh/Learning/devops_ui/src/portal/assets/js/shopify.min.js","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/assets/js/shopify.min.js","mtime":1643027096288},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.every");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.reduce");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.array-buffer.constructor");

require("core-js/modules/es.function.name");

require("core-js/modules/es.number.to-fixed");

require("core-js/modules/es.object.freeze");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-own-property-names");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.ends-with");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.search");

require("core-js/modules/es.string.split");

require("core-js/modules/es.string.trim");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.copy-within");

require("core-js/modules/es.typed-array.every");

require("core-js/modules/es.typed-array.fill");

require("core-js/modules/es.typed-array.filter");

require("core-js/modules/es.typed-array.find");

require("core-js/modules/es.typed-array.find-index");

require("core-js/modules/es.typed-array.for-each");

require("core-js/modules/es.typed-array.includes");

require("core-js/modules/es.typed-array.index-of");

require("core-js/modules/es.typed-array.iterator");

require("core-js/modules/es.typed-array.join");

require("core-js/modules/es.typed-array.last-index-of");

require("core-js/modules/es.typed-array.map");

require("core-js/modules/es.typed-array.reduce");

require("core-js/modules/es.typed-array.reduce-right");

require("core-js/modules/es.typed-array.reverse");

require("core-js/modules/es.typed-array.set");

require("core-js/modules/es.typed-array.slice");

require("core-js/modules/es.typed-array.some");

require("core-js/modules/es.typed-array.sort");

require("core-js/modules/es.typed-array.subarray");

require("core-js/modules/es.typed-array.to-locale-string");

require("core-js/modules/es.typed-array.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.url");

var _typeof2 = require("/home/vimalesh/Learning/devops_ui/node_modules/@babel/runtime/helpers/typeof");

var ShopifyBuy = function () {
  "use strict";

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
  }

  function _defineProperty(obj, key, value) {
    return key in obj ? Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : obj[key] = value, obj;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype), subClass.prototype.constructor = subClass, subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || "[object Arguments]" === Object.prototype.toString.call(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [],
        _n = !0,
        _d = !1,
        _e = void 0;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i || _arr.length !== i); _n = !0) {
        ;
      }
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        _n || null == _i.return || _i.return();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (obj) {
    return _typeof2(obj);
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
  },
      classCallCheck$1 = function classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
  },
      createClass$1 = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
    };
  }(),
      inherits$1 = function inherits$1(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  },
      possibleConstructorReturn$1 = function possibleConstructorReturn$1(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != _typeof2(call) && "function" != typeof call ? self : call;
  };

  function join() {
    for (var _len = arguments.length, fields = Array(_len), _key = 0; _key < _len; _key++) {
      fields[_key] = arguments[_key];
    }

    return fields.join(" ");
  }

  function isObject(value) {
    return Boolean(value) && "[object Object]" === Object.prototype.toString.call(value.valueOf());
  }

  function deepFreezeCopyExcept(predicate, structure) {
    return predicate(structure) ? structure : isObject(structure) ? Object.freeze(Object.keys(structure).reduce(function (copy, key) {
      return copy[key] = deepFreezeCopyExcept(predicate, structure[key]), copy;
    }, {})) : Array.isArray(structure) ? Object.freeze(structure.map(function (item) {
      return deepFreezeCopyExcept(predicate, item);
    })) : structure;
  }

  function schemaForType(typeBundle, typeName) {
    var typeSchema = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
        type = typeBundle.types[typeName];
    if (type) return type;
    if (typeSchema && "INTERFACE" === typeSchema.kind) return typeSchema;
    throw new Error("No type of " + typeName + " found in schema");
  }

  var classCallCheck = function classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
  },
      createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
    };
  }(),
      _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
      }
    }

    return target;
  },
      inherits = function inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + (void 0 === superClass ? "undefined" : _typeof(superClass)));
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  },
      possibleConstructorReturn = function possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" !== (void 0 === call ? "undefined" : _typeof(call)) && "function" != typeof call ? self : call;
  },
      slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [],
          _n = !0,
          _d = !1,
          _e = void 0;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i || _arr.length !== i); _n = !0) {
          ;
        }
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          !_n && _i.return && _i.return();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) return arr;
      if (Symbol.iterator in Object(arr)) return sliceIterator(arr, i);
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
  }(),
      toConsumableArray = function toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    return Array.from(arr);
  },
      VariableDefinition = function () {
    function VariableDefinition(name, type, defaultValue) {
      classCallCheck(this, VariableDefinition), this.name = name, this.type = type, this.defaultValue = defaultValue, Object.freeze(this);
    }

    return createClass(VariableDefinition, [{
      key: "toInputValueString",
      value: function toInputValueString() {
        return "$" + this.name;
      }
    }, {
      key: "toString",
      value: function toString() {
        var defaultValueString = this.defaultValue ? " = " + formatInputValue(this.defaultValue) : "";
        return "$" + this.name + ":" + this.type + defaultValueString;
      }
    }]), VariableDefinition;
  }();

  function isVariable(value) {
    return VariableDefinition.prototype.isPrototypeOf(value);
  }

  function variable(name, type, defaultValue) {
    return new VariableDefinition(name, type, defaultValue);
  }

  var Enum = function () {
    function Enum(key) {
      classCallCheck(this, Enum), this.key = key;
    }

    return createClass(Enum, [{
      key: "toString",
      value: function toString() {
        return this.key;
      }
    }, {
      key: "valueOf",
      value: function valueOf() {
        return this.key.valueOf();
      }
    }]), Enum;
  }(),
      enumFunction = function enumFunction(key) {
    return new Enum(key);
  },
      Scalar = function () {
    function Scalar(value) {
      classCallCheck(this, Scalar), this.value = value;
    }

    return createClass(Scalar, [{
      key: "toString",
      value: function toString() {
        return this.value.toString();
      }
    }, {
      key: "valueOf",
      value: function valueOf() {
        return this.value.valueOf();
      }
    }, {
      key: "unwrapped",
      get: function get$$1() {
        return this.value;
      }
    }]), Scalar;
  }();

  function formatInputValue(value) {
    return VariableDefinition.prototype.isPrototypeOf(value) ? value.toInputValueString() : Enum.prototype.isPrototypeOf(value) ? String(value) : Scalar.prototype.isPrototypeOf(value) ? JSON.stringify(value.valueOf()) : Array.isArray(value) ? "[" + join.apply(void 0, toConsumableArray(value.map(formatInputValue))) + "]" : isObject(value) ? formatObject(value, "{", "}") : JSON.stringify(value);
  }

  function formatObject(value) {
    var openChar = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
        closeChar = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "",
        argPairs = Object.keys(value).map(function (key) {
      return key + ": " + formatInputValue(value[key]);
    });
    return "" + openChar + join.apply(void 0, toConsumableArray(argPairs)) + closeChar;
  }

  function formatArgs(args) {
    return Object.keys(args).length ? " (" + formatObject(args) + ")" : "";
  }

  function formatDirectives(directives) {
    if (!Object.keys(directives).length) return "";
    var directiveStrings = Object.keys(directives).map(function (key) {
      var directiveArgs = directives[key],
          arg;
      return "@" + key + (directiveArgs && Object.keys(directiveArgs).length ? "(" + formatObject(directiveArgs) + ")" : "");
    });
    return " " + join.apply(void 0, toConsumableArray(directiveStrings));
  }

  var noop = function noop() {},
      Profiler_trackTypeDependency,
      Profiler_trackFieldDependency,
      trackTypeDependency = noop,
      trackFieldDependency = noop;

  function parseFieldCreationArgs(creationArgs) {
    var callback = noop,
        options = {},
        selectionSet = null;
    if (2 === creationArgs.length) {
      if ("function" == typeof creationArgs[1]) {
        var _creationArgs = slicedToArray(creationArgs, 2);

        options = _creationArgs[0], callback = _creationArgs[1];
      } else {
        var _creationArgs2 = slicedToArray(creationArgs, 2);

        options = _creationArgs2[0], selectionSet = _creationArgs2[1];
      }
    } else 1 === creationArgs.length && (SelectionSet.prototype.isPrototypeOf(creationArgs[0]) ? selectionSet = creationArgs[0] : "function" == typeof creationArgs[0] ? callback = creationArgs[0] : options = creationArgs[0]);
    return {
      options: options,
      selectionSet: selectionSet,
      callback: callback
    };
  }

  var emptyArgs = Object.freeze({}),
      emptyDirectives = Object.freeze({}),
      Field = function () {
    function Field(name, options, selectionSet) {
      classCallCheck(this, Field), this.name = name, this.alias = options.alias || null, this.responseKey = this.alias || this.name, this.args = options.args ? deepFreezeCopyExcept(isVariable, options.args) : emptyArgs, this.directives = options.directives ? deepFreezeCopyExcept(isVariable, options.directives) : emptyDirectives, this.selectionSet = selectionSet, Object.freeze(this);
    }

    return createClass(Field, [{
      key: "toString",
      value: function toString() {
        var aliasPrefix;
        return "" + (this.alias ? this.alias + ": " : "") + this.name + formatArgs(this.args) + formatDirectives(this.directives) + this.selectionSet;
      }
    }]), Field;
  }(),
      Spread = function Spread() {
    classCallCheck(this, Spread);
  },
      InlineFragment = function (_Spread) {
    function InlineFragment(typeName, selectionSet) {
      classCallCheck(this, InlineFragment);

      var _this = possibleConstructorReturn(this, (InlineFragment.__proto__ || Object.getPrototypeOf(InlineFragment)).call(this));

      return _this.typeName = typeName, _this.selectionSet = selectionSet, Object.freeze(_this), _this;
    }

    return inherits(InlineFragment, _Spread), createClass(InlineFragment, [{
      key: "toString",
      value: function toString() {
        return "... on " + this.typeName + this.selectionSet;
      }
    }]), InlineFragment;
  }(Spread),
      FragmentSpread = function (_Spread2) {
    function FragmentSpread(fragmentDefinition) {
      classCallCheck(this, FragmentSpread);

      var _this2 = possibleConstructorReturn(this, (FragmentSpread.__proto__ || Object.getPrototypeOf(FragmentSpread)).call(this));

      return _this2.name = fragmentDefinition.name, _this2.selectionSet = fragmentDefinition.selectionSet, Object.freeze(_this2), _this2;
    }

    return inherits(FragmentSpread, _Spread2), createClass(FragmentSpread, [{
      key: "toString",
      value: function toString() {
        return "..." + this.name;
      }
    }, {
      key: "toDefinition",
      value: function toDefinition() {
        return new FragmentDefinition(this.name, this.selectionSet.typeSchema.name, this.selectionSet);
      }
    }]), FragmentSpread;
  }(Spread),
      FragmentDefinition = function () {
    function FragmentDefinition(name, typeName, selectionSet) {
      classCallCheck(this, FragmentDefinition), this.name = name, this.typeName = typeName, this.selectionSet = selectionSet, this.spread = new FragmentSpread(this), Object.freeze(this);
    }

    return createClass(FragmentDefinition, [{
      key: "toString",
      value: function toString() {
        return "fragment " + this.name + " on " + this.typeName + " " + this.selectionSet;
      }
    }]), FragmentDefinition;
  }();

  function selectionsHaveIdField(selections) {
    return selections.some(function (fieldOrFragment) {
      return Field.prototype.isPrototypeOf(fieldOrFragment) ? "id" === fieldOrFragment.name : !(!Spread.prototype.isPrototypeOf(fieldOrFragment) || !fieldOrFragment.selectionSet.typeSchema.implementsNode) && selectionsHaveIdField(fieldOrFragment.selectionSet.selections);
    });
  }

  function selectionsHaveTypenameField(selections) {
    return selections.some(function (fieldOrFragment) {
      return Field.prototype.isPrototypeOf(fieldOrFragment) ? "__typename" === fieldOrFragment.name : !(!Spread.prototype.isPrototypeOf(fieldOrFragment) || !fieldOrFragment.selectionSet.typeSchema.implementsNode) && selectionsHaveTypenameField(fieldOrFragment.selectionSet.selections);
    });
  }

  function indexSelectionsByResponseKey(selections) {
    function assignOrPush(obj, key, value) {
      Array.isArray(obj[key]) ? obj[key].push(value) : obj[key] = [value];
    }

    var unfrozenObject = selections.reduce(function (acc, selection) {
      var responseKeys;
      selection.responseKey ? assignOrPush(acc, selection.responseKey, selection) : Object.keys(selection.selectionSet.selectionsByResponseKey).forEach(function (responseKey) {
        assignOrPush(acc, responseKey, selection);
      });
      return acc;
    }, {});
    return Object.keys(unfrozenObject).forEach(function (key) {
      Object.freeze(unfrozenObject[key]);
    }), Object.freeze(unfrozenObject);
  }

  var SelectionSet = function () {
    function SelectionSet(typeBundle, type, builderFunction) {
      classCallCheck(this, SelectionSet), this.typeSchema = "string" == typeof type ? schemaForType(typeBundle, type) : type, trackTypeDependency(this.typeSchema.name), this.typeBundle = typeBundle, this.selections = [], builderFunction && builderFunction(new SelectionSetBuilder(this.typeBundle, this.typeSchema, this.selections)), (this.typeSchema.implementsNode || "Node" === this.typeSchema.name) && (selectionsHaveIdField(this.selections) || this.selections.unshift(new Field("id", {}, new SelectionSet(typeBundle, "ID")))), "INTERFACE" === this.typeSchema.kind && (selectionsHaveTypenameField(this.selections) || this.selections.unshift(new Field("__typename", {}, new SelectionSet(typeBundle, "String")))), this.selectionsByResponseKey = indexSelectionsByResponseKey(this.selections), Object.freeze(this.selections), Object.freeze(this);
    }

    return createClass(SelectionSet, [{
      key: "toString",
      value: function toString() {
        return "SCALAR" === this.typeSchema.kind || "ENUM" === this.typeSchema.kind ? "" : " { " + join(this.selections) + " }";
      }
    }]), SelectionSet;
  }(),
      SelectionSetBuilder = function () {
    function SelectionSetBuilder(typeBundle, typeSchema, selections) {
      classCallCheck(this, SelectionSetBuilder), this.typeBundle = typeBundle, this.typeSchema = typeSchema, this.selections = selections;
    }

    return createClass(SelectionSetBuilder, [{
      key: "hasSelectionWithResponseKey",
      value: function hasSelectionWithResponseKey(responseKey) {
        return this.selections.some(function (field) {
          return field.responseKey === responseKey;
        });
      }
    }, {
      key: "add",
      value: function add(selectionOrFieldName) {
        var selection = void 0;

        if ("[object String]" === Object.prototype.toString.call(selectionOrFieldName)) {
          trackFieldDependency(this.typeSchema.name, selectionOrFieldName);

          for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }

          selection = this.field.apply(this, [selectionOrFieldName].concat(rest));
        } else Field.prototype.isPrototypeOf(selectionOrFieldName) && trackFieldDependency(this.typeSchema.name, selectionOrFieldName.name), selection = selectionOrFieldName;

        if (selection.responseKey && this.hasSelectionWithResponseKey(selection.responseKey)) throw new Error("The field name or alias '" + selection.responseKey + "' has already been added.");
        this.selections.push(selection);
      }
    }, {
      key: "field",
      value: function field(name) {
        for (var _len2 = arguments.length, creationArgs = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          creationArgs[_key2 - 1] = arguments[_key2];
        }

        var parsedArgs = parseFieldCreationArgs(creationArgs),
            options = parsedArgs.options,
            callback = parsedArgs.callback,
            selectionSet = parsedArgs.selectionSet;

        if (!selectionSet) {
          if (!this.typeSchema.fieldBaseTypes[name]) throw new Error('No field of name "' + name + '" found on type "' + this.typeSchema.name + '" in schema');
          var fieldBaseType = schemaForType(this.typeBundle, this.typeSchema.fieldBaseTypes[name]);
          selectionSet = new SelectionSet(this.typeBundle, fieldBaseType, callback);
        }

        return new Field(name, options, selectionSet);
      }
    }, {
      key: "inlineFragmentOn",
      value: function inlineFragmentOn(typeName) {
        var builderFunctionOrSelectionSet = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : noop,
            selectionSet = void 0;
        return selectionSet = SelectionSet.prototype.isPrototypeOf(builderFunctionOrSelectionSet) ? builderFunctionOrSelectionSet : new SelectionSet(this.typeBundle, schemaForType(this.typeBundle, typeName), builderFunctionOrSelectionSet), new InlineFragment(typeName, selectionSet);
      }
    }, {
      key: "addField",
      value: function addField(name) {
        for (var _len3 = arguments.length, creationArgs = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          creationArgs[_key3 - 1] = arguments[_key3];
        }

        this.add.apply(this, [name].concat(creationArgs));
      }
    }, {
      key: "addConnection",
      value: function addConnection(name) {
        for (var _len4 = arguments.length, creationArgs = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          creationArgs[_key4 - 1] = arguments[_key4];
        }

        var _parseFieldCreationAr = parseFieldCreationArgs(creationArgs),
            options = _parseFieldCreationAr.options,
            callback = _parseFieldCreationAr.callback,
            selectionSet = _parseFieldCreationAr.selectionSet;

        this.add(name, options, function (connection) {
          connection.add("pageInfo", {}, function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), connection.add("edges", {}, function (edges) {
            edges.add("cursor"), edges.addField("node", {}, selectionSet || callback);
          });
        });
      }
    }, {
      key: "addInlineFragmentOn",
      value: function addInlineFragmentOn(typeName) {
        var fieldTypeCb = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : noop;
        this.add(this.inlineFragmentOn(typeName, fieldTypeCb));
      }
    }, {
      key: "addFragment",
      value: function addFragment(fragmentSpread) {
        this.add(fragmentSpread);
      }
    }]), SelectionSetBuilder;
  }();

  function parseArgs(args) {
    var name = void 0,
        variables = void 0,
        selectionSetCallback = void 0;

    if (3 === args.length) {
      var _args = slicedToArray(args, 3);

      name = _args[0], variables = _args[1], selectionSetCallback = _args[2];
    } else 2 === args.length ? ("[object String]" === Object.prototype.toString.call(args[0]) ? (name = args[0], variables = null) : Array.isArray(args[0]) && (variables = args[0], name = null), selectionSetCallback = args[1]) : (selectionSetCallback = args[0], name = null);

    return {
      name: name,
      variables: variables,
      selectionSetCallback: selectionSetCallback
    };
  }

  var VariableDefinitions = function () {
    function VariableDefinitions(variableDefinitions) {
      classCallCheck(this, VariableDefinitions), this.variableDefinitions = variableDefinitions ? [].concat(toConsumableArray(variableDefinitions)) : [], Object.freeze(this.variableDefinitions), Object.freeze(this);
    }

    return createClass(VariableDefinitions, [{
      key: "toString",
      value: function toString() {
        return 0 === this.variableDefinitions.length ? "" : " (" + join(this.variableDefinitions) + ") ";
      }
    }]), VariableDefinitions;
  }(),
      Operation = function () {
    function Operation(typeBundle, operationType) {
      classCallCheck(this, Operation);

      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      var _parseArgs = parseArgs(args),
          name = _parseArgs.name,
          variables = _parseArgs.variables,
          selectionSetCallback = _parseArgs.selectionSetCallback;

      this.typeBundle = typeBundle, this.name = name, this.variableDefinitions = new VariableDefinitions(variables), this.operationType = operationType, "query" === operationType ? (this.selectionSet = new SelectionSet(typeBundle, typeBundle.queryType, selectionSetCallback), this.typeSchema = schemaForType(typeBundle, typeBundle.queryType)) : (this.selectionSet = new SelectionSet(typeBundle, typeBundle.mutationType, selectionSetCallback), this.typeSchema = schemaForType(typeBundle, typeBundle.mutationType)), Object.freeze(this);
    }

    return createClass(Operation, [{
      key: "toString",
      value: function toString() {
        var nameString = this.name ? " " + this.name : "";
        return "" + this.operationType + nameString + this.variableDefinitions + this.selectionSet;
      }
    }, {
      key: "isAnonymous",
      get: function get$$1() {
        return !this.name;
      }
    }]), Operation;
  }(),
      Query = function (_Operation) {
    function Query(typeBundle) {
      var _ref;

      classCallCheck(this, Query);

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return possibleConstructorReturn(this, (_ref = Query.__proto__ || Object.getPrototypeOf(Query)).call.apply(_ref, [this, typeBundle, "query"].concat(args)));
    }

    return inherits(Query, _Operation), Query;
  }(Operation),
      Mutation = function (_Operation) {
    function Mutation(typeBundle) {
      var _ref;

      classCallCheck(this, Mutation);

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return possibleConstructorReturn(this, (_ref = Mutation.__proto__ || Object.getPrototypeOf(Mutation)).call.apply(_ref, [this, typeBundle, "mutation"].concat(args)));
    }

    return inherits(Mutation, _Operation), Mutation;
  }(Operation);

  function isAnonymous(operation) {
    return operation.isAnonymous;
  }

  function hasAnonymousOperations(operations) {
    return operations.some(isAnonymous);
  }

  function hasDuplicateOperationNames(operations) {
    var names = operations.map(function (operation) {
      return operation.name;
    });
    return names.reduce(function (hasDuplicates, name, index) {
      return hasDuplicates || names.indexOf(name) !== index;
    }, !1);
  }

  function extractOperation(typeBundle, operationType) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return Operation.prototype.isPrototypeOf(args[0]) ? args[0] : "query" === operationType ? new (Function.prototype.bind.apply(Query, [null].concat([typeBundle], args)))() : new (Function.prototype.bind.apply(Mutation, [null].concat([typeBundle], args)))();
  }

  function isInvalidOperationCombination(operations) {
    return 1 !== operations.length && (hasAnonymousOperations(operations) || hasDuplicateOperationNames(operations));
  }

  function fragmentNameIsNotUnique(existingDefinitions, name) {
    return existingDefinitions.some(function (definition) {
      return definition.name === name;
    });
  }

  var Document = function () {
    function Document(typeBundle) {
      classCallCheck(this, Document), this.typeBundle = typeBundle, this.definitions = [];
    }

    return createClass(Document, [{
      key: "toString",
      value: function toString() {
        return join(this.definitions);
      }
    }, {
      key: "addOperation",
      value: function addOperation(operationType) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        var operation = extractOperation.apply(void 0, [this.typeBundle, operationType].concat(args));
        if (isInvalidOperationCombination(this.operations.concat(operation))) throw new Error("All operations must be uniquely named on a multi-operation document");
        this.definitions.push(operation);
      }
    }, {
      key: "addQuery",
      value: function addQuery() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this.addOperation.apply(this, ["query"].concat(args));
      }
    }, {
      key: "addMutation",
      value: function addMutation() {
        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this.addOperation.apply(this, ["mutation"].concat(args));
      }
    }, {
      key: "defineFragment",
      value: function defineFragment(name, onType, builderFunction) {
        if (fragmentNameIsNotUnique(this.fragmentDefinitions, name)) throw new Error("All fragments must be uniquely named on a multi-fragment document");
        var selectionSet = new SelectionSet(this.typeBundle, onType, builderFunction),
            fragment = new FragmentDefinition(name, onType, selectionSet);
        return this.definitions.push(fragment), fragment.spread;
      }
    }, {
      key: "operations",
      get: function get$$1() {
        return this.definitions.filter(function (definition) {
          return Operation.prototype.isPrototypeOf(definition);
        });
      }
    }, {
      key: "fragmentDefinitions",
      get: function get$$1() {
        return this.definitions.filter(function (definition) {
          return FragmentDefinition.prototype.isPrototypeOf(definition);
        });
      }
    }]), Document;
  }(),
      GraphModel = function GraphModel(attrs) {
    var _this = this;

    classCallCheck(this, GraphModel), Object.defineProperty(this, "attrs", {
      value: attrs,
      enumerable: !1
    }), Object.keys(this.attrs).filter(function (key) {
      return !(key in _this);
    }).forEach(function (key) {
      var descriptor = void 0;
      descriptor = null === attrs[key] ? {
        enumerable: !0,
        get: function get$$1() {
          return null;
        }
      } : {
        enumerable: !0,
        get: function get$$1() {
          return this.attrs[key].valueOf();
        }
      }, Object.defineProperty(_this, key, descriptor);
    });
  },
      ClassRegistry = function () {
    function ClassRegistry() {
      classCallCheck(this, ClassRegistry), this.classStore = {};
    }

    return createClass(ClassRegistry, [{
      key: "registerClassForType",
      value: function registerClassForType(constructor, type) {
        this.classStore[type] = constructor;
      }
    }, {
      key: "unregisterClassForType",
      value: function unregisterClassForType(type) {
        delete this.classStore[type];
      }
    }, {
      key: "classForType",
      value: function classForType(type) {
        return this.classStore[type] || GraphModel;
      }
    }]), ClassRegistry;
  }();

  function isValue(arg) {
    return "[object Null]" !== Object.prototype.toString.call(arg) && "[object Undefined]" !== Object.prototype.toString.call(arg);
  }

  function isNodeContext(context) {
    return context.selection.selectionSet.typeSchema.implementsNode;
  }

  function isConnection(context) {
    return context.selection.selectionSet.typeSchema.name.endsWith("Connection");
  }

  function nearestNode(context) {
    return null == context ? null : isNodeContext(context) ? context : nearestNode(context.parent);
  }

  function contextsFromRoot(context) {
    return context.parent ? contextsFromRoot(context.parent).concat(context) : [context];
  }

  function contextsFromNearestNode(context) {
    return context.selection.selectionSet.typeSchema.implementsNode ? [context] : contextsFromNearestNode(context.parent).concat(context);
  }

  function initializeDocumentAndVars(currentContext, contextChain) {
    var lastInChain = contextChain[contextChain.length - 1],
        first = lastInChain.selection.args.first,
        variableDefinitions = Object.keys(lastInChain.selection.args).filter(function (key) {
      return isVariable(lastInChain.selection.args[key]);
    }).map(function (key) {
      return lastInChain.selection.args[key];
    }),
        firstVar = variableDefinitions.find(function (definition) {
      return "first" === definition.name;
    }),
        document;
    return firstVar || (isVariable(first) ? firstVar = first : (firstVar = variable("first", "Int", first), variableDefinitions.push(firstVar))), [new Document(currentContext.selection.selectionSet.typeBundle), variableDefinitions, firstVar];
  }

  function addNextFieldTo(currentSelection, contextChain, path, cursor) {
    var nextContext = contextChain.shift();
    if (path.push(nextContext.selection.responseKey), contextChain.length) currentSelection.add(nextContext.selection.name, {
      alias: nextContext.selection.alias,
      args: nextContext.selection.args
    }, function (newSelection) {
      addNextFieldTo(newSelection, contextChain, path, cursor);
    });else {
      var edgesField,
          nodeField = nextContext.selection.selectionSet.selections.find(function (field) {
        return "edges" === field.name;
      }).selectionSet.selections.find(function (field) {
        return "node" === field.name;
      }),
          first = void 0;
      first = isVariable(nextContext.selection.args.first) ? nextContext.selection.args.first : variable("first", "Int", nextContext.selection.args.first);
      var options = {
        alias: nextContext.selection.alias,
        args: Object.assign({}, nextContext.selection.args, {
          after: cursor,
          first: first
        })
      };
      currentSelection.addConnection(nextContext.selection.name, options, nodeField.selectionSet);
    }
  }

  function collectFragments(selections) {
    return selections.reduce(function (fragmentDefinitions, field) {
      return FragmentSpread.prototype.isPrototypeOf(field) && fragmentDefinitions.push(field.toDefinition()), fragmentDefinitions.push.apply(fragmentDefinitions, toConsumableArray(collectFragments(field.selectionSet.selections))), fragmentDefinitions;
    }, []);
  }

  function nextPageQueryAndPath(context, cursor) {
    var nearestNodeContext = nearestNode(context);
    return nearestNodeContext ? function () {
      var _document$definitions,
          path = [],
          nodeType = nearestNodeContext.selection.selectionSet.typeSchema,
          nodeId = nearestNodeContext.responseData.id,
          contextChain = contextsFromNearestNode(context),
          _initializeDocumentAn = initializeDocumentAndVars(context, contextChain),
          _initializeDocumentAn2 = slicedToArray(_initializeDocumentAn, 2),
          document = _initializeDocumentAn2[0],
          variableDefinitions = _initializeDocumentAn2[1];

      document.addQuery(variableDefinitions, function (root) {
        path.push("node"), root.add("node", {
          args: {
            id: nodeId
          }
        }, function (node) {
          node.addInlineFragmentOn(nodeType.name, function (fragment) {
            addNextFieldTo(fragment, contextChain.slice(1), path, cursor);
          });
        });
      });
      var fragments = collectFragments(document.operations[0].selectionSet.selections);
      return (_document$definitions = document.definitions).unshift.apply(_document$definitions, toConsumableArray(fragments)), [document, path];
    } : function () {
      var _document$definitions2,
          path = [],
          contextChain = contextsFromRoot(context),
          _initializeDocumentAn3 = initializeDocumentAndVars(context, contextChain),
          _initializeDocumentAn4 = slicedToArray(_initializeDocumentAn3, 2),
          document = _initializeDocumentAn4[0],
          variableDefinitions = _initializeDocumentAn4[1];

      document.addQuery(variableDefinitions, function (root) {
        addNextFieldTo(root, contextChain.slice(1), path, cursor);
      });
      var fragments = collectFragments(document.operations[0].selectionSet.selections);
      return (_document$definitions2 = document.definitions).unshift.apply(_document$definitions2, toConsumableArray(fragments)), [document, path];
    };
  }

  function hasNextPage$1(connection, edge) {
    return edge !== connection.edges[connection.edges.length - 1] ? new Scalar(!0) : connection.pageInfo.hasNextPage;
  }

  function hasPreviousPage(connection, edge) {
    return edge !== connection.edges[0] ? new Scalar(!0) : connection.pageInfo.hasPreviousPage;
  }

  function transformConnections(variableValues) {
    return function (context, value) {
      if (isConnection(context)) {
        if (!(value.pageInfo && value.pageInfo.hasOwnProperty("hasNextPage") && value.pageInfo.hasOwnProperty("hasPreviousPage"))) throw new Error('Connections must include the selections "pageInfo { hasNextPage, hasPreviousPage }".');
        return value.edges.map(function (edge) {
          return Object.assign(edge.node, {
            nextPageQueryAndPath: nextPageQueryAndPath(context, edge.cursor),
            hasNextPage: hasNextPage$1(value, edge),
            hasPreviousPage: hasPreviousPage(value, edge),
            variableValues: variableValues
          });
        });
      }

      return value;
    };
  }

  var DecodingContext = function () {
    function DecodingContext(selection, responseData) {
      var parent = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
      classCallCheck(this, DecodingContext), this.selection = selection, this.responseData = responseData, this.parent = parent, Object.freeze(this);
    }

    return createClass(DecodingContext, [{
      key: "contextForObjectProperty",
      value: function contextForObjectProperty(responseKey) {
        var nestedSelections = this.selection.selectionSet.selectionsByResponseKey[responseKey],
            nextSelection = nestedSelections && nestedSelections[0],
            nextContext = void 0;
        if (nextContext = Spread.prototype.isPrototypeOf(nextSelection) ? new DecodingContext(nextSelection, this.responseData, this.parent) : new DecodingContext(nextSelection, this.responseData[responseKey], this), !nextSelection) throw new Error('Unexpected response key "' + responseKey + '", not found in selection set: ' + this.selection.selectionSet);
        return Field.prototype.isPrototypeOf(nextSelection) ? nextContext : nextContext.contextForObjectProperty(responseKey);
      }
    }, {
      key: "contextForArrayItem",
      value: function contextForArrayItem(item) {
        return new DecodingContext(this.selection, item, this.parent);
      }
    }]), DecodingContext;
  }();

  function decodeArrayItems(context, transformers) {
    return context.responseData.map(function (item) {
      return decodeContext(context.contextForArrayItem(item), transformers);
    });
  }

  function decodeObjectValues(context, transformers) {
    return Object.keys(context.responseData).reduce(function (acc, responseKey) {
      return acc[responseKey] = decodeContext(context.contextForObjectProperty(responseKey), transformers), acc;
    }, {});
  }

  function runTransformers(transformers, context, value) {
    return transformers.reduce(function (acc, transformer) {
      return transformer(context, acc);
    }, value);
  }

  function decodeContext(context, transformers) {
    var value = context.responseData;
    return Array.isArray(value) ? value = decodeArrayItems(context, transformers) : isObject(value) && (value = decodeObjectValues(context, transformers)), runTransformers(transformers, context, value);
  }

  function generateRefetchQueries(context, value) {
    return isValue(value) && isNodeContext(context) && (value.refetchQuery = function () {
      return new Query(context.selection.selectionSet.typeBundle, function (root) {
        root.add("node", {
          args: {
            id: context.responseData.id
          }
        }, function (node) {
          node.addInlineFragmentOn(context.selection.selectionSet.typeSchema.name, context.selection.selectionSet);
        });
      });
    }), value;
  }

  function transformPojosToClassesWithRegistry(classRegistry) {
    return function transformPojosToClasses(context, value) {
      var Klass;
      return isObject(value) ? new (classRegistry.classForType(context.selection.selectionSet.typeSchema.name))(value) : value;
    };
  }

  function transformScalars(context, value) {
    if (isValue(value)) {
      if ("SCALAR" === context.selection.selectionSet.typeSchema.kind) return new Scalar(value);
      if ("ENUM" === context.selection.selectionSet.typeSchema.kind) return new Enum(value);
    }

    return value;
  }

  function recordTypeInformation(context, value) {
    var _context$selection$se = context.selection.selectionSet,
        typeBundle = _context$selection$se.typeBundle,
        typeSchema = _context$selection$se.typeSchema;
    return isValue(value) && (value.__typename ? value.type = schemaForType(typeBundle, value.__typename, typeSchema) : value.type = typeSchema), value;
  }

  function defaultTransformers(_ref) {
    var _ref$classRegistry = _ref.classRegistry,
        classRegistry = void 0 === _ref$classRegistry ? new ClassRegistry() : _ref$classRegistry,
        variableValues;
    return [transformScalars, generateRefetchQueries, transformConnections(_ref.variableValues), recordTypeInformation, transformPojosToClassesWithRegistry(classRegistry)];
  }

  function decode(selection, responseData) {
    var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
        transformers = options.transformers || defaultTransformers(options),
        context = new DecodingContext(selection, responseData);
    return decodeContext(context, transformers);
  }

  function httpFetcher(url) {
    var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    return function fetcher(graphQLParams, headers) {
      return fetch(url, _extends({
        body: JSON.stringify(graphQLParams),
        method: "POST",
        mode: "cors"
      }, options, {
        headers: _extends({
          "Content-Type": "application/json",
          Accept: "application/json"
        }, options.headers, headers)
      })).then(function (response) {
        var contentType;
        return response.headers.get("content-type").indexOf("application/json") > -1 ? response.json() : response.text().then(function (text) {
          return {
            text: text
          };
        });
      });
    };
  }

  function hasNextPage(paginatedModels) {
    return paginatedModels && paginatedModels.length && paginatedModels[paginatedModels.length - 1].hasNextPage;
  }

  var Client$2 = function () {
    function Client(typeBundle, _ref) {
      var url = _ref.url,
          fetcherOptions = _ref.fetcherOptions,
          fetcher = _ref.fetcher,
          _ref$registry = _ref.registry,
          registry = void 0 === _ref$registry ? new ClassRegistry() : _ref$registry;
      if (classCallCheck(this, Client), this.typeBundle = typeBundle, this.classRegistry = registry, url && fetcher) throw new Error("Arguments not supported: supply either `url` and optional `fetcherOptions` OR use a `fetcher` function for further customization.");
      if (url) this.fetcher = httpFetcher(url, fetcherOptions);else {
        if (!fetcher) throw new Error("Invalid arguments: one of `url` or `fetcher` is needed.");
        if (fetcherOptions) throw new Error("Arguments not supported: when specifying your own `fetcher`, set options through it and not with `fetcherOptions`");
        this.fetcher = fetcher;
      }
    }

    return createClass(Client, [{
      key: "document",
      value: function document() {
        return new Document(this.typeBundle);
      }
    }, {
      key: "query",
      value: function query() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new (Function.prototype.bind.apply(Query, [null].concat([this.typeBundle], args)))();
      }
    }, {
      key: "mutation",
      value: function mutation() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return new (Function.prototype.bind.apply(Mutation, [null].concat([this.typeBundle], args)))();
      }
    }, {
      key: "send",
      value: function send(request) {
        var variableValues = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
            _this = this,
            otherProperties = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            headers = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
            operationOrDocument = void 0,
            graphQLParams = {
          query: (operationOrDocument = Function.prototype.isPrototypeOf(request) ? request(this) : request).toString()
        };

        variableValues && (graphQLParams.variables = variableValues), Object.assign(graphQLParams, otherProperties);
        var operation = void 0;
        if (Operation.prototype.isPrototypeOf(operationOrDocument)) operation = operationOrDocument;else {
          var document = operationOrDocument;
          if (1 === document.operations.length) operation = document.operations[0];else {
            if (!otherProperties.operationName) throw new Error("\n          A document must contain exactly one operation, or an operationName\n          must be specified. Example:\n\n            client.send(document, null, {operationName: 'myFancyQuery'});\n        ");
            operation = document.operations.find(function (documentOperation) {
              return documentOperation.name === otherProperties.operationName;
            });
          }
        }
        return this.fetcher(graphQLParams, headers).then(function (response) {
          return response.data && (response.model = decode(operation, response.data, {
            classRegistry: _this.classRegistry,
            variableValues: variableValues
          })), response;
        });
      }
    }, {
      key: "fetchNextPage",
      value: function fetchNextPage(nodeOrNodes, options) {
        var node = void 0,
            _node$nextPageQueryAn = (node = Array.isArray(nodeOrNodes) ? nodeOrNodes[nodeOrNodes.length - 1] : nodeOrNodes).nextPageQueryAndPath(),
            _node$nextPageQueryAn2 = slicedToArray(_node$nextPageQueryAn, 2),
            query = _node$nextPageQueryAn2[0],
            path = _node$nextPageQueryAn2[1],
            variableValues = void 0;

        return (node.variableValues || options) && (variableValues = Object.assign({}, node.variableValues, options)), this.send(query, variableValues).then(function (response) {
          return response.model = path.reduce(function (object, key) {
            return object[key];
          }, response.model), response;
        });
      }
    }, {
      key: "fetchAllPages",
      value: function fetchAllPages(paginatedModels, _ref2) {
        var _this2 = this,
            pageSize = _ref2.pageSize;

        return hasNextPage(paginatedModels) ? this.fetchNextPage(paginatedModels, {
          first: pageSize
        }).then(function (_ref3) {
          var model = _ref3.model,
              pages = paginatedModels.concat(model);
          return _this2.fetchAllPages(pages, {
            pageSize: pageSize
          });
        }) : Promise.resolve(paginatedModels);
      }
    }, {
      key: "refetch",
      value: function refetch(nodeType) {
        if (!nodeType) throw new Error("'client#refetch' must be called with a non-null instance of a Node.");
        if (!nodeType.type.implementsNode) throw new Error("'client#refetch' must be called with a type that implements Node. Received " + nodeType.type.name + ".");
        return this.send(nodeType.refetchQuery()).then(function (_ref4) {
          var model;
          return _ref4.model.node;
        });
      }
    }, {
      key: "variable",
      value: function variable$$1(name, type, defaultValue) {
        return variable(name, type, defaultValue);
      }
    }, {
      key: "enum",
      value: function _enum(key) {
        return enumFunction(key);
      }
    }]), Client;
  }(),
      Config = function () {
    function Config(attrs) {
      var _this = this;

      classCallCheck$1(this, Config), Object.keys(this.deprecatedProperties).forEach(function (key) {
        attrs.hasOwnProperty(key) && (console.warn("[ShopifyBuy] Config property " + key + " is deprecated as of v1.0, please use " + _this.deprecatedProperties[key] + " instead."), attrs[_this.deprecatedProperties[key]] = attrs[key]);
      }), this.requiredProperties.forEach(function (key) {
        if (!attrs.hasOwnProperty(key)) throw new Error("new Config() requires the option '" + key + "'");
        _this[key] = attrs[key];
      }), attrs.hasOwnProperty("apiVersion") ? this.apiVersion = attrs.apiVersion : this.apiVersion = "2020-07", attrs.hasOwnProperty("source") && (this.source = attrs.source), attrs.hasOwnProperty("language") && (this.language = attrs.language);
    }

    return createClass$1(Config, [{
      key: "requiredProperties",
      get: function get$$1() {
        return ["storefrontAccessToken", "domain"];
      }
    }, {
      key: "deprecatedProperties",
      get: function get$$1() {
        return {
          accessToken: "storefrontAccessToken",
          apiKey: "storefrontAccessToken"
        };
      }
    }]), Config;
  }(),
      Resource = function Resource(client) {
    classCallCheck$1(this, Resource), this.graphQLClient = client;
  },
      defaultErrors = [{
    message: "an unknown error has occurred."
  }];

  function defaultResolver(path) {
    var keys = path.split(".");
    return function (_ref) {
      var model = _ref.model,
          errors = _ref.errors;
      return new Promise(function (resolve, reject) {
        try {
          var result;
          resolve(keys.reduce(function (ref, key) {
            return ref[key];
          }, model));
        } catch (_) {
          reject(errors || defaultErrors);
        }
      });
    };
  }

  function fetchResourcesForProducts(productOrProduct, client) {
    var products = [].concat(productOrProduct);
    return Promise.all(products.reduce(function (promiseAcc, product) {
      return null === product ? promiseAcc : (promiseAcc.push(client.fetchAllPages(product.images, {
        pageSize: 250
      }).then(function (images) {
        product.attrs.images = images;
      })), promiseAcc.push(client.fetchAllPages(product.variants, {
        pageSize: 250
      }).then(function (variants) {
        product.attrs.variants = variants;
      })), promiseAcc);
    }, []));
  }

  function paginateProductConnectionsAndResolve(client) {
    return function (products) {
      return fetchResourcesForProducts(products, client).then(function () {
        return products;
      });
    };
  }

  function paginateCollectionsProductConnectionsAndResolve(client) {
    return function (collectionOrCollections) {
      var collections = [].concat(collectionOrCollections);
      return Promise.all(collections.reduce(function (promiseAcc, collection) {
        return promiseAcc.concat(fetchResourcesForProducts(collection.products, client));
      }, [])).then(function () {
        return collectionOrCollections;
      });
    };
  }

  var productHelpers = {
    variantForOptions: function variantForOptions(product, options) {
      return product.variants.find(function (variant) {
        return variant.selectedOptions.every(function (selectedOption) {
          return options[selectedOption.name] === selectedOption.value.valueOf();
        });
      });
    }
  };

  function query(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.id = client.variable("id", "ID!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.ProductFragment = document.defineFragment("ProductFragment", "Product", function (root) {
      root.add("id"), root.add("availableForSale"), root.add("createdAt"), root.add("updatedAt"), root.add("descriptionHtml"), root.add("description"), root.add("handle"), root.add("productType"), root.add("title"), root.add("vendor"), root.add("publishedAt"), root.add("onlineStoreUrl"), root.add("options", function (options) {
        options.add("name"), options.add("values");
      }), root.add("images", {
        args: {
          first: 250
        }
      }, function (images) {
        images.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), images.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("src"), node.add("altText");
          });
        });
      }), root.add("variants", {
        args: {
          first: 250
        }
      }, function (variants) {
        variants.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), variants.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.VariantFragment);
          });
        });
      });
    }), document.addQuery([variables.__defaultOperation__.id], function (root) {
      root.add("node", {
        args: {
          id: variables.__defaultOperation__.id
        }
      }, function (node) {
        node.addFragment(spreads.ProductFragment);
      });
    }), document;
  }

  function query$1(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.ids = client.variable("ids", "[ID!]!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.ProductFragment = document.defineFragment("ProductFragment", "Product", function (root) {
      root.add("id"), root.add("availableForSale"), root.add("createdAt"), root.add("updatedAt"), root.add("descriptionHtml"), root.add("description"), root.add("handle"), root.add("productType"), root.add("title"), root.add("vendor"), root.add("publishedAt"), root.add("onlineStoreUrl"), root.add("options", function (options) {
        options.add("name"), options.add("values");
      }), root.add("images", {
        args: {
          first: 250
        }
      }, function (images) {
        images.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), images.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("src"), node.add("altText");
          });
        });
      }), root.add("variants", {
        args: {
          first: 250
        }
      }, function (variants) {
        variants.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), variants.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.VariantFragment);
          });
        });
      });
    }), document.addQuery([variables.__defaultOperation__.ids], function (root) {
      root.add("nodes", {
        args: {
          ids: variables.__defaultOperation__.ids
        }
      }, function (nodes) {
        nodes.addFragment(spreads.ProductFragment);
      });
    }), document;
  }

  function query$2(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.first = client.variable("first", "Int!"), variables.__defaultOperation__.query = client.variable("query", "String"), variables.__defaultOperation__.sortKey = client.variable("sortKey", "ProductSortKeys"), variables.__defaultOperation__.reverse = client.variable("reverse", "Boolean"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.ProductFragment = document.defineFragment("ProductFragment", "Product", function (root) {
      root.add("id"), root.add("availableForSale"), root.add("createdAt"), root.add("updatedAt"), root.add("descriptionHtml"), root.add("description"), root.add("handle"), root.add("productType"), root.add("title"), root.add("vendor"), root.add("publishedAt"), root.add("onlineStoreUrl"), root.add("options", function (options) {
        options.add("name"), options.add("values");
      }), root.add("images", {
        args: {
          first: 250
        }
      }, function (images) {
        images.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), images.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("src"), node.add("altText");
          });
        });
      }), root.add("variants", {
        args: {
          first: 250
        }
      }, function (variants) {
        variants.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), variants.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.VariantFragment);
          });
        });
      });
    }), document.addQuery([variables.__defaultOperation__.first, variables.__defaultOperation__.query, variables.__defaultOperation__.sortKey, variables.__defaultOperation__.reverse], function (root) {
      root.add("products", {
        args: {
          first: variables.__defaultOperation__.first,
          query: variables.__defaultOperation__.query,
          sortKey: variables.__defaultOperation__.sortKey,
          reverse: variables.__defaultOperation__.reverse
        }
      }, function (products) {
        products.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), products.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.ProductFragment);
          });
        });
      });
    }), document;
  }

  function query$3(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.handle = client.variable("handle", "String!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.ProductFragment = document.defineFragment("ProductFragment", "Product", function (root) {
      root.add("id"), root.add("availableForSale"), root.add("createdAt"), root.add("updatedAt"), root.add("descriptionHtml"), root.add("description"), root.add("handle"), root.add("productType"), root.add("title"), root.add("vendor"), root.add("publishedAt"), root.add("onlineStoreUrl"), root.add("options", function (options) {
        options.add("name"), options.add("values");
      }), root.add("images", {
        args: {
          first: 250
        }
      }, function (images) {
        images.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), images.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("src"), node.add("altText");
          });
        });
      }), root.add("variants", {
        args: {
          first: 250
        }
      }, function (variants) {
        variants.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), variants.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.VariantFragment);
          });
        });
      });
    }), document.addQuery([variables.__defaultOperation__.handle], function (root) {
      root.add("productByHandle", {
        args: {
          handle: variables.__defaultOperation__.handle
        }
      }, function (productByHandle) {
        productByHandle.addFragment(spreads.ProductFragment);
      });
    }), document;
  }

  var ProductResource = function (_Resource) {
    function ProductResource() {
      return classCallCheck$1(this, ProductResource), possibleConstructorReturn$1(this, (ProductResource.__proto__ || Object.getPrototypeOf(ProductResource)).apply(this, arguments));
    }

    return inherits$1(ProductResource, _Resource), createClass$1(ProductResource, [{
      key: "fetchAll",
      value: function fetchAll() {
        var first = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20;
        return this.graphQLClient.send(query$2, {
          first: first
        }).then(defaultResolver("products")).then(paginateProductConnectionsAndResolve(this.graphQLClient));
      }
    }, {
      key: "fetch",
      value: function fetch(id) {
        return this.graphQLClient.send(query, {
          id: id
        }).then(defaultResolver("node")).then(paginateProductConnectionsAndResolve(this.graphQLClient));
      }
    }, {
      key: "fetchMultiple",
      value: function fetchMultiple(ids) {
        return this.graphQLClient.send(query$1, {
          ids: ids
        }).then(defaultResolver("nodes")).then(paginateProductConnectionsAndResolve(this.graphQLClient));
      }
    }, {
      key: "fetchByHandle",
      value: function fetchByHandle(handle) {
        return this.graphQLClient.send(query$3, {
          handle: handle
        }).then(defaultResolver("productByHandle")).then(paginateProductConnectionsAndResolve(this.graphQLClient));
      }
    }, {
      key: "fetchQuery",
      value: function fetchQuery() {
        var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            _ref$first = _ref.first,
            first = void 0 === _ref$first ? 20 : _ref$first,
            _ref$sortKey = _ref.sortKey,
            sortKey = void 0 === _ref$sortKey ? "ID" : _ref$sortKey,
            query$$1 = _ref.query,
            reverse = _ref.reverse;

        return this.graphQLClient.send(query$2, {
          first: first,
          sortKey: sortKey,
          query: query$$1,
          reverse: reverse
        }).then(defaultResolver("products")).then(paginateProductConnectionsAndResolve(this.graphQLClient));
      }
    }, {
      key: "helpers",
      get: function get$$1() {
        return productHelpers;
      }
    }]), ProductResource;
  }(Resource);

  function query$4(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.id = client.variable("id", "ID!"), spreads.CollectionFragment = document.defineFragment("CollectionFragment", "Collection", function (root) {
      root.add("id"), root.add("handle"), root.add("description"), root.add("descriptionHtml"), root.add("updatedAt"), root.add("title"), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      });
    }), document.addQuery([variables.__defaultOperation__.id], function (root) {
      root.add("node", {
        args: {
          id: variables.__defaultOperation__.id
        }
      }, function (node) {
        node.addFragment(spreads.CollectionFragment);
      });
    }), document;
  }

  function query$5(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.id = client.variable("id", "ID!"), variables.__defaultOperation__.productsFirst = client.variable("productsFirst", "Int!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.CollectionFragment = document.defineFragment("CollectionFragment", "Collection", function (root) {
      root.add("id"), root.add("handle"), root.add("description"), root.add("descriptionHtml"), root.add("updatedAt"), root.add("title"), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      });
    }), spreads.ProductFragment = document.defineFragment("ProductFragment", "Product", function (root) {
      root.add("id"), root.add("availableForSale"), root.add("createdAt"), root.add("updatedAt"), root.add("descriptionHtml"), root.add("description"), root.add("handle"), root.add("productType"), root.add("title"), root.add("vendor"), root.add("publishedAt"), root.add("onlineStoreUrl"), root.add("options", function (options) {
        options.add("name"), options.add("values");
      }), root.add("images", {
        args: {
          first: 250
        }
      }, function (images) {
        images.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), images.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("src"), node.add("altText");
          });
        });
      }), root.add("variants", {
        args: {
          first: 250
        }
      }, function (variants) {
        variants.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), variants.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.VariantFragment);
          });
        });
      });
    }), document.addQuery([variables.__defaultOperation__.id, variables.__defaultOperation__.productsFirst], function (root) {
      root.add("node", {
        args: {
          id: variables.__defaultOperation__.id
        }
      }, function (node) {
        node.addFragment(spreads.CollectionFragment), node.addInlineFragmentOn("Collection", function (Collection) {
          Collection.add("products", {
            args: {
              first: variables.__defaultOperation__.productsFirst
            }
          }, function (products) {
            products.add("pageInfo", function (pageInfo) {
              pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
            }), products.add("edges", function (edges) {
              edges.add("cursor"), edges.add("node", function (node) {
                node.addFragment(spreads.ProductFragment);
              });
            });
          });
        });
      });
    }), document;
  }

  function query$6(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.first = client.variable("first", "Int!"), variables.__defaultOperation__.query = client.variable("query", "String"), variables.__defaultOperation__.sortKey = client.variable("sortKey", "CollectionSortKeys"), variables.__defaultOperation__.reverse = client.variable("reverse", "Boolean"), spreads.CollectionFragment = document.defineFragment("CollectionFragment", "Collection", function (root) {
      root.add("id"), root.add("handle"), root.add("description"), root.add("descriptionHtml"), root.add("updatedAt"), root.add("title"), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      });
    }), document.addQuery([variables.__defaultOperation__.first, variables.__defaultOperation__.query, variables.__defaultOperation__.sortKey, variables.__defaultOperation__.reverse], function (root) {
      root.add("collections", {
        args: {
          first: variables.__defaultOperation__.first,
          query: variables.__defaultOperation__.query,
          sortKey: variables.__defaultOperation__.sortKey,
          reverse: variables.__defaultOperation__.reverse
        }
      }, function (collections) {
        collections.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), collections.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.CollectionFragment);
          });
        });
      });
    }), document;
  }

  function query$7(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.first = client.variable("first", "Int!"), variables.__defaultOperation__.query = client.variable("query", "String"), variables.__defaultOperation__.sortKey = client.variable("sortKey", "CollectionSortKeys"), variables.__defaultOperation__.reverse = client.variable("reverse", "Boolean"), variables.__defaultOperation__.productsFirst = client.variable("productsFirst", "Int!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.CollectionFragment = document.defineFragment("CollectionFragment", "Collection", function (root) {
      root.add("id"), root.add("handle"), root.add("description"), root.add("descriptionHtml"), root.add("updatedAt"), root.add("title"), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      });
    }), spreads.ProductFragment = document.defineFragment("ProductFragment", "Product", function (root) {
      root.add("id"), root.add("availableForSale"), root.add("createdAt"), root.add("updatedAt"), root.add("descriptionHtml"), root.add("description"), root.add("handle"), root.add("productType"), root.add("title"), root.add("vendor"), root.add("publishedAt"), root.add("onlineStoreUrl"), root.add("options", function (options) {
        options.add("name"), options.add("values");
      }), root.add("images", {
        args: {
          first: 250
        }
      }, function (images) {
        images.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), images.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("src"), node.add("altText");
          });
        });
      }), root.add("variants", {
        args: {
          first: 250
        }
      }, function (variants) {
        variants.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), variants.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.VariantFragment);
          });
        });
      });
    }), document.addQuery([variables.__defaultOperation__.first, variables.__defaultOperation__.query, variables.__defaultOperation__.sortKey, variables.__defaultOperation__.reverse, variables.__defaultOperation__.productsFirst], function (root) {
      root.add("collections", {
        args: {
          first: variables.__defaultOperation__.first,
          query: variables.__defaultOperation__.query,
          sortKey: variables.__defaultOperation__.sortKey,
          reverse: variables.__defaultOperation__.reverse
        }
      }, function (collections) {
        collections.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), collections.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.CollectionFragment), node.add("products", {
              args: {
                first: variables.__defaultOperation__.productsFirst
              }
            }, function (products) {
              products.add("pageInfo", function (pageInfo) {
                pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
              }), products.add("edges", function (edges) {
                edges.add("cursor"), edges.add("node", function (node) {
                  node.addFragment(spreads.ProductFragment);
                });
              });
            });
          });
        });
      });
    }), document;
  }

  function query$8(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.handle = client.variable("handle", "String!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.ProductFragment = document.defineFragment("ProductFragment", "Product", function (root) {
      root.add("id"), root.add("availableForSale"), root.add("createdAt"), root.add("updatedAt"), root.add("descriptionHtml"), root.add("description"), root.add("handle"), root.add("productType"), root.add("title"), root.add("vendor"), root.add("publishedAt"), root.add("onlineStoreUrl"), root.add("options", function (options) {
        options.add("name"), options.add("values");
      }), root.add("images", {
        args: {
          first: 250
        }
      }, function (images) {
        images.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), images.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("src"), node.add("altText");
          });
        });
      }), root.add("variants", {
        args: {
          first: 250
        }
      }, function (variants) {
        variants.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), variants.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.VariantFragment);
          });
        });
      });
    }), spreads.CollectionFragment = document.defineFragment("CollectionFragment", "Collection", function (root) {
      root.add("id"), root.add("handle"), root.add("description"), root.add("descriptionHtml"), root.add("updatedAt"), root.add("title"), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      });
    }), spreads.CollectionsProductsFragment = document.defineFragment("CollectionsProductsFragment", "Collection", function (root) {
      root.add("products", {
        args: {
          first: 20
        }
      }, function (products) {
        products.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), products.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.addFragment(spreads.ProductFragment);
          });
        });
      });
    }), document.addQuery([variables.__defaultOperation__.handle], function (root) {
      root.add("collectionByHandle", {
        args: {
          handle: variables.__defaultOperation__.handle
        }
      }, function (collectionByHandle) {
        collectionByHandle.addFragment(spreads.CollectionFragment), collectionByHandle.addFragment(spreads.CollectionsProductsFragment);
      });
    }), document;
  }

  var CollectionResource = function (_Resource) {
    function CollectionResource() {
      return classCallCheck$1(this, CollectionResource), possibleConstructorReturn$1(this, (CollectionResource.__proto__ || Object.getPrototypeOf(CollectionResource)).apply(this, arguments));
    }

    return inherits$1(CollectionResource, _Resource), createClass$1(CollectionResource, [{
      key: "fetchAll",
      value: function fetchAll() {
        var first = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20;
        return this.graphQLClient.send(query$6, {
          first: first
        }).then(defaultResolver("collections"));
      }
    }, {
      key: "fetchAllWithProducts",
      value: function fetchAllWithProducts() {
        var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            _ref$first = _ref.first,
            first = void 0 === _ref$first ? 20 : _ref$first,
            _ref$productsFirst = _ref.productsFirst,
            productsFirst = void 0 === _ref$productsFirst ? 20 : _ref$productsFirst;

        return this.graphQLClient.send(query$7, {
          first: first,
          productsFirst: productsFirst
        }).then(defaultResolver("collections")).then(paginateCollectionsProductConnectionsAndResolve(this.graphQLClient));
      }
    }, {
      key: "fetch",
      value: function fetch(id) {
        return this.graphQLClient.send(query$4, {
          id: id
        }).then(defaultResolver("node"));
      }
    }, {
      key: "fetchWithProducts",
      value: function fetchWithProducts(id) {
        var _ref2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
            _ref2$productsFirst = _ref2.productsFirst,
            productsFirst = void 0 === _ref2$productsFirst ? 20 : _ref2$productsFirst;

        return this.graphQLClient.send(query$5, {
          id: id,
          productsFirst: productsFirst
        }).then(defaultResolver("node")).then(paginateCollectionsProductConnectionsAndResolve(this.graphQLClient));
      }
    }, {
      key: "fetchByHandle",
      value: function fetchByHandle(handle) {
        return this.graphQLClient.send(query$8, {
          handle: handle
        }).then(defaultResolver("collectionByHandle"));
      }
    }, {
      key: "fetchQuery",
      value: function fetchQuery() {
        var _ref3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            _ref3$first = _ref3.first,
            first = void 0 === _ref3$first ? 20 : _ref3$first,
            _ref3$sortKey = _ref3.sortKey,
            sortKey = void 0 === _ref3$sortKey ? "ID" : _ref3$sortKey,
            query = _ref3.query,
            reverse = _ref3.reverse;

        return this.graphQLClient.send(query$6, {
          first: first,
          sortKey: sortKey,
          query: query,
          reverse: reverse
        }).then(defaultResolver("collections"));
      }
    }]), CollectionResource;
  }(Resource);

  function query$9(client) {
    var document = client.document();
    return document.addQuery(function (root) {
      root.add("shop", function (shop) {
        shop.add("currencyCode"), shop.add("paymentSettings", function (paymentSettings) {
          paymentSettings.add("enabledPresentmentCurrencies");
        }), shop.add("description"), shop.add("moneyFormat"), shop.add("name"), shop.add("primaryDomain", function (primaryDomain) {
          primaryDomain.add("host"), primaryDomain.add("sslEnabled"), primaryDomain.add("url");
        });
      });
    }), document;
  }

  function query$10(client) {
    var document = client.document(),
        spreads = {};
    return spreads.PolicyFragment = document.defineFragment("PolicyFragment", "ShopPolicy", function (root) {
      root.add("id"), root.add("title"), root.add("url"), root.add("body");
    }), document.addQuery(function (root) {
      root.add("shop", function (shop) {
        shop.add("privacyPolicy", function (privacyPolicy) {
          privacyPolicy.addFragment(spreads.PolicyFragment);
        }), shop.add("termsOfService", function (termsOfService) {
          termsOfService.addFragment(spreads.PolicyFragment);
        }), shop.add("refundPolicy", function (refundPolicy) {
          refundPolicy.addFragment(spreads.PolicyFragment);
        });
      });
    }), document;
  }

  var ShopResource = function (_Resource) {
    function ShopResource() {
      return classCallCheck$1(this, ShopResource), possibleConstructorReturn$1(this, (ShopResource.__proto__ || Object.getPrototypeOf(ShopResource)).apply(this, arguments));
    }

    return inherits$1(ShopResource, _Resource), createClass$1(ShopResource, [{
      key: "fetchInfo",
      value: function fetchInfo() {
        return this.graphQLClient.send(query$9).then(defaultResolver("shop"));
      }
    }, {
      key: "fetchPolicies",
      value: function fetchPolicies() {
        return this.graphQLClient.send(query$10).then(defaultResolver("shop"));
      }
    }]), ShopResource;
  }(Resource);

  function handleCheckoutMutation(mutationRootKey, client) {
    return function (_ref) {
      var _ref$data = _ref.data,
          data = void 0 === _ref$data ? {} : _ref$data,
          errors = _ref.errors,
          _ref$model = _ref.model,
          model = void 0 === _ref$model ? {} : _ref$model,
          rootData = data[mutationRootKey],
          rootModel = model[mutationRootKey];
      return rootData && rootData.checkout ? client.fetchAllPages(rootModel.checkout.lineItems, {
        pageSize: 250
      }).then(function (lineItems) {
        return rootModel.checkout.attrs.lineItems = lineItems, rootModel.checkout.errors = errors, rootModel.checkout.userErrors = rootModel.userErrors, rootModel.checkout;
      }) : errors && errors.length ? Promise.reject(new Error(JSON.stringify(errors))) : rootData && rootData.checkoutUserErrors && rootData.checkoutUserErrors.length ? Promise.reject(new Error(JSON.stringify(rootData.checkoutUserErrors))) : rootData && rootData.userErrors && rootData.userErrors.length ? Promise.reject(new Error(JSON.stringify(rootData.userErrors))) : Promise.reject(new Error("The " + mutationRootKey + " mutation failed due to an unknown error."));
    };
  }

  function query$11(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.id = client.variable("id", "ID!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addQuery([variables.__defaultOperation__.id], function (root) {
      root.add("node", {
        args: {
          id: variables.__defaultOperation__.id
        }
      }, function (node) {
        node.addFragment(spreads.CheckoutFragment);
      });
    }), document;
  }

  function query$12(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.input = client.variable("input", "CheckoutCreateInput!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation([variables.__defaultOperation__.input], function (root) {
      root.add("checkoutCreate", {
        args: {
          input: variables.__defaultOperation__.input
        }
      }, function (checkoutCreate) {
        checkoutCreate.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutCreate.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutCreate.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$13(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.checkoutId = client.variable("checkoutId", "ID!"), variables.__defaultOperation__.lineItems = client.variable("lineItems", "[CheckoutLineItemInput!]!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation([variables.__defaultOperation__.checkoutId, variables.__defaultOperation__.lineItems], function (root) {
      root.add("checkoutLineItemsAdd", {
        args: {
          checkoutId: variables.__defaultOperation__.checkoutId,
          lineItems: variables.__defaultOperation__.lineItems
        }
      }, function (checkoutLineItemsAdd) {
        checkoutLineItemsAdd.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutLineItemsAdd.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutLineItemsAdd.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$14(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.checkoutId = client.variable("checkoutId", "ID!"), variables.__defaultOperation__.lineItemIds = client.variable("lineItemIds", "[ID!]!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation([variables.__defaultOperation__.checkoutId, variables.__defaultOperation__.lineItemIds], function (root) {
      root.add("checkoutLineItemsRemove", {
        args: {
          checkoutId: variables.__defaultOperation__.checkoutId,
          lineItemIds: variables.__defaultOperation__.lineItemIds
        }
      }, function (checkoutLineItemsRemove) {
        checkoutLineItemsRemove.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutLineItemsRemove.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutLineItemsRemove.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$15(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.checkoutId = client.variable("checkoutId", "ID!"), variables.__defaultOperation__.lineItems = client.variable("lineItems", "[CheckoutLineItemInput!]!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation([variables.__defaultOperation__.checkoutId, variables.__defaultOperation__.lineItems], function (root) {
      root.add("checkoutLineItemsReplace", {
        args: {
          checkoutId: variables.__defaultOperation__.checkoutId,
          lineItems: variables.__defaultOperation__.lineItems
        }
      }, function (checkoutLineItemsReplace) {
        checkoutLineItemsReplace.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutLineItemsReplace.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$16(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      __defaultOperation__: {}
    };
    return variables.__defaultOperation__.checkoutId = client.variable("checkoutId", "ID!"), variables.__defaultOperation__.lineItems = client.variable("lineItems", "[CheckoutLineItemUpdateInput!]!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation([variables.__defaultOperation__.checkoutId, variables.__defaultOperation__.lineItems], function (root) {
      root.add("checkoutLineItemsUpdate", {
        args: {
          checkoutId: variables.__defaultOperation__.checkoutId,
          lineItems: variables.__defaultOperation__.lineItems
        }
      }, function (checkoutLineItemsUpdate) {
        checkoutLineItemsUpdate.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutLineItemsUpdate.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutLineItemsUpdate.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$17(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      checkoutAttributesUpdateV2: {}
    };
    return variables.checkoutAttributesUpdateV2.checkoutId = client.variable("checkoutId", "ID!"), variables.checkoutAttributesUpdateV2.input = client.variable("input", "CheckoutAttributesUpdateV2Input!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation("checkoutAttributesUpdateV2", [variables.checkoutAttributesUpdateV2.checkoutId, variables.checkoutAttributesUpdateV2.input], function (root) {
      root.add("checkoutAttributesUpdateV2", {
        args: {
          checkoutId: variables.checkoutAttributesUpdateV2.checkoutId,
          input: variables.checkoutAttributesUpdateV2.input
        }
      }, function (checkoutAttributesUpdateV2) {
        checkoutAttributesUpdateV2.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutAttributesUpdateV2.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutAttributesUpdateV2.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$18(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      checkoutDiscountCodeApplyV2: {}
    };
    return variables.checkoutDiscountCodeApplyV2.discountCode = client.variable("discountCode", "String!"), variables.checkoutDiscountCodeApplyV2.checkoutId = client.variable("checkoutId", "ID!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation("checkoutDiscountCodeApplyV2", [variables.checkoutDiscountCodeApplyV2.discountCode, variables.checkoutDiscountCodeApplyV2.checkoutId], function (root) {
      root.add("checkoutDiscountCodeApplyV2", {
        args: {
          discountCode: variables.checkoutDiscountCodeApplyV2.discountCode,
          checkoutId: variables.checkoutDiscountCodeApplyV2.checkoutId
        }
      }, function (checkoutDiscountCodeApplyV2) {
        checkoutDiscountCodeApplyV2.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutDiscountCodeApplyV2.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutDiscountCodeApplyV2.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$19(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      checkoutDiscountCodeRemove: {}
    };
    return variables.checkoutDiscountCodeRemove.checkoutId = client.variable("checkoutId", "ID!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation("checkoutDiscountCodeRemove", [variables.checkoutDiscountCodeRemove.checkoutId], function (root) {
      root.add("checkoutDiscountCodeRemove", {
        args: {
          checkoutId: variables.checkoutDiscountCodeRemove.checkoutId
        }
      }, function (checkoutDiscountCodeRemove) {
        checkoutDiscountCodeRemove.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutDiscountCodeRemove.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutDiscountCodeRemove.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$20(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      checkoutGiftCardsAppend: {}
    };
    return variables.checkoutGiftCardsAppend.giftCardCodes = client.variable("giftCardCodes", "[String!]!"), variables.checkoutGiftCardsAppend.checkoutId = client.variable("checkoutId", "ID!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation("checkoutGiftCardsAppend", [variables.checkoutGiftCardsAppend.giftCardCodes, variables.checkoutGiftCardsAppend.checkoutId], function (root) {
      root.add("checkoutGiftCardsAppend", {
        args: {
          giftCardCodes: variables.checkoutGiftCardsAppend.giftCardCodes,
          checkoutId: variables.checkoutGiftCardsAppend.checkoutId
        }
      }, function (checkoutGiftCardsAppend) {
        checkoutGiftCardsAppend.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutGiftCardsAppend.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutGiftCardsAppend.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$21(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      checkoutGiftCardRemoveV2: {}
    };
    return variables.checkoutGiftCardRemoveV2.appliedGiftCardId = client.variable("appliedGiftCardId", "ID!"), variables.checkoutGiftCardRemoveV2.checkoutId = client.variable("checkoutId", "ID!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation("checkoutGiftCardRemoveV2", [variables.checkoutGiftCardRemoveV2.appliedGiftCardId, variables.checkoutGiftCardRemoveV2.checkoutId], function (root) {
      root.add("checkoutGiftCardRemoveV2", {
        args: {
          appliedGiftCardId: variables.checkoutGiftCardRemoveV2.appliedGiftCardId,
          checkoutId: variables.checkoutGiftCardRemoveV2.checkoutId
        }
      }, function (checkoutGiftCardRemoveV2) {
        checkoutGiftCardRemoveV2.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutGiftCardRemoveV2.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutGiftCardRemoveV2.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$22(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      checkoutEmailUpdateV2: {}
    };
    return variables.checkoutEmailUpdateV2.checkoutId = client.variable("checkoutId", "ID!"), variables.checkoutEmailUpdateV2.email = client.variable("email", "String!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation("checkoutEmailUpdateV2", [variables.checkoutEmailUpdateV2.checkoutId, variables.checkoutEmailUpdateV2.email], function (root) {
      root.add("checkoutEmailUpdateV2", {
        args: {
          checkoutId: variables.checkoutEmailUpdateV2.checkoutId,
          email: variables.checkoutEmailUpdateV2.email
        }
      }, function (checkoutEmailUpdateV2) {
        checkoutEmailUpdateV2.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutEmailUpdateV2.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutEmailUpdateV2.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  function query$23(client) {
    var document = client.document(),
        spreads = {},
        variables = {
      checkoutShippingAddressUpdateV2: {}
    };
    return variables.checkoutShippingAddressUpdateV2.shippingAddress = client.variable("shippingAddress", "MailingAddressInput!"), variables.checkoutShippingAddressUpdateV2.checkoutId = client.variable("checkoutId", "ID!"), spreads.VariantFragment = document.defineFragment("VariantFragment", "ProductVariant", function (root) {
      root.add("id"), root.add("title"), root.add("price"), root.add("priceV2", function (priceV2) {
        priceV2.add("amount"), priceV2.add("currencyCode");
      }), root.add("presentmentPrices", {
        args: {
          first: 20
        }
      }, function (presentmentPrices) {
        presentmentPrices.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), presentmentPrices.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.add("price", function (price) {
              price.add("amount"), price.add("currencyCode");
            }), node.add("compareAtPrice", function (compareAtPrice) {
              compareAtPrice.add("amount"), compareAtPrice.add("currencyCode");
            });
          });
        });
      }), root.add("weight"), root.add("availableForSale", {
        alias: "available"
      }), root.add("sku"), root.add("compareAtPrice"), root.add("compareAtPriceV2", function (compareAtPriceV2) {
        compareAtPriceV2.add("amount"), compareAtPriceV2.add("currencyCode");
      }), root.add("image", function (image) {
        image.add("id"), image.add("originalSrc", {
          alias: "src"
        }), image.add("altText");
      }), root.add("selectedOptions", function (selectedOptions) {
        selectedOptions.add("name"), selectedOptions.add("value");
      }), root.add("unitPrice", function (unitPrice) {
        unitPrice.add("amount"), unitPrice.add("currencyCode");
      }), root.add("unitPriceMeasurement", function (unitPriceMeasurement) {
        unitPriceMeasurement.add("measuredType"), unitPriceMeasurement.add("quantityUnit"), unitPriceMeasurement.add("quantityValue"), unitPriceMeasurement.add("referenceUnit"), unitPriceMeasurement.add("referenceValue");
      });
    }), spreads.DiscountApplicationFragment = document.defineFragment("DiscountApplicationFragment", "DiscountApplication", function (root) {
      root.add("targetSelection"), root.add("allocationMethod"), root.add("targetType"), root.add("value", function (value) {
        value.addInlineFragmentOn("MoneyV2", function (MoneyV2) {
          MoneyV2.add("amount"), MoneyV2.add("currencyCode");
        }), value.addInlineFragmentOn("PricingPercentageValue", function (PricingPercentageValue) {
          PricingPercentageValue.add("percentage");
        });
      }), root.addInlineFragmentOn("ManualDiscountApplication", function (ManualDiscountApplication) {
        ManualDiscountApplication.add("title"), ManualDiscountApplication.add("description");
      }), root.addInlineFragmentOn("DiscountCodeApplication", function (DiscountCodeApplication) {
        DiscountCodeApplication.add("code"), DiscountCodeApplication.add("applicable");
      }), root.addInlineFragmentOn("ScriptDiscountApplication", function (ScriptDiscountApplication) {
        ScriptDiscountApplication.add("description");
      }), root.addInlineFragmentOn("AutomaticDiscountApplication", function (AutomaticDiscountApplication) {
        AutomaticDiscountApplication.add("title");
      });
    }), spreads.AppliedGiftCardFragment = document.defineFragment("AppliedGiftCardFragment", "AppliedGiftCard", function (root) {
      root.add("amountUsedV2", function (amountUsedV2) {
        amountUsedV2.add("amount"), amountUsedV2.add("currencyCode");
      }), root.add("balanceV2", function (balanceV2) {
        balanceV2.add("amount"), balanceV2.add("currencyCode");
      }), root.add("presentmentAmountUsed", function (presentmentAmountUsed) {
        presentmentAmountUsed.add("amount"), presentmentAmountUsed.add("currencyCode");
      }), root.add("id"), root.add("lastCharacters");
    }), spreads.VariantWithProductFragment = document.defineFragment("VariantWithProductFragment", "ProductVariant", function (root) {
      root.addFragment(spreads.VariantFragment), root.add("product", function (product) {
        product.add("id"), product.add("handle");
      });
    }), spreads.UserErrorFragment = document.defineFragment("UserErrorFragment", "UserError", function (root) {
      root.add("field"), root.add("message");
    }), spreads.CheckoutUserErrorFragment = document.defineFragment("CheckoutUserErrorFragment", "CheckoutUserError", function (root) {
      root.add("field"), root.add("message"), root.add("code");
    }), spreads.MailingAddressFragment = document.defineFragment("MailingAddressFragment", "MailingAddress", function (root) {
      root.add("id"), root.add("address1"), root.add("address2"), root.add("city"), root.add("company"), root.add("country"), root.add("firstName"), root.add("formatted"), root.add("lastName"), root.add("latitude"), root.add("longitude"), root.add("phone"), root.add("province"), root.add("zip"), root.add("name"), root.add("countryCodeV2", {
        alias: "countryCode"
      }), root.add("provinceCode");
    }), spreads.CheckoutFragment = document.defineFragment("CheckoutFragment", "Checkout", function (root) {
      root.add("id"), root.add("ready"), root.add("requiresShipping"), root.add("note"), root.add("paymentDue"), root.add("paymentDueV2", function (paymentDueV2) {
        paymentDueV2.add("amount"), paymentDueV2.add("currencyCode");
      }), root.add("webUrl"), root.add("orderStatusUrl"), root.add("taxExempt"), root.add("taxesIncluded"), root.add("currencyCode"), root.add("totalTax"), root.add("totalTaxV2", function (totalTaxV2) {
        totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
      }), root.add("lineItemsSubtotalPrice", function (lineItemsSubtotalPrice) {
        lineItemsSubtotalPrice.add("amount"), lineItemsSubtotalPrice.add("currencyCode");
      }), root.add("subtotalPrice"), root.add("subtotalPriceV2", function (subtotalPriceV2) {
        subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
      }), root.add("totalPrice"), root.add("totalPriceV2", function (totalPriceV2) {
        totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
      }), root.add("completedAt"), root.add("createdAt"), root.add("updatedAt"), root.add("email"), root.add("discountApplications", {
        args: {
          first: 10
        }
      }, function (discountApplications) {
        discountApplications.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), discountApplications.add("edges", function (edges) {
          edges.add("node", function (node) {
            node.addFragment(spreads.DiscountApplicationFragment);
          });
        });
      }), root.add("appliedGiftCards", function (appliedGiftCards) {
        appliedGiftCards.addFragment(spreads.AppliedGiftCardFragment);
      }), root.add("shippingAddress", function (shippingAddress) {
        shippingAddress.addFragment(spreads.MailingAddressFragment);
      }), root.add("shippingLine", function (shippingLine) {
        shippingLine.add("handle"), shippingLine.add("price"), shippingLine.add("priceV2", function (priceV2) {
          priceV2.add("amount"), priceV2.add("currencyCode");
        }), shippingLine.add("title");
      }), root.add("customAttributes", function (customAttributes) {
        customAttributes.add("key"), customAttributes.add("value");
      }), root.add("order", function (order) {
        order.add("id"), order.add("processedAt"), order.add("orderNumber"), order.add("subtotalPrice"), order.add("subtotalPriceV2", function (subtotalPriceV2) {
          subtotalPriceV2.add("amount"), subtotalPriceV2.add("currencyCode");
        }), order.add("totalShippingPrice"), order.add("totalShippingPriceV2", function (totalShippingPriceV2) {
          totalShippingPriceV2.add("amount"), totalShippingPriceV2.add("currencyCode");
        }), order.add("totalTax"), order.add("totalTaxV2", function (totalTaxV2) {
          totalTaxV2.add("amount"), totalTaxV2.add("currencyCode");
        }), order.add("totalPrice"), order.add("totalPriceV2", function (totalPriceV2) {
          totalPriceV2.add("amount"), totalPriceV2.add("currencyCode");
        }), order.add("currencyCode"), order.add("totalRefunded"), order.add("totalRefundedV2", function (totalRefundedV2) {
          totalRefundedV2.add("amount"), totalRefundedV2.add("currencyCode");
        }), order.add("customerUrl"), order.add("shippingAddress", function (shippingAddress) {
          shippingAddress.addFragment(spreads.MailingAddressFragment);
        }), order.add("lineItems", {
          args: {
            first: 250
          }
        }, function (lineItems) {
          lineItems.add("pageInfo", function (pageInfo) {
            pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
          }), lineItems.add("edges", function (edges) {
            edges.add("cursor"), edges.add("node", function (node) {
              node.add("title"), node.add("variant", function (variant) {
                variant.addFragment(spreads.VariantWithProductFragment);
              }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
                customAttributes.add("key"), customAttributes.add("value");
              });
            });
          });
        });
      }), root.add("lineItems", {
        args: {
          first: 250
        }
      }, function (lineItems) {
        lineItems.add("pageInfo", function (pageInfo) {
          pageInfo.add("hasNextPage"), pageInfo.add("hasPreviousPage");
        }), lineItems.add("edges", function (edges) {
          edges.add("cursor"), edges.add("node", function (node) {
            node.add("id"), node.add("title"), node.add("variant", function (variant) {
              variant.addFragment(spreads.VariantWithProductFragment);
            }), node.add("quantity"), node.add("customAttributes", function (customAttributes) {
              customAttributes.add("key"), customAttributes.add("value");
            }), node.add("discountAllocations", function (discountAllocations) {
              discountAllocations.add("allocatedAmount", function (allocatedAmount) {
                allocatedAmount.add("amount"), allocatedAmount.add("currencyCode");
              }), discountAllocations.add("discountApplication", function (discountApplication) {
                discountApplication.addFragment(spreads.DiscountApplicationFragment);
              });
            });
          });
        });
      });
    }), document.addMutation("checkoutShippingAddressUpdateV2", [variables.checkoutShippingAddressUpdateV2.shippingAddress, variables.checkoutShippingAddressUpdateV2.checkoutId], function (root) {
      root.add("checkoutShippingAddressUpdateV2", {
        args: {
          shippingAddress: variables.checkoutShippingAddressUpdateV2.shippingAddress,
          checkoutId: variables.checkoutShippingAddressUpdateV2.checkoutId
        }
      }, function (checkoutShippingAddressUpdateV2) {
        checkoutShippingAddressUpdateV2.add("userErrors", function (userErrors) {
          userErrors.addFragment(spreads.UserErrorFragment);
        }), checkoutShippingAddressUpdateV2.add("checkoutUserErrors", function (checkoutUserErrors) {
          checkoutUserErrors.addFragment(spreads.CheckoutUserErrorFragment);
        }), checkoutShippingAddressUpdateV2.add("checkout", function (checkout) {
          checkout.addFragment(spreads.CheckoutFragment);
        });
      });
    }), document;
  }

  var CheckoutResource = function (_Resource) {
    function CheckoutResource() {
      return classCallCheck$1(this, CheckoutResource), possibleConstructorReturn$1(this, (CheckoutResource.__proto__ || Object.getPrototypeOf(CheckoutResource)).apply(this, arguments));
    }

    return inherits$1(CheckoutResource, _Resource), createClass$1(CheckoutResource, [{
      key: "fetch",
      value: function fetch(id) {
        var _this2 = this;

        return this.graphQLClient.send(query$11, {
          id: id
        }).then(defaultResolver("node")).then(function (checkout) {
          return checkout ? _this2.graphQLClient.fetchAllPages(checkout.lineItems, {
            pageSize: 250
          }).then(function (lineItems) {
            return checkout.attrs.lineItems = lineItems, checkout;
          }) : null;
        });
      }
    }, {
      key: "create",
      value: function create() {
        var input = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return this.graphQLClient.send(query$12, {
          input: input
        }).then(handleCheckoutMutation("checkoutCreate", this.graphQLClient));
      }
    }, {
      key: "updateAttributes",
      value: function updateAttributes(checkoutId) {
        var input = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        return this.graphQLClient.send(query$17, {
          checkoutId: checkoutId,
          input: input
        }).then(handleCheckoutMutation("checkoutAttributesUpdateV2", this.graphQLClient));
      }
    }, {
      key: "updateEmail",
      value: function updateEmail(checkoutId, email) {
        return this.graphQLClient.send(query$22, {
          checkoutId: checkoutId,
          email: email
        }).then(handleCheckoutMutation("checkoutEmailUpdateV2", this.graphQLClient));
      }
    }, {
      key: "addLineItems",
      value: function addLineItems(checkoutId, lineItems) {
        return this.graphQLClient.send(query$13, {
          checkoutId: checkoutId,
          lineItems: lineItems
        }).then(handleCheckoutMutation("checkoutLineItemsAdd", this.graphQLClient));
      }
    }, {
      key: "addDiscount",
      value: function addDiscount(checkoutId, discountCode) {
        return this.graphQLClient.send(query$18, {
          checkoutId: checkoutId,
          discountCode: discountCode
        }).then(handleCheckoutMutation("checkoutDiscountCodeApplyV2", this.graphQLClient));
      }
    }, {
      key: "removeDiscount",
      value: function removeDiscount(checkoutId) {
        return this.graphQLClient.send(query$19, {
          checkoutId: checkoutId
        }).then(handleCheckoutMutation("checkoutDiscountCodeRemove", this.graphQLClient));
      }
    }, {
      key: "addGiftCards",
      value: function addGiftCards(checkoutId, giftCardCodes) {
        return this.graphQLClient.send(query$20, {
          checkoutId: checkoutId,
          giftCardCodes: giftCardCodes
        }).then(handleCheckoutMutation("checkoutGiftCardsAppend", this.graphQLClient));
      }
    }, {
      key: "removeGiftCard",
      value: function removeGiftCard(checkoutId, appliedGiftCardId) {
        return this.graphQLClient.send(query$21, {
          checkoutId: checkoutId,
          appliedGiftCardId: appliedGiftCardId
        }).then(handleCheckoutMutation("checkoutGiftCardRemoveV2", this.graphQLClient));
      }
    }, {
      key: "removeLineItems",
      value: function removeLineItems(checkoutId, lineItemIds) {
        return this.graphQLClient.send(query$14, {
          checkoutId: checkoutId,
          lineItemIds: lineItemIds
        }).then(handleCheckoutMutation("checkoutLineItemsRemove", this.graphQLClient));
      }
    }, {
      key: "replaceLineItems",
      value: function replaceLineItems(checkoutId, lineItems) {
        return this.graphQLClient.send(query$15, {
          checkoutId: checkoutId,
          lineItems: lineItems
        }).then(handleCheckoutMutation("checkoutLineItemsReplace", this.graphQLClient));
      }
    }, {
      key: "updateLineItems",
      value: function updateLineItems(checkoutId, lineItems) {
        return this.graphQLClient.send(query$16, {
          checkoutId: checkoutId,
          lineItems: lineItems
        }).then(handleCheckoutMutation("checkoutLineItemsUpdate", this.graphQLClient));
      }
    }, {
      key: "updateShippingAddress",
      value: function updateShippingAddress(checkoutId, shippingAddress) {
        return this.graphQLClient.send(query$23, {
          checkoutId: checkoutId,
          shippingAddress: shippingAddress
        }).then(handleCheckoutMutation("checkoutShippingAddressUpdateV2", this.graphQLClient));
      }
    }]), CheckoutResource;
  }(Resource),
      imageHelpers = {
    imageForSize: function imageForSize(image, _ref) {
      var maxWidth = _ref.maxWidth,
          maxHeight = _ref.maxHeight,
          splitUrl = image.src.split("?"),
          notQuery = splitUrl[0],
          query = splitUrl[1] ? "?" + splitUrl[1] : "",
          imageTokens = notQuery.split("."),
          imagePathIndex = imageTokens.length - 2;
      return imageTokens[imagePathIndex] = imageTokens[imagePathIndex] + "_" + maxWidth + "x" + maxHeight, "" + imageTokens.join(".") + query;
    }
  },
      ImageResource = function (_Resource) {
    function ImageResource() {
      return classCallCheck$1(this, ImageResource), possibleConstructorReturn$1(this, (ImageResource.__proto__ || Object.getPrototypeOf(ImageResource)).apply(this, arguments));
    }

    return inherits$1(ImageResource, _Resource), createClass$1(ImageResource, [{
      key: "helpers",
      get: function get$$1() {
        return imageHelpers;
      }
    }]), ImageResource;
  }(Resource),
      version = "2.11.0",
      AppliedGiftCard = {
    name: "AppliedGiftCard",
    kind: "OBJECT",
    fieldBaseTypes: {
      amountUsedV2: "MoneyV2",
      balanceV2: "MoneyV2",
      id: "ID",
      lastCharacters: "String",
      presentmentAmountUsed: "MoneyV2"
    },
    implementsNode: !0
  },
      Attribute = {
    name: "Attribute",
    kind: "OBJECT",
    fieldBaseTypes: {
      key: "String",
      value: "String"
    },
    implementsNode: !1
  },
      AutomaticDiscountApplication = {
    name: "AutomaticDiscountApplication",
    kind: "OBJECT",
    fieldBaseTypes: {
      title: "String"
    },
    implementsNode: !1
  },
      Boolean$1 = {
    name: "Boolean",
    kind: "SCALAR"
  },
      Checkout = {
    name: "Checkout",
    kind: "OBJECT",
    fieldBaseTypes: {
      appliedGiftCards: "AppliedGiftCard",
      completedAt: "DateTime",
      createdAt: "DateTime",
      currencyCode: "CurrencyCode",
      customAttributes: "Attribute",
      discountApplications: "DiscountApplicationConnection",
      email: "String",
      id: "ID",
      lineItems: "CheckoutLineItemConnection",
      lineItemsSubtotalPrice: "MoneyV2",
      note: "String",
      order: "Order",
      orderStatusUrl: "URL",
      paymentDue: "Money",
      paymentDueV2: "MoneyV2",
      ready: "Boolean",
      requiresShipping: "Boolean",
      shippingAddress: "MailingAddress",
      shippingLine: "ShippingRate",
      subtotalPrice: "Money",
      subtotalPriceV2: "MoneyV2",
      taxExempt: "Boolean",
      taxesIncluded: "Boolean",
      totalPrice: "Money",
      totalPriceV2: "MoneyV2",
      totalTax: "Money",
      totalTaxV2: "MoneyV2",
      updatedAt: "DateTime",
      webUrl: "URL"
    },
    implementsNode: !0
  },
      CheckoutAttributesUpdateV2Payload = {
    name: "CheckoutAttributesUpdateV2Payload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutCreatePayload = {
    name: "CheckoutCreatePayload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutDiscountCodeApplyV2Payload = {
    name: "CheckoutDiscountCodeApplyV2Payload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutDiscountCodeRemovePayload = {
    name: "CheckoutDiscountCodeRemovePayload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutEmailUpdateV2Payload = {
    name: "CheckoutEmailUpdateV2Payload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutErrorCode = {
    name: "CheckoutErrorCode",
    kind: "ENUM"
  },
      CheckoutGiftCardRemoveV2Payload = {
    name: "CheckoutGiftCardRemoveV2Payload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutGiftCardsAppendPayload = {
    name: "CheckoutGiftCardsAppendPayload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutLineItem = {
    name: "CheckoutLineItem",
    kind: "OBJECT",
    fieldBaseTypes: {
      customAttributes: "Attribute",
      discountAllocations: "DiscountAllocation",
      id: "ID",
      quantity: "Int",
      title: "String",
      variant: "ProductVariant"
    },
    implementsNode: !0
  },
      CheckoutLineItemConnection = {
    name: "CheckoutLineItemConnection",
    kind: "OBJECT",
    fieldBaseTypes: {
      edges: "CheckoutLineItemEdge",
      pageInfo: "PageInfo"
    },
    implementsNode: !1
  },
      CheckoutLineItemEdge = {
    name: "CheckoutLineItemEdge",
    kind: "OBJECT",
    fieldBaseTypes: {
      cursor: "String",
      node: "CheckoutLineItem"
    },
    implementsNode: !1
  },
      CheckoutLineItemsAddPayload = {
    name: "CheckoutLineItemsAddPayload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutLineItemsRemovePayload = {
    name: "CheckoutLineItemsRemovePayload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutLineItemsReplacePayload = {
    name: "CheckoutLineItemsReplacePayload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      userErrors: "CheckoutUserError"
    },
    implementsNode: !1
  },
      CheckoutLineItemsUpdatePayload = {
    name: "CheckoutLineItemsUpdatePayload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutShippingAddressUpdateV2Payload = {
    name: "CheckoutShippingAddressUpdateV2Payload",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkout: "Checkout",
      checkoutUserErrors: "CheckoutUserError",
      userErrors: "UserError"
    },
    implementsNode: !1
  },
      CheckoutUserError = {
    name: "CheckoutUserError",
    kind: "OBJECT",
    fieldBaseTypes: {
      code: "CheckoutErrorCode",
      field: "String",
      message: "String"
    },
    implementsNode: !1
  },
      Collection = {
    name: "Collection",
    kind: "OBJECT",
    fieldBaseTypes: {
      description: "String",
      descriptionHtml: "HTML",
      handle: "String",
      id: "ID",
      image: "Image",
      products: "ProductConnection",
      title: "String",
      updatedAt: "DateTime"
    },
    implementsNode: !0
  },
      CollectionConnection = {
    name: "CollectionConnection",
    kind: "OBJECT",
    fieldBaseTypes: {
      edges: "CollectionEdge",
      pageInfo: "PageInfo"
    },
    implementsNode: !1
  },
      CollectionEdge = {
    name: "CollectionEdge",
    kind: "OBJECT",
    fieldBaseTypes: {
      cursor: "String",
      node: "Collection"
    },
    implementsNode: !1
  },
      CountryCode = {
    name: "CountryCode",
    kind: "ENUM"
  },
      CurrencyCode = {
    name: "CurrencyCode",
    kind: "ENUM"
  },
      DateTime = {
    name: "DateTime",
    kind: "SCALAR"
  },
      Decimal = {
    name: "Decimal",
    kind: "SCALAR"
  },
      DiscountAllocation = {
    name: "DiscountAllocation",
    kind: "OBJECT",
    fieldBaseTypes: {
      allocatedAmount: "MoneyV2",
      discountApplication: "DiscountApplication"
    },
    implementsNode: !1
  },
      DiscountApplication = {
    name: "DiscountApplication",
    kind: "INTERFACE",
    fieldBaseTypes: {
      allocationMethod: "DiscountApplicationAllocationMethod",
      targetSelection: "DiscountApplicationTargetSelection",
      targetType: "DiscountApplicationTargetType",
      value: "PricingValue"
    },
    possibleTypes: ["AutomaticDiscountApplication", "DiscountCodeApplication", "ManualDiscountApplication", "ScriptDiscountApplication"]
  },
      DiscountApplicationAllocationMethod = {
    name: "DiscountApplicationAllocationMethod",
    kind: "ENUM"
  },
      DiscountApplicationConnection = {
    name: "DiscountApplicationConnection",
    kind: "OBJECT",
    fieldBaseTypes: {
      edges: "DiscountApplicationEdge",
      pageInfo: "PageInfo"
    },
    implementsNode: !1
  },
      DiscountApplicationEdge = {
    name: "DiscountApplicationEdge",
    kind: "OBJECT",
    fieldBaseTypes: {
      node: "DiscountApplication"
    },
    implementsNode: !1
  },
      DiscountApplicationTargetSelection = {
    name: "DiscountApplicationTargetSelection",
    kind: "ENUM"
  },
      DiscountApplicationTargetType = {
    name: "DiscountApplicationTargetType",
    kind: "ENUM"
  },
      DiscountCodeApplication = {
    name: "DiscountCodeApplication",
    kind: "OBJECT",
    fieldBaseTypes: {
      applicable: "Boolean",
      code: "String"
    },
    implementsNode: !1
  },
      Domain = {
    name: "Domain",
    kind: "OBJECT",
    fieldBaseTypes: {
      host: "String",
      sslEnabled: "Boolean",
      url: "URL"
    },
    implementsNode: !1
  },
      Float = {
    name: "Float",
    kind: "SCALAR"
  },
      HTML = {
    name: "HTML",
    kind: "SCALAR"
  },
      ID = {
    name: "ID",
    kind: "SCALAR"
  },
      Image = {
    name: "Image",
    kind: "OBJECT",
    fieldBaseTypes: {
      altText: "String",
      id: "ID",
      originalSrc: "URL",
      src: "URL"
    },
    implementsNode: !1
  },
      ImageConnection = {
    name: "ImageConnection",
    kind: "OBJECT",
    fieldBaseTypes: {
      edges: "ImageEdge",
      pageInfo: "PageInfo"
    },
    implementsNode: !1
  },
      ImageEdge = {
    name: "ImageEdge",
    kind: "OBJECT",
    fieldBaseTypes: {
      cursor: "String",
      node: "Image"
    },
    implementsNode: !1
  },
      Int = {
    name: "Int",
    kind: "SCALAR"
  },
      MailingAddress = {
    name: "MailingAddress",
    kind: "OBJECT",
    fieldBaseTypes: {
      address1: "String",
      address2: "String",
      city: "String",
      company: "String",
      country: "String",
      countryCodeV2: "CountryCode",
      firstName: "String",
      formatted: "String",
      id: "ID",
      lastName: "String",
      latitude: "Float",
      longitude: "Float",
      name: "String",
      phone: "String",
      province: "String",
      provinceCode: "String",
      zip: "String"
    },
    implementsNode: !0
  },
      ManualDiscountApplication = {
    name: "ManualDiscountApplication",
    kind: "OBJECT",
    fieldBaseTypes: {
      description: "String",
      title: "String"
    },
    implementsNode: !1
  },
      Money = {
    name: "Money",
    kind: "SCALAR"
  },
      MoneyV2 = {
    name: "MoneyV2",
    kind: "OBJECT",
    fieldBaseTypes: {
      amount: "Decimal",
      currencyCode: "CurrencyCode"
    },
    implementsNode: !1
  },
      Mutation$1 = {
    name: "Mutation",
    kind: "OBJECT",
    fieldBaseTypes: {
      checkoutAttributesUpdateV2: "CheckoutAttributesUpdateV2Payload",
      checkoutCreate: "CheckoutCreatePayload",
      checkoutDiscountCodeApplyV2: "CheckoutDiscountCodeApplyV2Payload",
      checkoutDiscountCodeRemove: "CheckoutDiscountCodeRemovePayload",
      checkoutEmailUpdateV2: "CheckoutEmailUpdateV2Payload",
      checkoutGiftCardRemoveV2: "CheckoutGiftCardRemoveV2Payload",
      checkoutGiftCardsAppend: "CheckoutGiftCardsAppendPayload",
      checkoutLineItemsAdd: "CheckoutLineItemsAddPayload",
      checkoutLineItemsRemove: "CheckoutLineItemsRemovePayload",
      checkoutLineItemsReplace: "CheckoutLineItemsReplacePayload",
      checkoutLineItemsUpdate: "CheckoutLineItemsUpdatePayload",
      checkoutShippingAddressUpdateV2: "CheckoutShippingAddressUpdateV2Payload"
    },
    implementsNode: !1,
    relayInputObjectBaseTypes: {
      checkoutAttributesUpdate: "CheckoutAttributesUpdateInput",
      checkoutAttributesUpdateV2: "CheckoutAttributesUpdateV2Input",
      checkoutCreate: "CheckoutCreateInput",
      customerAccessTokenCreate: "CustomerAccessTokenCreateInput",
      customerActivate: "CustomerActivateInput",
      customerCreate: "CustomerCreateInput",
      customerReset: "CustomerResetInput"
    }
  },
      Node = {
    name: "Node",
    kind: "INTERFACE",
    fieldBaseTypes: {},
    possibleTypes: ["AppliedGiftCard", "Article", "Blog", "Checkout", "CheckoutLineItem", "Collection", "Comment", "ExternalVideo", "MailingAddress", "MediaImage", "Metafield", "Model3d", "Order", "Page", "Payment", "Product", "ProductOption", "ProductVariant", "ShopPolicy", "Video"]
  },
      Order = {
    name: "Order",
    kind: "OBJECT",
    fieldBaseTypes: {
      currencyCode: "CurrencyCode",
      customerUrl: "URL",
      id: "ID",
      lineItems: "OrderLineItemConnection",
      orderNumber: "Int",
      processedAt: "DateTime",
      shippingAddress: "MailingAddress",
      subtotalPrice: "Money",
      subtotalPriceV2: "MoneyV2",
      totalPrice: "Money",
      totalPriceV2: "MoneyV2",
      totalRefunded: "Money",
      totalRefundedV2: "MoneyV2",
      totalShippingPrice: "Money",
      totalShippingPriceV2: "MoneyV2",
      totalTax: "Money",
      totalTaxV2: "MoneyV2"
    },
    implementsNode: !0
  },
      OrderLineItem = {
    name: "OrderLineItem",
    kind: "OBJECT",
    fieldBaseTypes: {
      customAttributes: "Attribute",
      quantity: "Int",
      title: "String",
      variant: "ProductVariant"
    },
    implementsNode: !1
  },
      OrderLineItemConnection = {
    name: "OrderLineItemConnection",
    kind: "OBJECT",
    fieldBaseTypes: {
      edges: "OrderLineItemEdge",
      pageInfo: "PageInfo"
    },
    implementsNode: !1
  },
      OrderLineItemEdge = {
    name: "OrderLineItemEdge",
    kind: "OBJECT",
    fieldBaseTypes: {
      cursor: "String",
      node: "OrderLineItem"
    },
    implementsNode: !1
  },
      PageInfo = {
    name: "PageInfo",
    kind: "OBJECT",
    fieldBaseTypes: {
      hasNextPage: "Boolean",
      hasPreviousPage: "Boolean"
    },
    implementsNode: !1
  },
      PaymentSettings = {
    name: "PaymentSettings",
    kind: "OBJECT",
    fieldBaseTypes: {
      enabledPresentmentCurrencies: "CurrencyCode"
    },
    implementsNode: !1
  },
      PricingPercentageValue = {
    name: "PricingPercentageValue",
    kind: "OBJECT",
    fieldBaseTypes: {
      percentage: "Float"
    },
    implementsNode: !1
  },
      PricingValue = {
    name: "PricingValue",
    kind: "UNION"
  },
      Product = {
    name: "Product",
    kind: "OBJECT",
    fieldBaseTypes: {
      availableForSale: "Boolean",
      createdAt: "DateTime",
      description: "String",
      descriptionHtml: "HTML",
      handle: "String",
      id: "ID",
      images: "ImageConnection",
      onlineStoreUrl: "URL",
      options: "ProductOption",
      productType: "String",
      publishedAt: "DateTime",
      title: "String",
      updatedAt: "DateTime",
      variants: "ProductVariantConnection",
      vendor: "String"
    },
    implementsNode: !0
  },
      ProductConnection = {
    name: "ProductConnection",
    kind: "OBJECT",
    fieldBaseTypes: {
      edges: "ProductEdge",
      pageInfo: "PageInfo"
    },
    implementsNode: !1
  },
      ProductEdge = {
    name: "ProductEdge",
    kind: "OBJECT",
    fieldBaseTypes: {
      cursor: "String",
      node: "Product"
    },
    implementsNode: !1
  },
      ProductOption = {
    name: "ProductOption",
    kind: "OBJECT",
    fieldBaseTypes: {
      name: "String",
      values: "String"
    },
    implementsNode: !0
  },
      ProductVariant = {
    name: "ProductVariant",
    kind: "OBJECT",
    fieldBaseTypes: {
      availableForSale: "Boolean",
      compareAtPrice: "Money",
      compareAtPriceV2: "MoneyV2",
      id: "ID",
      image: "Image",
      presentmentPrices: "ProductVariantPricePairConnection",
      price: "Money",
      priceV2: "MoneyV2",
      product: "Product",
      selectedOptions: "SelectedOption",
      sku: "String",
      title: "String",
      unitPrice: "MoneyV2",
      unitPriceMeasurement: "UnitPriceMeasurement",
      weight: "Float"
    },
    implementsNode: !0
  },
      ProductVariantConnection = {
    name: "ProductVariantConnection",
    kind: "OBJECT",
    fieldBaseTypes: {
      edges: "ProductVariantEdge",
      pageInfo: "PageInfo"
    },
    implementsNode: !1
  },
      ProductVariantEdge = {
    name: "ProductVariantEdge",
    kind: "OBJECT",
    fieldBaseTypes: {
      cursor: "String",
      node: "ProductVariant"
    },
    implementsNode: !1
  },
      ProductVariantPricePair = {
    name: "ProductVariantPricePair",
    kind: "OBJECT",
    fieldBaseTypes: {
      compareAtPrice: "MoneyV2",
      price: "MoneyV2"
    },
    implementsNode: !1
  },
      ProductVariantPricePairConnection = {
    name: "ProductVariantPricePairConnection",
    kind: "OBJECT",
    fieldBaseTypes: {
      edges: "ProductVariantPricePairEdge",
      pageInfo: "PageInfo"
    },
    implementsNode: !1
  },
      ProductVariantPricePairEdge = {
    name: "ProductVariantPricePairEdge",
    kind: "OBJECT",
    fieldBaseTypes: {
      node: "ProductVariantPricePair"
    },
    implementsNode: !1
  },
      QueryRoot = {
    name: "QueryRoot",
    kind: "OBJECT",
    fieldBaseTypes: {
      collectionByHandle: "Collection",
      collections: "CollectionConnection",
      node: "Node",
      nodes: "Node",
      productByHandle: "Product",
      products: "ProductConnection",
      shop: "Shop"
    },
    implementsNode: !1
  },
      ScriptDiscountApplication = {
    name: "ScriptDiscountApplication",
    kind: "OBJECT",
    fieldBaseTypes: {
      description: "String"
    },
    implementsNode: !1
  },
      SelectedOption = {
    name: "SelectedOption",
    kind: "OBJECT",
    fieldBaseTypes: {
      name: "String",
      value: "String"
    },
    implementsNode: !1
  },
      ShippingRate = {
    name: "ShippingRate",
    kind: "OBJECT",
    fieldBaseTypes: {
      handle: "String",
      price: "Money",
      priceV2: "MoneyV2",
      title: "String"
    },
    implementsNode: !1
  },
      Shop = {
    name: "Shop",
    kind: "OBJECT",
    fieldBaseTypes: {
      currencyCode: "CurrencyCode",
      description: "String",
      moneyFormat: "String",
      name: "String",
      paymentSettings: "PaymentSettings",
      primaryDomain: "Domain",
      privacyPolicy: "ShopPolicy",
      refundPolicy: "ShopPolicy",
      termsOfService: "ShopPolicy"
    },
    implementsNode: !1
  },
      ShopPolicy = {
    name: "ShopPolicy",
    kind: "OBJECT",
    fieldBaseTypes: {
      body: "String",
      id: "ID",
      title: "String",
      url: "URL"
    },
    implementsNode: !0
  },
      String$1 = {
    name: "String",
    kind: "SCALAR"
  },
      URL = {
    name: "URL",
    kind: "SCALAR"
  },
      UnitPriceMeasurement = {
    name: "UnitPriceMeasurement",
    kind: "OBJECT",
    fieldBaseTypes: {
      measuredType: "UnitPriceMeasurementMeasuredType",
      quantityUnit: "UnitPriceMeasurementMeasuredUnit",
      quantityValue: "Float",
      referenceUnit: "UnitPriceMeasurementMeasuredUnit",
      referenceValue: "Int"
    },
    implementsNode: !1
  },
      UnitPriceMeasurementMeasuredType = {
    name: "UnitPriceMeasurementMeasuredType",
    kind: "ENUM"
  },
      UnitPriceMeasurementMeasuredUnit = {
    name: "UnitPriceMeasurementMeasuredUnit",
    kind: "ENUM"
  },
      UserError = {
    name: "UserError",
    kind: "OBJECT",
    fieldBaseTypes: {
      field: "String",
      message: "String"
    },
    implementsNode: !1
  },
      Types = {
    types: {}
  };

  function recursivelyFreezeObject(structure) {
    return Object.getOwnPropertyNames(structure).forEach(function (key) {
      var value = structure[key];
      value && "object" === (void 0 === value ? "undefined" : _typeof(value)) && recursivelyFreezeObject(value);
    }), Object.freeze(structure), structure;
  }

  Types.types.AppliedGiftCard = AppliedGiftCard, Types.types.Attribute = Attribute, Types.types.AutomaticDiscountApplication = AutomaticDiscountApplication, Types.types.Boolean = Boolean$1, Types.types.Checkout = Checkout, Types.types.CheckoutAttributesUpdateV2Payload = CheckoutAttributesUpdateV2Payload, Types.types.CheckoutCreatePayload = CheckoutCreatePayload, Types.types.CheckoutDiscountCodeApplyV2Payload = CheckoutDiscountCodeApplyV2Payload, Types.types.CheckoutDiscountCodeRemovePayload = CheckoutDiscountCodeRemovePayload, Types.types.CheckoutEmailUpdateV2Payload = CheckoutEmailUpdateV2Payload, Types.types.CheckoutErrorCode = CheckoutErrorCode, Types.types.CheckoutGiftCardRemoveV2Payload = CheckoutGiftCardRemoveV2Payload, Types.types.CheckoutGiftCardsAppendPayload = CheckoutGiftCardsAppendPayload, Types.types.CheckoutLineItem = CheckoutLineItem, Types.types.CheckoutLineItemConnection = CheckoutLineItemConnection, Types.types.CheckoutLineItemEdge = CheckoutLineItemEdge, Types.types.CheckoutLineItemsAddPayload = CheckoutLineItemsAddPayload, Types.types.CheckoutLineItemsRemovePayload = CheckoutLineItemsRemovePayload, Types.types.CheckoutLineItemsReplacePayload = CheckoutLineItemsReplacePayload, Types.types.CheckoutLineItemsUpdatePayload = CheckoutLineItemsUpdatePayload, Types.types.CheckoutShippingAddressUpdateV2Payload = CheckoutShippingAddressUpdateV2Payload, Types.types.CheckoutUserError = CheckoutUserError, Types.types.Collection = Collection, Types.types.CollectionConnection = CollectionConnection, Types.types.CollectionEdge = CollectionEdge, Types.types.CountryCode = CountryCode, Types.types.CurrencyCode = CurrencyCode, Types.types.DateTime = DateTime, Types.types.Decimal = Decimal, Types.types.DiscountAllocation = DiscountAllocation, Types.types.DiscountApplication = DiscountApplication, Types.types.DiscountApplicationAllocationMethod = DiscountApplicationAllocationMethod, Types.types.DiscountApplicationConnection = DiscountApplicationConnection, Types.types.DiscountApplicationEdge = DiscountApplicationEdge, Types.types.DiscountApplicationTargetSelection = DiscountApplicationTargetSelection, Types.types.DiscountApplicationTargetType = DiscountApplicationTargetType, Types.types.DiscountCodeApplication = DiscountCodeApplication, Types.types.Domain = Domain, Types.types.Float = Float, Types.types.HTML = HTML, Types.types.ID = ID, Types.types.Image = Image, Types.types.ImageConnection = ImageConnection, Types.types.ImageEdge = ImageEdge, Types.types.Int = Int, Types.types.MailingAddress = MailingAddress, Types.types.ManualDiscountApplication = ManualDiscountApplication, Types.types.Money = Money, Types.types.MoneyV2 = MoneyV2, Types.types.Mutation = Mutation$1, Types.types.Node = Node, Types.types.Order = Order, Types.types.OrderLineItem = OrderLineItem, Types.types.OrderLineItemConnection = OrderLineItemConnection, Types.types.OrderLineItemEdge = OrderLineItemEdge, Types.types.PageInfo = PageInfo, Types.types.PaymentSettings = PaymentSettings, Types.types.PricingPercentageValue = PricingPercentageValue, Types.types.PricingValue = PricingValue, Types.types.Product = Product, Types.types.ProductConnection = ProductConnection, Types.types.ProductEdge = ProductEdge, Types.types.ProductOption = ProductOption, Types.types.ProductVariant = ProductVariant, Types.types.ProductVariantConnection = ProductVariantConnection, Types.types.ProductVariantEdge = ProductVariantEdge, Types.types.ProductVariantPricePair = ProductVariantPricePair, Types.types.ProductVariantPricePairConnection = ProductVariantPricePairConnection, Types.types.ProductVariantPricePairEdge = ProductVariantPricePairEdge, Types.types.QueryRoot = QueryRoot, Types.types.ScriptDiscountApplication = ScriptDiscountApplication, Types.types.SelectedOption = SelectedOption, Types.types.ShippingRate = ShippingRate, Types.types.Shop = Shop, Types.types.ShopPolicy = ShopPolicy, Types.types.String = String$1, Types.types.URL = URL, Types.types.UnitPriceMeasurement = UnitPriceMeasurement, Types.types.UnitPriceMeasurementMeasuredType = UnitPriceMeasurementMeasuredType, Types.types.UnitPriceMeasurementMeasuredUnit = UnitPriceMeasurementMeasuredUnit, Types.types.UserError = UserError, Types.queryType = "QueryRoot", Types.mutationType = "Mutation", Types.subscriptionType = null;

  var types = recursivelyFreezeObject(Types),
      Client,
      shopifyBuy = function () {
    function Client(config) {
      var GraphQLClientClass = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Client$2,
          fetchFunction = arguments[2];
      classCallCheck$1(this, Client);
      var url = "https://" + config.domain + "/api/" + config.apiVersion + "/graphql",
          headers = {
        "X-SDK-Variant": "javascript",
        "X-SDK-Version": version,
        "X-Shopify-Storefront-Access-Token": config.storefrontAccessToken
      };
      config.source && (headers["X-SDK-Variant-Source"] = config.source);
      var languageHeader = config.language ? config.language : "*";
      headers["Accept-Language"] = languageHeader, fetchFunction ? (headers["Content-Type"] = "application/json", headers.Accept = "application/json", this.graphQLClient = new GraphQLClientClass(types, {
        fetcher: function fetcher(graphQLParams) {
          return fetchFunction(url, {
            body: JSON.stringify(graphQLParams),
            method: "POST",
            mode: "cors",
            headers: headers
          }).then(function (response) {
            return response.json();
          });
        }
      })) : this.graphQLClient = new GraphQLClientClass(types, {
        url: url,
        fetcherOptions: {
          headers: headers
        }
      }), this.product = new ProductResource(this.graphQLClient), this.collection = new CollectionResource(this.graphQLClient), this.shop = new ShopResource(this.graphQLClient), this.checkout = new CheckoutResource(this.graphQLClient), this.image = new ImageResource(this.graphQLClient);
    }

    return createClass$1(Client, null, [{
      key: "buildClient",
      value: function buildClient(config, fetchFunction) {
        var newConfig = new Config(config),
            client = new Client(newConfig, Client$2, fetchFunction);
        return client.config = newConfig, client;
      }
    }]), createClass$1(Client, [{
      key: "fetchNextPage",
      value: function fetchNextPage(models) {
        return this.graphQLClient.fetchNextPage(models);
      }
    }]), Client;
  }();

  function merge(target) {
    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }

    return sources.forEach(function (source) {
      source && Object.keys(source).forEach(function (key) {
        "[object Object]" === Object.prototype.toString.call(source[key]) ? target[key] = merge(target[key] || {}, source[key]) : target[key] = source[key];
      });
    }), target;
  }

  function isFunction(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  }

  var quantityTemplate = '<div class="{{data.classes.product.quantity}} {{data.quantityClass}}" data-element="product.quantity">\n            {{#data.contents.quantityDecrement}}\n              <button class="{{data.classes.product.quantityButton}} {{data.classes.product.quantityDecrement}}" type="button" data-element="product.quantityDecrement"><span>-</span><span class="visuallyhidden">Decrement</span></button>\n            {{/data.contents.quantityDecrement}}\n            {{#data.contents.quantityInput}}\n              <input class="{{data.classes.product.quantityInput}}" type="number" min="0" aria-label="Quantity" value="{{data.selectedQuantity}}" data-element="product.quantityInput">\n            {{/data.contents.quantityInput}}\n            {{#data.contents.quantityIncrement}}\n              <button class="{{data.classes.product.quantityButton}} {{data.classes.product.quantityIncrement}}" type="button" data-element="product.quantityIncrement"><span>+</span><span class="visuallyhidden">Increment</span></button>\n            {{/data.contents.quantityIncrement}}\n           </div>',
      buttonTemplate = '<div class="{{data.classes.product.buttonWrapper}}" data-element="product.buttonWrapper"><button {{#data.buttonDisabled}}disabled{{/data.buttonDisabled}} class="{{data.classes.product.button}} {{data.buttonClass}}" data-element="product.button">{{data.buttonText}}</button></div>',
      productTemplate = {
    img: '{{#data.currentImage.srcLarge}}<div class="{{data.classes.product.imgWrapper}}" data-element="product.imgWrapper"><img alt="{{data.currentImage.altText}}" data-element="product.img" class="{{data.classes.product.img}}" src="{{data.currentImage.srcLarge}}" /></div>{{/data.currentImage.srcLarge}}',
    imgWithCarousel: '<div class="{{data.classes.product.imgWrapper}}" data-element="product.imageWrapper">\n                      <div class="main-image-wrapper">\n                        <button type="button" class="carousel-button carousel-button--previous">\n                          Left\n                          <img class="carousel-button-arrow" src="//sdks.shopifycdn.com/buy-button/latest/arrow.svg" alt="Carousel Arrow"/>\n                        </button>\n                        <img class="{{data.classes.product.img}}" alt="{{data.currentImage.altText}}" src="{{data.currentImage.src}}" data-element="product.img" />\n                        <button type="button" class="carousel-button carousel-button--next">\n                          Right\n                          <img class="carousel-button-arrow" src="//sdks.shopifycdn.com/buy-button/latest/arrow.svg" alt="Carousel Arrow"/>\n                        </button>\n                      </div>\n                      <div class="{{data.classes.product.carousel}}">\n                        {{#data.carouselImages}}\n                        <a data-element="product.carouselitem" aria-label="{{altText}}" href="{{src}}" class="{{data.classes.product.carouselItem}} {{#isSelected}} {{data.classes.product.carouselItemSelected}} {{/isSelected}}" data-image-id="{{id}}" style="background-image: url({{carouselSrc}})"></a>\n                        {{/data.carouselImages}}\n                      </div>\n                    </div>',
    title: '<h1 class="{{data.classes.product.title}}" data-element="product.title">{{data.title}}</h1>',
    variantTitle: '{{#data.hasVariants}}<h2 class="{{data.classes.product.variantTitle}}" data-element="product.variantTitle">{{data.selectedVariant.title}}</h2>{{/data.hasVariants}}',
    options: '{{#data.hasVariants}}<div class="{{data.classes.product.options}}" data-element="product.options">{{{data.optionsHtml}}}</div>{{/data.hasVariants}}',
    price: '<div class="{{data.classes.product.prices}}" data-element="product.prices">\n            {{#data.selectedVariant}}\n            <span class="{{data.classes.product.price}} {{data.priceClass}}" data-element="product.price">{{data.formattedPrice}}</span>\n            {{#data.selectedVariant.compareAtPrice}}<span class="{{data.classes.product.compareAt}}" data-element="product.compareAt">{{data.formattedCompareAtPrice}}</span>{{/data.selectedVariant.compareAtPrice}}\n            {{#data.showUnitPrice}}\n            <div class="{{data.classes.product.unitPrice}}" data-element="product.unitPrice">\n              <span class="visuallyhidden">{{data.text.unitPriceAccessibilityLabel}}</span>\n              {{data.formattedUnitPrice}}<span aria-hidden="true">/</span><span class="visuallyhidden">&nbsp;{{data.text.unitPriceAccessibilitySeparator}}&nbsp;</span>{{data.formattedUnitPriceBaseUnit}}\n            </div>\n            {{/data.showUnitPrice}}\n            {{/data.selectedVariant}}\n          </div>',
    description: '<div class="{{data.classes.product.description}}" data-element="product.description">{{{data.descriptionHtml}}}</div>',
    button: buttonTemplate,
    quantity: quantityTemplate,
    buttonWithQuantity: '<div class="{{data.classes.product.buttonWithQuantity}}" data-element="product.buttonWithQuantity">'.concat(quantityTemplate).concat(buttonTemplate, "</div>")
  },
      cartTemplates,
      optionTemplates,
      toggleTemplates,
      lineItemTemplates,
      modalTemplates,
      defaults = {
    product: {
      iframe: !0,
      buttonDestination: "cart",
      isButton: !1,
      layout: "vertical",
      manifest: ["product", "option"],
      width: "280px",
      order: ["img", "imgWithCarousel", "title", "variantTitle", "price", "options", "quantity", "button", "buttonWithQuantity", "description"],
      contents: {
        img: !0,
        imgWithCarousel: !1,
        title: !0,
        variantTitle: !1,
        price: !0,
        unitPrice: !0,
        options: !0,
        quantity: !1,
        quantityIncrement: !1,
        quantityDecrement: !1,
        quantityInput: !0,
        button: !0,
        buttonWithQuantity: !1,
        description: !1
      },
      templates: productTemplate,
      classes: {
        wrapper: "shopify-buy__product-wrapper",
        product: "shopify-buy__product",
        img: "shopify-buy__product__variant-img",
        imgWrapper: "shopify-buy__product-img-wrapper",
        carousel: "shopify-buy__carousel",
        carouselNext: "carousel-button--next",
        carouselPrevious: "carousel-button--previous",
        carouselItem: "shopify-buy__carousel-item",
        carouselItemSelected: "shopify-buy__carousel-item--selected",
        blockButton: "shopify-buy__btn--parent",
        button: "shopify-buy__btn",
        buttonWrapper: "shopify-buy__btn-wrapper",
        title: "shopify-buy__product__title",
        prices: "shopify-buy__product__price",
        price: "shopify-buy__product__actual-price",
        compareAt: "shopify-buy__product__compare-price",
        unitPrice: "shopify-buy__product__unit-price",
        loweredPrice: "shopify-buy__price--lowered",
        variantTitle: "shopify-buy__product__variant-title",
        description: "shopify-buy__product-description",
        options: "shopify-buy__product__variant-selectors",
        disabled: "shopify-buy__btn-disabled",
        buttonBesideQty: "shopify-buy__beside-quantity",
        quantity: "shopify-buy__quantity-container",
        quantityInput: "shopify-buy__quantity",
        quantityButton: "shopify-buy__btn--seamless",
        quantityIncrement: "shopify-buy__quantity-increment",
        quantityDecrement: "shopify-buy__quantity-decrement",
        buttonWithQuantity: "shopify-buy__btn-and-quantity",
        quantityWithButtons: "shopify-buy__quantity-with-btns",
        vertical: "shopify-buy__layout-vertical",
        horizontal: "shopify-buy__layout-horizontal"
      },
      text: {
        button: "ADD TO CART",
        outOfStock: "Out of stock",
        unavailable: "Unavailable",
        unitPriceAccessibilityLabel: "Unit price",
        unitPriceAccessibilitySeparator: "per"
      }
    },
    modalProduct: {
      iframe: !1,
      layout: "horizontal",
      contents: {
        img: !0,
        imgWithCarousel: !1,
        title: !0,
        variantTitle: !1,
        price: !0,
        unitPrice: !0,
        options: !0,
        button: !0,
        buttonWithQuantity: !1,
        quantity: !1,
        quantityIncrement: !1,
        quantityDecrement: !1,
        description: !0
      },
      order: ["img", "imgWithCarousel", "title", "variantTitle", "price", "options", "buttonWithQuantity", "button", "description"],
      classes: {
        wrapper: "shopify-buy__modal-product-wrapper",
        hasImage: "has-image"
      },
      buttonDestination: "cart",
      text: {
        button: "ADD TO CART"
      }
    },
    modal: {
      iframe: !0,
      manifest: ["modal", "product", "option"],
      classes: {
        overlay: "shopify-buy__modal-overlay",
        modal: "shopify-buy__modal",
        contents: "shopify-buy__modal-contents",
        close: "shopify-buy__btn--close",
        wrapper: "shopify-buy__modal-wrapper",
        product: "shopify-buy__product-modal",
        img: "shopify-buy__modal-img",
        imgWithCarousel: "shopify-buy__modal-img",
        footer: "shopify-buy__modal-footer",
        footerWithImg: "shopify-buy__modal-footer--has-img",
        imgWithImg: "shopify-buy__modal-img--has-img",
        contentsWithImg: "shopify-buy__modal-contents--has-img",
        scrollContents: "shopify-buy__modal-scroll-contents"
      },
      contents: {
        contents: !0
      },
      order: ["contents"],
      templates: {
        contents: '\n              <button class="{{data.classes.modal.close}}" data-element="modal.close">\n                <span aria-role="hidden">&times;</span>\n                <span class="visuallyhidden">Close</span>\n              </button>\n            '
      }
    },
    productSet: {
      iframe: !0,
      manifest: ["product", "option", "productSet"],
      contents: {
        title: !1,
        products: !0,
        pagination: !0
      },
      order: ["title", "products", "pagination"],
      templates: {
        title: '<h2 class="{{data.classes.productSet.title}}">{{data.collection.attrs.title}}</h2>',
        products: '<div class="{{data.classes.productSet.products}}"></div>',
        pagination: '<button class="{{data.classes.productSet.paginationButton}} {{data.nextButtonClass}}">{{data.text.nextPageButton}}</button>'
      },
      classes: {
        wrapper: "shopify-buy__collection-wrapper",
        productSet: "shopify-buy__collection",
        title: "shopify-buy__collection__title",
        collection: "shopify-buy__collection",
        products: "shopify-buy__collection-products",
        product: "shopify-buy__collection-product",
        paginationButton: "shopify-buy__collection-pagination-button shopify-buy__btn"
      },
      text: {
        nextPageButton: "Next page"
      }
    },
    option: {
      templates: {
        option: '<div class="{{data.classes.option.option}}" data-element="option.option">\n    <label class="{{data.classes.option.label}} {{#data.onlyOption}}{{data.classes.option.hiddenLabel}}{{/data.onlyOption}}" data-element="option.label">{{data.name}}</label>\n      <div class="{{data.classes.option.wrapper}}" data-element="option.wrapper">\n      <select class="{{data.classes.option.select}}" name="{{data.name}}" data-element="option.select">\n        {{#data.values}}\n          <option {{#selected}}selected{{/selected}} value="{{name}}">{{name}}</option>\n        {{/data.values}}\n      </select>\n      <svg class="{{data.classes.option.selectIcon}}" data-element="option.selectIcon" viewBox="0 0 24 24"><path d="M21 5.176l-9.086 9.353L3 5.176.686 7.647 12 19.382 23.314 7.647 21 5.176z"></path></svg>\n    </div>\n  </div>'
      },
      contents: {
        option: !0
      },
      order: ["option"],
      classes: {
        option: "shopify-buy__option-select",
        wrapper: "shopify-buy__option-select-wrapper",
        select: "shopify-buy__option-select__select",
        label: "shopify-buy__option-select__label",
        optionDisabled: "shopify-buy__option--disabled",
        optionSelected: "shopify-buy__option--selected",
        selectIcon: "shopify-buy__select-icon",
        hiddenLabel: "visuallyhidden"
      }
    },
    cart: {
      iframe: !0,
      templates: {
        title: '<div class="{{data.classes.cart.header}}" data-element="cart.header">\n            <h2 class="{{data.classes.cart.title}}" data-element="cart.title">{{data.text.title}}</h2>\n            <button class="{{data.classes.cart.close}}" data-element="cart.close">\n              <span aria-role="hidden">&times;</span>\n              <span class="visuallyhidden">Close</span>\n             </button>\n          </div>',
        lineItems: '<div class="{{data.classes.cart.cartScroll}}{{#data.contents.note}} {{data.classes.cart.cartScrollWithCartNote}}{{/data.contents.note}}{{#data.discounts}} {{data.classes.cart.cartScrollWithDiscounts}}{{/data.discounts}}" data-element="cart.cartScroll">\n                {{#data.isEmpty}}<p class="{{data.classes.cart.empty}} {{data.classes.cart.emptyCart}}" data-element="cart.empty">{{data.text.empty}}</p>{{/data.isEmpty}}\n                <div class="{{data.classes.cart.lineItems}}" data-element="cart.lineItems">{{{data.lineItemsHtml}}}</div>\n              </div>',
        footer: '{{^data.isEmpty}}\n            <div class="{{data.classes.cart.footer}}" data-element="cart.footer">\n              {{#data.discounts}}\n                <div class="{{data.classes.cart.discount}}" data-element="cart.discount">\n                  <span class="{{data.classes.cart.discountText}}" data-element="cart.discountText">\n                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 12" class="{{data.classes.cart.discountIcon}}" data-element="cart.discountIcon" aria-hidden="true">\n                      <path d="M10.001 2.99856C9.80327 2.99856 9.61002 2.93994 9.44565 2.83011C9.28128 2.72029 9.15317 2.56418 9.07752 2.38155C9.00187 2.19891 8.98207 1.99794 9.02064 1.80405C9.05921 1.61016 9.1544 1.43207 9.29419 1.29228C9.43397 1.1525 9.61207 1.0573 9.80596 1.01874C9.99984 0.980171 10.2008 0.999965 10.3834 1.07562C10.5661 1.15127 10.7222 1.27938 10.832 1.44375C10.9418 1.60812 11.0005 1.80136 11.0005 1.99905C11.0005 2.26414 10.8952 2.51837 10.7077 2.70581C10.5203 2.89326 10.266 2.99856 10.001 2.99856ZM10.001 1.67062e-05H7.0024C6.87086 -0.000743818 6.74046 0.024469 6.61868 0.0742095C6.49691 0.12395 6.38614 0.19724 6.29275 0.289876L0.295655 6.28697C0.201972 6.37989 0.127614 6.49044 0.0768697 6.61224C0.0261256 6.73404 0 6.86468 0 6.99663C0 7.12857 0.0261256 7.25922 0.0768697 7.38102C0.127614 7.50282 0.201972 7.61336 0.295655 7.70628L4.29372 11.7043C4.38664 11.798 4.49718 11.8724 4.61898 11.9231C4.74078 11.9739 4.87143 12 5.00337 12C5.13532 12 5.26596 11.9739 5.38776 11.9231C5.50956 11.8724 5.62011 11.798 5.71303 11.7043C5.90294 11.5044 11.5102 5.89716 11.7101 5.70725C11.8028 5.61386 11.876 5.50309 11.9258 5.38132C11.9755 5.25954 12.0007 5.12914 12 4.99759V1.99905C12 1.46887 11.7894 0.96041 11.4145 0.585519C11.0396 0.210628 10.5311 1.67062e-05 10.001 1.67062e-05Z" />\n                    </svg>\n                    <span class="visuallyhidden">Discount:</span>\n                    {{text}}\n                  </span>\n                  <span class="{{data.classes.cart.discountAmount}}" data-element="cart.discountAmount">{{amount}}</span>\n                </div>\n              {{/data.discounts}}\n              <p class="{{data.classes.cart.subtotalText}}" data-element="cart.total">{{data.text.total}}</p>\n              <p class="{{data.classes.cart.subtotal}}" data-element="cart.subtotal">{{data.formattedTotal}}</p>\n              {{#data.contents.note}}\n                <div class="{{data.classes.cart.note}}" data-element="cart.note">\n                  <p class="{{data.classes.cart.noteDescription}}" data-element="cart.noteDescription">{{data.text.noteDescription}}</p>\n                  <textarea class="{{data.classes.cart.noteTextArea}}" data-element="cart.noteTextArea" rows="3"/>{{data.cartNote}}</textarea>\n                </div>\n              {{/data.contents.note}}\n              <p class="{{data.classes.cart.notice}}" data-element="cart.notice">{{data.text.notice}}</p>\n              <button class="{{data.classes.cart.button}}" type="button" data-element="cart.button">{{data.text.button}}</button>\n            </div>\n           {{/data.isEmpty}}'
      },
      startOpen: !1,
      popup: !1,
      manifest: ["cart", "lineItem", "toggle"],
      contents: {
        title: !0,
        lineItems: !0,
        footer: !0,
        note: !1,
        discounts: !0
      },
      order: ["title", "lineItems", "footer"],
      classes: {
        wrapper: "shopify-buy__cart-wrapper",
        cart: "shopify-buy__cart",
        header: "shopify-buy__cart__header",
        title: "shopify-buy__cart__title",
        lineItems: "shopify-buy__cart-items",
        footer: "shopify-buy__cart-bottom",
        discount: "shopify-buy__cart__discount",
        discountText: "shopify-buy__cart__discount__text",
        discountIcon: "shopify-buy__cart__discount__text__icon",
        discountAmount: "shopify-buy__cart__discount__amount",
        subtotalText: "shopify-buy__cart__subtotal__text",
        subtotal: "shopify-buy__cart__subtotal__price",
        notice: "shopify-buy__cart__notice",
        currency: "shopify-buy__cart__currency",
        button: "shopify-buy__btn shopify-buy__btn--cart-checkout",
        close: "shopify-buy__btn--close",
        cartScroll: "shopify-buy__cart-scroll",
        cartScrollWithDiscounts: "shopify-buy__cart-scroll--discounts",
        cartScrollWithCartNote: "shopify-buy__cart-scroll--cart-note",
        empty: "shopify-buy__cart-empty-text",
        note: "shopify-buy__cart__note",
        noteDescription: "shopify-buy__cart__note__description",
        noteTextArea: "shopify-buy__cart__note__text-area"
      },
      text: {
        title: "Cart",
        empty: "Your cart is empty.",
        button: "CHECKOUT",
        total: "SUBTOTAL",
        currency: "CAD",
        notice: "Shipping and discount codes are added at checkout.",
        noteDescription: "Special instructions for seller"
      }
    },
    lineItem: {
      templates: {
        image: '<div class="{{data.classes.lineItem.image}}" style="background-image: url({{data.lineItemImage}})" data-element="lineItem.image"></div>',
        variantTitle: '<div class="{{data.classes.lineItem.variantTitle}}" data-element="lineItem.variantTitle">{{data.variantTitle}}</div>',
        title: '<span class="{{data.classes.lineItem.itemTitle}}" data-element="lineItem.itemTitle">{{data.title}}</span>',
        price: '<span class="{{data.classes.lineItem.price}}" data-element="lineItem.price">{{data.formattedPrice}}</span>',
        priceWithDiscounts: '<div class="{{data.classes.lineItem.priceWithDiscounts}}" data-element="lineItem.price">\n                        {{#data.formattedFullPrice}}\n                          <span class="visuallyhidden">Regular price</span>\n                          <del class="{{data.classes.lineItem.fullPrice}}" data-element="lineItem.fullPrice">{{data.formattedFullPrice}}</del>\n                          <span class="visuallyhidden">Sale price</span>\n                        {{/data.formattedFullPrice}}\n                        <div class="{{data.classes.lineItem.price}}" data-element="lineItem.price">{{data.formattedActualPrice}}</div>\n                        {{#data.discounts}}\n                          <div class="{{data.classes.lineItem.discount}}" data-element="lineItem.discount">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 12" class="{{data.classes.lineItem.discountIcon}}" data-element="lineItem.discountIcon" aria-hidden="true">\n                              <path d="M10.001 2.99856C9.80327 2.99856 9.61002 2.93994 9.44565 2.83011C9.28128 2.72029 9.15317 2.56418 9.07752 2.38155C9.00187 2.19891 8.98207 1.99794 9.02064 1.80405C9.05921 1.61016 9.1544 1.43207 9.29419 1.29228C9.43397 1.1525 9.61207 1.0573 9.80596 1.01874C9.99984 0.980171 10.2008 0.999965 10.3834 1.07562C10.5661 1.15127 10.7222 1.27938 10.832 1.44375C10.9418 1.60812 11.0005 1.80136 11.0005 1.99905C11.0005 2.26414 10.8952 2.51837 10.7077 2.70581C10.5203 2.89326 10.266 2.99856 10.001 2.99856ZM10.001 1.67062e-05H7.0024C6.87086 -0.000743818 6.74046 0.024469 6.61868 0.0742095C6.49691 0.12395 6.38614 0.19724 6.29275 0.289876L0.295655 6.28697C0.201972 6.37989 0.127614 6.49044 0.0768697 6.61224C0.0261256 6.73404 0 6.86468 0 6.99663C0 7.12857 0.0261256 7.25922 0.0768697 7.38102C0.127614 7.50282 0.201972 7.61336 0.295655 7.70628L4.29372 11.7043C4.38664 11.798 4.49718 11.8724 4.61898 11.9231C4.74078 11.9739 4.87143 12 5.00337 12C5.13532 12 5.26596 11.9739 5.38776 11.9231C5.50956 11.8724 5.62011 11.798 5.71303 11.7043C5.90294 11.5044 11.5102 5.89716 11.7101 5.70725C11.8028 5.61386 11.876 5.50309 11.9258 5.38132C11.9755 5.25954 12.0007 5.12914 12 4.99759V1.99905C12 1.46887 11.7894 0.96041 11.4145 0.585519C11.0396 0.210628 10.5311 1.67062e-05 10.001 1.67062e-05Z" />\n                            </svg>\n                            <span class="visuallyhidden">Discount:</span>\n                            {{discount}}\n                          </div>\n                        {{/data.discounts}}\n                      </div>',
        quantity: '<div class="{{data.classes.lineItem.quantity}}" data-element="lineItem.quantity">\n              <button class="{{data.classes.lineItem.quantityButton}} {{data.classes.lineItem.quantityDecrement}}" type="button" data-line-item-id="{{data.id}}" data-element="lineItem.quantityDecrement">\n                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M4 7h8v2H4z"/></svg><span class="visuallyhidden">Decrement</span>\n              </button>\n              <input class="{{data.classes.lineItem.quantityInput}}" type="number" min="0" aria-label="Quantity" data-line-item-id="{{data.id}}" value="{{data.quantity}}" data-element="lineItem.quantityInput">\n              <button class="{{data.classes.lineItem.quantityButton}} {{data.classes.lineItem.quantityIncrement}}" type="button" data-line-item-id="{{data.id}}" data-element="lineItem.quantityIncrement">\n                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M12 7H9V4H7v3H4v2h3v3h2V9h3z"/></svg><span class="visuallyhidden">Increment</span>\n              </button>\n            </div>'
      },
      contents: {
        image: !0,
        variantTitle: !0,
        title: !0,
        price: !1,
        priceWithDiscounts: !0,
        quantity: !0,
        quantityIncrement: !0,
        quantityDecrement: !0,
        quantityInput: !0
      },
      order: ["image", "title", "variantTitle", "price", "priceWithDiscounts", "quantity"],
      classes: {
        lineItem: "shopify-buy__cart-item",
        image: "shopify-buy__cart-item__image",
        variantTitle: "shopify-buy__cart-item__variant-title",
        itemTitle: "shopify-buy__cart-item__title",
        price: "shopify-buy__cart-item__price",
        priceWithDiscounts: "shopify-buy__cart-item__price-and-discounts",
        fullPrice: "shopify-buy__cart-item__full-price",
        discount: "shopify-buy__cart-item__discount",
        discountIcon: "shopify-buy__cart-item__discount__icon",
        quantity: "shopify-buy__quantity-container clearfix",
        quantityInput: "shopify-buy__quantity shopify-buy__cart-item__quantity-input",
        quantityButton: "shopify-buy__btn--seamless",
        quantityIncrement: "shopify-buy__quantity-increment",
        quantityDecrement: "shopify-buy__quantity-decrement"
      }
    },
    toggle: {
      templates: {
        title: '<h5 class="{{data.classes.toggle.title}}" data-element="toggle.title">{{data.text.title}}</h5>',
        icon: '<svg xmlns="http://www.w3.org/2000/svg" class="{{data.classes.toggle.icon}}" data-element="toggle.icon" viewBox="0 0 25 25" enable-background="new 0 0 25 25"><g class="{{data.classes.toggle.iconPath}}"><path d="M24.6 3.6c-.3-.4-.8-.6-1.3-.6h-18.4l-.1-.5c-.3-1.5-1.7-1.5-2.5-1.5h-1.3c-.6 0-1 .4-1 1s.4 1 1 1h1.8l3 13.6c.2 1.2 1.3 2.4 2.5 2.4h12.7c.6 0 1-.4 1-1s-.4-1-1-1h-12.7c-.2 0-.5-.4-.6-.8l-.2-1.2h12.6c1.3 0 2.3-1.4 2.5-2.4l2.4-7.4v-.2c.1-.5-.1-1-.4-1.4zm-4 8.5v.2c-.1.3-.4.8-.5.8h-13l-1.8-8.1h17.6l-2.3 7.1z"/><circle cx="9" cy="22" r="2"/><circle cx="19" cy="22" r="2"/></g></svg>',
        count: '<div class="{{data.classes.toggle.count}}" data-element="toggle.count">{{data.count}}</div>'
      },
      manifest: ["toggle"],
      iframe: !0,
      sticky: !0,
      contents: {
        count: !0,
        icon: !0,
        title: !1
      },
      order: ["count", "icon", "title"],
      classes: {
        wrapper: "shopify-buy__cart-toggle-wrapper",
        toggle: "shopify-buy__cart-toggle",
        title: "shopify-buy__cart-toggle__title",
        count: "shopify-buy__cart-toggle__count",
        icon: "shopify-buy__icon-cart shopify-buy__icon-cart--side",
        iconPath: "shopify-buy__icon-cart__group"
      },
      text: {
        title: "cart"
      }
    },
    window: {
      height: 600,
      width: 400,
      toolbar: 0,
      scrollbars: 1,
      status: 0,
      resizable: 1,
      center: 0,
      createnew: 1,
      location: 0,
      menubar: 0,
      onUnload: null,
      titlebar: "yes"
    }
  };

  function wrapConsole(logCommand) {
    var logMethod = function logMethod() {
      var hostConsole = window.console,
          args = Array.prototype.slice.apply(arguments).join(" ");
      hostConsole && hostConsole[logCommand](args);
    };

    return function () {
      var args = Array.prototype.slice.call(arguments);
      args.unshift("[SHOPIFY-BUY-UI]: "), logMethod.apply(void 0, _toConsumableArray(args));
    };
  }

  var logger = {
    debug: wrapConsole("debug"),
    info: wrapConsole("info"),
    warn: wrapConsole("warn"),
    error: wrapConsole("error"),
    log: wrapConsole("log")
  };

  function isArray(arg) {
    return "[object Array]" === Object.prototype.toString.call(arg);
  }

  function logNotFound(component) {
    var errInfo = "";
    component.id ? errInfo = isArray(component.id) ? "for ids ".concat(component.id.join(", "), ".") : "for id ".concat(component.id, ".") : component.handle && (errInfo = 'for handle "'.concat(component.handle, '".'));
    var message = "Not Found: ".concat(component.typeKey, " not found ").concat(errInfo);
    logger.warn(message);
  }

  var defaultMoneyFormat = "${{amount}}",
      range;

  function morphAttrs(fromNode, toNode) {
    var attrs = toNode.attributes,
        i,
        attr,
        attrName,
        attrNamespaceURI,
        attrValue,
        fromValue;

    for (i = attrs.length - 1; i >= 0; --i) {
      attrName = (attr = attrs[i]).name, attrNamespaceURI = attr.namespaceURI, attrValue = attr.value, attrNamespaceURI ? (attrName = attr.localName || attrName, (fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName)) !== attrValue && fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue)) : (fromValue = fromNode.getAttribute(attrName)) !== attrValue && fromNode.setAttribute(attrName, attrValue);
    }

    for (i = (attrs = fromNode.attributes).length - 1; i >= 0; --i) {
      !1 !== (attr = attrs[i]).specified && (attrName = attr.name, (attrNamespaceURI = attr.namespaceURI) ? (attrName = attr.localName || attrName, toNode.hasAttributeNS(attrNamespaceURI, attrName) || fromNode.removeAttributeNS(attrNamespaceURI, attrName)) : toNode.hasAttribute(attrName) || fromNode.removeAttribute(attrName));
    }
  }

  var NS_XHTML = "http://www.w3.org/1999/xhtml",
      doc = "undefined" == typeof document ? void 0 : document,
      HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template"),
      HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();

  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    return template.innerHTML = str, template.content.childNodes[0];
  }

  function createFragmentFromRange(str) {
    var fragment;
    return range || (range = doc.createRange()).selectNode(doc.body), range.createContextualFragment(str).childNodes[0];
  }

  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    return fragment.innerHTML = str, fragment.childNodes[0];
  }

  function toElement(str) {
    return HAS_TEMPLATE_SUPPORT ? createFragmentFromTemplate(str) : HAS_RANGE_SUPPORT ? createFragmentFromRange(str) : createFragmentFromWrap(str);
  }

  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName,
        toNodeName = toEl.nodeName;
    return fromNodeName === toNodeName || !!(toEl.actualize && fromNodeName.charCodeAt(0) < 91 && toNodeName.charCodeAt(0) > 90) && fromNodeName === toNodeName.toUpperCase();
  }

  function createElementNS(name, namespaceURI) {
    return namespaceURI && namespaceURI !== NS_XHTML ? doc.createElementNS(namespaceURI, name) : doc.createElement(name);
  }

  function moveChildren(fromEl, toEl) {
    for (var curChild = fromEl.firstChild; curChild;) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild), curChild = nextChild;
    }

    return toEl;
  }

  function syncBooleanAttrProp(fromEl, toEl, name) {
    fromEl[name] !== toEl[name] && (fromEl[name] = toEl[name], fromEl[name] ? fromEl.setAttribute(name, "") : fromEl.removeAttribute(name));
  }

  var specialElHandlers = {
    OPTION: function OPTION(fromEl, toEl) {
      var parentNode = fromEl.parentNode;

      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        "OPTGROUP" === parentName && (parentName = (parentNode = parentNode.parentNode) && parentNode.nodeName.toUpperCase()), "SELECT" !== parentName || parentNode.hasAttribute("multiple") || (fromEl.hasAttribute("selected") && !toEl.selected && (fromEl.setAttribute("selected", "selected"), fromEl.removeAttribute("selected")), parentNode.selectedIndex = -1);
      }

      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function INPUT(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked"), syncBooleanAttrProp(fromEl, toEl, "disabled"), fromEl.value !== toEl.value && (fromEl.value = toEl.value), toEl.hasAttribute("value") || fromEl.removeAttribute("value");
    },
    TEXTAREA: function TEXTAREA(fromEl, toEl) {
      var newValue = toEl.value;
      fromEl.value !== newValue && (fromEl.value = newValue);
      var firstChild = fromEl.firstChild;

      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) return;
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function SELECT(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        for (var selectedIndex = -1, i = 0, curChild = fromEl.firstChild, optgroup, nodeName; curChild;) {
          if ("OPTGROUP" === (nodeName = curChild.nodeName && curChild.nodeName.toUpperCase())) curChild = (optgroup = curChild).firstChild;else {
            if ("OPTION" === nodeName) {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i;
                break;
              }

              i++;
            }

            !(curChild = curChild.nextSibling) && optgroup && (curChild = optgroup.nextSibling, optgroup = null);
          }
        }

        fromEl.selectedIndex = selectedIndex;
      }
    }
  },
      ELEMENT_NODE = 1,
      DOCUMENT_FRAGMENT_NODE = 11,
      TEXT_NODE = 3,
      COMMENT_NODE = 8;

  function noop$1() {}

  function defaultGetNodeKey(node) {
    return node.id;
  }

  function morphdomFactory(morphAttrs) {
    return function morphdom(fromNode, toNode, options) {
      if (options || (options = {}), "string" == typeof toNode) if ("#document" === fromNode.nodeName || "HTML" === fromNode.nodeName) {
        var toNodeHtml = toNode;
        (toNode = doc.createElement("html")).innerHTML = toNodeHtml;
      } else toNode = toElement(toNode);
      var getNodeKey = options.getNodeKey || defaultGetNodeKey,
          onBeforeNodeAdded = options.onBeforeNodeAdded || noop$1,
          onNodeAdded = options.onNodeAdded || noop$1,
          onBeforeElUpdated = options.onBeforeElUpdated || noop$1,
          onElUpdated = options.onElUpdated || noop$1,
          onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop$1,
          onNodeDiscarded = options.onNodeDiscarded || noop$1,
          onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop$1,
          childrenOnly = !0 === options.childrenOnly,
          fromNodesLookup = {},
          keyedRemovalList;

      function addKeyedRemoval(key) {
        keyedRemovalList ? keyedRemovalList.push(key) : keyedRemovalList = [key];
      }

      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (1 === node.nodeType) for (var curChild = node.firstChild; curChild;) {
          var key = void 0;
          skipKeyedNodes && (key = getNodeKey(curChild)) ? addKeyedRemoval(key) : (onNodeDiscarded(curChild), curChild.firstChild && walkDiscardedChildNodes(curChild, skipKeyedNodes)), curChild = curChild.nextSibling;
        }
      }

      function removeNode(node, parentNode, skipKeyedNodes) {
        !1 !== onBeforeNodeDiscarded(node) && (parentNode && parentNode.removeChild(node), onNodeDiscarded(node), walkDiscardedChildNodes(node, skipKeyedNodes));
      }

      function indexTree(node) {
        if (1 === node.nodeType || 11 === node.nodeType) for (var curChild = node.firstChild; curChild;) {
          var key = getNodeKey(curChild);
          key && (fromNodesLookup[key] = curChild), indexTree(curChild), curChild = curChild.nextSibling;
        }
      }

      function handleNodeAdded(el) {
        onNodeAdded(el);

        for (var curChild = el.firstChild; curChild;) {
          var nextSibling = curChild.nextSibling,
              key = getNodeKey(curChild);

          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl) && (curChild.parentNode.replaceChild(unmatchedFromEl, curChild), morphEl(unmatchedFromEl, curChild));
          }

          handleNodeAdded(curChild), curChild = nextSibling;
        }
      }

      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        for (; curFromNodeChild;) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          (curFromNodeKey = getNodeKey(curFromNodeChild)) ? addKeyedRemoval(curFromNodeKey) : removeNode(curFromNodeChild, fromEl, !0), curFromNodeChild = fromNextSibling;
        }
      }

      function morphEl(fromEl, toEl, childrenOnly) {
        var toElKey = getNodeKey(toEl);

        if (toElKey && delete fromNodesLookup[toElKey], !toNode.isSameNode || !toNode.isSameNode(fromNode)) {
          if (!childrenOnly) {
            if (!1 === onBeforeElUpdated(fromEl, toEl)) return;
            if (morphAttrs(fromEl, toEl), onElUpdated(fromEl), !1 === onBeforeElChildrenUpdated(fromEl, toEl)) return;
          }

          "TEXTAREA" !== fromEl.nodeName ? morphChildren(fromEl, toEl) : specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }

      function morphChildren(fromEl, toEl) {
        var curToNodeChild = toEl.firstChild,
            curFromNodeChild = fromEl.firstChild,
            curToNodeKey,
            curFromNodeKey,
            fromNextSibling,
            toNextSibling,
            matchingFromEl;

        outer: for (; curToNodeChild;) {
          for (toNextSibling = curToNodeChild.nextSibling, curToNodeKey = getNodeKey(curToNodeChild); curFromNodeChild;) {
            if (fromNextSibling = curFromNodeChild.nextSibling, curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
              curToNodeChild = toNextSibling, curFromNodeChild = fromNextSibling;
              continue outer;
            }

            curFromNodeKey = getNodeKey(curFromNodeChild);
            var curFromNodeType = curFromNodeChild.nodeType,
                isCompatible = void 0;

            if (curFromNodeType === curToNodeChild.nodeType && (1 === curFromNodeType ? (curToNodeKey ? curToNodeKey !== curFromNodeKey && ((matchingFromEl = fromNodesLookup[curToNodeKey]) ? fromNextSibling === matchingFromEl ? isCompatible = !1 : (fromEl.insertBefore(matchingFromEl, curFromNodeChild), curFromNodeKey ? addKeyedRemoval(curFromNodeKey) : removeNode(curFromNodeChild, fromEl, !0), curFromNodeChild = matchingFromEl) : isCompatible = !1) : curFromNodeKey && (isCompatible = !1), (isCompatible = !1 !== isCompatible && compareNodeNames(curFromNodeChild, curToNodeChild)) && morphEl(curFromNodeChild, curToNodeChild)) : 3 !== curFromNodeType && 8 != curFromNodeType || (isCompatible = !0, curFromNodeChild.nodeValue !== curToNodeChild.nodeValue && (curFromNodeChild.nodeValue = curToNodeChild.nodeValue))), isCompatible) {
              curToNodeChild = toNextSibling, curFromNodeChild = fromNextSibling;
              continue outer;
            }

            curFromNodeKey ? addKeyedRemoval(curFromNodeKey) : removeNode(curFromNodeChild, fromEl, !0), curFromNodeChild = fromNextSibling;
          }

          if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) fromEl.appendChild(matchingFromEl), morphEl(matchingFromEl, curToNodeChild);else {
            var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
            !1 !== onBeforeNodeAddedResult && (onBeforeNodeAddedResult && (curToNodeChild = onBeforeNodeAddedResult), curToNodeChild.actualize && (curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc)), fromEl.appendChild(curToNodeChild), handleNodeAdded(curToNodeChild));
          }
          curToNodeChild = toNextSibling, curFromNodeChild = fromNextSibling;
        }

        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        specialElHandler && specialElHandler(fromEl, toEl);
      }

      indexTree(fromNode);
      var morphedNode = fromNode,
          morphedNodeType = morphedNode.nodeType,
          toNodeType = toNode.nodeType;
      if (!childrenOnly) if (1 === morphedNodeType) 1 === toNodeType ? compareNodeNames(fromNode, toNode) || (onNodeDiscarded(fromNode), morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI))) : morphedNode = toNode;else if (3 === morphedNodeType || 8 === morphedNodeType) {
        if (toNodeType === morphedNodeType) return morphedNode.nodeValue !== toNode.nodeValue && (morphedNode.nodeValue = toNode.nodeValue), morphedNode;
        morphedNode = toNode;
      }
      if (morphedNode === toNode) onNodeDiscarded(fromNode);else if (morphEl(morphedNode, toNode, childrenOnly), keyedRemovalList) for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
        var elToRemove = fromNodesLookup[keyedRemovalList[i]];
        elToRemove && removeNode(elToRemove, elToRemove.parentNode, !1);
      }
      return !childrenOnly && morphedNode !== fromNode && fromNode.parentNode && (morphedNode.actualize && (morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc)), fromNode.parentNode.replaceChild(morphedNode, fromNode)), morphedNode;
    };
  }

  var morphdom = morphdomFactory(morphAttrs),
      commonjsGlobal = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};

  function createCommonjsModule(fn, module) {
    return fn(module = {
      exports: {}
    }, module.exports), module.exports;
  }

  var mustache = createCommonjsModule(function (module, exports) {
    /*!
         * mustache.js - Logic-less {{mustache}} templates with JavaScript
         * http://github.com/janl/mustache.js
         */
    !function defineMustache(global, factory) {
      exports && "string" != typeof exports.nodeName ? factory(exports) : (global.Mustache = {}, factory(global.Mustache));
    }(commonjsGlobal, function mustacheFactory(mustache) {
      var objectToString = Object.prototype.toString,
          isArray = Array.isArray || function isArrayPolyfill(object) {
        return "[object Array]" === objectToString.call(object);
      };

      function isFunction(object) {
        return "function" == typeof object;
      }

      function typeStr(obj) {
        return isArray(obj) ? "array" : _typeof2(obj);
      }

      function escapeRegExp(string) {
        return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
      }

      function hasProperty(obj, propName) {
        return null != obj && "object" == _typeof2(obj) && propName in obj;
      }

      function primitiveHasOwnProperty(primitive, propName) {
        return null != primitive && "object" != _typeof2(primitive) && primitive.hasOwnProperty && primitive.hasOwnProperty(propName);
      }

      var regExpTest = RegExp.prototype.test;

      function testRegExp(re, string) {
        return regExpTest.call(re, string);
      }

      var nonSpaceRe = /\S/;

      function isWhitespace(string) {
        return !testRegExp(nonSpaceRe, string);
      }

      var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;",
        "`": "&#x60;",
        "=": "&#x3D;"
      };

      function escapeHtml(string) {
        return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap(s) {
          return entityMap[s];
        });
      }

      var whiteRe = /\s*/,
          spaceRe = /\s+/,
          equalsRe = /\s*=/,
          curlyRe = /\s*\}/,
          tagRe = /#|\^|\/|>|\{|&|=|!/;

      function parseTemplate(template, tags) {
        if (!template) return [];
        var sections = [],
            tokens = [],
            spaces = [],
            hasTag = !1,
            nonSpace = !1,
            openingTagRe,
            closingTagRe,
            closingCurlyRe;

        function stripSpace() {
          if (hasTag && !nonSpace) for (; spaces.length;) {
            delete tokens[spaces.pop()];
          } else spaces = [];
          hasTag = !1, nonSpace = !1;
        }

        function compileTags(tagsToCompile) {
          if ("string" == typeof tagsToCompile && (tagsToCompile = tagsToCompile.split(spaceRe, 2)), !isArray(tagsToCompile) || 2 !== tagsToCompile.length) throw new Error("Invalid tags: " + tagsToCompile);
          openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + "\\s*"), closingTagRe = new RegExp("\\s*" + escapeRegExp(tagsToCompile[1])), closingCurlyRe = new RegExp("\\s*" + escapeRegExp("}" + tagsToCompile[1]));
        }

        compileTags(tags || mustache.tags);

        for (var scanner = new Scanner(template), start, type, value, chr, token, openSection; !scanner.eos();) {
          if (start = scanner.pos, value = scanner.scanUntil(openingTagRe)) for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
            isWhitespace(chr = value.charAt(i)) ? spaces.push(tokens.length) : nonSpace = !0, tokens.push(["text", chr, start, start + 1]), start += 1, "\n" === chr && stripSpace();
          }
          if (!scanner.scan(openingTagRe)) break;
          if (hasTag = !0, type = scanner.scan(tagRe) || "name", scanner.scan(whiteRe), "=" === type ? (value = scanner.scanUntil(equalsRe), scanner.scan(equalsRe), scanner.scanUntil(closingTagRe)) : "{" === type ? (value = scanner.scanUntil(closingCurlyRe), scanner.scan(curlyRe), scanner.scanUntil(closingTagRe), type = "&") : value = scanner.scanUntil(closingTagRe), !scanner.scan(closingTagRe)) throw new Error("Unclosed tag at " + scanner.pos);
          if (token = [type, value, start, scanner.pos], tokens.push(token), "#" === type || "^" === type) sections.push(token);else if ("/" === type) {
            if (!(openSection = sections.pop())) throw new Error('Unopened section "' + value + '" at ' + start);
            if (openSection[1] !== value) throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
          } else "name" === type || "{" === type || "&" === type ? nonSpace = !0 : "=" === type && compileTags(value);
        }

        if (openSection = sections.pop()) throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);
        return nestTokens(squashTokens(tokens));
      }

      function squashTokens(tokens) {
        for (var squashedTokens = [], token, lastToken, i = 0, numTokens = tokens.length; i < numTokens; ++i) {
          (token = tokens[i]) && ("text" === token[0] && lastToken && "text" === lastToken[0] ? (lastToken[1] += token[1], lastToken[3] = token[3]) : (squashedTokens.push(token), lastToken = token));
        }

        return squashedTokens;
      }

      function nestTokens(tokens) {
        for (var nestedTokens = [], collector = nestedTokens, sections = [], token, section, i = 0, numTokens = tokens.length; i < numTokens; ++i) {
          switch ((token = tokens[i])[0]) {
            case "#":
            case "^":
              collector.push(token), sections.push(token), collector = token[4] = [];
              break;

            case "/":
              (section = sections.pop())[5] = token[2], collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
              break;

            default:
              collector.push(token);
          }
        }

        return nestedTokens;
      }

      function Scanner(string) {
        this.string = string, this.tail = string, this.pos = 0;
      }

      function Context(view, parentContext) {
        this.view = view, this.cache = {
          ".": this.view
        }, this.parent = parentContext;
      }

      function Writer() {
        this.cache = {};
      }

      Scanner.prototype.eos = function eos() {
        return "" === this.tail;
      }, Scanner.prototype.scan = function scan(re) {
        var match = this.tail.match(re);
        if (!match || 0 !== match.index) return "";
        var string = match[0];
        return this.tail = this.tail.substring(string.length), this.pos += string.length, string;
      }, Scanner.prototype.scanUntil = function scanUntil(re) {
        var index = this.tail.search(re),
            match;

        switch (index) {
          case -1:
            match = this.tail, this.tail = "";
            break;

          case 0:
            match = "";
            break;

          default:
            match = this.tail.substring(0, index), this.tail = this.tail.substring(index);
        }

        return this.pos += match.length, match;
      }, Context.prototype.push = function push(view) {
        return new Context(view, this);
      }, Context.prototype.lookup = function lookup(name) {
        var cache = this.cache,
            value;
        if (cache.hasOwnProperty(name)) value = cache[name];else {
          for (var context = this, intermediateValue, names, index, lookupHit = !1; context;) {
            if (name.indexOf(".") > 0) for (intermediateValue = context.view, names = name.split("."), index = 0; null != intermediateValue && index < names.length;) {
              index === names.length - 1 && (lookupHit = hasProperty(intermediateValue, names[index]) || primitiveHasOwnProperty(intermediateValue, names[index])), intermediateValue = intermediateValue[names[index++]];
            } else intermediateValue = context.view[name], lookupHit = hasProperty(context.view, name);

            if (lookupHit) {
              value = intermediateValue;
              break;
            }

            context = context.parent;
          }

          cache[name] = value;
        }
        return isFunction(value) && (value = value.call(this.view)), value;
      }, Writer.prototype.clearCache = function clearCache() {
        this.cache = {};
      }, Writer.prototype.parse = function parse(template, tags) {
        var cache = this.cache,
            cacheKey = template + ":" + (tags || mustache.tags).join(":"),
            tokens = cache[cacheKey];
        return null == tokens && (tokens = cache[cacheKey] = parseTemplate(template, tags)), tokens;
      }, Writer.prototype.render = function render(template, view, partials, tags) {
        var tokens = this.parse(template, tags),
            context = view instanceof Context ? view : new Context(view);
        return this.renderTokens(tokens, context, partials, template, tags);
      }, Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate, tags) {
        for (var buffer = "", token, symbol, value, i = 0, numTokens = tokens.length; i < numTokens; ++i) {
          value = void 0, "#" === (symbol = (token = tokens[i])[0]) ? value = this.renderSection(token, context, partials, originalTemplate) : "^" === symbol ? value = this.renderInverted(token, context, partials, originalTemplate) : ">" === symbol ? value = this.renderPartial(token, context, partials, tags) : "&" === symbol ? value = this.unescapedValue(token, context) : "name" === symbol ? value = this.escapedValue(token, context) : "text" === symbol && (value = this.rawValue(token)), void 0 !== value && (buffer += value);
        }

        return buffer;
      }, Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {
        var self = this,
            buffer = "",
            value = context.lookup(token[1]);

        function subRender(template) {
          return self.render(template, context, partials);
        }

        if (value) {
          if (isArray(value)) for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
          } else if ("object" == _typeof2(value) || "string" == typeof value || "number" == typeof value) buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);else if (isFunction(value)) {
            if ("string" != typeof originalTemplate) throw new Error("Cannot use higher-order sections without the original template");
            null != (value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender)) && (buffer += value);
          } else buffer += this.renderTokens(token[4], context, partials, originalTemplate);
          return buffer;
        }
      }, Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {
        var value = context.lookup(token[1]);
        if (!value || isArray(value) && 0 === value.length) return this.renderTokens(token[4], context, partials, originalTemplate);
      }, Writer.prototype.renderPartial = function renderPartial(token, context, partials, tags) {
        if (partials) {
          var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
          return null != value ? this.renderTokens(this.parse(value, tags), context, partials, value) : void 0;
        }
      }, Writer.prototype.unescapedValue = function unescapedValue(token, context) {
        var value = context.lookup(token[1]);
        if (null != value) return value;
      }, Writer.prototype.escapedValue = function escapedValue(token, context) {
        var value = context.lookup(token[1]);
        if (null != value) return mustache.escape(value);
      }, Writer.prototype.rawValue = function rawValue(token) {
        return token[1];
      }, mustache.name = "mustache.js", mustache.version = "3.0.1", mustache.tags = ["{{", "}}"];
      var defaultWriter = new Writer();
      return mustache.clearCache = function clearCache() {
        return defaultWriter.clearCache();
      }, mustache.parse = function parse(template, tags) {
        return defaultWriter.parse(template, tags);
      }, mustache.render = function render(template, view, partials, tags) {
        if ("string" != typeof template) throw new TypeError('Invalid template! Template should be a "string" but "' + typeStr(template) + '" was given as the first argument for mustache#render(template, view, partials)');
        return defaultWriter.render(template, view, partials, tags);
      }, mustache.to_html = function to_html(template, view, partials, send) {
        var result = mustache.render(template, view, partials);
        if (!isFunction(send)) return result;
        send(result);
      }, mustache.escape = escapeHtml, mustache.Scanner = Scanner, mustache.Context = Context, mustache.Writer = Writer, mustache;
    });
  }),
      Template = function () {
    function Template(templates, contents, order) {
      this.templates = templates, this.contents = contents, this.order = order;
    }

    var _proto;

    return Template.prototype.render = function render(data, cb) {
      var output = mustache.render(this.masterTemplate, data);
      return cb ? cb(output) : output;
    }, _createClass(Template, [{
      key: "masterTemplate",
      get: function get() {
        var _this = this;

        return this.order.reduce(function (acc, key) {
          var string = "";
          return _this.contents[key] && (string = _this.templates[key] || ""), acc + string;
        }, "");
      }
    }]), Template;
  }(),
      stylesTemplate = "{{#selectors}}{{#media}} {{media}} { {{/media}}{{selector}} { {{#declarations}}{{property}}: {{{value}}};{{/declarations}} } {{#media}} } {{/media}}{{/selectors}}",
      conditionalStyles = ".shopify-buy__modal {\n  display: none;\n}\n\n.is-active .shopify-buy__modal {\n    display: block;\n    opacity: 1;\n    margin-left: auto;\n    margin-right: auto;\n  }\n";

  function addClassToElement(className, element) {
    if (className) if (element.classList) element.classList.add(className);else {
      var classes;
      if (element.className.split(" ").indexOf(className) > -1) return;
      element.setAttribute("class", "".concat(element.className, " ").concat(className));
    }
  }

  function removeClassFromElement(className, element) {
    className && (element.classList ? element.classList.remove(className) : element.setAttribute("class", element.className.replace(className, "")));
  }

  var iframeStyles = {
    width: "100%",
    overflow: "hidden",
    border: "none"
  },
      iframeAttrs = {
    horizontalscrolling: "no",
    verticalscrolling: "no",
    allowTransparency: "true",
    frameBorder: "0",
    scrolling: "no"
  },
      webfontScript = "https://ajax.googleapis.com/ajax/libs/webfont/1.6.16/webfont.js";

  function isPseudoSelector(key) {
    return ":" === key.charAt(0);
  }

  function isMedia(key) {
    return "@" === key.charAt(0);
  }

  function isValue$1(test) {
    return "string" == typeof test || "number" == typeof test;
  }

  function ruleDeclarations(rule) {
    return Object.keys(rule).filter(function (key) {
      return isValue$1(rule[key]);
    }).map(function (key) {
      return {
        property: key,
        value: rule[key]
      };
    });
  }

  function selectorStyleGroup(selector, selectorClass, classes) {
    var styleGroup = [];

    if (selector && selectorClass) {
      var formattedSelector = selectorClass.split(" ").join(".");
      isPseudoSelector(formattedSelector) || (formattedSelector = ".".concat(formattedSelector)), styleGroup = Object.keys(selector).filter(function (decKey) {
        return !isValue$1(selector[decKey]);
      }).reduce(function (acc, decKey) {
        var className = classes[decKey] || decKey;
        return acc.concat(selectorStyleGroup(selector[decKey], className, classes).map(function (group) {
          var groupSelector = "";
          return {
            selector: groupSelector = isPseudoSelector(group.selector) ? "".concat(formattedSelector).concat(group.selector) : isMedia(decKey) ? formattedSelector : "".concat(formattedSelector, " ").concat(group.selector),
            declarations: group.declarations,
            media: isMedia(decKey) ? decKey : null
          };
        }));
      }, []);
      var declarations = ruleDeclarations(selector);
      declarations.length && styleGroup.push({
        selector: "".concat(formattedSelector),
        declarations: declarations
      });
    }

    return styleGroup;
  }

  var iframe = function () {
    function iframe(node, config) {
      var _this = this;

      this.el = document.createElement("iframe"), this.parent = node, this.stylesheet = config.stylesheet, this.customStylesHash = config.customStyles || {}, this.classes = config.classes, this.browserFeatures = config.browserFeatures, this.googleFonts = config.googleFonts || [], this.name = config.name, config.width && this.setWidth(config.width), Object.keys(iframeStyles).forEach(function (key) {
        _this.el.style[key] = iframeStyles[key];
      }), Object.keys(iframeAttrs).forEach(function (key) {
        return _this.el.setAttribute(key, iframeAttrs[key]);
      }), this.el.setAttribute("name", config.name), this.styleTag = null;
    }

    var _proto = iframe.prototype;
    return _proto.load = function load() {
      var _this2 = this;

      return new Promise(function (resolve) {
        _this2.el.onload = function () {
          return _this2.loadFonts().then(function () {
            return _this2.appendStyleTag(), resolve();
          });
        }, _this2.parent.appendChild(_this2.el);
      });
    }, _proto.loadFonts = function loadFonts() {
      var _this3 = this;

      return this.googleFonts && this.googleFonts.length ? this.loadFontScript().then(function () {
        return new Promise(function (resolve) {
          return window.WebFont ? (window.WebFont.load({
            google: {
              families: _this3.googleFonts
            },
            fontactive: function fontactive() {
              return resolve();
            },
            context: _this3.el.contentWindow || frames[_this3.name]
          }), window.setTimeout(function () {
            return resolve();
          }, 1e3)) : resolve();
        });
      }) : Promise.resolve(!0);
    }, _proto.loadFontScript = function loadFontScript() {
      if (window.WebFont) return Promise.resolve();
      var fontScript = document.createElement("script");
      return new Promise(function (resolve) {
        fontScript.onload = function () {
          resolve();
        }, fontScript.src = webfontScript, document.head.appendChild(fontScript), setTimeout(function () {
          resolve();
        }, 500);
      });
    }, _proto.setWidth = function setWidth(width) {
      this.parent.style["max-width"] = width;
    }, _proto.addClass = function addClass(className) {
      addClassToElement(className, this.parent);
    }, _proto.removeClass = function removeClass(className) {
      removeClassFromElement(className, this.parent);
    }, _proto.setName = function setName(name) {
      this.el.setAttribute("name", name);
    }, _proto.updateStyles = function updateStyles(customStyles, googleFonts) {
      var _this4 = this;

      return this.googleFonts = googleFonts, this.loadFonts().then(function () {
        _this4.customStylesHash = customStyles, _this4.styleTag.innerHTML = _this4.css;
      });
    }, _proto.appendStyleTag = function appendStyleTag() {
      this.document.head && (this.styleTag = this.document.createElement("style"), this.styleTag.styleSheet ? this.styleTag.styleSheet.cssText = this.css : this.styleTag.appendChild(this.document.createTextNode(this.css)), this.document.head.appendChild(this.styleTag));
    }, _createClass(iframe, [{
      key: "width",
      get: function get() {
        return this.parent.style["max-width"];
      }
    }, {
      key: "document",
      get: function get() {
        var doc;
        return this.el.contentWindow && this.el.contentWindow.document.body ? doc = this.el.contentWindow.document : this.el.document && this.el.document.body ? doc = this.el.document : this.el.contentDocument && this.el.contentDocument.body && (doc = this.el.contentDocument), doc;
      }
    }, {
      key: "customStyles",
      get: function get() {
        var _this5 = this,
            customStyles = [];

        return Object.keys(this.customStylesHash).forEach(function (typeKey) {
          _this5.customStylesHash[typeKey] && Object.keys(_this5.customStylesHash[typeKey]).forEach(function (key) {
            var styleGroup = selectorStyleGroup(_this5.customStylesHash[typeKey][key], _this5.classes[typeKey][key], _this5.classes[typeKey]);
            customStyles = customStyles.concat(styleGroup);
          });
        }), customStyles;
      }
    }, {
      key: "conditionalCSS",
      get: function get() {
        return this.browserFeatures.transition && this.browserFeatures.transform && this.browserFeatures.animation ? "" : conditionalStyles;
      }
    }, {
      key: "css",
      get: function get() {
        var compiled = mustache.render(stylesTemplate, {
          selectors: this.customStyles
        });
        return "".concat(this.stylesheet, " \n ").concat(compiled, " \n ").concat(this.conditionalCSS);
      }
    }]), iframe;
  }(),
      styles = {
    cart: 'html, body, h1, h2, h3, h4, h5, p {   padding: 0;   margin: 0; } * {   -webkit-box-sizing: border-box;           box-sizing: border-box; } body, html {   min-height: 100%; } html {   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   font-size: 14px;   line-height: 1.2;   color: #4c4c4c;   text-rendering: optimizeLegibility;   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale; } select {   text-rendering: auto !important; } ul {   list-style: none;   padding-left: 0;   margin: 0; } img {   display: block;   max-width: 100%; } input {   -webkit-appearance: textfield;   margin: 0; } .clearfix:after {     content: "";     display: table;     clear: both;   } .visuallyhidden {   border: 0;   height: 1px;   margin: -1px;   overflow: hidden;   padding: 0;   position: absolute;   width: 1px; } .component-container {   overflow: hidden; } .shopify-buy__type--center {   text-align: center; } .shopify-buy--visually-hidden {   position: absolute !important;   clip: rect(1px, 1px, 1px, 1px);   padding:0 !important;   border:0 !important;   height: 1px !important;   width: 1px !important;   overflow: hidden; } .shopify-buy__btn {   color: #fff;   font-size: 15px;   background-color: #78b657;   padding: 12px 40px;   letter-spacing: .3px;   display: block;   border-radius: 3px;   cursor: pointer;   -webkit-transition: background 200ms ease;   transition: background 200ms ease;   max-width: 100%;   text-overflow: ellipsis;   overflow: hidden;   line-height: 1.2;   border: 0;   -moz-appearance: none;   -webkit-appearance: none } .shopify-buy__btn:hover,   .shopify-buy__btn:focus {     background-color: #5f9d3e;   } .shopify-buy__btn--parent {   background-color: transparent;   border: 0;   padding: 0;   cursor: pointer } .shopify-buy__btn--parent:hover .product__variant-img, .shopify-buy__btn--parent:focus .product__variant-img {       opacity: .7;     } .shopify-buy__btn--cart-tab {   padding: 5px 11px;   border-radius: 3px 0 0 3px;   position: fixed;   right: 0;   top: 50%;   -webkit-transform: translate(100%, -50%);           transform: translate(100%, -50%);   opacity: 0;   min-width: inherit;   width: auto;   height: auto;   z-index: 2147483647 } .shopify-buy__btn--cart-tab.is-active {     -webkit-transform: translateY(-50%);             transform: translateY(-50%);     opacity: 1;   } .shopify-buy__btn__counter {   display: block;   margin: 0 auto 10px auto;   font-size: 18px; } .shopify-buy__icon-cart--side {   height: 20px;   width: 20px; } .shopify-buy__btn[disabled] {   background-color: #999;   pointer-events: none; } .shopify-buy__btn--close {   position: absolute;   right: 9px;   top: 8px;   font-size: 35px;   color: #767676;   border: none;   background-color: transparent;   -webkit-transition: color 100ms ease, -webkit-transform 100ms ease;   transition: color 100ms ease, -webkit-transform 100ms ease;   transition: transform 100ms ease, color 100ms ease;   transition: transform 100ms ease, color 100ms ease, -webkit-transform 100ms ease;   cursor: pointer;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   padding-right: 9px } .shopify-buy__btn--close:hover {     -webkit-transform: scale(1.2);             transform: scale(1.2);     color: hsl(0, 0%, 41.2745098039%);   } @-webkit-keyframes flipIn {   from {     max-height: 0;     -webkit-transform: rotatex(90deg) translatey(-50%);             transform: rotatex(90deg) translatey(-50%);     margin-bottom: -65px;     opacity: 0;   }    to {     max-height: none;     -webkit-transform: none;             transform: none;     margin-bottom: 20px;     opacity: 1;   } } @keyframes flipIn {   from {     max-height: 0;     -webkit-transform: rotatex(90deg) translatey(-50%);             transform: rotatex(90deg) translatey(-50%);     margin-bottom: -65px;     opacity: 0;   }    to {     max-height: none;     -webkit-transform: none;             transform: none;     margin-bottom: 20px;     opacity: 1;   } } @-webkit-keyframes flipOut {   from {     max-height: none;     -webkit-transform: none;             transform: none;     margin-bottom: 20px;     opacity: 1;   }    to {     max-height: 0;     -webkit-transform: rotatex(90deg) translatey(-50%);             transform: rotatex(90deg) translatey(-50%);     margin-bottom: -65px;     opacity: 0;   } } @keyframes flipOut {   from {     max-height: none;     -webkit-transform: none;             transform: none;     margin-bottom: 20px;     opacity: 1;   }    to {     max-height: 0;     -webkit-transform: rotatex(90deg) translatey(-50%);             transform: rotatex(90deg) translatey(-50%);     margin-bottom: -65px;     opacity: 0;   } } .shopify-buy__cart-wrapper {   height: 100%;   padding-left: 10px; } .shopify-buy__cart {   height: 100%;   background-color: #fff;   width: calc(100% - 10px);   position: absolute;   right: 0;   -webkit-box-shadow: -5px 0 5px rgba(0, 0, 0, 0.1);           box-shadow: -5px 0 5px rgba(0, 0, 0, 0.1); } .shopify-buy__cart__header {   padding: 20px;   padding-right: 40px;   position: relative;   z-index: 2147483647;   background-color: inherit; } .shopify-buy__cart__title {   font-size: 18px;   color: #767676;   font-weight: normal;   overflow: hidden;   text-overflow: ellipsis; } .shopify-buy__cart-scroll {   padding: 70px 0 135px 0;   position: absolute;   top: 0;   height: 100%;   width: 100%; } .shopify-buy__cart-scroll--discounts {   padding-bottom: 170px; } .shopify-buy__cart-scroll--cart-note {   padding-bottom: 200px; } .shopify-buy__cart-scroll--cart-note.shopify-buy__cart-scroll--discounts {   padding-bottom: 230px; } .shopify-buy__cart-items {   overflow: hidden;   overflow-y: auto;   height: 100%;   position: relative;   padding: 0 20px 20px;   -webkit-overflow-scrolling: touch;   -webkit-perspective: 400px;           perspective: 400px;   -webkit-perspective-origin: 50% 0px;           perspective-origin: 50% 0px; } .shopify-buy__cart-item {   min-height: 65px;   margin-bottom: 20px;   overflow: hidden;   position: relative;   -webkit-backface-visibility: visible;           backface-visibility: visible;   -webkit-animation: 200ms flipIn forwards;           animation: 200ms flipIn forwards; } .shopify-buy__cart-item.is-hidden {   -webkit-animation-name: flipOut;           animation-name: flipOut; } .shopify-buy__cart-item__image {   width: 65px;   height: 65px;   background-size: contain;   background-repeat: no-repeat;   background-position: center center;   background-color: transparent;   position: absolute;   left: 0;   top: 0; } .shopify-buy__cart-item__title {   font-size: 14px;   margin-left: 80px;   margin-bottom: 3px;   display: block; } .shopify-buy__cart-item__price {   float: right;   font-size: 14px;   font-weight: bold;   line-height: 26px; } .shopify-buy__cart-item__price-and-discounts {   float: right;   text-align: right;   max-width: 100px } .shopify-buy__cart-item__price-and-discounts .shopify-buy__cart-item__price {     float: none;   } .shopify-buy__cart-item__full-price {   font-size: 12px;   line-height: 12px; } .shopify-buy__cart-item__discount {   font-size: 12px;   word-wrap: break-word;   text-transform: uppercase } .shopify-buy__cart-item__discount + .shopify-buy__cart-item__discount {     margin-top: 5px;   } .shopify-buy__cart-item__discount__icon {   width: 12px;   height: 12px;   vertical-align: top;   fill: currentColor; } .shopify-buy__cart-item__variant-title {   margin-left: 80px;   margin-bottom: 10px;   color: #4c4c4c;   font-size: 12px;   max-width: 220px;   overflow: hidden;   text-overflow: ellipsis; } .shopify-buy__cart-bottom {   background-color: #fff;   position: absolute;   width: 100%;   bottom: 0;   padding: 15px 20px 20px 20px; } .shopify-buy__cart__subtotal__text {   text-transform: uppercase;   float: left;   font-size: 11px;   color: #4c4c4c; } .shopify-buy__cart__subtotal__price {   float: right; } .shopify-buy__cart__discount {   display: -webkit-box;   display: -webkit-flex;   display: -ms-flexbox;   display: flex;   margin-bottom: 10px;   color: #4c4c4c; } .shopify-buy__cart__discount__text {   font-size: 11px;   text-transform: uppercase;   margin-right: 10px;   -webkit-box-flex: 1;   -webkit-flex-grow: 1;       -ms-flex-positive: 1;           flex-grow: 1; } .shopify-buy__cart__discount__text__icon {   width: 11px;   height: 11px;   vertical-align: top;   fill: currentColor; } .shopify-buy__cart__discount__amount {   font-size: 12px;   line-height: 12px;   -webkit-flex-shrink: 0;       -ms-flex-negative: 0;           flex-shrink: 0; } .shopify-buy__cart__currency {   font-size: 12px; } .shopify-buy__cart__notice {   font-size: 11px;   clear: both;   padding-top: 10px;   text-align: center;   color: #4c4c4c; } .shopify-buy__cart__note {   clear: both;   padding-top: 10px; } .shopify-buy__cart__note__description {   font-size: 11px;   color: #4c4c4c; } .shopify-buy__cart__note__text-area {   resize: none;   font-size: 11px;   width: 100%;   color: #4c4c4c; } .shopify-buy__cart-empty-text {   padding: 10px 15px;   text-align: center; } .shopify-buy__btn--cart-checkout {   clear: both;   margin-top: 15px;   width: 100%;   padding: 10px 5px;   font-size: 16px; } .shopify-buy__quantity-container {   margin-left: 80px;   margin-right: 100px;   height: 26px;   line-height: 26px; } .shopify-buy__quantity-container.is-loading {   opacity: 0.65;   pointer-events: none; } .shopify-buy__cart-item__quantity-input {   float: left;   background: transparent; } @media (max-width: 330px) {   .shopify-buy__cart-item__price-and-discounts {     max-width: 90px;   }    .shopify-buy__quantity-container {     margin-right: 90px;   } } .shopify-buy__quantity-decrement, .shopify-buy__quantity-increment {   color: #4c4c4c;   display: block;   height: 30px;   float: left;   line-height: 16px;   font-family: monospace;   width: 26px;   padding: 0;   border: none;   background: transparent;   -webkit-box-shadow: none;           box-shadow: none;   cursor: pointer;   font-size: 18px;   text-align: center;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   border: 1px solid #767676;   position: relative } .shopify-buy__quantity-decrement svg, .shopify-buy__quantity-increment svg {     width: 14px;     height: 14px;     position: absolute;     top: 50%;     left: 50%;     margin-top: -6px;     margin-left: -7px;     fill: currentColor;   } .shopify-buy__quantity-decrement {   border-radius: 3px 0 0 3px; } .shopify-buy__quantity-increment {   border-radius: 0 3px 3px 0; } .shopify-buy__quantity {   color: black;   width: 45px;   height: 30px;   font-size: 16px;   border: none;   text-align: center;   -webkit-appearance: none;   -moz-appearance: textfield;   display: inline-block;   padding: 0;   border-radius: 0;   border-top: 1px solid #767676;   border-bottom: 1px solid #767676; } input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button {   -webkit-appearance: none;   margin: 0; } .shopify-buy__quantity-container.shopify-buy__quantity-with-btns {   overflow: hidden } .shopify-buy__quantity-container.shopify-buy__quantity-with-btns .shopify-buy__quantity {     border-left: 0;     border-right: 0;     float: left;   } ',
    modal: 'html, body, h1, h2, h3, h4, h5, p {   padding: 0;   margin: 0; } * {   -webkit-box-sizing: border-box;           box-sizing: border-box; } body, html {   min-height: 100%; } html {   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   font-size: 14px;   line-height: 1.2;   color: #4c4c4c;   text-rendering: optimizeLegibility;   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale; } select {   text-rendering: auto !important; } ul {   list-style: none;   padding-left: 0;   margin: 0; } img {   display: block;   max-width: 100%; } input {   -webkit-appearance: textfield;   margin: 0; } .clearfix:after {     content: "";     display: table;     clear: both;   } .visuallyhidden {   border: 0;   height: 1px;   margin: -1px;   overflow: hidden;   padding: 0;   position: absolute;   width: 1px; } .component-container {   overflow: hidden; } .shopify-buy__type--center {   text-align: center; } .shopify-buy--visually-hidden {   position: absolute !important;   clip: rect(1px, 1px, 1px, 1px);   padding:0 !important;   border:0 !important;   height: 1px !important;   width: 1px !important;   overflow: hidden; } .shopify-buy__quantity-decrement, .shopify-buy__quantity-increment {   color: #4c4c4c;   display: block;   height: 30px;   float: left;   line-height: 16px;   font-family: monospace;   width: 26px;   padding: 0;   border: none;   background: transparent;   -webkit-box-shadow: none;           box-shadow: none;   cursor: pointer;   font-size: 18px;   text-align: center;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   border: 1px solid #767676;   position: relative } .shopify-buy__quantity-decrement svg, .shopify-buy__quantity-increment svg {     width: 14px;     height: 14px;     position: absolute;     top: 50%;     left: 50%;     margin-top: -6px;     margin-left: -7px;     fill: currentColor;   } .shopify-buy__quantity-decrement {   border-radius: 3px 0 0 3px; } .shopify-buy__quantity-increment {   border-radius: 0 3px 3px 0; } .shopify-buy__quantity {   color: black;   width: 45px;   height: 30px;   font-size: 16px;   border: none;   text-align: center;   -webkit-appearance: none;   -moz-appearance: textfield;   display: inline-block;   padding: 0;   border-radius: 0;   border-top: 1px solid #767676;   border-bottom: 1px solid #767676; } input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button {   -webkit-appearance: none;   margin: 0; } .shopify-buy__quantity-container.shopify-buy__quantity-with-btns {   overflow: hidden } .shopify-buy__quantity-container.shopify-buy__quantity-with-btns .shopify-buy__quantity {     border-left: 0;     border-right: 0;     float: left;   } .shopify-buy__btn {   color: #fff;   font-size: 15px;   background-color: #78b657;   padding: 12px 40px;   letter-spacing: .3px;   display: block;   border-radius: 3px;   cursor: pointer;   -webkit-transition: background 200ms ease;   transition: background 200ms ease;   max-width: 100%;   text-overflow: ellipsis;   overflow: hidden;   line-height: 1.2;   border: 0;   -moz-appearance: none;   -webkit-appearance: none } .shopify-buy__btn:hover,   .shopify-buy__btn:focus {     background-color: #5f9d3e;   } .shopify-buy__btn--parent {   background-color: transparent;   border: 0;   padding: 0;   cursor: pointer } .shopify-buy__btn--parent:hover .product__variant-img, .shopify-buy__btn--parent:focus .product__variant-img {       opacity: .7;     } .shopify-buy__btn--cart-tab {   padding: 5px 11px;   border-radius: 3px 0 0 3px;   position: fixed;   right: 0;   top: 50%;   -webkit-transform: translate(100%, -50%);           transform: translate(100%, -50%);   opacity: 0;   min-width: inherit;   width: auto;   height: auto;   z-index: 2147483647 } .shopify-buy__btn--cart-tab.is-active {     -webkit-transform: translateY(-50%);             transform: translateY(-50%);     opacity: 1;   } .shopify-buy__btn__counter {   display: block;   margin: 0 auto 10px auto;   font-size: 18px; } .shopify-buy__icon-cart--side {   height: 20px;   width: 20px; } .shopify-buy__btn[disabled] {   background-color: #999;   pointer-events: none; } .shopify-buy__btn--close {   position: absolute;   right: 9px;   top: 8px;   font-size: 35px;   color: #767676;   border: none;   background-color: transparent;   -webkit-transition: color 100ms ease, -webkit-transform 100ms ease;   transition: color 100ms ease, -webkit-transform 100ms ease;   transition: transform 100ms ease, color 100ms ease;   transition: transform 100ms ease, color 100ms ease, -webkit-transform 100ms ease;   cursor: pointer;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   padding-right: 9px } .shopify-buy__btn--close:hover {     -webkit-transform: scale(1.2);             transform: scale(1.2);     color: hsl(0, 0%, 41.2745098039%);   } .shopify-buy__option-select-wrapper {   border: 1px solid #d3dbe2;   border-radius: 3px;   -webkit-box-sizing: border-box;           box-sizing: border-box;   position: relative;   background: #fff;   overflow: hidden;   vertical-align: bottom; } .shopify-buy__select-icon {   cursor: pointer;   display: block;   fill: #798c9c;   position: absolute;   right: 10px;   top: 50%;   margin-top: -6px;   pointer-events: none;   width: 12px;   height: 12px;   vertical-align: middle; } .shopify-buy__option-select + .shopify-buy__option-select {     margin-top: 7.5px;   } .shopify-buy__option-select__label {   display: block;   font-size: 14px;   margin-top: 15px;   margin-bottom: 5px; } .shopify-buy__btn--parent .shopify-buy__option-select__label {     cursor: pointer;   } .shopify-buy__option-select__select {   font-size: inherit;   padding: 7px 10px;   padding-right: 32px;   border: 0;   width: 100%;   background: transparent;   -webkit-appearance: none;   -moz-appearance: none } .shopify-buy__option-select__select::-ms-expand {     display: none;   } .shopify-buy__btn--parent .shopify-buy__option-select__select {     cursor: pointer;   } .shopify-buy__product {   overflow: hidden;   width: 100%; } .shopify-buy__product__variant-img {   margin: 0 auto 15px auto;   -webkit-transition: opacity 0.3s ease;   transition: opacity 0.3s ease;   opacity: 1 } .shopify-buy__product__variant-img.is-transitioning {     opacity: 0;   } .shopify-buy__is-button {   cursor: pointer; } .shopify-buy__no-image .shopify-buy__product__variant-img {     display: none;   } .shopify-buy__product__title {   font-size: 18px;   line-height: 1.2;   color: #4a4a4a;   margin-bottom: 15px;   font-weight: 700; } .shopify-buy__layout-horizontal .shopify-buy__product__title {     margin-top: 10px;   } .shopify-buy__product__variant-title {   font-size: 18px;   color: #666;   font-weight: 400;   text-align: center;   margin-bottom: 15px; } .shopify-buy__product__price {   margin-bottom: 15px; } .shopify-buy__product-description {   margin-top: 30px;   line-height: 1.65;   color: #4a4a4a } .shopify-buy__product-description p,   .shopify-buy__product-description ul,   .shopify-buy__product-description ol,   .shopify-buy__product-description img {     margin-bottom: 10px   } .shopify-buy__product-description p:last-child, .shopify-buy__product-description ul:last-child, .shopify-buy__product-description ol:last-child, .shopify-buy__product-description img:last-child {       margin-bottom: 0;     } .shopify-buy__product-description a {     color: inherit;   } .shopify-buy__product-description img {     max-width: 100%;   } .shopify-buy__product-description h1 {     font-size: 20px;   } .shopify-buy__product-description h2 {     font-size: 18px;   } .shopify-buy__product-description h3 {     font-size: 17px;   } .shopify-buy__product-description ul,   .shopify-buy__product-description ol {     margin-left: 2em;   } .shopify-buy__product-description ul {     list-style-type: disc;   } .shopify-buy__layout-vertical {   text-align: center; } .shopify-buy__product__actual-price, .shopify-buy__product__compare-price {   color: #4a4a4a;   display: inline-block; } .shopify-buy__product__actual-price {   font-size: 14px; } .shopify-buy__product__compare-price {   font-size: 12px;   text-decoration: line-through;   padding-left: 5px;   opacity: 0.65; } .shopify-buy__product__unit-price {   color: #4a4a4a;   padding-top: 5px;   font-size: 12px;   opacity: 0.8; } .shopify-buy__product__variant-selectors {   text-align: left;   font-size: 14px; } .shopify-buy__layout-vertical .shopify-buy__product__variant-selectors {     width: 100%;     max-width: 280px;     display: inline-block;   } .shopify-buy__quantity {   border-left: 1px solid;   border-right: 1px solid;   border-radius: 3px; } .shopify-buy__quantity, .shopify-buy__quantity-increment, .shopify-buy__quantity-decrement {   border-color: #d3dbe2;   line-height: 1.2;   font-size: 15px;   height: auto;   padding-top: 12px;   padding-bottom: 12px; } .shopify-buy__btn {   display: inline-block; } .shopify-buy__btn-wrapper {   margin-top: 20px; } .shopify-buy__btn.shopify-buy__beside-quantity {   display: inline-block;   vertical-align: top;   border-top-left-radius: 0;   border-bottom-left-radius: 0;   border: 1px solid transparent; } .shopify-buy__btn-and-quantity .shopify-buy__quantity {     border-right: 0;     border-top-right-radius: 0;     border-bottom-right-radius: 0;     background: #fff;   } .shopify-buy__btn-and-quantity .shopify-buy__quantity-container {     display: inline-block;     vertical-align: top;   } .shopify-buy__btn-and-quantity .shopify-buy__btn-wrapper {     display: inline-block;     vertical-align: top;     margin: 0;   } .shopify-buy__cart-item__quantity-container {   margin-top: 20px;   display: inline-block; } .shopify-buy__layout-vertical .shopify-buy__btn,   .shopify-buy__layout-vertical .shopify-buy__quantity-container,   .shopify-buy__layout-horizontal .shopify-buy__btn,   .shopify-buy__layout-horizontal .shopify-buy__quantity-container {     margin: 20px auto 0;   } .shopify-buy__layout-vertical .shopify-buy__btn:first-child, .shopify-buy__layout-horizontal .shopify-buy__btn:first-child {     margin-top: 0;   } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity, .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity {     margin: 20px auto 0   } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity .shopify-buy__btn,     .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity .shopify-buy__btn,     .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity .shopify-buy__quantity-container {       margin: 0 auto;     } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity:first-child, .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity:first-child {     margin: 0 auto;   } .shopify-buy__layout-vertical .shopify-buy__product__variant-img, .shopify-buy__layout-horizontal .shopify-buy__product__variant-img {     max-width: 100%;   } @media (min-width: 500px) {   .shopify-buy__layout-horizontal:not(.no-image) {     text-align: left;     margin-bottom: 0;     margin-left: 0   }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-img-wrapper {       float: left;       width: 40%;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title {       text-align: left;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__price,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-description,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__btn-and-quantity,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__btn-wrapper,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-selectors {       margin-left: calc(40% + 25px);     } } @media (min-width: 680px) {     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-img-wrapper {       float: left;       width: 60%;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__price,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-description,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__btn-and-quantity,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__btn-wrapper,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-selectors {       margin-left: calc(60% + 25px);     } } .no-image .shopify-buy__product-img-wrapper {     display: none;   } @-webkit-keyframes dash {   to {     stroke-dashoffset: 0;   } } @keyframes dash {   to {     stroke-dashoffset: 0;   } } .shopify-buy__carousel {   font-size: 0;   text-align: center;   min-height: 90px;   margin-left: -15px;   margin-top: 15px; } .shopify-buy__carousel-item {   width: calc(16.666% - 15px);   margin-left: 15px;   display: inline-block;   vertical-align: middle;   cursor: pointer;   position: relative;   background-size: cover;   background-position: center;   padding: 0;   border: none } .shopify-buy__carousel-item:nth-child(n+7) {     margin-top: 15px;   } .shopify-buy__carousel-item:before {     content: "";     display: block;     padding-top: 100%;   } .main-image-wrapper {   position: relative; } .carousel-button {   position: absolute;   width: 75px;   top: 0;   height: 100%;   border: none;   font-size: 0;   background-color: transparent;   opacity: 0.4;   cursor: pointer } .carousel-button:hover,   .carousel-button:focus {     opacity: 0.9;     outline: none;   } .carousel-button-arrow {   width: 20px;   display: inline-block;   margin-left: 25px; } .carousel-button--previous {   left: 0;   -webkit-transform: rotate(180deg);           transform: rotate(180deg); } .carousel-button--next {   right: 0; } .shopify-buy__carousel-item--selected {   opacity: 0.4; } .shopify-buy__btn--close {   right: 0px;   font-size: 45px;   font-weight: 100;   z-index: 2147483647;   padding: 0 10px; } .shopify-buy__modal {   background: #fff;   width: calc(100% - 20px);   position: absolute;   left: 0;   right: 0;   z-index: 2147483646; } .shopify-buy__product {   text-align: left; } .shopify-buy__product__title, .shopify-buy__product__price, .shopify-buy__product__variant-title {   text-align: left; } .shopify-buy__product__title {   font-size: 26px;   font-weight: 700;   line-height: 1.4; } .shopify-buy__product__compare-price {   display: inline-block;   margin-right: 5px; } .shopify-buy__product__actual-price {   display: inline-block; } .shopify-buy__modal .shopify-buy__modal-product-wrapper {   width: 100%; } .shopify-buy__product__variant-image {   margin: 0; } @media (max-width: 499px) {   body.is-active {     overflow: hidden;     position: fixed;     height: 100vh;     -webkit-transition: all 0s;     transition: all 0s;   }    .shopify-buy__modal {     width: 100%;     min-height: 100vh;     position: fixed;     overflow-y: auto;   }    .shopify-buy__product {     padding: 15px;     position: absolute;     top: 0;     left: 0;   }    .shopify-buy__product__variant-img {     max-height: 60vh;     margin: 0 auto;     width: auto;     max-width: 100%;   }    .shopify-buy__btn--close {     position: fixed;     top: 0;     right: 0;   } } @-webkit-keyframes slideIn {   from {     opacity: 0;     transform: translateY(-200px);     -webkit-transform: translateY(-200px);   }    to {     opacity: 1;     transform: translateY(0);     -webkit-transform: translateY(0);   } } @keyframes slideIn {   from {     opacity: 0;     transform: translateY(-200px);     -webkit-transform: translateY(-200px);   }    to {     opacity: 1;     transform: translateY(0);     -webkit-transform: translateY(0);   } } @-webkit-keyframes slideOut {   from {     opacity: 1;     transform: translateY(0);     -webkit-transform: translateY(0);   }    to {     opacity: 0;     transform: translateY(-200px);     -webkit-transform: translateY(-200px);   } } @keyframes slideOut {   from {     opacity: 1;     transform: translateY(0);     -webkit-transform: translateY(0);   }    to {     opacity: 0;     transform: translateY(-200px);     -webkit-transform: translateY(-200px);   } } @media (min-width: 500px) {   html,   body.is-active {     height: 100%;   }    .shopify-buy__modal-overlay {     width: 100%;     height: 100%;     position: fixed;     overflow-y: scroll;   }    .shopify-buy__modal {     margin: 100px auto 40px auto;     opacity: 0;     border-radius: 2px;     border: 1px solid rgba(0, 0, 0, 0.72);     -webkit-transform: translateY(-200px);             transform: translateY(-200px);     max-width: 1000px;     -webkit-animation: 200ms slideOut forwards;             animation: 200ms slideOut forwards;   }     .is-active .shopify-buy__modal {       -webkit-animation-name: slideIn;               animation-name: slideIn;     }    .shopify-buy__product {     padding: 30px;   }    .shopify-buy__product-img-wrapper {     height: 100%;     padding-right: 30px;   }    .shopify-buy__product__variant-img {     margin: 0 auto;   }    .shopify-buy__btn--close {     top: -60px;     color: hsl(0, 0%, 100%)   }      .shopify-buy__btn--close:hover {       color: #fff;     } } @media (min-width: 680px) {   .shopify-buy__product {     padding: 45px;   } } ',
    product: 'html, body, h1, h2, h3, h4, h5, p {   padding: 0;   margin: 0; } * {   -webkit-box-sizing: border-box;           box-sizing: border-box; } body, html {   min-height: 100%; } html {   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   font-size: 14px;   line-height: 1.2;   color: #4c4c4c;   text-rendering: optimizeLegibility;   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale; } select {   text-rendering: auto !important; } ul {   list-style: none;   padding-left: 0;   margin: 0; } img {   display: block;   max-width: 100%; } input {   -webkit-appearance: textfield;   margin: 0; } .clearfix:after {     content: "";     display: table;     clear: both;   } .visuallyhidden {   border: 0;   height: 1px;   margin: -1px;   overflow: hidden;   padding: 0;   position: absolute;   width: 1px; } .component-container {   overflow: hidden; } .shopify-buy__type--center {   text-align: center; } .shopify-buy--visually-hidden {   position: absolute !important;   clip: rect(1px, 1px, 1px, 1px);   padding:0 !important;   border:0 !important;   height: 1px !important;   width: 1px !important;   overflow: hidden; } .shopify-buy__quantity-decrement, .shopify-buy__quantity-increment {   color: #4c4c4c;   display: block;   height: 30px;   float: left;   line-height: 16px;   font-family: monospace;   width: 26px;   padding: 0;   border: none;   background: transparent;   -webkit-box-shadow: none;           box-shadow: none;   cursor: pointer;   font-size: 18px;   text-align: center;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   border: 1px solid #767676;   position: relative } .shopify-buy__quantity-decrement svg, .shopify-buy__quantity-increment svg {     width: 14px;     height: 14px;     position: absolute;     top: 50%;     left: 50%;     margin-top: -6px;     margin-left: -7px;     fill: currentColor;   } .shopify-buy__quantity-decrement {   border-radius: 3px 0 0 3px; } .shopify-buy__quantity-increment {   border-radius: 0 3px 3px 0; } .shopify-buy__quantity {   color: black;   width: 45px;   height: 30px;   font-size: 16px;   border: none;   text-align: center;   -webkit-appearance: none;   -moz-appearance: textfield;   display: inline-block;   padding: 0;   border-radius: 0;   border-top: 1px solid #767676;   border-bottom: 1px solid #767676; } input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button {   -webkit-appearance: none;   margin: 0; } .shopify-buy__quantity-container.shopify-buy__quantity-with-btns {   overflow: hidden } .shopify-buy__quantity-container.shopify-buy__quantity-with-btns .shopify-buy__quantity {     border-left: 0;     border-right: 0;     float: left;   } .shopify-buy__btn {   color: #fff;   font-size: 15px;   background-color: #78b657;   padding: 12px 40px;   letter-spacing: .3px;   display: block;   border-radius: 3px;   cursor: pointer;   -webkit-transition: background 200ms ease;   transition: background 200ms ease;   max-width: 100%;   text-overflow: ellipsis;   overflow: hidden;   line-height: 1.2;   border: 0;   -moz-appearance: none;   -webkit-appearance: none } .shopify-buy__btn:hover,   .shopify-buy__btn:focus {     background-color: #5f9d3e;   } .shopify-buy__btn--parent {   background-color: transparent;   border: 0;   padding: 0;   cursor: pointer } .shopify-buy__btn--parent:hover .product__variant-img, .shopify-buy__btn--parent:focus .product__variant-img {       opacity: .7;     } .shopify-buy__btn--cart-tab {   padding: 5px 11px;   border-radius: 3px 0 0 3px;   position: fixed;   right: 0;   top: 50%;   -webkit-transform: translate(100%, -50%);           transform: translate(100%, -50%);   opacity: 0;   min-width: inherit;   width: auto;   height: auto;   z-index: 2147483647 } .shopify-buy__btn--cart-tab.is-active {     -webkit-transform: translateY(-50%);             transform: translateY(-50%);     opacity: 1;   } .shopify-buy__btn__counter {   display: block;   margin: 0 auto 10px auto;   font-size: 18px; } .shopify-buy__icon-cart--side {   height: 20px;   width: 20px; } .shopify-buy__btn[disabled] {   background-color: #999;   pointer-events: none; } .shopify-buy__btn--close {   position: absolute;   right: 9px;   top: 8px;   font-size: 35px;   color: #767676;   border: none;   background-color: transparent;   -webkit-transition: color 100ms ease, -webkit-transform 100ms ease;   transition: color 100ms ease, -webkit-transform 100ms ease;   transition: transform 100ms ease, color 100ms ease;   transition: transform 100ms ease, color 100ms ease, -webkit-transform 100ms ease;   cursor: pointer;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   padding-right: 9px } .shopify-buy__btn--close:hover {     -webkit-transform: scale(1.2);             transform: scale(1.2);     color: hsl(0, 0%, 41.2745098039%);   } .shopify-buy__option-select-wrapper {   border: 1px solid #d3dbe2;   border-radius: 3px;   -webkit-box-sizing: border-box;           box-sizing: border-box;   position: relative;   background: #fff;   overflow: hidden;   vertical-align: bottom; } .shopify-buy__select-icon {   cursor: pointer;   display: block;   fill: #798c9c;   position: absolute;   right: 10px;   top: 50%;   margin-top: -6px;   pointer-events: none;   width: 12px;   height: 12px;   vertical-align: middle; } .shopify-buy__option-select + .shopify-buy__option-select {     margin-top: 7.5px;   } .shopify-buy__option-select__label {   display: block;   font-size: 14px;   margin-top: 15px;   margin-bottom: 5px; } .shopify-buy__btn--parent .shopify-buy__option-select__label {     cursor: pointer;   } .shopify-buy__option-select__select {   font-size: inherit;   padding: 7px 10px;   padding-right: 32px;   border: 0;   width: 100%;   background: transparent;   -webkit-appearance: none;   -moz-appearance: none } .shopify-buy__option-select__select::-ms-expand {     display: none;   } .shopify-buy__btn--parent .shopify-buy__option-select__select {     cursor: pointer;   } .shopify-buy__product {   overflow: hidden;   width: 100%; } .shopify-buy__product__variant-img {   margin: 0 auto 15px auto;   -webkit-transition: opacity 0.3s ease;   transition: opacity 0.3s ease;   opacity: 1 } .shopify-buy__product__variant-img.is-transitioning {     opacity: 0;   } .shopify-buy__is-button {   cursor: pointer; } .shopify-buy__no-image .shopify-buy__product__variant-img {     display: none;   } .shopify-buy__product__title {   font-size: 18px;   line-height: 1.2;   color: #4a4a4a;   margin-bottom: 15px;   font-weight: 700; } .shopify-buy__layout-horizontal .shopify-buy__product__title {     margin-top: 10px;   } .shopify-buy__product__variant-title {   font-size: 18px;   color: #666;   font-weight: 400;   text-align: center;   margin-bottom: 15px; } .shopify-buy__product__price {   margin-bottom: 15px; } .shopify-buy__product-description {   margin-top: 30px;   line-height: 1.65;   color: #4a4a4a } .shopify-buy__product-description p,   .shopify-buy__product-description ul,   .shopify-buy__product-description ol,   .shopify-buy__product-description img {     margin-bottom: 10px   } .shopify-buy__product-description p:last-child, .shopify-buy__product-description ul:last-child, .shopify-buy__product-description ol:last-child, .shopify-buy__product-description img:last-child {       margin-bottom: 0;     } .shopify-buy__product-description a {     color: inherit;   } .shopify-buy__product-description img {     max-width: 100%;   } .shopify-buy__product-description h1 {     font-size: 20px;   } .shopify-buy__product-description h2 {     font-size: 18px;   } .shopify-buy__product-description h3 {     font-size: 17px;   } .shopify-buy__product-description ul,   .shopify-buy__product-description ol {     margin-left: 2em;   } .shopify-buy__product-description ul {     list-style-type: disc;   } .shopify-buy__layout-vertical {   text-align: center; } .shopify-buy__product__actual-price, .shopify-buy__product__compare-price {   color: #4a4a4a;   display: inline-block; } .shopify-buy__product__actual-price {   font-size: 14px; } .shopify-buy__product__compare-price {   font-size: 12px;   text-decoration: line-through;   padding-left: 5px;   opacity: 0.65; } .shopify-buy__product__unit-price {   color: #4a4a4a;   padding-top: 5px;   font-size: 12px;   opacity: 0.8; } .shopify-buy__product__variant-selectors {   text-align: left;   font-size: 14px; } .shopify-buy__layout-vertical .shopify-buy__product__variant-selectors {     width: 100%;     max-width: 280px;     display: inline-block;   } .shopify-buy__quantity {   border-left: 1px solid;   border-right: 1px solid;   border-radius: 3px; } .shopify-buy__quantity, .shopify-buy__quantity-increment, .shopify-buy__quantity-decrement {   border-color: #d3dbe2;   line-height: 1.2;   font-size: 15px;   height: auto;   padding-top: 12px;   padding-bottom: 12px; } .shopify-buy__btn {   display: inline-block; } .shopify-buy__btn-wrapper {   margin-top: 20px; } .shopify-buy__btn.shopify-buy__beside-quantity {   display: inline-block;   vertical-align: top;   border-top-left-radius: 0;   border-bottom-left-radius: 0;   border: 1px solid transparent; } .shopify-buy__btn-and-quantity .shopify-buy__quantity {     border-right: 0;     border-top-right-radius: 0;     border-bottom-right-radius: 0;     background: #fff;   } .shopify-buy__btn-and-quantity .shopify-buy__quantity-container {     display: inline-block;     vertical-align: top;   } .shopify-buy__btn-and-quantity .shopify-buy__btn-wrapper {     display: inline-block;     vertical-align: top;     margin: 0;   } .shopify-buy__cart-item__quantity-container {   margin-top: 20px;   display: inline-block; } .shopify-buy__layout-vertical .shopify-buy__btn,   .shopify-buy__layout-vertical .shopify-buy__quantity-container,   .shopify-buy__layout-horizontal .shopify-buy__btn,   .shopify-buy__layout-horizontal .shopify-buy__quantity-container {     margin: 20px auto 0;   } .shopify-buy__layout-vertical .shopify-buy__btn:first-child, .shopify-buy__layout-horizontal .shopify-buy__btn:first-child {     margin-top: 0;   } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity, .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity {     margin: 20px auto 0   } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity .shopify-buy__btn,     .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity .shopify-buy__btn,     .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity .shopify-buy__quantity-container {       margin: 0 auto;     } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity:first-child, .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity:first-child {     margin: 0 auto;   } .shopify-buy__layout-vertical .shopify-buy__product__variant-img, .shopify-buy__layout-horizontal .shopify-buy__product__variant-img {     max-width: 100%;   } @media (min-width: 500px) {   .shopify-buy__layout-horizontal:not(.no-image) {     text-align: left;     margin-bottom: 0;     margin-left: 0   }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-img-wrapper {       float: left;       width: 40%;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title {       text-align: left;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__price,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-description,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__btn-and-quantity,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__btn-wrapper,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-selectors {       margin-left: calc(40% + 25px);     } } @media (min-width: 680px) {     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-img-wrapper {       float: left;       width: 60%;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__price,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-description,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__btn-and-quantity,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__btn-wrapper,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-selectors {       margin-left: calc(60% + 25px);     } } .no-image .shopify-buy__product-img-wrapper {     display: none;   } @-webkit-keyframes dash {   to {     stroke-dashoffset: 0;   } } @keyframes dash {   to {     stroke-dashoffset: 0;   } } .shopify-buy__carousel {   font-size: 0;   text-align: center;   min-height: 90px;   margin-left: -15px;   margin-top: 15px; } .shopify-buy__carousel-item {   width: calc(16.666% - 15px);   margin-left: 15px;   display: inline-block;   vertical-align: middle;   cursor: pointer;   position: relative;   background-size: cover;   background-position: center;   padding: 0;   border: none } .shopify-buy__carousel-item:nth-child(n+7) {     margin-top: 15px;   } .shopify-buy__carousel-item:before {     content: "";     display: block;     padding-top: 100%;   } .main-image-wrapper {   position: relative; } .carousel-button {   position: absolute;   width: 75px;   top: 0;   height: 100%;   border: none;   font-size: 0;   background-color: transparent;   opacity: 0.4;   cursor: pointer } .carousel-button:hover,   .carousel-button:focus {     opacity: 0.9;     outline: none;   } .carousel-button-arrow {   width: 20px;   display: inline-block;   margin-left: 25px; } .carousel-button--previous {   left: 0;   -webkit-transform: rotate(180deg);           transform: rotate(180deg); } .carousel-button--next {   right: 0; } .shopify-buy__carousel-item--selected {   opacity: 0.4; } ',
    productSet: 'html, body, h1, h2, h3, h4, h5, p {   padding: 0;   margin: 0; } * {   -webkit-box-sizing: border-box;           box-sizing: border-box; } body, html {   min-height: 100%; } html {   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   font-size: 14px;   line-height: 1.2;   color: #4c4c4c;   text-rendering: optimizeLegibility;   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale; } select {   text-rendering: auto !important; } ul {   list-style: none;   padding-left: 0;   margin: 0; } img {   display: block;   max-width: 100%; } input {   -webkit-appearance: textfield;   margin: 0; } .clearfix:after {     content: "";     display: table;     clear: both;   } .visuallyhidden {   border: 0;   height: 1px;   margin: -1px;   overflow: hidden;   padding: 0;   position: absolute;   width: 1px; } .component-container {   overflow: hidden; } .shopify-buy__type--center {   text-align: center; } .shopify-buy--visually-hidden {   position: absolute !important;   clip: rect(1px, 1px, 1px, 1px);   padding:0 !important;   border:0 !important;   height: 1px !important;   width: 1px !important;   overflow: hidden; } .shopify-buy__btn {   color: #fff;   font-size: 15px;   background-color: #78b657;   padding: 12px 40px;   letter-spacing: .3px;   display: block;   border-radius: 3px;   cursor: pointer;   -webkit-transition: background 200ms ease;   transition: background 200ms ease;   max-width: 100%;   text-overflow: ellipsis;   overflow: hidden;   line-height: 1.2;   border: 0;   -moz-appearance: none;   -webkit-appearance: none } .shopify-buy__btn:hover,   .shopify-buy__btn:focus {     background-color: #5f9d3e;   } .shopify-buy__btn--parent {   background-color: transparent;   border: 0;   padding: 0;   cursor: pointer } .shopify-buy__btn--parent:hover .product__variant-img, .shopify-buy__btn--parent:focus .product__variant-img {       opacity: .7;     } .shopify-buy__btn--cart-tab {   padding: 5px 11px;   border-radius: 3px 0 0 3px;   position: fixed;   right: 0;   top: 50%;   -webkit-transform: translate(100%, -50%);           transform: translate(100%, -50%);   opacity: 0;   min-width: inherit;   width: auto;   height: auto;   z-index: 2147483647 } .shopify-buy__btn--cart-tab.is-active {     -webkit-transform: translateY(-50%);             transform: translateY(-50%);     opacity: 1;   } .shopify-buy__btn__counter {   display: block;   margin: 0 auto 10px auto;   font-size: 18px; } .shopify-buy__icon-cart--side {   height: 20px;   width: 20px; } .shopify-buy__btn[disabled] {   background-color: #999;   pointer-events: none; } .shopify-buy__btn--close {   position: absolute;   right: 9px;   top: 8px;   font-size: 35px;   color: #767676;   border: none;   background-color: transparent;   -webkit-transition: color 100ms ease, -webkit-transform 100ms ease;   transition: color 100ms ease, -webkit-transform 100ms ease;   transition: transform 100ms ease, color 100ms ease;   transition: transform 100ms ease, color 100ms ease, -webkit-transform 100ms ease;   cursor: pointer;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   padding-right: 9px } .shopify-buy__btn--close:hover {     -webkit-transform: scale(1.2);             transform: scale(1.2);     color: hsl(0, 0%, 41.2745098039%);   } .shopify-buy__quantity-decrement, .shopify-buy__quantity-increment {   color: #4c4c4c;   display: block;   height: 30px;   float: left;   line-height: 16px;   font-family: monospace;   width: 26px;   padding: 0;   border: none;   background: transparent;   -webkit-box-shadow: none;           box-shadow: none;   cursor: pointer;   font-size: 18px;   text-align: center;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   border: 1px solid #767676;   position: relative } .shopify-buy__quantity-decrement svg, .shopify-buy__quantity-increment svg {     width: 14px;     height: 14px;     position: absolute;     top: 50%;     left: 50%;     margin-top: -6px;     margin-left: -7px;     fill: currentColor;   } .shopify-buy__quantity-decrement {   border-radius: 3px 0 0 3px; } .shopify-buy__quantity-increment {   border-radius: 0 3px 3px 0; } .shopify-buy__quantity {   color: black;   width: 45px;   height: 30px;   font-size: 16px;   border: none;   text-align: center;   -webkit-appearance: none;   -moz-appearance: textfield;   display: inline-block;   padding: 0;   border-radius: 0;   border-top: 1px solid #767676;   border-bottom: 1px solid #767676; } input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button {   -webkit-appearance: none;   margin: 0; } .shopify-buy__quantity-container.shopify-buy__quantity-with-btns {   overflow: hidden } .shopify-buy__quantity-container.shopify-buy__quantity-with-btns .shopify-buy__quantity {     border-left: 0;     border-right: 0;     float: left;   } .shopify-buy__option-select-wrapper {   border: 1px solid #d3dbe2;   border-radius: 3px;   -webkit-box-sizing: border-box;           box-sizing: border-box;   position: relative;   background: #fff;   overflow: hidden;   vertical-align: bottom; } .shopify-buy__select-icon {   cursor: pointer;   display: block;   fill: #798c9c;   position: absolute;   right: 10px;   top: 50%;   margin-top: -6px;   pointer-events: none;   width: 12px;   height: 12px;   vertical-align: middle; } .shopify-buy__option-select + .shopify-buy__option-select {     margin-top: 7.5px;   } .shopify-buy__option-select__label {   display: block;   font-size: 14px;   margin-top: 15px;   margin-bottom: 5px; } .shopify-buy__btn--parent .shopify-buy__option-select__label {     cursor: pointer;   } .shopify-buy__option-select__select {   font-size: inherit;   padding: 7px 10px;   padding-right: 32px;   border: 0;   width: 100%;   background: transparent;   -webkit-appearance: none;   -moz-appearance: none } .shopify-buy__option-select__select::-ms-expand {     display: none;   } .shopify-buy__btn--parent .shopify-buy__option-select__select {     cursor: pointer;   } .shopify-buy__product {   overflow: hidden;   width: 100%; } .shopify-buy__product__variant-img {   margin: 0 auto 15px auto;   -webkit-transition: opacity 0.3s ease;   transition: opacity 0.3s ease;   opacity: 1 } .shopify-buy__product__variant-img.is-transitioning {     opacity: 0;   } .shopify-buy__is-button {   cursor: pointer; } .shopify-buy__no-image .shopify-buy__product__variant-img {     display: none;   } .shopify-buy__product__title {   font-size: 18px;   line-height: 1.2;   color: #4a4a4a;   margin-bottom: 15px;   font-weight: 700; } .shopify-buy__layout-horizontal .shopify-buy__product__title {     margin-top: 10px;   } .shopify-buy__product__variant-title {   font-size: 18px;   color: #666;   font-weight: 400;   text-align: center;   margin-bottom: 15px; } .shopify-buy__product__price {   margin-bottom: 15px; } .shopify-buy__product-description {   margin-top: 30px;   line-height: 1.65;   color: #4a4a4a } .shopify-buy__product-description p,   .shopify-buy__product-description ul,   .shopify-buy__product-description ol,   .shopify-buy__product-description img {     margin-bottom: 10px   } .shopify-buy__product-description p:last-child, .shopify-buy__product-description ul:last-child, .shopify-buy__product-description ol:last-child, .shopify-buy__product-description img:last-child {       margin-bottom: 0;     } .shopify-buy__product-description a {     color: inherit;   } .shopify-buy__product-description img {     max-width: 100%;   } .shopify-buy__product-description h1 {     font-size: 20px;   } .shopify-buy__product-description h2 {     font-size: 18px;   } .shopify-buy__product-description h3 {     font-size: 17px;   } .shopify-buy__product-description ul,   .shopify-buy__product-description ol {     margin-left: 2em;   } .shopify-buy__product-description ul {     list-style-type: disc;   } .shopify-buy__layout-vertical {   text-align: center; } .shopify-buy__product__actual-price, .shopify-buy__product__compare-price {   color: #4a4a4a;   display: inline-block; } .shopify-buy__product__actual-price {   font-size: 14px; } .shopify-buy__product__compare-price {   font-size: 12px;   text-decoration: line-through;   padding-left: 5px;   opacity: 0.65; } .shopify-buy__product__unit-price {   color: #4a4a4a;   padding-top: 5px;   font-size: 12px;   opacity: 0.8; } .shopify-buy__product__variant-selectors {   text-align: left;   font-size: 14px; } .shopify-buy__layout-vertical .shopify-buy__product__variant-selectors {     width: 100%;     max-width: 280px;     display: inline-block;   } .shopify-buy__quantity {   border-left: 1px solid;   border-right: 1px solid;   border-radius: 3px; } .shopify-buy__quantity, .shopify-buy__quantity-increment, .shopify-buy__quantity-decrement {   border-color: #d3dbe2;   line-height: 1.2;   font-size: 15px;   height: auto;   padding-top: 12px;   padding-bottom: 12px; } .shopify-buy__btn {   display: inline-block; } .shopify-buy__btn-wrapper {   margin-top: 20px; } .shopify-buy__btn.shopify-buy__beside-quantity {   display: inline-block;   vertical-align: top;   border-top-left-radius: 0;   border-bottom-left-radius: 0;   border: 1px solid transparent; } .shopify-buy__btn-and-quantity .shopify-buy__quantity {     border-right: 0;     border-top-right-radius: 0;     border-bottom-right-radius: 0;     background: #fff;   } .shopify-buy__btn-and-quantity .shopify-buy__quantity-container {     display: inline-block;     vertical-align: top;   } .shopify-buy__btn-and-quantity .shopify-buy__btn-wrapper {     display: inline-block;     vertical-align: top;     margin: 0;   } .shopify-buy__cart-item__quantity-container {   margin-top: 20px;   display: inline-block; } .shopify-buy__layout-vertical .shopify-buy__btn,   .shopify-buy__layout-vertical .shopify-buy__quantity-container,   .shopify-buy__layout-horizontal .shopify-buy__btn,   .shopify-buy__layout-horizontal .shopify-buy__quantity-container {     margin: 20px auto 0;   } .shopify-buy__layout-vertical .shopify-buy__btn:first-child, .shopify-buy__layout-horizontal .shopify-buy__btn:first-child {     margin-top: 0;   } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity, .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity {     margin: 20px auto 0   } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity .shopify-buy__btn,     .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity .shopify-buy__btn,     .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity .shopify-buy__quantity-container {       margin: 0 auto;     } .shopify-buy__layout-vertical .shopify-buy__btn-and-quantity:first-child, .shopify-buy__layout-horizontal .shopify-buy__btn-and-quantity:first-child {     margin: 0 auto;   } .shopify-buy__layout-vertical .shopify-buy__product__variant-img, .shopify-buy__layout-horizontal .shopify-buy__product__variant-img {     max-width: 100%;   } @media (min-width: 500px) {   .shopify-buy__layout-horizontal:not(.no-image) {     text-align: left;     margin-bottom: 0;     margin-left: 0   }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-img-wrapper {       float: left;       width: 40%;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title {       text-align: left;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__price,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-description,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__btn-and-quantity,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__btn-wrapper,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-selectors {       margin-left: calc(40% + 25px);     } } @media (min-width: 680px) {     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-img-wrapper {       float: left;       width: 60%;     }      .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-title,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__price,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product-description,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__btn-and-quantity,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__btn-wrapper,     .shopify-buy__layout-horizontal:not(.no-image) > .shopify-buy__quantity-container,     .shopify-buy__layout-horizontal:not(.no-image) .shopify-buy__product__variant-selectors {       margin-left: calc(60% + 25px);     } } .no-image .shopify-buy__product-img-wrapper {     display: none;   } @-webkit-keyframes dash {   to {     stroke-dashoffset: 0;   } } @keyframes dash {   to {     stroke-dashoffset: 0;   } } .shopify-buy__carousel {   font-size: 0;   text-align: center;   min-height: 90px;   margin-left: -15px;   margin-top: 15px; } .shopify-buy__carousel-item {   width: calc(16.666% - 15px);   margin-left: 15px;   display: inline-block;   vertical-align: middle;   cursor: pointer;   position: relative;   background-size: cover;   background-position: center;   padding: 0;   border: none } .shopify-buy__carousel-item:nth-child(n+7) {     margin-top: 15px;   } .shopify-buy__carousel-item:before {     content: "";     display: block;     padding-top: 100%;   } .main-image-wrapper {   position: relative; } .carousel-button {   position: absolute;   width: 75px;   top: 0;   height: 100%;   border: none;   font-size: 0;   background-color: transparent;   opacity: 0.4;   cursor: pointer } .carousel-button:hover,   .carousel-button:focus {     opacity: 0.9;     outline: none;   } .carousel-button-arrow {   width: 20px;   display: inline-block;   margin-left: 25px; } .carousel-button--previous {   left: 0;   -webkit-transform: rotate(180deg);           transform: rotate(180deg); } .carousel-button--next {   right: 0; } .shopify-buy__carousel-item--selected {   opacity: 0.4; } .shopify-buy__collection {   overflow: hidden; } .shopify-buy__collection-products {   margin-left: -15px;   text-align: center } @media(min-width: 601px) { .shopify-buy__collection-products {     margin-left: -20px }   } .shopify-buy__product {   min-width: 240px;   width: auto;   margin-left: 15px;   display: inline-block;   vertical-align: top } .shopify-buy__product + .shopify-buy__product {     margin-top: 15px;   } @media(min-width: 601px) { .shopify-buy__product {     width: calc(25% - 20px);     margin-left: 20px;     margin-bottom: 50px }      .shopify-buy__product + .shopify-buy__product {       margin-top: 0;     }   } .shopify-buy__btn.shopify-buy__collection-pagination-button  {   display: none;   margin: 15px auto } .shopify-buy__btn.shopify-buy__collection-pagination-button.is-active {     display: block;   }  ',
    toggle: 'html, body, h1, h2, h3, h4, h5, p {   padding: 0;   margin: 0; } * {   -webkit-box-sizing: border-box;           box-sizing: border-box; } body, html {   min-height: 100%; } html {   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   font-size: 14px;   line-height: 1.2;   color: #4c4c4c;   text-rendering: optimizeLegibility;   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale; } select {   text-rendering: auto !important; } ul {   list-style: none;   padding-left: 0;   margin: 0; } img {   display: block;   max-width: 100%; } input {   -webkit-appearance: textfield;   margin: 0; } .clearfix:after {     content: "";     display: table;     clear: both;   } .visuallyhidden {   border: 0;   height: 1px;   margin: -1px;   overflow: hidden;   padding: 0;   position: absolute;   width: 1px; } .component-container {   overflow: hidden; } .shopify-buy__type--center {   text-align: center; } .shopify-buy--visually-hidden {   position: absolute !important;   clip: rect(1px, 1px, 1px, 1px);   padding:0 !important;   border:0 !important;   height: 1px !important;   width: 1px !important;   overflow: hidden; } .shopify-buy__btn {   color: #fff;   font-size: 15px;   background-color: #78b657;   padding: 12px 40px;   letter-spacing: .3px;   display: block;   border-radius: 3px;   cursor: pointer;   -webkit-transition: background 200ms ease;   transition: background 200ms ease;   max-width: 100%;   text-overflow: ellipsis;   overflow: hidden;   line-height: 1.2;   border: 0;   -moz-appearance: none;   -webkit-appearance: none } .shopify-buy__btn:hover,   .shopify-buy__btn:focus {     background-color: #5f9d3e;   } .shopify-buy__btn--parent {   background-color: transparent;   border: 0;   padding: 0;   cursor: pointer } .shopify-buy__btn--parent:hover .product__variant-img, .shopify-buy__btn--parent:focus .product__variant-img {       opacity: .7;     } .shopify-buy__btn--cart-tab {   padding: 5px 11px;   border-radius: 3px 0 0 3px;   position: fixed;   right: 0;   top: 50%;   -webkit-transform: translate(100%, -50%);           transform: translate(100%, -50%);   opacity: 0;   min-width: inherit;   width: auto;   height: auto;   z-index: 2147483647 } .shopify-buy__btn--cart-tab.is-active {     -webkit-transform: translateY(-50%);             transform: translateY(-50%);     opacity: 1;   } .shopify-buy__btn__counter {   display: block;   margin: 0 auto 10px auto;   font-size: 18px; } .shopify-buy__icon-cart--side {   height: 20px;   width: 20px; } .shopify-buy__btn[disabled] {   background-color: #999;   pointer-events: none; } .shopify-buy__btn--close {   position: absolute;   right: 9px;   top: 8px;   font-size: 35px;   color: #767676;   border: none;   background-color: transparent;   -webkit-transition: color 100ms ease, -webkit-transform 100ms ease;   transition: color 100ms ease, -webkit-transform 100ms ease;   transition: transform 100ms ease, color 100ms ease;   transition: transform 100ms ease, color 100ms ease, -webkit-transform 100ms ease;   cursor: pointer;   font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;   padding-right: 9px } .shopify-buy__btn--close:hover {     -webkit-transform: scale(1.2);             transform: scale(1.2);     color: hsl(0, 0%, 41.2745098039%);   } .shopify-buy__cart-toggle-wrapper {   display: inline-block; } .shopify-buy__cart-toggle {   background-color: #78b657;   color: #fff;   border-radius: 3px 0 0 3px;;   padding: 8px 10px;   text-align: center;   display: inline-block;   min-width: 46px;   margin-right: 0;   cursor: pointer;   -webkit-transition: background 200ms ease;   transition: background 200ms ease } .shopify-buy__cart-toggle:hover {     background-color: #5f9d3e;   } .shopify-buy__cart-toggle__count {   font-size: 18px;   margin-bottom: 10px; } .shopify-buy__icon-cart__group {   fill: #fff; } .is-inline .shopify-buy__icon-cart,   .is-inline .shopify-buy__cart-toggle__title,   .is-inline .shopify-buy__cart-toggle__count {     display: inline-block;     vertical-align: middle;   } .is-inline {    .shopify-buy__icon-cart {     margin-right: 5px;   }    .shopify-buy__cart-toggle__title {     font-size: 16px;     font-weight: normal;   }    .shopify-buy__cart-toggle__count {     margin-left: 21px;     margin-bottom: 0;     position: relative   }      .shopify-buy__cart-toggle__count:before {       content: "";       display: block;       position: absolute;       left: -12px;       height: 100%;       width: 1px;       background-color: #fff;       opacity: 0.3;     } } .is-inline.shopify-buy__cart-toggle {     border-radius: 3px;     padding: 5px 10px;   } '
  },
      delegateEventSplitter = /^(\S+)\s*(.*)$/,
      ESC_KEY = 27,
      View = function () {
    function View(component) {
      this.component = component, this.iframe = null, this.node = this.component.node, this.template = new Template(this.component.options.templates, this.component.options.contents, this.component.options.order), this.eventsBound = !1;
    }

    var _proto = View.prototype;
    return _proto.init = function init() {
      return this.component.node.className += " shopify-buy-frame shopify-buy-frame--".concat(this.component.typeKey), this.iframe || !this.component.options.iframe ? Promise.resolve(this.iframe) : (this.iframe = new iframe(this.component.node, {
        classes: this.component.classes,
        customStyles: this.component.styles,
        stylesheet: styles[this.component.typeKey],
        browserFeatures: this.component.props.browserFeatures,
        googleFonts: this.component.googleFonts,
        name: this.component.name,
        width: "vertical" === this.component.options.layout ? this.component.options.width : null
      }), this.iframe.addClass(this.className), this.iframe.load());
    }, _proto.render = function render() {
      var _this = this;

      this.component._userEvent("beforeRender");

      var html = this.template.render({
        data: this.component.viewData
      }, function (data) {
        return _this.wrapTemplate(data);
      });
      this.wrapper || (this.wrapper = this._createWrapper()), this.updateNode(this.wrapper, html), this.resize(), this.component._userEvent("afterRender");
    }, _proto.delegateEvents = function delegateEvents() {
      var _this2 = this;

      this.eventsBound || (this.closeComponentsOnEsc(), Object.keys(this.component.DOMEvents).forEach(function (key) {
        var _key$match,
            _key$match2 = _slicedToArray(key.match(delegateEventSplitter), 3),
            eventName = _key$match2[1],
            selectorString = _key$match2[2];

        selectorString ? _this2._on(eventName, selectorString, function (evt, target) {
          _this2.component.DOMEvents[key].call(_this2, evt, target);
        }) : _this2.wrapper.addEventListener("click", function (evt) {
          _this2.component.DOMEvents[key].call(_this2, evt);
        });
      }), this.iframe && (this.iframe.el.onload = function () {
        _this2.iframe.el.onload = null, _this2.reloadIframe();
      }), this.eventsBound = !0);
    }, _proto.reloadIframe = function reloadIframe() {
      this.node.removeChild(this.iframe.el), this.wrapper = null, this.iframe = null, this.component.init();
    }, _proto.append = function append(wrapper) {
      this.iframe ? this.document.body.appendChild(wrapper) : this.component.node.appendChild(wrapper);
    }, _proto.addClass = function addClass(className) {
      this.iframe ? this.iframe.addClass(className) : addClassToElement(className, this.component.node);
    }, _proto.removeClass = function removeClass(className) {
      this.iframe ? this.iframe.removeClass(className) : removeClassFromElement(className, this.component.node);
    }, _proto.destroy = function destroy() {
      this.node.parentNode.removeChild(this.node);
    }, _proto.renderChild = function renderChild(className, template) {
      var selector = ".".concat(className.split(" ").join(".")),
          node = this.wrapper.querySelector(selector),
          html = template.render({
        data: this.component.viewData
      });
      this.updateNode(node, html);
    }, _proto.updateNode = function updateNode(node, html) {
      var div = document.createElement("div");
      div.innerHTML = html, morphdom(node, div.firstElementChild);
    }, _proto.wrapTemplate = function wrapTemplate(html) {
      return '<div class="'.concat(this.component.classes[this.component.typeKey][this.component.typeKey], '">').concat(html, "</div>");
    }, _proto.resize = function resize() {
      this.iframe && this.wrapper && (this.shouldResizeX && this._resizeX(), this.shouldResizeY && this._resizeY());
    }, _proto.setFocus = function setFocus() {
      var focusable = this.wrapper.querySelectorAll("a, button, input, select")[0];
      focusable && focusable.focus();
    }, _proto.closeComponentsOnEsc = function closeComponentsOnEsc() {
      var _this3 = this;

      this.iframe && this.document.addEventListener("keydown", function (evt) {
        27 === evt.keyCode && (_this3.component.props.closeModal(), _this3.component.props.closeCart());
      });
    }, _proto.animateRemoveNode = function animateRemoveNode(id) {
      var _this4 = this,
          el = this.document.getElementById(id);

      addClassToElement("is-hidden", el), this.component.props.browserFeatures.animation ? el.addEventListener("animationend", function () {
        el.parentNode && _this4.removeNode(el);
      }) : this.removeNode(el);
    }, _proto.removeNode = function removeNode(el) {
      el.parentNode.removeChild(el), this.render();
    }, _proto._createWrapper = function _createWrapper() {
      var wrapper = document.createElement("div");
      return wrapper.className = this.component.classes[this.component.typeKey][this.component.typeKey], this.append(wrapper), wrapper;
    }, _proto._resizeX = function _resizeX() {
      this.iframe.el.style.width = "".concat(this.document.body.clientWidth, "px");
    }, _proto._resizeY = function _resizeY(value) {
      var newHeight = value || this.outerHeight;
      this.iframe.el.style.height = newHeight;
    }, _proto._on = function _on(eventName, selector, fn) {
      var _this5 = this;

      this.wrapper.addEventListener(eventName, function (evt) {
        var possibleTargets = Array.prototype.slice.call(_this5.wrapper.querySelectorAll(selector)),
            target = evt.target;
        possibleTargets.forEach(function (possibleTarget) {
          for (var el = target; el && el !== _this5.wrapper;) {
            if (el === possibleTarget) return fn.call(possibleTarget, evt, possibleTarget);
            el = el.parentNode;
          }

          return el;
        });
      }, "blur" === eventName);
    }, _createClass(View, [{
      key: "outerHeight",
      get: function get() {
        var style = window.getComputedStyle(this.wrapper, "");
        if (!style) return "".concat(this.wrapper.clientHeight, "px");
        var height = style.getPropertyValue("height");

        if (!height || "0px" === height || "auto" === height) {
          var clientHeight = this.wrapper.clientHeight;
          height = style.getPropertyValue("height") || "".concat(clientHeight, "px");
        }

        return height;
      }
    }, {
      key: "className",
      get: function get() {
        return "";
      }
    }, {
      key: "shouldResizeX",
      get: function get() {
        return !1;
      }
    }, {
      key: "shouldResizeY",
      get: function get() {
        return !1;
      }
    }, {
      key: "document",
      get: function get() {
        return this.iframe ? this.iframe.document : window.document;
      }
    }]), View;
  }(),
      Updater = function () {
    function Updater(component) {
      this.component = component;
    }

    var _proto;

    return Updater.prototype.updateConfig = function updateConfig(config) {
      this.component.config = merge(this.component.config, config.options), this.component.view.template = new Template(this.component.options.templates, this.component.options.contents, this.component.options.order), this.component.view.iframe && this.component.view.iframe.updateStyles(this.component.styles, this.component.googleFonts), this.component.view.render(), this.component.view.resize();
    }, Updater;
  }();

  function moneyFormat() {
    var format = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "${{amount}}";
    return decodeURIComponent(format);
  }

  var Component = function () {
    function Component(config, props) {
      this.id = config.id, this.storefrontId = config.storefrontId, this.handle = config.handle, this.node = config.node, this.globalConfig = {
        debug: config.debug,
        moneyFormat: moneyFormat(config.moneyFormat),
        cartNode: config.cartNode,
        modalNode: config.modalNode,
        toggles: config.toggles
      }, this.config = merge({}, defaults, config.options || {}), this.props = props, this.model = {}, this.updater = new Updater(this), this.view = new View(this);
    }

    var _proto = Component.prototype;
    return _proto.init = function init(data) {
      var _this = this;

      return this._userEvent("beforeInit"), this.view.init().then(function () {
        return _this.setupModel(data);
      }).then(function (model) {
        return _this.model = model, _this.view.render(), _this.view.delegateEvents(), _this._userEvent("afterInit"), _this;
      }).catch(function (err) {
        throw err.message.indexOf("Not Found") > -1 && logNotFound(_this), err;
      });
    }, _proto.setupModel = function setupModel(data) {
      return data ? Promise.resolve(data) : this.fetchData();
    }, _proto.updateConfig = function updateConfig(config) {
      return this.updater.updateConfig(config);
    }, _proto.destroy = function destroy() {
      this.view.destroy();
    }, _proto._userEvent = function _userEvent(methodName) {
      this.globalConfig.debug && logger.info("EVENT: ".concat(methodName, " (").concat(this.typeKey, ")")), isFunction(this.events[methodName]) && this.events[methodName].call(this, this);
    }, _createClass(Component, [{
      key: "name",
      get: function get() {
        var uniqueHandle = "";
        return this.id ? uniqueHandle = "-".concat(this.id) : this.handle && (uniqueHandle = "-".concat(this.handle)), "frame-".concat(this.typeKey).concat(uniqueHandle);
      }
    }, {
      key: "options",
      get: function get() {
        return merge({}, this.config[this.typeKey]);
      }
    }, {
      key: "DOMEvents",
      get: function get() {
        return this.options.DOMEvents || {};
      }
    }, {
      key: "events",
      get: function get() {
        return this.options.events || {};
      }
    }, {
      key: "classes",
      get: function get() {
        var _this2 = this;

        return this.options.manifest.filter(function (component) {
          return _this2.config[component].classes;
        }).reduce(function (hash, component) {
          return hash[component] = _this2.config[component].classes, hash;
        }, {});
      }
    }, {
      key: "selectors",
      get: function get() {
        var _this3 = this;

        return this.options.manifest.filter(function (component) {
          return _this3.config[component].classes;
        }).reduce(function (hash, component) {
          return hash[component] = Object.keys(_this3.config[component].classes).reduce(function (classes, classKey) {
            return classes[classKey] = ".".concat(_this3.classes[component][classKey].split(" ").join(".")), classes;
          }, {}), hash;
        }, {});
      }
    }, {
      key: "styles",
      get: function get() {
        var _this4 = this;

        return this.options.manifest.filter(function (component) {
          return _this4.config[component].styles;
        }).reduce(function (hash, component) {
          return hash[component] = _this4.config[component].styles, hash;
        }, {});
      }
    }, {
      key: "googleFonts",
      get: function get() {
        var _this5 = this;

        return this.options.manifest.filter(function (component) {
          return _this5.config[component].googleFonts;
        }).reduce(function (fonts, component) {
          return fonts.concat(_this5.config[component].googleFonts);
        }, []);
      }
    }, {
      key: "viewData",
      get: function get() {
        return merge(this.model, this.options.viewData, {
          classes: this.classes,
          text: this.options.text
        });
      }
    }, {
      key: "morphCallbacks",
      get: function get() {
        return {
          onBeforeElUpdated: function onBeforeElUpdated(fromEl, toEl) {
            return "IMG" !== fromEl.tagName || fromEl.src !== toEl.getAttribute("data-src");
          }
        };
      }
    }]), Component;
  }(),
      CheckoutNavigator = function () {
    function CheckoutNavigator(config) {
      this.config = config;
    }

    var _proto;

    return CheckoutNavigator.prototype.open = function open(url) {
      this.config.cart.popup ? window.open(url, "checkout", this.params) : window.open(url, "checkout");
    }, _createClass(CheckoutNavigator, [{
      key: "params",
      get: function get() {
        var config = Object.assign({}, this.config.window, {
          left: window.outerWidth / 2 - 200,
          top: window.outerHeight / 2 - 300
        });
        return Object.keys(config).reduce(function (acc, key) {
          return "".concat(acc).concat(key, "=").concat(config[key], ",");
        }, "");
      }
    }]), CheckoutNavigator;
  }(),
      windowUtils_location = function location() {
    return window.location.href;
  },
      placeholderRegex = /\{\{\s*(\w+)\s*\}\}/,
      thousandsRegex = /(\d)(?=(\d\d\d)+(?!\d))/g;

  function formatWithDelimiters(number) {
    var precision = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
        thousands = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ",",
        decimal = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : ".";
    if (isNaN(number) || null == number) return 0;
    var fixedNumber = (number / 100).toFixed(precision),
        parts = fixedNumber.split("."),
        dollars = parts[0].replace(thousandsRegex, "$1".concat(thousands)),
        cents = parts[1] ? decimal + parts[1] : "";
    return dollars + cents;
  }

  function formatMoney(amount, format) {
    var cents = 100 * amount;
    "string" == typeof cents && (cents = cents.replace(".", ""));
    var value = "",
        formatString = format || "${{amount}}",
        placeholderMatch = formatString.match(placeholderRegex);

    switch (placeholderMatch || (placeholderMatch = (formatString = "${{amount}}").match(placeholderRegex)), placeholderMatch[1]) {
      case "amount":
        value = formatWithDelimiters(cents);
        break;

      case "amount_no_decimals":
        value = formatWithDelimiters(cents, 0);
        break;

      case "amount_with_comma_separator":
        value = formatWithDelimiters(cents, 2, ".", ",");
        break;

      case "amount_no_decimals_with_comma_separator":
        value = formatWithDelimiters(cents, 0, ".", ",");
        break;

      case "amount_no_decimals_with_space_separator":
        value = formatWithDelimiters(cents, 0, " ");
        break;

      default:
        value = formatWithDelimiters(cents);
    }

    return formatString.replace(placeholderRegex, value);
  }

  function normalizeId(type, databaseKey) {
    return btoa("gid://shopify/".concat(type, "/").concat(databaseKey));
  }

  function getNormalizedIdFromConfig(type, config, databaseKey, storefrontKey) {
    var denormalizedValue = config[databaseKey],
        normalizedValue = config[storefrontKey];
    return normalizedValue || (denormalizedValue ? Array.isArray(denormalizedValue) ? denormalizedValue.map(function (value) {
      return normalizeId(type, value);
    }) : normalizeId(type, denormalizedValue) : null);
  }

  function normalizeConfig(config) {
    var baseResourceType = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "Product";
    return (config.id || config.storefrontId) && (config.storefrontId = getNormalizedIdFromConfig(baseResourceType, config, "id", "storefrontId")), (config.variantId || config.storefrontVariantId) && (config.storefrontVariantId = getNormalizedIdFromConfig("ProductVariant", config, "variantId", "storefrontVariantId")), config;
  }

  function detectCSSFeature(featurename) {
    var feature = !1,
        domPrefixes = "Webkit Moz ms O".split(" "),
        elm = document.createElement("div"),
        featurenameCapital = null;

    if (featurename = featurename.toLowerCase(), void 0 !== elm.style[featurename] && (feature = !0), !1 === feature) {
      featurenameCapital = featurename.charAt(0).toUpperCase() + featurename.substr(1);

      for (var i = 0; i < domPrefixes.length; i++) {
        if (void 0 !== elm.style[domPrefixes[i] + featurenameCapital]) {
          feature = !0;
          break;
        }
      }
    }

    return feature;
  }

  var supportsAnimations,
      supportsTransitions = function supportsTransitions() {
    return detectCSSFeature("transition");
  },
      supportsTransforms = function supportsTransforms() {
    return detectCSSFeature("transform");
  },
      supportsWindowOpen = function supportsWindowOpen() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera,
        unSupportedApps;
    return -1 === userAgent.indexOf("Mac OS X") || !["Instagram", "Pinterest/iOS", "FBAN/FBIOS", "FBAN/MessengerForiOS"].some(function (appName) {
      return userAgent.indexOf(appName) > -1;
    });
  },
      browserFeatures = {
    animation: function supportsAnimations() {
      return detectCSSFeature("animation");
    }(),
    transition: supportsTransitions(),
    transform: supportsTransforms(),
    windowOpen: supportsWindowOpen
  };

  function getUnitString(unitEnum) {
    return "L" === unitEnum ? "L" : "M3" === unitEnum ? "mÂ³" : "M2" === unitEnum ? "mÂ²" : unitEnum.toLowerCase();
  }

  function getUnitPriceBaseUnit(referenceValue, referenceUnit) {
    var unitString = getUnitString(referenceUnit);
    return 1 === referenceValue ? "".concat(unitString) : "".concat(referenceValue).concat(unitString);
  }

  var ProductView = function (_View) {
    function ProductView() {
      return _View.apply(this, arguments) || this;
    }

    _inheritsLoose(ProductView, _View);

    var _proto = ProductView.prototype;
    return _proto.resizeOnLoad = function resizeOnLoad() {
      var _this = this,
          productContents = this.component.config.product.contents;

      if (productContents.img || productContents.imgWithCarousel) {
        var image = this.wrapper.getElementsByClassName(this.component.classes.product.img)[0];
        image && image.addEventListener("load", function () {
          _this.resize();
        });
      }
    }, _proto.render = function render() {
      _View.prototype.render.call(this), this.resizeOnLoad();
    }, _proto.wrapTemplate = function wrapTemplate(html) {
      var ariaLabel;

      switch (this.component.options.buttonDestination) {
        case "modal":
          ariaLabel = "View details";
          break;

        case "cart":
          ariaLabel = "Add to cart";
          break;

        default:
          ariaLabel = "Buy Now";
      }

      return this.component.isButton ? '<div class="'.concat(this.wrapperClass, " ").concat(this.component.classes.product.product, '"><div tabindex="0" role="button" aria-label="').concat(ariaLabel, '" class="').concat(this.component.classes.product.blockButton, '">').concat(html, "</div></div>") : '<div class="'.concat(this.wrapperClass, " ").concat(this.component.classes.product.product, '">').concat(html, "</div>");
    }, _createClass(ProductView, [{
      key: "className",
      get: function get() {
        return this.component.classes.product[this.component.options.layout];
      }
    }, {
      key: "shouldResizeX",
      get: function get() {
        return !1;
      }
    }, {
      key: "shouldResizeY",
      get: function get() {
        return !0;
      }
    }, {
      key: "outerHeight",
      get: function get() {
        return "".concat(this.wrapper.clientHeight, "px");
      }
    }, {
      key: "wrapperClass",
      get: function get() {
        return "".concat(this.component.currentImage ? "has-image" : "no-image", " ").concat(this.component.classes.product[this.component.options.layout]);
      }
    }]), ProductView;
  }(View),
      MAX_WIDTH = "950px",
      ProductUpdater = function (_Updater) {
    function ProductUpdater() {
      return _Updater.apply(this, arguments) || this;
    }

    var _proto;

    return _inheritsLoose(ProductUpdater, _Updater), ProductUpdater.prototype.updateConfig = function updateConfig(config) {
      var _this = this,
          newConfig = normalizeConfig(config);

      if (newConfig.storefrontId || newConfig.storefrontVariantId) return this.component.storefrontId = newConfig.storefrontId || this.component.storefrontId, this.component.defaultStorefrontVariantId = newConfig.storefrontVariantId || this.component.defaultStorefrontVariantId, void this.component.init();
      var layout = this.component.options.layout;
      config.options && config.options.product && (config.options.product.layout && (layout = config.options.product.layout), this.component.view.iframe && ("vertical" === layout && "950px" === this.component.view.iframe.width && this.component.view.iframe.setWidth(this.component.options.width), "horizontal" === layout && this.component.view.iframe.width && "950px" !== this.component.view.iframe.width && this.component.view.iframe.setWidth("950px"), config.options.product.width && "vertical" === layout && this.component.view.iframe.setWidth(config.options.product.width), config.options.product.layout && (this.component.view.iframe.el.style.width = "100%"))), this.component.view.iframe && (this.component.view.iframe.removeClass(this.component.classes.product.vertical), this.component.view.iframe.removeClass(this.component.classes.product.horizontal), this.component.view.iframe.addClass(this.component.classes.product[layout]), this.component.view.resize()), _toConsumableArray(this.component.view.wrapper.querySelectorAll("img")).forEach(function (img) {
        img.addEventListener("load", function () {
          _this.component.view.resize();
        });
      }), _Updater.prototype.updateConfig.call(this, config), this.component.cart && this.component.cart.updateConfig(config), this.component.modal && this.component.modal.updateConfig(Object.assign({}, config, {
        options: Object.assign({}, this.component.config, {
          product: this.component.modalProductConfig
        })
      }));
    }, ProductUpdater;
  }(Updater);

  function isFunction$1(obj) {
    return Boolean(obj && obj.constructor && obj.call && obj.apply);
  }

  function isPseudoSelector$1(key) {
    return ":" === key.charAt(0);
  }

  function isMedia$1(key) {
    return "@" === key.charAt(0);
  }

  var ENTER_KEY = 13,
      propertiesWhitelist = ["background", "background-color", "border", "border-radius", "color", "border-color", "border-width", "border-style", "transition", "text-transform", "text-shadow", "box-shadow", "font-size", "font-family"];

  function whitelistedProperties(selectorStyles) {
    return Object.keys(selectorStyles).reduce(function (filteredStyles, propertyName) {
      return isPseudoSelector$1(propertyName) || isMedia$1(propertyName) ? (filteredStyles[propertyName] = whitelistedProperties(selectorStyles[propertyName]), filteredStyles) : (propertiesWhitelist.indexOf(propertyName) > -1 && (filteredStyles[propertyName] = selectorStyles[propertyName]), filteredStyles);
    }, {});
  }

  var Product$1 = function (_Component) {
    function Product(config, props) {
      var _this;

      return config = normalizeConfig(config), (_this = _Component.call(this, config, props) || this).typeKey = "product", _this.defaultStorefrontVariantId = config.storefrontVariantId, _this.cachedImage = null, _this.childTemplate = new Template(_this.config.option.templates, _this.config.option.contents, _this.config.option.order), _this.cart = null, _this.modal = null, _this.imgStyle = "", _this.selectedQuantity = 1, _this.selectedVariant = {}, _this.selectedOptions = {}, _this.selectedImage = null, _this.updater = new ProductUpdater(_assertThisInitialized(_this)), _this.view = new ProductView(_assertThisInitialized(_this)), _this;
    }

    _inheritsLoose(Product, _Component);

    var _proto = Product.prototype;
    return _proto.stopPropagation = function stopPropagation(evt) {
      this.isButton && evt.stopImmediatePropagation();
    }, _proto.optionValueCanBeSelected = function optionValueCanBeSelected(selections, name, value) {
      var variants = this.variantArray,
          selectableValues = Object.assign({}, selections, _defineProperty({}, name, value)),
          satisfactoryVariants = variants.filter(function (variant) {
        var matchingOptions;
        return Object.keys(selectableValues).filter(function (key) {
          return variant.optionValues[key] === selectableValues[key];
        }).length === Object.keys(selectableValues).length;
      }),
          variantSelectable = !1;
      return conso, variantSelectable = satisfactoryVariants.reduce(function (variantExists, variant) {
        var variantAvailable = variant.available;
        return variantExists || variantAvailable;
      }, !1);
    }, _proto.openOnlineStore = function openOnlineStore() {
      this._userEvent("openOnlineStore"), window.open(this.onlineStoreURL);
    }, _proto.init = function init(data) {
      var _this2 = this;

      return this.createCart().then(function (cart) {
        return _this2.cart = cart, _Component.prototype.init.call(_this2, data).then(function (model) {
          return model && _this2.view.render(), model;
        });
      });
    }, _proto.createCart = function createCart() {
      var cartConfig = Object.assign({}, this.globalConfig, {
        node: this.globalConfig.cartNode,
        options: this.config
      });
      return this.props.createCart(cartConfig);
    }, _proto.setupModel = function setupModel(data) {
      var _this3 = this;

      return _Component.prototype.setupModel.call(this, data).then(function (model) {
        return _this3.setDefaultVariant(model);
      });
    }, _proto.sdkFetch = function sdkFetch() {
      return this.storefrontId && Array.isArray(this.storefrontId) && this.storefrontId[0] ? this.props.client.product.fetch(this.storefrontId[0]) : this.storefrontId && !Array.isArray(this.storefrontId) ? this.props.client.product.fetch(this.storefrontId) : this.handle ? this.props.client.product.fetchByHandle(this.handle).then(function (product) {
        return product;
      }) : Promise.reject(new Error("SDK Fetch Failed"));
    }, _proto.fetchData = function fetchData() {
      var _this4 = this;

      return this.sdkFetch().then(function (model) {
        if (model) return _this4.storefrontId = model.id, _this4.handle = model.handle, model;
        throw _this4.node.style.display = "none", new Error("Not Found");
      });
    }, _proto.onButtonClick = function onButtonClick(evt, target) {
      if (evt.stopPropagation(), isFunction$1(this.options.buttonDestination)) this.options.buttonDestination(this);else if ("cart" === this.options.buttonDestination) this.props.closeModal(), this._userEvent("addVariantToCart"), this.props.tracker.trackMethod(this.cart.addVariantToCart.bind(this), "Update Cart", this.selectedVariantTrackingInfo)(this.selectedVariant, this.selectedQuantity), this.iframe && this.props.setActiveEl(target);else if ("modal" === this.options.buttonDestination) this.props.setActiveEl(target), this.props.tracker.track("Open modal", this.productTrackingInfo), this.openModal();else if ("onlineStore" === this.options.buttonDestination) this.openOnlineStore();else {
        var checkoutWindow;

        if (this._userEvent("openCheckout"), this.props.tracker.track("Direct Checkout", {}), this.config.cart.popup && browserFeatures.windowOpen()) {
          var params = new CheckoutNavigator(this.config).params;
          checkoutWindow = window.open("", "checkout", params);
        } else checkoutWindow = window;

        var input = {
          lineItems: [{
            variantId: this.selectedVariant.id,
            quantity: this.selectedQuantity
          }]
        };
        this.props.client.checkout.create(input).then(function (checkout) {
          checkoutWindow.location = checkout.webUrl;
        });
      }
    }, _proto.onBlockButtonKeyup = function onBlockButtonKeyup(evt, target) {
      13 === evt.keyCode && this.onButtonClick(evt, target);
    }, _proto.onOptionSelect = function onOptionSelect(evt) {
      var target = evt.target,
          value = target.options[target.selectedIndex].value,
          name = target.getAttribute("name");
      this.updateVariant(name, value);
    }, _proto.onQuantityBlur = function onQuantityBlur(evt, target) {
      this.updateQuantity(function () {
        return parseInt(target.value, 10);
      });
    }, _proto.onQuantityIncrement = function onQuantityIncrement(qty) {
      this.updateQuantity(function (prevQty) {
        return prevQty + qty;
      });
    }, _proto.closeCartOnBgClick = function closeCartOnBgClick() {
      this.cart && this.cart.isVisible && this.cart.close();
    }, _proto.onCarouselItemClick = function onCarouselItemClick(evt, target) {
      evt.preventDefault();
      var selectedImageId = target.getAttribute("data-image-id"),
          imageList,
          foundImage = this.model.images.find(function (image) {
        return image.id === selectedImageId;
      });
      foundImage && (this.selectedImage = foundImage, this.cachedImage = foundImage), this.view.render();
    }, _proto.nextIndex = function nextIndex(currentIndex, offset) {
      var nextIndex = currentIndex + offset;
      return nextIndex >= this.model.images.length ? 0 : nextIndex < 0 ? this.model.images.length - 1 : nextIndex;
    }, _proto.onCarouselChange = function onCarouselChange(offset) {
      var _this5 = this,
          imageList = this.model.images,
          currentImage = imageList.filter(function (image) {
        return image.id === _this5.currentImage.id;
      })[0],
          currentImageIndex = imageList.indexOf(currentImage);

      this.selectedImage = imageList[this.nextIndex(currentImageIndex, offset)], this.cachedImage = this.selectedImage, this.view.render();
    }, _proto.openModal = function openModal() {
      if (!this.modal) {
        var modalConfig = Object.assign({}, this.globalConfig, {
          node: this.globalConfig.modalNode,
          options: Object.assign({}, this.config, {
            product: this.modalProductConfig,
            modal: Object.assign({}, this.config.modal, {
              googleFonts: this.options.googleFonts
            })
          })
        });
        this.modal = this.props.createModal(modalConfig, this.props);
      }

      return this._userEvent("openModal"), this.modal.init(this.model);
    }, _proto.updateQuantity = function updateQuantity(fn) {
      var quantity = fn(this.selectedQuantity);
      quantity < 0 && (quantity = 0), this.selectedQuantity = quantity, this._userEvent("updateQuantity"), this.view.render();
    }, _proto.updateVariant = function updateVariant(optionName, value) {
      var _this6 = this,
          updatedOption = this.model.options.find(function (option) {
        return option.name === optionName;
      });

      return updatedOption && (this.selectedOptions[updatedOption.name] = value, this.selectedVariant = this.props.client.product.helpers.variantForOptions(this.model, this.selectedOptions)), this.variantExists ? (this.cachedImage = this.selectedVariant.image, this.selectedVariant.image ? this.selectedImage = null : this.selectedImage = this.model.images[0]) : this.selectedImage = this.model.images.find(function (image) {
        return image.id === _this6.cachedImage.id;
      }), this.view.render(), this._userEvent("updateVariant"), updatedOption;
    }, _proto.setDefaultVariant = function setDefaultVariant(model) {
      var _this7 = this,
          selectedVariant;

      return this.defaultStorefrontVariantId ? selectedVariant = model.variants.find(function (variant) {
        return variant.id === _this7.defaultStorefrontVariantId;
      }) : (this.defaultStorefrontVariantId = model.variants[0].id, selectedVariant = model.variants[0], this.selectedImage = model.images[0]), selectedVariant || (selectedVariant = model.variants[0]), this.selectedOptions = selectedVariant.selectedOptions.reduce(function (acc, option) {
        return acc[option.name] = option.value, acc;
      }, {}), this.selectedVariant = selectedVariant, model;
    }, _proto.imageAltText = function imageAltText(altText) {
      return altText || this.model.title;
    }, _createClass(Product, [{
      key: "shouldUpdateImage",
      get: function get() {
        return !this.cachedImage || this.image && this.image.src !== this.cachedImage;
      }
    }, {
      key: "currentImage",
      get: function get() {
        return this.shouldUpdateImage && (this.cachedImage = this.image), this.cachedImage;
      }
    }, {
      key: "image",
      get: function get() {
        var DEFAULT_IMAGE_SIZE = 480,
            MODAL_IMAGE_SIZE = 550,
            imageSize,
            id,
            src,
            srcLarge,
            srcOriginal,
            altText;
        if (!this.selectedVariant && !this.options.contents.imgWithCarousel) return null;
        var imageOptions = {
          maxWidth: imageSize = this.options.width && "%" === this.options.width.slice(-1) ? 1e3 : parseInt(this.options.width, 10) || 480,
          maxHeight: 1.5 * imageSize
        },
            imageOptionsLarge = {
          maxWidth: 550,
          maxHeight: 825
        };
        return this.selectedImage ? (id = this.selectedImage.id, src = this.props.client.image.helpers.imageForSize(this.selectedImage, imageOptions), srcLarge = this.props.client.image.helpers.imageForSize(this.selectedImage, imageOptionsLarge), srcOriginal = this.selectedImage.src, altText = this.imageAltText(this.selectedImage.altText)) : null == this.selectedVariant.image && null == this.model.images[0] ? (id = null, src = "", srcLarge = "", srcOriginal = "", altText = "") : null == this.selectedVariant.image ? (id = this.model.images[0].id, src = this.model.images[0].src, srcLarge = this.props.client.image.helpers.imageForSize(this.model.images[0], imageOptionsLarge), srcOriginal = this.model.images[0].src, altText = this.imageAltText(this.model.images[0].altText)) : (id = this.selectedVariant.image.id, src = this.props.client.image.helpers.imageForSize(this.selectedVariant.image, imageOptions), srcLarge = this.props.client.image.helpers.imageForSize(this.selectedVariant.image, imageOptionsLarge), srcOriginal = this.selectedVariant.image.src, altText = this.imageAltText(this.selectedVariant.image.altText)), {
          id: id,
          src: src,
          srcLarge: srcLarge,
          srcOriginal: srcOriginal,
          altText: altText
        };
      }
    }, {
      key: "formattedPrice",
      get: function get() {
        return this.selectedVariant ? formatMoney(this.selectedVariant.priceV2.amount, this.globalConfig.moneyFormat) : "";
      }
    }, {
      key: "formattedCompareAtPrice",
      get: function get() {
        return this.selectedVariant && this.selectedVariant.compareAtPriceV2 ? formatMoney(this.selectedVariant.compareAtPriceV2.amount, this.globalConfig.moneyFormat) : "";
      }
    }, {
      key: "showUnitPrice",
      get: function get() {
        return !!(this.selectedVariant && this.selectedVariant.unitPrice && this.options.contents.unitPrice);
      }
    }, {
      key: "formattedUnitPrice",
      get: function get() {
        return this.showUnitPrice ? formatMoney(this.selectedVariant.unitPrice.amount, this.globalConfig.moneyFormat) : "";
      }
    }, {
      key: "formattedUnitPriceBaseUnit",
      get: function get() {
        if (!this.showUnitPrice) return "";
        var unitPriceMeasurement = this.selectedVariant.unitPriceMeasurement;
        return getUnitPriceBaseUnit(unitPriceMeasurement.referenceValue, unitPriceMeasurement.referenceUnit);
      }
    }, {
      key: "viewData",
      get: function get() {
        return Object.assign({}, this.model, this.options.viewData, {
          classes: this.classes,
          contents: this.options.contents,
          text: this.options.text,
          optionsHtml: this.optionsHtml,
          decoratedOptions: this.decoratedOptions,
          currentImage: this.currentImage,
          buttonClass: this.buttonClass,
          hasVariants: this.hasVariants,
          buttonDisabled: !this.buttonEnabled,
          selectedVariant: this.selectedVariant,
          selectedQuantity: this.selectedQuantity,
          buttonText: this.buttonText,
          imgStyle: this.imgStyle,
          quantityClass: this.quantityClass,
          priceClass: this.priceClass,
          formattedPrice: this.formattedPrice,
          formattedCompareAtPrice: this.formattedCompareAtPrice,
          showUnitPrice: this.showUnitPrice,
          formattedUnitPrice: this.formattedUnitPrice,
          formattedUnitPriceBaseUnit: this.formattedUnitPriceBaseUnit,
          carouselIndex: 0,
          carouselImages: this.carouselImages
        });
      }
    }, {
      key: "carouselImages",
      get: function get() {
        var _this8 = this;

        return this.model.images.map(function (image) {
          return {
            id: image.id,
            src: image.src,
            carouselSrc: _this8.props.client.image.helpers.imageForSize(image, {
              maxWidth: 100,
              maxHeight: 100
            }),
            isSelected: image.id === _this8.currentImage.id,
            altText: _this8.imageAltText(image.altText)
          };
        });
      }
    }, {
      key: "buttonClass",
      get: function get() {
        var disabledClass = this.buttonEnabled ? "" : this.classes.product.disabled,
            quantityClass = this.options.contents.buttonWithQuantity ? this.classes.product.buttonBesideQty : "";
        return "".concat(disabledClass, " ").concat(quantityClass);
      }
    }, {
      key: "quantityClass",
      get: function get() {
        return this.options.contents.quantityIncrement || this.options.contents.quantityDecrement ? this.classes.product.quantityWithButtons : "";
      }
    }, {
      key: "buttonText",
      get: function get() {
        return "modal" === this.options.buttonDestination ? this.options.text.button : this.variantExists ? this.variantInStock ? this.options.text.button : this.options.text.outOfStock : this.options.text.unavailable;
      }
    }, {
      key: "buttonEnabled",
      get: function get() {
        return "modal" === this.options.buttonDestination || this.buttonActionAvailable && this.variantExists && this.variantInStock;
      }
    }, {
      key: "variantExists",
      get: function get() {
        var _this9 = this;

        return this.model.variants.some(function (variant) {
          return !!_this9.selectedVariant && variant.id === _this9.selectedVariant.id;
        });
      }
    }, {
      key: "variantInStock",
      get: function get() {
        return this.variantExists && this.selectedVariant.available;
      }
    }, {
      key: "hasVariants",
      get: function get() {
        return this.model.variants.length > 1;
      }
    }, {
      key: "requiresCart",
      get: function get() {
        return "cart" === this.options.buttonDestination;
      }
    }, {
      key: "buttonActionAvailable",
      get: function get() {
        return !this.requiresCart || Boolean(this.cart);
      }
    }, {
      key: "hasQuantity",
      get: function get() {
        return this.options.contents.quantityInput;
      }
    }, {
      key: "priceClass",
      get: function get() {
        return this.selectedVariant && this.selectedVariant.compareAtPriceV2 ? this.classes.product.loweredPrice : "";
      }
    }, {
      key: "isButton",
      get: function get() {
        return this.options.isButton && !(this.options.contents.button || this.options.contents.buttonWithQuantity);
      }
    }, {
      key: "DOMEvents",
      get: function get() {
        var _merge;

        return merge({}, (_defineProperty(_merge = {
          click: this.closeCartOnBgClick.bind(this)
        }, "click ".concat(this.selectors.option.select), this.stopPropagation.bind(this)), _defineProperty(_merge, "focus ".concat(this.selectors.option.select), this.stopPropagation.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.option.wrapper), this.stopPropagation.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.product.quantityInput), this.stopPropagation.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.product.quantityButton), this.stopPropagation.bind(this)), _defineProperty(_merge, "change ".concat(this.selectors.option.select), this.onOptionSelect.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.product.button), this.onButtonClick.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.product.blockButton), this.onButtonClick.bind(this)), _defineProperty(_merge, "keyup ".concat(this.selectors.product.blockButton), this.onBlockButtonKeyup.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.product.quantityIncrement), this.onQuantityIncrement.bind(this, 1)), _defineProperty(_merge, "click ".concat(this.selectors.product.quantityDecrement), this.onQuantityIncrement.bind(this, -1)), _defineProperty(_merge, "blur ".concat(this.selectors.product.quantityInput), this.onQuantityBlur.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.product.carouselItem), this.onCarouselItemClick.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.product.carouselNext), this.onCarouselChange.bind(this, 1)), _defineProperty(_merge, "click ".concat(this.selectors.product.carouselPrevious), this.onCarouselChange.bind(this, -1)), _merge), this.options.DOMEvents);
      }
    }, {
      key: "optionsHtml",
      get: function get() {
        var _this10 = this;

        return this.options.contents.options ? this.decoratedOptions.reduce(function (acc, option) {
          var data = merge(option, _this10.options.viewData);
          return data.classes = _this10.classes, data.onlyOption = 1 === _this10.model.options.length, acc + _this10.childTemplate.render({
            data: data
          });
        }, "") : "";
      }
    }, {
      key: "variantArray",
      get: function get() {
        return delete this.variantArrayMemo, this.variantArrayMemo = this.model.variants.map(function (variant) {
          var betterVariant = {
            id: variant.id,
            available: variant.available,
            optionValues: {}
          };
          return variant.optionValues.forEach(function (optionValue) {
            betterVariant.optionValues[optionValue.name] = optionValue.value;
          }), betterVariant;
        }), this.variantArrayMemo;
      }
    }, {
      key: "decoratedOptions",
      get: function get() {
        var _this11 = this;

        return this.model.options.map(function (option) {
          return {
            name: option.name,
            values: option.values.map(function (value) {
              return {
                name: value.value,
                selected: _this11.selectedOptions[option.name] === value.value
              };
            })
          };
        });
      }
    }, {
      key: "trackingInfo",
      get: function get() {
        var variant = this.selectedVariant || this.model.variants[0],
            contents = this.options.contents,
            contentString = Object.keys(contents).filter(function (key) {
          return contents[key];
        }).toString();
        return {
          id: this.model.id,
          name: this.model.title,
          variantId: variant.id,
          variantName: variant.title,
          price: variant.priceV2.amount,
          destination: this.options.buttonDestination,
          layout: this.options.layout,
          contents: contentString,
          checkoutPopup: this.config.cart.popup,
          sku: null
        };
      }
    }, {
      key: "selectedVariantTrackingInfo",
      get: function get() {
        var variant = this.selectedVariant;
        return {
          id: variant.id,
          name: variant.title,
          productId: this.model.id,
          productName: this.model.title,
          quantity: this.selectedQuantity,
          price: variant.priceV2.amount,
          sku: null
        };
      }
    }, {
      key: "productTrackingInfo",
      get: function get() {
        return {
          id: this.model.id
        };
      }
    }, {
      key: "modalProductConfig",
      get: function get() {
        var _this12 = this,
            modalProductStyles;

        return modalProductStyles = this.config.product.styles ? merge({}, Object.keys(this.config.product.styles).reduce(function (productStyles, selectorKey) {
          return productStyles[selectorKey] = whitelistedProperties(_this12.config.product.styles[selectorKey]), productStyles;
        }, {}), this.config.modalProduct.styles) : {}, Object.assign({}, this.config.modalProduct, {
          styles: modalProductStyles
        });
      }
    }, {
      key: "onlineStoreParams",
      get: function get() {
        return {
          channel: "buy_button",
          referrer: encodeURIComponent(windowUtils_location()),
          variant: atob(this.selectedVariant.id).split("/")[4]
        };
      }
    }, {
      key: "onlineStoreQueryString",
      get: function get() {
        var _this13 = this;

        return Object.keys(this.onlineStoreParams).reduce(function (string, key) {
          return "".concat(string).concat(key, "=").concat(_this13.onlineStoreParams[key], "&");
        }, "?");
      }
    }, {
      key: "onlineStoreURL",
      get: function get() {
        return "".concat(this.model.onlineStoreUrl).concat(this.onlineStoreQueryString);
      }
    }]), Product;
  }(Component),
      ModalView = function (_View) {
    function ModalView() {
      return _View.apply(this, arguments) || this;
    }

    _inheritsLoose(ModalView, _View);

    var _proto = ModalView.prototype;
    return _proto.wrapTemplate = function wrapTemplate(html) {
      return '<div class="'.concat(this.component.classes.modal.overlay, '"><div class="').concat(this.component.classes.modal.modal, '">').concat(html, "</div></div>");
    }, _proto.close = function close() {
      var _this = this;

      if (this.component.isVisible = !1, this.wrapper && this._closeOnBgClick && this.wrapper.removeEventListener("click", this._closeOnBgClick), removeClassFromElement("is-active", this.wrapper), removeClassFromElement("is-active", this.document.body), removeClassFromElement("shopify-buy-modal-is-active", document.body), removeClassFromElement("shopify-buy-modal-is-active", document.getElementsByTagName("html")[0]), !this.iframe) return removeClassFromElement("is-active", this.component.node), void removeClassFromElement("is-block", this.component.node);
      this.iframe.removeClass("is-block"), this.component.props.browserFeatures.transition ? this.iframe.parent.addEventListener("transitionend", function () {
        _this.iframe.removeClass("is-active");
      }) : this.iframe.removeClass("is-active");
    }, _proto.delegateEvents = function delegateEvents() {
      _View.prototype.delegateEvents.call(this), this._closeOnBgClick = this.component.closeOnBgClick.bind(this.component), this.wrapper.addEventListener("click", this._closeOnBgClick);
    }, _proto.render = function render() {
      this.component.isVisible && (_View.prototype.render.call(this), addClassToElement("is-active", this.document.body), addClassToElement("shopify-buy-modal-is-active", document.body), addClassToElement("shopify-buy-modal-is-active", document.getElementsByTagName("html")[0]), addClassToElement("is-active", this.wrapper), this.iframe ? (this.iframe.addClass("is-active"), this.iframe.addClass("is-block")) : (addClassToElement("is-active", this.component.node), addClassToElement("is-block", this.component.node)));
    }, ModalView;
  }(View),
      ModalUpdater = function (_Updater) {
    function ModalUpdater() {
      return _Updater.apply(this, arguments) || this;
    }

    var _proto;

    return _inheritsLoose(ModalUpdater, _Updater), ModalUpdater.prototype.updateConfig = function updateConfig(config) {
      var _this = this;

      return _Updater.prototype.updateConfig.call(this, config), this.component.product = new Product$1(this.component.productConfig, this.component.props), this.component.product.init(this.component.model).then(function () {
        return _this.component.view.resize();
      });
    }, ModalUpdater;
  }(Updater),
      Modal = function (_Component) {
    function Modal(config, props) {
      var _this;

      return (_this = _Component.call(this, config, props) || this).typeKey = "modal", _this.node = config.node ? config.node.appendChild(document.createElement("div")) : document.body.appendChild(document.createElement("div")), _this.node.className = "shopify-buy-modal-wrapper", _this.product = null, _this.updater = new ModalUpdater(_assertThisInitialized(_this)), _this.view = new ModalView(_assertThisInitialized(_this)), _this;
    }

    _inheritsLoose(Modal, _Component);

    var _proto = Modal.prototype;
    return _proto.closeOnBgClick = function closeOnBgClick(evt) {
      this.productWrapper.contains(evt.target) || this.props.closeModal();
    }, _proto.init = function init(data) {
      var _this2 = this;

      return this.isVisible = !0, _Component.prototype.init.call(this, data).then(function () {
        return _this2.productWrapper = _this2.view.wrapper.getElementsByClassName(_this2.classes.modal.modal)[0], _this2.product = new Product$1(_this2.productConfig, _this2.props), _this2.product.init(_this2.model).then(function () {
          return _this2.view.setFocus(), _this2.view.resize();
        });
      });
    }, _proto.close = function close() {
      this._userEvent("closeModal"), this.view.close();
    }, _createClass(Modal, [{
      key: "DOMEvents",
      get: function get() {
        return Object.assign({}, _defineProperty({}, "click ".concat(this.selectors.modal.close), this.props.closeModal.bind(this)), this.options.DOMEvents);
      }
    }, {
      key: "productConfig",
      get: function get() {
        return Object.assign({}, this.globalConfig, {
          node: this.productWrapper,
          options: merge({}, this.config)
        });
      }
    }]), Modal;
  }(Component),
      ProductSetUpdater = function (_Updater) {
    function ProductSetUpdater() {
      return _Updater.apply(this, arguments) || this;
    }

    var _proto;

    return _inheritsLoose(ProductSetUpdater, _Updater), ProductSetUpdater.prototype.updateConfig = function updateConfig(config) {
      _Updater.prototype.updateConfig.call(this, config), this.component.products[0].updateConfig({
        options: Object.assign({}, config.options)
      }), this.component.cart.updateConfig(config), this.component.renderProducts();
    }, ProductSetUpdater;
  }(Updater),
      pollInterval = 200,
      ProductSetView = function (_View) {
    function ProductSetView(component) {
      var _this;

      return (_this = _View.call(this, component) || this).height = 0, _this.resizeCompleted = !1, _this;
    }

    _inheritsLoose(ProductSetView, _View);

    var _proto = ProductSetView.prototype;
    return _proto.wrapTemplate = function wrapTemplate(html) {
      return '<div class="'.concat(this.component.classes.productSet.productSet, '">').concat(html, "</div>");
    }, _proto.resizeUntilFits = function resizeUntilFits() {
      var _this2 = this;

      if (this.iframe && !this.resizeCompleted) {
        var maxResizes = this.component.products.length,
            resizes = 0;
        this.height = this.outerHeight, this.resize();
        var productSetResize = setInterval(function () {
          var currentHeight = _this2.outerHeight;
          parseInt(currentHeight, 10) > parseInt(_this2.height, 10) && (resizes++, _this2.height = currentHeight, _this2.resize(currentHeight)), resizes > maxResizes && (_this2.resizeCompleted = !0, clearInterval(productSetResize));
        }, 200);
      }
    }, _createClass(ProductSetView, [{
      key: "shouldResizeY",
      get: function get() {
        return !0;
      }
    }]), ProductSetView;
  }(View);

  function isArray$1(arg) {
    return "[object Array]" === Object.prototype.toString.call(arg);
  }

  var ProductSet = function (_Component) {
    function ProductSet(config, props) {
      var _this;

      return config = Array.isArray(config.id) ? normalizeConfig(config) : normalizeConfig(config, "Collection"), (_this = _Component.call(this, config, props) || this).typeKey = "productSet", _this.products = [], _this.cart = null, _this.page = 1, _this.nextModel = {
        products: []
      }, _this.updater = new ProductSetUpdater(_assertThisInitialized(_this)), _this.view = new ProductSetView(_assertThisInitialized(_this)), _this;
    }

    _inheritsLoose(ProductSet, _Component);

    var _proto = ProductSet.prototype;
    return _proto.init = function init(data) {
      var _this2 = this,
          cartConfig = Object.assign({}, this.globalConfig, {
        node: this.globalConfig.cartNode,
        options: this.config
      });

      return this.props.createCart(cartConfig).then(function (cart) {
        return _this2.cart = cart, _Component.prototype.init.call(_this2, data).then(function (model) {
          return model ? _this2.renderProducts(_this2.model.products) : _this2;
        });
      });
    }, _proto.sdkFetch = function sdkFetch() {
      var _this3 = this,
          promise;

      return this.storefrontId ? promise = Array.isArray(this.storefrontId) ? this.props.client.product.fetchMultiple(this.storefrontId) : this.props.client.collection.fetchWithProducts(this.storefrontId) : this.handle && (promise = this.props.client.collection.fetchByHandle(this.handle).then(function (collection) {
        return _this3.storefrontId = collection.id, _this3.props.client.collection.fetchWithProducts(_this3.storefrontId);
      })), promise.then(function (collectionOrProducts) {
        var products;
        return products = Array.isArray(collectionOrProducts) ? collectionOrProducts : collectionOrProducts.products;
      });
    }, _proto.fetchData = function fetchData() {
      return this.sdkFetch().then(function (products) {
        if (products.length) return {
          products: products
        };
        throw new Error("Not Found");
      });
    }, _proto.showPagination = function showPagination() {
      var _this4 = this;

      return this.props.client.fetchNextPage(this.model.products).then(function (data) {
        _this4.nextModel = {
          products: data.model
        }, _this4.view.renderChild(_this4.classes.productSet.paginationButton, _this4.paginationTemplate), _this4.view.resize();
      });
    }, _proto.nextPage = function nextPage() {
      this.model = this.nextModel, this._userEvent("loadNextPage"), this.renderProducts();
    }, _proto.renderProducts = function renderProducts() {
      var _this5 = this;

      if (!this.model.products.length) return Promise.resolve();
      var productConfig = Object.assign({}, this.globalConfig, {
        node: this.view.document.querySelector(".".concat(this.classes.productSet.products)),
        options: merge({}, this.config, {
          product: {
            iframe: !1,
            classes: {
              wrapper: this.classes.productSet.product
            }
          }
        })
      });
      !1 === this.config.productSet.iframe && (productConfig.node = this.node.querySelector(".".concat(this.classes.productSet.products)));
      var promises = this.model.products.map(function (productModel) {
        var product = new Product$1(productConfig, _this5.props);
        return _this5.products.push(product), product.init(productModel);
      });
      return Promise.all(promises).then(function () {
        _this5.view.resizeUntilFits();

        var hasPagination = _this5.model.products[0].hasOwnProperty("hasNextPage");

        return _this5.options.contents.pagination && hasPagination && _this5.showPagination(), _this5;
      });
    }, _createClass(ProductSet, [{
      key: "nextButtonClass",
      get: function get() {
        return this.nextModel.products.length ? "is-active" : "";
      }
    }, {
      key: "viewData",
      get: function get() {
        return Object.assign({}, this.options.viewData, {
          classes: this.classes,
          text: this.options.text,
          nextButtonClass: this.nextButtonClass
        });
      }
    }, {
      key: "DOMEvents",
      get: function get() {
        return Object.assign({}, _defineProperty({
          click: this.props.closeCart.bind(this)
        }, "click ".concat(this.selectors.productSet.paginationButton), this.nextPage.bind(this)), this.options.DOMEvents);
      }
    }, {
      key: "paginationTemplate",
      get: function get() {
        return this._paginationTemplate = this._paginationTemplate || new Template({
          pagination: this.options.templates.pagination
        }, {
          pagination: !0
        }, ["pagination"]), this._paginationTemplate;
      }
    }, {
      key: "trackingInfo",
      get: function get() {
        var contents = this.config.product.contents,
            contentString = Object.keys(contents).filter(function (key) {
          return contents[key];
        }).toString(),
            config = {
          destination: this.config.product.buttonDestination,
          layout: this.config.product.layout,
          contents: contentString,
          checkoutPopup: this.config.cart.popup
        };
        return isArray$1(this.id) ? this.model.products.map(function (product) {
          var variant = product.variants[0];
          return Object.assign({}, config, {
            id: product.id,
            name: product.title,
            variantId: variant.id,
            variantName: variant.title,
            price: variant.priceV2.amount,
            sku: null,
            isProductSet: !0
          });
        }) : Object.assign(config, {
          id: this.storefrontId
        });
      }
    }]), ProductSet;
  }(Component),
      ENTER_KEY$1 = 13,
      ToggleView = function (_View) {
    function ToggleView() {
      return _View.apply(this, arguments) || this;
    }

    _inheritsLoose(ToggleView, _View);

    var _proto = ToggleView.prototype;
    return _proto.render = function render() {
      _View.prototype.render.call(this), this.component.options.sticky && this.addClass("is-sticky"), this.isVisible ? this.addClass("is-active") : this.removeClass("is-active"), this.iframe && (this.iframe.parent.setAttribute("tabindex", 0), this.iframe.parent.setAttribute("role", "button"), this.iframe.parent.setAttribute("aria-label", this.component.options.text.title), this.resize());
    }, _proto.delegateEvents = function delegateEvents() {
      var _this = this;

      _View.prototype.delegateEvents.call(this), this.iframe && this.iframe.parent.addEventListener("keydown", function (evt) {
        13 === evt.keyCode && _this.component.props.cart.toggleVisibility(_this.component.props.cart);
      });
    }, _proto.wrapTemplate = function wrapTemplate(html) {
      return '<div class="'.concat(this.stickyClass, " ").concat(this.component.classes.toggle.toggle, '">\n      ').concat(html, "\n      ").concat(this.readableLabel, "\n    </div>");
    }, _proto._resizeX = function _resizeX() {
      this.iframe.el.style.width = "".concat(this.wrapper.clientWidth, "px");
    }, _createClass(ToggleView, [{
      key: "shouldResizeY",
      get: function get() {
        return !0;
      }
    }, {
      key: "shouldResizeX",
      get: function get() {
        return !0;
      }
    }, {
      key: "isVisible",
      get: function get() {
        return this.component.count > 0;
      }
    }, {
      key: "stickyClass",
      get: function get() {
        return this.component.options.sticky ? "is-sticky" : "is-inline";
      }
    }, {
      key: "outerHeight",
      get: function get() {
        return "".concat(this.wrapper.clientHeight, "px");
      }
    }, {
      key: "readableLabel",
      get: function get() {
        return this.component.options.contents.title ? "" : '<p class="shopify-buy--visually-hidden">'.concat(this.component.options.text.title, "</p>");
      }
    }]), ToggleView;
  }(View),
      CartToggle = function (_Component) {
    function CartToggle(config, props) {
      var _this;

      return (_this = _Component.call(this, config, props) || this).typeKey = "toggle", _this.node = config.node || _this.props.cart.node.parentNode.insertBefore(document.createElement("div"), _this.props.cart.node), _this.view = new ToggleView(_assertThisInitialized(_this)), _this;
    }

    var _proto;

    return _inheritsLoose(CartToggle, _Component), CartToggle.prototype.toggleCart = function toggleCart(evt) {
      evt.stopPropagation(), this.props.cart.toggleVisibility();
    }, _createClass(CartToggle, [{
      key: "count",
      get: function get() {
        return this.props.cart.model ? this.props.cart.model.lineItems.reduce(function (acc, lineItem) {
          return acc + lineItem.quantity;
        }, 0) : 0;
      }
    }, {
      key: "viewData",
      get: function get() {
        return Object.assign({}, this.options.viewData, {
          classes: this.classes,
          text: this.options.text,
          count: this.count
        });
      }
    }, {
      key: "DOMEvents",
      get: function get() {
        return merge({}, {
          click: this.toggleCart.bind(this)
        }, this.options.DOMEvents);
      }
    }]), CartToggle;
  }(Component),
      CartView = function (_View) {
    function CartView(component) {
      var _this;

      return (_this = _View.call(this, component) || this).node.className = "shopify-buy-cart-wrapper", _this;
    }

    _inheritsLoose(CartView, _View);

    var _proto = CartView.prototype;
    return _proto.render = function render() {
      _View.prototype.render.call(this), this.component.isVisible ? (this.addClass("is-active"), this.addClass("is-initialized")) : this.removeClass("is-active");
    }, _proto.wrapTemplate = function wrapTemplate(html) {
      return '<div class="'.concat(this.component.classes.cart.cart, '">').concat(html, "</div>");
    }, _createClass(CartView, [{
      key: "wrapperClass",
      get: function get() {
        return this.component.isVisible ? "is-active" : "";
      }
    }]), CartView;
  }(View),
      CartUpdater = function (_Updater) {
    function CartUpdater() {
      return _Updater.apply(this, arguments) || this;
    }

    var _proto;

    return _inheritsLoose(CartUpdater, _Updater), CartUpdater.prototype.updateConfig = function updateConfig(config) {
      _Updater.prototype.updateConfig.call(this, config), this.component.toggles.forEach(function (toggle) {
        return toggle.updateConfig(config);
      });
    }, CartUpdater;
  }(Updater),
      NO_IMG_URL = "//sdks.shopifycdn.com/buy-button/latest/no-image.jpg",
      LINE_ITEM_TARGET_SELECTIONS = ["ENTITLED", "EXPLICIT"],
      CART_TARGET_SELECTION = "ALL",
      Cart = function (_Component) {
    function Cart(config, props) {
      var _this;

      (_this = _Component.call(this, config, props) || this).addVariantToCart = _this.addVariantToCart.bind(_assertThisInitialized(_this)), _this.childTemplate = new Template(_this.config.lineItem.templates, _this.config.lineItem.contents, _this.config.lineItem.order), _this.node = config.node || document.body.appendChild(document.createElement("div")), _this.isVisible = _this.options.startOpen, _this.lineItemCache = [], _this.moneyFormat = _this.globalConfig.moneyFormat, _this.checkout = new CheckoutNavigator(_this.config);
      var toggles = _this.globalConfig.toggles || [{
        node: _this.node.parentNode.insertBefore(document.createElement("div"), _this.node)
      }];
      return _this.toggles = toggles.map(function (toggle) {
        return new CartToggle(merge({}, config, toggle), Object.assign({}, _this.props, {
          cart: _assertThisInitialized(_this)
        }));
      }), _this.updater = new CartUpdater(_assertThisInitialized(_this)), _this.view = new CartView(_assertThisInitialized(_this)), _this;
    }

    _inheritsLoose(Cart, _Component);

    var _proto = Cart.prototype;
    return _proto.createToggles = function createToggles(config) {
      var _this2 = this;

      return this.toggles = this.toggles.concat(config.toggles.map(function (toggle) {
        return new CartToggle(merge({}, config, toggle), Object.assign({}, _this2.props, {
          cart: _this2
        }));
      })), Promise.all(this.toggles.map(function (toggle) {
        return toggle.init({
          lineItems: _this2.lineItems
        });
      }));
    }, _proto.imageForLineItem = function imageForLineItem(lineItem) {
      var imageSize = 180,
          imageOptions = {
        maxWidth: 180,
        maxHeight: 180
      };
      return lineItem.variant.image ? this.props.client.image.helpers.imageForSize(lineItem.variant.image, imageOptions) : NO_IMG_URL;
    }, _proto.removeCheckout = function removeCheckout() {
      return this.model = null, localStorage.removeItem(this.localStorageCheckoutKey), this.model;
    }, _proto.fetchData = function fetchData() {
      var _this3 = this,
          checkoutId = localStorage.getItem(this.localStorageCheckoutKey);

      return checkoutId ? this.props.client.checkout.fetch(checkoutId).then(function (checkout) {
        return _this3.model = checkout, checkout.completedAt ? _this3.removeCheckout() : _this3.sanitizeCheckout(checkout).then(function (newCheckout) {
          return _this3.updateCache(newCheckout.lineItems), newCheckout;
        });
      }).catch(function () {
        return _this3.removeCheckout();
      }) : Promise.resolve(null);
    }, _proto.sanitizeCheckout = function sanitizeCheckout(checkout) {
      var lineItemsToDelete = checkout.lineItems.filter(function (item) {
        return !item.variant;
      });
      if (!lineItemsToDelete.length) return Promise.resolve(checkout);
      var lineItemIds = lineItemsToDelete.map(function (item) {
        return item.id;
      });
      return this.props.client.checkout.removeLineItems(checkout.id, lineItemIds).then(function (newCheckout) {
        return newCheckout;
      });
    }, _proto.fetchMoneyFormat = function fetchMoneyFormat() {
      return this.props.client.shop.fetchInfo().then(function (res) {
        return res.moneyFormat;
      });
    }, _proto.init = function init(data) {
      var _this4 = this;

      return this.moneyFormat || this.fetchMoneyFormat().then(function (moneyFormat) {
        _this4.moneyFormat = moneyFormat;
      }), _Component.prototype.init.call(this, data).then(function (cart) {
        return _this4.toggles.map(function (toggle) {
          var lineItems = cart.model ? cart.model.lineItems : [];
          return toggle.init({
            lineItems: lineItems
          });
        });
      }).then(function () {
        return _this4;
      });
    }, _proto.destroy = function destroy() {
      _Component.prototype.destroy.call(this), this.toggles.forEach(function (toggle) {
        return toggle.destroy();
      });
    }, _proto.close = function close() {
      this.isVisible = !1, this.view.render();
    }, _proto.open = function open() {
      this.isVisible = !0, this.view.render(), this.view.setFocus();
    }, _proto.toggleVisibility = function toggleVisibility(visible) {
      this.isVisible = visible || !this.isVisible, this.view.render(), this.isVisible && this.view.setFocus();
    }, _proto.onQuantityBlur = function onQuantityBlur(evt, target) {
      this.setQuantity(target, function () {
        return parseInt(target.value, 10);
      });
    }, _proto.onQuantityIncrement = function onQuantityIncrement(qty, evt, target) {
      this.setQuantity(target, function (prevQty) {
        return prevQty + qty;
      });
    }, _proto.onCheckout = function onCheckout() {
      this._userEvent("openCheckout"), this.props.tracker.track("Open cart checkout", {}), this.checkout.open(this.model.webUrl);
    }, _proto.setQuantity = function setQuantity(target, fn) {
      var id = target.getAttribute("data-line-item-id"),
          item = this.model.lineItems.find(function (lineItem) {
        return lineItem.id === id;
      }),
          newQty = fn(item.quantity);
      return this.props.tracker.trackMethod(this.updateItem.bind(this), "Update Cart", this.cartItemTrackingInfo(item, newQty))(id, newQty);
    }, _proto.setNote = function setNote(evt) {
      var _this5 = this,
          note = evt.target.value;

      return this.props.client.checkout.updateAttributes(this.model.id, {
        note: note
      }).then(function (checkout) {
        return _this5.model = checkout, checkout;
      });
    }, _proto.updateCache = function updateCache(lineItems) {
      var cachedLineItems = this.lineItemCache.reduce(function (acc, item) {
        return acc[item.id] = item, acc;
      }, {});
      return this.lineItemCache = lineItems.map(function (item) {
        return Object.assign({}, cachedLineItems[item.id], item);
      }), this.lineItemCache;
    }, _proto.updateCacheItem = function updateCacheItem(lineItemId, quantity) {
      var lineItem;
      0 !== this.lineItemCache.length && (this.lineItemCache.find(function (item) {
        return lineItemId === item.id;
      }).quantity = quantity, this.view.render());
    }, _proto.updateItem = function updateItem(id, quantity) {
      var _this6 = this;

      this._userEvent("updateItemQuantity");

      var lineItem = {
        id: id,
        quantity: quantity
      },
          lineItemEl = this.view.document.getElementById(id);

      if (lineItemEl) {
        var quantityEl = lineItemEl.getElementsByClassName(this.classes.lineItem.quantity)[0];
        quantityEl && addClassToElement("is-loading", quantityEl);
      }

      return this.props.client.checkout.updateLineItems(this.model.id, [lineItem]).then(function (checkout) {
        return _this6.model = checkout, _this6.updateCache(_this6.model.lineItems), _this6.toggles.forEach(function (toggle) {
          return toggle.view.render();
        }), quantity > 0 ? _this6.view.render() : _this6.view.animateRemoveNode(id), checkout;
      });
    }, _proto.addVariantToCart = function addVariantToCart(variant) {
      var _this7 = this,
          quantity = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1,
          openCart = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];

      if (quantity <= 0) return null;
      openCart && this.open();
      var lineItem = {
        variantId: variant.id,
        quantity: quantity
      };
      if (this.model) return this.props.client.checkout.addLineItems(this.model.id, [lineItem]).then(function (checkout) {
        return _this7.model = checkout, _this7.updateCache(_this7.model.lineItems), _this7.view.render(), _this7.toggles.forEach(function (toggle) {
          return toggle.view.render();
        }), _this7.view.setFocus(), checkout;
      });
      var input = {
        lineItems: [lineItem]
      };
      return this.props.client.checkout.create(input).then(function (checkout) {
        return localStorage.setItem(_this7.localStorageCheckoutKey, checkout.id), _this7.model = checkout, _this7.updateCache(_this7.model.lineItems), _this7.view.render(), _this7.toggles.forEach(function (toggle) {
          return toggle.view.render();
        }), _this7.view.setFocus(), checkout;
      });
    }, _proto.empty = function empty() {
      var _this8 = this,
          lineItemIds = this.model.lineItems ? this.model.lineItems.map(function (item) {
        return item.id;
      }) : [];

      return this.props.client.checkout.removeLineItems(this.model.id, lineItemIds).then(function (checkout) {
        return _this8.model = checkout, _this8.view.render(), _this8.toggles.forEach(function (toggle) {
          return toggle.view.render();
        }), checkout;
      });
    }, _proto.cartItemTrackingInfo = function cartItemTrackingInfo(item, quantity) {
      return {
        id: item.variant.id,
        variantName: item.variant.title,
        productId: item.variant.product.id,
        name: item.title,
        price: item.variant.priceV2.amount,
        prevQuantity: item.quantity,
        quantity: parseFloat(quantity),
        sku: null
      };
    }, _createClass(Cart, [{
      key: "typeKey",
      get: function get() {
        return "cart";
      }
    }, {
      key: "DOMEvents",
      get: function get() {
        var _merge;

        return merge({}, (_defineProperty(_merge = {}, "click ".concat(this.selectors.cart.close), this.props.closeCart.bind(this)), _defineProperty(_merge, "click ".concat(this.selectors.lineItem.quantityIncrement), this.onQuantityIncrement.bind(this, 1)), _defineProperty(_merge, "click ".concat(this.selectors.lineItem.quantityDecrement), this.onQuantityIncrement.bind(this, -1)), _defineProperty(_merge, "click ".concat(this.selectors.cart.button), this.onCheckout.bind(this)), _defineProperty(_merge, "blur ".concat(this.selectors.lineItem.quantityInput), this.onQuantityBlur.bind(this)), _defineProperty(_merge, "blur ".concat(this.selectors.cart.note), this.setNote.bind(this)), _merge), this.options.DOMEvents);
      }
    }, {
      key: "lineItems",
      get: function get() {
        return this.model ? this.model.lineItems : [];
      }
    }, {
      key: "lineItemsHtml",
      get: function get() {
        var _this9 = this;

        return this.lineItemCache.reduce(function (acc, lineItem) {
          var data = Object.assign({}, lineItem, _this9.options.viewData),
              fullPrice = data.variant.priceV2.amount * data.quantity,
              formattedPrice = formatMoney(fullPrice, _this9.moneyFormat),
              discountAllocations,
              _discountAllocations$ = data.discountAllocations.reduce(function (discountAcc, discount) {
            var targetSelection = discount.discountApplication.targetSelection;

            if (LINE_ITEM_TARGET_SELECTIONS.indexOf(targetSelection) > -1) {
              var discountAmount = discount.allocatedAmount.amount,
                  discountDisplayText = discount.discountApplication.title || discount.discountApplication.code;
              discountAcc.totalDiscount += discountAmount, discountAcc.discounts.push({
                discount: "".concat(discountDisplayText, " (-").concat(formatMoney(discountAmount, _this9.moneyFormat), ")")
              });
            }

            return discountAcc;
          }, {
            discounts: [],
            totalDiscount: 0
          }),
              discounts = _discountAllocations$.discounts,
              totalDiscount = _discountAllocations$.totalDiscount;

          return data.discounts = discounts.length > 0 ? discounts : null, data.formattedFullPrice = totalDiscount > 0 ? formattedPrice : null, data.formattedActualPrice = formatMoney(fullPrice - totalDiscount, _this9.moneyFormat), data.formattedPrice = formattedPrice, data.classes = _this9.classes, data.lineItemImage = _this9.imageForLineItem(data), data.variantTitle = "Default Title" === data.variant.title ? "" : data.variant.title, acc + _this9.childTemplate.render({
            data: data
          }, function (output) {
            return '<div id="'.concat(lineItem.id, '" class=').concat(_this9.classes.lineItem.lineItem, ">").concat(output, "</div>");
          });
        }, "");
      }
    }, {
      key: "viewData",
      get: function get() {
        var modelData;
        return merge(this.model || {}, this.options.viewData, {
          text: this.options.text,
          classes: this.classes,
          lineItemsHtml: this.lineItemsHtml,
          isEmpty: this.isEmpty,
          formattedTotal: this.formattedTotal,
          discounts: this.cartDiscounts,
          contents: this.options.contents,
          cartNote: this.cartNote
        });
      }
    }, {
      key: "formattedTotal",
      get: function get() {
        return this.model ? formatMoney(this.options.contents.discounts ? this.model.subtotalPriceV2.amount : this.model.lineItemsSubtotalPrice.amount, this.moneyFormat) : formatMoney(0, this.moneyFormat);
        var total;
      }
    }, {
      key: "cartDiscounts",
      get: function get() {
        var _this10 = this;

        return this.options.contents.discounts && this.model ? this.model.discountApplications.reduce(function (discountArr, discount) {
          if ("ALL" === discount.targetSelection) {
            var discountValue = 0;

            if (discount.value.amount ? discountValue = discount.value.amount : discount.value.percentage && (discountValue = discount.value.percentage / 100 * _this10.model.lineItemsSubtotalPrice.amount), discountValue > 0) {
              var discountDisplayText = discount.title || discount.code;
              discountArr.push({
                text: discountDisplayText,
                amount: "-".concat(formatMoney(discountValue, _this10.moneyFormat))
              });
            }
          }

          return discountArr;
        }, []) : [];
      }
    }, {
      key: "isEmpty",
      get: function get() {
        return !this.model || this.model.lineItems.length < 1;
      }
    }, {
      key: "cartNote",
      get: function get() {
        return this.model && this.model.note;
      }
    }, {
      key: "wrapperClass",
      get: function get() {
        return this.isVisible ? "is-active" : "";
      }
    }, {
      key: "localStorageCheckoutKey",
      get: function get() {
        return "".concat(this.props.client.config.storefrontAccessToken, ".").concat(this.props.client.config.domain, ".checkoutId");
      }
    }]), Cart;
  }(Component),
      Tracker = function () {
    function Tracker(lib, clientConfig) {
      this.lib = lib || null, this.clientConfig = clientConfig;
    }

    var _proto = Tracker.prototype;
    return _proto.trackMethod = function trackMethod(fn, event, properties) {
      var self = this;
      return function () {
        var returnValue = fn.apply(void 0, arguments);
        return returnValue && returnValue.then ? returnValue.then(function (val) {
          return self.callLib(event, properties), val;
        }) : (self.callLib(event, properties), returnValue);
      };
    }, _proto.callLib = function callLib(eventName, properties) {
      switch (eventName) {
        case "Update Cart":
          if (properties.quantity < 1) return this.track("Removed Product", properties);
          if (properties.prevQuantity && properties.quantity < properties.prevQuantity) return;
          return this.track("Added Product", properties);

        default:
          return this.track(eventName, properties);
      }
    }, _proto.trackPageview = function trackPageview() {
      this.lib && this.lib.page && this.lib.page();
    }, _proto.trackComponent = function trackComponent(type, properties) {
      switch (type) {
        case "product":
          return this.track("Viewed Product", properties);

        case "collection":
          return this.track("Viewed Product Category", properties);
      }
    }, _proto.track = function track(eventName, properties) {
      properties.pageurl = document.location.href, properties.referrer = document.referrer, properties.subdomain = this.clientConfig.domain, this.lib && this.lib.track && this.lib.track(eventName, properties);
    }, Tracker;
  }(),
      hostStyles = ".shopify-buy-modal-is-active {\n  height: 100%;\n  overflow: auto;\n}\n\n.shopify-buy-frame {\n  display: inline-block\n}\n\n.shopify-buy-frame iframe {\n    width: 100%;\n    display: block;\n    height: 0;\n    overflow: hidden;\n  }\n\n.shopify-buy-frame--cart {\n  width: 100%;\n  max-width: 350px;\n  position: fixed;\n  top: 0;\n  right: 0;\n  height: 100%;\n  z-index: 2147483647;\n  transform: translateX(100%);\n  -webkit-transform: translateX(100%)\n}\n\n.shopify-buy-frame--cart iframe {\n    height: 100%;\n  }\n\n.shopify-buy-frame--cart.is-initialized {\n    -webkit-transition: all 250ms cubic-bezier(0.165, 0.84, 0.44, 1);\n    transition: all 250ms cubic-bezier(0.165, 0.84, 0.44, 1);\n  }\n\n.shopify-buy-frame--cart.is-active {\n    transform: translateX(0);\n    -webkit-transform: translateX(0);\n  }\n\n.shopify-buy-frame--product {\n  display: block\n}\n\n.shopify-buy-frame--product.shopify-buy__layout-horizontal {\n    display: block;\n    margin-left: auto;\n\n    margin-right: auto\n  }\n\n.shopify-buy-frame--product.shopify-buy__layout-horizontal iframe {\n      max-width: 100%\n    }\n\n@media (min-width: 950px) {\n\n.shopify-buy-frame--product.shopify-buy__layout-horizontal iframe {\n        max-width: 950px;\n        margin-left: auto;\n        margin-right: auto\n    }\n      }\n\n.shopify-buy-frame--toggle {\n  display: inline-block\n}\n\n.shopify-buy-frame--toggle:not(.is-sticky) {\n    overflow: hidden;\n    padding: 5px;\n  }\n\n.shopify-buy-frame--toggle.is-sticky {\n    display: none;\n    position: fixed;\n    right: 0;\n    top: 50%;\n    transform: translateY(-50%);\n    -webkit-transform: translateY(-50%);\n    z-index: 2147483645;\n  }\n\n.shopify-buy-frame--toggle.is-active.is-sticky {\n    display: block;\n  }\n\n.is-active .shopify-buy-frame--toggle iframe {\n      min-height: 67px;\n    }\n\n.shopify-buy-frame--productSet {\n  width: 100%;\n}\n\n.shopify-buy-frame--modal {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 2147483646;\n  display: none;\n  -webkit-transition: background 300ms ease;\n  transition: background 300ms ease\n}\n\n.shopify-buy-frame--modal iframe {\n    height: 100%;\n    width: 100%;\n    max-width: none;\n  }\n\n.shopify-buy-frame--modal.is-active {\n    background: rgba(0,0,0,0.6);\n  }\n\n.shopify-buy-frame--modal.is-block {\n    display: block;\n  }\n",
      conditionalStyles$1 = ".shopify-buy-frame--cart {\n  display: none\n}\n.shopify-buy-frame--cart.is-active {\n    display: block;\n  }\n",
      frameUtils = {},
      lastTime = 0,
      vendors = ["ms", "moz", "webkit", "o"];

  if (window.requestAnimationFrame && window.cancelAnimationFrame) frameUtils.requestAnimationFrame = window.requestAnimationFrame, frameUtils.cancelAnimationFrame = window.cancelAnimationFrame;else {
    for (var x = 0; x < vendors.length && !frameUtils.requestAnimationFrame; ++x) {
      frameUtils.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"], frameUtils.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
    }

    frameUtils.requestAnimationFrame || (frameUtils.requestAnimationFrame = function (callback, element) {
      var currTime = new Date().getTime(),
          timeToCall = Math.max(0, 16 - (currTime - lastTime)),
          id = window.setTimeout(function () {
        callback(currTime + timeToCall);
      }, timeToCall);
      return lastTime = currTime + timeToCall, id;
    }), frameUtils.cancelAnimationFrame || (frameUtils.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    });
  }

  function CustomEvent(event, params) {
    params = params || {
      bubbles: !1,
      cancelable: !1,
      detail: void 0
    };
    var evt = document.createEvent("CustomEvent");
    return evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail), evt;
  }

  CustomEvent.prototype = window.Event.prototype;

  var throttle = function throttle(type, name, obj) {
    obj = obj || window;

    var running = !1,
        func = function func() {
      running || (running = !0, frameUtils.requestAnimationFrame.call(window, function () {
        obj.dispatchEvent(new CustomEvent(name)), running = !1;
      }));
    };

    obj.addEventListener(type, func);
  },
      DATA_ATTRIBUTE = "data-shopify-buy-ui",
      ESC_KEY$1 = 27,
      UI = function () {
    function UI(client) {
      var integrations = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          styleOverrides = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
      this.client = client, this.config = {}, this.config.domain = this.client.config.domain, this.iframeComponents = [], this.components = {
        product: [],
        cart: [],
        collection: [],
        productSet: [],
        modal: [],
        toggle: []
      }, this.componentTypes = {
        product: Product$1,
        cart: Cart,
        collection: ProductSet,
        productSet: ProductSet,
        toggle: CartToggle
      }, this.errorReporter = integrations.errorReporter, this.tracker = new Tracker(integrations.tracker, this.config), this.styleOverrides = styleOverrides, this.tracker.trackPageview(), this.activeEl = null, this._appendStyleTag(), this._bindResize(), this._bindHostClick(), this._bindEsc(window), this._bindPostMessage();
    }

    var _proto = UI.prototype;
    return _proto.createComponent = function createComponent(type, config) {
      var _this = this;

      config.node = config.node || this._queryEntryNode();
      var component = new this.componentTypes[type](config, this.componentProps);
      return component.iframe && this._bindEsc(component.iframe.el.contentWindow || component.iframe.el), this.components[type].push(component), component.init().then(function () {
        return _this.trackComponent(type, component), component;
      }).catch(function (error) {
        _this.errorReporter && _this.errorReporter.notifyException(error), console.error(error);
      });
    }, _proto.trackComponent = function trackComponent(type, component) {
      var _this2 = this;

      "productSet" === type ? component.trackingInfo.forEach(function (product) {
        _this2.tracker.trackComponent("product", product);
      }) : this.tracker.trackComponent(type, component.trackingInfo);
    }, _proto.destroyComponent = function destroyComponent(type, id) {
      var _this3 = this;

      this.components[type].forEach(function (component, index) {
        id && !component.model.id === id || (_this3.components[type][index].destroy(), _this3.components[type].splice(index, 1));
      });
    }, _proto.createCart = function createCart(config) {
      var _this4 = this;

      if (this.components.cart.length) return config.toggles && config.toggles.length > this.components.cart[0].toggles.length ? this.components.cart[0].createToggles(config).then(function () {
        return _this4.components.cart[0];
      }) : Promise.resolve(this.components.cart[0]);
      var cart = new Cart(config, this.componentProps);
      return this.components.cart.push(cart), cart.init();
    }, _proto.closeCart = function closeCart() {
      var _this5 = this;

      this.components.cart.length && this.components.cart.forEach(function (cart) {
        cart.isVisible && (cart.close(), _this5.restoreFocus());
      });
    }, _proto.openCart = function openCart() {
      this.components.cart.length && this.components.cart.forEach(function (cart) {
        cart.open();
      });
    }, _proto.toggleCart = function toggleCart(visibility) {
      this.components.cart.length && this.components.cart.forEach(function (cart) {
        cart.toggleVisibility(visibility);
      }), visibility || this.restoreFocus();
    }, _proto.createModal = function createModal(config) {
      if (this.components.modal.length) return this.components.modal[0];
      var modal = new Modal(config, this.componentProps);
      return this.components.modal.push(modal), modal;
    }, _proto.setActiveEl = function setActiveEl(el) {
      this.activeEl = el;
    }, _proto.closeModal = function closeModal() {
      this.components.modal.length && (this.components.modal.forEach(function (modal) {
        return modal.close();
      }), this.restoreFocus());
    }, _proto.restoreFocus = function restoreFocus() {
      !this.activeEl || this.modalOpen || this.cartOpen || this.activeEl.focus();
    }, _proto._queryEntryNode = function _queryEntryNode() {
      this.entry = this.entry || window.document.querySelectorAll("script[".concat(DATA_ATTRIBUTE, "]"))[0];
      var div = document.createElement("div");

      if (this.entry) {
        var parentNode = this.entry.parentNode;
        "HEAD" === parentNode.tagName || "HTML" === parentNode.tagName ? this._appendToBody(div) : (this.entry.removeAttribute(DATA_ATTRIBUTE), parentNode.insertBefore(div, this.entry));
      } else this._appendToBody(div);

      return div;
    }, _proto._appendToBody = function _appendToBody(el) {
      document.body || (document.body = document.createElement("body")), document.body.appendChild(el);
    }, _proto._appendStyleTag = function _appendStyleTag() {
      var styleTag = document.createElement("style");
      styleTag.styleSheet ? styleTag.styleSheet.cssText = this.styleText : styleTag.appendChild(document.createTextNode(this.styleText)), document.head.appendChild(styleTag);
    }, _proto._bindHostClick = function _bindHostClick() {
      var _this6 = this;

      document.addEventListener("click", function (evt) {
        if (!(_this6.components.cart.length < 1)) {
          var cartNode = _this6.components.cart[0].node;
          evt.target === cartNode || cartNode.contains(evt.target) || _this6.closeCart();
        }
      });
    }, _proto._bindResize = function _bindResize() {
      var _this7 = this;

      throttle("resize", "safeResize"), window.addEventListener("safeResize", function () {
        _this7.components.collection.forEach(function (collection) {
          return collection.view.resize();
        }), _this7.components.productSet.forEach(function (set) {
          return set.view.resize();
        }), _this7.components.product.forEach(function (product) {
          return product.view.resize();
        });
      });
    }, _proto._bindEsc = function _bindEsc(context) {
      var _this8 = this;

      context.addEventListener("keydown", function (evt) {
        27 === evt.keyCode && (_this8.closeModal(), _this8.closeCart());
      });
    }, _proto._bindPostMessage = function _bindPostMessage() {
      window.addEventListener("message", function (msg) {
        var data;

        try {
          data = JSON.parse(msg.data);
        } catch (err) {
          data = {};
        }

        (data.syncCart || data.current_checkout_page && "/checkout/thank_you" === data.current_checkout_page) && location.reload();
      });
    }, _createClass(UI, [{
      key: "modalOpen",
      get: function get() {
        return this.components.modal.reduce(function (isOpen, modal) {
          return isOpen || modal.isVisible;
        }, !1);
      }
    }, {
      key: "cartOpen",
      get: function get() {
        return this.components.cart.reduce(function (isOpen, cart) {
          return isOpen || cart.isVisible;
        }, !1);
      }
    }, {
      key: "componentProps",
      get: function get() {
        return {
          client: this.client,
          createCart: this.createCart.bind(this),
          closeCart: this.closeCart.bind(this),
          toggleCart: this.toggleCart.bind(this),
          createModal: this.createModal.bind(this),
          closeModal: this.closeModal.bind(this),
          setActiveEl: this.setActiveEl.bind(this),
          destroyComponent: this.destroyComponent.bind(this),
          tracker: this.tracker,
          errorReporter: this.errorReporter,
          browserFeatures: browserFeatures
        };
      }
    }, {
      key: "styleText",
      get: function get() {
        return browserFeatures.transition && browserFeatures.transform && browserFeatures.animation ? hostStyles + this.styleOverrides : hostStyles + conditionalStyles$1 + this.styleOverrides;
      }
    }]), UI;
  }(),
      support_searchParams = ("URLSearchParams" in self),
      support_iterable = "Symbol" in self && "iterator" in Symbol,
      support_blob = "FileReader" in self && "Blob" in self && function () {
    try {
      return new Blob(), !0;
    } catch (e) {
      return !1;
    }
  }(),
      support_formData = ("FormData" in self),
      support_arrayBuffer = ("ArrayBuffer" in self);

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj);
  }

  if (support_arrayBuffer) var viewClasses = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"],
      isArrayBufferView = ArrayBuffer.isView || function (obj) {
    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
  };

  function normalizeName(name) {
    if ("string" != typeof name && (name = String(name)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) throw new TypeError("Invalid character in header field name");
    return name.toLowerCase();
  }

  function normalizeValue(value) {
    return "string" != typeof value && (value = String(value)), value;
  }

  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value = items.shift();
        return {
          done: void 0 === value,
          value: value
        };
      }
    };
    return support_iterable && (iterator[Symbol.iterator] = function () {
      return iterator;
    }), iterator;
  }

  function Headers(headers) {
    this.map = {}, headers instanceof Headers ? headers.forEach(function (value, name) {
      this.append(name, value);
    }, this) : Array.isArray(headers) ? headers.forEach(function (header) {
      this.append(header[0], header[1]);
    }, this) : headers && Object.getOwnPropertyNames(headers).forEach(function (name) {
      this.append(name, headers[name]);
    }, this);
  }

  function consumed(body) {
    if (body.bodyUsed) return Promise.reject(new TypeError("Already read"));
    body.bodyUsed = !0;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      }, reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader(),
        promise = fileReaderReady(reader);
    return reader.readAsArrayBuffer(blob), promise;
  }

  function readBlobAsText(blob) {
    var reader = new FileReader(),
        promise = fileReaderReady(reader);
    return reader.readAsText(blob), promise;
  }

  function readArrayBufferAsText(buf) {
    for (var view = new Uint8Array(buf), chars = new Array(view.length), i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }

    return chars.join("");
  }

  function bufferClone(buf) {
    if (buf.slice) return buf.slice(0);
    var view = new Uint8Array(buf.byteLength);
    return view.set(new Uint8Array(buf)), view.buffer;
  }

  function Body() {
    return this.bodyUsed = !1, this._initBody = function (body) {
      this._bodyInit = body, body ? "string" == typeof body ? this._bodyText = body : support_blob && Blob.prototype.isPrototypeOf(body) ? this._bodyBlob = body : support_formData && FormData.prototype.isPrototypeOf(body) ? this._bodyFormData = body : support_searchParams && URLSearchParams.prototype.isPrototypeOf(body) ? this._bodyText = body.toString() : support_arrayBuffer && support_blob && isDataView(body) ? (this._bodyArrayBuffer = bufferClone(body.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : support_arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body)) ? this._bodyArrayBuffer = bufferClone(body) : this._bodyText = body = Object.prototype.toString.call(body) : this._bodyText = "", this.headers.get("content-type") || ("string" == typeof body ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : support_searchParams && URLSearchParams.prototype.isPrototypeOf(body) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
    }, support_blob && (this.blob = function () {
      var rejected = consumed(this);
      if (rejected) return rejected;
      if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
      if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
      if (this._bodyFormData) throw new Error("could not read FormData body as blob");
      return Promise.resolve(new Blob([this._bodyText]));
    }, this.arrayBuffer = function () {
      return this._bodyArrayBuffer ? consumed(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(readBlobAsArrayBuffer);
    }), this.text = function () {
      var rejected = consumed(this);
      if (rejected) return rejected;
      if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
      if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      if (this._bodyFormData) throw new Error("could not read FormData body as text");
      return Promise.resolve(this._bodyText);
    }, support_formData && (this.formData = function () {
      return this.text().then(decode$1);
    }), this.json = function () {
      return this.text().then(JSON.parse);
    }, this;
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name), value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ", " + value : value;
  }, Headers.prototype.delete = function (name) {
    delete this.map[normalizeName(name)];
  }, Headers.prototype.get = function (name) {
    return name = normalizeName(name), this.has(name) ? this.map[name] : null;
  }, Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  }, Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  }, Headers.prototype.forEach = function (callback, thisArg) {
    for (var name in this.map) {
      this.map.hasOwnProperty(name) && callback.call(thisArg, this.map[name], name, this);
    }
  }, Headers.prototype.keys = function () {
    var items = [];
    return this.forEach(function (value, name) {
      items.push(name);
    }), iteratorFor(items);
  }, Headers.prototype.values = function () {
    var items = [];
    return this.forEach(function (value) {
      items.push(value);
    }), iteratorFor(items);
  }, Headers.prototype.entries = function () {
    var items = [];
    return this.forEach(function (value, name) {
      items.push([name, value]);
    }), iteratorFor(items);
  }, support_iterable && (Headers.prototype[Symbol.iterator] = Headers.prototype.entries);
  var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(input, options) {
    var body = (options = options || {}).body;

    if (input instanceof Request) {
      if (input.bodyUsed) throw new TypeError("Already read");
      this.url = input.url, this.credentials = input.credentials, options.headers || (this.headers = new Headers(input.headers)), this.method = input.method, this.mode = input.mode, this.signal = input.signal, body || null == input._bodyInit || (body = input._bodyInit, input.bodyUsed = !0);
    } else this.url = String(input);

    if (this.credentials = options.credentials || this.credentials || "same-origin", !options.headers && this.headers || (this.headers = new Headers(options.headers)), this.method = normalizeMethod(options.method || this.method || "GET"), this.mode = options.mode || this.mode || null, this.signal = options.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && body) throw new TypeError("Body not allowed for GET or HEAD requests");

    this._initBody(body);
  }

  function decode$1(body) {
    var form = new FormData();
    return body.trim().split("&").forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split("="),
            name = split.shift().replace(/\+/g, " "),
            value = split.join("=").replace(/\+/g, " ");
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    }), form;
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers(),
        preProcessedHeaders;
    return rawHeaders.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function (line) {
      var parts = line.split(":"),
          key = parts.shift().trim();

      if (key) {
        var value = parts.join(":").trim();
        headers.append(key, value);
      }
    }), headers;
  }

  function Response(bodyInit, options) {
    options || (options = {}), this.type = "default", this.status = void 0 === options.status ? 200 : options.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = "statusText" in options ? options.statusText : "OK", this.headers = new Headers(options.headers), this.url = options.url || "", this._initBody(bodyInit);
  }

  Request.prototype.clone = function () {
    return new Request(this, {
      body: this._bodyInit
    });
  }, Body.call(Request.prototype), Body.call(Response.prototype), Response.prototype.clone = function () {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  }, Response.error = function () {
    var response = new Response(null, {
      status: 0,
      statusText: ""
    });
    return response.type = "error", response;
  };
  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url, status) {
    if (-1 === redirectStatuses.indexOf(status)) throw new RangeError("Invalid status code");
    return new Response(null, {
      status: status,
      headers: {
        location: url
      }
    });
  };

  var DOMException = self.DOMException;

  try {
    new DOMException();
  } catch (err) {
    (DOMException = function DOMException(message, name) {
      this.message = message, this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    }).prototype = Object.create(Error.prototype), DOMException.prototype.constructor = DOMException;
  }

  function fetch$1(input, init) {
    return new Promise(function (resolve, reject) {
      var request = new Request(input, init);
      if (request.signal && request.signal.aborted) return reject(new DOMException("Aborted", "AbortError"));
      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || "")
        };
        options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
        var body = "response" in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      }, xhr.onerror = function () {
        reject(new TypeError("Network request failed"));
      }, xhr.ontimeout = function () {
        reject(new TypeError("Network request failed"));
      }, xhr.onabort = function () {
        reject(new DOMException("Aborted", "AbortError"));
      }, xhr.open(request.method, request.url, !0), "include" === request.credentials ? xhr.withCredentials = !0 : "omit" === request.credentials && (xhr.withCredentials = !1), "responseType" in xhr && support_blob && (xhr.responseType = "blob"), request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      }), request.signal && (request.signal.addEventListener("abort", abortXhr), xhr.onreadystatechange = function () {
        4 === xhr.readyState && request.signal.removeEventListener("abort", abortXhr);
      }), xhr.send(void 0 === request._bodyInit ? null : request._bodyInit);
    });
  }

  fetch$1.polyfill = !0, self.fetch || (self.fetch = fetch$1, self.Headers = Headers, self.Request = Request, self.Response = Response);

  var O = "object",
      check = function check(it) {
    return it && it.Math == Math && it;
  },
      global_1 = check((typeof globalThis === "undefined" ? "undefined" : _typeof2(globalThis)) == O && globalThis) || check((typeof window === "undefined" ? "undefined" : _typeof2(window)) == O && window) || check((typeof self === "undefined" ? "undefined" : _typeof2(self)) == O && self) || check(_typeof2(commonjsGlobal) == O && commonjsGlobal) || Function("return this")(),
      fails = function fails(exec) {
    try {
      return !!exec();
    } catch (error) {
      return !0;
    }
  },
      descriptors = !fails(function () {
    return 7 != Object.defineProperty({}, "a", {
      get: function get() {
        return 7;
      }
    }).a;
  }),
      isObject$1 = function isObject$1(it) {
    return "object" == _typeof2(it) ? null !== it : "function" == typeof it;
  },
      document$1 = global_1.document,
      EXISTS = isObject$1(document$1) && isObject$1(document$1.createElement),
      documentCreateElement = function documentCreateElement(it) {
    return EXISTS ? document$1.createElement(it) : {};
  },
      ie8DomDefine = !descriptors && !fails(function () {
    return 7 != Object.defineProperty(documentCreateElement("div"), "a", {
      get: function get() {
        return 7;
      }
    }).a;
  }),
      anObject = function anObject(it) {
    if (!isObject$1(it)) throw TypeError(String(it) + " is not an object");
    return it;
  },
      toPrimitive = function toPrimitive(input, PREFERRED_STRING) {
    if (!isObject$1(input)) return input;
    var fn, val;
    if (PREFERRED_STRING && "function" == typeof (fn = input.toString) && !isObject$1(val = fn.call(input))) return val;
    if ("function" == typeof (fn = input.valueOf) && !isObject$1(val = fn.call(input))) return val;
    if (!PREFERRED_STRING && "function" == typeof (fn = input.toString) && !isObject$1(val = fn.call(input))) return val;
    throw TypeError("Can't convert object to primitive value");
  },
      nativeDefineProperty = Object.defineProperty,
      f,
      objectDefineProperty = {
    f: descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
      if (anObject(O), P = toPrimitive(P, !0), anObject(Attributes), ie8DomDefine) try {
        return nativeDefineProperty(O, P, Attributes);
      } catch (error) {}
      if ("get" in Attributes || "set" in Attributes) throw TypeError("Accessors not supported");
      return "value" in Attributes && (O[P] = Attributes.value), O;
    }
  },
      createPropertyDescriptor = function createPropertyDescriptor(bitmap, value) {
    return {
      enumerable: !(1 & bitmap),
      configurable: !(2 & bitmap),
      writable: !(4 & bitmap),
      value: value
    };
  },
      hide = descriptors ? function (object, key, value) {
    return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
  } : function (object, key, value) {
    return object[key] = value, object;
  },
      setGlobal = function setGlobal(key, value) {
    try {
      hide(global_1, key, value);
    } catch (error) {
      global_1[key] = value;
    }

    return value;
  },
      isPure = !1,
      shared = createCommonjsModule(function (module) {
    var SHARED = "__core-js_shared__",
        store = global_1[SHARED] || setGlobal(SHARED, {});
    (module.exports = function (key, value) {
      return store[key] || (store[key] = void 0 !== value ? value : {});
    })("versions", []).push({
      version: "3.1.3",
      mode: "global",
      copyright: "Â© 2019 Denis Pushkarev (zloirock.ru)"
    });
  }),
      hasOwnProperty = {}.hasOwnProperty,
      has = function has(it, key) {
    return hasOwnProperty.call(it, key);
  },
      functionToString = shared("native-function-to-string", Function.toString),
      WeakMap = global_1.WeakMap,
      nativeWeakMap = "function" == typeof WeakMap && /native code/.test(functionToString.call(WeakMap)),
      id = 0,
      postfix = Math.random(),
      uid = function uid(key) {
    return "Symbol(" + String(void 0 === key ? "" : key) + ")_" + (++id + postfix).toString(36);
  },
      keys = shared("keys"),
      sharedKey = function sharedKey(key) {
    return keys[key] || (keys[key] = uid(key));
  },
      hiddenKeys = {},
      WeakMap$1 = global_1.WeakMap,
      set,
      get,
      has$1,
      enforce = function enforce(it) {
    return has$1(it) ? get(it) : set(it, {});
  },
      getterFor = function getterFor(TYPE) {
    return function (it) {
      var state;
      if (!isObject$1(it) || (state = get(it)).type !== TYPE) throw TypeError("Incompatible receiver, " + TYPE + " required");
      return state;
    };
  };

  if (nativeWeakMap) {
    var store = new WeakMap$1(),
        wmget = store.get,
        wmhas = store.has,
        wmset = store.set;
    set = function set(it, metadata) {
      return wmset.call(store, it, metadata), metadata;
    }, get = function get(it) {
      return wmget.call(store, it) || {};
    }, has$1 = function has$1(it) {
      return wmhas.call(store, it);
    };
  } else {
    var STATE = sharedKey("state");
    hiddenKeys[STATE] = !0, set = function set(it, metadata) {
      return hide(it, STATE, metadata), metadata;
    }, get = function get(it) {
      return has(it, STATE) ? it[STATE] : {};
    }, has$1 = function has$1(it) {
      return has(it, STATE);
    };
  }

  var internalState = {
    set: set,
    get: get,
    has: has$1,
    enforce: enforce,
    getterFor: getterFor
  },
      redefine = createCommonjsModule(function (module) {
    var getInternalState = internalState.get,
        enforceInternalState = internalState.enforce,
        TEMPLATE = String(functionToString).split("toString");
    shared("inspectSource", function (it) {
      return functionToString.call(it);
    }), (module.exports = function (O, key, value, options) {
      var unsafe = !!options && !!options.unsafe,
          simple = !!options && !!options.enumerable,
          noTargetGet = !!options && !!options.noTargetGet;
      "function" == typeof value && ("string" != typeof key || has(value, "name") || hide(value, "name", key), enforceInternalState(value).source = TEMPLATE.join("string" == typeof key ? key : "")), O !== global_1 ? (unsafe ? !noTargetGet && O[key] && (simple = !0) : delete O[key], simple ? O[key] = value : hide(O, key, value)) : simple ? O[key] = value : setGlobal(key, value);
    })(Function.prototype, "toString", function toString() {
      return "function" == typeof this && getInternalState(this).source || functionToString.call(this);
    });
  }),
      toString = {}.toString,
      classofRaw = function classofRaw(it) {
    return toString.call(it).slice(8, -1);
  },
      nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
    return !String(Symbol());
  }),
      Symbol$1 = global_1.Symbol,
      store$1 = shared("wks"),
      wellKnownSymbol = function wellKnownSymbol(name) {
    return store$1[name] || (store$1[name] = nativeSymbol && Symbol$1[name] || (nativeSymbol ? Symbol$1 : uid)("Symbol." + name));
  },
      TO_STRING_TAG = wellKnownSymbol("toStringTag"),
      CORRECT_ARGUMENTS = "Arguments" == classofRaw(function () {
    return arguments;
  }()),
      tryGet = function tryGet(it, key) {
    try {
      return it[key];
    } catch (error) {}
  },
      classof = function classof(it) {
    var O, tag, result;
    return void 0 === it ? "Undefined" : null === it ? "Null" : "string" == typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : "Object" == (result = classofRaw(O)) && "function" == typeof O.callee ? "Arguments" : result;
  },
      TO_STRING_TAG$1,
      test = {};

  test[wellKnownSymbol("toStringTag")] = "z";
  var objectToString = "[object z]" !== String(test) ? function toString() {
    return "[object " + classof(this) + "]";
  } : test.toString,
      ObjectPrototype = Object.prototype;
  objectToString !== ObjectPrototype.toString && redefine(ObjectPrototype, "toString", objectToString, {
    unsafe: !0
  });

  var ceil = Math.ceil,
      floor = Math.floor,
      toInteger = function toInteger(argument) {
    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
  },
      requireObjectCoercible = function requireObjectCoercible(it) {
    if (null == it) throw TypeError("Can't call method on " + it);
    return it;
  },
      createMethod = function createMethod(CONVERT_TO_STRING) {
    return function ($this, pos) {
      var S = String(requireObjectCoercible($this)),
          position = toInteger(pos),
          size = S.length,
          first,
          second;
      return position < 0 || position >= size ? CONVERT_TO_STRING ? "" : void 0 : (first = S.charCodeAt(position)) < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : second - 56320 + (first - 55296 << 10) + 65536;
    };
  },
      stringMultibyte = {
    codeAt: createMethod(!1),
    charAt: createMethod(!0)
  },
      nativePropertyIsEnumerable = {}.propertyIsEnumerable,
      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
      NASHORN_BUG,
      f$1,
      objectPropertyIsEnumerable = {
    f: getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
      1: 2
    }, 1) ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor(this, V);
      return !!descriptor && descriptor.enumerable;
    } : nativePropertyIsEnumerable
  },
      split = "".split,
      indexedObject = fails(function () {
    return !Object("z").propertyIsEnumerable(0);
  }) ? function (it) {
    return "String" == classofRaw(it) ? split.call(it, "") : Object(it);
  } : Object,
      toIndexedObject = function toIndexedObject(it) {
    return indexedObject(requireObjectCoercible(it));
  },
      nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
      f$2,
      objectGetOwnPropertyDescriptor = {
    f: descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
      if (O = toIndexedObject(O), P = toPrimitive(P, !0), ie8DomDefine) try {
        return nativeGetOwnPropertyDescriptor(O, P);
      } catch (error) {}
      if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
    }
  },
      path = global_1,
      aFunction = function aFunction(variable) {
    return "function" == typeof variable ? variable : void 0;
  },
      getBuiltIn = function getBuiltIn(namespace, method) {
    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace]) : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
  },
      min = Math.min,
      toLength = function toLength(argument) {
    return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;
  },
      max = Math.max,
      min$1 = Math.min,
      toAbsoluteIndex = function toAbsoluteIndex(index, length) {
    var integer = toInteger(index);
    return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
  },
      createMethod$1 = function createMethod$1(IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIndexedObject($this),
          length = toLength(O.length),
          index = toAbsoluteIndex(fromIndex, length),
          value;

      if (IS_INCLUDES && el != el) {
        for (; length > index;) {
          if ((value = O[index++]) != value) return !0;
        }
      } else for (; length > index; index++) {
        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
      }

      return !IS_INCLUDES && -1;
    };
  },
      arrayIncludes,
      indexOf = {
    includes: createMethod$1(!0),
    indexOf: createMethod$1(!1)
  }.indexOf,
      objectKeysInternal = function objectKeysInternal(object, names) {
    var O = toIndexedObject(object),
        i = 0,
        result = [],
        key;

    for (key in O) {
      !has(hiddenKeys, key) && has(O, key) && result.push(key);
    }

    for (; names.length > i;) {
      has(O, key = names[i++]) && (~indexOf(result, key) || result.push(key));
    }

    return result;
  },
      enumBugKeys = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"],
      hiddenKeys$1 = enumBugKeys.concat("length", "prototype"),
      f$3,
      objectGetOwnPropertyNames = {
    f: Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return objectKeysInternal(O, hiddenKeys$1);
    }
  },
      f$4,
      objectGetOwnPropertySymbols = {
    f: Object.getOwnPropertySymbols
  },
      ownKeys = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
    var keys = objectGetOwnPropertyNames.f(anObject(it)),
        getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
  },
      copyConstructorProperties = function copyConstructorProperties(target, source) {
    for (var keys = ownKeys(source), defineProperty = objectDefineProperty.f, getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f, i = 0; i < keys.length; i++) {
      var key = keys[i];
      has(target, key) || defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  },
      replacement = /#|\.prototype\./,
      isForced = function isForced(feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL || value != NATIVE && ("function" == typeof detection ? fails(detection) : !!detection);
  },
      normalize = isForced.normalize = function (string) {
    return String(string).replace(replacement, ".").toLowerCase();
  },
      data = isForced.data = {},
      NATIVE = isForced.NATIVE = "N",
      POLYFILL = isForced.POLYFILL = "P",
      isForced_1 = isForced,
      getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f,
      _export = function _export(options, source) {
    var TARGET = options.target,
        GLOBAL = options.global,
        STATIC = options.stat,
        FORCED,
        target,
        key,
        targetProperty,
        sourceProperty,
        descriptor;
    if (target = GLOBAL ? global_1 : STATIC ? global_1[TARGET] || setGlobal(TARGET, {}) : (global_1[TARGET] || {}).prototype) for (key in source) {
      if (sourceProperty = source[key], targetProperty = options.noTargetGet ? (descriptor = getOwnPropertyDescriptor$1(target, key)) && descriptor.value : target[key], !(FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced)) && void 0 !== targetProperty) {
        if (_typeof2(sourceProperty) == _typeof2(targetProperty)) continue;
        copyConstructorProperties(sourceProperty, targetProperty);
      }

      (options.sham || targetProperty && targetProperty.sham) && hide(sourceProperty, "sham", !0), redefine(target, key, sourceProperty, options);
    }
  },
      toObject = function toObject(argument) {
    return Object(requireObjectCoercible(argument));
  },
      correctPrototypeGetter = !fails(function () {
    function F() {}

    return F.prototype.constructor = null, Object.getPrototypeOf(new F()) !== F.prototype;
  }),
      IE_PROTO = sharedKey("IE_PROTO"),
      ObjectPrototype$1 = Object.prototype,
      objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
    return O = toObject(O), has(O, IE_PROTO) ? O[IE_PROTO] : "function" == typeof O.constructor && O instanceof O.constructor ? O.constructor.prototype : O instanceof Object ? ObjectPrototype$1 : null;
  },
      ITERATOR = wellKnownSymbol("iterator"),
      BUGGY_SAFARI_ITERATORS = !1,
      returnThis = function returnThis() {
    return this;
  },
      IteratorPrototype,
      PrototypeOfArrayIteratorPrototype,
      arrayIterator;

  [].keys && ("next" in (arrayIterator = [].keys()) ? (PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator))) !== Object.prototype && (IteratorPrototype = PrototypeOfArrayIteratorPrototype) : BUGGY_SAFARI_ITERATORS = !0), null == IteratorPrototype && (IteratorPrototype = {}), has(IteratorPrototype, ITERATOR) || hide(IteratorPrototype, ITERATOR, returnThis);

  var iteratorsCore = {
    IteratorPrototype: IteratorPrototype,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
  },
      objectKeys = Object.keys || function keys(O) {
    return objectKeysInternal(O, enumBugKeys);
  },
      objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);

    for (var keys = objectKeys(Properties), length = keys.length, index = 0, key; length > index;) {
      objectDefineProperty.f(O, key = keys[index++], Properties[key]);
    }

    return O;
  },
      html = getBuiltIn("document", "documentElement"),
      IE_PROTO$1 = sharedKey("IE_PROTO"),
      PROTOTYPE = "prototype",
      Empty = function Empty() {},
      _createDict = function createDict() {
    var iframe = documentCreateElement("iframe"),
        length = enumBugKeys.length,
        lt = "<",
        script = "script",
        gt = ">",
        js = "javascript:",
        iframeDocument;

    for (iframe.style.display = "none", html.appendChild(iframe), iframe.src = String(js), (iframeDocument = iframe.contentWindow.document).open(), iframeDocument.write("<script>document.F=Object<\/script>"), iframeDocument.close(), _createDict = iframeDocument.F; length--;) {
      delete _createDict.prototype[enumBugKeys[length]];
    }

    return _createDict();
  },
      objectCreate = Object.create || function create(O, Properties) {
    var result;
    return null !== O ? (Empty.prototype = anObject(O), result = new Empty(), Empty.prototype = null, result[IE_PROTO$1] = O) : result = _createDict(), void 0 === Properties ? result : objectDefineProperties(result, Properties);
  };

  hiddenKeys[IE_PROTO$1] = !0;

  var defineProperty = objectDefineProperty.f,
      TO_STRING_TAG$2 = wellKnownSymbol("toStringTag"),
      setToStringTag = function setToStringTag(it, TAG, STATIC) {
    it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG$2) && defineProperty(it, TO_STRING_TAG$2, {
      configurable: !0,
      value: TAG
    });
  },
      iterators = {},
      IteratorPrototype$1 = iteratorsCore.IteratorPrototype,
      returnThis$1 = function returnThis$1() {
    return this;
  },
      createIteratorConstructor = function createIteratorConstructor(IteratorConstructor, NAME, next) {
    var TO_STRING_TAG = NAME + " Iterator";
    return IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, {
      next: createPropertyDescriptor(1, next)
    }), setToStringTag(IteratorConstructor, TO_STRING_TAG, !1), iterators[TO_STRING_TAG] = returnThis$1, IteratorConstructor;
  },
      aPossiblePrototype = function aPossiblePrototype(it) {
    if (!isObject$1(it) && null !== it) throw TypeError("Can't set " + String(it) + " as a prototype");
    return it;
  },
      objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function () {
    var CORRECT_SETTER = !1,
        test = {},
        setter;

    try {
      (setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(test, []), CORRECT_SETTER = test instanceof Array;
    } catch (error) {}

    return function setPrototypeOf(O, proto) {
      return anObject(O), aPossiblePrototype(proto), CORRECT_SETTER ? setter.call(O, proto) : O.__proto__ = proto, O;
    };
  }() : void 0),
      IteratorPrototype$2 = iteratorsCore.IteratorPrototype,
      BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS,
      ITERATOR$1 = wellKnownSymbol("iterator"),
      KEYS = "keys",
      VALUES = "values",
      ENTRIES = "entries",
      returnThis$2 = function returnThis$2() {
    return this;
  },
      defineIterator = function defineIterator(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);

    var getIterationMethod = function getIterationMethod(KIND) {
      if (KIND === DEFAULT && defaultIterator) return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];

      switch (KIND) {
        case KEYS:
          return function keys() {
            return new IteratorConstructor(this, KIND);
          };

        case VALUES:
          return function values() {
            return new IteratorConstructor(this, KIND);
          };

        case ENTRIES:
          return function entries() {
            return new IteratorConstructor(this, KIND);
          };
      }

      return function () {
        return new IteratorConstructor(this);
      };
    },
        TO_STRING_TAG = NAME + " Iterator",
        INCORRECT_VALUES_NAME = !1,
        IterablePrototype = Iterable.prototype,
        nativeIterator = IterablePrototype[ITERATOR$1] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT],
        defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT),
        anyNativeIterator = "Array" == NAME && IterablePrototype.entries || nativeIterator,
        CurrentIteratorPrototype,
        methods,
        KEY;

    if (anyNativeIterator && (CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable())), IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next && (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2 && (objectSetPrototypeOf ? objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2) : "function" != typeof CurrentIteratorPrototype[ITERATOR$1] && hide(CurrentIteratorPrototype, ITERATOR$1, returnThis$2)), setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, !0))), DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES && (INCORRECT_VALUES_NAME = !0, defaultIterator = function values() {
      return nativeIterator.call(this);
    }), IterablePrototype[ITERATOR$1] !== defaultIterator && hide(IterablePrototype, ITERATOR$1, defaultIterator), iterators[NAME] = defaultIterator, DEFAULT) if (methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    }, FORCED) for (KEY in methods) {
      !BUGGY_SAFARI_ITERATORS$1 && !INCORRECT_VALUES_NAME && KEY in IterablePrototype || redefine(IterablePrototype, KEY, methods[KEY]);
    } else _export({
      target: NAME,
      proto: !0,
      forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME
    }, methods);
    return methods;
  },
      charAt = stringMultibyte.charAt,
      STRING_ITERATOR = "String Iterator",
      setInternalState = internalState.set,
      getInternalState = internalState.getterFor(STRING_ITERATOR);

  defineIterator(String, "String", function (iterated) {
    setInternalState(this, {
      type: STRING_ITERATOR,
      string: String(iterated),
      index: 0
    });
  }, function next() {
    var state = getInternalState(this),
        string = state.string,
        index = state.index,
        point;
    return index >= string.length ? {
      value: void 0,
      done: !0
    } : (point = charAt(string, index), state.index += point.length, {
      value: point,
      done: !1
    });
  });
  var domIterables = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  },
      UNSCOPABLES = wellKnownSymbol("unscopables"),
      ArrayPrototype = Array.prototype;
  null == ArrayPrototype[UNSCOPABLES] && hide(ArrayPrototype, UNSCOPABLES, objectCreate(null));

  var addToUnscopables = function addToUnscopables(key) {
    ArrayPrototype[UNSCOPABLES][key] = !0;
  },
      ARRAY_ITERATOR = "Array Iterator",
      setInternalState$1 = internalState.set,
      getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR),
      es_array_iterator = defineIterator(Array, "Array", function (iterated, kind) {
    setInternalState$1(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject(iterated),
      index: 0,
      kind: kind
    });
  }, function () {
    var state = getInternalState$1(this),
        target = state.target,
        kind = state.kind,
        index = state.index++;
    return !target || index >= target.length ? (state.target = void 0, {
      value: void 0,
      done: !0
    }) : "keys" == kind ? {
      value: index,
      done: !1
    } : "values" == kind ? {
      value: target[index],
      done: !1
    } : {
      value: [index, target[index]],
      done: !1
    };
  }, "values");

  iterators.Arguments = iterators.Array, addToUnscopables("keys"), addToUnscopables("values"), addToUnscopables("entries");
  var ITERATOR$2 = wellKnownSymbol("iterator"),
      TO_STRING_TAG$3 = wellKnownSymbol("toStringTag"),
      ArrayValues = es_array_iterator.values;

  for (var COLLECTION_NAME in domIterables) {
    var Collection$1 = global_1[COLLECTION_NAME],
        CollectionPrototype = Collection$1 && Collection$1.prototype;

    if (CollectionPrototype) {
      if (CollectionPrototype[ITERATOR$2] !== ArrayValues) try {
        hide(CollectionPrototype, ITERATOR$2, ArrayValues);
      } catch (error) {
        CollectionPrototype[ITERATOR$2] = ArrayValues;
      }
      if (CollectionPrototype[TO_STRING_TAG$3] || hide(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME), domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {
        if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
          hide(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
        } catch (error) {
          CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
        }
      }
    }
  }

  var redefineAll = function redefineAll(target, src, options) {
    for (var key in src) {
      redefine(target, key, src[key], options);
    }

    return target;
  },
      SPECIES = wellKnownSymbol("species"),
      setSpecies = function setSpecies(CONSTRUCTOR_NAME) {
    var Constructor = getBuiltIn(CONSTRUCTOR_NAME),
        defineProperty = objectDefineProperty.f;
    descriptors && Constructor && !Constructor[SPECIES] && defineProperty(Constructor, SPECIES, {
      configurable: !0,
      get: function get() {
        return this;
      }
    });
  },
      aFunction$1 = function aFunction$1(it) {
    if ("function" != typeof it) throw TypeError(String(it) + " is not a function");
    return it;
  },
      anInstance = function anInstance(it, Constructor, name) {
    if (!(it instanceof Constructor)) throw TypeError("Incorrect " + (name ? name + " " : "") + "invocation");
    return it;
  },
      ITERATOR$3 = wellKnownSymbol("iterator"),
      ArrayPrototype$1 = Array.prototype,
      isArrayIteratorMethod = function isArrayIteratorMethod(it) {
    return void 0 !== it && (iterators.Array === it || ArrayPrototype$1[ITERATOR$3] === it);
  },
      bindContext = function bindContext(fn, that, length) {
    if (aFunction$1(fn), void 0 === that) return fn;

    switch (length) {
      case 0:
        return function () {
          return fn.call(that);
        };

      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function () {
      return fn.apply(that, arguments);
    };
  },
      ITERATOR$4 = wellKnownSymbol("iterator"),
      getIteratorMethod = function getIteratorMethod(it) {
    if (null != it) return it[ITERATOR$4] || it["@@iterator"] || iterators[classof(it)];
  },
      callWithSafeIterationClosing = function callWithSafeIterationClosing(iterator, fn, value, ENTRIES) {
    try {
      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (error) {
      var returnMethod = iterator.return;
      throw void 0 !== returnMethod && anObject(returnMethod.call(iterator)), error;
    }
  },
      iterate_1 = createCommonjsModule(function (module) {
    var Result = function Result(stopped, result) {
      this.stopped = stopped, this.result = result;
    },
        iterate;

    (module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
      var boundFunction = bindContext(fn, that, AS_ENTRIES ? 2 : 1),
          iterator,
          iterFn,
          index,
          length,
          result,
          step;
      if (IS_ITERATOR) iterator = iterable;else {
        if ("function" != typeof (iterFn = getIteratorMethod(iterable))) throw TypeError("Target is not iterable");

        if (isArrayIteratorMethod(iterFn)) {
          for (index = 0, length = toLength(iterable.length); length > index; index++) {
            if ((result = AS_ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index])) && result instanceof Result) return result;
          }

          return new Result(!1);
        }

        iterator = iterFn.call(iterable);
      }

      for (; !(step = iterator.next()).done;) {
        if ((result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES)) && result instanceof Result) return result;
      }

      return new Result(!1);
    }).stop = function (result) {
      return new Result(!0, result);
    };
  }),
      ITERATOR$5 = wellKnownSymbol("iterator"),
      SAFE_CLOSING = !1;

  try {
    var called = 0,
        iteratorWithReturn = {
      next: function next() {
        return {
          done: !!called++
        };
      },
      return: function _return() {
        SAFE_CLOSING = !0;
      }
    };
    iteratorWithReturn[ITERATOR$5] = function () {
      return this;
    }, Array.from(iteratorWithReturn, function () {
      throw 2;
    });
  } catch (error) {}

  var checkCorrectnessOfIteration = function checkCorrectnessOfIteration(exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return !1;
    var ITERATION_SUPPORT = !1;

    try {
      var object = {};
      object[ITERATOR$5] = function () {
        return {
          next: function next() {
            return {
              done: ITERATION_SUPPORT = !0
            };
          }
        };
      }, exec(object);
    } catch (error) {}

    return ITERATION_SUPPORT;
  },
      SPECIES$1 = wellKnownSymbol("species"),
      speciesConstructor = function speciesConstructor(O, defaultConstructor) {
    var C = anObject(O).constructor,
        S;
    return void 0 === C || null == (S = anObject(C)[SPECIES$1]) ? defaultConstructor : aFunction$1(S);
  },
      location$1 = global_1.location,
      set$1 = global_1.setImmediate,
      clear = global_1.clearImmediate,
      process = global_1.process,
      MessageChannel = global_1.MessageChannel,
      Dispatch = global_1.Dispatch,
      counter = 0,
      queue = {},
      ONREADYSTATECHANGE = "onreadystatechange",
      defer,
      channel,
      port,
      run = function run(id) {
    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id], fn();
    }
  },
      runner = function runner(id) {
    return function () {
      run(id);
    };
  },
      listener = function listener(event) {
    run(event.data);
  },
      post = function post(id) {
    global_1.postMessage(id + "", location$1.protocol + "//" + location$1.host);
  };

  set$1 && clear || (set$1 = function setImmediate(fn) {
    for (var args = [], i = 1; arguments.length > i;) {
      args.push(arguments[i++]);
    }

    return queue[++counter] = function () {
      ("function" == typeof fn ? fn : Function(fn)).apply(void 0, args);
    }, defer(counter), counter;
  }, clear = function clearImmediate(id) {
    delete queue[id];
  }, "process" == classofRaw(process) ? defer = function defer(id) {
    process.nextTick(runner(id));
  } : Dispatch && Dispatch.now ? defer = function defer(id) {
    Dispatch.now(runner(id));
  } : MessageChannel ? (port = (channel = new MessageChannel()).port2, channel.port1.onmessage = listener, defer = bindContext(port.postMessage, port, 1)) : !global_1.addEventListener || "function" != typeof postMessage || global_1.importScripts || fails(post) ? defer = ONREADYSTATECHANGE in documentCreateElement("script") ? function (id) {
    html.appendChild(documentCreateElement("script")).onreadystatechange = function () {
      html.removeChild(this), run(id);
    };
  } : function (id) {
    setTimeout(runner(id), 0);
  } : (defer = post, global_1.addEventListener("message", listener, !1)));
  var task = {
    set: set$1,
    clear: clear
  },
      userAgent = getBuiltIn("navigator", "userAgent") || "",
      getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f,
      macrotask = task.set,
      MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver,
      process$1 = global_1.process,
      Promise$1 = global_1.Promise,
      IS_NODE = "process" == classofRaw(process$1),
      queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global_1, "queueMicrotask"),
      queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value,
      flush,
      head,
      last,
      notify,
      toggle,
      node,
      promise;
  queueMicrotask || (flush = function flush() {
    var parent, fn;

    for (IS_NODE && (parent = process$1.domain) && parent.exit(); head;) {
      fn = head.fn, head = head.next;

      try {
        fn();
      } catch (error) {
        throw head ? notify() : last = void 0, error;
      }
    }

    last = void 0, parent && parent.enter();
  }, IS_NODE ? notify = function notify() {
    process$1.nextTick(flush);
  } : MutationObserver && !/(iphone|ipod|ipad).*applewebkit/i.test(userAgent) ? (toggle = !0, node = document.createTextNode(""), new MutationObserver(flush).observe(node, {
    characterData: !0
  }), notify = function notify() {
    node.data = toggle = !toggle;
  }) : Promise$1 && Promise$1.resolve ? (promise = Promise$1.resolve(void 0), notify = function notify() {
    promise.then(flush);
  }) : notify = function notify() {
    macrotask.call(global_1, flush);
  });

  var microtask = queueMicrotask || function (fn) {
    var task = {
      fn: fn,
      next: void 0
    };
    last && (last.next = task), head || (head = task, notify()), last = task;
  },
      PromiseCapability = function PromiseCapability(C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (void 0 !== resolve || void 0 !== reject) throw TypeError("Bad Promise constructor");
      resolve = $$resolve, reject = $$reject;
    }), this.resolve = aFunction$1(resolve), this.reject = aFunction$1(reject);
  },
      f$5,
      newPromiseCapability = {
    f: function f(C) {
      return new PromiseCapability(C);
    }
  },
      promiseResolve = function promiseResolve(C, x) {
    if (anObject(C), isObject$1(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability.f(C),
        resolve;
    return (0, promiseCapability.resolve)(x), promiseCapability.promise;
  },
      hostReportErrors = function hostReportErrors(a, b) {
    var console = global_1.console;
    console && console.error && (1 === arguments.length ? console.error(a) : console.error(a, b));
  },
      perform = function perform(exec) {
    try {
      return {
        error: !1,
        value: exec()
      };
    } catch (error) {
      return {
        error: !0,
        value: error
      };
    }
  },
      task$1 = task.set,
      SPECIES$2 = wellKnownSymbol("species"),
      PROMISE = "Promise",
      getInternalState$2 = internalState.get,
      setInternalState$2 = internalState.set,
      getInternalPromiseState = internalState.getterFor(PROMISE),
      PromiseConstructor = global_1.Promise,
      TypeError$1 = global_1.TypeError,
      document$2 = global_1.document,
      process$2 = global_1.process,
      $fetch = global_1.fetch,
      versions = process$2 && process$2.versions,
      v8 = versions && versions.v8 || "",
      newPromiseCapability$1 = newPromiseCapability.f,
      newGenericPromiseCapability = newPromiseCapability$1,
      IS_NODE$1 = "process" == classofRaw(process$2),
      DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent),
      UNHANDLED_REJECTION = "unhandledrejection",
      REJECTION_HANDLED = "rejectionhandled",
      PENDING = 0,
      FULFILLED = 1,
      REJECTED = 2,
      HANDLED = 1,
      UNHANDLED = 2,
      Internal,
      OwnPromiseCapability,
      PromiseWrapper,
      FORCED = isForced_1(PROMISE, function () {
    var promise = PromiseConstructor.resolve(1),
        empty = function empty() {},
        FakePromise = (promise.constructor = {})[SPECIES$2] = function (exec) {
      exec(empty, empty);
    };

    return !((IS_NODE$1 || "function" == typeof PromiseRejectionEvent) && promise.then(empty) instanceof FakePromise && 0 !== v8.indexOf("6.6") && -1 === userAgent.indexOf("Chrome/66"));
  }),
      INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
    PromiseConstructor.all(iterable).catch(function () {});
  }),
      isThenable = function isThenable(it) {
    var then;
    return !(!isObject$1(it) || "function" != typeof (then = it.then)) && then;
  },
      notify$1 = function notify$1(promise, state, isReject) {
    if (!state.notified) {
      state.notified = !0;
      var chain = state.reactions;
      microtask(function () {
        for (var value = state.value, ok = 1 == state.state, index = 0; chain.length > index;) {
          var reaction = chain[index++],
              handler = ok ? reaction.ok : reaction.fail,
              resolve = reaction.resolve,
              reject = reaction.reject,
              domain = reaction.domain,
              result,
              then,
              exited;

          try {
            handler ? (ok || (2 === state.rejection && onHandleUnhandled(promise, state), state.rejection = 1), !0 === handler ? result = value : (domain && domain.enter(), result = handler(value), domain && (domain.exit(), exited = !0)), result === reaction.promise ? reject(TypeError$1("Promise-chain cycle")) : (then = isThenable(result)) ? then.call(result, resolve, reject) : resolve(result)) : reject(value);
          } catch (error) {
            domain && !exited && domain.exit(), reject(error);
          }
        }

        state.reactions = [], state.notified = !1, isReject && !state.rejection && onUnhandled(promise, state);
      });
    }
  },
      dispatchEvent = function dispatchEvent(name, promise, reason) {
    var event, handler;
    DISPATCH_EVENT ? ((event = document$2.createEvent("Event")).promise = promise, event.reason = reason, event.initEvent(name, !1, !0), global_1.dispatchEvent(event)) : event = {
      promise: promise,
      reason: reason
    }, (handler = global_1["on" + name]) ? handler(event) : name === UNHANDLED_REJECTION && hostReportErrors("Unhandled promise rejection", reason);
  },
      onUnhandled = function onUnhandled(promise, state) {
    task$1.call(global_1, function () {
      var value = state.value,
          IS_UNHANDLED,
          result;
      if (isUnhandled(state) && (result = perform(function () {
        IS_NODE$1 ? process$2.emit("unhandledRejection", value, promise) : dispatchEvent(UNHANDLED_REJECTION, promise, value);
      }), state.rejection = IS_NODE$1 || isUnhandled(state) ? 2 : 1, result.error)) throw result.value;
    });
  },
      isUnhandled = function isUnhandled(state) {
    return 1 !== state.rejection && !state.parent;
  },
      onHandleUnhandled = function onHandleUnhandled(promise, state) {
    task$1.call(global_1, function () {
      IS_NODE$1 ? process$2.emit("rejectionHandled", promise) : dispatchEvent(REJECTION_HANDLED, promise, state.value);
    });
  },
      bind = function bind(fn, promise, state, unwrap) {
    return function (value) {
      fn(promise, state, value, unwrap);
    };
  },
      internalReject = function internalReject(promise, state, value, unwrap) {
    state.done || (state.done = !0, unwrap && (state = unwrap), state.value = value, state.state = 2, notify$1(promise, state, !0));
  },
      internalResolve = function internalResolve(promise, state, value, unwrap) {
    if (!state.done) {
      state.done = !0, unwrap && (state = unwrap);

      try {
        if (promise === value) throw TypeError$1("Promise can't be resolved itself");
        var then = isThenable(value);
        then ? microtask(function () {
          var wrapper = {
            done: !1
          };

          try {
            then.call(value, bind(internalResolve, promise, wrapper, state), bind(internalReject, promise, wrapper, state));
          } catch (error) {
            internalReject(promise, wrapper, error, state);
          }
        }) : (state.value = value, state.state = 1, notify$1(promise, state, !1));
      } catch (error) {
        internalReject(promise, {
          done: !1
        }, error, state);
      }
    }
  };

  FORCED && (PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE), aFunction$1(executor), Internal.call(this);
    var state = getInternalState$2(this);

    try {
      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
    } catch (error) {
      internalReject(this, state, error);
    }
  }, (Internal = function Promise(executor) {
    setInternalState$2(this, {
      type: PROMISE,
      done: !1,
      notified: !1,
      parent: !1,
      reactions: [],
      rejection: !1,
      state: 0,
      value: void 0
    });
  }).prototype = redefineAll(PromiseConstructor.prototype, {
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this),
          reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
      return reaction.ok = "function" != typeof onFulfilled || onFulfilled, reaction.fail = "function" == typeof onRejected && onRejected, reaction.domain = IS_NODE$1 ? process$2.domain : void 0, state.parent = !0, state.reactions.push(reaction), 0 != state.state && notify$1(this, state, !1), reaction.promise;
    },
    catch: function _catch(onRejected) {
      return this.then(void 0, onRejected);
    }
  }), OwnPromiseCapability = function OwnPromiseCapability() {
    var promise = new Internal(),
        state = getInternalState$2(promise);
    this.promise = promise, this.resolve = bind(internalResolve, promise, state), this.reject = bind(internalReject, promise, state);
  }, newPromiseCapability.f = newPromiseCapability$1 = function newPromiseCapability$1(C) {
    return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  }, "function" == typeof $fetch && _export({
    global: !0,
    enumerable: !0,
    forced: !0
  }, {
    fetch: function fetch(input) {
      return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
    }
  })), _export({
    global: !0,
    wrap: !0,
    forced: FORCED
  }, {
    Promise: PromiseConstructor
  }), setToStringTag(PromiseConstructor, PROMISE, !1), setSpecies(PROMISE), PromiseWrapper = path.Promise, _export({
    target: PROMISE,
    stat: !0,
    forced: FORCED
  }, {
    reject: function reject(r) {
      var capability = newPromiseCapability$1(this);
      return capability.reject.call(void 0, r), capability.promise;
    }
  }), _export({
    target: PROMISE,
    stat: !0,
    forced: FORCED
  }, {
    resolve: function resolve(x) {
      return promiseResolve(this, x);
    }
  }), _export({
    target: PROMISE,
    stat: !0,
    forced: INCORRECT_ITERATION
  }, {
    all: function all(iterable) {
      var C = this,
          capability = newPromiseCapability$1(C),
          resolve = capability.resolve,
          reject = capability.reject,
          result = perform(function () {
        var $promiseResolve = aFunction$1(C.resolve),
            values = [],
            counter = 0,
            remaining = 1;
        iterate_1(iterable, function (promise) {
          var index = counter++,
              alreadyCalled = !1;
          values.push(void 0), remaining++, $promiseResolve.call(C, promise).then(function (value) {
            alreadyCalled || (alreadyCalled = !0, values[index] = value, --remaining || resolve(values));
          }, reject);
        }), --remaining || resolve(values);
      });
      return result.error && reject(result.value), capability.promise;
    },
    race: function race(iterable) {
      var C = this,
          capability = newPromiseCapability$1(C),
          reject = capability.reject,
          result = perform(function () {
        var $promiseResolve = aFunction$1(C.resolve);
        iterate_1(iterable, function (promise) {
          $promiseResolve.call(C, promise).then(capability.resolve, reject);
        });
      });
      return result.error && reject(result.value), capability.promise;
    }
  }), _export({
    target: "Promise",
    proto: !0,
    real: !0
  }, {
    finally: function _finally(onFinally) {
      var C = speciesConstructor(this, getBuiltIn("Promise")),
          isFunction = "function" == typeof onFinally;
      return this.then(isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () {
          return x;
        });
      } : onFinally, isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () {
          throw e;
        });
      } : onFinally);
    }
  });

  var promise$1 = path.Promise,
      $AggregateError = function AggregateError(errors, message) {
    var that = this;
    if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);
    objectSetPrototypeOf && (that = objectSetPrototypeOf(new Error(message), objectGetPrototypeOf(that)));
    var errorsArray = [];
    return iterate_1(errors, errorsArray.push, errorsArray), that.errors = errorsArray, void 0 !== message && hide(that, "message", String(message)), that;
  };

  $AggregateError.prototype = objectCreate(Error.prototype, {
    constructor: createPropertyDescriptor(5, $AggregateError),
    name: createPropertyDescriptor(5, "AggregateError")
  }), _export({
    global: !0
  }, {
    AggregateError: $AggregateError
  }), _export({
    target: "Promise",
    stat: !0
  }, {
    allSettled: function allSettled(iterable) {
      var C = this,
          capability = newPromiseCapability.f(C),
          resolve = capability.resolve,
          reject = capability.reject,
          result = perform(function () {
        var promiseResolve = aFunction$1(C.resolve),
            values = [],
            counter = 0,
            remaining = 1;
        iterate_1(iterable, function (promise) {
          var index = counter++,
              alreadyCalled = !1;
          values.push(void 0), remaining++, promiseResolve.call(C, promise).then(function (value) {
            alreadyCalled || (alreadyCalled = !0, values[index] = {
              status: "fulfilled",
              value: value
            }, --remaining || resolve(values));
          }, function (e) {
            alreadyCalled || (alreadyCalled = !0, values[index] = {
              status: "rejected",
              reason: e
            }, --remaining || resolve(values));
          });
        }), --remaining || resolve(values);
      });
      return result.error && reject(result.value), capability.promise;
    }
  }), _export({
    target: "Promise",
    stat: !0
  }, {
    try: function _try(callbackfn) {
      var promiseCapability = newPromiseCapability.f(this),
          result = perform(callbackfn);
      return (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value), promiseCapability.promise;
    }
  });
  var PROMISE_ANY_ERROR = "No one promise resolved";

  _export({
    target: "Promise",
    stat: !0
  }, {
    any: function any(iterable) {
      var C = this,
          capability = newPromiseCapability.f(C),
          resolve = capability.resolve,
          reject = capability.reject,
          result = perform(function () {
        var promiseResolve = aFunction$1(C.resolve),
            errors = [],
            counter = 0,
            remaining = 1,
            alreadyResolved = !1;
        iterate_1(iterable, function (promise) {
          var index = counter++,
              alreadyRejected = !1;
          errors.push(void 0), remaining++, promiseResolve.call(C, promise).then(function (value) {
            alreadyRejected || alreadyResolved || (alreadyResolved = !0, resolve(value));
          }, function (e) {
            alreadyRejected || alreadyResolved || (alreadyRejected = !0, errors[index] = e, --remaining || reject(new (getBuiltIn("AggregateError"))(errors, PROMISE_ANY_ERROR)));
          });
        }), --remaining || reject(new (getBuiltIn("AggregateError"))(errors, PROMISE_ANY_ERROR));
      });
      return result.error && reject(result.value), capability.promise;
    }
  });

  var MATCH = wellKnownSymbol("match"),
      isRegexp = function isRegexp(it) {
    var isRegExp;
    return isObject$1(it) && (void 0 !== (isRegExp = it[MATCH]) ? !!isRegExp : "RegExp" == classofRaw(it));
  },
      notARegexp = function notARegexp(it) {
    if (isRegexp(it)) throw TypeError("The method doesn't accept regular expressions");
    return it;
  },
      MATCH$1 = wellKnownSymbol("match"),
      correctIsRegexpLogic = function correctIsRegexpLogic(METHOD_NAME) {
    var regexp = /./;

    try {
      "/./"[METHOD_NAME](regexp);
    } catch (e) {
      try {
        return regexp[MATCH$1] = !1, "/./"[METHOD_NAME](regexp);
      } catch (f) {}
    }

    return !1;
  },
      nativeEndsWith = "".endsWith,
      min$2 = Math.min;

  _export({
    target: "String",
    proto: !0,
    forced: !correctIsRegexpLogic("endsWith")
  }, {
    endsWith: function endsWith(searchString) {
      var that = String(requireObjectCoercible(this));
      notARegexp(searchString);
      var endPosition = arguments.length > 1 ? arguments[1] : void 0,
          len = toLength(that.length),
          end = void 0 === endPosition ? len : min$2(toLength(endPosition), len),
          search = String(searchString);
      return nativeEndsWith ? nativeEndsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
    }
  });

  var call = Function.call,
      entryUnbind = function entryUnbind(CONSTRUCTOR, METHOD, length) {
    return bindContext(call, global_1[CONSTRUCTOR].prototype[METHOD], length);
  },
      endsWith = entryUnbind("String", "endsWith"),
      iterator = entryUnbind("Array", "values"),
      isArray$2 = Array.isArray || function isArray(arg) {
    return "Array" == classofRaw(arg);
  },
      SPECIES$3 = wellKnownSymbol("species"),
      arraySpeciesCreate = function arraySpeciesCreate(originalArray, length) {
    var C;
    return isArray$2(originalArray) && ("function" != typeof (C = originalArray.constructor) || C !== Array && !isArray$2(C.prototype) ? isObject$1(C) && null === (C = C[SPECIES$3]) && (C = void 0) : C = void 0), new (void 0 === C ? Array : C)(0 === length ? 0 : length);
  },
      push = [].push,
      createMethod$2 = function createMethod$2(TYPE) {
    var IS_MAP = 1 == TYPE,
        IS_FILTER = 2 == TYPE,
        IS_SOME = 3 == TYPE,
        IS_EVERY = 4 == TYPE,
        IS_FIND_INDEX = 6 == TYPE,
        NO_HOLES = 5 == TYPE || IS_FIND_INDEX;
    return function ($this, callbackfn, that, specificCreate) {
      for (var O = toObject($this), self = indexedObject(O), boundFunction = bindContext(callbackfn, that, 3), length = toLength(self.length), index = 0, create = specificCreate || arraySpeciesCreate, target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : void 0, value, result; length > index; index++) {
        if ((NO_HOLES || index in self) && (result = boundFunction(value = self[index], index, O), TYPE)) if (IS_MAP) target[index] = result;else if (result) switch (TYPE) {
          case 3:
            return !0;

          case 5:
            return value;

          case 6:
            return index;

          case 2:
            push.call(target, value);
        } else if (IS_EVERY) return !1;
      }

      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  },
      arrayIteration,
      $find = {
    forEach: createMethod$2(0),
    map: createMethod$2(1),
    filter: createMethod$2(2),
    some: createMethod$2(3),
    every: createMethod$2(4),
    find: createMethod$2(5),
    findIndex: createMethod$2(6)
  }.find,
      FIND = "find",
      SKIPS_HOLES = !0;

  FIND in [] && Array(1).find(function () {
    SKIPS_HOLES = !1;
  }), _export({
    target: "Array",
    proto: !0,
    forced: SKIPS_HOLES
  }, {
    find: function find(callbackfn) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  }), addToUnscopables(FIND);
  var find = entryUnbind("Array", "find"),
      nativeAssign = Object.assign,
      objectAssign = !nativeAssign || fails(function () {
    var A = {},
        B = {},
        symbol = Symbol(),
        alphabet = "abcdefghijklmnopqrst";
    return A[symbol] = 7, alphabet.split("").forEach(function (chr) {
      B[chr] = chr;
    }), 7 != nativeAssign({}, A)[symbol] || objectKeys(nativeAssign({}, B)).join("") != alphabet;
  }) ? function assign(target, source) {
    for (var T = toObject(target), argumentsLength = arguments.length, index = 1, getOwnPropertySymbols = objectGetOwnPropertySymbols.f, propertyIsEnumerable = objectPropertyIsEnumerable.f; argumentsLength > index;) {
      for (var S = indexedObject(arguments[index++]), keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S), length = keys.length, j = 0, key; length > j;) {
        key = keys[j++], descriptors && !propertyIsEnumerable.call(S, key) || (T[key] = S[key]);
      }
    }

    return T;
  } : nativeAssign;

  _export({
    target: "Object",
    stat: !0,
    forced: Object.assign !== objectAssign
  }, {
    assign: objectAssign
  });

  var assign = path.Object.assign,
      propertyIsEnumerable = objectPropertyIsEnumerable.f,
      createMethod$3 = function createMethod$3(TO_ENTRIES) {
    return function (it) {
      for (var O = toIndexedObject(it), keys = objectKeys(O), length = keys.length, i = 0, result = [], key; length > i;) {
        key = keys[i++], descriptors && !propertyIsEnumerable.call(O, key) || result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
      }

      return result;
    };
  },
      objectToArray,
      $values = {
    entries: createMethod$3(!0),
    values: createMethod$3(!1)
  }.values;

  _export({
    target: "Object",
    stat: !0
  }, {
    values: function values(O) {
      return $values(O);
    }
  });

  var values = path.Object.values,
      UpdatedShopifyBuy = function (_ShopifyBuy) {
    function UpdatedShopifyBuy() {
      return _ShopifyBuy.apply(this, arguments) || this;
    }

    return _inheritsLoose(UpdatedShopifyBuy, _ShopifyBuy), UpdatedShopifyBuy.buildClient = function buildClient(config) {
      var newConfig = Object.assign({}, config, {
        source: "buy-button-js"
      });
      return _ShopifyBuy.buildClient.call(this, newConfig);
    }, UpdatedShopifyBuy;
  }(shopifyBuy);

  return window.ShopifyBuy = window.ShopifyBuy || UpdatedShopifyBuy, UpdatedShopifyBuy.UI = window.ShopifyBuy.UI || {
    domains: {},
    init: function init(client) {
      var integrations = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          styleOverrides = arguments.length > 2 ? arguments[2] : void 0,
          uniqueClientKey = "".concat(client.config.domain, ".").concat(client.config.storefrontAccessToken);
      return this.domains[uniqueClientKey] || (this.domains[uniqueClientKey] = new UI(client, integrations, styleOverrides)), this.domains[uniqueClientKey];
    },
    adapterHelpers: {
      templates: {
        product: productTemplate
      }
    }
  }, UpdatedShopifyBuy;
}();"},null]}