{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/analytics/components/NewDonut.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/analytics/components/NewDonut.vue","mtime":1643027096188},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWludGVnZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQiOwoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KdmFyIGQzID0gcmVxdWlyZSgiZDMtMyIpOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJOZXdEb251dCIsCiAgcHJvcHM6IHsKICAgIGRhdGE6IEFycmF5LAogICAgeEtleTogU3RyaW5nLAogICAgeUtleTogU3RyaW5nLAogICAgY3VycmVuY3lfa2V5OiBTdHJpbmcKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgdm0gPSB0aGlzOwogICAgdGhpcy5kYXRhLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgcmV0dXJuIGJbdm0ueUtleV0gLSBhW3ZtLnlLZXldOwogICAgfSk7CiAgICB2YXIgc3VtX3l2YWwgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgIHN1bV95dmFsID0gc3VtX3l2YWwgKyB0aGlzLmRhdGFbaV1bdGhpcy55S2V5XTsKICAgIH0KCiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5kYXRhLmxlbmd0aDsgX2krKykgewogICAgICB0aGlzLmRhdGFbX2ldLlNoYXJlID0gKHRoaXMuZGF0YVtfaV1bdGhpcy55S2V5XSAvIHN1bV95dmFsICogMTAwKS50b0ZpeGVkKDIpICsgJyUnOyAvLyB0aGlzLmRhdGFbaV0KICAgIH0gLy8gdGhpcy5kYXRhID0gZGF0YTsKICAgIC8vIHRoaXMueEtleSA9ICJsYWJlbCI7CiAgICAvLyB0aGlzLnlLZXkgPSAiaW5zdGFuY2VzIjsKICAgIC8vIGNvbgoKCiAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCIjbmV3cGllIik7CiAgICB2YXIgY2FudmFzID0gZDMuc2VsZWN0KCIjY2FudmFzIik7CiAgICB2YXIgYXJ0ID0gZDMuc2VsZWN0KCIjYXJ0Iik7CiAgICB2YXIgbGFiZWxzID0gZDMuc2VsZWN0KCIjbGFiZWxzIik7IC8vIENyZWF0ZSB0aGUgcGllIGxheW91dCBmdW5jdGlvbi4KICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBhZGQgY29udmVuaWVuY2UKICAgIC8vIGRhdGEgdG8gb3VyIGV4aXN0aW5nIGRhdGEsIGxpa2UgCiAgICAvLyB0aGUgc3RhcnQgYW5nbGUgYW5kIGVuZCBhbmdsZQogICAgLy8gZm9yIGVhY2ggZGF0YSBlbGVtZW50LgoKICAgIHZhciBqaHdfcGllID0gZDMubGF5b3V0LnBpZSgpOwogICAgamh3X3BpZS52YWx1ZShmdW5jdGlvbiAoZCwgaSkgewogICAgICAvLyBUZWxscyB0aGUgbGF5b3V0IGZ1bmN0aW9uIHdoYXQKICAgICAgLy8gcHJvcGVydHkgb2Ygb3VyIGRhdGEgb2JqZWN0IHRvCiAgICAgIC8vIHVzZSBhcyB0aGUgdmFsdWUuCiAgICAgIHJldHVybiBkW3ZtLnlLZXldOwogICAgfSk7IC8vIFN0b3JlIG91ciBjaGFydCBkaW1lbnNpb25zCgogICAgdmFyIGNEaW0gPSB7CiAgICAgIGhlaWdodDogNTAwLAogICAgICB3aWR0aDogOTAwLAogICAgICBpbm5lclJhZGl1czogMTQwLAogICAgICBvdXRlclJhZGl1czogMTkwLAogICAgICBsYWJlbFJhZGl1czogMTk1CiAgICB9OyAvLyBTZXQgdGhlIHNpemUgb2Ygb3VyIFNWRyBlbGVtZW50CgogICAgc3ZnLmF0dHIoewogICAgICBoZWlnaHQ6IGNEaW0uaGVpZ2h0LAogICAgICB3aWR0aDogY0RpbS53aWR0aAogICAgfSk7IC8vIFRoaXMgdHJhbnNsYXRlIHByb3BlcnR5IG1vdmVzIHRoZSBvcmlnaW4gb2YgdGhlIGdyb3VwJ3MgY29vcmRpbmF0ZQogICAgLy8gc3BhY2UgdG8gdGhlIGNlbnRlciBvZiB0aGUgU1ZHIGVsZW1lbnQsIHNhdmluZyB1cyB0cmFuc2xhdGluZyBldmVyeQogICAgLy8gY29vcmRpbmF0ZSBpbmRpdmlkdWFsbHkuIAoKICAgIGNhbnZhcy5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKCIgKyBjRGltLndpZHRoIC8gMi4xOCArICIsIiArIGNEaW0ud2lkdGggLyAzLjQgKyAiKSIpOwogICAgdmFyIHBpZWRfZGF0YSA9IGpod19waWUodGhpcy5kYXRhKTsgLy8gVGhlIHBpZWRfYXJjIGZ1bmN0aW9uIHdlIG1ha2UgaGVyZSB3aWxsIGNhbGN1bGF0ZSB0aGUgcGF0aAogICAgLy8gaW5mb3JtYXRpb24gZm9yIGVhY2ggd2VkZ2UgYmFzZWQgb24gdGhlIGRhdGEgc2V0LiBUaGlzIGlzIAogICAgLy8gdXNlZCBpbiB0aGUgImQiIGF0dHJpYnV0ZS4KCiAgICB2YXIgcGllZF9hcmMgPSBkMy5zdmcuYXJjKCkuaW5uZXJSYWRpdXMoMTQwKS5vdXRlclJhZGl1cygxOTApLmNvcm5lclJhZGl1cyg2LjUpLnBhZEFuZ2xlKDAuMDEpOyAvLyBUaGlzIGlzIGFuIG9yZGluYWwgc2NhbGUgdGhhdCByZXR1cm5zIDEwIHByZWRlZmluZWQgY29sb3JzLgogICAgLy8gSXQgaXMgcGFydCBvZiBkMyBjb3JlLgogICAgLy8gdmFyIHBpZWRfY29sb3JzID0gZDMuc2NhbGUuY2F0ZWdvcnkyMCgpOwogICAgLy8gdmFyIHBpZWRfY29sb3JzID0gICBkMy5zY2FsZS5vcmRpbmFsKCkKICAgIC8vIC5yYW5nZShbIiNFQTMzNzkiLCAiIzAwQzdFNiIsICIjM0ZCQzExIiwgIiNGQkIzMTciLCAiIzVkNjJiNSIsICIjMjljM2JlIiwgIiNmMTcyNmUiLCAiIzYyYjU4ZiIsICIjZDA3NDNjIiwiI2NhMDAyMCIsIiNmNGE1ODIiLCIjOTJjNWRlIiwiIzA1NzFiMCIsICIjZDNmZTE0IiwgIiNmZWM3ZjgiLCAiIzBiN2IzZSIsICIjMGJmMGU5IiwnI0U2NjZCMycsICcjMzM5OTFBJywgJyNDQzk5OTknLCAnI0IzQjMxQScsICcjMDBFNjgwJywKICAgIC8vICAgICAgICAgJyNGRjlBQTInLCAnI0ZGQjdCMicsICcjRkZEQUMxJywgJyNCNUVBRDcnLCAnIzYzZDJhOCcsICIjMjI1YTRiIiwgIiNlNWRmNzMiLCAnIzY2NjZGRicsJyNmZjAwMDAJJywnI2EyNzk4ZicsJyNkN2M2Y2YnLCcjZTg4NzU4JywnI2IxM2ExNScsJyM2ZDM2NTYnLCcjZmZmYTkwJywnI2E0ZmZhYScsJyNhNmNiZmYnLCcjODUwMGY5JywnI2IwNzdiYScsJwkjNzY1Mjg0JywnIzk4NGI2NycsJyM5YzYyNGUnLCcjZmViOGZmJywnIzliZTNiZCcsJyM3NzU5MzQnLCcjMDA4Mzg1JywnIzZhMmNhMScsJyNlNjBlNjgnLCcjZmY2ZDAxJywnI2ZlZTlkMycKICAgIC8vICAgICAgICAgXSk7CgogICAgdmFyIHBpZWRfY29sb3JzID0gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKFsiI0ZCQjMxNyIsICIjRkY5NzUwIiwgIiMzRkJDMTEiLCAiIzAwQzdFNiIsICIjRUEzMzc5IiwgIiMwMTY1ZmMiLCAiIzQxZmRmZSIsICIjMjRhMGVkIiwgIiMxYWMxZGQiLCAiIzdkZjlmZiIsICIjM2YwMGZmIiwgIiMwOGZmMDgiLCAiI2FlZmY2ZSIsICIjNTZmY2EyIiwgIiM0NWNlYTIiLCAiIzA2YzJhYyIsICIjZmU2NzAwIiwgIiNmZjM1MDMiLCAiI2Q5MDE2NiIsICIjYmUwM2ZkIiwgIiNhZDBhZmQiLCAiIzY2MDBmZiIsICIjZDAxYzFmIiwgIiNmMTE3MmYiLCAiI2ZmZjYwMCIsICIjZmNkMTE2IiwgIiNjZmZmMDQiLCAiI2ZmYzMyNCIsICIjZjRjNDMwIiwgIiNGRTdENjgiLCAiIzcxMDE5MyIsICIjMDQ5MkMyIiwgIiM5ODk3QTkiLCAiIzYzMkEwRCIsICIjOUE3OTRFIiwgIiMxNTFFM0QiLCAiIzU5Nzg4RCIsICIjMUU0NTZFIiwgIiMwMTYwNjQiLCAiIzQ4QUFBRCIsICIjN0U3RDlDIiwgIiMzMDMxNTAiLCAiIzYwOUQ5RSIsICIjMjg3RTlFIiwgIiNFNEE4MzQiLCAiIzAyODkxMCIsICIjMzczNzM3IiwgIiM2QzYyNkQiLCAiIzU4NEQ1QiIsICIjNEQ0QzVDIl0pOyAvLyBMZXQncyBzdGFydCBkcmF3aW5nIHRoZSBhcmNzLgoKICAgIHZhciBlbnRlcmluZ0FyY3MgPSBhcnQuc2VsZWN0QWxsKCIud2VkZ2UiKS5kYXRhKHBpZWRfZGF0YSkuZW50ZXIoKTsKICAgIGVudGVyaW5nQXJjcy5hcHBlbmQoInBhdGgiKS5hdHRyKCJjbGFzcyIsICJ3ZWRnZSIpLmF0dHIoImlkIiwgZnVuY3Rpb24gKGQsIGkpIHsKICAgICAgcmV0dXJuIGk7CiAgICB9KSAvLyAuYXR0cigiZCIsIHBpZWRfYXJjKQogICAgLmF0dHIoImZpbGwiLCBmdW5jdGlvbiAoZCwgaSkgewogICAgICByZXR1cm4gcGllZF9jb2xvcnMoaSk7CiAgICB9KS50cmFuc2l0aW9uKCkuZGVsYXkoZnVuY3Rpb24gKGQsIGkpIHsKICAgICAgcmV0dXJuIGkgKiAxNTA7CiAgICB9KS5kdXJhdGlvbigzODAwKS5hdHRyVHdlZW4oJ2QnLCBmdW5jdGlvbiAoZCkgewogICAgICB2YXIgaSA9IGQzLmludGVycG9sYXRlKGQuc3RhcnRBbmdsZSArIDAuMSwgZC5lbmRBbmdsZSk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAodCkgewogICAgICAgIGQuZW5kQW5nbGUgPSBpKHQpOwogICAgICAgIHJldHVybiBwaWVkX2FyYyhkKTsKICAgICAgfTsKICAgIH0pLmF0dHIoImQiLCBwaWVkX2FyYyk7IC8vIC50cmFuc2l0aW9uKCkKICAgIC8vICAgICAuZHVyYXRpb24oZnVuY3Rpb24oZCwgaSkgewogICAgLy8gICAgICAgICByZXR1cm4gaSAqIDEwMDsKICAgIC8vICAgICB9KS5kdXJhdGlvbigxMjAwKQogICAgLy8gICAgIC5hdHRyVHdlZW4oJ2QnLCBmdW5jdGlvbihkKSB7CiAgICAvLyAgICAgdmFyIGkgPSBkMy5pbnRlcnBvbGF0ZShkLnN0YXJ0QW5nbGUrMC4xLCBkLmVuZEFuZ2xlKTsKICAgIC8vICAgICByZXR1cm4gZnVuY3Rpb24odCkgewogICAgLy8gICAgICAgICBkLmVuZEFuZ2xlID0gaSh0KTsKICAgIC8vICAgICByZXR1cm4gcGllZF9hcmMuYXJjKGQpOwogICAgLy8gICAgIH0KICAgIC8vIH0pOwoKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAvLyBOb3cgd2UnbGwgZHJhdyBvdXIgbGFiZWwgbGluZXMsIGV0Yy4KICAgICAgdmFyIGVudGVyaW5nTGFiZWxzID0gbGFiZWxzLnNlbGVjdEFsbCgiLmxhYmVsIikuZGF0YShwaWVkX2RhdGEpLmVudGVyKCk7CiAgICAgIHZhciBsYWJlbEdyb3VwcyA9IGVudGVyaW5nTGFiZWxzLmFwcGVuZCgiZyIpLmF0dHIoImNsYXNzIiwgImxhYmVsIik7CiAgICAgIGxhYmVsR3JvdXBzLmFwcGVuZCgiY2lyY2xlIikuYXR0cih7CiAgICAgICAgeDogMCwKICAgICAgICB5OiAwLAogICAgICAgIHI6IDIsCiAgICAgICAgZmlsbDogIiMwMDAiLAogICAgICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKGQsIGkpIHsKICAgICAgICAgIHZhciBjZW50cm9pZCA9IHBpZWRfYXJjLmNlbnRyb2lkKGQpOwogICAgICAgICAgcmV0dXJuICJ0cmFuc2xhdGUoIiArIHBpZWRfYXJjLmNlbnRyb2lkKGQpICsgIikiOwogICAgICAgIH0sCiAgICAgICAgJ2NsYXNzJzogImxhYmVsLWNpcmNsZSIKICAgICAgfSk7IC8vICJXaGVuIGFtIEkgZXZlciBnb2luZyB0byB1c2UgdGhpcz8iIEkgc2FpZCBpbiAKICAgICAgLy8gMTB0aCBncmFkZSB0cmlnLgoKICAgICAgdmFyIHRleHRMaW5lcyA9IGxhYmVsR3JvdXBzLmFwcGVuZCgibGluZSIpLmF0dHIoewogICAgICAgIHgxOiBmdW5jdGlvbiB4MShkLCBpKSB7CiAgICAgICAgICAvLyByZXR1cm4gcGllZF9hcmMuY2VudHJvaWQoZClbMF07CiAgICAgICAgICB2YXIgY2VudHJvaWQgPSBwaWVkX2FyYy5jZW50cm9pZChkKTsKICAgICAgICAgIHZhciBtaWRBbmdsZSA9IE1hdGguYXRhbjIoY2VudHJvaWRbMV0sIGNlbnRyb2lkWzBdKTsKICAgICAgICAgIHZhciB4ID0gTWF0aC5jb3MobWlkQW5nbGUpICogY0RpbS5vdXRlclJhZGl1czsKICAgICAgICAgIHJldHVybiB4OwogICAgICAgIH0sCiAgICAgICAgeTE6IGZ1bmN0aW9uIHkxKGQsIGkpIHsKICAgICAgICAgIC8vIHJldHVybiBwaWVkX2FyYy5jZW50cm9pZChkKVsxXTsKICAgICAgICAgIHZhciBjZW50cm9pZCA9IHBpZWRfYXJjLmNlbnRyb2lkKGQpOwogICAgICAgICAgdmFyIG1pZEFuZ2xlID0gTWF0aC5hdGFuMihjZW50cm9pZFsxXSwgY2VudHJvaWRbMF0pOwogICAgICAgICAgdmFyIHkgPSBNYXRoLnNpbihtaWRBbmdsZSkgKiBjRGltLm91dGVyUmFkaXVzOwogICAgICAgICAgcmV0dXJuIHk7CiAgICAgICAgfSwKICAgICAgICB4MjogZnVuY3Rpb24geDIoZCwgaSkgewogICAgICAgICAgdmFyIGNlbnRyb2lkID0gcGllZF9hcmMuY2VudHJvaWQoZCk7CiAgICAgICAgICB2YXIgbWlkQW5nbGUgPSBNYXRoLmF0YW4yKGNlbnRyb2lkWzFdLCBjZW50cm9pZFswXSk7CiAgICAgICAgICB2YXIgeCA9IE1hdGguY29zKG1pZEFuZ2xlKSAqIGNEaW0ubGFiZWxSYWRpdXM7CiAgICAgICAgICByZXR1cm4geDsKICAgICAgICB9LAogICAgICAgIHkyOiBmdW5jdGlvbiB5MihkLCBpKSB7CiAgICAgICAgICB2YXIgY2VudHJvaWQgPSBwaWVkX2FyYy5jZW50cm9pZChkKTsKICAgICAgICAgIHZhciBtaWRBbmdsZSA9IE1hdGguYXRhbjIoY2VudHJvaWRbMV0sIGNlbnRyb2lkWzBdKTsKICAgICAgICAgIHZhciB5ID0gTWF0aC5zaW4obWlkQW5nbGUpICogY0RpbS5sYWJlbFJhZGl1czsKICAgICAgICAgIHJldHVybiB5OwogICAgICAgIH0sCiAgICAgICAgJ2NsYXNzJzogImxhYmVsLWxpbmUiCiAgICAgIH0pOwogICAgICB2YXIgdGV4dExhYmVscyA9IGxhYmVsR3JvdXBzLmFwcGVuZCgidGV4dCIpLmF0dHIoewogICAgICAgIHg6IGZ1bmN0aW9uIHgoZCwgaSkgewogICAgICAgICAgdmFyIGNlbnRyb2lkID0gcGllZF9hcmMuY2VudHJvaWQoZCk7CiAgICAgICAgICB2YXIgbWlkQW5nbGUgPSBNYXRoLmF0YW4yKGNlbnRyb2lkWzFdLCBjZW50cm9pZFswXSk7CiAgICAgICAgICB2YXIgeCA9IE1hdGguY29zKG1pZEFuZ2xlKSAqIGNEaW0ubGFiZWxSYWRpdXM7CiAgICAgICAgICB2YXIgc2lnbiA9IHggPiAwID8gMSA6IC0xOwogICAgICAgICAgdmFyIGxhYmVsWCA9IHggKyA1ICogc2lnbjsKICAgICAgICAgIHJldHVybiBsYWJlbFg7CiAgICAgICAgfSwKICAgICAgICB5OiBmdW5jdGlvbiB5KGQsIGkpIHsKICAgICAgICAgIHZhciBjZW50cm9pZCA9IHBpZWRfYXJjLmNlbnRyb2lkKGQpOwogICAgICAgICAgdmFyIG1pZEFuZ2xlID0gTWF0aC5hdGFuMihjZW50cm9pZFsxXSwgY2VudHJvaWRbMF0pOwogICAgICAgICAgdmFyIHkgPSBNYXRoLnNpbihtaWRBbmdsZSkgKiBjRGltLmxhYmVsUmFkaXVzOwogICAgICAgICAgcmV0dXJuIHk7CiAgICAgICAgfSwKICAgICAgICAndGV4dC1hbmNob3InOiBmdW5jdGlvbiB0ZXh0QW5jaG9yKGQsIGkpIHsKICAgICAgICAgIHZhciBjZW50cm9pZCA9IHBpZWRfYXJjLmNlbnRyb2lkKGQpOwogICAgICAgICAgdmFyIG1pZEFuZ2xlID0gTWF0aC5hdGFuMihjZW50cm9pZFsxXSwgY2VudHJvaWRbMF0pOwogICAgICAgICAgdmFyIHggPSBNYXRoLmNvcyhtaWRBbmdsZSkgKiBjRGltLmxhYmVsUmFkaXVzOwogICAgICAgICAgcmV0dXJuIHggPiAwID8gInN0YXJ0IiA6ICJlbmQiOwogICAgICAgIH0sCiAgICAgICAgJ2NsYXNzJzogJ2xhYmVsLXRleHQnCiAgICAgIH0pLnRleHQoZnVuY3Rpb24gKGQpIHsKICAgICAgICBpZiAoZC5kYXRhW3ZtLnhLZXldLmxlbmd0aCA+IDE1KSB7CiAgICAgICAgICByZXR1cm4gZC5kYXRhW3ZtLnhLZXldLnN1YnN0cmluZygwLCAxNSkgKyAnLi4uJzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIGQuZGF0YVt2bS54S2V5XTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICB2YXIgYWxwaGEgPSAwLjU7CiAgICAgIHZhciBzcGFjaW5nID0gMTI7CgogICAgICBmdW5jdGlvbiByZWxheCgpIHsKICAgICAgICB2YXIgYWdhaW4gPSBmYWxzZTsKICAgICAgICB0ZXh0TGFiZWxzLmVhY2goZnVuY3Rpb24gKGQsIGkpIHsKICAgICAgICAgIHZhciBhID0gdGhpczsKICAgICAgICAgIHZhciBkYSA9IGQzLnNlbGVjdChhKTsKICAgICAgICAgIHZhciB5MSA9IGRhLmF0dHIoInkiKTsKICAgICAgICAgIHRleHRMYWJlbHMuZWFjaChmdW5jdGlvbiAoZCwgaikgewogICAgICAgICAgICB2YXIgYiA9IHRoaXM7IC8vIGEgJiBiIGFyZSB0aGUgc2FtZSBlbGVtZW50IGFuZCBkb24ndCBjb2xsaWRlLgoKICAgICAgICAgICAgaWYgKGEgPT0gYikgcmV0dXJuOwogICAgICAgICAgICB2YXIgZGIgPSBkMy5zZWxlY3QoYik7IC8vIGEgJiBiIGFyZSBvbiBvcHBvc2l0ZSBzaWRlcyBvZiB0aGUgY2hhcnQgYW5kCiAgICAgICAgICAgIC8vIGRvbid0IGNvbGxpZGUKCiAgICAgICAgICAgIGlmIChkYS5hdHRyKCJ0ZXh0LWFuY2hvciIpICE9IGRiLmF0dHIoInRleHQtYW5jaG9yIikpIHJldHVybjsgLy8gTm93IGxldCdzIGNhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlbgogICAgICAgICAgICAvLyB0aGVzZSBlbGVtZW50cy4gCgogICAgICAgICAgICB2YXIgeTIgPSBkYi5hdHRyKCJ5Iik7CiAgICAgICAgICAgIHZhciBkZWx0YVkgPSB5MSAtIHkyOyAvLyBPdXIgc3BhY2luZyBpcyBncmVhdGVyIHRoYW4gb3VyIHNwZWNpZmllZCBzcGFjaW5nLAogICAgICAgICAgICAvLyBzbyB0aGV5IGRvbid0IGNvbGxpZGUuCgogICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGVsdGFZKSA+IHNwYWNpbmcpIHJldHVybjsgLy8gSWYgdGhlIGxhYmVscyBjb2xsaWRlLCB3ZSdsbCBwdXNoIGVhY2ggCiAgICAgICAgICAgIC8vIG9mIHRoZSB0d28gbGFiZWxzIHVwIGFuZCBkb3duIGEgbGl0dGxlIGJpdC4KCiAgICAgICAgICAgIGFnYWluID0gdHJ1ZTsKICAgICAgICAgICAgdmFyIHNpZ24gPSBkZWx0YVkgPiAwID8gMSA6IC0xOwogICAgICAgICAgICB2YXIgYWRqdXN0ID0gc2lnbiAqIGFscGhhOwogICAgICAgICAgICBkYS5hdHRyKCJ5IiwgK3kxICsgYWRqdXN0KTsKICAgICAgICAgICAgZGIuYXR0cigieSIsICt5MiAtIGFkanVzdCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsgLy8gQWRqdXN0IG91ciBsaW5lIGxlYWRlcnMgaGVyZQogICAgICAgIC8vIHNvIHRoYXQgdGhleSBmb2xsb3cgdGhlIGxhYmVscy4gCgogICAgICAgIGlmIChhZ2FpbikgewogICAgICAgICAgdmFyIGxhYmVsRWxlbWVudHMgPSB0ZXh0TGFiZWxzWzBdOwogICAgICAgICAgdGV4dExpbmVzLmF0dHIoInkyIiwgZnVuY3Rpb24gKGQsIGkpIHsKICAgICAgICAgICAgdmFyIGxhYmVsRm9yTGluZSA9IGQzLnNlbGVjdChsYWJlbEVsZW1lbnRzW2ldKTsKICAgICAgICAgICAgcmV0dXJuIGxhYmVsRm9yTGluZS5hdHRyKCJ5Iik7CiAgICAgICAgICB9KTsKICAgICAgICAgIHNldFRpbWVvdXQocmVsYXgsIDIwKTsKICAgICAgICB9CgogICAgICAgIHZhciB0b29sdGlwID0gZDMuc2VsZWN0KCIjY2hhcnQiKS5hcHBlbmQoImRpdiIpLmF0dHIoImNsYXNzIiwgInRvb2xUaXAiKTsKICAgICAgICBkMy5zZWxlY3RBbGwoIi53ZWRnZSIpLm9uKCJtb3VzZW92ZXIiLCBmdW5jdGlvbiAoZCwgaSkgewogICAgICAgICAgdmFyIHggPSBkMy5zZWxlY3QodGhpcykuYXR0cignaWQnKTsgLy8gY29uc29sZS5sb2coZCk7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh4LHZtLmRhdGFbeF0pOwoKICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgiZmlsbCIsIGQzLnJnYihwaWVkX2NvbG9ycyhpKSkuYnJpZ2h0ZXIoLjYxKSk7CiAgICAgICAgICB0b29sdGlwLnN0eWxlKCJsZWZ0IiwgZDMuZXZlbnQucGFnZVggLSA0MCArICJweCIpLnN0eWxlKCJ0b3AiLCBkMy5ldmVudC5wYWdlWSAtIDcwICsgInB4Iikuc3R5bGUoImRpc3BsYXkiLCAiaW5saW5lLWJsb2NrIikuaHRtbCh2bS5kYXRhW3hdW3ZtLnhLZXldICsgIjxicj4iICsgdm0uY3VycmVuY3lfa2V5ICsgJyAnICsgKE51bWJlci5pc0ludGVnZXIodm0uZGF0YVt4XVt2bS55S2V5XSkgPyB2bS5kYXRhW3hdW3ZtLnlLZXldIDogdm0uZGF0YVt4XVt2bS55S2V5XS50b0ZpeGVkKDIpKSk7CiAgICAgICAgfSk7CiAgICAgICAgZDMuc2VsZWN0QWxsKCIud2VkZ2UiKS5vbigibW91c2VvdXQiLCBmdW5jdGlvbiAoZCwgaSkgewogICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKCJmaWxsIiwgcGllZF9jb2xvcnMoaSkpOwogICAgICAgICAgdG9vbHRpcC5zdHlsZSgiZGlzcGxheSIsICJub25lIik7IC8vIGhpZGUgdG9vbHRpcCBmb3IgdGhhdCBlbGVtZW50CiAgICAgICAgfSk7CiAgICAgICAgZDMuc2VsZWN0QWxsKCIud2VkZ2UiKS5vbigibW91c2Vtb3ZlIiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHRvb2x0aXAuc3R5bGUoInRvcCIsIGQzLmV2ZW50LmxheWVyWSArIDEwICsgInB4Iikuc3R5bGUoImxlZnQiLCBkMy5ldmVudC5sYXllclggKyAxMCArICJweCIpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZWxheCgpOwogICAgICBkMy5zZWxlY3RBbGwoJy5sYWJlbCB0ZXh0LCAuYXJ0IHBhdGgnKS5jYWxsKHRvb2xUaXApOwoKICAgICAgZnVuY3Rpb24gdG9vbFRpcChzZWxlY3Rpb24pIHsKICAgICAgICAvLyBhZGQgdG9vbHRpcCAoc3ZnIGNpcmNsZSBlbGVtZW50KSB3aGVuIG1vdXNlIGVudGVycyBsYWJlbCBvciBzbGljZQogICAgICAgIHNlbGVjdGlvbi5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChkYXRhLCBpKSB7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpLGRhdGEpOwogICAgICAgICAgYXJ0LmFwcGVuZCgndGV4dCcpLmF0dHIoJ2NsYXNzJywgJ3Rvb2xDaXJjbGUnKS5hdHRyKCdkeScsIC0xNSkgLy8gaGFyZC1jb2RlZC4gY2FuIGFkanVzdCB0aGlzIHRvIGFkanVzdCB0ZXh0IHZlcnRpY2FsIGFsaWdubWVudCBpbiB0b29sdGlwCiAgICAgICAgICAuaHRtbCh0b29sVGlwSFRNTChkYXRhKSkgLy8gYWRkIHRleHQgdG8gdGhlIGNpcmNsZS4KICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJy45ZW0nKS5zdHlsZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJyk7IC8vIGNlbnRyZXMgdGV4dCBpbiB0b29sdGlwCgogICAgICAgICAgYXJ0LmFwcGVuZCgnY2lyY2xlJykuYXR0cignY2xhc3MnLCAndG9vbENpcmNsZScpLmF0dHIoJ3InLCAzMjAgKiAwLjQwKSAvLyByYWRpdXMgb2YgdG9vbHRpcCBjaXJjbGUKICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIHBpZWRfY29sb3JzKGkpKSAvLyBjb2xvdXIgYmFzZWQgb24gY2F0ZWdvcnkgbW91c2UgaXMgb3ZlcgogICAgICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAwLjQ1KTsKICAgICAgICB9KTsgLy8gcmVtb3ZlIHRoZSB0b29sdGlwIHdoZW4gbW91c2UgbGVhdmVzIHRoZSBzbGljZS9sYWJlbAoKICAgICAgICBzZWxlY3Rpb24ub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgZDMuc2VsZWN0QWxsKCcudG9vbENpcmNsZScpLnJlbW92ZSgpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiB0b29sVGlwSFRNTChkYXRhKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YSk7CiAgICAgICAgdmFyIHRpcCA9ICcnLAogICAgICAgICAgICBpID0gMDsKCiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEuZGF0YSkgewogICAgICAgICAgLy8gaWYgdmFsdWUgaXMgYSBudW1iZXIsIGZvcm1hdCBpdCBhcyBhIHBlcmNlbnRhZ2UKICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGEuZGF0YVtrZXldOyAvLyBsZWF2ZSBvZmYgJ2R5JyBhdHRyIGZvciBmaXJzdCB0c3BhbiBzbyB0aGUgJ2R5JyBhdHRyIG9uIHRleHQgZWxlbWVudCB3b3Jrcy4gVGhlICdkeScgYXR0ciBvbgogICAgICAgICAgLy8gdHNwYW4gZWZmZWN0aXZlbHkgaW1pdGF0ZXMgYSBsaW5lIGJyZWFrLgoKICAgICAgICAgIGlmIChrZXkgPT09IHZtLnhLZXkgfHwga2V5ID09PSB2bS55S2V5IHx8IGtleSA9PT0gIlNoYXJlIikgewogICAgICAgICAgICAvLyBpZiAoa2V5ID09PSB2bS55S2V5KXsKICAgICAgICAgICAgaWYgKGkgPT09IDApIHRpcCArPSAnPHRzcGFuIHg9IjAiPicgKyBrZXkgKyAnOiAnICsgKGtleSA9PT0gdm0ueUtleSA/IHZtLmN1cnJlbmN5X2tleSArICcgJyArIHZhbHVlIDogdmFsdWUpICsgJzwvdHNwYW4+JztlbHNlIHRpcCArPSAnPHRzcGFuIHg9IjAiIGR5PSIxLjJlbSI+JyArIGtleSArICc6ICcgKyB2YWx1ZSArICc8L3RzcGFuPic7CiAgICAgICAgICAgIGkrKzsgLy8gfSBlbHNlIGlmKGtleSA9PT0gdm0ueEtleSl7CiAgICAgICAgICAgIC8vICAgICBpZiAoaSA9PT0gMCkgdGlwICs9ICc8dHNwYW4geD0iMCI+JyArIGtleSArICc6ICcgKyB2YWx1ZSArICcoJysgICcpJyArICc8L3RzcGFuPic7CiAgICAgICAgICAgIC8vICAgICBlbHNlIHRpcCArPSAnPHRzcGFuIHg9IjAiIGR5PSIxLjJlbSI+JyArIGtleSArICc6ICcgKyB2YWx1ZSArICc8L3RzcGFuPic7CiAgICAgICAgICAgIC8vICAgICBpKys7CiAgICAgICAgICAgIC8vIH0gCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGlwOwogICAgICB9CiAgICB9LCAxNDAwKTsKICB9Cn07"},null]}