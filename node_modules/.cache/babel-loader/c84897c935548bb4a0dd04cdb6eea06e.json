{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js!/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/User Management/AddUser.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/User Management/AddUser.vue","mtime":1643027096184},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgU3dhbCBmcm9tICJzd2VldGFsZXJ0MiI7CmltcG9ydCBhcGlfY2FsbHMgZnJvbSAiQC9wb3J0YWwvYXBpX2NhbGxzIjsKaW1wb3J0IE11bHRpc2VsZWN0IGZyb20gInZ1ZS1tdWx0aXNlbGVjdCI7CmltcG9ydCBQYXNzd29yZFZhbGlkYXRvciBmcm9tICIuLi9QYWdlcy9QYXNzd29yZFZhbGlkYXRvci52dWUiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogImFkZC11c2VyIiwKICBjb21wb25lbnRzOiB7CiAgICBNdWx0aXNlbGVjdDogTXVsdGlzZWxlY3QsCiAgICBQYXNzd29yZFZhbGlkYXRvcjogUGFzc3dvcmRWYWxpZGF0b3IKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpc1Zpc2libGVTZWFyY2hDbGVhcjogZmFsc2UsCiAgICAgIHBvcnRhbF9yb2xlczogW10sCiAgICAgIGNvcnJlY3RfcGFzc3dvcmQ6IGZhbHNlLAogICAgICBzZWxlY3RlZF9yb2xlOiAiIiwKICAgICAgY2hlY2tlZF9saXN0OiBbXSwKICAgICAgZW1haWxsaXN0OiBbXSwKICAgICAgcGFzc3dvcmQ6ICIiLAogICAgICBlbWFpbDogIiIsCiAgICAgIHBlcl9wYWdlOiAxMCwKICAgICAgdG90YWxfcGFnZXM6IG51bGwsCiAgICAgIG51bWJlcl9vZl9yb3dzOiBudWxsLAogICAgICBwYWdlX25vOiAxLAogICAgICBjb21wYW55bmFtZTogIiIsCiAgICAgIGNvbXBhbnlpZDogIiIsCiAgICAgIHVzZXJzOiBbXSwKICAgICAgcm9sZXM6IFtdLAogICAgICByb2xlOiAiIiwKICAgICAgcmVnX2VtYWlsOiAvXihbMC05YS16QS1aXShbLS5cd10qWzAtOWEtekEtWl0pKkAoWzAtOWEtekEtWl1bLVx3XSpbMC05YS16QS1aXVwuKStbYS16QS1aXXsyLDl9KSQvLAogICAgICByZWdfcHdkOiAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxkKSg/PS4qWyNAISUqPyYkXSlbQS1aYS16XGQjQCElKj8mJF17OCx9LywKICAgICAgc2hvd19sb2FkZXI6IGZhbHNlLAogICAgICAvL2hhcnNoCiAgICAgIHBhZ2VfYXJyYXk6IFtdLAogICAgICBzZWFyY2hfbmFtZTogIiIsCiAgICAgIHNwaW5uZXJPbjogZmFsc2UsCiAgICAgIHNob3dfZW1haWxfZmllbGQ6IGZhbHNlLAogICAgICBzaG93X3Bhc3N3b3JkX2ZpZWxkOiBmYWxzZSwKICAgICAgcm9sZXNfZHJvcHdkb3duOiBbewogICAgICAgIHRpdGxlOiAiUG9ydGFsIFJvbGUiLAogICAgICAgIGxpc3Q6IFtdCiAgICAgIH0sIHsKICAgICAgICB0aXRsZTogIkJvdCBSb2xlIiwKICAgICAgICBsaXN0OiBbXQogICAgICB9XSwKICAgICAgcm9sZV9zZWxlY3RlZDogbnVsbCwKICAgICAgcm9sZV90eXBlX3NlbGVjdGVkOiBudWxsIC8vIGxldHRlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxldHRlciIpLAogICAgICAvLyBjYXBpdGFsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY2FwaXRhbCIpLAogICAgICAvLyBudW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJudW1iZXIiKSwKICAgICAgLy8gc3BlY2lhbDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNwZWNpYWwiKSwKICAgICAgLy8gYXJyYXk6IFtdLAoKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgdmFsaWRQYXNzd29yZDogZnVuY3Rpb24gdmFsaWRQYXNzd29yZCgpIHsKICAgICAgaWYgKHRoaXMucmVnX3B3ZC50ZXN0KHRoaXMucGFzc3dvcmQpKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICJQYXNzd29yZCBtdXN0IGNvbnRhaW4gbWluaW11bSA4IGNoYXJhY3RlcnMsIGF0bGVhc3QgMSBVcHBlckNhc2UgQWxwaGFiZXQsIDEgTG93ZXJDYXNlIEFscGhhYmV0LCAxIE51bWJlciBhbmQgMSBTcGVjaWFsIENoYXJhY3RlciI7CiAgICAgIH0KICAgIH0sCiAgICB2YWxpZEVtYWlsOiBmdW5jdGlvbiB2YWxpZEVtYWlsKCkgewogICAgICBpZiAodGhpcy5yZWdfZW1haWwudGVzdCh0aGlzLmVtYWlsKSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMubG9hZF91c2VyKCk7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIHZtID0gdGhpczsKICAgICQoIiNzZWxlY3RhbGwiKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgIGlmICgkKHRoaXMpLmlzKCI6Y2hlY2tlZCIpKSB7CiAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdm0uY2hlY2tlZF9saXN0ID0gW107CiAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICB9CiAgICB9KTsKICAgICQoIiN1c2VybW9kZWwiKS5vbigiaGlkZGVuLmJzLm1vZGFsIiwgZnVuY3Rpb24gKCkgewogICAgICB2bS5jbGVhcl9maWVsZHMoKTsgLy8gdm0ucm9sZV9zZWxlY3RlZCA9IG51bGw7CiAgICAgIC8vIHZtLnJvbGVfdHlwZV9zZWxlY3RlZCA9IG51bGw7CiAgICB9KTsgLy8gdGhpcy4kcm9vdC4kb24oImNvcnJlY3RQYXNzd29yZCIsICh2YWx1ZSkgPT4gewogICAgLy8gICBjb25zb2xlLmxvZyh2YWx1ZSk7CiAgICAvLyAgIHRoaXMuY29ycmVjdF9wYXNzd29yZCA9IHZhbHVlOwogICAgLy8gfSk7CiAgfSwKICB3YXRjaDogewogICAgc2VhcmNoX25hbWU6IGZ1bmN0aW9uIHNlYXJjaF9uYW1lKCkgewogICAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSA9PT0gIiIpIHsKICAgICAgICB0aGlzLmxvYWRfdXNlcigpOwogICAgICAgIHRoaXMuaXNWaXNpYmxlU2VhcmNoQ2xlYXIgPSBmYWxzZTsKICAgICAgfSBlbHNlIGlmICh0aGlzLnNlYXJjaF9uYW1lICE9PSAiIikgewogICAgICAgIHRoaXMuaXNWaXNpYmxlU2VhcmNoQ2xlYXIgPSB0cnVlOwogICAgICB9CiAgICB9CiAgfSwKICBfbWV0aG9kczogewogICAgb3Blbl91c2VybW9kZWw6IGZ1bmN0aW9uIG9wZW5fdXNlcm1vZGVsKCkgewogICAgICBpZiAodGhpcy5wb3J0YWxfcm9sZXMubGVuZ3RoID4gMCkgewogICAgICAgICQoIiN1c2VybW9kZWwiKS5tb2RhbCgic2hvdyIpOwogICAgICB9IGVsc2UgewogICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICB0ZXh0OiAiTm8gUm9sZXMgaGFzIGJlZW4gQWRkZWQgWWV0LiBQbGVhc2UgQWRkIGEgUm9sZSBmcm9tIHRoZSAnUm9sZXMnIFBhZ2UgdG8gY29udGludWUgYWRkaW5nIFVzZXJzLiIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSwKICAgICAgICAgIHRpbWVyOiA2MDAwCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBjaGVja3Bhc3N3b3JkOiBmdW5jdGlvbiBjaGVja3Bhc3N3b3JkKGNvcnJlY3RQYXNzd29yZCkgewogICAgICB0aGlzLmNvcnJlY3RfcGFzc3dvcmQgPSBjb3JyZWN0UGFzc3dvcmQ7CiAgICB9LAogICAgLy8gY2hlY2tfdmFsdWUgKCkgewogICAgLy8gICBpZiAodGhpcy5wYXNzd29yZCAhPSAiIikgewogICAgLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlIikuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAvLyAgIH0gZWxzZSB7CiAgICAvLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1lc3NhZ2UiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgLy8gICB9CiAgICAvLyAgIHZhciBsb3dlckNhc2VMZXR0ZXJzID0gL1thLXpdL2c7CiAgICAvLyAgIGlmICh0aGlzLnBhc3N3b3JkLm1hdGNoKGxvd2VyQ2FzZUxldHRlcnMpKSB7CiAgICAvLyAgICAgbGV0dGVyLmNsYXNzTGlzdC5yZW1vdmUoImludmFsaWQiKTsKICAgIC8vICAgICBsZXR0ZXIuY2xhc3NMaXN0LmFkZCgidmFsaWQiKTsKICAgIC8vICAgICB0aGlzLmFycmF5WzBdID0gMTsKICAgIC8vICAgfSBlbHNlIHsKICAgIC8vICAgICBsZXR0ZXIuY2xhc3NMaXN0LnJlbW92ZSgidmFsaWQiKTsKICAgIC8vICAgICBsZXR0ZXIuY2xhc3NMaXN0LmFkZCgiaW52YWxpZCIpOwogICAgLy8gICAgIHRoaXMuYXJyYXlbMF0gPSAwOwogICAgLy8gICB9CiAgICAvLyAgIC8vIFZhbGlkYXRlIGNhcGl0YWwgbGV0dGVycwogICAgLy8gICB2YXIgdXBwZXJDYXNlTGV0dGVycyA9IC9bQS1aXS9nOwogICAgLy8gICBpZiAodGhpcy5wYXNzd29yZC5tYXRjaCh1cHBlckNhc2VMZXR0ZXJzKSkgewogICAgLy8gICAgIGNhcGl0YWwuY2xhc3NMaXN0LnJlbW92ZSgiaW52YWxpZCIpOwogICAgLy8gICAgIGNhcGl0YWwuY2xhc3NMaXN0LmFkZCgidmFsaWQiKTsKICAgIC8vICAgICB0aGlzLmFycmF5WzFdID0gMTsKICAgIC8vICAgfSBlbHNlIHsKICAgIC8vICAgICBjYXBpdGFsLmNsYXNzTGlzdC5yZW1vdmUoInZhbGlkIik7CiAgICAvLyAgICAgY2FwaXRhbC5jbGFzc0xpc3QuYWRkKCJpbnZhbGlkIik7CiAgICAvLyAgICAgdGhpcy5hcnJheVsxXSA9IDA7CiAgICAvLyAgIH0KICAgIC8vICAgLy8gVmFsaWRhdGUgbnVtYmVycwogICAgLy8gICB2YXIgbnVtYmVycyA9IC9bMC05XS9nOwogICAgLy8gICBpZiAodGhpcy5wYXNzd29yZC5tYXRjaChudW1iZXJzKSkgewogICAgLy8gICAgIG51bWJlci5jbGFzc0xpc3QucmVtb3ZlKCJpbnZhbGlkIik7CiAgICAvLyAgICAgbnVtYmVyLmNsYXNzTGlzdC5hZGQoInZhbGlkIik7CiAgICAvLyAgICAgdGhpcy5hcnJheVsyXSA9IDE7CiAgICAvLyAgIH0gZWxzZSB7CiAgICAvLyAgICAgbnVtYmVyLmNsYXNzTGlzdC5yZW1vdmUoInZhbGlkIik7CiAgICAvLyAgICAgbnVtYmVyLmNsYXNzTGlzdC5hZGQoImludmFsaWQiKTsKICAgIC8vICAgICB0aGlzLmFycmF5WzJdID0gMDsKICAgIC8vICAgfQogICAgLy8gICAvLyBTcGVjaWFsIENoYXJhY3RlcgogICAgLy8gICB2YXIgc3BlY2lhbHMgPSAvWyNAISUqPyYkXS9nOwogICAgLy8gICBpZiAodGhpcy5wYXNzd29yZC5tYXRjaChzcGVjaWFscykpIHsKICAgIC8vICAgICBzcGVjaWFsLmNsYXNzTGlzdC5yZW1vdmUoImludmFsaWQiKTsKICAgIC8vICAgICBzcGVjaWFsLmNsYXNzTGlzdC5hZGQoInZhbGlkIik7CiAgICAvLyAgICAgdGhpcy5hcnJheVszXSA9IDE7CiAgICAvLyAgIH0gZWxzZSB7CiAgICAvLyAgICAgc3BlY2lhbC5jbGFzc0xpc3QucmVtb3ZlKCJ2YWxpZCIpOwogICAgLy8gICAgIHNwZWNpYWwuY2xhc3NMaXN0LmFkZCgiaW52YWxpZCIpOwogICAgLy8gICAgIHRoaXMuYXJyYXlbM10gPSAwOwogICAgLy8gICB9CiAgICAvLyAgIC8vIFZhbGlkYXRlIGxlbmd0aAogICAgLy8gICBpZiAodGhpcy5wYXNzd29yZC5sZW5ndGggPj0gOCkgewogICAgLy8gICAgIHZhciBsZW5ndGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibGVuZ3RoIik7CiAgICAvLyAgICAgbGVuZ3RoLmNsYXNzTGlzdC5yZW1vdmUoImludmFsaWQiKTsKICAgIC8vICAgICBsZW5ndGguY2xhc3NMaXN0LmFkZCgidmFsaWQiKTsKICAgIC8vICAgICB0aGlzLmFycmF5WzRdID0gMTsKICAgIC8vICAgfSBlbHNlIHsKICAgIC8vICAgICB2YXIgbGVuZ3RoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxlbmd0aCIpOwogICAgLy8gICAgIGxlbmd0aC5jbGFzc0xpc3QucmVtb3ZlKCJ2YWxpZCIpOwogICAgLy8gICAgIGxlbmd0aC5jbGFzc0xpc3QuYWRkKCJpbnZhbGlkIik7CiAgICAvLyAgICAgdGhpcy5hcnJheVs0XSA9IDA7CiAgICAvLyAgIH0KICAgIC8vICAgdmFyIHN1bSA9IHRoaXMuYXJyYXlbMF0gKyB0aGlzLmFycmF5WzFdICsgdGhpcy5hcnJheVsyXSArIHRoaXMuYXJyYXlbM10gKyB0aGlzLmFycmF5WzRdOwogICAgLy8gICBpZiAoc3VtID09IDUgfHwgc3VtID09IDApIHsKICAgIC8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWVzc2FnZSIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAvLyAgIH0gZWxzZSB7CiAgICAvLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1lc3NhZ2UiKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICAgIC8vICAgfQogICAgLy8gfSwKICAgIGNsZWFyX3NlYXJjaF9uYW1lOiBmdW5jdGlvbiBjbGVhcl9zZWFyY2hfbmFtZSgpIHsKICAgICAgdGhpcy5zZWFyY2hfbmFtZSA9ICIiOwogICAgfSwKICAgIGxvYWRfdXNlcjogZnVuY3Rpb24gbG9hZF91c2VyKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICB0aGlzLmVtYWlsbGlzdCA9IFtdOwogICAgICB0aGlzLnJvbGVfc2VsZWN0ZWQgPSBudWxsOwogICAgICB0aGlzLnBvcnRhbF9yb2xlcyA9IFtdOwogICAgICB0aGlzLnJvbGVzX2Ryb3B3ZG93biA9IFt7CiAgICAgICAgdGl0bGU6ICJQb3J0YWwgUm9sZSIsCiAgICAgICAgbGlzdDogW10KICAgICAgfSwgewogICAgICAgIHRpdGxlOiAiQm90IFJvbGUiLAogICAgICAgIGxpc3Q6IFtdCiAgICAgIH1dOwogICAgICB0aGlzLnNlbGVjdGVkX3JvbGUgPSAiIjsKICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwoKICAgICAgaWYgKCF0aGlzLiRzZXNzaW9uLmhhcygiQ29tcGFueUlkIikgJiYgdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUgPT0gIlN1cGVyQWRtaW4iKSB7CiAgICAgICAgdG9hc3RyLndhcm5pbmcoIlBsZWFzZSBzZWxlY3QgYSBjb21wYW55IG5hbWUgZnJvbSB0aGUgZHJvcGRvd24iKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlID09ICJTdXBlckFkbWluIikgewogICAgICAgIGlmICh0aGlzLiRzZXNzaW9uLmhhcygiQ29tcGFueUlkIikpIHsKICAgICAgICAgIHRoaXMuY29tcGFueWlkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlJZCIpOwogICAgICAgICAgdGhpcy5jb21wYW55bmFtZSA9IHRoaXMuJHNlc3Npb24uZ2V0KCJDb21wYW55TmFtZSIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0b2FzdHIud2FybmluZygiUGxlYXNlIHNlbGVjdCBhIGNvbXBhbnkgbmFtZSBmcm9tIHRoZSBkcm9wZG93biIpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICAgIHRoaXMuY29tcGFueW5hbWUgPSB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lOwogICAgICB9CgogICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5sb2FkX3VzZXJzX3VybCgpLCB7CiAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBjb21wYW55bmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICBfdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGFbMV0ubnVtYmVyX29mX3Jvd3M7CiAgICAgICAgX3RoaXMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwoX3RoaXMubnVtYmVyX29mX3Jvd3MgLyBfdGhpcy5wZXJfcGFnZSk7CgogICAgICAgIF90aGlzLnVwZGF0ZV91c2VycyhyZXNwb25zZS5kYXRhWzBdLkVtYWlsLCByZXNwb25zZS5kYXRhWzBdLlJvbGUpOwoKICAgICAgICBfdGhpcy5zZXRwYWdpbmF0aW9uKF90aGlzLnBhZ2Vfbm8pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgX3RoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMubWFpbl9yb2xlX3VybCgpLCB7CiAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgaXNTaG93OiB0cnVlLAogICAgICAgIHBlcl9wYWdlOiAxMDAwCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgLy8gcG9ydGFsX3JvbGVzID0gW107CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5Qb3J0YWwubGVuZ3RoID4gMCkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmRhdGEuUG9ydGFsLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocG9ydGFsX3JvbGVzKTsKICAgICAgICAgICAgICBfdGhpcy5wb3J0YWxfcm9sZXMucHVzaCh7CiAgICAgICAgICAgICAgICAvLyByb2xlOiBbewogICAgICAgICAgICAgICAgLy8gICByb2xlbmFtZTogcmVzcG9uc2UuZGF0YS5Qb3J0YWxbaV0KICAgICAgICAgICAgICAgIC8vICAgfV0sCiAgICAgICAgICAgICAgICByb2xlOiByZXNwb25zZS5kYXRhLlBvcnRhbFtpXSwKICAgICAgICAgICAgICAgIHR5cGU6ICJQb3J0YWwiCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5Cb3QubGVuZ3RoID4gMCkgewogICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgcmVzcG9uc2UuZGF0YS5Cb3QubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgICAgICAgX3RoaXMucG9ydGFsX3JvbGVzLnB1c2goewogICAgICAgICAgICAgICAgLy8gcm9sZTogW3sKICAgICAgICAgICAgICAgIC8vICAgcm9sZW5hbWU6cmVzcG9uc2UuZGF0YS5Cb3RbaV0KICAgICAgICAgICAgICAgIC8vIH1dLAogICAgICAgICAgICAgICAgcm9sZTogcmVzcG9uc2UuZGF0YS5Cb3RbX2ldLAogICAgICAgICAgICAgICAgdHlwZTogIkJvdCIKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IF90aGlzLnBvcnRhbF9yb2xlcy5sZW5ndGg7IF9pMisrKSB7CiAgICAgICAgICAgIGlmIChfdGhpcy5wb3J0YWxfcm9sZXNbX2kyXS50eXBlID09PSAiUG9ydGFsIikgewogICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX3RoaXMucm9sZXNfZHJvcHdkb3duLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucm9sZXNfZHJvcHdkb3duW2pdLnRpdGxlID09PSAiUG9ydGFsIFJvbGUiKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLnJvbGVzX2Ryb3B3ZG93bltqXS5saXN0LnB1c2goewogICAgICAgICAgICAgICAgICAgIG5hbWU6IF90aGlzLnBvcnRhbF9yb2xlc1tfaTJdLnJvbGUsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBvcnRhbCBVc2VyIgogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChfdGhpcy5wb3J0YWxfcm9sZXNbX2kyXS50eXBlID09PSAiQm90IikgewogICAgICAgICAgICAgIGZvciAodmFyIF9qID0gMDsgX2ogPCBfdGhpcy5yb2xlc19kcm9wd2Rvd24ubGVuZ3RoOyBfaisrKSB7CiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucm9sZXNfZHJvcHdkb3duW19qXS50aXRsZSA9PT0gIkJvdCBSb2xlIikgewogICAgICAgICAgICAgICAgICBfdGhpcy5yb2xlc19kcm9wd2Rvd25bX2pdLmxpc3QucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogX3RoaXMucG9ydGFsX3JvbGVzW19pMl0ucm9sZSwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiQm90IFVzZXIiCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgcGFnaW5hdGlvbl9jbGFzczogZnVuY3Rpb24gcGFnaW5hdGlvbl9jbGFzcyhpbmRleCkgewogICAgICBpZiAoaW5kZXggPT0gdGhpcy5wYWdlX25vKSB7CiAgICAgICAgcmV0dXJuICIgYWN0aXZlIjsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gIiI7CiAgICAgIH0KICAgIH0sCiAgICBjaGVja19saXN0X2FycmF5OiBmdW5jdGlvbiBjaGVja19saXN0X2FycmF5KGUsIGluZGV4KSB7CiAgICAgIGlmIChpbmRleCA9PSAiYWxsIikgewogICAgICAgIGlmIChlLnRhcmdldC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gdGhpcy51c2Vycy5tYXAoZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHVzZXIuZW1haWw7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNoZWNrZWQgPT0gZmFsc2UpIHsKICAgICAgICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gW107CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGlmIChlLnRhcmdldC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICAgIHZhciB2YWxfaW5kZXggPSB0aGlzLmNoZWNrZWRfbGlzdC5pbmRleE9mKHRoaXMudXNlcnNbaW5kZXhdLmVtYWlsKTsKICAgICAgICAgIHZhciB0ZW1wID0gdGhpcy51c2Vyc1tpbmRleF0uZW1haWw7CgogICAgICAgICAgaWYgKHZhbF9pbmRleCA9PSAtMSkgewogICAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdC5wdXNoKHRlbXApOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2hlY2tlZCA9PSBmYWxzZSkgewogICAgICAgICAgdmFyIHNlbGVjdGFsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzZWxlY3RhbGwiKTsKICAgICAgICAgIHNlbGVjdGFsbC5jaGVja2VkID0gZmFsc2U7CiAgICAgICAgICB2YXIgdXNlckluZGV4ID0gdGhpcy5jaGVja2VkX2xpc3QuaW5kZXhPZih0aGlzLnVzZXJzW2luZGV4XS5lbWFpbCk7CiAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdC5zcGxpY2UodXNlckluZGV4LCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBkZWxldGVfdXNlcjogZnVuY3Rpb24gZGVsZXRlX3VzZXIoaW5kZXgpIHsKICAgICAgdGhpcy5lbWFpbGxpc3QgPSBbXTsKCiAgICAgIGlmIChpbmRleCA9PSAiYWxsIikgewogICAgICAgIGlmICh0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGggPT0gMCkgewogICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgdGl0bGU6ICJObyB1c2VyIHNlbGVjdGVkISIsCiAgICAgICAgICAgIHRleHQ6ICIiLAogICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICB0aW1lcjogMjAwMAogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAgICAgICB0aGlzLmVtYWlsbGlzdC5wdXNoKHRoaXMuY2hlY2tlZF9saXN0W2ldKTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLmRlbGV0ZV91c2VyX2FwaSgpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmVtYWlsbGlzdC5wdXNoKHRoaXMudXNlcnNbaW5kZXhdLmVtYWlsKTsKICAgICAgICB0aGlzLmRlbGV0ZV91c2VyX2FwaSgpOwogICAgICB9CiAgICB9LAogICAgZGVsZXRlX3VzZXJfYXBpOiBmdW5jdGlvbiBkZWxldGVfdXNlcl9hcGkoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgU3dhbC5maXJlKHsKICAgICAgICB0aXRsZTogIkFyZSB5b3Ugc3VyZT8iLAogICAgICAgIHRleHQ6ICJZb3Ugd29uJ3QgYmUgYWJsZSB0byByZXZlcnQgdGhpcyEiLAogICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAiI2QzMyIsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICJZZXMsIGRlbGV0ZSBpdCEiCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIC8vIHRoaXMuc3Bpbm5lck9uPXRydWU7CiAgICAgICAgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykgewogICAgICAgICAgX3RoaXMyLmVtYWlsbGlzdCA9IFtdOwogICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5kZWxldGVfdXNlcl91cmwoKSwgewogICAgICAgICAgICBlbWFpbGxpc3Q6IF90aGlzMi5lbWFpbGxpc3QsCiAgICAgICAgICAgIGNvbXBhbnluYW1lOiBfdGhpczIuY29tcGFueW5hbWUsCiAgICAgICAgICAgIGNvbXBhbnlpZDogX3RoaXMyLmNvbXBhbnlpZCwKICAgICAgICAgICAgZW1haWw6IF90aGlzMi4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXMyLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIHRva2VuOiBfdGhpczIuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogX3RoaXMyLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KF90aGlzMi4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIF90aGlzMi5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgdmFyIHVzZXJsaXN0ID0gW107CgogICAgICAgICAgICBmb3IgKHZhciBpIGluIF90aGlzMi5lbWFpbGxpc3QpIHsKICAgICAgICAgICAgICB1c2VybGlzdC5wdXNoKHsKICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBfdGhpczIuZW1haWxsaXN0W2ldLmVtYWlsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLnVzZXJzX2xpc3Rfc3luYygpLCB7CiAgICAgICAgICAgICAgZGVsZXRlOiB1c2VybGlzdAogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgey8vIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJRdWVyeSBFeGVjdXRlZCBTdWNjZXNzZnVsbHkiKSB7CiAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoIlVzZXIgaGFzIGJlZW4gZGVsZXRlZCBzdWNjZXNzZnVsbHkiKTsKCiAgICAgICAgICAgICAgaWYgKChfdGhpczIuZW1haWxsaXN0Lmxlbmd0aCA9PT0gMSAmJiBfdGhpczIudXNlcnMubGVuZ3RoID09PSAxIHx8IF90aGlzMi5lbWFpbGxpc3QubGVuZ3RoID09PSBfdGhpczIudXNlcnMubGVuZ3RoKSAmJiBfdGhpczIucGFnZV9ubyA+IDEpIHsKICAgICAgICAgICAgICAgIF90aGlzMi5wYWdlX25vID0gX3RoaXMyLnBhZ2Vfbm8gLSAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgX3RoaXMyLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgICAgICBfdGhpczIuZW1haWxsaXN0ID0gW107CgogICAgICAgICAgICBfdGhpczIubG9hZF91c2VyKCk7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICBfdGhpczIuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgcGFzc3dvcmRfdG9nZ2xlOiBmdW5jdGlvbiBwYXNzd29yZF90b2dnbGUoZXZlbnQpIHsKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgdmFyIHBhc3N3b3JkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZvcm1fcGFzc3dvcmQiKTsKCiAgICAgIGlmIChwYXNzd29yZC50eXBlID09ICJ0ZXh0IikgewogICAgICAgIHBhc3N3b3JkLnR5cGUgPSAicGFzc3dvcmQiOwogICAgICB9IGVsc2UgaWYgKHBhc3N3b3JkLnR5cGUgPT0gInBhc3N3b3JkIikgewogICAgICAgIHBhc3N3b3JkLnR5cGUgPSAidGV4dCI7CiAgICAgIH0KICAgIH0sCiAgICB1cGRhdGVfdXNlcnM6IGZ1bmN0aW9uIHVwZGF0ZV91c2VycyhtZXNzYWdlMSwgbWVzc2FnZTIpIHsKICAgICAgaWYgKG1lc3NhZ2UxID09IG51bGwgfHwgbWVzc2FnZTIgPT0gbnVsbCkge30gZWxzZSB7CiAgICAgICAgdGhpcy51c2VycyA9IFtdOwoKICAgICAgICBmb3IgKHZhciBpIGluIG1lc3NhZ2UxKSB7CiAgICAgICAgICB0aGlzLnVzZXJzLnB1c2goewogICAgICAgICAgICBlbWFpbDogbWVzc2FnZTFbaV0sCiAgICAgICAgICAgIHJvbGU6IG1lc3NhZ2UyW2ldCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBwYWdlX3JlcXVpcmU6IGZ1bmN0aW9uIHBhZ2VfcmVxdWlyZShwYWdlX25vKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICB0aGlzLmVtYWlsbGlzdCA9IFtdOwoKICAgICAgaWYgKHBhZ2Vfbm8gPT0gMCB8fCBwYWdlX25vID09IHRoaXMudG90YWxfcGFnZXMgKyAxKSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLnNlYXJjaF9uYW1lICE9ICIiKSB7CiAgICAgICAgaWYgKHBhZ2Vfbm8gPT0gIi4uLnMiKSB7CiAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKDEgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgfSBlbHNlIGlmIChwYWdlX25vID09ICIuLi5sIikgewogICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCh0aGlzLnRvdGFsX3BhZ2VzICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBwYWdlX25vOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmxvYWRfdXNlcnNfdXJsKCksIHsKICAgICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBpc3NlYXJjaDogdHJ1ZSwKICAgICAgICAgIGtleTogdGhpcy5zZWFyY2hfbmFtZSwKICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vCiAgICAgICAgfSwgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBfdGhpczMuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEudXNlcl9saXN0Lmxlbmd0aCAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgX3RoaXMzLm51bWJlcl9vZl9yb3dzID0gcmVzcG9uc2UuZGF0YS51c2VyX2xpc3QubGVuZ3RoOwogICAgICAgICAgICBfdGhpczMudG90YWxfcGFnZXMgPSByZXNwb25zZS5kYXRhLnBhZ2VfY291bnQ7CiAgICAgICAgICAgIF90aGlzMy51c2VycyA9IFtdOwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpczMubnVtYmVyX29mX3Jvd3M7IGkrKykgewogICAgICAgICAgICAgIF90aGlzMy51c2Vycy5wdXNoKHsKICAgICAgICAgICAgICAgIGVtYWlsOiByZXNwb25zZS5kYXRhLnVzZXJfbGlzdFtpXS5FbWFpbCwKICAgICAgICAgICAgICAgIHJvbGU6IHJlc3BvbnNlLmRhdGEudXNlcl9saXN0W2ldLlJvbGUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX3RoaXMzLnBhZ2Vfbm8gPSBwYWdlX25vOwoKICAgICAgICAgICAgX3RoaXMzLnNldHBhZ2luYXRpb24oX3RoaXMzLnBhZ2Vfbm8pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiTm8gUmVzdWx0cyBGb3VuZCIpIHsKICAgICAgICAgICAgdG9hc3RyLmVycm9yKCJObyB1c2VycyBmb3VuZCIpOwoKICAgICAgICAgICAgX3RoaXMzLmxvYWRfdXNlcigpOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiSW50cm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50cm5hbCBTZXJ2ZXIgRXJyb3IiKTsKCiAgICAgICAgICAgIF90aGlzMy5sb2FkX3VzZXIoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50cm5hbCBTZXJ2ZXIgRXJyb3IiKTsKCiAgICAgICAgICAgIF90aGlzMy5sb2FkX3VzZXIoKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzMy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CgogICAgICAgIGlmIChwYWdlX25vID09ICIuLi5zIikgewogICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCgxICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSAiLi4ubCIpIHsKICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgodGhpcy50b3RhbF9wYWdlcyArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5wYWdlX25vID0gcGFnZV9ubzsKICAgICAgICB9CgogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5sb2FkX3VzZXJzX3VybCgpLCB7CiAgICAgICAgICBpbnRlbnQ6IHRoaXMubmV3X2ludGVudHMsCiAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uLAogICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzMy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgIF90aGlzMy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGFbMV0ubnVtYmVyX29mX3Jvd3M7CiAgICAgICAgICBfdGhpczMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwoX3RoaXMzLm51bWJlcl9vZl9yb3dzIC8gX3RoaXMzLnBlcl9wYWdlKTsKCiAgICAgICAgICBfdGhpczMudXBkYXRlX3VzZXJzKHJlc3BvbnNlLmRhdGFbMF0uRW1haWwsIHJlc3BvbnNlLmRhdGFbMF0uUm9sZSk7CgogICAgICAgICAgX3RoaXMzLnNldHBhZ2luYXRpb24oX3RoaXMzLnBhZ2Vfbm8pOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgX3RoaXMzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgcm9sZV9zdWJtaXRfYXBpOiBmdW5jdGlvbiByb2xlX3N1Ym1pdF9hcGkoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMucm9sZV91cmwoKSwgewogICAgICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgc3VwZXJhZG1pbmNvbXBhbnluYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICAgIHN1cGVyYWRtaW5jb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgIHJvbGU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucwogICAgICB9LCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXM0LnJvbGVzID0gcmVzcG9uc2UuZGF0YS5yb2xlbGlzdDsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzNC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGFkZF91c2VyOiBmdW5jdGlvbiBhZGRfdXNlcigpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgaWYgKHRoaXMuZW1haWwgPT0gIiIgfHwgdGhpcy52YWxpZEVtYWlsICE9IHRydWUpIHsKICAgICAgICB0b2FzdHIuZXJyb3IoIlBsZWFzZSBFbnRlciBhIFZhbGlkIEVtYWlsIik7CiAgICAgIH0gLy8gZWxzZSBpZih0aGlzLnNob3dfcGFzc3dvcmRfZmllbGQmJgogICAgICAvLyAgICh0aGlzLnBhc3N3b3JkPT0iInx8dGhpcy52YWxpZFBhc3N3b3JkIT10cnVlKSkgewogICAgICAvLyAgIHRvYXN0ci5lcnJvcigiUGxlYXNlIEVudGVyIGEgVmFsaWQgUGFzc3dvcmQiKTsKICAgICAgLy8gfQogICAgICAvLyBlbHNlIGlmKHRoaXMucG9ydGFsX3JvbGVzLnR5cGUgPT09ICJCb3QiKXsKICAgICAgLy8gICBpZiAodGhpcy5lbWFpbCA9PSAiIiB8fCB0aGlzLnZhbGlkRW1haWwgIT0gdHJ1ZSkgewogICAgICAvLyAgICAgICB0b2FzdHIuZXJyb3IoIlBsZWFzZSBFbnRlciBhIFZhbGlkIEVtYWlsIik7CiAgICAgIC8vIH0KICAgICAgLy8gfQogICAgICBlbHNlIGlmICh0aGlzLmNvcnJlY3RfcGFzc3dvcmQgPT0gZmFsc2UgJiYgdGhpcy5yb2xlX3R5cGVfc2VsZWN0ZWQgPT09ICJQb3J0YWwgVXNlciIpIHsKICAgICAgICAgIHRvYXN0ci5lcnJvcigiUGxlYXNlIEVudGVyIGEgVmFsaWQgUGFzc3dvcmQiKTsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRfcm9sZSA9PSAiIikgewogICAgICAgICAgdG9hc3RyLmVycm9yKCJQbGVhc2UgU2VsZWN0IFJvbGUgTmFtZSIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnNob3dfbG9hZGVyID0gdHJ1ZTsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICAgICQoIiN1c2VybW9kZWwiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgdmFyIGN1cnJlbnRfZGF0ZSA9IG5ldyBEYXRlKCk7IC8vIGlmKHRoaXMucm9sZV90eXBlX3NlbGVjdGVkID09PSAiUG9ydGFsIFVzZXIiKQoKICAgICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmFkZF91c2VyX3VybCgpLCB7CiAgICAgICAgICAgIHJvbGU6IHRoaXMucm9sZV9zZWxlY3RlZCwKICAgICAgICAgICAgc3RhZmZlbWFpbDogdGhpcy5lbWFpbCwKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMucGFzc3dvcmQsCiAgICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICBkb21haW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5kb21haW4sCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICBkYXRlOiBjdXJyZW50X2RhdGUsCiAgICAgICAgICAgIHVzZXJfdHlwZTogdGhpcy5yb2xlX3R5cGVfc2VsZWN0ZWQKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIF90aGlzNS5zcGlubmVyT24gPSBmYWxzZTsgLy8gdGhpcy5yb2xlX3NlbGVjdGVkID0gbnVsbDsKCiAgICAgICAgICAgIHZhciByZXNwb25zZV9hcGkgPSByZXNwb25zZS5kYXRhOwoKICAgICAgICAgICAgaWYgKHJlc3BvbnNlX2FwaSA9PSAiTmV3IHVzZXIgYWRkZWQiKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0aXRsZTogIkFkZGVkIFN1Y2Nlc3NmdWxseSEhIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJUaGUgdmVyaWZpY2F0aW9uIGxpbmsgaGFzIGJlZW4gc2VudCB0byB0aGUgcm9sZSdzIGVtYWlsIHRoYXQgeW91IGhhdmUgYWRkZWQgbm93LiBQbGVhc2UgdmVyaWZ5IGJlZm9yZSBsb2dnaW5nIGluIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAzNTAwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VfYXBpLmluY2x1ZGVzKCJUaGlzIGVtYWlsIGlzIGEgZHVwbGljYXRlLiIpKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgdGV4dDogIlRoaXMgRW1haWwgaXMgYWxyZWFkeSByZWdpc3RlcmVkLiBQbGVhc2UgdHJ5IHdpdGggYW5vdGhlciBlbWFpbCIsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfdGhpczUubG9hZF91c2VyKCk7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgICBfdGhpczUuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0sCiAgICBjbGVhcl9maWVsZHM6IGZ1bmN0aW9uIGNsZWFyX2ZpZWxkcygpIHsKICAgICAgdGhpcy5lbWFpbCA9ICIiOwogICAgICB0aGlzLnBhc3N3b3JkID0gIiI7CiAgICAgIHRoaXMuc2VsZWN0ZWRfcm9sZSA9ICIiOwogICAgfSwKICAgIGNhbGxzZWFyY2g6IGZ1bmN0aW9uIGNhbGxzZWFyY2goKSB7CiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMykgewogICAgICAgIHRoaXMuc2VhcmNoX3Byb2R1Y3QoKTsKICAgICAgfQogICAgfSwKICAgIHNlYXJjaF9wcm9kdWN0OiBmdW5jdGlvbiBzZWFyY2hfcHJvZHVjdCgpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSAhPSAiIikgewogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgIHRoaXMuZW1haWxsaXN0ID0gW107CiAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmxvYWRfdXNlcnNfdXJsKCksIHsKICAgICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBpc3NlYXJjaDogdHJ1ZSwKICAgICAgICAgIGtleTogdGhpcy5zZWFyY2hfbmFtZSwKICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgICAgcGFnZV9ubzogMQogICAgICAgIH0sIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXM2LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9ICJ0b2tlbiBpbnZhbGlkIiAmJiByZXNwb25zZS5kYXRhICE9IG51bGwgJiYgcmVzcG9uc2UuZGF0YS5NU0cgIT0gIk5vIFJlc3VsdHMgRm91bmQiICYmIHJlc3BvbnNlLmRhdGEuTVNHICE9ICJJbnRybmFsIFNlcnZlciBFcnJvciIgJiYgcmVzcG9uc2UuZGF0YS5NU0cgIT0gIkludHJuYWwgU2VydmVyIEVycm9yIikgewogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS51c2VyX2xpc3QubGVuZ3RoICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIF90aGlzNi5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEudXNlcl9saXN0Lmxlbmd0aDsKICAgICAgICAgICAgICBfdGhpczYudG90YWxfcGFnZXMgPSByZXNwb25zZS5kYXRhLnBhZ2VfY291bnQ7CiAgICAgICAgICAgICAgX3RoaXM2LnVzZXJzID0gW107CgogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXM2Lm51bWJlcl9vZl9yb3dzOyBpKyspIHsKICAgICAgICAgICAgICAgIF90aGlzNi51c2Vycy5wdXNoKHsKICAgICAgICAgICAgICAgICAgZW1haWw6IHJlc3BvbnNlLmRhdGEudXNlcl9saXN0W2ldLkVtYWlsLAogICAgICAgICAgICAgICAgICByb2xlOiByZXNwb25zZS5kYXRhLnVzZXJfbGlzdFtpXS5Sb2xlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzNi5wYWdlX25vID0gMTsKCiAgICAgICAgICAgICAgX3RoaXM2LnNldHBhZ2luYXRpb24oX3RoaXM2LnBhZ2Vfbm8pOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09PSAiTm8gUmVzdWx0cyBGb3VuZCIpIHsKICAgICAgICAgICAgdG9hc3RyLmVycm9yKCJObyB1c2VycyBmb3VuZCIpOwoKICAgICAgICAgICAgX3RoaXM2LmxvYWRfdXNlcigpOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiSW50cm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50cm5hbCBTZXJ2ZXIgRXJyb3IiKTsKCiAgICAgICAgICAgIF90aGlzNi5sb2FkX3VzZXIoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50cm5hbCBTZXJ2ZXIgRXJyb3IiKTsKCiAgICAgICAgICAgIF90aGlzNi5sb2FkX3VzZXIoKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0b2FzdHIuZXJyb3IoIkVudGVyIHByb3BlciBkYXRhIGZvciBzZWFyY2hpbmciKTsKICAgICAgfQogICAgfSwKICAgIHNldHBhZ2luYXRpb246IGZ1bmN0aW9uIHNldHBhZ2luYXRpb24ocGFnZV9ubykgewogICAgICB0aGlzLnBhZ2VfYXJyYXkgPSBbXTsKCiAgICAgIGlmICh0aGlzLnRvdGFsX3BhZ2VzIDw9IDcpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudG90YWxfcGFnZXM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChwYWdlX25vID09IDEpIHsKICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCA0OyBfaTMrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2kzICsgMSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPT0gdGhpcy50b3RhbF9wYWdlcykgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICAgIGZvciAodmFyIF9pNCA9IHRoaXMudG90YWxfcGFnZXMgLSA0OyBfaTQgPCB0aGlzLnRvdGFsX3BhZ2VzOyBfaTQrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2k0ICsgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPD0gNCkgewogICAgICAgIGZvciAodmFyIF9pNSA9IDA7IF9pNSA8IHBhZ2Vfbm8gKyAzOyBfaTUrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2k1ICsgMSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPj0gdGhpcy50b3RhbF9wYWdlcyAtIDQpIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwoKICAgICAgICBmb3IgKHZhciBfaTYgPSBwYWdlX25vIC0gNDsgX2k2IDwgdGhpcy50b3RhbF9wYWdlczsgX2k2KyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKF9pNiArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwoKICAgICAgICBmb3IgKHZhciBfaTcgPSBwYWdlX25vIC0gMzsgX2k3IDw9IHBhZ2Vfbm8gKyAzOyBfaTcrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2k3KTsKICAgICAgICB9CgogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0KICAgIH0sCiAgICBzaG93X2ZpZWxkOiBmdW5jdGlvbiBzaG93X2ZpZWxkKHNlbGVjdGVkT3B0aW9uLCBpZCkgewogICAgICAvLyBjb25zb2xlLmxvZyhzZWxlY3RlZE9wdGlvbik7CiAgICAgIHRoaXMucm9sZV9zZWxlY3RlZCA9IHNlbGVjdGVkT3B0aW9uLm5hbWU7CiAgICAgIHRoaXMucm9sZV90eXBlX3NlbGVjdGVkID0gc2VsZWN0ZWRPcHRpb24udHlwZTsKICAgICAgdGhpcy5zaG93X2VtYWlsX2ZpZWxkID0gZmFsc2U7CiAgICAgIHRoaXMuc2hvd19wYXNzd29yZF9maWVsZCA9IGZhbHNlOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBvcnRhbF9yb2xlcy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0aGlzLnBvcnRhbF9yb2xlc1tpXS5yb2xlID09PSBzZWxlY3RlZE9wdGlvbi5uYW1lKSB7CiAgICAgICAgICBpZiAodGhpcy5wb3J0YWxfcm9sZXNbaV0udHlwZSA9PT0gIkJvdCIpIHsKICAgICAgICAgICAgdGhpcy5zaG93X2VtYWlsX2ZpZWxkID0gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wb3J0YWxfcm9sZXNbaV0udHlwZSA9PT0gIlBvcnRhbCIpIHsKICAgICAgICAgICAgdGhpcy5zaG93X2VtYWlsX2ZpZWxkID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5zaG93X3Bhc3N3b3JkX2ZpZWxkID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAoKICBnZXQgbWV0aG9kcygpIHsKICAgIHJldHVybiB0aGlzLl9tZXRob2RzOwogIH0sCgogIHNldCBtZXRob2RzKHZhbHVlKSB7CiAgICB0aGlzLl9tZXRob2RzID0gdmFsdWU7CiAgfQoKfTs="},null]}