{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js!/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Data Inputs/AddIntent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Data Inputs/AddIntent.vue","mtime":1660042032563},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvaG9tZS92aW1hbGVzaC9MZWFybmluZy9kZXZvcHNfdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKCnZhciBfbmFtZSRkYXRhJHdhdGNoJGNyZWE7CgovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgU3dhbCBmcm9tICJzd2VldGFsZXJ0MiI7CmltcG9ydCBhcGlfY2FsbHMgZnJvbSAiQC9wb3J0YWwvYXBpX2NhbGxzIjsKaW1wb3J0IHsgc2V0VGltZW91dCB9IGZyb20gInRpbWVycyI7CmV4cG9ydCBkZWZhdWx0IChfbmFtZSRkYXRhJHdhdGNoJGNyZWEgPSB7CiAgbmFtZTogImFkZC1pbnRlbnQiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpc1Zpc2libGVTZWFyY2hDbGVhcjogZmFsc2UsCiAgICAgIHNwaW5uZXJPbjogZmFsc2UsCiAgICAgIGNoZWNrZWRfbGlzdDogW10sCiAgICAgIHRvdGFsX3BhZ2VzOiBudWxsLAogICAgICBwYWdlX25vOiAxLAogICAgICBwZXJfcGFnZTogMjAsCiAgICAgIG5ld19pbnRlbnRfbGlzdDogW10sCiAgICAgIG5ld19pbnRlbnRzOiAiIiwKICAgICAgaW50ZW50bGlzdDogW10sCiAgICAgIGNvbXBhbnluYW1lOiAiIiwKICAgICAgY29tcGFueWlkOiAiIiwKICAgICAgbnVtYmVyX29mX3Jvd3M6IG51bGwsCiAgICAgIGVkaXQ6ICJGYWxzZSIsCiAgICAgIG9sZF9pbnRlbnRfZGF0YTogW10sCiAgICAgIG5ld19pbnRlbnRfZGF0YTogW10sCiAgICAgIHNlYXJjaF9uYW1lOiAiIiwKICAgICAgcGFnZV9hcnJheTogW10sCiAgICAgIGFkZF9pbnRlbnRzX2xpc3Q6IFsiIl0sCiAgICAgIGlzR2xvYmFsRWRpdDogZmFsc2UsCiAgICAgIGdsb2JhbF9pbnRlbnRzX2VkaXRfbGlzdDogW10gLy8gc2VhcmNoX2J5OiAnJywKICAgICAgLy8gc2VhcmNoYnk6ICcnLAoKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgaXNHbG9iYWxFZGl0OiBmdW5jdGlvbiBpc0dsb2JhbEVkaXQobmV3VmFsKSB7CiAgICAgIGlmIChCb29sZWFuKG5ld1ZhbCkpIHsKICAgICAgICB0aGlzLmdsb2JhbF9pbnRlbnRzX2VkaXRfbGlzdCA9IHRoaXMuaW50ZW50bGlzdC5tYXAoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICAgIHZhciBpbnRlbnQgPSBfcmVmLmludGVudDsKICAgICAgICAgIHJldHVybiBpbnRlbnQ7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICBpZiAodGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUgPT0gIlN1cGVyQWRtaW4iKSB7CiAgICAgIGlmICh0aGlzLiRzZXNzaW9uLmhhcygiQ29tcGFueUlkIikpIHsKICAgICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJDb21wYW55SWQiKTsKICAgICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlOYW1lIik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb21wYW55aWQgPSB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZDsKICAgICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgICAgICB0b2FzdHIud2FybmluZyh0aGlzLnRsdCgnc2VsZWN0X2NvbXBhbnlfbmFtZV90ZXh0JykpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgIH0KCiAgICB0aGlzLmxvYWRfaW50ZW50cygpOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciB2bSA9IHRoaXM7CiAgICAkKCIjc2VsZWN0YWxsIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICBpZiAoJCh0aGlzKS5pcygiOmNoZWNrZWQiKSkgewogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICB9IGVsc2UgewogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICB2bS5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgfQogICAgfSk7CiAgICAkKCIjaW50ZW50bW9kZWwiKS5vbigiaGlkZGVuLmJzLm1vZGFsIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICB2bS5jaGVja2VkX2xpc3QgPSBbXTsKICAgIH0pOwoKICAgIGlmICh0aGlzLiRyb3V0ZS5wYXJhbXMubW9kYWxfb3Blbl9zd2l0Y2hfdGFiKSB7CiAgICAgICQoIiNpbnRlbnRtb2RlbCIpLm1vZGFsKCJzaG93Iik7CiAgICB9IC8vICQoIiNmcm9tX2RhdGVwaWNrZXIiKS5kYXRlcGlja2VyKHsKICAgIC8vICAgZGF0ZUZvcm1hdDogInl5LW1tLWRkIiwKICAgIC8vICAgb25DbG9zZTogKGRhdGVUZXh0LCBpbnN0KSA9PiB7CiAgICAvLyAgICAgdGhpcy5zZWFyY2hfbmFtZT1kYXRlVGV4dDsKICAgIC8vICAgfSwKICAgIC8vICAgb25TZWxlY3Q6IGZ1bmN0aW9uKGRhdGVUZXh0LCBpbnN0KSB7CiAgICAvLyAgIH0KICAgIC8vIH0pOwoKICB9Cn0sIF9kZWZpbmVQcm9wZXJ0eShfbmFtZSRkYXRhJHdhdGNoJGNyZWEsICJ3YXRjaCIsIHsKICBzZWFyY2hfbmFtZTogZnVuY3Rpb24gc2VhcmNoX25hbWUoKSB7CiAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSA9PT0gIiIpIHsKICAgICAgdGhpcy5sb2FkX2ludGVudHMoKTsKICAgICAgdGhpcy5pc1Zpc2libGVTZWFyY2hDbGVhciA9IGZhbHNlOwogICAgfSBlbHNlIGlmICh0aGlzLnNlYXJjaF9uYW1lICE9PSAiIikgewogICAgICB0aGlzLmlzVmlzaWJsZVNlYXJjaENsZWFyID0gdHJ1ZTsKICAgIH0KICB9Cn0pLCBfZGVmaW5lUHJvcGVydHkoX25hbWUkZGF0YSR3YXRjaCRjcmVhLCAibWV0aG9kcyIsIHsKICBjbGVhcl9zZWFyY2hfbmFtZTogZnVuY3Rpb24gY2xlYXJfc2VhcmNoX25hbWUoKSB7CiAgICB0aGlzLnNlYXJjaF9uYW1lID0gIiI7CiAgfSwKICBsb2FkX2ludGVudHM6IGZ1bmN0aW9uIGxvYWRfaW50ZW50cygpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgdGhpcy5pbnRlbnRsaXN0ID0gW107CiAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5hZGRfaW50ZW50X3VybCgpLCB7CiAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICBzdWJzY3JpcHRpb246IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5zdWJzY3JpcHRpb24sCiAgICAgIHNob3dpbnRlbnQ6ICJUcnVlIiwKICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZQogICAgfSwgewogICAgICBoZWFkZXJzOiB7CiAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgfQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgX3RoaXMuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICBpZiAocmVzcG9uc2UuZGF0YSAhPSAidG9rZW4gaW52YWxpZCIpIHsKICAgICAgICBfdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGFbM10ubnVtYmVyX29mX3Jvd3M7CiAgICAgICAgX3RoaXMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwoX3RoaXMubnVtYmVyX29mX3Jvd3MgLyBfdGhpcy5wZXJfcGFnZSk7CgogICAgICAgIGZvciAodmFyIGkgaW4gcmVzcG9uc2UuZGF0YVswXSkgewogICAgICAgICAgX3RoaXMuaW50ZW50bGlzdC5wdXNoKHsKICAgICAgICAgICAgaW50ZW50OiByZXNwb25zZS5kYXRhWzBdW2ldLnJlcGxhY2UoIiIuY29uY2F0KF90aGlzLmNvbXBhbnlpZCwgIl8iKSwgIiIpLAogICAgICAgICAgICBlbWFpbDogcmVzcG9uc2UuZGF0YVsxXVtpXSwKICAgICAgICAgICAgY3JlYXRlZDogcmVzcG9uc2UuZGF0YVsyXVtpXQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBfdGhpcy5zZXRwYWdpbmF0aW9uKF90aGlzLnBhZ2Vfbm8pOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgX3RoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgY2FsbHNlYXJjaDogZnVuY3Rpb24gY2FsbHNlYXJjaCgpIHsKICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMykgewogICAgICB0aGlzLnNlYXJjaF9pbnRlbnQoKTsKICAgIH0KICB9LAogIHNlYXJjaF9pbnRlbnQ6IGZ1bmN0aW9uIHNlYXJjaF9pbnRlbnQoKSB7CiAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSAhPSAiIikgewogICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmFkZF9pbnRlbnRfdXJsKCksIHsKICAgICAgICBjb21wYW55X2lkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgIGlzc2VhcmNoOiB0cnVlLAogICAgICAgIGtleTogdGhpcy5zZWFyY2hfbmFtZSwKICAgICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICBwYWdlX25vOiAxCiAgICAgIH0sIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczIuc3Bpbm5lck9uID0gZmFsc2U7CgogICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1TRyAhPSAiSW50ZXJuYWwgU2VydmVyIEVycm9yIiAmJiByZXNwb25zZS5kYXRhLk1TRyAhPSAiTm8gSW50ZW50cyBGb3VuZCIpIHsKICAgICAgICAgIF90aGlzMi5pbnRlbnRsaXN0ID0gW107CiAgICAgICAgICBfdGhpczIucGFnZV9ubyA9IDE7CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT0gInRva2VuIGludmFsaWQiKSB7CiAgICAgICAgICAgIF90aGlzMi5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEuaW50ZW50bGlzdC5sZW5ndGg7CiAgICAgICAgICAgIF90aGlzMi50b3RhbF9wYWdlcyA9IHJlc3BvbnNlLmRhdGEucGFnZWNvdW50OwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNwb25zZS5kYXRhLmludGVudGxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBfdGhpczIuaW50ZW50bGlzdC5wdXNoKHsKICAgICAgICAgICAgICAgIGludGVudDogcmVzcG9uc2UuZGF0YS5pbnRlbnRsaXN0W2ldLkludGVudC5yZXBsYWNlKF90aGlzMi5jb21wYW55aWQgKyAiXyIsICIiKSwKICAgICAgICAgICAgICAgIGVtYWlsOiByZXNwb25zZS5kYXRhLmludGVudGxpc3RbaV0uQ3JlYXRlZEJ5LAogICAgICAgICAgICAgICAgY3JlYXRlZDogcmVzcG9uc2UuZGF0YS5pbnRlbnRsaXN0W2ldLkNyZWF0ZWREYXRlCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF90aGlzMi5zZXRwYWdpbmF0aW9uKF90aGlzMi5wYWdlX25vKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJObyBJbnRlbnRzIEZvdW5kIikgewogICAgICAgICAgdG9hc3RyLmVycm9yKCJObyBpbnRlbnQgZm91bmQiKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJJbnRybmFsIFNlcnZlciBFcnJvciIpIHsKICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50cm5hbCBTZXJ2ZXIgRXJyb3IiKTsgLy8gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAvLyAgIHRoaXMuJHJvdXRlci5nbygpOwogICAgICAgICAgLy8gfSwgMjUwMCk7CgogICAgICAgICAgX3RoaXMyLmxvYWRfaW50ZW50cygpOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgIF90aGlzMi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgdG9hc3RyLmVycm9yKCJFbnRlciBwcm9wZXIgZGF0YSBmb3Igc2VhcmNoaW5nIik7CiAgICB9CiAgfSwKICBzZWxlY3RlZF9pbnRlbnRzOiBmdW5jdGlvbiBzZWxlY3RlZF9pbnRlbnRzKGludGVudCkgewogICAgaWYgKGludGVudCA9PSAiYWxsIikgewogICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHsKICAgICAgICB2YXIgdGVtcCA9IHRoaXMuaW50ZW50bGlzdDsKICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IHRlbXA7CiAgICAgIH0gZWxzZSBpZiAoIWV2ZW50LnRhcmdldC5jaGVja2VkKSB7CiAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICB2YXIgdmFsX2luZGV4ID0gdGhpcy5jaGVja2VkX2xpc3QuZmlsdGVyKGZ1bmN0aW9uIChpbnRlbnRzKSB7CiAgICAgICAgICByZXR1cm4gaW50ZW50cy5pbnRlbnQgPT0gaW50ZW50OwogICAgICAgIH0pOwoKICAgICAgICBpZiAodmFsX2luZGV4Lmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdC5wdXNoKGludGVudCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkID09IGZhbHNlKSB7CiAgICAgICAgdmFyIHNlbGVjdGFsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzZWxlY3RhbGwiKTsKCiAgICAgICAgaWYgKHNlbGVjdGFsbC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICAgIHNlbGVjdGFsbC5jaGVja2VkID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICB2YXIgX3RlbXAgPSB0aGlzLmNoZWNrZWRfbGlzdC5maWx0ZXIoZnVuY3Rpb24gKGludGVudHMpIHsKICAgICAgICAgIHJldHVybiBpbnRlbnRzICE9IGludGVudDsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBfdGVtcDsKICAgICAgfQogICAgfQogIH0sCiAgcGFnZV9jaGFuZ2U6IGZ1bmN0aW9uIHBhZ2VfY2hhbmdlKHBhZ2Vfbm8pIHsKICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgIGF4aW9zLnBvc3QoYXBpX2NhbGxzLmFkZF9pbnRlbnRfdXJsKCksIHsKICAgICAgaW50ZW50OiB0aGlzLmNvbXBhbnlpZCArICJfIiArIHRoaXMubmV3X2ludGVudHMsCiAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICBzdWJzY3JpcHRpb246IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5zdWJzY3JpcHRpb24sCiAgICAgIHNob3dpbnRlbnQ6ICJUcnVlIiwKICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZQogICAgfSwgewogICAgICBoZWFkZXJzOiB7CiAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgfQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgX3RoaXMzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICBfdGhpczMubnVtYmVyX29mX3Jvd3MgPSByZXNwb25zZS5kYXRhWzNdLm51bWJlcl9vZl9yb3dzOwoKICAgICAgZm9yICh2YXIgaSBpbiByZXNwb25zZS5kYXRhWzBdKSB7CiAgICAgICAgX3RoaXMzLmludGVudGxpc3QucHVzaCh7CiAgICAgICAgICBpbnRlbnQ6IHJlc3BvbnNlLmRhdGFbMF1baV0ucmVwbGFjZShfdGhpczMuY29tcGFueWlkICsgIl8iLCAiIiksCiAgICAgICAgICBlbWFpbDogcmVzcG9uc2UuZGF0YVsxXVtpXSwKICAgICAgICAgIGNyZWF0ZWQ6IHJlc3BvbnNlLmRhdGFbMl1baV0KICAgICAgICB9KTsKICAgICAgfQogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgX3RoaXMzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICB9CiAgICB9KTsKICB9LAogIGVkaXRfaW50ZW50OiBmdW5jdGlvbiBlZGl0X2ludGVudChpbmRleCkgewogICAgdGhpcy5uZXdfaW50ZW50cyA9IHRoaXMuaW50ZW50bGlzdFtpbmRleF0uaW50ZW50OwogICAgdGhpcy5vbGRfaW50ZW50X2RhdGEucHVzaCgiIi5jb25jYXQodGhpcy5jb21wYW55aWQsICJfIikuY29uY2F0KHRoaXMuaW50ZW50bGlzdFtpbmRleF0uaW50ZW50KSk7CiAgICB0aGlzLmVkaXQgPSAiVHJ1ZSI7CiAgfSwKICBkZWxldGVfc2VsZWN0ZWQ6IGZ1bmN0aW9uIGRlbGV0ZV9zZWxlY3RlZCgpIHsKICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgIGlmICh0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGggPT0gMCkgewogICAgICBTd2FsLmZpcmUoIk5vIGludGVudCBzZWxlY3RlZCEiLCAiIiwgImVycm9yIik7CiAgICB9IGVsc2UgaWYgKHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aCA+IDApIHsKICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmNoZWNrZWRfbGlzdCkgewogICAgICAgIHRoaXMubmV3X2ludGVudF9saXN0LnB1c2godGhpcy5jb21wYW55aWQgKyAiXyIgKyB0aGlzLmNoZWNrZWRfbGlzdFtpXSk7CiAgICAgIH0KCiAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgdGl0bGU6ICJBcmUgeW91IHN1cmU/IiwKICAgICAgICB0ZXh0OiAiWW91IHdvbid0IGJlIGFibGUgdG8gcmV2ZXJ0IHRoaXMhIiwKICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiWWVzLCBkZWxldGUhISIKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgX3RoaXM0LnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5kZWxldGVfaW50ZW50X3VybCgpLCB7CiAgICAgICAgICAgIGludGVudF9saXN0OiBfdGhpczQubmV3X2ludGVudF9saXN0LAogICAgICAgICAgICBjb21wYW55X25hbWU6IF90aGlzNC5jb21wYW55bmFtZSwKICAgICAgICAgICAgY29tcGFueV9pZDogX3RoaXM0LmNvbXBhbnlpZCwKICAgICAgICAgICAgZW1haWw6IF90aGlzNC4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXM0LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIHRva2VuOiBfdGhpczQuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogX3RoaXM0LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KF90aGlzNC4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIF90aGlzNC5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJJTlRFTlRTIERFTEVURUQiKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiWW91ciBJbnRlbnQocykgaGF2ZSBiZWVuIGRlbGV0ZWQuIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwCiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzNC5sb2FkX2ludGVudHMoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhID09ICJOb3RoaW5nIHRvIGRlbGV0ZSEiKSB7CiAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKCJZb3UgaGF2ZSBub3Qgc2VsZWN0ZWQgYW55IGludGVudCB0byBiZSBkZWxldGVkLiIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIlRyYWluZWQgaW50ZW50IGRlbGV0aW9uIGlzIGN1cnJlbnRseSBkaXNhYmxlZCEiKSB7CiAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKCJEZWxldGlvbiBvZiB0cmFpbmVkL2NvbmZpZ3VyZWQgaW50ZW50IGlzIGRpc2FibGVkLiBBIENvZGVhcnJheSBBZG1pbiB3aWxsIGdldCBpbiBjb250YWN0IHdpdGggeW91Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgICAgICAgIF90aGlzNC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAogIGRlbGV0ZV9pbnRlbnQ6IGZ1bmN0aW9uIGRlbGV0ZV9pbnRlbnQoaW5kZXgpIHsKICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgIHRoaXMubmV3X2ludGVudF9saXN0WzBdID0gdGhpcy5jb21wYW55aWQgKyAiXyIgKyB0aGlzLmludGVudGxpc3RbaW5kZXhdLmludGVudDsKICAgIFN3YWwuZmlyZSh7CiAgICAgIHRpdGxlOiAiQXJlIHlvdSBzdXJlPyIsCiAgICAgIHRleHQ6ICJZb3Ugd29uJ3QgYmUgYWJsZSB0byByZXZlcnQgdGhpcyEiLAogICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICBjb25maXJtQnV0dG9uVGV4dDogIlllcywgZGVsZXRlIGl0ISIKICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgX3RoaXM1LnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuZGVsZXRlX2ludGVudF91cmwoKSwgewogICAgICAgICAgaW50ZW50X2xpc3Q6IF90aGlzNS5uZXdfaW50ZW50X2xpc3QsCiAgICAgICAgICBjb21wYW55X25hbWU6IF90aGlzNS5jb21wYW55bmFtZSwKICAgICAgICAgIGNvbXBhbnlfaWQ6IF90aGlzNS5jb21wYW55aWQsCiAgICAgICAgICBlbWFpbDogX3RoaXM1LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogX3RoaXM1LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogX3RoaXM1LiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgc3Vic2NyaXB0aW9uOiBfdGhpczUuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5zdWJzY3JpcHRpb24KICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQoX3RoaXM1LiRzZXNzaW9uLmdldCgiYXQiKSkKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgX3RoaXM1LnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJJTlRFTlRTIERFTEVURUQiKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICB0ZXh0OiAiWW91ciBJbnRlbnQocykgaGF2ZSBiZWVuIGRlbGV0ZWQuIiwKICAgICAgICAgICAgICB0aW1lcjogMjAwMCwKICAgICAgICAgICAgICBhbGxvd091dHNpZGVDbGljazogZmFsc2UsCiAgICAgICAgICAgICAgYWxsb3dFc2NhcGVLZXk6IGZhbHNlCiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgICAgICAgIF90aGlzNS5sb2FkX2ludGVudHMoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhID09ICJUcmFpbmVkIGludGVudCBkZWxldGlvbiBpcyBjdXJyZW50bHkgZGlzYWJsZWQhIikgewogICAgICAgICAgICB0b2FzdHIuZXJyb3IoIkRlbGV0aW9uIG9mIHRyYWluZWQvY29uZmlndXJlZCBpbnRlbnQgaXMgZGlzYWJsZWQuIEEgQ29kZWFycmF5IEFkbWluIHdpbGwgZ2V0IGluIGNvbnRhY3Qgd2l0aCB5b3UiKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNS4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSwKICBwYWdlX3JlcXVpcmU6IGZ1bmN0aW9uIHBhZ2VfcmVxdWlyZShwYWdlKSB7CiAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICBpZiAocGFnZSA9PSAwIHx8IHBhZ2UgPT0gdGhpcy50b3RhbF9wYWdlcyArIDEpIHt9IGVsc2UgewogICAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSA9PSAiIikgewogICAgICAgIGlmIChwYWdlID09ICIuLi5zIikgewogICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCgxICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgIH0gZWxzZSBpZiAocGFnZSA9PSAiLi4ubCIpIHsKICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgodGhpcy50b3RhbF9wYWdlcyArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5wYWdlX25vID0gcGFnZTsKICAgICAgICB9CgogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuYWRkX2ludGVudF91cmwoKSwgewogICAgICAgICAgaW50ZW50OiB0aGlzLm5ld19pbnRlbnRzLAogICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uLAogICAgICAgICAgc2hvd2ludGVudDogIlRydWUiLAogICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzNi5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgIF90aGlzNi5pbnRlbnRsaXN0ID0gW107CgogICAgICAgICAgZm9yICh2YXIgaSBpbiByZXNwb25zZS5kYXRhWzBdKSB7CiAgICAgICAgICAgIF90aGlzNi5pbnRlbnRsaXN0LnB1c2goewogICAgICAgICAgICAgIGludGVudDogcmVzcG9uc2UuZGF0YVswXVtpXS5yZXBsYWNlKF90aGlzNi5jb21wYW55aWQgKyAiXyIsICIiKSwKICAgICAgICAgICAgICBlbWFpbDogcmVzcG9uc2UuZGF0YVsxXVtpXSwKICAgICAgICAgICAgICBjcmVhdGVkOiByZXNwb25zZS5kYXRhWzJdW2ldCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzNi5zZXRwYWdpbmF0aW9uKF90aGlzNi5wYWdlX25vKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBpZih0aGlzLnNlYXJjaF9ieT09J0VtYWlsIEFkZHJlc3MnKXsKICAgICAgICAvLyAgIHRoaXMuc2VhcmNoYnk9J0NyZWF0ZWRCeSc7CiAgICAgICAgLy8gfQogICAgICAgIC8vIGVsc2V7CiAgICAgICAgLy8gICB0aGlzLnNlYXJjaGJ5PXRoaXMuc2VhcmNoX2J5OwogICAgICAgIC8vIH0KICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CgogICAgICAgIGlmIChwYWdlbm8gPT0gIi4uLnMiKSB7CiAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKDEgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgfSBlbHNlIGlmIChwYWdlbm8gPT0gIi4uLmwiKSB7CiAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKHRoaXMudG90YWxfcGFnZXMgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMucGFnZV9ubyA9IHBhZ2VubzsKICAgICAgICB9CgogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5hZGRfaW50ZW50X3VybCgpLCB7CiAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBpc3NlYXJjaDogdHJ1ZSwKICAgICAgICAgIC8vIHNlYXJjaGJ5OiB0aGlzLnNlYXJjaGJ5LAogICAgICAgICAga2V5OiB0aGlzLnNlYXJjaF9uYW1lLAogICAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgICBwYWdlX25vOiB0aGlzLnBhZ2Vfbm8KICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzNi5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgIF90aGlzNi5pbnRlbnRsaXN0ID0gW107CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuaW50ZW50bGlzdC5sZW5ndGgpIHsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT0gInRva2VuIGludmFsaWQiKSB7CiAgICAgICAgICAgICAgX3RoaXM2Lm51bWJlcl9vZl9yb3dzID0gcmVzcG9uc2UuZGF0YS5pbnRlbnRsaXN0Lmxlbmd0aDsKICAgICAgICAgICAgICBfdGhpczYudG90YWxfcGFnZXMgPSByZXNwb25zZS5kYXRhLnBhZ2Vjb3VudDsKCiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNwb25zZS5kYXRhLmludGVudGxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIF90aGlzNi5pbnRlbnRsaXN0LnB1c2goewogICAgICAgICAgICAgICAgICBpbnRlbnQ6IHJlc3BvbnNlLmRhdGEuaW50ZW50bGlzdFtpXS5JbnRlbnQucmVwbGFjZShfdGhpczYuY29tcGFueWlkICsgIl8iLCAiIiksCiAgICAgICAgICAgICAgICAgIGVtYWlsOiByZXNwb25zZS5kYXRhLmludGVudGxpc3RbaV0uQ3JlYXRlZEJ5LAogICAgICAgICAgICAgICAgICBjcmVhdGVkOiByZXNwb25zZS5kYXRhLmludGVudGxpc3RbaV0uQ3JlYXRlZERhdGUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX3RoaXM2LnNldHBhZ2luYXRpb24oX3RoaXM2LnBhZ2Vfbm8pOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJObyBJbnRlbnRzIEZvdW5kIikgewogICAgICAgICAgICB0b2FzdHIuZXJyb3IoIk5vIGludGVudCBmb3VuZCIpOwogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiSW50cm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50ZXJuYWwgU2VydmVyIEVycm9yIik7IC8vIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAvLyAgIHRoaXMuJHJvdXRlci5nbygpOwogICAgICAgICAgICAvLyB9LCAyNTAwKTsKCiAgICAgICAgICAgIF90aGlzNi5sb2FkX2ludGVudHMoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRvYXN0ci5lcnJvcigiSW50ZXJuYWwgU2VydmVyIEVycm9yIik7IC8vIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAvLyAgIHRoaXMuJHJvdXRlci5nbygpOwogICAgICAgICAgICAvLyB9LCAyNTAwKTsKCiAgICAgICAgICAgIF90aGlzNi5sb2FkX2ludGVudHMoKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7CiAgICAgICAgICAgIF90aGlzNi4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sCiAgYWRkX2ludGVudHM6IGZ1bmN0aW9uIGFkZF9pbnRlbnRzKCkgewogICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgaWYgKHRoaXMuaXNHbG9iYWxFZGl0KSB7CiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgdmFyIHJlc3VsdDEgPSBbXTsKICAgICAgdmFyIHJlc3VsdDIgPSBbXTsKICAgICAgdmFyIGludGVudHNfbWFwID0gdGhpcy5pbnRlbnRsaXN0Lm1hcChmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgICB2YXIgaW50ZW50ID0gX3JlZjIuaW50ZW50OwogICAgICAgIHJldHVybiBpbnRlbnQ7CiAgICAgIH0pOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnRlbnRzX21hcC5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0aGlzLmdsb2JhbF9pbnRlbnRzX2VkaXRfbGlzdC5pbmRleE9mKGludGVudHNfbWFwW2ldKSA9PT0gLTEpIHsKICAgICAgICAgIHJlc3VsdDEucHVzaChpbnRlbnRzX21hcFtpXSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5nbG9iYWxfaW50ZW50c19lZGl0X2xpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoaW50ZW50c19tYXAuaW5kZXhPZih0aGlzLmdsb2JhbF9pbnRlbnRzX2VkaXRfbGlzdFtpXSkgPT09IC0xKSB7CiAgICAgICAgICByZXN1bHQyLnB1c2godGhpcy5nbG9iYWxfaW50ZW50c19lZGl0X2xpc3RbaV0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHJlc3VsdDIuc29tZShmdW5jdGlvbiAodmFsLCBpKSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdDIuaW5kZXhPZih2YWwpICE9PSBpOwogICAgICB9KSkgewogICAgICAgIHRvYXN0ci5lcnJvcigiWW91IGhhdmUgZW50ZXJlZCBzb21lIGludGVudHMgbW9yZSB0aGFuIG9uY2UsIGVuc3VyZSB1bmlxdWUgdmFsdWVzIik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIG9sZF9pbnRlbnRfZGF0YSA9IHJlc3VsdDEubWFwKGZ1bmN0aW9uIChpbnRlbnQpIHsKICAgICAgICAgIHJldHVybiAiIi5jb25jYXQoX3RoaXM3LmNvbXBhbnlpZCwgIl8iKS5jb25jYXQoaW50ZW50KTsKICAgICAgICB9KTsKICAgICAgICB2YXIgbmV3X2ludGVudF9kYXRhID0gcmVzdWx0Mi5tYXAoZnVuY3Rpb24gKGludGVudCkgewogICAgICAgICAgcmV0dXJuICIiLmNvbmNhdChfdGhpczcuY29tcGFueWlkLCAiXyIpLmNvbmNhdChpbnRlbnQpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuZWRpdF9pbnRlbnRfYXBpKG9sZF9pbnRlbnRfZGF0YSwgbmV3X2ludGVudF9kYXRhKTsKICAgICAgfQogICAgfSBlbHNlIGlmICh0aGlzLmVkaXQgPT0gIkZhbHNlIikgewogICAgICBpZiAodGhpcy5hZGRfaW50ZW50c19saXN0LmluY2x1ZGVzKCIiKSkgewogICAgICAgIHRvYXN0ci5lcnJvcigiUGxlYXNlIEVudGVyIHRoZSBJbnRlbnQiKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgdGhpcy5uZXdfaW50ZW50X2xpc3QgPSB0aGlzLmFkZF9pbnRlbnRzX2xpc3QubWFwKGZ1bmN0aW9uIChpbnRlbnQpIHsKICAgICAgICAgIHJldHVybiAiIi5jb25jYXQoX3RoaXM3LmNvbXBhbnlpZCwgIl8iKS5jb25jYXQoaW50ZW50KTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuYWRkX2ludGVudF91cmwoKSwgewogICAgICAgICAgaW50ZW50OiB0aGlzLm5ld19pbnRlbnRfbGlzdCwKICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIHN1YnNjcmlwdGlvbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgICAgIHNob3dpbnRlbnQ6ICJGYWxzZSIKICAgICAgICB9LCB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodGhpcy4kc2Vzc2lvbi5nZXQoImF0IikpCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIF90aGlzNy5uZXdfaW50ZW50X2xpc3QgPSBbXTsKICAgICAgICAgIF90aGlzNy5hZGRfaW50ZW50c19saXN0ID0gWyIiXTsKICAgICAgICAgIF90aGlzNy5zcGlubmVyT24gPSBmYWxzZTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSA9PSAiVXNlciBSb2xlIFNldCIpIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgIHRleHQ6ICJGZWVkYmFjayBhZGRlZCBzdWNjZXNzZnVsbHkiLAogICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICAgIGFsbG93T3V0c2lkZUNsaWNrOiBmYWxzZSwKICAgICAgICAgICAgICBhbGxvd0VzY2FwZUtleTogZmFsc2UKICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgICAgICAgX3RoaXM3LmxvYWRfaW50ZW50cygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09ICJGYWlsdXJlIikgewogICAgICAgICAgICB2YXIgbXlodG1sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICAgIHZhciBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgicCIpOwogICAgICAgICAgICBwLnN0eWxlLnRleHRBbGlnbiA9ICJjZW50ZXIiOyAvLyBwLnN0eWxlLm1hcmdpbkxlZnQgPSAnNSUnOwoKICAgICAgICAgICAgcC5pbm5lckhUTUwgPSAiVGhlIGZvbGxvd2luZyBpbnRlbnQocykgYWxyZWFkeSBleGlzdDoiOwogICAgICAgICAgICBteWh0bWwuYXBwZW5kQ2hpbGQocCk7CiAgICAgICAgICAgIHZhciB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInVsIik7CiAgICAgICAgICAgIHVsLnN0eWxlLm1hcmdpbkxlZnQgPSAiMTAlIjsKICAgICAgICAgICAgdWwuc2V0QXR0cmlidXRlKCJpZCIsICJwcm9MaXN0Iik7CiAgICAgICAgICAgIHZhciBwcm9kdWN0TGlzdCA9IHJlc3BvbnNlLmRhdGEuZmFpbGVkX2ludGVudHM7CiAgICAgICAgICAgIHByb2R1Y3RMaXN0ID0gcHJvZHVjdExpc3QubWFwKGZ1bmN0aW9uIChpbnRlbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gaW50ZW50LnNwbGl0KF90aGlzNy5jb21wYW55aWQgKyAiXyIpLnBvcCgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgbXlodG1sLmFwcGVuZENoaWxkKHVsKTsKICAgICAgICAgICAgcHJvZHVjdExpc3QuZm9yRWFjaChyZW5kZXJQcm9kdWN0TGlzdCk7CgogICAgICAgICAgICBmdW5jdGlvbiByZW5kZXJQcm9kdWN0TGlzdChlbGVtZW50LCBpbmRleCwgYXJyKSB7CiAgICAgICAgICAgICAgdmFyIGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGkiKTsKICAgICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoImNsYXNzIiwgIml0ZW0iKTsKICAgICAgICAgICAgICB1bC5hcHBlbmRDaGlsZChsaSk7CiAgICAgICAgICAgICAgbGkuaW5uZXJIVE1MID0gbGkuaW5uZXJIVE1MICsgZWxlbWVudDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdWwuc3R5bGUubGlzdFN0eWxlID0gImluaXRpYWwiOwogICAgICAgICAgICB1bC5zdHlsZS50ZXh0QWxpZ24gPSAibGVmdCI7CgogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5mYWlsZWRfaW50ZW50cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICBodG1sOiBteWh0bWwsCiAgICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIgLy8gdGl0bGU6ICJUaGUgZm9sbG93aW5nIGludGVudHMgYWxyZWFkeSBleGlzdDoiCgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgICAgdGl0bGU6ICJUaGUgZm9sbG93aW5nIGludGVudHMgYWxyZWFkeSBleGlzdDoiLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyA9PSAiRXJyb3IiKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YSA9PSAiUXVlc3Rpb24gTGltaXQgQWxyZWFkeSBFeGNlZWRlZCEiKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICB0ZXh0OiAiWW91ciBjYXBhY2l0eSB0byBhZGQgcXVlc3Rpb25zIGhhcyBleGNlZWRlZC4gUGxlYXNlIHVwZ3JhZGUgeW91ciBwbGFucy4iLAogICAgICAgICAgICAgIHRpbWVyOiAzMDAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBpZiAoZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fCBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHsKICAgICAgICAgICAgX3RoaXM3LiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOyAvLyB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwoKICAgICAgICAkKCIjaW50ZW50bW9kZWwiKS5tb2RhbCgiaGlkZSIpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHRoaXMuZWRpdCA9PSAiVHJ1ZSIpIHsKICAgICAgaWYgKHRoaXMubmV3X2ludGVudHMgPT0gIiIpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6ICJQbGVhc2UgZW50ZXIgdGhlIHJlcXVpcmVkIGZpZWxkcyIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMubmV3X2ludGVudF9kYXRhLnB1c2goIiIuY29uY2F0KHRoaXMuY29tcGFueWlkLCAiXyIpLmNvbmNhdCh0aGlzLm5ld19pbnRlbnRzKSk7CiAgICAgICAgdGhpcy5lZGl0X2ludGVudF9hcGkodGhpcy5vbGRfaW50ZW50X2RhdGEsIHRoaXMubmV3X2ludGVudF9kYXRhKTsKICAgICAgfQogICAgfQogIH0sCiAgZWRpdF9pbnRlbnRfYXBpOiBmdW5jdGlvbiBlZGl0X2ludGVudF9hcGkob2xkX2ludGVudF9kYXRhLCBuZXdfaW50ZW50X2RhdGEpIHsKICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICQoIiNpbnRlbnRtb2RlbCIpLm1vZGFsKCJoaWRlIik7CiAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5hZGRfaW50ZW50X3VybCgpLCB7CiAgICAgIG9sZF9pbnRlbnRfZGF0YTogb2xkX2ludGVudF9kYXRhLAogICAgICBuZXdfaW50ZW50X2RhdGE6IG5ld19pbnRlbnRfZGF0YSwKICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgIHN1YnNjcmlwdGlvbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgZWRpdGludGVudDogIlRydWUiCiAgICB9LCB7CiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHRoaXMuJHNlc3Npb24uZ2V0KCJhdCIpKQogICAgICB9CiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBfdGhpczguc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgIF90aGlzOC5lZGl0ID09ICJGYWxzZSI7CiAgICAgIF90aGlzOC5pc0dsb2JhbEVkaXQgPSBmYWxzZTsgLy8gJCgiI2ludGVudG1vZGVsIikubW9kYWwoImhpZGUiKTsKICAgICAgLy8gcmVzcG9uc2UuZGF0YS5tZXNzYWdlID09ICJGYWlsZWQgdG8gZWRpdCBpbnRlbnQocykiIHx8CgogICAgICBfdGhpczguY2xlYXJfZmllbGRzKCk7CgogICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhLmZhaWxlZF9pbnRlbnRzKTsKCiAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyA9PSAiRmFpbHVyZSIpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICB0ZXh0OiAiSW50ZW50KHMpIGFyZSBub3QgdXBkYXRlZCwgZHVlIHRvIHNvbWUgdGVjaG5pY2FsIGlzc3Vlcy4iLAogICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyA9PSAiU3VjY2VzcyIpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgIHRleHQ6ICJJbnRlbnQocykgVXBkYXRlZCBTdWNjZXNzZnVsbHkiLAogICAgICAgICAgYWxsb3dPdXRzaWRlQ2xpY2s6IGZhbHNlLAogICAgICAgICAgYWxsb3dFc2NhcGVLZXk6IGZhbHNlCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgIC8vIHRoaXMuJHJvdXRlci5nbygpOwogICAgICAgICAgICBfdGhpczgubG9hZF9pbnRlbnRzKCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgewogICAgICAgIF90aGlzOC4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBjbGVhcl9maWVsZHM6IGZ1bmN0aW9uIGNsZWFyX2ZpZWxkcygpIHsKICAgIHRoaXMubmV3X2ludGVudHMgPSBbXTsKICAgIHRoaXMubmV3X2ludGVudF9kYXRhID0gW107CiAgICB0aGlzLm9sZF9pbnRlbnRfZGF0YSA9IFtdOwogICAgdGhpcy5hZGRfaW50ZW50c19saXN0ID0gWyIiXTsKICAgIHRoaXMuZWRpdCA9ICJGYWxzZSI7CiAgfSwKICBzZXRwYWdpbmF0aW9uOiBmdW5jdGlvbiBzZXRwYWdpbmF0aW9uKHBhZ2Vfbm8pIHsKICAgIHRoaXMucGFnZV9hcnJheSA9IFtdOwoKICAgIGlmICh0aGlzLnRvdGFsX3BhZ2VzIDw9IDcpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvdGFsX3BhZ2VzOyBpKyspIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChpICsgMSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSAxKSB7CiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCA0OyBfaSsrKSB7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goX2kgKyAxKTsKICAgICAgfQoKICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPT0gdGhpcy50b3RhbF9wYWdlcykgewogICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLnMiKTsKCiAgICAgIGZvciAodmFyIF9pMiA9IHRoaXMudG90YWxfcGFnZXMgLSA0OyBfaTIgPCB0aGlzLnRvdGFsX3BhZ2VzOyBfaTIrKykgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKF9pMiArIDEpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPD0gNCkgewogICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBwYWdlX25vICsgMzsgX2kzKyspIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChfaTMgKyAxKTsKICAgICAgfQoKICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPj0gdGhpcy50b3RhbF9wYWdlcyAtIDQpIHsKICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICBmb3IgKHZhciBfaTQgPSBwYWdlX25vIC0gNDsgX2k0IDwgdGhpcy50b3RhbF9wYWdlczsgX2k0KyspIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChfaTQgKyAxKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CgogICAgICBmb3IgKHZhciBfaTUgPSBwYWdlX25vIC0gMzsgX2k1IDw9IHBhZ2Vfbm8gKyAzOyBfaTUrKykgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKF9pNSk7CiAgICAgIH0KCiAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgfQogIH0sCiAgLy8gcmVzZXRwYWdlbnVtYmVyKCl7CiAgLy8gICB0aGlzLnBhZ2Vfbm89MTsKICAvLyB9LAogIHBhZ2luYXRpb25fY2xhc3M6IGZ1bmN0aW9uIHBhZ2luYXRpb25fY2xhc3MoaW5kZXgpIHsKICAgIGlmIChpbmRleCA9PSB0aGlzLnBhZ2Vfbm8pIHsKICAgICAgcmV0dXJuICIgYWN0aXZlIjsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAiIjsKICAgIH0KICB9LAogIGFkZF90b19pbnRlbnRfbGlzdDogZnVuY3Rpb24gYWRkX3RvX2ludGVudF9saXN0KHR5cGUsIGluZGV4KSB7CiAgICBpZiAodHlwZSA9PSAiYWRkIikgewogICAgICB0aGlzLmFkZF9pbnRlbnRzX2xpc3QucHVzaCgiIik7CiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gInJlbW92ZSIpIHsKICAgICAgdGhpcy5hZGRfaW50ZW50c19saXN0LnNwbGljZShpbmRleCwgMSk7CiAgICB9CiAgfQp9KSwgX25hbWUkZGF0YSR3YXRjaCRjcmVhKTs="},null]}