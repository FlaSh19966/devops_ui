{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Pages/Register.vue?vue&type=template&id=0bbbac03&scoped=true&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Pages/Register.vue","mtime":1655807120961},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}