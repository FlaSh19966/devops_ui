{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Customer Support/LiveChat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Customer Support/LiveChat.vue","mtime":1660716745058},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBzd2FsIGZyb20gInN3ZWV0YWxlcnQyIjsKaW1wb3J0IHsgU29ja2V0IH0gZnJvbSAicGhvZW5peC1zb2NrZXQiOwppbXBvcnQgeyBzZXRJbnRlcnZhbCB9IGZyb20gInRpbWVycyI7CmltcG9ydCBkZWJvdW5jZSBmcm9tICJ2dWUtZGVib3VuY2UvZGlzdC9kZWJvdW5jZS5taW4uanMiOwppbXBvcnQgeyBnZW5lcmF0ZV90aW1lIH0gZnJvbSAiQC9wb3J0YWwvbWl4aW5zIjsKaW1wb3J0IHsgZnJlZXplX3BvcnRhbCxzaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWwgfSBmcm9tICJAL3BvcnRhbC9taXhpbnMiOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJMaXZlQ2hhdFBhZ2UiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB1c2VyX2xpc3Q6IFtdLAogICAgICBjdXJyZW50X3VzZXI6IHt9LAogICAgICBjdXJyZW50X2NoYW5uZWw6ICIiLAogICAgICBmaXJzdF9uYW1lOiB0aGlzLiRzZXNzaW9uLmhhcygiVXNlckZpcnN0TmFtZSIpCiAgICAgICAgPyB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckZpcnN0TmFtZSIpCiAgICAgICAgOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZmlyc3RfbmFtZSwKICAgICAgbGFzdF9uYW1lOiB0aGlzLiRzZXNzaW9uLmhhcygiVXNlckxhc3ROYW1lIikKICAgICAgICA/IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VyTGFzdE5hbWUiKQogICAgICAgIDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxhc3RfbmFtZSwKICAgICAgYWdlbnRfdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgY2hhdF9saXN0OiBbXSwKICAgICAgdG9fc2VuZDogIiIsCiAgICAgIGNoOiBudWxsLAogICAgICBtZXNzYWdlOiBudWxsLAogICAgICB1c2VyX2NoYW5uZWxzOiB7fSwKICAgICAgc29ja2V0OiBudWxsLAogICAgICBtc2dfc2VuZGVyOiAiIiwKICAgICAgZGVsYXk6IDEwMDAwLAogICAgICBpc190eXBpbmdfaW5kaWNhdG9yX29uOiBmYWxzZSwKICAgICAgZGlzYWJsZV9idG5fZXhwaXJlZCA6IGZhbHNlLAogICAgICAvLyB1c2VyX2xpc3Q6IFt7ImNoYW5uZWxfbmFtZSI6ImN1c3RvbWVyc19ncm91cHM6ZGhzNmJlbm5rbCIsInVzZXJuYW1lIjoiVmltbGVzaGgiLCJpc19jb25uZWN0ZWQiOmZhbHNlLCJhZ2VudF91c2VybmFtZSI6bnVsbCwiYWdlbnRfcm9sZSI6bnVsbCwic3RhdGUiOiJ3YWl0aW5nIn0seyJjaGFubmVsX25hbWUiOiJjdXN0b21lcnNfZ3JvdXBzOmhlbXphc3RuaGUiLCJ1c2VybmFtZSI6IkFrc2hheSIsImlzX2Nvbm5lY3RlZCI6ZmFsc2UsImFnZW50X3VzZXJuYW1lIjpudWxsLCJhZ2VudF9yb2xlIjpudWxsLCJzdGF0ZSI6IndhaXRpbmcifV0KICAgIH07CiAgfSwKICB3YXRjaDogewogICAgdG9fc2VuZChuZXdWYWwpIHsKICAgICAgdGhpcy5idXR0b25fZmlsbCgpOwogICAgfSwKICB9LAogIG1peGluczogW2dlbmVyYXRlX3RpbWUsZnJlZXplX3BvcnRhbF0sCiAgbW91bnRlZCgpIHsKICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICB0aGlzLmZyZWV6ZV9wb3J0YWwoKTsKICAgIH0sIDEwMDApOwogICAgdGhpcy4kcm9vdC4kb24oIkxpdmVDaGF0UGFnZURpc2FibGVkIiwgKGRhdGEpID0+IHsKICAgICAgaWYoZGF0YT09PXRydWUpewogICAgICAgIHRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCA9IHRydWU7CiAgICAgIH0KICAgIH0pOwogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIGlmICghdGhpcy5kaXNhYmxlX2J0bl9leHBpcmVkKSB7CiAgICAgIC8vIHRoaXMuc29ja2V0ID0gbmV3IFNvY2tldChwcm9jZXNzLmVudi5WVUVfQVBQX0xJVkVfQ0hBVF9XRUJTT0NLRVRfRU5EUE9JTlQsIHsKICAgICAgLy8gcGFyYW1zOiB7CiAgICAgIC8vICAgdXNlcm5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgLy8gICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgLy8gICByb2xlOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSwKICAgICAgLy8gfSwKICAgICAgLy8gfSk7CiAgICAgIHRoaXMuc29ja2V0ID0gbmV3IFNvY2tldChwcm9jZXNzLmVudi5WVUVfQVBQX0xJVkVfQ0hBVF9XRUJTT0NLRVRfRU5EUE9JTlQsIHsKICAgICAgcGFyYW1zOiB7CiAgICAgICAgand0OiB0aGlzLiRzZXNzaW9uLmdldCgiYXQiKSwKICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBmaXJzdF9uYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZmlyc3RfbmFtZSwKICAgICAgICBsYXN0X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5sYXN0X25hbWUsCiAgICAgIH0sCiAgICAgIH0pOwogICAgICB0aGlzLnNvY2tldC5jb25uZWN0KCk7CiAgICAgIHRoaXMuY2ggPSB0aGlzLnNvY2tldC5jaGFubmVsKAogICAgICAgICJjb21wYW5pZXM6IiArIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkCiAgICAgICk7CiAgICAgIHRoaXMuY2guam9pbigpOwoKICAgICAgdGhpcy5jaC5vbignbmV3X25hbWUnLCAocmVzKSA9PiB7CiAgICAgICAgdmFyIGNoZWNrID0gdGhpcy51c2VyX2xpc3Quc29tZShvYmogPT4gb2JqLmNoYW5uZWxfbmFtZSA9PT0gcmVzLnRvcGljKQogICAgICAgIHZhciBpbmRleCA9IHRoaXMudXNlcl9saXN0LmZpbmRJbmRleChvYmogPT4gb2JqLmNoYW5uZWxfbmFtZSA9PT0gcmVzLnRvcGljKTsKICAgICAgICBpZihjaGVjaykgdGhpcy51c2VyX2xpc3RbaW5kZXhdLnVzZXJuYW1lID0gcmVzLm5hbWU7CiAgICAgIH0pCiAgICAgIHRoaXMuY2gub24oImN1c3RvbWVyX25lZWRzX3N1cHBvcnRfYWdlbnQiLCAocmVzKSA9PiB7IAogICAgICAgIHZhciB0ZW1wID0gcmVzOwogICAgICAgIGZvciAodmFyIGkgaW4gdGVtcC5tZXRhcykgewogICAgICAgICAgdmFyIGNoYW5uZWxfZ3JvdXAgPSB0ZW1wLmN1c3RvbWVyX2NoYXRfZ3JvdXA7CiAgICAgICAgICB2YXIgY2hlY2sgPSB0aGlzLnVzZXJfbGlzdC5zb21lKG9iaiA9PiBvYmouY2hhbm5lbF9uYW1lID09PSBjaGFubmVsX2dyb3VwKQogICAgICAgICAgLy8gdGhpcy51c2VyX2NoYW5uZWxzW2NoYW5uZWxfZ3JvdXBdID0gdGhpcy5zb2NrZXQuY2hhbm5lbChyZXMuY3VzdG9tZXJfY2hhdF9ncm91cCk7CiAgICAgICAgICBpZiAoY2hlY2spIHsKICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy51c2VyX2xpc3QuZmluZEluZGV4KG9iaiA9PiBvYmouY2hhbm5lbF9uYW1lID09PSBjaGFubmVsX2dyb3VwKTsKICAgICAgICAgICAgaWYgKEJvb2xlYW4odGVtcC5tZXRhc1tpXS51c2VyX2luZm8uaXNfY3VzdG9tZXIpICYmIHRlbXAubWV0YXMubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uaXNfY29ubmVjdGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgdGhpcy51c2VyX2xpc3RbaW5kZXhdLmFnZW50X3JvbGUgPSBudWxsOwogICAgICAgICAgICAgIHRoaXMudXNlcl9saXN0W2luZGV4XS5hZ2VudF91c2VybmFtZSA9IG51bGw7CiAgICAgICAgICAgICAgdGhpcy51c2VyX2xpc3RbaW5kZXhdLnN0YXRlID09ICJlbmRlZCIgPyAiZW5kZWQiIDogIndhaXRpbmciOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMudXNlcl9saXN0W2luZGV4XS5pc19jb25uZWN0ZWQgPSB0cnVlOwogICAgICAgICAgICAgIHRoaXMudXNlcl9saXN0W2luZGV4XS5hZ2VudF9yb2xlID0gdGVtcC5tZXRhc1tpXS51c2VyX2luZm8ucm9sZTsKICAgICAgICAgICAgICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uYWdlbnRfdXNlcm5hbWUgPSB0ZW1wLm1ldGFzW2ldLnVzZXJfaW5mby51c2VybmFtZTsKICAgICAgICAgICAgICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uc3RhdGUgPT0gImVuZGVkIiA/ICJlbmRlZCIgOiAiam9pbmVkIjsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy51c2VyX2xpc3QucHVzaCh7CiAgICAgICAgICAgICAgImNoYW5uZWxfbmFtZSI6IGNoYW5uZWxfZ3JvdXAsCiAgICAgICAgICAgICAgInVzZXJuYW1lIjogIiIsCiAgICAgICAgICAgICAgImlzX2Nvbm5lY3RlZCI6IGZhbHNlLAogICAgICAgICAgICAgICJhZ2VudF91c2VybmFtZSI6IG51bGwsCiAgICAgICAgICAgICAgImFnZW50X3JvbGUiOiBudWxsLAogICAgICAgICAgICAgICJzdGF0ZSI6ICJ3YWl0aW5nIgogICAgICAgICAgICB9KQogICAgICAgICAgICB0aGlzLnVzZXJfY2hhbm5lbHNbY2hhbm5lbF9ncm91cF0gPSB0aGlzLnNvY2tldC5jaGFubmVsKAogICAgICAgICAgICAgIGNoYW5uZWxfZ3JvdXAKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pCgogICAgICAvLyB0aGlzLmNoLm9uKCJjdXN0b21lcl9uZWVkc19zdXBwb3J0X2FnZW50IiwgKHJlcykgPT4gewogICAgICAvLyBjb25zb2xlLmxvZygiY3VzdG9tZXJfbmVlZHNfc3VwcG9ydF9hZ2VudCIsIHJlcyk7CiAgICAgIC8vIHRoaXMudXNlcl9saXN0LnB1c2goewogICAgICAvLyAgIGNoYW5uZWxfbmFtZTogcmVzLmN1c3RvbWVyX2NoYXRfZ3JvdXAsCiAgICAgIC8vICAgdXNlcm5hbWU6ICIiLAogICAgICAvLyAgIGlzX2Nvbm5lY3RlZDogZmFsc2UKICAgICAgLy8gfSk7CiAgICAgIC8vIHRoaXMuY3VycmVudF91c2VyID0gcmVzLmN1c3RvbWVyX2NoYXRfZ3JvdXA7CiAgICAgIC8vIHRoaXMuY3VycmVudF91c2VyID0gIkN1c3RvbWVyIjsKICAgICAgLy8gdGhpcy5jdXJyZW50X2NoYW5uZWwgPSByZXMuY3VzdG9tZXJfY2hhdF9ncm91cDsKICAgICAgLy8gdGhpcy51c2VyX2NoYW5uZWxzW3Jlcy5jdXN0b21lcl9jaGF0X2dyb3VwXSA9IHRoaXMuc29ja2V0LmNoYW5uZWwoCiAgICAgIC8vICAgcmVzLmN1c3RvbWVyX2NoYXRfZ3JvdXAKICAgICAgLy8gKTsKICAgICAgLy8gdGhpcy5tZXNzYWdlID0gdGhpcy5zb2NrZXQuY2hhbm5lbChyZXMuY3VzdG9tZXJfY2hhdF9ncm91cCk7CgogICAgICAvLyB0aGlzLnVzZXJfY2hhbm5lbHNbcmVzLmN1c3RvbWVyX2NoYXRfZ3JvdXBdLm9uKCJzdGFydGVkX3R5cGluZyIsCiAgICAgIC8vICAgKHR5cGluZ19yZXNwb25zZSkgPT4gewogICAgICAvLyAgICAgaWYgKHJlcy5jdXN0b21lcl9jaGF0X2dyb3VwID09IHRoaXMuY3VycmVudF91c2VyLmNoYW5uZWxfbmFtZSkgewogICAgICAvLyAgICAgICBpZiAodHlwaW5nX3Jlc3BvbnNlLnNlbmRlciAhPSAic3VwcG9ydF9hZ2VudCIpIHsKICAgICAgLy8gICAgICAgICB2YXIgbmFtZSA9IHRoaXMudXNlcl9saXN0LmZpbHRlcigodXNlcikgPT4gewogICAgICAvLyAgICAgICAgICAgcmV0dXJuIHVzZXIuY2hhbm5lbF9uYW1lID09IHJlcy5jdXN0b21lcl9jaGF0X2dyb3VwOwogICAgICAvLyAgICAgICAgIH0pOwogICAgICAvLyAgICAgICAgIGlmIChuYW1lWzBdLnVzZXJuYW1lID09ICIiKSB7CiAgICAgIC8vICAgICAgICAgICB0aGlzLm1zZ19zZW5kZXIgPSB0eXBpbmdfcmVzcG9uc2Uuc2VuZGVyOwogICAgICAvLyAgICAgICAgIH0gZWxzZSB7CiAgICAgIC8vICAgICAgICAgICB0aGlzLm1zZ19zZW5kZXIgPSBuYW1lWzBdLnVzZXJuYW1lOwogICAgICAvLyAgICAgICAgIH0KICAgICAgLy8gICAgICAgfQogICAgICAvLyAgICAgICB0aGlzLmlzX3R5cGluZ19pbmRpY2F0b3Jfb24gPSB0cnVlOwogICAgICAvLyAgICAgfQogICAgICAvLyAgIH0KICAgICAgLy8gKTsKICAgICAgLy8gdGhpcy51c2VyX2NoYW5uZWxzW3Jlcy5jdXN0b21lcl9jaGF0X2dyb3VwXS5vbigic3RvcHBlZF90eXBpbmciLCAoKSA9PiB7CiAgICAgIC8vICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CiAgICAgIC8vIH0pOwogICAgICAvLyB0aGlzLnVzZXJfY2hhbm5lbHNbcmVzLmN1c3RvbWVyX2NoYXRfZ3JvdXBdLm9uKCJuZXdfY2hhdF9tZXNzYWdlIiwKICAgICAgLy8gICAocmVzcG9uc2UpID0+IHsKICAgICAgLy8gICAgIGlmIChyZXNwb25zZS5zZW5kZXIgPT0gImN1c3RvbWVyIikgewogICAgICAvLyAgICAgICB0aGlzLmNoYXRfbGlzdC5wdXNoKHsKICAgICAgLy8gICAgICAgICByZWNlaXZlZDogdHJ1ZSwKICAgICAgLy8gICAgICAgICB0ZXh0OiByZXNwb25zZS5tZXNzYWdlLAogICAgICAvLyAgICAgICAgIGN1cnJlbnRfY2hhbm5lbDogcmVzLmN1c3RvbWVyX2NoYXRfZ3JvdXAsCiAgICAgIC8vICAgICAgICAgdGltZTogdGhpcy5nZW5lcmF0ZV90aW1lKCksCiAgICAgIC8vICAgICAgIH0pOwogICAgICAvLyAgICAgICB0aGlzLnVwZGF0ZV9zY3JvbGxiYXIoKTsKICAgICAgLy8gICAgICAgdGhpcy5ub19yZXNwb25zZSh0aGlzKTsKICAgICAgLy8gICAgIH0KICAgICAgLy8gICB9CiAgICAgIC8vICk7CiAgICAgIC8vIC8vIHRoaXMudXNlcl9jaGFubmVsc1tyZXMuY3VzdG9tZXJfY2hhdF9ncm91cF0ub24oIm5ld19uYW1lIiwgKHJlc3ApID0+IHsKICAgICAgLy8gLy8gICBmb3IgKGxldCBpID0gMCwgbiA9IHRoaXMudXNlcl9saXN0Lmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAvLyAvLyAgICAgaWYgKHRoaXMudXNlcl9saXN0W2ldLmNoYW5uZWxfbmFtZSA9PSByZXMuY3VzdG9tZXJfY2hhdF9ncm91cCkgewogICAgICAvLyAvLyAgICAgICB0aGlzLnVzZXJfbGlzdFtpXS51c2VybmFtZSA9IHJlc3AubmFtZTsKICAgICAgLy8gLy8gICAgIH0KICAgICAgLy8gLy8gICB9CiAgICAgIC8vIC8vICAgdGhpcy5jdXJyZW50X3VzZXIgPSByZXNwLm5hbWU7CiAgICAgIC8vIC8vICAgdGhpcy5ub19yZXNwb25zZSh0aGlzKTsKICAgICAgLy8gLy8gfSk7CiAgICAgIC8vIHRoaXMudXNlcl9jaGFubmVsc1tyZXMuY3VzdG9tZXJfY2hhdF9ncm91cF0ub24oInN0b3BwZWRfY2hhdCIsIChyZXNwKSA9PiB7CiAgICAgIC8vICAgdGhpcy5jaGF0X2xpc3QucHVzaCh7CiAgICAgIC8vICAgICByZWNlaXZlZDogdHJ1ZSwKICAgICAgLy8gICAgIHRleHQ6IHJlc3AubmFtZSArIHJlc3AubWVzc2FnZSwKICAgICAgLy8gICAgIGN1cnJlbnRfY2hhbm5lbDogcmVzcC50b3BpYywKICAgICAgLy8gICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpLAogICAgICAvLyAgIH0pOwogICAgICAvLyAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigpOwogICAgICAvLyAgIHN3YWwoewogICAgICAvLyAgICAgdGV4dDogcmVzcC5uYW1lICsgcmVzcC5tZXNzYWdlLAogICAgICAvLyAgICAgdG9hc3Q6IHRydWUsCiAgICAgIC8vICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgIC8vICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAvLyAgICAgdHlwZTogImluZm8iLAogICAgICAvLyAgICAgdGltZXI6IDUwMDAsCiAgICAgIC8vICAgfSk7CiAgICAgIC8vICAgdmFyIGluZGV4ID0gdGhpcy51c2VyX2xpc3QuZmluZEluZGV4KG9iaiA9PiBvYmouY2hhbm5lbF9uYW1lID09PSByZXNwLnRvcGljKTsKICAgICAgLy8gICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uYWdlbnRfdXNlcm5hbWUgPSB0aGlzLmFnZW50X3VzZXJuYW1lOwogICAgICAvLyAgIHRoaXMudXNlcl9saXN0W2luZGV4XS5pc19jb25uZWN0ZWQgPSB0cnVlOwogICAgICAvLyAgIHRoaXMudXNlcl9saXN0W2luZGV4XS5zdGF0ZSA9ICJlbmRlZCI7CiAgICAgIC8vICAgLy8gdG9hc3RyLmluZm8ocmVzcC5uYW1lICsgIiAiICsgcmVzcC5tZXNzYWdlKTsKICAgICAgLy8gICAvLyB0aGlzLnVzZXJfbGlzdCA9IHRoaXMudXNlcl9saXN0LmZpbHRlcigodXNlcikgPT4gewogICAgICAvLyAgIC8vICAgcmV0dXJuIHVzZXIudXNlcm5hbWUgIT0gcmVzcC5uYW1lOwogICAgICAvLyAgIC8vIH0pOwogICAgICAvLyAgIC8vIHRoaXMuY2hhdF9saXN0ID0gdGhpcy5jaGF0X2xpc3QuZmlsdGVyKChjaGF0KSA9PiB7CiAgICAgIC8vICAgLy8gICByZXR1cm4gY2hhdC5jdXJyZW50X2NoYW5uZWwgIT0gdGhpcy5jdXJyZW50X2NoYW5uZWw7CiAgICAgIC8vICAgLy8gfSk7CiAgICAgIC8vICAgLy8gdGhpcy5jdXJyZW50X3VzZXIgPSB0aGlzLmZpcnN0X25hbWU7CiAgICAgIC8vIH0pOwoKICAgICAgLy8gdGhpcy51c2VyX2NoYW5uZWxzW3Jlcy5jdXN0b21lcl9jaGF0X2dyb3VwXS5qb2luKCk7CiAgICAvLyB9KTsKCiAgICAvLyB0aGlzLmNoLm9uKCJjdXN0b21lcl9uZWVkc19zdXBwb3J0X2FnZW50IiwgKHJlcykgPT4gewogICAgLy8gICBjb25zb2xlLmxvZygiY3VzdG9tZXJfbmVlZHNfc3VwcG9ydF9hZ2VudCIsIHJlcyk7CiAgICAvLyB9KTsKICAgIH1lbHNlIHsKICAgICAgc3dhbCh7CiAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgIHRleHQ6IGBZb3UgYXJlIG9uIGZyZWUgdHJpYWwgcGxlYXNlLCBraW5kbHkgdXBncmFkZSB5b3VyIHBsYW4gdG8gdXNlIHRoaXMgZmVhdHVyZWAsCiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6JyMzMDg1ZDYnLAogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnU3Vic2NyaWJlIE5vdycsCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ0xhdGVyJywKICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogJyNkMzMnLAogICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgaWYgKHJlc3VsdC52YWx1ZSA9PSB0cnVlKQogICAgICB7CiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe25hbWU6ICdTZXR0aW5ncycscGFyYW1zOntTdWJzY3JpcHRpb246dHJ1ZX19KTsKICAgICAgfWVsc2V7CiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goIi9ib3QvZGFzaGJvYXJkIik7CiAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiY2hhbmdlX3NpZGViYXJfbWFpbl9tZW51IiwgIkRhc2hib2FyZCIpOwogICAgICAgIH0KICAgICAgfSkKICAgIH0KICAgIH0sMTAwMCk7CiAgfSwKICBiZWZvcmVEZXN0cm95KCl7CiAgICBpZiAoIXRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCkgewogICAgdGhpcy5jaC5sZWF2ZSgpOwogICAgLy9kaXNjb25uZWN0IGFsbCBjdXN0b21lciB3aGVuIFNBIG5hdmlnYXRlcyB0byBvdGhlciBwYWdlCiAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gdGhpcy51c2VyX2NoYW5uZWxzKSB7CiAgICAgIHRoaXMudXNlcl9jaGFubmVsc1twcm9wZXJ0eV0ucHVzaCgic3RvcHBlZF9jaGF0IiwgewogICAgICAgICAgbmFtZTogIlN1cHBvcnQgQWdlbnQiLAogICAgICAgICAgbWVzc2FnZTogIiBoYXMgZW5kZWQgdGhpcyBjb252ZXJzYXRpb24uIiwKICAgICAgICAgIH0pOwogICAgICAgICAgICB0aGlzLnVzZXJfY2hhbm5lbHNbcHJvcGVydHldLmxlYXZlKCk7CiAgICAgIH0KICAgIHRoaXMuc29ja2V0LmRpc2Nvbm5lY3QoKTsgCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBqb2luX2N1c3RvbWVyKHJlcykgewogICAgICB0aGlzLnVzZXJfY2hhbm5lbHNbcmVzLmNoYW5uZWxfbmFtZV0uam9pbigpOwogICAgICB2YXIgaW5kZXggPSB0aGlzLnVzZXJfbGlzdC5maW5kSW5kZXgob2JqID0+IG9iai5jaGFubmVsX25hbWUgPT09IHJlcy5jaGFubmVsX25hbWUpOwogICAgICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uYWdlbnRfdXNlcm5hbWUgPSB0aGlzLmFnZW50X3VzZXJuYW1lOwogICAgICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uaXNfY29ubmVjdGVkID0gdHJ1ZTsKICAgICAgdGhpcy51c2VyX2xpc3RbaW5kZXhdLnN0YXRlID0gImpvaW5lZCI7CiAgICAgIC8vIHRoaXMudXNlcl9jaGFubmVsc1tyZXMuY2hhbm5lbF9uYW1lXSA9IHRoaXMuc29ja2V0LmNoYW5uZWwoCiAgICAgIC8vICAgcmVzLmNoYW5uZWxfbmFtZQogICAgICAvLyApOwogICAgICAKICAgICAgdGhpcy51c2VyX2NoYW5uZWxzW3Jlcy5jaGFubmVsX25hbWVdLm9uKCJzdGFydGVkX3R5cGluZyIsCiAgICAgICAgKHR5cGluZ19yZXNwb25zZSkgPT4gewogICAgICAgICAgaWYgKHJlcy5jaGFubmVsX25hbWUgPT0gdGhpcy5jdXJyZW50X3VzZXIuY2hhbm5lbF9uYW1lKSB7CiAgICAgICAgICAgIGlmICh0eXBpbmdfcmVzcG9uc2Uuc2VuZGVyICE9ICJzdXBwb3J0X2FnZW50IikgewogICAgICAgICAgICAgIHZhciBuYW1lID0gdGhpcy51c2VyX2xpc3QuZmlsdGVyKCh1c2VyKSA9PiB7CiAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5jaGFubmVsX25hbWUgPT0gcmVzLmNoYW5uZWxfbmFtZTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBpZiAobmFtZVswXS51c2VybmFtZSA9PSAiIikgewogICAgICAgICAgICAgICAgdGhpcy5tc2dfc2VuZGVyID0gdHlwaW5nX3Jlc3BvbnNlLnNlbmRlcjsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5tc2dfc2VuZGVyID0gbmFtZVswXS51c2VybmFtZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICk7CiAgICAgIHRoaXMudXNlcl9jaGFubmVsc1tyZXMuY2hhbm5lbF9uYW1lXS5vbigic3RvcHBlZF90eXBpbmciLCAoKSA9PiB7CiAgICAgICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CiAgICAgIH0pOwogICAgICB0aGlzLnVzZXJfY2hhbm5lbHNbcmVzLmNoYW5uZWxfbmFtZV0ub24oIm5ld19jaGF0X21lc3NhZ2UiLAogICAgICAgIChyZXNwb25zZSkgPT4gewogICAgICAgICAgaWYgKHJlc3BvbnNlLnNlbmRlciA9PSAiY3VzdG9tZXIiKSB7CiAgICAgICAgICAgIHRoaXMuY2hhdF9saXN0LnB1c2goewogICAgICAgICAgICAgIHJlY2VpdmVkOiB0cnVlLAogICAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLm1lc3NhZ2UsCiAgICAgICAgICAgICAgY3VycmVudF9jaGFubmVsOiByZXMuY2hhbm5lbF9uYW1lLAogICAgICAgICAgICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy51cGRhdGVfc2Nyb2xsYmFyKCk7CiAgICAgICAgICAgIHRoaXMubm9fcmVzcG9uc2UodGhpcyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICApOwogICAgICB0aGlzLnVzZXJfY2hhbm5lbHNbcmVzLmNoYW5uZWxfbmFtZV0ub24oInN0b3BwZWRfY2hhdCIsIChyZXNwKSA9PiB7CiAgICAgICAgdGhpcy5jaGF0X2xpc3QucHVzaCh7CiAgICAgICAgICByZWNlaXZlZDogdHJ1ZSwKICAgICAgICAgIHRleHQ6IHJlc3AubmFtZSArIHJlc3AubWVzc2FnZSwKICAgICAgICAgIGN1cnJlbnRfY2hhbm5lbDogcmVzcC50b3BpYywKICAgICAgICAgIHRpbWU6IHRoaXMuZ2VuZXJhdGVfdGltZSgpLAogICAgICAgIH0pOwogICAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigpOwogICAgICAgIHN3YWwoewogICAgICAgICAgdGV4dDogcmVzcC5uYW1lICsgcmVzcC5tZXNzYWdlLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogImluZm8iLAogICAgICAgICAgdGltZXI6IDUwMDAsCiAgICAgICAgfSk7CiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy51c2VyX2xpc3QuZmluZEluZGV4KG9iaiA9PiBvYmouY2hhbm5lbF9uYW1lID09PSByZXNwLnRvcGljKTsKICAgICAgICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uYWdlbnRfdXNlcm5hbWUgPSB0aGlzLmFnZW50X3VzZXJuYW1lOwogICAgICAgIHRoaXMudXNlcl9saXN0W2luZGV4XS5pc19jb25uZWN0ZWQgPSB0cnVlOwogICAgICAgIHRoaXMudXNlcl9saXN0W2luZGV4XS5zdGF0ZSA9ICJlbmRlZCI7CiAgICAgIH0pOwogICAgfSwKICAgIGJ1dHRvbl9maWxsKCkgewogICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJzdmciKS5zdHlsZS5maWxsID0gIiMyNzM2NzkiOwogICAgICBpZiAodGhpcy50b19zZW5kID09ICIiKSB7CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcigic3ZnIikuc3R5bGUuZmlsbCA9ICIjOGE4YThhNjMiOwogICAgICB9IGVsc2UgaWYgKHRoaXMudG9fc2VuZCAhPSAiIikgewogICAgICAgIHRoaXMudXNlcl9jaGFubmVsc1t0aGlzLmN1cnJlbnRfdXNlci5jaGFubmVsX25hbWVdLnB1c2goInN0YXJ0ZWRfdHlwaW5nIik7CiAgICAgIH0KICAgICAgdGhpcy5zdG9wX3R5cGluZyh0aGlzKTsKICAgIH0sCiAgICBzdG9wX3R5cGluZzogZGVib3VuY2UoZnVuY3Rpb24gKHZtKSB7CiAgICAgIHZtLnVzZXJfY2hhbm5lbHNbdm0uY3VycmVudF91c2VyLmNoYW5uZWxfbmFtZV0ucHVzaCgic3RvcHBlZF90eXBpbmciKTsKICAgIH0sIDUwMDApLAogICAgbm9fcmVzcG9uc2U6IGRlYm91bmNlKGZ1bmN0aW9uICh2bSkgewogICAgICB2bS51c2VyX2NoYW5uZWxzW3ZtLmN1cnJlbnRfdXNlci5jaGFubmVsX25hbWVdLnB1c2goIm5vX3Jlc3BvbnNlIiwgewogICAgICAgIHNlbmRlcjogInNlbmRlciIsCiAgICAgIH0pOwogICAgfSwgMTAwMDApLAogICAgc2VuZF9tZXNzYWdlKCkgewogICAgICBpZiAodGhpcy50b19zZW5kICE9ICIiICYmIHRoaXMudXNlcl9saXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLmNoYXRfbGlzdC5wdXNoKHsKICAgICAgICAgIHNlbnQ6IHRydWUsCiAgICAgICAgICB0ZXh0OiB0aGlzLnRvX3NlbmQsCiAgICAgICAgICB0aW1lOiB0aGlzLmdlbmVyYXRlX3RpbWUoKSwKICAgICAgICAgIGN1cnJlbnRfY2hhbm5lbDogdGhpcy5jdXJyZW50X3VzZXIuY2hhbm5lbF9uYW1lLAogICAgICAgIH0pOwogICAgICAgIHRoaXMudXNlcl9jaGFubmVsc1t0aGlzLmN1cnJlbnRfdXNlci5jaGFubmVsX25hbWVdLnB1c2goIm5ld19jaGF0X21lc3NhZ2UiLCB7CiAgICAgICAgICBtZXNzYWdlOiB0aGlzLnRvX3NlbmQsCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy50b19zZW5kID0gIiI7CiAgICAgICAgdGhpcy5ub19yZXNwb25zZSh0aGlzKTsKICAgICAgICB0aGlzLnVwZGF0ZV9zY3JvbGxiYXIoKTsKICAgICAgfQogICAgfSwKICAgIGRpc2Nvbm5lY3Rfc3VwcG9ydF9jaGF0KCkgewogICAgICB0aGlzLnVzZXJfY2hhbm5lbHNbdGhpcy5jdXJyZW50X3VzZXIuY2hhbm5lbF9uYW1lXS5wdXNoKCJzdG9wcGVkX2NoYXQiLCB7CiAgICAgICAgbmFtZTogIlN1cHBvcnQgQWdlbnQiLAogICAgICAgIG1lc3NhZ2U6ICIgaGFzIGVuZGVkIHRoaXMgY29udmVyc2F0aW9uLiIsCiAgICAgIH0pOwogICAgICB0aGlzLnVzZXJfY2hhbm5lbHNbdGhpcy5jdXJyZW50X3VzZXIuY2hhbm5lbF9uYW1lXS5sZWF2ZSgpOwogICAgICAvLyB0aGlzLnVzZXJfbGlzdCA9IHRoaXMudXNlcl9saXN0LmZpbHRlcigodXNlcikgPT4gewogICAgICAvLyAgIHJldHVybiB1c2VyLmNoYW5uZWxfbmFtZSAhPSB0aGlzLmN1cnJlbnRfdXNlci5jaGFubmVsX25hbWU7CiAgICAgIC8vIH0pOwoKICAgICAgdmFyIGluZGV4ID0gdGhpcy51c2VyX2xpc3QuZmluZEluZGV4KG9iaiA9PiBvYmouY2hhbm5lbF9uYW1lID09PSB0aGlzLmN1cnJlbnRfdXNlci5jaGFubmVsX25hbWUpOwogICAgICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uYWdlbnRfdXNlcm5hbWUgPSB0aGlzLmFnZW50X3VzZXJuYW1lOwogICAgICB0aGlzLnVzZXJfbGlzdFtpbmRleF0uaXNfY29ubmVjdGVkID0gdHJ1ZTsKICAgICAgdGhpcy51c2VyX2xpc3RbaW5kZXhdLnN0YXRlID0gImVuZGVkIjsKICAgICAgLy8gdGhpcy5jdXJyZW50X3VzZXIgPSB0aGlzLmZpcnN0X25hbWU7CiAgICB9LAogICAgdXBkYXRlX3Njcm9sbGJhcigpIHsKICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgdGhpcy5pc190eXBpbmdfaW5kaWNhdG9yX29uID0gZmFsc2U7CiAgICAgIH0sIDE1MDApOwogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuY2hhdC1ib2R5Iikuc2Nyb2xsVG9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigKICAgICAgICAgICIuY2hhdC1ib2R5IgogICAgICAgICkuc2Nyb2xsSGVpZ2h0OwogICAgICB9LCAyMDApOwogICAgfSwKICAgIC8vIHVzZXJfbGlzdF9jbGFzcyhjaGFubmVsbmFtZSkgewogICAgICAvLyBpZiAoY2hhbm5lbG5hbWUgPT0gdGhpcy5jdXJyZW50X2NoYW5uZWwpIHsKICAgICAgLy8gICByZXR1cm4gIm5hdi1saW5rIGFjdGl2ZSI7CiAgICAgIC8vIH0gZWxzZSB7CiAgICAgIC8vICAgcmV0dXJuICJuYXYtbGluayBpbmFjdGl2ZSI7CiAgICAgIC8vIH0KICAgIC8vIH0sCiAgICBzZWxlY3RfdXNlcih1c2VyKSB7CiAgICAgIHRoaXMuY3VycmVudF91c2VyID0gdXNlcjsKICAgICAgdGhpcy51cGRhdGVfc2Nyb2xsYmFyKCk7CiAgICB9LAogICAgY2hlY2tfY3VycmVudF9hY3RpdmVfdXNlcihpbmRleCkgewogICAgICBpZiAoQm9vbGVhbih0aGlzLmN1cnJlbnRfdXNlcikgPT09IHRydWUpIHsKICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50X3VzZXIuY2hhbm5lbF9uYW1lID09PQogICAgICAgICAgdGhpcy51c2VyX2xpc3RbaW5kZXhdLmNoYW5uZWxfbmFtZQogICAgICAgICAgPyAiY3VycmVudC1hY3RpdmUtdXNlciIKICAgICAgICAgIDogbnVsbDsKICAgICAgfQogICAgfSwKICB9LAp9Owo="},null]}