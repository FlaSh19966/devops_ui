{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue?vue&type=template&id=d864dc54&scoped=true&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue","mtime":1645594423479},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiBjbGFzcz0ic3Bpbm5lciIgaWQ9InNwaW5uZXIiIHYtc2hvdz0ic3Bpbm5lck9uIj48L2Rpdj4KICA8ZGl2CiAgICBjbGFzcz0iCiAgICAgIGNhcmQtaGVhZGVyCiAgICAgIHB4LTAKICAgICAgZC1ibG9jayBkLXNtLWZsZXgKICAgICAgZmxleC13cmFwCiAgICAgIGp1c3RpZnktY29udGVudC1iZXR3ZWVuCiAgICAiCiAgPgogICAgPGRpdiBjbGFzcz0iY2FyZC1hY3QgZC1mbGV4IGZsZXgtd3JhcCIgc3R5bGU9IndpZHRoOiAxMDAlIj4KICAgICAgPGJ1dHRvbgogICAgICAgIGlkPSJhZGRfbm9kZV9idG4iCiAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgQGNsaWNrPSJjaGFuZ2Vfcm9vdCIKICAgICAgICBkYXRhLXRhcmdldD0iI2FkZG5vZGVtb2RhbCIKICAgICAgPgogICAgICAgIEFkZCBOb2RlCiAgICAgIDwvYnV0dG9uPgogICAgICA8IS0tIDxidXR0b24gaWQ9ImFkZF9jaGlsZF9ub2RlX2J0biIgY2xhc3M9ImRhcmtibHVlLWJ0biIgQGNsaWNrPSJ0ZXN0RnVuY3Rpb24iPkFkZCBDaGlsZCBOb2RlPC9idXR0b24+IC0tPgogICAgICA8IS0tIDxidXR0b24gaWQ9ImFkZF9mb2xkZXJfYnRuIiBjbGFzcz0iZGFya2JsdWUtYnRuIj5BZGQgRm9sZGVyPC9idXR0b24+IC0tPgogICAgICA8YnV0dG9uCiAgICAgICAgaWQ9InRyeV9ib3RfYnRuIgogICAgICAgIGNsYXNzPSJtbC1hdXRvIGRhcmtibHVlLWJ0biIKICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgQGNsaWNrPSJ2aXNpYmxlX3RyeV9ib3QoKSIKICAgICAgPgogICAgICAgIFRyeSBCb3QKICAgICAgPC9idXR0b24+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJkLWZsZXggcHgtMCI+CiAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcHgtMCI+CiAgICAgIDx2dWUtdHJlZS1saXN0CiAgICAgICAgQGNsaWNrPSJvbkNsaWNrIgogICAgICAgIEBkZWxldGUtbm9kZT0ib25EZWwiCiAgICAgICAgQGFkZC1ub2RlPSJvbkFkZE5vZGUiCiAgICAgICAgQGRyb3AtYmVmb3JlPSJkcm9wQmVmb3JlIgogICAgICAgIEBkcm9wLWFmdGVyPSJkcm9wQWZ0ZXIiCiAgICAgICAgQGRyb3A9ImRyb3AiCiAgICAgICAgOm1vZGVsPSJkYXRhIgogICAgICAgIGRlZmF1bHQtdHJlZS1ub2RlLW5hbWU9IiIKICAgICAgICBkZWZhdWx0LWxlYWYtbm9kZS1uYW1lPSIiCiAgICAgICAgdi1iaW5kOmRlZmF1bHQtZXhwYW5kZWQ9InRydWUiCiAgICAgID4KICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmxlYWZOYW1lRGlzcGxheT0ic2xvdFByb3BzIj4KICAgICAgICAgIDxzcGFuPgogICAgICAgICAgICB7eyBzbG90UHJvcHMubW9kZWwubmFtZSB9fQogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPGJyIC8+CiAgICAgICAgICA8c3BhbiBjbGFzcz0ibXV0ZWQiCiAgICAgICAgICAgID57eyBzbG90UHJvcHMubW9kZWwucmVzcG9uc2VzLmxlbmd0aCB9fSBSZXNwb25zZXM8L3NwYW4KICAgICAgICAgID4KICAgICAgICA8L3RlbXBsYXRlPiAgICAgICAgCiAgICAgICAgPCEtLSA8dGVtcGxhdGUgdi1zbG90OnRyZWVOb2RlSWNvbj0ic2xvdFByb3BzIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiI+CiAgICAgICAgICB7eyAoc2xvdFByb3BzLm1vZGVsLmNoaWxkcmVuICYmIHNsb3RQcm9wcy5tb2RlbC5jaGlsZHJlbi5sZW5ndGggPiAwICYmICFzbG90UHJvcHMuZXhwYW5kZWQpID8KICAgICAgICAgICcnIDogJycgfX08L3NwYW4+CiAgICAgIDwvdGVtcGxhdGU+IC0tPgogICAgICAgIDwhLS0gPHNwYW4gY2xhc3M9Imljb24iIHRpdGxlPSJBZGQgTm9kZSIgc2xvdD0iYWRkVHJlZU5vZGVJY29uIj7wn5OCPC9zcGFuPiAtLT4KICAgICAgICA8IS0tIDxzcGFuIGNsYXNzPSJpY29uIiBzbG90PSJhZGRMZWFmTm9kZUljb24iPu+8izwvc3Bhbj4gLS0+CiAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz0iaWNvbiIgc2xvdD0iZWRpdE5vZGVJY29uIj7wn5ODPC9zcGFuPiAtLT4KICAgICAgICA8IS0tIDxzcGFuIGNsYXNzPSJpY29uIiBzbG90PSJkZWxOb2RlSWNvbiI+4pyC77iPPC9zcGFuPiAtLT4KICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbiIgc2xvdD0ibGVhZk5vZGVJY29uIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9Imljb24iIHNsb3Q9InRyZWVOb2RlSWNvbiI+PC9zcGFuPgogICAgICA8L3Z1ZS10cmVlLWxpc3Q+CiAgICAgIDxiciAvPgogICAgICA8IS0tIDxGb2xsb3dpbmcgcGFydCBpcyBmb3IgdGVzdGluZywgZG8gbm90IHJlbW92ZT4gLS0+CiAgICAgIDwhLS0gPGJ1dHRvbiBAY2xpY2s9InRlc3ROZXdUcmVlIj5HZXQgbmV3IHRyZWU8L2J1dHRvbj4KICAgICAgPHByZT4KICAgICAge3sgbmV3VHJlZSB9fQogICAgPC9wcmUKICAgICAgPiAgLS0+CiAgICA8L2Rpdj4KICAgIDxkaXYKICAgICAgY2xhc3M9InB4LTAiCiAgICAgIGlkPSJ0cnlfYm90X3Jlc3BvbnNlIgogICAgICBzdHlsZT0ibWFyZ2luLXJpZ2h0OiAtMTlweCAhaW1wb3J0YW50OyBtYXJnaW4tdG9wOiAtMjhweCAhaW1wb3J0YW50IgogICAgPgogICAgICA8dGVtcGxhdGUgdi1pZj0ibG9hZF9ib3RfcHJldmlldyIgc3R5bGU9Im92ZXJmbG93OiBoaWRkZW4iPgogICAgICAgIDxyZXNwb25zZS1ib3QKICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOiAwcHgiCiAgICAgICAgICA6aXNEaWFsb2dCb3Q9InRydWUiCiAgICAgICAgPjwvcmVzcG9uc2UtYm90PgogICAgICA8L3RlbXBsYXRlPgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdgogICAgY2xhc3M9Im1vZGFsIGZhZGUiCiAgICBpZD0iYWRkbm9kZW1vZGFsIgogICAgdGFiaW5kZXg9Ii0xIgogICAgcm9sZT0iZGlhbG9nIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJleGFtcGxlTW9kYWxMYWJlbCIKICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgZGF0YS1iYWNrZHJvcD0ic3RhdGljIgogICAgZGF0YS1rZXlib2FyZD0iZmFsc2UiCiAgPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLXhsIiByb2xlPSJkb2N1bWVudCI+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQgcC0yIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgdi1pZj0ibmV3X2NoaWxkX25vZGUiCiAgICAgICAgICAgIEBjbGljaz0ib25EZWwoY2hpbGRfbm9kZSkiCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSIKICAgICAgICAgID4KICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgdi1lbHNlCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgQGNsaWNrPSJjbG9zZV9hZGRub2RlbW9kYWwiCiAgICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIiBzdHlsZT0id2lkdGg6IDE1MHB4Ij4KICAgICAgICAgICAgPGg1Pk5vZGUgTmFtZTwvaDU+CiAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJub2RlX25hbWUiCiAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIG5vZGUgbmFtZSIKICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogMC4zNzVyZW0gMC41cmVtICFpbXBvcnRhbnQiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8aDU+SWYgQXNzaXN0YW50IFJlY29nbml6ZXM8L2g1PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgZC1mbGV4Ij4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iZC1mbGV4IG1sLTIgcGItMiIKICAgICAgICAgICAgICAgIHYtZm9yPSIodHJpZ2dlciwgaW5kZXgpIGluIHRyaWdnZXJzIgogICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPCEtLSBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9IiFpc19yb290IiBjbGFzcz0ibWwtMiBteS1hdXRvIj4KICAgICAgICAgICAgICAgICAgPCEtLSA8bXVsdGlzZWxlY3QKICAgICAgICAgICAgICAgICAgICBpZD0idHJpZ2dlcl9maWx0ZXJfYnlfaWQiCiAgICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLXNlbGVjdD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz0idHJpZ2dlcnNfZmlsdGVyX2J5X29wdGlvbnMiCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkZpbHRlciBieSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ0cmlnZ2VyLnRyaWdnZXJfdHlwZSIKICAgICAgICAgICAgICAgICAgICA6YWxsb3ctZW1wdHk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIDpzaG93LWxhYmVscz0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJjaGFuZ2VfdHJpZ2dlcl92YWx1ZSh0cmlnZ2VyLnRyaWdnZXJfdHlwZSwgaW5kZXgpIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbXVsdGlzZWxlY3Q+IC0tPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLXNlbGVjdCIgCiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJGaWx0ZXIgYnkiCiAgICAgICAgICAgICAgICAgICAgICBpZD0idHJpZ2dlcl9maWx0ZXJfYnlfaWQiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEyMHB4OyBoZWlnaHQ6IDQwcHg7IHBhZGRpbmctbGVmdDogMTRweDsgcGFkZGluZy1ib3R0b206NHB4OyIKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJGaWx0ZXIgYnkiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ0cmlnZ2VyLnRyaWdnZXJfdHlwZSIKICAgICAgICAgICAgICAgICAgICAgIEBpbnB1dD0iY2hhbmdlX3RyaWdnZXJfdmFsdWUodHJpZ2dlci50cmlnZ2VyX3R5cGUsIGluZGV4KSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiIGRpc2FibGVkIHNlbGVjdGVkPkZpbHRlciBieTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iaW50ZW50Ij5PYmplY3RpdmU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImVudGl0eSI+RW50aXR5PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtbC0yIG15LWF1dG8iCiAgICAgICAgICAgICAgICAgIHYtaWY9IgogICAgICAgICAgICAgICAgICAgICghaXNfcm9vdCAmJiBCb29sZWFuKHRyaWdnZXIudHJpZ2dlcl90eXBlKSkgfHwgaXNfcm9vdAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxtdWx0aXNlbGVjdAogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InRyaWdnZXIudHJpZ2dlcl92YWx1ZSIKICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz0iCiAgICAgICAgICAgICAgICAgICAgICBpc19yb290ID09PSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJpZ2dlcl9vcHRpb25zX2ludGVudAogICAgICAgICAgICAgICAgICAgICAgICA6IHRyaWdnZXIudHJpZ2dlcl90eXBlID09PSAnaW50ZW50JwogICAgICAgICAgICAgICAgICAgICAgICA/IHRyaWdnZXJfb3B0aW9uc19pbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgOiB0cmlnZ2VyX29wdGlvbnNfZW50aXR5CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj0iCiAgICAgICAgICAgICAgICAgICAgICBpc19yb290ID09PSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgID8gJ1NlYXJjaCBPYmplY3RpdmUnCiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJpZ2dlci50cmlnZ2VyX3R5cGUgPT09ICdpbnRlbnQnCiAgICAgICAgICAgICAgICAgICAgICAgID8gJ1NlYXJjaCBPYmplY3RpdmUnCiAgICAgICAgICAgICAgICAgICAgICAgIDogJ1NlYXJjaCBFbnRpdHknCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1zZWxlY3Q9InRydWUiCiAgICAgICAgICAgICAgICAgICAgOmNsZWFyLW9uLXNlbGVjdD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgOnByZXNlcnZlLXNlYXJjaD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICA6c2hvdy1sYWJlbHM9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIDphbGxvdy1lbXB0eT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgb3Blbi1kaXJlY3Rpb249ImJvdHRvbSIKICAgICAgICAgICAgICAgICAgICA6c2VhcmNoYWJsZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICA6bG9hZGluZz0iaXNfbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICBAaW5wdXQ9IgogICAgICAgICAgICAgICAgICAgICAgY2hhbmdlX3RyaWdnZXJfdHlwZSgKICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlci50cmlnZ2VyX3R5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIudHJpZ2dlcl92YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgQHNlYXJjaC1jaGFuZ2U9InNlYXJjaF9pbnRlbnRfZW50aXR5KHRyaWdnZXIudHJpZ2dlcl90eXBlLCAkZXZlbnQpIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDMwcHg7IHBhZGRpbmc6IDBweCIKICAgICAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NvdXJjZSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwhLS0gPG9wdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKG9wdGlvbiwgaW5kZXgpIGluIHRyaWdnZXJfb3B0aW9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0ib3B0aW9uIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyBvcHRpb24gfX0KICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPiAtLT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBzbG90PSJub09wdGlvbnMiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBzbG90PSJub1Jlc3VsdCI+Tm8gQ29uZGl0aW9uIGZvdW5kLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9tdWx0aXNlbGVjdD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ibWwtMiBteS1hdXRvIgogICAgICAgICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICAgICAgICAhaXNfcm9vdCAmJgogICAgICAgICAgICAgICAgICAgIEJvb2xlYW4odHJpZ2dlci50cmlnZ2VyX3R5cGUgPT09ICdlbnRpdHknKSAmJgogICAgICAgICAgICAgICAgICAgIEJvb2xlYW4odHJpZ2dlci50cmlnZ2VyX3ZhbHVlKQogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgaXNfZW50aXR5X3R5cGVfc3lzX3BhdHRlcm4odHJpZ2dlci50cmlnZ2VyX3ZhbHVlKSA9PT0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgPyAnY3Vyc29yOiBub3QtYWxsb3dlZCcKICAgICAgICAgICAgICAgICAgICAgIDogbnVsbAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgIDp0aXRsZT0iCiAgICAgICAgICAgICAgICAgICAgaXNfZW50aXR5X3R5cGVfc3lzX3BhdHRlcm4odHJpZ2dlci50cmlnZ2VyX3ZhbHVlKSA9PT0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgPyAnRW50aXR5IHNlbGVjdGVkIGlzIG9mIHR5cGUgcGF0dGVybiBvciBzeXN0ZW0gZW50aXR5LCBoZW5jZSBmdXJ0aGVyIG9wdGlvbihzKSBjYW5ub3QgYmUgc2VsZWN0ZWQuJwogICAgICAgICAgICAgICAgICAgICAgOiBudWxsCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPG11bHRpc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgaWQ9InRyaWdnZXJfb3BlcmFuZF9pZCIKICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tc2VsZWN0PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJlbnRpdHlfb3BlcmFuZF9vcHRpb25zIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJPcGVyYXRvciIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ0cmlnZ2VyLm9wZXJhbmQiCiAgICAgICAgICAgICAgICAgICAgOmFsbG93LWVtcHR5PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICA6c2hvdy1sYWJlbHM9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIEBpbnB1dD0iCiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VfdHJpZ2dlcl9lbnRpdHlfdmFsdWUodHJpZ2dlci5vcGVyYW5kLCBpbmRleCkKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSIKICAgICAgICAgICAgICAgICAgICAgIGlzX2VudGl0eV90eXBlX3N5c19wYXR0ZXJuKHRyaWdnZXIudHJpZ2dlcl92YWx1ZSkgPT09CiAgICAgICAgICAgICAgICAgICAgICB0cnVlCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbXVsdGlzZWxlY3Q+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im1sLTIgbXktYXV0byIKICAgICAgICAgICAgICAgICAgdi1pZj0iCiAgICAgICAgICAgICAgICAgICAgIWlzX3Jvb3QgJiYKICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRyaWdnZXIudHJpZ2dlcl90eXBlID09PSAnZW50aXR5JykgJiYKICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRyaWdnZXIudHJpZ2dlcl92YWx1ZSkgJiYKICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRyaWdnZXIub3BlcmFuZCA9PT0gJ2lzJykKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8IS0tIDxwIHN0eWxlPSJtYXJnaW46MHB4ICFpbXBvcnRhbnQiIAogICAgICAgICAgICAgICAgICAgICAgdi1pZj0iaXNfZW50aXR5X3R5cGVfc3lzX3BhdHRlcm4odHJpZ2dlci50cmlnZ2VyX3ZhbHVlKSI+CiAgICAgICAgICAgICAgICAgICAgICAoRW50aXR5IHNlbGVjdGVkIGlzIG9mIHR5cGUgcGF0dGVybiBvciBzeXN0ZW0gZW50aXR5LDxicj4gaGVuY2UgZnVydGhlciBvcHRpb24ocykgY2Fubm90IGJlIHNlbGVjdGVkLikKICAgICAgICAgICAgICAgICAgICA8L3A+IC0tPgogICAgICAgICAgICAgICAgICA8bXVsdGlzZWxlY3QKICAgICAgICAgICAgICAgICAgICBpZD0idHJpZ2dlcl9lbnRpdHlfdmFsdWVfaWQiCiAgICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLXNlbGVjdD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz0iZW50aXR5X3ZhbHVlX29wdGlvbnModHJpZ2dlci50cmlnZ2VyX3ZhbHVlKSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0ic2VsZWN0IGVudGl0eSB2YWx1ZSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ0cmlnZ2VyLmVudGl0eV92YWx1ZSIKICAgICAgICAgICAgICAgICAgICA6YWxsb3ctZW1wdHk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIDpzaG93LWxhYmVscz0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgQGlucHV0PSIKICAgICAgICAgICAgICAgICAgICAgIHNldF90cmlnZ2VyX2VudGl0eV92YWx1ZSh0cmlnZ2VyLmVudGl0eV92YWx1ZSwgaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvbXVsdGlzZWxlY3Q+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgIHYtaWY9InRyaWdnZXJzLmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJteS1hdXRvIG1sLTIgbXItMCBjbG9zZSIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fdHJpZ2dlcnNfbGlzdCgncmVtb3ZlJywgaW5kZXgpIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAmdGltZXM7CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICB2LWlmPSJ0cmlnZ2Vycy5sZW5ndGggPiAxIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibXktYXV0byIKICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMHB4OyBmb250LXNpemU6IDE3cHgiCiAgICAgICAgICAgICAgICAgID4mJgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHYtaWY9IiFpc19yb290IgogICAgICAgICAgICAgICAgaWQ9ImFkZF90cmlnZ2VyX2J0biIKICAgICAgICAgICAgICAgIGNsYXNzPSJtbC0yIG15LWF1dG8iCiAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwcHg7CiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50IHVybCgnQHBvcnRhbC9hc3NldHMvaW1nL3BsdXMucG5nJykKICAgICAgICAgICAgICAgICAgICAwJSAwJSBuby1yZXBlYXQgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDVweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fdHJpZ2dlcnNfbGlzdCgnYWRkJykiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLSA8aHIgLz4gLS0+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGQtZmxleCBtYi0wIj4KICAgICAgICAgICAgPGg1IHN0eWxlPSJ3aWR0aDogMjAlOyBwYWRkaW5nOiAwcHg7IG1hcmdpbi10b3A6IDRweCI+U2xvdHM8L2g1PgogICAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgICBjbGFzcz0ic3dpdGNoIG1sLWF1dG8iCiAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6IDRweDsgbWFyZ2luLWJvdHRvbTogMHB4IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiB2LW1vZGVsPSJpc19zbG90IiBpZD0ic2xvdHNfcmVxdWlyZWQiIC8+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNsaWRlciByb3VuZCIgc3R5bGU9ImJvcmRlci1yYWRpdXM6IDUwcHgiPjwvc3Bhbj4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPHA+CiAgICAgICAgICAgIChFbmFibGUgdGhpcyB0byBnYXRoZXIgdGhlIGluZm9ybWF0aW9uIHlvdXIgYm90IG5lZWRzIHRvIHJlc3BvbmQKICAgICAgICAgICAgdG8gYSB1c2VyLikKICAgICAgICAgIDwvcD4KICAgICAgICAgIDxkaXYgdi1pZj0iaXNfc2xvdCI+CiAgICAgICAgICAgIDwhLS0gPGhyIHN0eWxlPSJtYXJnaW46IDEwcHggMHB4IiAvPiAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICBjbGFzcz0ic3ViX2hlYWRpbmciCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOiA2cHg7IG1hcmdpbi1ib3R0b206IDVweCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgQWRkIFNsb3QKICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgMCUgMCUgbm8tcmVwZWF0IHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3Nsb3RzX2xpc3QoJ2FkZCcpIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IAogICAgICAgICAgICAgICAgdi1zaG93PSJzbG90cy5sZW5ndGggPiAwIgogICAgICAgICAgICAgICAgY2xhc3M9Im1sLWF1dG8gY2FyZC1hY3QiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPCEtLSA8YSAKICAgICAgICAgICAgICAgICAgaHJlZj0iI21hbmFnZV9oYW5kbGVyX2lkIiAKICAgICAgICAgICAgICAgICAgY2xhc3M9InN1Yl9oZWFkaW5nIiAKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBNYW5hZ2UgSGFuZGxlcnMKICAgICAgICAgICAgICAgIDwvYT4gLS0+CiAgICAgICAgICAgICAgICA8YnV0dG9uIAogICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNtYW5hZ2VfaGFuZGxlcl9pZCIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgTWFuYWdlIEhhbmRsZXJzCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIHYtc2hvdz0ic2xvdHMubGVuZ3RoID4gMCIKICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBwYi0wIHB0LTIgbXQtMyBtYi0zIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPCEtLSA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+IC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBtYi0xIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00Ij5DaGVjayBmb3IgZW50aXR5PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCI+U2F2ZSBpdCBhczwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTMiPgogICAgICAgICAgICAgICAgICBJZiBub3QgcHJlc2VudCwgYXNrIDxiciAvPgogICAgICAgICAgICAgICAgICAoT3B0aW9uYWwpCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+CiAgICAgICAgICAgICAgPGRyYWdnYWJsZQogICAgICAgICAgICAgICAgdi1tb2RlbD0ic2xvdHMiCiAgICAgICAgICAgICAgICBncm91cD0icGVvcGxlIgogICAgICAgICAgICAgICAgQHN0YXJ0PSJkcmFnX3Nsb3RzID0gdHJ1ZSIKICAgICAgICAgICAgICAgIEBlbmQ9ImRyYWdfc2xvdHMgPSBmYWxzZSIKICAgICAgICAgICAgICAgIHYtYmluZD0iZHJhZ09wdGlvbnNTbG90cyIKICAgICAgICAgICAgICAgIGhhbmRsZT0iLmhhbmRsZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8dHJhbnNpdGlvbi1ncm91cAogICAgICAgICAgICAgICAgICB0eXBlPSJ0cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICA6bmFtZT0iIWRyYWdfc2xvdHMgPyAnZmxpcC1saXN0JyA6IG51bGwiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sLXNtLTEyIHAtMCBkLWZsZXggZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHNsb3QsIGluZGV4KSBpbiBzbG90cyIKICAgICAgICAgICAgICAgICAgICA6a2V5PSJzbG90LmlkIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgcC0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2xvdC5jaGVja19mb3IiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VsZWN0IHJlc3BvbnNlIgogICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNldF9zbG90X2VudGl0eV92YXJpYWJsZShpbmRleCwgc2xvdC5jaGVja19mb3IpIgogICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NvdXJjZSIKICAgICAgICAgICAgICAgICAgICAgID4gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtdWx0aXNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNsb3QuY2hlY2tfZm9yIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJlbnRpdHlfbGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tc2VsZWN0PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGVhci1vbi1zZWxlY3Q9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpwcmVzZXJ2ZS1zZWFyY2g9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6YWxsb3ctZW1wdHk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJTZWFyY2ggRW50aXR5IgogICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4tZGlyZWN0aW9uPSJib3R0b20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnNlYXJjaGFibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmxvYWRpbmc9ImlzX2xvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgQHNlYXJjaC1jaGFuZ2U9InNlYXJjaF9lbnRpdHkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJzZXRfc2xvdF9lbnRpdHlfdmFyaWFibGUoaW5kZXgsIHNsb3QuY2hlY2tfZm9yKSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAzMHB4OyBwYWRkaW5nOiAwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zb3VyY2UiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxvcHRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKG9wdGlvbiwgaW5kZXgpIGluIHRlbXBfZW50aXRpZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJvcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBvcHRpb24gfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHNsb3Q9Im5vT3B0aW9ucyI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHNsb3Q9Im5vUmVzdWx0Ij5ObyBFbnRpdGVzIGZvdW5kLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tdWx0aXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPCEtLSA8ZGl2IHYtZWxzZT5BZGQgc29tZSBFbnRpdGllcyBmaXJzdDwvZGl2PiAtLT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCI+CiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgdmFyaWFibGUiCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNsb3Quc2xvdCIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTMgcC0wIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICBpZD0iY2hlY2tmb2N1cyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iUmVzcG9uc2UgSUQncyIKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3Vzb3V0PSIKICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRfc2xvdF90b19hc3Npc3RhbnRfcmVzcG9uc2UoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3QuY2hlY2tfZm9yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdC5zbG90LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdC5yZXNwb25zZXMKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3VzaW49IgogICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZV9zbG90X3RvX2Fzc2lzdGFudF9yZXNwb25zZShpbmRleCwgc2xvdC5zbG90KQogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNsb3QucmVzcG9uc2VzIgogICAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPCEtLSA6ZGlzYWJsZWQ9InNsb3QucmVzcG9uc2VzLmxlbmd0aCA+IDEiIC0tPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xIHByLTAiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGQtZmxleCBwLTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBweC1hdXRvIiBzdHlsZT0icGFkZGluZy10b3A6IDhweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDogcmlnaHQ7IGN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAxNHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im11dGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Nsb3Rtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbl9vcGVuX3Nsb3RzX21vZGFsKHNsb3Quc2xvdCwgaW5kZXgsIHNsb3QuY2hlY2tfZm9yKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJDdXN0b21pemUgU2xvdCIgY2xhc3M9ImZhcyBmYS1jb2ciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBweC1hdXRvIiBzdHlsZT0icGFkZGluZy10b3A6IDEwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmFzIGZhLWFycm93cy1hbHQgaGFuZGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsgZmxvYXQ6cmlnaHQgIWltcG9ydGFudDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iRHJhZyB0byBDaGFuZ2UgT3JkZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJzbG90cy5sZW5ndGggIT0gMSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgcHgtYXV0byIgc3R5bGU9InBhZGRpbmctdG9wOiA2cHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF90b19zbG90c19saXN0KCdyZW1vdmUnLCBpbmRleCwgc2xvdC5yZXNwb25zZXMpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkRlbGV0ZSBTbG90IgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICZ0aW1lczsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC90cmFuc2l0aW9uLWdyb3VwPgogICAgICAgICAgICAgIDwvZHJhZ2dhYmxlPgogICAgICAgICAgICAgIDwhLS0gPGhyIC8+IC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBkLWZsZXggbWItMCI+CiAgICAgICAgICAgIDxoNSBzdHlsZT0id2lkdGg6IDIwJTsgcGFkZGluZzogMHB4OyBtYXJnaW4tdG9wOiA0cHgiPldlYmhvb2s8L2g1PgogICAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgICBjbGFzcz0ic3dpdGNoIG1sLWF1dG8iCiAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6IDRweDsgbWFyZ2luLWJvdHRvbTogMHB4IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgIHYtbW9kZWw9ImlzX3dlYmhvb2siCiAgICAgICAgICAgICAgICBpZD0id2ViaG9va19yZXF1aXJlZCIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzbGlkZXIgcm91bmQiIHN0eWxlPSJib3JkZXItcmFkaXVzOiA1MHB4Ij48L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxwPgogICAgICAgICAgICAoRW5hYmxlIHRoaXMgdG8gdXNlIGFuIGV4dGVybmFsIHNvdXJjZSB0byBwb3B1bGF0ZSBhIHJlc3BvbnNlLiBZb3UKICAgICAgICAgICAgY2FuIG9ubHkgY2FsbCBvbmUgZXh0ZXJuYWwgc291cmNlIHBlciBub2RlLikKICAgICAgICAgIDwvcD4KICAgICAgICAgIDxkaXYgc3R5bGU9ImNvbG9yOiByZWQiIHYtaWY9ImlzX3dlYmhvb2sgJiYgIWlzX3dlYmhvb2tfZGV0YWlscyI+CiAgICAgICAgICAgIFBsZWFzZSBzZXQgeW91ciB3ZWJob29rIGRldGFpbHMgZmlyc3QKICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLSA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+IC0tPgogICAgICAgICAgPGRpdiB2LWlmPSJpc193ZWJob29rICYmIGlzX3dlYmhvb2tfZGV0YWlscyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgIGNsYXNzPSJzdWJfaGVhZGluZyIKICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOiAzcHg7IG1hcmdpbi1ib3R0b206IDVweCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBBZGQgUGFyYW1ldGVycwogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCB1cmwoJ0Bwb3J0YWwvYXNzZXRzL2ltZy9wbHVzLnBuZycpCiAgICAgICAgICAgICAgICAgICAgMCUgMCUgbm8tcmVwZWF0IHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI5cHg7CiAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fd2ViaG9va19tYXBwaW5nKCdhZGQnKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgIGNsYXNzPSJtbC0yIHN1Yl9oZWFkaW5nIgogICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6IDRweDsgbWFyZ2luLWJvdHRvbTogMHB4OyBtYXJnaW4tbGVmdDogMTBweCIKICAgICAgICAgICAgICAgIHYtc2hvdz0id2ViaG9va19tYXBwaW5nLmxlbmd0aCA+IDAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgU2VsZWN0IFdlYmhvb2sgOgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMyBtbC0yIHAtMCIgdi1zaG93PSJ3ZWJob29rX21hcHBpbmcubGVuZ3RoID4gMCI+CiAgICAgICAgICAgICAgICA8bXVsdGlzZWxlY3QKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0id2ViaG9va19pZCIKICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9IndlYmhvb2tfbGlzdC5tYXAoKHdlYmhvb2spID0+IHdlYmhvb2suaWQpIgogICAgICAgICAgICAgICAgICA6Y3VzdG9tLWxhYmVsPSIKICAgICAgICAgICAgICAgICAgICAod2ViaG9vaykgPT4KICAgICAgICAgICAgICAgICAgICAgIHdlYmhvb2tfbGlzdC5maW5kKCh4KSA9PiB4LmlkID09IHdlYmhvb2spLm5hbWUKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tc2VsZWN0PSJ0cnVlIgogICAgICAgICAgICAgICAgICA6Y2xlYXItb24tc2VsZWN0PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgOnByZXNlcnZlLXNlYXJjaD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgOmFsbG93LWVtcHR5PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlYXJjaCBXZWJob29rIgogICAgICAgICAgICAgICAgICBvcGVuLWRpcmVjdGlvbj0iYm90dG9tIgogICAgICAgICAgICAgICAgICA6c2VhcmNoYWJsZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgOmxvYWRpbmc9ImlzX2xvYWRpbmciCiAgICAgICAgICAgICAgICAgIEBzZWFyY2gtY2hhbmdlPSJzZWFyY2hfd2ViaG9vayIKICAgICAgICAgICAgICAgICAgQGlucHV0PSJzZXRfd2ViaG9va19yZXR1cm5fdmFyaWFibGUod2ViaG9va19pZCkiCiAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwcHg7CiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMHB4OyAKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NvdXJjZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPCEtLSBAaW5wdXQ9InNldF9zbG90X2VudGl0eV92YXJpYWJsZShpbmRleCwgc2xvdC5jaGVja19mb3IpIiAtLT4KICAgICAgICAgICAgICAgICAgPCEtLSA8b3B0aW9uCiAgICAgICAgICAgICAgICB2LWZvcj0iKG9wdGlvbiwgaW5kZXgpIGluIHRlbXBfZW50aXRpZXMiCiAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgIDp2YWx1ZT0ib3B0aW9uIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIHt7IG9wdGlvbiB9fQogICAgICAgICAgICAgIDwvb3B0aW9uPiAtLT4KICAgICAgICAgICAgICAgICAgPHNwYW4gc2xvdD0ibm9PcHRpb25zIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgIDxzcGFuIHNsb3Q9Im5vUmVzdWx0Ij5ObyBXZWJob29rcyBmb3VuZC48L3NwYW4+CiAgICAgICAgICAgICAgICA8L211bHRpc2VsZWN0PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICBjbGFzcz0ibWwtMiBzdWJfaGVhZGluZyIKICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOiA2cHg7IG1hcmdpbi1ib3R0b206IDBweDsgbWFyZ2luLWxlZnQ6IDEwcHgiCiAgICAgICAgICAgICAgICB2LXNob3c9IndlYmhvb2tfbWFwcGluZy5sZW5ndGggPiAwIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIFdlYmhvb2sgUmV0dXJuIFZhcmlhYmxlIDoKICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTMiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiIHYtc2hvdz0id2ViaG9va19tYXBwaW5nLmxlbmd0aCA+IDAiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBpZD0id2ViaG9va192YXJpYWJsZV9pZCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgdmFyaWFibGUgZS5nLiAkd2ViaG9va19yZXN1bHQiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ3ZWJob29rX3ZhcmlhYmxlIgogICAgICAgICAgICAgICAgICAgIDpzdHlsZT0iKHdlYmhvb2tfdmFyaWFibGUubGVuZ3RoID4gMCkgPyAncGFkZGluZy1sZWZ0OjE5cHggIWltcG9ydGFudDsnOiAncGFkZGluZzogMC4zNzVyZW0gMC41cmVtICFpbXBvcnRhbnQnIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJ3ZWJob29rX3ZhcmlhYmxlLmxlbmd0aCA+MCIgY2xhc3M9InVuaXQiPiQ8L3NwYW4+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiAwcHg7IGNvbG9yOiAjMDY0NUFEOyIKICAgICAgICAgICAgICAgIGNsYXNzPSJteS1hdXRvIgogICAgICAgICAgICAgICAgdi1zaG93PSJ3ZWJob29rX21hcHBpbmcubGVuZ3RoID4gMCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtaW5mby1jaXJjbGUiCiAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICB0aXRsZT0iVG8gYXZvaWQgb3ZlcmlkZSBhbHdheXMgdXNlIHVuaXF1ZSB3ZWJob29rIHJldHVybiB2YXJpYWJsZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgdi1zaG93PSJ3ZWJob29rX21hcHBpbmcubGVuZ3RoID4gMCIKICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBwYi0wIHB0LTIgbXQtMyBtYi0zIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPCEtLSA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+IC0tPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIHYtaWY9ImlzX3dlYmhvb2siCiAgICAgICAgICAgICAgICBjbGFzcz0iZC1mbGV4IG1iLTEiCiAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS01Ij5LZXk8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS01Ij5WYWx1ZTwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxociBzdHlsZT0ibWFyZ2luOiAxMHB4IDBweCIgLz4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImlzX3dlYmhvb2siPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0iY29sLXNtLTEyIHAtMCBkLWZsZXggZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgdi1mb3I9IihwYXJhbXMsIGluZGV4KSBpbiB3ZWJob29rX21hcHBpbmciCiAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNSBwLTAiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciBuYW1lIgogICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InBhcmFtcy5rZXkiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS01Ij4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgdmFsdWUgZXguICRkYXRlIG9yICRzeXMtZGF0ZSIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJwYXJhbXMudmFsdWUiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0yIHByLTAiIHN0eWxlPSJwYWRkaW5nLXRvcDogMTBweCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDogcmlnaHQ7IGN1cnNvcjogcG9pbnRlciIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3dlYmhvb2tfbWFwcGluZygncmVtb3ZlJywgaW5kZXgpIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkRlbGV0ZSBQYXJhbWV0ZXIiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgJnRpbWVzOwogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0gPGRpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICA8aDU+UmV0dXJuIFZhcmlhYmxlIDogPC9oNT4KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0icGwtMSI+e3t3ZWJob29rX3ZhcmlhYmxlfX08L2g1PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtYXV0byIgc3R5bGU9InBhZGRpbmctcmlnaHQ6IDE1cHg7Ij4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDogcmlnaHQ7IGN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAxNHB4IgogICAgICAgICAgICAgICAgICBjbGFzcz0ibXV0ZWQiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgIGhyZWY9IiN3ZWJob29rbW9kYWwiCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgIG9uX29wZW5fd2ViaG9va19tb2RhbCh3ZWJob29rX3ZhcmlhYmxlKQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJDdXN0b21pemUgV2ViaG9vayBSZXNwb25zZSIgY2xhc3M9ImZhcyBmYS1jb2ciPjwvaT4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+IC0tPgogICAgICAgICAgICAgICAgPCEtLSA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+IC0tPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBkLWZsZXggbWItMCI+CiAgICAgICAgICAgIDxoNSBzdHlsZT0id2lkdGg6IDIwJTsgcGFkZGluZzogMHB4OyBtYXJnaW4tdG9wOiA0cHgiPk5vdGlmaWNhdGlvbnM8L2g1PgogICAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgICBjbGFzcz0ic3dpdGNoIG1sLWF1dG8iCiAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6IDRweDsgbWFyZ2luLWJvdHRvbTogMHB4IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiB2LW1vZGVsPSJpc19ub3RpZmljYXRpb24iIGlkPSJub3RpZmljYXRpb25zX3JlcXVpcmVkIiAvPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzbGlkZXIgcm91bmQiIHN0eWxlPSJib3JkZXItcmFkaXVzOiA1MHB4Ij48L3NwYW4+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxwPgogICAgICAgICAgICAoRW5hYmxlIHRoaXMgdG8gc2VuZCBub3RpZmljYXRpb24gdG8gdXNlcnMuKQogICAgICAgICAgPC9wPgogICAgICAgICAgPGRpdiB2LWlmPSJpc19ub3RpZmljYXRpb24iPgogICAgICAgICAgICA8IS0tIDxociBzdHlsZT0ibWFyZ2luOiAxMHB4IDBweCIgLz4gLS0+CiAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHBiLTAgcHQtMiBtdC0zIG1iLTMiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8IS0tIDxociBzdHlsZT0ibWFyZ2luOiAxMHB4IDBweCIgLz4gLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG1iLTEiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTMiPk5vdGlmaWNhdGlvbiB0eXBlPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMyI+CiAgICAgICAgICAgICAgICAgIFZhcmlhYmxlIE5hbWUKICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMnB4OyBjb2xvcjogIzA2NDVBRDsiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im15LWF1dG8iCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIgogICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICAgICAgdGl0bGU9InRoZSB2YWx1ZSBoZXJlIHNob3VsZCBiZSB0aGUgdmFsdWUgb2YgJ1NhdmUgaXQgYXMnIG9mIGFueSBzbG90cyB1c2VkIHRvIGNhcHR1cmUgZW1haWwvc21zLiBFeGFtcGxlICRlbWFpbF9pZC4iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0zIj5DaGVjayBmb3IgdGVtcGxhdGU8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0yIj4KICAgICAgICAgICAgICAgICAgUmVzcG9uc2UgSUQncyAoT3B0aW9uYWwpCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIHAtMCBkLWZsZXggZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMyBwLTAiPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxtdWx0aXNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibm90aWZpY2F0aW9ucy5ub3RpZnlbMF0udHlwZSIKICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJub3RpZmljYXRpb25zX25vdGlmeV90eXBlX2xpc3QiCiAgICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tc2VsZWN0PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgOmNsZWFyLW9uLXNlbGVjdD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICA6cHJlc2VydmUtc2VhcmNoPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgIDphbGxvdy1lbXB0eT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VsZWN0IG5vdGlmaWNhdGlvbiB0eXBlIgogICAgICAgICAgICAgICAgICAgICAgb3Blbi1kaXJlY3Rpb249ImJvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgIDpzZWFyY2hhYmxlPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMzBweDsgcGFkZGluZzogMHB4IgogICAgICAgICAgICAgICAgICAgICAgaWQ9Im5vdGlmaWNhdGlvbnNfbm90aWZ5X3R5cGVfaWQiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwvbXVsdGlzZWxlY3Q+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMyI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPG11bHRpc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tc2VsZWN0PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibm90aWZpY2F0aW9ucy5ub3RpZnlbMF0uc2xvdCIKICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJpbnNlcnRfc2xvdF92YXJpYWJsZV9vcHRpb25zIgogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlbGVjdCBWYXJpYWJsZSIKICAgICAgICAgICAgICAgICAgICAgIDpzaG93LWxhYmVscz0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICA6Y2xlYXItb24tc2VsZWN0PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgIG9wZW4tZGlyZWN0aW9uPSJ0b3AiCiAgICAgICAgICAgICAgICAgICAgICA6bWF4LWhlaWdodD0iMTIwIgogICAgICAgICAgICAgICAgICAgICAgOnNlYXJjaGFibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICA6YWxsb3ctZW1wdHk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgOnByZXNlcnZlLXNlYXJjaD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgIEBvcGVuPSJhZGRfdG9faW5zZXJ0X3Nsb3RfdmFyaWFibGVfb3B0aW9ucyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzbG90PSJub1Jlc3VsdCI+Tm8gVmFyaWFibGUgZm91bmQuPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbXVsdGlzZWxlY3Q+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciB2YXJpYWJsZSBlLmcuJGVtYWlsX2lkIgogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibm90aWZpY2F0aW9ucy5ub3RpZnlbMF0uc2xvdCIKICAgICAgICAgICAgICAgICAgLz4gLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0zIHAtMCI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPG11bHRpc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJub3RpZmljYXRpb25zLm5vdGlmeVswXS50ZW1wbGF0ZV9uYW1lIgogICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9Im5vdGlmaWNhdGlvbnNfbm90aWZ5X3RlbXBsYXRlX2xpc3QubWFwKChuYW1lKT0+IHtyZXR1cm4gbmFtZS50ZW1wbGF0ZV9uYW1lfSkiCiAgICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tc2VsZWN0PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgOmNsZWFyLW9uLXNlbGVjdD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICA6cHJlc2VydmUtc2VhcmNoPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgIDphbGxvdy1lbXB0eT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIHRlbXBsYXRlIG5hbWUiCiAgICAgICAgICAgICAgICAgICAgICBvcGVuLWRpcmVjdGlvbj0iYm90dG9tIgogICAgICAgICAgICAgICAgICAgICAgOnNlYXJjaGFibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICA6bG9hZGluZz0iaXNfbG9hZGluZyIKICAgICAgICAgICAgICAgICAgICAgIEBzZWFyY2gtY2hhbmdlPSJzZWFyY2hfdGVtcGxhdGVfbmFtZSIKICAgICAgICAgICAgICAgICAgICAgIEBpbnB1dD0ic2V0X25vdGlmaWNhdGlvbnNfbm90aWZ5X3RlbXBsYXRlX2lkKG5vdGlmaWNhdGlvbnMubm90aWZ5WzBdLnRlbXBsYXRlX25hbWUpIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogMzBweDsgcGFkZGluZzogMHB4IgogICAgICAgICAgICAgICAgICAgICAgaWQ9Im5vdGlmaWNhdGlvbnNfbm90aWZ5X3RlbXBsYXRlX2lkIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gc2xvdD0ibm9PcHRpb25zIj48L3NwYW4+IC0tPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc2xvdD0ibm9SZXN1bHQiPk5vIFRlbXBsYXRlIGZvdW5kLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L211bHRpc2VsZWN0PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTIiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBpZD0ibm90aWZpY2F0aW9uc19yZXNwb25zZXNfaWQiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlJlc3BvbnNlIElEJ3MiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJub3RpZmljYXRpb25zLnJlc3BvbnNlcyIKICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9InRydWUiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xIHByLTAiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgZC1mbGV4IHAtMCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIHAtMCBweC1hdXRvIiBzdHlsZT0icGFkZGluZy10b3A6IDhweCAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTRweCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im11dGVkIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjbm90aWZpY2F0aW9ubW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uX29wZW5fbm90aWZpY2F0aW9uX21vZGFsKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iQ3VzdG9taXplIE5vdGlmaWNhdGlvbiIgY2xhc3M9ImZhcyBmYS1jb2ciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS0gPGhyIC8+IC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNSBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgIEFzc2lzdGFudCBSZXNwb25zZQogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgdi1mb3I9IihuZXdfcmVzcG9uc2UsIGluZGV4KSBpbiBhc3Npc3RhbnRfcmVzcG9uc2UiCiAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tZ3JvdXAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS5jb25kaXRpb24gIT0gJ3VuZmlsbGVkX3Nsb3QnICYmIChuZXdfcmVzcG9uc2UuY29uZGl0aW9uICE9ICchc3VjY2Vzc2Z1bCcgJiYgbmV3X3Jlc3BvbnNlLmNvbmRpdGlvbiAhPSAnIXVuc3VjY2Vzc2Z1bCcgKSI+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTRweCIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX2xpc3QoJ3JlbW92ZScsIGluZGV4KSIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgICB0aXRsZT0iUmVtb3ZlIFJlc3BvbnNlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBSZW1vdmUKICAgICAgICAgICAgICAgICAgPCEtLSA8aSBzdHlsZT0iZm9udC1zaXplOiAxNnB4IiBjbGFzcz0iZmEiPiYjeGYwMGQ7PC9pPiAtLT4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ3RleHQnIj4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICBUZXh0IFJlc3BvbnNlIDoge3sgbmV3X3Jlc3BvbnNlLmlkIH19CiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBwYi0yIHB0LTMgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHJlc3BvbnNlLCBudW0pIGluIG5ld19yZXNwb25zZS52YWx1ZXMiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJudW0iCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgcmVzcG9uc2UgdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im5ld19yZXNwb25zZS52YWx1ZXNbbnVtXSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9Iidhc3Npc3RhbmNlX3Jlc3BvbnNlXycrIG5ld19yZXNwb25zZS5pZCArICdfJyArIG51bSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXNvdXQ9Imluc2VydF92YXJpYWJsZV9ibG9ja19vZmYobmV3X3Jlc3BvbnNlLmlkICwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXNpbj0iaW5zZXJ0X3ZhcmlhYmxlX2Jsb2NrX29uKG5ld19yZXNwb25zZS5pZCwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJvcGFjaXR5OjAiIDppZD0iJ2luc2VydF92YXJpYWJsZV9ibG9jaycgKyBuZXdfcmVzcG9uc2UuaWQgKyAnXycgKyBudW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzZXRfYXNzaXN0YW5jZV9yZXNwb25zZV9pbmRleChuZXdfcmVzcG9uc2UuaWQsIG51bSkiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImV4YW1wbGUgZmEtc3RhY2sgZmEtMXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iaW5zZXJ0X3ZhcmlhYmxlX2J1dHRvbiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2luc2VydF92YXJpYWJsZV9tb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOjIwcHggIWltcG9ydGFudCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhcyBmYS1jaXJjbGUgZmEtc3RhY2stMngiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjojZGJlMmU4IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSInaW5zZXJ0X3ZhcmlhYmxlX2NpcmNsZV8nKyBuZXdfcmVzcG9uc2UuaWQgKyAnXycgKyBudW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhY2stMXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtb3VzZW92ZXI9ImNpcmNsZV9tb3VzZW92ZXIobmV3X3Jlc3BvbnNlLmlkLCBudW0pIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1vdXNlb3V0PSJjaXJjbGVfbW91c2VvdXQobmV3X3Jlc3BvbnNlLmlkLCBudW0pIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC1zaXplOjE0cHg7IGRpc3BsYXk6YmxvY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi59CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIHYtb246a2V5dXAuZW50ZXI9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV90ZXh0X2xpc3QoJ2FkZCcsIGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICAgICIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJtYXJnaW4tbGVmdDogMTJweDsgY29sb3I6ICMwNjQ1QUQ7IgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJteS1hdXRvIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImNoZWNrX3Nsb3RfdmFsdWVfdXNlX2luX3Jlc3BvbnNlKG5ld19yZXNwb25zZS52YWx1ZXNbbnVtXSkiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IllvdSBoYXZlIHVzZWQge30gaW4gdGhlIHJlc3BvbnNlLCB3aGljaCBpcyB1c2VkIHRvIGFjY2VzcyBzbG90IHZhbHVlLCBpLmUgaXQgd291bGQgYWRkIHRoZSB2YWx1ZSBnYXRoZXJlZCBieSBzbG90IGlmIGVuYWJsZWQgaW4gcHJldmlvdXMgb3IgY3VycmVudCBub2RlLiAoZXhhbXBsZTogRW1haWw6IHskZW1haWxfaWR9IHdvdWxkIHByaW50IEVtYWlsOiB0ZXN0QG1haWwuY29tKS4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Im5ld19yZXNwb25zZS52YWx1ZXMubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUmVtb3ZlIFRleHQgUmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIG15LWF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsgbWFyZ2luLWxlZnQ6IDEycHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVtb3ZlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICZ0aW1lczsKICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOiA2cHg7IG1hcmdpbi1ib3R0b206IDVweCI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFkZCB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKSAwJSAwJSBuby1yZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV90ZXh0X2xpc3QoJ2FkZCcsIGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2JsYWNrX3BsdXMucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlc3BvbnNlLXZhcmlhdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgPlJlc3BvbnNlIHZhcmlhdGlvbnMgYXJlIHNldCB0bwogICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPnt7IG5ld19yZXNwb25zZS52YXJpYXRpb24gfX08L3N0cm9uZwogICAgICAgICAgICAgICAgICAgICAgICA+Ljwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgU2V0IHRvCiAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNlbGVjdF9yZXNwb25zZV92YXJpYXRpb24oaW5kZXgsICdzZXF1ZW50aWFsJykiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0ibmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAnc2VxdWVudGlhbCciCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZXNwb25zZS12YXJpYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbnRpYWwKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz0ibmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAnc2VxdWVudGlhbCciCiAgICAgICAgICAgICAgICAgICAgICAgID58PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNlbGVjdF9yZXNwb25zZV92YXJpYXRpb24oaW5kZXgsICdtdWx0aWxpbmUnKSIKICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdtdWx0aWxpbmUnIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idmFyaWF0aW9uLW11bHRpbGluZSIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9IgogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3JhbmRvbScgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdtdWx0aWxpbmUnCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgPnw8L3NwYW4KICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2VsZWN0X3Jlc3BvbnNlX3ZhcmlhdGlvbihpbmRleCwgJ3JhbmRvbScpIgogICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3JhbmRvbSciCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2YXJpYXRpb24tcmFuZG9tIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICByYW5kb20KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ2ltYWdlJyI+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgICAgSW1hZ2UgUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8IS0tIDxwPkVudGVyIE5hbWUgKE9wdGlvbmFsKTwvcD4KICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIgdHlwZT0idGV4dCIgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLmltYWdlX25hbWUiPiAtLT4KICAgICAgICAgICAgICAgICAgPCEtLSA8cCBjbGFzcz0ibWItMCI+SW1hZ2Ugc291cmNlIDo8L3A+IC0tPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTMgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQWRkIEltYWdlIHVybCIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdfcmVzcG9uc2Uuc291cmNlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iY2hlY2tfaW1hZ2VfdXJsKG5ld19yZXNwb25zZS5zb3VyY2UpID09IGZhbHNlICYmIEJvb2xlYW4obmV3X3Jlc3BvbnNlLnNvdXJjZSkiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiByZWQgIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA4cHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBQbGVhc2UgZW50ZXIgYSB2YWxpZCBpbWFnZSBVUkwgaW4gcG5nIG9yIGpwZyBmb3JtYXQgb25seS4KICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICd2aWRlbyciPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciPgogICAgICAgICAgICAgICAgICAgIFZpZGVvIFJlc3BvbnNlIDoge3sgbmV3X3Jlc3BvbnNlLmlkIH19CiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkFkZCBWaWRlbyB1cmwgKEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSBlbWJlZCBsaW5rLikiCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJuZXdfcmVzcG9uc2Uuc291cmNlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iY2hlY2tfdmlkZW9fdXJsKG5ld19yZXNwb25zZS5zb3VyY2UpID09PSBmYWxzZSAmJiBCb29sZWFuKG5ld19yZXNwb25zZS5zb3VyY2UpIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmVkICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogOHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgUGxlYXNlIGVudGVyIGEgdmFsaWQgdmlkZW8gdXJsLgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ2Nob2ljZXMnIj4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICBDaG9pY2UgUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8IS0tIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciByZXNwb25zZSB0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlIgogICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im5ld19yZXNwb25zZS50aXRsZSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4gLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMiBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIocmVzcG9uc2UsIG51bSkgaW4gbmV3X3Jlc3BvbnNlLmNob2ljZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0ibnVtIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTMgbXQtMyBtYi0zIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im10LTAgY2hvaWNlLWxhYmVsIiBzdHlsZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPlRpdGxlOjwvbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IGZsb2F0OiByaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSBtbC1hdXRvIG1yLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUmVtb3ZlIENob2ljZSBSZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Im5ld19yZXNwb25zZS5jaG9pY2VzLmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX2Nob2ljZV9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZW1vdmUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICZ0aW1lczs8L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJyZXNwb25zZS50aXRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9InRpdGxlIG9mIHRoZSBidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUgIWltcG9ydGFudDtwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0yIG1iLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjaG9pY2UtbGFiZWwiIHN0eWxlPSIiPlZhbHVlOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJyZXNwb25zZS5wYXlsb2FkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idmFsdWUgdG8gYmUgcGFzc2VkIHdoZW4gY2xpY2tlZCBvbiBidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUgIWltcG9ydGFudDsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi10b3A6IDZweDsgbWFyZ2luLWJvdHRvbTogNXB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgQWRkIGNob2ljZQogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKSAwJSAwJSBuby1yZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV9jaG9pY2VfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2JsYWNrX3BsdXMucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGhyIHN0eWxlPSJtYXJnaW46IDEwcHggMHB4IiAvPgogICAgICAgICAgICAgICAgPCEtLSA8dnVlLWVkaXRvcgogICAgICAgICAgICAgICAgICBXSElMRSBTQVZJTkcgREVUQUlMUyBBREQgVkFMSURBVElPTiBBREROT0RFKCkKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhc3Npc3RhbnRfcmVzcG9uc2VbaW5kZXhdIiAKICAgICAgICAgICAgICAgICAgICA6ZWRpdG9yVG9vbGJhcj0iY3VzdG9tVG9vbGJhciIKICAgICAgICAgICAgICAgICAgPjwvdnVlLWVkaXRvcj4gLS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+U2VsZWN0IGEgcmVzcG9uc2UgdHlwZSBmaXJzdCA6PC9wPgogICAgICAgICAgICAgIDxzZWxlY3QKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgdi1tb2RlbD0ic2VsZWN0ZWRfcmVzcG9uc2VfdHlwZSIKICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMHB4OwogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1cHg7CiAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NvdXJjZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgICAgIHYtZm9yPSIob3B0aW9uLCBpbmRleCkgaW4gYXNzaXN0YW50X3Jlc3BvbnNlX3R5cGUiCiAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICA6dmFsdWU9Im9wdGlvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAge3sgb3B0aW9uIH19CiAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8IS0tIDwvZGl2PiAtLT4KICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9ImQtZmxleCI+IC0tPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICAgIEFkZCByZXNwb25zZQogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IC0xNHB4OwogICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKQogICAgICAgICAgICAgICAgICAgIDAlIDAlIG5vLXJlcGVhdCBwYWRkaW5nLWJveDsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV9saXN0KCdhZGQnKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PlRoZW4gYXNzaXN0YW50IHNob3VsZDwvaDU+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgIChDaG9vc2Ugd2hldGhlciB5b3Ugd2FudCB5b3VyIEFzc2lzdGFudCB0byBjb250aW51ZSwgb3Igd2FpdCBmb3IKICAgICAgICAgICAgICB0aGUgY3VzdG9tZXIgdG8gcmVzcG9uZC4pCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhdmVfdGhlbl9hc3Npc3RhbnRfc2hvdWxkIgogICAgICAgICAgICAgICAgQGNsaWNrPSJzZXRfbmV4dF9zdGVwKCkiCiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEyMHB4OyBoZWlnaHQ6IDMwcHg7IHBhZGRpbmc6IDBweCIKICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc291cmNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiIgZGlzYWJsZWQgc2VsZWN0ZWQ+U2VsZWN0IGEgT3B0aW9uPC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgICAgIHYtZm9yPSIob3B0aW9uLCBpbmRleCkgaW4gdGhlbl9hc3Npc3RhbnRfc2hvdWxkIgogICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgOnZhbHVlPSJvcHRpb24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIHt7IG9wdGlvbiB9fQogICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICB2LWlmPSJzYXZlX3RoZW5fYXNzaXN0YW50X3Nob3VsZCA9PSAnanVtcF90byciCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJqdW1wX3RvX25vZGVfaWQiCiAgICAgICAgICAgICAgICBAY2xpY2s9InNldF9uZXh0X3N0ZXAoKSIKICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgd2lkdGg6IDEyMHB4OwogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwcHg7CiAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NvdXJjZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiIGRpc2FibGVkIHNlbGVjdGVkPlNlbGVjdCBhIE5vZGU8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcHRpb24sIGluZGV4KSBpbiB1cGRhdGVkX25vZGVfbGlzdCIKICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgIDp2YWx1ZT0ib3B0aW9uLmlkIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICB7eyBvcHRpb24ubmFtZSB9fQogICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1hY3QgbW9kYWwtZm9vdGVyIj4KICAgICAgICAgIDwhLS0gVGhlc2UgY29uZGl0aW9ucyBmb3Igc2F2aW5nIG5vZGUgZGVmaW5lcyB0aGF0IHdlIGFyZSBhZGRpbmcgY2hpbGQgbm9kZS9lZGl0aW5nIGEgbm9kZSBPUiBhZGRpbmcgYSBuZXcgcm9vdCBub2RlIC0tPgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICB2LWlmPSJpc19zaG93X2VkaXQiCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgQGNsaWNrPSJlZGl0Tm9kZSIKICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgID4KICAgICAgICAgICAgU2F2ZSBDaGFuZ2VzCiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gdi1lbHNlIHR5cGU9ImJ1dHRvbiIgQGNsaWNrPSJhZGROb2RlIiBjbGFzcz0iZGFya2JsdWUtYnRuIj4KICAgICAgICAgICAgU2F2ZQogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdgogICAgY2xhc3M9Im1vZGFsIGZhZGUiCiAgICBpZD0ic2xvdG1vZGFsIgogICAgdGFiaW5kZXg9Ii0xIgogICAgcm9sZT0iZGlhbG9nIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJzbG90bW9kYWwiCiAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIKICAgIGRhdGEta2V5Ym9hcmQ9ImZhbHNlIgogID4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtbGciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDxoNSBzdHlsZT0iZm9udC1zdHlsZTogcmVndWxhciIgY2xhc3M9Im1vZGFsLXRpdGxlIj4KICAgICAgICAgICAgQ29uZmlndXJlIHNsb3Qge3sgZWRpdF9zbG90X2luZGV4IH19CiAgICAgICAgICA8L2g1PgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgIEBjbGljaz0ib25fY2xvc2Vfc2xvdHNfbW9kYWwoKSIKICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgID4KICAgICAgICAgICAgw5cKICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNSBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgIEFzc2lzdGFudCBSZXNwb25zZQogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgdi1mb3I9IihuZXdfcmVzcG9uc2UsIGluZGV4KSBpbiB1bmZpbGxlZF9zbG90X2Fzc2lzdGFudF9yZXNwb25zZSIKICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTRweCIKICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgIHJlbW92ZV9zbG90X3RvX2Fzc2lzdGFudF9yZXNwb25zZSgKICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLnJlY29nbml6ZXMsCiAgICAgICAgICAgICAgICAgICAgJ3Nsb3Rtb2RhbCcKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBSZXNwb25zZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBSZW1vdmUKICAgICAgICAgICAgICAgIDwhLS0gPGkgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIgY2xhc3M9ImZhIj4mI3hmMDBkOzwvaT4gLS0+CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ3RleHQnIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgIFRleHQgUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcGItMiBwdC0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHJlc3BvbnNlLCBudW0pIGluIG5ld19yZXNwb25zZS52YWx1ZXMiCiAgICAgICAgICAgICAgICAgICAgOmtleT0ibnVtIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIHJlc3BvbnNlIHRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdfcmVzcG9uc2UudmFsdWVzW251bV0iCiAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ2Fzc2lzdGFuY2VfcmVzcG9uc2VfJysgbmV3X3Jlc3BvbnNlLmlkICsgJ18nICsgbnVtIgogICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXNvdXQ9Imluc2VydF92YXJpYWJsZV9ibG9ja19vZmYobmV3X3Jlc3BvbnNlLmlkICwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3VzaW49Imluc2VydF92YXJpYWJsZV9ibG9ja19vbihuZXdfcmVzcG9uc2UuaWQsIG51bSkiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtb246a2V5dXAuZW50ZXI9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9Im9wYWNpdHk6MCIgOmlkPSInaW5zZXJ0X3ZhcmlhYmxlX2Jsb2NrJyArIG5ld19yZXNwb25zZS5pZCArICdfJyArIG51bSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNldF9hc3Npc3RhbmNlX3Jlc3BvbnNlX2luZGV4KG5ld19yZXNwb25zZS5pZCwgbnVtKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZXhhbXBsZSBmYS1zdGFjayBmYS0xeCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJpbnNlcnRfdmFyaWFibGVfYnV0dG9uIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjaW5zZXJ0X3ZhcmlhYmxlX21vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6MjBweCAhaW1wb3J0YW50IgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmFzIGZhLWNpcmNsZSBmYS1zdGFjay0yeCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiNkYmUyZTgiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9IidpbnNlcnRfdmFyaWFibGVfY2lyY2xlXycrIG5ld19yZXNwb25zZS5pZCArICdfJyArIG51bSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFjay0xeCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOndoaXRlOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1vdXNlb3Zlcj0iY2lyY2xlX21vdXNlb3ZlcihuZXdfcmVzcG9uc2UuaWQsIG51bSkiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbW91c2VvdXQ9ImNpcmNsZV9tb3VzZW91dChuZXdfcmVzcG9uc2UuaWQsIG51bSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXNpemU6MTRweDsgZGlzcGxheTpibG9jazsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLn0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDEycHg7IGNvbG9yOiAjMDY0NUFEOyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im15LWF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImNoZWNrX3Nsb3RfdmFsdWVfdXNlX2luX3Jlc3BvbnNlKG5ld19yZXNwb25zZS52YWx1ZXNbbnVtXSkiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IDE2cHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IllvdSBoYXZlIHVzZWQge30gaW4gdGhlIHJlc3BvbnNlLCB3aGljaCBpcyB1c2VkIHRvIGFjY2VzcyBzbG90IHZhbHVlLCBpLmUgaXQgd291bGQgYWRkIHRoZSB2YWx1ZSBnYXRoZXJlZCBieSBzbG90IGlmIGVuYWJsZWQgaW4gcHJldmlvdXMgb3IgY3VycmVudCBub2RlLiAoZXhhbXBsZTogRW1haWw6IHskZW1haWxfaWR9IHdvdWxkIHByaW50IEVtYWlsOiB0ZXN0QG1haWwuY29tKS4iCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0ibmV3X3Jlc3BvbnNlLnZhbHVlcy5sZW5ndGggPiAxIgogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUmVtb3ZlIFRleHQgUmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSBteS1hdXRvIgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyOyBtYXJnaW4tbGVmdDogMTJweCIKICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX3RleHRfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZW1vdmUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICZ0aW1lczsKICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi10b3A6IDZweDsgbWFyZ2luLWJvdHRvbTogNXB4Ij4KICAgICAgICAgICAgICAgICAgICAgIEFkZCB2YWx1ZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudAogICAgICAgICAgICAgICAgICAgICAgICAgIHVybCgnQHBvcnRhbC9hc3NldHMvaW1nL3BsdXMucG5nJykgMCUgMCUgbm8tcmVwZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX3RleHRfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkJywKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2JsYWNrX3BsdXMucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlc3BvbnNlLXZhcmlhdGlvbnMiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICA+UmVzcG9uc2UgdmFyaWF0aW9ucyBhcmUgc2V0IHRvCiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPnt7IG5ld19yZXNwb25zZS52YXJpYXRpb24gfX08L3N0cm9uZwogICAgICAgICAgICAgICAgICAgICAgPi48L3NwYW4KICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgU2V0IHRvCiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdF9yZXNwb25zZV92YXJpYXRpb24oCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICdzZXF1ZW50aWFsJwogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3NlcXVlbnRpYWwnIgogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZXNwb25zZS12YXJpYXRpb24iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgc2VxdWVudGlhbAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3NlcXVlbnRpYWwnIj4KICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdF9yZXNwb25zZV92YXJpYXRpb24oCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICdtdWx0aWxpbmUnCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0ibmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAnbXVsdGlsaW5lJyIKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idmFyaWF0aW9uLW11bHRpbGluZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBtdWx0aWxpbmUKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3JhbmRvbScgJiYKICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAnbXVsdGlsaW5lJwogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdF9yZXNwb25zZV92YXJpYXRpb24obmV3X3Jlc3BvbnNlLmlkLCAncmFuZG9tJykKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0ibmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAncmFuZG9tJyIKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idmFyaWF0aW9uLXJhbmRvbSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICByYW5kb20KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiB2LWlmPSJuZXdfcmVzcG9uc2UudHlwZSA9PSAnaW1hZ2UnIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+SW1hZ2UgUmVzcG9uc2UgOjwvcD4KICAgICAgICAgICAgICAgIDwhLS0gPHA+RW50ZXIgTmFtZSAoT3B0aW9uYWwpPC9wPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIgdHlwZT0idGV4dCIgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLmltYWdlX25hbWUiPiAtLT4KICAgICAgICAgICAgICAgIDwhLS0gPHAgY2xhc3M9Im1iLTAiPkltYWdlIHNvdXJjZSA6PC9wPiAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMyBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQWRkIEltYWdlIHVybCIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im5ld19yZXNwb25zZS5zb3VyY2UiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJjaGVja19pbWFnZV91cmwobmV3X3Jlc3BvbnNlLnNvdXJjZSkgPT0gZmFsc2UgJiYgQm9vbGVhbihuZXdfcmVzcG9uc2Uuc291cmNlKSIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmVkICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA4cHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBQbGVhc2UgZW50ZXIgYSB2YWxpZCBpbWFnZSBVUkwgaW4gcG5nIG9yIGpwZyBmb3JtYXQgb25seS4KICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiB2LWlmPSJuZXdfcmVzcG9uc2UudHlwZSA9PSAndmlkZW8nIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgIFZpZGVvIFJlc3BvbnNlIDoge3sgbmV3X3Jlc3BvbnNlLmlkIH19CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTMgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkFkZCBWaWRlbyB1cmwgKEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSBlbWJlZCBsaW5rLikiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09Im5ld19yZXNwb25zZS5zb3VyY2UiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJjaGVja192aWRlb191cmwobmV3X3Jlc3BvbnNlLnNvdXJjZSkgPT09IGZhbHNlICYmIEJvb2xlYW4obmV3X3Jlc3BvbnNlLnNvdXJjZSkiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHJlZCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogOHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgUGxlYXNlIGVudGVyIGEgdmFsaWQgdmlkZW8gdXJsLgogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICdjaG9pY2VzJyI+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciPgogICAgICAgICAgICAgICAgICBDaG9pY2UgUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwhLS0gPGRpdj4KICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIHJlc3BvbnNlIHRleHQiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlIgogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLnRpdGxlIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9kaXY+IC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0yIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBibG9jazsgbWFyZ2luLWJvdHRvbTogMXJlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIocmVzcG9uc2UsIG51bSkgaW4gbmV3X3Jlc3BvbnNlLmNob2ljZXMiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9Im51bSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMyBtdC0zIG1iLTMiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibXQtMCBjaG9pY2UtbGFiZWwiIHN0eWxlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPlRpdGxlOjwvbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IGZsb2F0OiByaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UgbWwtYXV0byBtci0wIgogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJSZW1vdmUgQ2hvaWNlIFJlc3BvbnNlIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Im5ld19yZXNwb25zZS5jaG9pY2VzLmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfY2hvaWNlX2xpc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZW1vdmUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICZ0aW1lczs8L3NwYW4KICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0icmVzcG9uc2UudGl0bGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9InRpdGxlIG9mIHRoZSBidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlICFpbXBvcnRhbnQ7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMiBtYi0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNob2ljZS1sYWJlbCIgc3R5bGU9IiI+VmFsdWU6PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJyZXNwb25zZS5wYXlsb2FkIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJ2YWx1ZSB0byBiZSBwYXNzZWQgd2hlbiBjbGlja2VkIG9uIGJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUgIWltcG9ydGFudDsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi10b3A6IDZweDsgbWFyZ2luLWJvdHRvbTogNXB4Ij4KICAgICAgICAgICAgICAgICAgICAgIEFkZCBjaG9pY2UKICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwoJ0Bwb3J0YWwvYXNzZXRzL2ltZy9wbHVzLnBuZycpIDAlIDAlIG5vLXJlcGVhdAogICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV9jaG9pY2VfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkJywKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2JsYWNrX3BsdXMucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+CiAgICAgICAgICAgICAgPCEtLSA8dnVlLWVkaXRvcgogICAgICAgICAgICAgICAgV0hJTEUgU0FWSU5HIERFVEFJTFMgQUREIFZBTElEQVRJT04gQURETk9ERSgpCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFzc2lzdGFudF9yZXNwb25zZVtpbmRleF0iCiAgICAgICAgICAgICAgICAgIDplZGl0b3JUb29sYmFyPSJjdXN0b21Ub29sYmFyIgogICAgICAgICAgICAgICAgPjwvdnVlLWVkaXRvcj4gLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+U2VsZWN0IGEgcmVzcG9uc2UgdHlwZSBmaXJzdCA6PC9wPgogICAgICAgICAgICAgIDxzZWxlY3QKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgdi1tb2RlbD0ic2VsZWN0ZWRfcmVzcG9uc2VfdHlwZSIKICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMHB4OwogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1cHg7CiAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NvdXJjZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgICAgIHYtZm9yPSIob3B0aW9uLCBpbmRleCkgaW4gYXNzaXN0YW50X3Jlc3BvbnNlX3R5cGUiCiAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICA6dmFsdWU9Im9wdGlvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAge3sgb3B0aW9uIH19CiAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8IS0tIDwvZGl2PiAtLT4KICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9ImQtZmxleCI+IC0tPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICAgIEFkZCByZXNwb25zZQogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IC0xNHB4OwogICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKQogICAgICAgICAgICAgICAgICAgIDAlIDAlIG5vLXJlcGVhdCBwYWRkaW5nLWJveDsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgIGFkZF9zbG90X3RvX2Fzc2lzdGFudF9yZXNwb25zZSgKICAgICAgICAgICAgICAgICAgICAnQWRkYnRuJywKICAgICAgICAgICAgICAgICAgICAndW51c2VkJywKICAgICAgICAgICAgICAgICAgICBlZGl0X3Nsb3RfY2hlY2tfZm9yLAogICAgICAgICAgICAgICAgICAgIGVkaXRfc2xvdF9zbG90X3ZhcmlhYmxlLAogICAgICAgICAgICAgICAgICAgIG51bGwsCiAgICAgICAgICAgICAgICAgICAgJ3VuZmlsbGVkX3Nsb3QnCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IHYtaWY9ImlzX3ZhbGlkYXRpb25fZW50aXR5IiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNSBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgIEFzc2lzdGFudCBWYWxpZGF0aW9uIFJlc3BvbnNlKE9wdGlvbmFsKQogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgdi1mb3I9IihuZXdfcmVzcG9uc2UsIGluZGV4KSBpbiB2YWxpZGF0aW9uX3Nsb3RfYXNzaXN0YW50X3Jlc3BvbnNlIgogICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDogcmlnaHQ7IGN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAxNHB4IgogICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgcmVtb3ZlX3Nsb3RfdG9fYXNzaXN0YW50X3Jlc3BvbnNlKAogICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UucmVjb2duaXplcywKICAgICAgICAgICAgICAgICAgICAnc2xvdG1vZGFsJwogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgICB0aXRsZT0iUmVtb3ZlIFJlc3BvbnNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIFJlbW92ZQogICAgICAgICAgICAgICAgPCEtLSA8aSBzdHlsZT0iZm9udC1zaXplOiAxNnB4IiBjbGFzcz0iZmEiPiYjeGYwMGQ7PC9pPiAtLT4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPGRpdiB2LWlmPSJuZXdfcmVzcG9uc2UudHlwZSA9PSAndGV4dCciPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgVGV4dCBSZXNwb25zZSA6IHt7IG5ld19yZXNwb25zZS5pZCB9fQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBwYi0yIHB0LTMgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIHYtZm9yPSIocmVzcG9uc2UsIG51bSkgaW4gbmV3X3Jlc3BvbnNlLnZhbHVlcyIKICAgICAgICAgICAgICAgICAgICA6a2V5PSJudW0iCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tZ3JvdXAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgcmVzcG9uc2UgdGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im5ld19yZXNwb25zZS52YWx1ZXNbbnVtXSIKICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSInYXNzaXN0YW5jZV9yZXNwb25zZV8nKyBuZXdfcmVzcG9uc2UuaWQgKyAnXycgKyBudW0iCiAgICAgICAgICAgICAgICAgICAgICAgIEBmb2N1c291dD0iaW5zZXJ0X3ZhcmlhYmxlX2Jsb2NrX29mZihuZXdfcmVzcG9uc2UuaWQgLCBudW0pIgogICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXNpbj0iaW5zZXJ0X3ZhcmlhYmxlX2Jsb2NrX29uKG5ld19yZXNwb25zZS5pZCwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgdi1vbjprZXl1cC5lbnRlcj0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV90ZXh0X2xpc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZAogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0ib3BhY2l0eTowIiA6aWQ9IidpbnNlcnRfdmFyaWFibGVfYmxvY2snICsgbmV3X3Jlc3BvbnNlLmlkICsgJ18nICsgbnVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2V0X2Fzc2lzdGFuY2VfcmVzcG9uc2VfaW5kZXgobmV3X3Jlc3BvbnNlLmlkLCBudW0pIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJleGFtcGxlIGZhLXN0YWNrIGZhLTF4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9Imluc2VydF92YXJpYWJsZV9idXR0b24iIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNpbnNlcnRfdmFyaWFibGVfbW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXRvcDoyMHB4ICFpbXBvcnRhbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYXMgZmEtY2lyY2xlIGZhLXN0YWNrLTJ4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6I2RiZTJlOCIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ2luc2VydF92YXJpYWJsZV9jaXJjbGVfJysgbmV3X3Jlc3BvbnNlLmlkICsgJ18nICsgbnVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YWNrLTF4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6d2hpdGU7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbW91c2VvdmVyPSJjaXJjbGVfbW91c2VvdmVyKG5ld19yZXNwb25zZS5pZCwgbnVtKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtb3VzZW91dD0iY2lyY2xlX21vdXNlb3V0KG5ld19yZXNwb25zZS5pZCwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZToxNHB4OyBkaXNwbGF5OmJsb2NrOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ufQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJtYXJnaW4tbGVmdDogMTJweDsgY29sb3I6ICMwNjQ1QUQ7IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXktYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iY2hlY2tfc2xvdF92YWx1ZV91c2VfaW5fcmVzcG9uc2UobmV3X3Jlc3BvbnNlLnZhbHVlc1tudW1dKSIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtaW5mby1jaXJjbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iWW91IGhhdmUgdXNlZCB7fSBpbiB0aGUgcmVzcG9uc2UsIHdoaWNoIGlzIHVzZWQgdG8gYWNjZXNzIHNsb3QgdmFsdWUsIGkuZSBpdCB3b3VsZCBhZGQgdGhlIHZhbHVlIGdhdGhlcmVkIGJ5IHNsb3QgaWYgZW5hYmxlZCBpbiBwcmV2aW91cyBvciBjdXJyZW50IG5vZGUuIChleGFtcGxlOiBFbWFpbDogeyRlbWFpbF9pZH0gd291bGQgcHJpbnQgRW1haWw6IHRlc3RAbWFpbC5jb20pLiIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJuZXdfcmVzcG9uc2UudmFsdWVzLmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJSZW1vdmUgVGV4dCBSZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIG15LWF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IG1hcmdpbi1sZWZ0OiAxMnB4IgogICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbW92ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgJnRpbWVzOwogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgICAgICAgICAgQWRkIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKSAwJSAwJSBuby1yZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJveDsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICdhZGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVzcG9uc2UtdmFyaWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgID5SZXNwb25zZSB2YXJpYXRpb25zIGFyZSBzZXQgdG8KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+e3sgbmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiB9fTwvc3Ryb25nCiAgICAgICAgICAgICAgICAgICAgICA+Ljwvc3BhbgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBTZXQgdG8KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X3Jlc3BvbnNlX3ZhcmlhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlcXVlbnRpYWwnCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0ibmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAnc2VxdWVudGlhbCciCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlc3BvbnNlLXZhcmlhdGlvbiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW50aWFsCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz0ibmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAnc2VxdWVudGlhbCciPgogICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X3Jlc3BvbnNlX3ZhcmlhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpbGluZScKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdtdWx0aWxpbmUnIgogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2YXJpYXRpb24tbXVsdGlsaW5lIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIG11bHRpbGluZQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSIKICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAncmFuZG9tJyAmJgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdtdWx0aWxpbmUnCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X3Jlc3BvbnNlX3ZhcmlhdGlvbihuZXdfcmVzcG9uc2UuaWQsICdyYW5kb20nKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdyYW5kb20nIgogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2YXJpYXRpb24tcmFuZG9tIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICdpbWFnZSciPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj5JbWFnZSBSZXNwb25zZSA6PC9wPgogICAgICAgICAgICAgICAgPCEtLSA8cD5FbnRlciBOYW1lIChPcHRpb25hbCk8L3A+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIiB0eXBlPSJ0ZXh0IiB2LW1vZGVsPSJuZXdfcmVzcG9uc2UuaW1hZ2VfbmFtZSI+IC0tPgogICAgICAgICAgICAgICAgPCEtLSA8cCBjbGFzcz0ibWItMCI+SW1hZ2Ugc291cmNlIDo8L3A+IC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJBZGQgSW1hZ2UgdXJsIgogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLnNvdXJjZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImNoZWNrX2ltYWdlX3VybChuZXdfcmVzcG9uc2Uuc291cmNlKSA9PSBmYWxzZSAmJiBCb29sZWFuKG5ld19yZXNwb25zZS5zb3VyY2UpIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiByZWQgIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDhweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFBsZWFzZSBlbnRlciBhIHZhbGlkIGltYWdlIFVSTCBpbiBwbmcgb3IganBnIGZvcm1hdCBvbmx5LgogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICd2aWRlbyciPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgVmlkZW8gUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMyBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQWRkIFZpZGVvIHVybCAoSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIGVtYmVkIGxpbmsuKSIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0ibmV3X3Jlc3BvbnNlLnNvdXJjZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImNoZWNrX3ZpZGVvX3VybChuZXdfcmVzcG9uc2Uuc291cmNlKSA9PT0gZmFsc2UgJiYgQm9vbGVhbihuZXdfcmVzcG9uc2Uuc291cmNlKSIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmVkICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA4cHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBQbGVhc2UgZW50ZXIgYSB2YWxpZCB2aWRlbyB1cmwuCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ2Nob2ljZXMnIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgIENob2ljZSBSZXNwb25zZSA6IHt7IG5ld19yZXNwb25zZS5pZCB9fQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPCEtLSA8ZGl2PgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgcmVzcG9uc2UgdGV4dCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdfcmVzcG9uc2UudGl0bGUiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4gLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTIgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihyZXNwb25zZSwgbnVtKSBpbiBuZXdfcmVzcG9uc2UuY2hvaWNlcyIKICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0ibnVtIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0zIG10LTMgbWItMyIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IiIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtdC0wIGNob2ljZS1sYWJlbCIgc3R5bGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+VGl0bGU6PC9sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsgZmxvYXQ6IHJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSBtbC1hdXRvIG1yLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBDaG9pY2UgUmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0ibmV3X3Jlc3BvbnNlLmNob2ljZXMubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV9jaG9pY2VfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbW92ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJnRpbWVzOzwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJyZXNwb25zZS50aXRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idGl0bGUgb2YgdGhlIGJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUgIWltcG9ydGFudDsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0yIG1iLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY2hvaWNlLWxhYmVsIiBzdHlsZT0iIj5WYWx1ZTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09InJlc3BvbnNlLnBheWxvYWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9InZhbHVlIHRvIGJlIHBhc3NlZCB3aGVuIGNsaWNrZWQgb24gYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJSAhaW1wb3J0YW50OyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgICAgICAgICAgQWRkIGNob2ljZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudAogICAgICAgICAgICAgICAgICAgICAgICAgIHVybCgnQHBvcnRhbC9hc3NldHMvaW1nL3BsdXMucG5nJykgMCUgMCUgbm8tcmVwZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX2Nob2ljZV9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICdhZGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxociBzdHlsZT0ibWFyZ2luOiAxMHB4IDBweCIgLz4KICAgICAgICAgICAgICA8IS0tIDx2dWUtZWRpdG9yCiAgICAgICAgICAgICAgICBXSElMRSBTQVZJTkcgREVUQUlMUyBBREQgVkFMSURBVElPTiBBREROT0RFKCkKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYXNzaXN0YW50X3Jlc3BvbnNlW2luZGV4XSIKICAgICAgICAgICAgICAgICAgOmVkaXRvclRvb2xiYXI9ImN1c3RvbVRvb2xiYXIiCiAgICAgICAgICAgICAgICA+PC92dWUtZWRpdG9yPiAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj5TZWxlY3QgYSByZXNwb25zZSB0eXBlIGZpcnN0IDo8L3A+CiAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJzZWxlY3RlZF9yZXNwb25zZV90eXBlIgogICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICB3aWR0aDogMTAwcHg7CiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDsKICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7CiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc291cmNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcHRpb24sIGluZGV4KSBpbiBhc3Npc3RhbnRfcmVzcG9uc2VfdHlwZSIKICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgIDp2YWx1ZT0ib3B0aW9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICB7eyBvcHRpb24gfX0KICAgICAgICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwhLS0gPC9kaXY+IC0tPgogICAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz0iZC1mbGV4Ij4gLS0+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgQWRkIHJlc3BvbnNlCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLTE0cHg7CiAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCB1cmwoJ0Bwb3J0YWwvYXNzZXRzL2ltZy9wbHVzLnBuZycpCiAgICAgICAgICAgICAgICAgICAgMCUgMCUgbm8tcmVwZWF0IHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgYWRkX3Nsb3RfdG9fYXNzaXN0YW50X3Jlc3BvbnNlKAogICAgICAgICAgICAgICAgICAgICdBZGRidG4nLAogICAgICAgICAgICAgICAgICAgICd1bnVzZWQnLAogICAgICAgICAgICAgICAgICAgIGVkaXRfc2xvdF9jaGVja19mb3IsCiAgICAgICAgICAgICAgICAgICAgZWRpdF9zbG90X3Nsb3RfdmFyaWFibGUsCiAgICAgICAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICAgICAgICAndmFsaWRhdGlvbl9yZXNwb25zZScKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2JsYWNrX3BsdXMucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICA8YSBocmVmPSIjIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBjbGFzcz0iYnRuIj5DbG9zZTwvYT4KICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPlNhdmUgY2hhbmdlczwvYT4KICAgICAgICA8L2Rpdj4gLS0+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdgogICAgY2xhc3M9Im1vZGFsIGZhZGUiCiAgICBpZD0id2ViaG9va21vZGFsIgogICAgdGFiaW5kZXg9Ii0xIgogICAgcm9sZT0iZGlhbG9nIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJ3ZWJob29rbW9kYWwiCiAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIKICAgIGRhdGEta2V5Ym9hcmQ9ImZhbHNlIgogID4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtbGciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDxoNSBzdHlsZT0iZm9udC1zdHlsZTogcmVndWxhciIgY2xhc3M9Im1vZGFsLXRpdGxlIj4KICAgICAgICAgICAgQ29uZmlndXJlIFdlYmhvb2sgUmVzcG9uc2UgZm9yIDoge3sgd2ViaG9va192YXJpYWJsZSB9fQogICAgICAgICAgPC9oNT4KICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICBAY2xpY2s9Im9uX2Nsb3NlX3dlYmhvb2tfbW9kYWwoKSIKICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgID4KICAgICAgICAgICAgw5cKICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNSBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgIEFzc2lzdGFudCBSZXNwb25zZQogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgdi1mb3I9IihuZXdfcmVzcG9uc2UsIGluZGV4KSBpbiB3ZWJob29rX2Fzc2lzdGFudF9yZXNwb25zZSIKICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTRweCIKICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgIHdlYmhvb2tfdG9fYXNzaXN0YW50X3Jlc3BvbnNlKAogICAgICAgICAgICAgICAgICAgICdyZW1vdmUnLAogICAgICAgICAgICAgICAgICAgIHdlYmhvb2tfdmFyaWFibGUsCiAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgICAgICAgIHRpdGxlPSJSZW1vdmUgUmVzcG9uc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgUmVtb3ZlCiAgICAgICAgICAgICAgICA8IS0tIDxpIHN0eWxlPSJmb250LXNpemU6IDE2cHgiIGNsYXNzPSJmYSI+JiN4ZjAwZDs8L2k+IC0tPgogICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICd0ZXh0JyI+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciPgogICAgICAgICAgICAgICAgICBUZXh0IFJlc3BvbnNlIDoge3sgbmV3X3Jlc3BvbnNlLmlkIH19CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHBiLTIgcHQtMyBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihyZXNwb25zZSwgbnVtKSBpbiBuZXdfcmVzcG9uc2UudmFsdWVzIgogICAgICAgICAgICAgICAgICAgIDprZXk9Im51bSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciByZXNwb25zZSB0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLnZhbHVlc1tudW1dIgogICAgICAgICAgICAgICAgICAgICAgICA6aWQ9Iidhc3Npc3RhbmNlX3Jlc3BvbnNlXycrIG5ld19yZXNwb25zZS5pZCArICdfJyArIG51bSIKICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3Vzb3V0PSJpbnNlcnRfdmFyaWFibGVfYmxvY2tfb2ZmKG5ld19yZXNwb25zZS5pZCAsIG51bSkiCiAgICAgICAgICAgICAgICAgICAgICAgIEBmb2N1c2luPSJpbnNlcnRfdmFyaWFibGVfYmxvY2tfb24obmV3X3Jlc3BvbnNlLmlkLCBudW0pIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9Im9wYWNpdHk6MCIgOmlkPSInaW5zZXJ0X3ZhcmlhYmxlX2Jsb2NrJyArIG5ld19yZXNwb25zZS5pZCArICdfJyArIG51bSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIAogICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2V0X2Fzc2lzdGFuY2VfcmVzcG9uc2VfaW5kZXgobmV3X3Jlc3BvbnNlLmlkLCBudW0pIiAKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZXhhbXBsZSBmYS1zdGFjayBmYS0xeCIKICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iaW5zZXJ0X3ZhcmlhYmxlX2J1dHRvbiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2luc2VydF92YXJpYWJsZV9tb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXRvcDoyMHB4ICFpbXBvcnRhbnQiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYXMgZmEtY2lyY2xlIGZhLXN0YWNrLTJ4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiNkYmUyZTgiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSInaW5zZXJ0X3ZhcmlhYmxlX2NpcmNsZV8nKyBuZXdfcmVzcG9uc2UuaWQgKyAnXycgKyBudW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YWNrLTF4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOndoaXRlOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtb3VzZW92ZXI9ImNpcmNsZV9tb3VzZW92ZXIobmV3X3Jlc3BvbnNlLmlkLCBudW0pIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtb3VzZW91dD0iY2lyY2xlX21vdXNlb3V0KG5ld19yZXNwb25zZS5pZCwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC1zaXplOjE0cHg7IGRpc3BsYXk6YmxvY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ufQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8IS0tIHYtb246a2V5dXAuZW50ZXI9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZCcsbmV3X3Jlc3BvbnNlLmlkKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLT4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJtYXJnaW4tbGVmdDogMTJweDsgY29sb3I6ICMwNjQ1QUQ7IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXktYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iY2hlY2tfc2xvdF92YWx1ZV91c2VfaW5fcmVzcG9uc2UobmV3X3Jlc3BvbnNlLnZhbHVlc1tudW1dKSIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtaW5mby1jaXJjbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iWW91IGhhdmUgdXNlZCB7fSBpbiB0aGUgcmVzcG9uc2UsIHdoaWNoIGlzIHVzZWQgdG8gYWNjZXNzIHNsb3QgdmFsdWUsIGkuZSBpdCB3b3VsZCBhZGQgdGhlIHZhbHVlIGdhdGhlcmVkIGJ5IHNsb3QgaWYgZW5hYmxlZCBpbiBwcmV2aW91cyBvciBjdXJyZW50IG5vZGUuIChleGFtcGxlOiBFbWFpbDogeyRlbWFpbF9pZH0gd291bGQgcHJpbnQgRW1haWw6IHRlc3RAbWFpbC5jb20pLiIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJuZXdfcmVzcG9uc2UudmFsdWVzLmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJSZW1vdmUgVGV4dCBSZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIG15LWF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IG1hcmdpbi1sZWZ0OiAxMnB4IgogICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbW92ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgJnRpbWVzOwogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgICAgICAgICAgQWRkIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKSAwJSAwJSBuby1yZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJveDsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICdhZGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVzcG9uc2UtdmFyaWF0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgID5SZXNwb25zZSB2YXJpYXRpb25zIGFyZSBzZXQgdG8KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+e3sgbmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiB9fTwvc3Ryb25nCiAgICAgICAgICAgICAgICAgICAgICA+Ljwvc3BhbgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBTZXQgdG8KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X3Jlc3BvbnNlX3ZhcmlhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlcXVlbnRpYWwnCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0ibmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAnc2VxdWVudGlhbCciCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlc3BvbnNlLXZhcmlhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgID5zZXF1ZW50aWFsPC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz0ibmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAnc2VxdWVudGlhbCciPgogICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X3Jlc3BvbnNlX3ZhcmlhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpbGluZScKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdtdWx0aWxpbmUnIgogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2YXJpYXRpb24tbXVsdGlsaW5lIgogICAgICAgICAgICAgICAgICAgICAgPm11bHRpbGluZTwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSIKICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAncmFuZG9tJyAmJgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdtdWx0aWxpbmUnCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X3Jlc3BvbnNlX3ZhcmlhdGlvbihuZXdfcmVzcG9uc2UuaWQsICdyYW5kb20nKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdyYW5kb20nIgogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2YXJpYXRpb24tcmFuZG9tIgogICAgICAgICAgICAgICAgICAgICAgPnJhbmRvbTwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICdpbWFnZSciPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj5JbWFnZSBSZXNwb25zZSA6PC9wPgogICAgICAgICAgICAgICAgPCEtLSA8cD5FbnRlciBOYW1lIChPcHRpb25hbCk8L3A+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIiB0eXBlPSJ0ZXh0IiB2LW1vZGVsPSJuZXdfcmVzcG9uc2UuaW1hZ2VfbmFtZSI+IC0tPgogICAgICAgICAgICAgICAgPCEtLSA8cCBjbGFzcz0ibWItMCI+SW1hZ2Ugc291cmNlIDo8L3A+IC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJBZGQgSW1hZ2UgdXJsIgogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLnNvdXJjZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImNoZWNrX2ltYWdlX3VybChuZXdfcmVzcG9uc2Uuc291cmNlKSA9PSBmYWxzZSAmJiBCb29sZWFuKG5ld19yZXNwb25zZS5zb3VyY2UpIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiByZWQgIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDhweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFBsZWFzZSBlbnRlciBhIHZhbGlkIGltYWdlIFVSTCBpbiBwbmcgb3IganBnIGZvcm1hdCBvbmx5LgogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICd2aWRlbyciPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgVmlkZW8gUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMyBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQWRkIFZpZGVvIHVybCAoSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIGVtYmVkIGxpbmsuKSIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0ibmV3X3Jlc3BvbnNlLnNvdXJjZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImNoZWNrX3ZpZGVvX3VybChuZXdfcmVzcG9uc2Uuc291cmNlKSA9PT0gZmFsc2UgJiYgQm9vbGVhbihuZXdfcmVzcG9uc2Uuc291cmNlKSIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmVkICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA4cHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBQbGVhc2UgZW50ZXIgYSB2YWxpZCB2aWRlbyB1cmwuCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ2Nob2ljZXMnIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgIENob2ljZSBSZXNwb25zZSA6IHt7IG5ld19yZXNwb25zZS5pZCB9fQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPCEtLSA8ZGl2PgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgcmVzcG9uc2UgdGV4dCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdfcmVzcG9uc2UudGl0bGUiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4gLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTIgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihyZXNwb25zZSwgbnVtKSBpbiBuZXdfcmVzcG9uc2UuY2hvaWNlcyIKICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0ibnVtIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0zIG10LTMgbWItMyIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IiIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtdC0wIGNob2ljZS1sYWJlbCIgc3R5bGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+VGl0bGU6PC9sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsgZmxvYXQ6IHJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSBtbC1hdXRvIG1yLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBDaG9pY2UgUmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0ibmV3X3Jlc3BvbnNlLmNob2ljZXMubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV9jaG9pY2VfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbW92ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJnRpbWVzOzwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJyZXNwb25zZS50aXRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idGl0bGUgb2YgdGhlIGJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUgIWltcG9ydGFudDsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0yIG1iLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY2hvaWNlLWxhYmVsIiBzdHlsZT0iIj5WYWx1ZTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09InJlc3BvbnNlLnBheWxvYWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9InZhbHVlIHRvIGJlIHBhc3NlZCB3aGVuIGNsaWNrZWQgb24gYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJSAhaW1wb3J0YW50OyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgICAgICAgICAgQWRkIGNob2ljZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudAogICAgICAgICAgICAgICAgICAgICAgICAgIHVybCgnQHBvcnRhbC9hc3NldHMvaW1nL3BsdXMucG5nJykgMCUgMCUgbm8tcmVwZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX2Nob2ljZV9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICdhZGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxociBzdHlsZT0ibWFyZ2luOiAxMHB4IDBweCIgLz4KICAgICAgICAgICAgICA8IS0tIDx2dWUtZWRpdG9yCiAgICAgICAgICAgICAgICBXSElMRSBTQVZJTkcgREVUQUlMUyBBREQgVkFMSURBVElPTiBBREROT0RFKCkKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYXNzaXN0YW50X3Jlc3BvbnNlW2luZGV4XSIKICAgICAgICAgICAgICAgICAgOmVkaXRvclRvb2xiYXI9ImN1c3RvbVRvb2xiYXIiCiAgICAgICAgICAgICAgICA+PC92dWUtZWRpdG9yPiAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj5TZWxlY3QgYSByZXNwb25zZSB0eXBlIGZpcnN0IDo8L3A+CiAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJzZWxlY3RlZF9yZXNwb25zZV90eXBlIgogICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICB3aWR0aDogMTAwcHg7CiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDsKICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7CiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc291cmNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcHRpb24sIGluZGV4KSBpbiBhc3Npc3RhbnRfcmVzcG9uc2VfdHlwZSIKICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgIDp2YWx1ZT0ib3B0aW9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICB7eyBvcHRpb24gfX0KICAgICAgICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwhLS0gPC9kaXY+IC0tPgogICAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz0iZC1mbGV4Ij4gLS0+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgQWRkIHJlc3BvbnNlCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLTE0cHg7CiAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCB1cmwoJ0Bwb3J0YWwvYXNzZXRzL2ltZy9wbHVzLnBuZycpCiAgICAgICAgICAgICAgICAgICAgMCUgMCUgbm8tcmVwZWF0IHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgd2ViaG9va190b19hc3Npc3RhbnRfcmVzcG9uc2UoJ2FkZCcsIHdlYmhvb2tfdmFyaWFibGUpCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgIDxhIGhyZWY9IiMiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGNsYXNzPSJidG4iPkNsb3NlPC9hPgogICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSI+U2F2ZSBjaGFuZ2VzPC9hPgogICAgICAgIDwvZGl2PiAtLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBjbGFzcz0ibW9kYWwgZmFkZSIKICAgIGlkPSJtYW5hZ2VfaGFuZGxlcl9pZCIKICAgIHRhYmluZGV4PSItMSIKICAgIHJvbGU9ImRpYWxvZyIKICAgIGFyaWEtbGFiZWxsZWRieT0ibWFuYWdlX2hhbmRsZXJfaWQiCiAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIKICAgIGRhdGEta2V5Ym9hcmQ9ImZhbHNlIgogID4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtbGciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxoNSBzdHlsZT0iZm9udC1zdHlsZTogcmVndWxhciIgY2xhc3M9Im1vZGFsLXRpdGxlIj4KICAgICAgICAgICAgICBNYW5hZ2UgaGFuZGxlcnMKICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgPHAgY2xhc3M9Im0tMCI+CiAgICAgICAgICAgICAgKEhhbmRsZXJzIGFyZSBob3cgeW91ciBib3Qgd2lsbCByZXNwb25kIHdoZW4gdGhlIHVzZXJzIGFuc3dlciB0byBhIHByb21wdCBpcyBub3QgZm91bmQuKQogICAgICAgICAgPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgQGNsaWNrPSJvbl9jbG9zZV9tYW5hZ2VfaGFuZGxlcnMoKSIKICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgID4KICAgICAgICAgICAgw5cKICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDwhLS0gPGg1PklmIGFuc3dlciB0byBhbnkgcHJvbXB0IGlzIG5vdCBmb3VuZCBhbmQ8L2g1PiAtLT4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIHYtZm9yPSIoaGFuZGxlciwgaW5kKSBpbiBtYW5hZ2VfaGFuZGxlcnMiCiAgICAgICAgICAgICAgOmtleT0iaW5kIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDogcmlnaHQ7IGN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAxNHB4IgogICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF9yZW1vdmVfdG9fbWFuYWdlX2hhbmRsZXJfbGlzdCgncmVtb3ZlJywgaW5kKSIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgICB0aXRsZT0iRGVsZXRlIEhhbmRsZXIiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIERlbGV0ZQogICAgICAgICAgICAgICAgICA8IS0tIDxpIHN0eWxlPSJmb250LXNpemU6IDE2cHgiIGNsYXNzPSJmYSI+JiN4ZjAwZDs8L2k+IC0tPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICBIYW5kbGVyIDoge3sgaW5kIH19CiAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94LWhlYWQgcHgtMyBweS0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgPGg1PklmIEFzc2lzdGFudCBSZWNvZ25pemVzPC9oNT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImQtZmxleCBtbC0yIHBiLTIiCiAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHRyaWdnZXIsIGluZGV4KSBpbiBoYW5kbGVyLnRyaWdnZXJzIgogICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtMiBteS1hdXRvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImN1c3RvbS1zZWxlY3QiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iRmlsdGVyIGJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InRyaWdnZXJfZmlsdGVyX2J5X2lkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMjBweDsgaGVpZ2h0OiA0MHB4OyBwYWRkaW5nLWxlZnQ6IDE0cHg7IHBhZGRpbmctYm90dG9tOjRweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRmlsdGVyIGJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idHJpZ2dlci50cmlnZ2VyX3R5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaW5wdXQ9Im1hbmFnZV9oYW5kbGVyc19jaGFuZ2VfdHJpZ2dlcl92YWx1ZSh0cmlnZ2VyLnRyaWdnZXJfdHlwZSwgaW5kZXgsIGluZCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIiBkaXNhYmxlZCBzZWxlY3RlZD5GaWx0ZXIgYnk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImludGVudCI+T2JqZWN0aXZlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJlbnRpdHkiPkVudGl0eTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWwtMiBteS1hdXRvIgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJCb29sZWFuKHRyaWdnZXIudHJpZ2dlcl90eXBlKSIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPG11bHRpc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idHJpZ2dlci50cmlnZ2VyX3ZhbHVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJ0cmlnZ2VyLnRyaWdnZXJfdHlwZSA9PT0gJ2ludGVudCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmlnZ2VyX29wdGlvbnNfaW50ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJpZ2dlcl9vcHRpb25zX2VudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9InRyaWdnZXIudHJpZ2dlcl90eXBlID09PSAnaW50ZW50JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdTZWFyY2ggT2JqZWN0aXZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdTZWFyY2ggRW50aXR5JwogICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tc2VsZWN0PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGVhci1vbi1zZWxlY3Q9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpwcmVzZXJ2ZS1zZWFyY2g9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6YWxsb3ctZW1wdHk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4tZGlyZWN0aW9uPSJib3R0b20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnNlYXJjaGFibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmxvYWRpbmc9ImlzX2xvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZV9oYW5kbGVyc19jaGFuZ2VfdHJpZ2dlcl90eXBlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyLnRyaWdnZXJfdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlci50cmlnZ2VyX3ZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWFyY2gtY2hhbmdlPSJzZWFyY2hfaW50ZW50X2VudGl0eSh0cmlnZ2VyLnRyaWdnZXJfdHlwZSwgJGV2ZW50KSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiAzMHB4OyBwYWRkaW5nOiAwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zb3VyY2UiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzbG90PSJub09wdGlvbnMiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzbG90PSJub1Jlc3VsdCI+Tm8gQ29uZGl0aW9uIGZvdW5kLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tdWx0aXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWwtMiBteS1hdXRvIgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRyaWdnZXIudHJpZ2dlcl90eXBlID09PSAnZW50aXR5JykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRyaWdnZXIudHJpZ2dlcl92YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGlzX2VudGl0eV90eXBlX3N5c19wYXR0ZXJuKHRyaWdnZXIudHJpZ2dlcl92YWx1ZSkgPT09IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2N1cnNvcjogbm90LWFsbG93ZWQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGlzX2VudGl0eV90eXBlX3N5c19wYXR0ZXJuKHRyaWdnZXIudHJpZ2dlcl92YWx1ZSkgPT09IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ0VudGl0eSBzZWxlY3RlZCBpcyBvZiB0eXBlIHBhdHRlcm4gb3Igc3lzdGVtIGVudGl0eSwgaGVuY2UgZnVydGhlciBvcHRpb24ocykgY2Fubm90IGJlIHNlbGVjdGVkLicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtdWx0aXNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJ0cmlnZ2VyX29wZXJhbmRfaWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLXNlbGVjdD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz0iZW50aXR5X29wZXJhbmRfb3B0aW9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iT3BlcmF0b3IiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idHJpZ2dlci5vcGVyYW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgIDphbGxvdy1lbXB0eT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAaW5wdXQ9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlX2hhbmRsZXJzX2NoYW5nZV90cmlnZ2VyX2VudGl0eV92YWx1ZSh0cmlnZ2VyLm9wZXJhbmQsIGluZGV4LCBpbmQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19lbnRpdHlfdHlwZV9zeXNfcGF0dGVybih0cmlnZ2VyLnRyaWdnZXJfdmFsdWUpID09PQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L211bHRpc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtbC0yIG15LWF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9IiBCb29sZWFuKHRyaWdnZXIudHJpZ2dlcl90eXBlID09PSAnZW50aXR5JykgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRyaWdnZXIudHJpZ2dlcl92YWx1ZSkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRyaWdnZXIub3BlcmFuZCA9PT0gJ2lzJykKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8bXVsdGlzZWxlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0idHJpZ2dlcl9lbnRpdHlfdmFsdWVfaWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLXNlbGVjdD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz0iZW50aXR5X3ZhbHVlX29wdGlvbnModHJpZ2dlci50cmlnZ2VyX3ZhbHVlKSIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0ic2VsZWN0IGVudGl0eSB2YWx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ0cmlnZ2VyLmVudGl0eV92YWx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6YWxsb3ctZW1wdHk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpzaG93LWxhYmVscz0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZV9oYW5kbGVyc19zZXRfdHJpZ2dlcl9lbnRpdHlfdmFsdWUodHJpZ2dlci5lbnRpdHlfdmFsdWUsIGluZGV4LCBpbmQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbXVsdGlzZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICA8aDUgc3R5bGU9Im1hcmdpbi10b3A6IDZweDsgbWFyZ2luLWJvdHRvbTogNXB4Ij4KICAgICAgICAgICAgICAgICAgICBBc3Npc3RhbnQgUmVzcG9uc2UKICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIHYtZm9yPSIobmV3X3Jlc3BvbnNlLCBpbmRleCkgaW4gaGFuZGxlci5yZXNwb25zZXMiCiAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tZ3JvdXAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZsb2F0OiByaWdodDsgY3Vyc29yOiBwb2ludGVyOyBmb250LXNpemU6IDE0cHgiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VfaGFuZGxlcnNfYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV9saXN0KCdyZW1vdmUnLCBpbmQsIGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBSZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBSZW1vdmUKICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJuZXdfcmVzcG9uc2UudHlwZSA9PSAndGV4dCciPgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBUZXh0IFJlc3BvbnNlIDoge3sgbmV3X3Jlc3BvbnNlLmlkIH19IC0tPgogICAgICAgICAgICAgICAgICAgICAgICBUZXh0IFJlc3BvbnNlCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHBiLTIgcHQtMyBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihyZXNwb25zZSwgbnVtKSBpbiBuZXdfcmVzcG9uc2UudmFsdWVzIgogICAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9Im51bSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciByZXNwb25zZSB0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLnZhbHVlc1tudW1dIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9IidtYW5hZ2VfaGFuZGxlcnNfYXNzaXN0YW5jZV9yZXNwb25zZV8nKyBuZXdfcmVzcG9uc2UuaWQgKyAnXycgKyBudW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb2N1c291dD0ibWFuYWdlX2hhbmRsZXJzX2luc2VydF92YXJpYWJsZV9ibG9ja19vZmYobmV3X3Jlc3BvbnNlLmlkICwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3VzaW49Im1hbmFnZV9oYW5kbGVyc19pbnNlcnRfdmFyaWFibGVfYmxvY2tfb24obmV3X3Jlc3BvbnNlLmlkLCBudW0pIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uOmtleXVwLmVudGVyPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VfaGFuZGxlcl9hZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX3RleHRfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9Im9wYWNpdHk6MCIgOmlkPSInbWFuYWdlX2hhbmRsZXJzX2luc2VydF92YXJpYWJsZV9ibG9jaycgKyBuZXdfcmVzcG9uc2UuaWQgKyAnXycgKyBudW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9Im1hbmFnZV9oYW5kbGVyc19zZXRfYXNzaXN0YW5jZV9yZXNwb25zZV9pbmRleChuZXdfcmVzcG9uc2UuaWQsIG51bSwgaW5kKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImV4YW1wbGUgZmEtc3RhY2sgZmEtMXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9Im1hbmFnZV9oYW5kbGVyc19pbnNlcnRfdmFyaWFibGVfYnV0dG9uIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjbWFuYWdlX2hhbmRsZXJzX2luc2VydF92YXJpYWJsZV9tb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXRvcDoyMHB4ICFpbXBvcnRhbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYXMgZmEtY2lyY2xlIGZhLXN0YWNrLTJ4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiNkYmUyZTgiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSInbWFuYWdlX2hhbmRsZXJzX2luc2VydF92YXJpYWJsZV9jaXJjbGVfJysgbmV3X3Jlc3BvbnNlLmlkICsgJ18nICsgbnVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFjay0xeCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbW91c2VvdmVyPSJtYW5hZ2VfaGFuZGxlcnNfY2lyY2xlX21vdXNlb3ZlcihuZXdfcmVzcG9uc2UuaWQsIG51bSkiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1vdXNlb3V0PSJtYW5hZ2VfaGFuZGxlcnNfY2lyY2xlX21vdXNlb3V0KG5ld19yZXNwb25zZS5pZCwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC1zaXplOjE0cHg7IGRpc3BsYXk6YmxvY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ufQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDEycHg7IGNvbG9yOiAjMDY0NUFEOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im15LWF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImNoZWNrX3Nsb3RfdmFsdWVfdXNlX2luX3Jlc3BvbnNlKG5ld19yZXNwb25zZS52YWx1ZXNbbnVtXSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IDE2cHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IllvdSBoYXZlIHVzZWQge30gaW4gdGhlIHJlc3BvbnNlLCB3aGljaCBpcyB1c2VkIHRvIGFjY2VzcyBzbG90IHZhbHVlLCBpLmUgaXQgd291bGQgYWRkIHRoZSB2YWx1ZSBnYXRoZXJlZCBieSBzbG90IGlmIGVuYWJsZWQgaW4gcHJldmlvdXMgb3IgY3VycmVudCBub2RlLiAoZXhhbXBsZTogRW1haWw6IHskZW1haWxfaWR9IHdvdWxkIHByaW50IEVtYWlsOiB0ZXN0QG1haWwuY29tKS4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0ibmV3X3Jlc3BvbnNlLnZhbHVlcy5sZW5ndGggPiAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUmVtb3ZlIFRleHQgUmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSBteS1hdXRvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyOyBtYXJnaW4tbGVmdDogMTJweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VfaGFuZGxlcl9hZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX3RleHRfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZW1vdmUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZ0aW1lczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi10b3A6IDZweDsgbWFyZ2luLWJvdHRvbTogNXB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFkZCB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCgnQHBvcnRhbC9hc3NldHMvaW1nL3BsdXMucG5nJykgMCUgMCUgbm8tcmVwZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VfaGFuZGxlcl9hZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX3RleHRfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXNwb25zZS12YXJpYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPlJlc3BvbnNlIHZhcmlhdGlvbnMgYXJlIHNldCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57eyBuZXdfcmVzcG9uc2UudmFyaWF0aW9uIH19PC9zdHJvbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4uPC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIFNldCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VfaGFuZGxlcnNfc2VsZWN0X3Jlc3BvbnNlX3ZhcmlhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlcXVlbnRpYWwnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3NlcXVlbnRpYWwnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZXNwb25zZS12YXJpYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVudGlhbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3NlcXVlbnRpYWwnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZV9oYW5kbGVyc19zZWxlY3RfcmVzcG9uc2VfdmFyaWF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlsaW5lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdtdWx0aWxpbmUnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2YXJpYXRpb24tbXVsdGlsaW5lIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpbGluZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLnZhcmlhdGlvbiAhPSAncmFuZG9tJyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdtdWx0aWxpbmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlX2hhbmRsZXJzX3NlbGVjdF9yZXNwb25zZV92YXJpYXRpb24obmV3X3Jlc3BvbnNlLmlkLCAncmFuZG9tJywgaW5kKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdyYW5kb20nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ2YXJpYXRpb24tcmFuZG9tIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICdpbWFnZSciPgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBJbWFnZSBSZXNwb25zZSA6IHt7IG5ld19yZXNwb25zZS5pZCB9fSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgSW1hZ2UgUmVzcG9uc2UKICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHA+RW50ZXIgTmFtZSAoT3B0aW9uYWwpPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIgdHlwZT0idGV4dCIgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLmltYWdlX25hbWUiPiAtLT4KICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHAgY2xhc3M9Im1iLTAiPkltYWdlIHNvdXJjZSA6PC9wPiAtLT4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMyBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQWRkIEltYWdlIHVybCIKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im5ld19yZXNwb25zZS5zb3VyY2UiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJjaGVja19pbWFnZV91cmwobmV3X3Jlc3BvbnNlLnNvdXJjZSkgPT0gZmFsc2UgJiYgQm9vbGVhbihuZXdfcmVzcG9uc2Uuc291cmNlKSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmVkICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA4cHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICBQbGVhc2UgZW50ZXIgYSB2YWxpZCBpbWFnZSBVUkwgaW4gcG5nIG9yIGpwZyBmb3JtYXQgb25seS4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJuZXdfcmVzcG9uc2UudHlwZSA9PSAndmlkZW8nIj4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVmlkZW8gUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIFZpZGVvIFJlc3BvbnNlCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTMgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkFkZCBWaWRlbyB1cmwgKEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSBlbWJlZCBsaW5rLikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09Im5ld19yZXNwb25zZS5zb3VyY2UiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJjaGVja192aWRlb191cmwobmV3X3Jlc3BvbnNlLnNvdXJjZSkgPT09IGZhbHNlICYmIEJvb2xlYW4obmV3X3Jlc3BvbnNlLnNvdXJjZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHJlZCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogOHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgUGxlYXNlIGVudGVyIGEgdmFsaWQgdmlkZW8gdXJsLgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICdjaG9pY2VzJyI+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIENob2ljZSBSZXNwb25zZSA6IHt7IG5ld19yZXNwb25zZS5pZCB9fSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgQ2hvaWNlIFJlc3BvbnNlCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciByZXNwb25zZSB0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im5ld19yZXNwb25zZS50aXRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAtLT4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMiBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogYmxvY2s7IG1hcmdpbi1ib3R0b206IDFyZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHJlc3BvbnNlLCBudW0pIGluIG5ld19yZXNwb25zZS5jaG9pY2VzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJudW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTMgbXQtMyBtYi0zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im10LTAgY2hvaWNlLWxhYmVsIiBzdHlsZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5UaXRsZTo8L2xhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyOyBmbG9hdDogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIG1sLWF1dG8gbXItMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUmVtb3ZlIENob2ljZSBSZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJuZXdfcmVzcG9uc2UuY2hvaWNlcy5sZW5ndGggPiAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VfaGFuZGxlcnNfYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV9jaG9pY2VfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbW92ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmdGltZXM7PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09InJlc3BvbnNlLnRpdGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJ0aXRsZSBvZiB0aGUgYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJSAhaW1wb3J0YW50OyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTIgbWItMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjaG9pY2UtbGFiZWwiIHN0eWxlPSIiPlZhbHVlOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0icmVzcG9uc2UucGF5bG9hZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idmFsdWUgdG8gYmUgcGFzc2VkIHdoZW4gY2xpY2tlZCBvbiBidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlICFpbXBvcnRhbnQ7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOiA2cHg7IG1hcmdpbi1ib3R0b206IDVweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZGQgY2hvaWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKSAwJSAwJSBuby1yZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJveDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZV9oYW5kbGVyc19hZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX2Nob2ljZV9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2JsYWNrX3BsdXMucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+CiAgICAgICAgICAgICAgICAgICAgPCEtLSA8dnVlLWVkaXRvcgogICAgICAgICAgICAgICAgICAgICAgV0hJTEUgU0FWSU5HIERFVEFJTFMgQUREIFZBTElEQVRJT04gQURETk9ERSgpCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFzc2lzdGFudF9yZXNwb25zZVtpbmRleF0iCiAgICAgICAgICAgICAgICAgICAgICAgIDplZGl0b3JUb29sYmFyPSJjdXN0b21Ub29sYmFyIgogICAgICAgICAgICAgICAgICAgICAgPjwvdnVlLWVkaXRvcj4gLS0+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+U2VsZWN0IGEgcmVzcG9uc2UgdHlwZSBmaXJzdCA6PC9wPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2VsZWN0ZWRfcmVzcG9uc2VfdHlwZSIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMHB4OwogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1cHg7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NvdXJjZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIob3B0aW9uLCBpbmRleCkgaW4gYXNzaXN0YW50X3Jlc3BvbnNlX3R5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9Im9wdGlvbiIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3sgb3B0aW9uIH19CiAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8IS0tIDwvZGl2PiAtLT4KICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9ImQtZmxleCI+IC0tPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICAgICAgICAgIEFkZCByZXNwb25zZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IC0xNHB4OwogICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAgIDAlIDAlIG5vLXJlcGVhdCBwYWRkaW5nLWJveDsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ibWFuYWdlX2hhbmRsZXJzX2FkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfbGlzdCgnYWRkJywgaW5kKSIKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2JsYWNrX3BsdXMucG5nIiBhbHQ9IiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICA8aDU+VGhlbiBhc3Npc3RhbnQgc2hvdWxkPC9oNT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTIwcHg7IGhlaWdodDogMzBweDsgcGFkZGluZzogMHB4IgogICAgICAgICAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zb3VyY2UiCiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InNraXBfYWxsX3Nsb3RzIiBkaXNhYmxlZCBzZWxlY3RlZD5Ta2lwIGFsbCBzbG90czwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IiB2LWlmPSJCb29sZWFuKG1hbmFnZV9oYW5kbGVycy5sZW5ndGggPT09IDApIj4KICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgY2xhc3M9InN1Yl9oZWFkaW5nIgogICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6IDZweDsgbWFyZ2luLWJvdHRvbTogNXB4IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIEFkZCBoYW5kbGVyCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50IHVybCgnQHBvcnRhbC9hc3NldHMvaW1nL3BsdXMucG5nJykKICAgICAgICAgICAgICAgICAgICAwJSAwJSBuby1yZXBlYXQgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF9yZW1vdmVfdG9fbWFuYWdlX2hhbmRsZXJfbGlzdCgnYWRkJykiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICA8YSBocmVmPSIjIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBjbGFzcz0iYnRuIj5DbG9zZTwvYT4KICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPlNhdmUgY2hhbmdlczwvYT4KICAgICAgICA8L2Rpdj4gLS0+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdgogICAgY2xhc3M9Im1vZGFsIGZhZGUiCiAgICBpZD0ibm90aWZpY2F0aW9ubW9kYWwiCiAgICB0YWJpbmRleD0iLTEiCiAgICByb2xlPSJkaWFsb2ciCiAgICBhcmlhLWxhYmVsbGVkYnk9Im5vdGlmaWNhdGlvbm1vZGFsIgogICAgYXJpYS1oaWRkZW49InRydWUiCiAgICBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiCiAgICBkYXRhLWtleWJvYXJkPSJmYWxzZSIKICA+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsLWxnIiByb2xlPSJkb2N1bWVudCI+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICA8aDUgc3R5bGU9ImZvbnQtc3R5bGU6IHJlZ3VsYXIiIGNsYXNzPSJtb2RhbC10aXRsZSI+CiAgICAgICAgICAgIENvbmZpZ3VyZSBub3RpZmljYXRpb24KICAgICAgICAgIDwvaDU+CiAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgQGNsaWNrPSJvbl9jbG9zZV9ub3RpZmljYXRpb25fbW9kYWwoKSIKICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgID4KICAgICAgICAgICAgw5cKICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNSBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgIEFzc2lzdGFudCBSZXNwb25zZSBXaGVuIE5vdGlmaWNhdGlvbiBTdWNjZXNzZnVsCiAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICB2LWZvcj0iKG5ld19yZXNwb25zZSwgaW5kZXgpIGluIG5vdGlmaWNhdGlvbl9zdWNjZXNzZnVsX2Fzc2lzdGFudF9yZXNwb25zZSIKICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTRweCIKICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgIHJlbW92ZV9ub3RpZmljYXRpb25fdG9fYXNzaXN0YW50X3Jlc3BvbnNlKAogICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UucmVjb2duaXplcywKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBSZXNwb25zZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBSZW1vdmUKICAgICAgICAgICAgICAgIDwhLS0gPGkgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIgY2xhc3M9ImZhIj4mI3hmMDBkOzwvaT4gLS0+CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ3RleHQnIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgIFRleHQgUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcGItMiBwdC0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHJlc3BvbnNlLCBudW0pIGluIG5ld19yZXNwb25zZS52YWx1ZXMiCiAgICAgICAgICAgICAgICAgICAgOmtleT0ibnVtIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIHJlc3BvbnNlIHRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdfcmVzcG9uc2UudmFsdWVzW251bV0iCiAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ2Fzc2lzdGFuY2VfcmVzcG9uc2VfJysgbmV3X3Jlc3BvbnNlLmlkICsgJ18nICsgbnVtIgogICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXNvdXQ9Imluc2VydF92YXJpYWJsZV9ibG9ja19vZmYobmV3X3Jlc3BvbnNlLmlkICwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3VzaW49Imluc2VydF92YXJpYWJsZV9ibG9ja19vbihuZXdfcmVzcG9uc2UuaWQsIG51bSkiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtb246a2V5dXAuZW50ZXI9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJvcGFjaXR5OjAiIDppZD0iJ2luc2VydF92YXJpYWJsZV9ibG9jaycgKyBuZXdfcmVzcG9uc2UuaWQgKyAnXycgKyBudW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSAKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNldF9hc3Npc3RhbmNlX3Jlc3BvbnNlX2luZGV4KG5ld19yZXNwb25zZS5pZCwgbnVtKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImV4YW1wbGUgZmEtc3RhY2sgZmEtMXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9Imluc2VydF92YXJpYWJsZV9idXR0b24iIAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNpbnNlcnRfdmFyaWFibGVfbW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6MjBweCAhaW1wb3J0YW50IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmFzIGZhLWNpcmNsZSBmYS1zdGFjay0yeCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjojZGJlMmU4IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ2luc2VydF92YXJpYWJsZV9jaXJjbGVfJysgbmV3X3Jlc3BvbnNlLmlkICsgJ18nICsgbnVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFjay0xeCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbW91c2VvdmVyPSJjaXJjbGVfbW91c2VvdmVyKG5ld19yZXNwb25zZS5pZCwgbnVtKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbW91c2VvdXQ9ImNpcmNsZV9tb3VzZW91dChuZXdfcmVzcG9uc2UuaWQsIG51bSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZToxNHB4OyBkaXNwbGF5OmJsb2NrOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLn0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMnB4OyBjb2xvcjogIzA2NDVBRDsiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJteS1hdXRvIgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJjaGVja19zbG90X3ZhbHVlX3VzZV9pbl9yZXNwb25zZShuZXdfcmVzcG9uc2UudmFsdWVzW251bV0pIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJZb3UgaGF2ZSB1c2VkIHt9IGluIHRoZSByZXNwb25zZSwgd2hpY2ggaXMgdXNlZCB0byBhY2Nlc3Mgc2xvdCB2YWx1ZSwgaS5lIGl0IHdvdWxkIGFkZCB0aGUgdmFsdWUgZ2F0aGVyZWQgYnkgc2xvdCBpZiBlbmFibGVkIGluIHByZXZpb3VzIG9yIGN1cnJlbnQgbm9kZS4gKGV4YW1wbGU6IEVtYWlsOiB7JGVtYWlsX2lkfSB3b3VsZCBwcmludCBFbWFpbDogdGVzdEBtYWlsLmNvbSkuIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Im5ld19yZXNwb25zZS52YWx1ZXMubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBUZXh0IFJlc3BvbnNlIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UgbXktYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsgbWFyZ2luLWxlZnQ6IDEycHgiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV90ZXh0X2xpc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVtb3ZlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAmdGltZXM7CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOiA2cHg7IG1hcmdpbi1ib3R0b206IDVweCI+CiAgICAgICAgICAgICAgICAgICAgICBBZGQgdmFsdWUKICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwoJ0Bwb3J0YWwvYXNzZXRzL2ltZy9wbHVzLnBuZycpIDAlIDAlIG5vLXJlcGVhdAogICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV90ZXh0X2xpc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXNwb25zZS12YXJpYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgPlJlc3BvbnNlIHZhcmlhdGlvbnMgYXJlIHNldCB0bwogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57eyBuZXdfcmVzcG9uc2UudmFyaWF0aW9uIH19PC9zdHJvbmcKICAgICAgICAgICAgICAgICAgICAgID4uPC9zcGFuCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFNldCB0bwogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcmVzcG9uc2VfdmFyaWF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VxdWVudGlhbCcKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdzZXF1ZW50aWFsJyIKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVzcG9uc2UtdmFyaWF0aW9uIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbnRpYWwKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdzZXF1ZW50aWFsJyI+CiAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcmVzcG9uc2VfdmFyaWF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlsaW5lJwogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ211bHRpbGluZSciCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InZhcmlhdGlvbi1tdWx0aWxpbmUiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9IgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdyYW5kb20nICYmCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ211bHRpbGluZScKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcmVzcG9uc2VfdmFyaWF0aW9uKG5ld19yZXNwb25zZS5pZCwgJ3JhbmRvbScpCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3JhbmRvbSciCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InZhcmlhdGlvbi1yYW5kb20iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgcmFuZG9tCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ2ltYWdlJyI+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciPkltYWdlIFJlc3BvbnNlIDoge3sgbmV3X3Jlc3BvbnNlLmlkIH19PC9wPgogICAgICAgICAgICAgICAgPCEtLSA8cD5FbnRlciBOYW1lIChPcHRpb25hbCk8L3A+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIiB0eXBlPSJ0ZXh0IiB2LW1vZGVsPSJuZXdfcmVzcG9uc2UuaW1hZ2VfbmFtZSI+IC0tPgogICAgICAgICAgICAgICAgPCEtLSA8cCBjbGFzcz0ibWItMCI+SW1hZ2Ugc291cmNlIDo8L3A+IC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJBZGQgSW1hZ2UgdXJsIgogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3X3Jlc3BvbnNlLnNvdXJjZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImNoZWNrX2ltYWdlX3VybChuZXdfcmVzcG9uc2Uuc291cmNlKSA9PSBmYWxzZSAmJiBCb29sZWFuKG5ld19yZXNwb25zZS5zb3VyY2UpIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiByZWQgIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDhweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFBsZWFzZSBlbnRlciBhIHZhbGlkIGltYWdlIFVSTCBpbiBwbmcgb3IganBnIGZvcm1hdCBvbmx5LgogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9Im5ld19yZXNwb25zZS50eXBlID09ICd2aWRlbyciPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgVmlkZW8gUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMyBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iQWRkIFZpZGVvIHVybCAoSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIGVtYmVkIGxpbmsuKSIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0ibmV3X3Jlc3BvbnNlLnNvdXJjZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImNoZWNrX3ZpZGVvX3VybChuZXdfcmVzcG9uc2Uuc291cmNlKSA9PT0gZmFsc2UgJiYgQm9vbGVhbihuZXdfcmVzcG9uc2Uuc291cmNlKSIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmVkICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA4cHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBQbGVhc2UgZW50ZXIgYSB2YWxpZCB2aWRlbyB1cmwuCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ2Nob2ljZXMnIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgIENob2ljZSBSZXNwb25zZSA6IHt7IG5ld19yZXNwb25zZS5pZCB9fQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPCEtLSA8ZGl2PgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgcmVzcG9uc2UgdGV4dCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdfcmVzcG9uc2UudGl0bGUiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4gLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTIgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihyZXNwb25zZSwgbnVtKSBpbiBuZXdfcmVzcG9uc2UuY2hvaWNlcyIKICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0ibnVtIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0zIG10LTMgbWItMyIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IiIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtdC0wIGNob2ljZS1sYWJlbCIgc3R5bGU9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+VGl0bGU6PC9sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsgZmxvYXQ6IHJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSBtbC1hdXRvIG1yLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBDaG9pY2UgUmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0ibmV3X3Jlc3BvbnNlLmNob2ljZXMubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV9jaG9pY2VfbGlzdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbW92ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgJnRpbWVzOzwvc3BhbgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJyZXNwb25zZS50aXRsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idGl0bGUgb2YgdGhlIGJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUgIWltcG9ydGFudDsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0yIG1iLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY2hvaWNlLWxhYmVsIiBzdHlsZT0iIj5WYWx1ZTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09InJlc3BvbnNlLnBheWxvYWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9InZhbHVlIHRvIGJlIHBhc3NlZCB3aGVuIGNsaWNrZWQgb24gYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJSAhaW1wb3J0YW50OyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luLXRvcDogNnB4OyBtYXJnaW4tYm90dG9tOiA1cHgiPgogICAgICAgICAgICAgICAgICAgICAgQWRkIGNob2ljZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudAogICAgICAgICAgICAgICAgICAgICAgICAgIHVybCgnQHBvcnRhbC9hc3NldHMvaW1nL3BsdXMucG5nJykgMCUgMCUgbm8tcmVwZWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX2Nob2ljZV9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICdhZGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxociBzdHlsZT0ibWFyZ2luOiAxMHB4IDBweCIgLz4KICAgICAgICAgICAgICA8IS0tIDx2dWUtZWRpdG9yCiAgICAgICAgICAgICAgICBXSElMRSBTQVZJTkcgREVUQUlMUyBBREQgVkFMSURBVElPTiBBREROT0RFKCkKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYXNzaXN0YW50X3Jlc3BvbnNlW2luZGV4XSIKICAgICAgICAgICAgICAgICAgOmVkaXRvclRvb2xiYXI9ImN1c3RvbVRvb2xiYXIiCiAgICAgICAgICAgICAgICA+PC92dWUtZWRpdG9yPiAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj5TZWxlY3QgYSByZXNwb25zZSB0eXBlIGZpcnN0IDo8L3A+CiAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJzZWxlY3RlZF9yZXNwb25zZV90eXBlIgogICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICB3aWR0aDogMTAwcHg7CiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDsKICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7CiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc291cmNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcHRpb24sIGluZGV4KSBpbiBhc3Npc3RhbnRfcmVzcG9uc2VfdHlwZSIKICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgIDp2YWx1ZT0ib3B0aW9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICB7eyBvcHRpb24gfX0KICAgICAgICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwhLS0gPC9kaXY+IC0tPgogICAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz0iZC1mbGV4Ij4gLS0+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgQWRkIHJlc3BvbnNlCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLTE0cHg7CiAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCB1cmwoJ0Bwb3J0YWwvYXNzZXRzL2ltZy9wbHVzLnBuZycpCiAgICAgICAgICAgICAgICAgICAgMCUgMCUgbm8tcmVwZWF0IHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfbm90aWZpY2F0aW9uX3N1Y2Nlc3NmdWxfdG9fYXNzaXN0YW50X3Jlc3BvbnNlKCdzdWNjZXNzZnVsJykiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1IHN0eWxlPSJtYXJnaW4tdG9wOiA2cHg7IG1hcmdpbi1ib3R0b206IDVweCI+CiAgICAgICAgICAgICAgQXNzaXN0YW50IFJlc3BvbnNlIFdoZW4gTm90aWZpY2F0aW9uIFVuc3VjY2Vzc2Z1bAogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgdi1mb3I9IihuZXdfcmVzcG9uc2UsIGluZGV4KSBpbiBub3RpZmljYXRpb25fdW5zdWNjZXNzZnVsX2Fzc2lzdGFudF9yZXNwb25zZSIKICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTRweCIKICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgIHJlbW92ZV9ub3RpZmljYXRpb25fdG9fYXNzaXN0YW50X3Jlc3BvbnNlKAogICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UucmVjb2duaXplcywKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBSZXNwb25zZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBSZW1vdmUKICAgICAgICAgICAgICAgIDwhLS0gPGkgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIgY2xhc3M9ImZhIj4mI3hmMDBkOzwvaT4gLS0+CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ3RleHQnIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzdWJfaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgIFRleHQgUmVzcG9uc2UgOiB7eyBuZXdfcmVzcG9uc2UuaWQgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcGItMiBwdC0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHJlc3BvbnNlLCBudW0pIGluIG5ld19yZXNwb25zZS52YWx1ZXMiCiAgICAgICAgICAgICAgICAgICAgOmtleT0ibnVtIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIHJlc3BvbnNlIHRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdfcmVzcG9uc2UudmFsdWVzW251bV0iCiAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ2Fzc2lzdGFuY2VfcmVzcG9uc2VfJysgbmV3X3Jlc3BvbnNlLmlkICsgJ18nICsgbnVtIgogICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXNvdXQ9Imluc2VydF92YXJpYWJsZV9ibG9ja19vZmYobmV3X3Jlc3BvbnNlLmlkICwgbnVtKSIKICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3VzaW49Imluc2VydF92YXJpYWJsZV9ibG9ja19vbihuZXdfcmVzcG9uc2UuaWQsIG51bSkiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtb246a2V5dXAuZW50ZXI9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfdGV4dF9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UuaWQKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJvcGFjaXR5OjAiIDppZD0iJ2luc2VydF92YXJpYWJsZV9ibG9jaycgKyBuZXdfcmVzcG9uc2UuaWQgKyAnXycgKyBudW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSAKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNldF9hc3Npc3RhbmNlX3Jlc3BvbnNlX2luZGV4KG5ld19yZXNwb25zZS5pZCwgbnVtKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImV4YW1wbGUgZmEtc3RhY2sgZmEtMXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9Imluc2VydF92YXJpYWJsZV9idXR0b24iIAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNpbnNlcnRfdmFyaWFibGVfbW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6MjBweCAhaW1wb3J0YW50IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmFzIGZhLWNpcmNsZSBmYS1zdGFjay0yeCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjojZGJlMmU4IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ2luc2VydF92YXJpYWJsZV9jaXJjbGVfJysgbmV3X3Jlc3BvbnNlLmlkICsgJ18nICsgbnVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFjay0xeCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbW91c2VvdmVyPSJjaXJjbGVfbW91c2VvdmVyKG5ld19yZXNwb25zZS5pZCwgbnVtKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbW91c2VvdXQ9ImNpcmNsZV9tb3VzZW91dChuZXdfcmVzcG9uc2UuaWQsIG51bSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZToxNHB4OyBkaXNwbGF5OmJsb2NrOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLn0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMnB4OyBjb2xvcjogIzA2NDVBRDsiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJteS1hdXRvIgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJjaGVja19zbG90X3ZhbHVlX3VzZV9pbl9yZXNwb25zZShuZXdfcmVzcG9uc2UudmFsdWVzW251bV0pIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJZb3UgaGF2ZSB1c2VkIHt9IGluIHRoZSByZXNwb25zZSwgd2hpY2ggaXMgdXNlZCB0byBhY2Nlc3Mgc2xvdCB2YWx1ZSwgaS5lIGl0IHdvdWxkIGFkZCB0aGUgdmFsdWUgZ2F0aGVyZWQgYnkgc2xvdCBpZiBlbmFibGVkIGluIHByZXZpb3VzIG9yIGN1cnJlbnQgbm9kZS4gKGV4YW1wbGU6IEVtYWlsOiB7JGVtYWlsX2lkfSB3b3VsZCBwcmludCBFbWFpbDogdGVzdEBtYWlsLmNvbSkuIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Im5ld19yZXNwb25zZS52YWx1ZXMubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlJlbW92ZSBUZXh0IFJlc3BvbnNlIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UgbXktYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsgbWFyZ2luLWxlZnQ6IDEycHgiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV90ZXh0X2xpc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVtb3ZlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAmdGltZXM7CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOiA2cHg7IG1hcmdpbi1ib3R0b206IDVweCI+CiAgICAgICAgICAgICAgICAgICAgICBBZGQgdmFsdWUKICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwoJ0Bwb3J0YWwvYXNzZXRzL2ltZy9wbHVzLnBuZycpIDAlIDAlIG5vLXJlcGVhdAogICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgYWRkX3RvX2Fzc2lzdGFudF9yZXNwb25zZV90ZXh0X2xpc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXNwb25zZS12YXJpYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgPlJlc3BvbnNlIHZhcmlhdGlvbnMgYXJlIHNldCB0bwogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57eyBuZXdfcmVzcG9uc2UudmFyaWF0aW9uIH19PC9zdHJvbmcKICAgICAgICAgICAgICAgICAgICAgID4uPC9zcGFuCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFNldCB0bwogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcmVzcG9uc2VfdmFyaWF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VxdWVudGlhbCcKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdzZXF1ZW50aWFsJyIKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVzcG9uc2UtdmFyaWF0aW9uIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbnRpYWwKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1zaG93PSJuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdzZXF1ZW50aWFsJyI+CiAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcmVzcG9uc2VfdmFyaWF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAnbXVsdGlsaW5lJwogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ211bHRpbGluZSciCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InZhcmlhdGlvbi1tdWx0aWxpbmUiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9IgogICAgICAgICAgICAgICAgICAgICAgICBuZXdfcmVzcG9uc2UudmFyaWF0aW9uICE9ICdyYW5kb20nICYmCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ211bHRpbGluZScKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfcmVzcG9uc2VfdmFyaWF0aW9uKG5ld19yZXNwb25zZS5pZCwgJ3JhbmRvbScpCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9Im5ld19yZXNwb25zZS52YXJpYXRpb24gIT0gJ3JhbmRvbSciCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InZhcmlhdGlvbi1yYW5kb20iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgcmFuZG9tCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ2ltYWdlJyI+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciPkltYWdlIFJlc3BvbnNlIDo8L3A+CiAgICAgICAgICAgICAgICA8IS0tIDxwPkVudGVyIE5hbWUgKE9wdGlvbmFsKTwvcD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciIHR5cGU9InRleHQiIHYtbW9kZWw9Im5ld19yZXNwb25zZS5pbWFnZV9uYW1lIj4gLS0+CiAgICAgICAgICAgICAgICA8IS0tIDxwIGNsYXNzPSJtYi0wIj5JbWFnZSBzb3VyY2UgOjwvcD4gLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTMgbXQtMyBtYi0zIj4KICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkFkZCBJbWFnZSB1cmwiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdfcmVzcG9uc2Uuc291cmNlIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iY2hlY2tfaW1hZ2VfdXJsKG5ld19yZXNwb25zZS5zb3VyY2UpID09IGZhbHNlICYmIEJvb2xlYW4obmV3X3Jlc3BvbnNlLnNvdXJjZSkiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHJlZCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogOHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgUGxlYXNlIGVudGVyIGEgdmFsaWQgaW1hZ2UgVVJMIGluIHBuZyBvciBqcGcgZm9ybWF0IG9ubHkuCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0ibmV3X3Jlc3BvbnNlLnR5cGUgPT0gJ3ZpZGVvJyI+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciPgogICAgICAgICAgICAgICAgICBWaWRlbyBSZXNwb25zZSA6IHt7IG5ld19yZXNwb25zZS5pZCB9fQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcHgtMyBweS0zIG10LTMgbWItMyI+CiAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJBZGQgVmlkZW8gdXJsIChJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgZW1iZWQgbGluay4pIgogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJuZXdfcmVzcG9uc2Uuc291cmNlIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iY2hlY2tfdmlkZW9fdXJsKG5ld19yZXNwb25zZS5zb3VyY2UpID09PSBmYWxzZSAmJiBCb29sZWFuKG5ld19yZXNwb25zZS5zb3VyY2UpIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiByZWQgIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDhweCAhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFBsZWFzZSBlbnRlciBhIHZhbGlkIHZpZGVvIHVybC4KICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiB2LWlmPSJuZXdfcmVzcG9uc2UudHlwZSA9PSAnY2hvaWNlcyciPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InN1Yl9oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgQ2hvaWNlIFJlc3BvbnNlIDoge3sgbmV3X3Jlc3BvbnNlLmlkIH19CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8IS0tIDxkaXY+CiAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciByZXNwb25zZSB0ZXh0IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJSIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im5ld19yZXNwb25zZS50aXRsZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvZGl2PiAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1idXR0b24tYm94IHB4LTMgcHktMiBtdC0zIG1iLTMiPgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogYmxvY2s7IG1hcmdpbi1ib3R0b206IDFyZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHJlc3BvbnNlLCBudW0pIGluIG5ld19yZXNwb25zZS5jaG9pY2VzIgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJudW0iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBweC0zIHB5LTMgbXQtMyBtYi0zIgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im10LTAgY2hvaWNlLWxhYmVsIiBzdHlsZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgID5UaXRsZTo8L2xhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyOyBmbG9hdDogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIG1sLWF1dG8gbXItMCIKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUmVtb3ZlIENob2ljZSBSZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJuZXdfcmVzcG9uc2UuY2hvaWNlcy5sZW5ndGggPiAxIgogICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fYXNzaXN0YW50X3Jlc3BvbnNlX2Nob2ljZV9saXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVtb3ZlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAmdGltZXM7PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09InJlc3BvbnNlLnRpdGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJ0aXRsZSBvZiB0aGUgYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJSAhaW1wb3J0YW50OyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTIgbWItMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjaG9pY2UtbGFiZWwiIHN0eWxlPSIiPlZhbHVlOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0icmVzcG9uc2UucGF5bG9hZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idmFsdWUgdG8gYmUgcGFzc2VkIHdoZW4gY2xpY2tlZCBvbiBidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlICFpbXBvcnRhbnQ7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOiA2cHg7IG1hcmdpbi1ib3R0b206IDVweCI+CiAgICAgICAgICAgICAgICAgICAgICBBZGQgY2hvaWNlCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKSAwJSAwJSBuby1yZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJveDsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZF90b19hc3Npc3RhbnRfcmVzcG9uc2VfY2hvaWNlX2xpc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLmlkCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGhyIHN0eWxlPSJtYXJnaW46IDEwcHggMHB4IiAvPgogICAgICAgICAgICAgIDwhLS0gPHZ1ZS1lZGl0b3IKICAgICAgICAgICAgICAgIFdISUxFIFNBVklORyBERVRBSUxTIEFERCBWQUxJREFUSU9OIEFERE5PREUoKQogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhc3Npc3RhbnRfcmVzcG9uc2VbaW5kZXhdIgogICAgICAgICAgICAgICAgICA6ZWRpdG9yVG9vbGJhcj0iY3VzdG9tVG9vbGJhciIKICAgICAgICAgICAgICAgID48L3Z1ZS1lZGl0b3I+IC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciPlNlbGVjdCBhIHJlc3BvbnNlIHR5cGUgZmlyc3QgOjwvcD4KICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlbGVjdGVkX3Jlc3BvbnNlX3R5cGUiCiAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDBweDsKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNXB4OwogICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsKICAgICAgICAgICAgICAgICAgcGFkZGluZzogMHB4OwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zb3VyY2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPG9wdGlvbgogICAgICAgICAgICAgICAgICB2LWZvcj0iKG9wdGlvbiwgaW5kZXgpIGluIGFzc2lzdGFudF9yZXNwb25zZV90eXBlIgogICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgOnZhbHVlPSJvcHRpb24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIHt7IG9wdGlvbiB9fQogICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgPCEtLSA8L2Rpdj4gLS0+CiAgICAgICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPSJkLWZsZXgiPiAtLT4KICAgICAgICAgICAgICA8cCBjbGFzcz0ic3ViX2hlYWRpbmciIHN0eWxlPSJtYXJnaW4tbGVmdDogMjBweCI+CiAgICAgICAgICAgICAgICBBZGQgcmVzcG9uc2UKICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAtMTRweDsKICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50IHVybCgnQHBvcnRhbC9hc3NldHMvaW1nL3BsdXMucG5nJykKICAgICAgICAgICAgICAgICAgICAwJSAwJSBuby1yZXBlYXQgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF9ub3RpZmljYXRpb25fc3VjY2Vzc2Z1bF90b19hc3Npc3RhbnRfcmVzcG9uc2UoJ3Vuc3VjY2Vzc2Z1bCcpIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvYmxhY2tfcGx1cy5wbmciIGFsdD0iIiAvPgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgIDxhIGhyZWY9IiMiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGNsYXNzPSJidG4iPkNsb3NlPC9hPgogICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSI+U2F2ZSBjaGFuZ2VzPC9hPgogICAgICAgIDwvZGl2PiAtLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBjbGFzcz0ibW9kYWwiCiAgICBpZD0iaW5zZXJ0X3ZhcmlhYmxlX21vZGFsIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJpbnNlcnRfdmFyaWFibGVfbW9kYWwiCiAgPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCBtb2RhbC1zbSIgcm9sZT0iZG9jdW1lbnQiPgogICAgICA8ZGl2IAogICAgICAgIGNsYXNzPSJtb2RhbC1jb250ZW50IiAKICAgICAgICBzdHlsZT0iYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxtdWx0aXNlbGVjdAogICAgICAgICAgICAgIGlkPSJpbnNlcnRfdmFyaWFibGVfaWQiCiAgICAgICAgICAgICAgOmNsb3NlLW9uLXNlbGVjdD0iZmFsc2UiCiAgICAgICAgICAgICAgOm9wdGlvbnM9Imluc2VydF9zbG90X3ZhcmlhYmxlX29wdGlvbnMiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlbGVjdCBWYXJpYWJsZSIKICAgICAgICAgICAgICA6c2hvdy1sYWJlbHM9ImZhbHNlIgogICAgICAgICAgICAgIG9wZW4tZGlyZWN0aW9uPSJ0b3AiCiAgICAgICAgICAgICAgOm1heC1oZWlnaHQ9IjEyMCIKICAgICAgICAgICAgICBAb3Blbj0iYWRkX3RvX2luc2VydF9zbG90X3ZhcmlhYmxlX29wdGlvbnMiCiAgICAgICAgICAgICAgQGlucHV0PSJpbnNlcnRfc2xvdF92YXJpYWJsZV90b19hc3Npc3RhbmNlX3Jlc3BvbnNlKCRldmVudCkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPC9tdWx0aXNlbGVjdD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYKICAgIGNsYXNzPSJtb2RhbCIKICAgIGlkPSJtYW5hZ2VfaGFuZGxlcnNfaW5zZXJ0X3ZhcmlhYmxlX21vZGFsIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJtYW5hZ2VfaGFuZGxlcnNfaW5zZXJ0X3ZhcmlhYmxlX21vZGFsIgogID4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtc20iIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgPGRpdiAKICAgICAgICBjbGFzcz0ibW9kYWwtY29udGVudCIgCiAgICAgICAgc3R5bGU9ImJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8ZGl2PgogICAgICAgICAgICA8bXVsdGlzZWxlY3QKICAgICAgICAgICAgICBpZD0ibWFuYWdlX2hhbmRsZXJzX2luc2VydF92YXJpYWJsZV9pZCIKICAgICAgICAgICAgICA6Y2xvc2Utb24tc2VsZWN0PSJmYWxzZSIKICAgICAgICAgICAgICA6b3B0aW9ucz0iaW5zZXJ0X3Nsb3RfdmFyaWFibGVfb3B0aW9ucyIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VsZWN0IFZhcmlhYmxlIgogICAgICAgICAgICAgIDpzaG93LWxhYmVscz0iZmFsc2UiCiAgICAgICAgICAgICAgb3Blbi1kaXJlY3Rpb249InRvcCIKICAgICAgICAgICAgICA6bWF4LWhlaWdodD0iMTIwIgogICAgICAgICAgICAgIEBvcGVuPSJhZGRfdG9faW5zZXJ0X3Nsb3RfdmFyaWFibGVfb3B0aW9ucyIKICAgICAgICAgICAgICBAaW5wdXQ9Im1hbmFnZV9oYW5kbGVyc19pbnNlcnRfc2xvdF92YXJpYWJsZV90b19hc3Npc3RhbmNlX3Jlc3BvbnNlKCRldmVudCkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgPC9tdWx0aXNlbGVjdD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4K"},null]}