{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NewIntentPage.vue?vue&type=template&id=5c726154&scoped=true&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NewIntentPage.vue","mtime":1655807120953},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdj4KICAgIDxkaXYgY2xhc3M9ImRhc2gtY29udCI+CiAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiIGlkPSJzcGlubmVyIiB2LXNob3c9InNwaW5uZXJPbiI+PC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBkYXNoLWNhcmQiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iY2FyZC1oZWFkZXIgZC1ibG9jayBkLXNtLWZsZXggZmxleC13cmFwIGp1c3RpZnktY29udGVudC1iZXR3ZWVuIgogICAgICAgICAgPgogICAgICAgICAgICA8aDQgY2xhc3M9Im1iLXNtLTAiPnt7dGx0KCdpbnRlbnRfcGFnZV90aXRsZScpfX08L2g0PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWFjdCBkLWZsZXggZmxleC13cmFwIj4KICAgICAgICAgICAgICA8IS0tIGZvciBzZWFyY2ggLWhhcnNoIC0tPgogICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBzZWFyY2gtYmFyIgogICAgICAgICAgICAgICAgaWQ9InNlYXJjaF9iYXIiCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIGhlcmUiCiAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09InNlYXJjaF9uYW1lIgogICAgICAgICAgICAgICAgdi1vbjprZXl1cD0iY2FsbHNlYXJjaCIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICB2LWlmPSJpc1Zpc2libGVTZWFyY2hDbGVhciIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYmctdHJhbnNwYXJlbnQgbXQtYXV0byBtYi1hdXRvIHB5LTAiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImNsZWFyX3NlYXJjaF9uYW1lIgogICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAtNDBweDsgei1pbmRleDogMTAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvY2xvc2UtaWNuLnBuZyIgYWx0IC8+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgICAgQGNsaWNrPSJpc0VkaXRJbnRlbnQgPyB2ZXJpZnlfY2hhbmdlcygpIDogc2VhcmNoX2ludGVudCgpIgogICAgICAgICAgICAgICAgaWQ9InNlYXJjaF9idG4iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIgogICAgICAgICAgICAgICAgICB3aWR0aD0iMTQiCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTQiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgZD0iTTEzLjgwOTAxMTMyNzEwMDA3MSwxMi45NjU1MDU0MzU2MDE0NzIgTDkuMzA5MTAwMTIxMTc4MjMsOC40OTMzMDY2NDg1NDE5OSBDMTAuMDA3MzkyMDc5NTg2NTg0LDcuNTk2MTExNTg5NjA1NTIxIDEwLjM4NTEyODE3NjE5NDU4LDYuNDk5MTU3MTcwMTM4MTA2IDEwLjM4NTEyODE3NjE5NDU4LDUuMzQ1Mzc0NjU2NzI2NTMyIGMwLC0xLjM4MTA5NDg4OTE4ODE4MDIgLTAuNTQyMzQ1ODYzNDc4NDUxNCwtMi42NzYwODY2MDU3MzM3MDUgLTEuNTIzMDczNTI3MTQ4NzQ5LC0zLjY1MjQ5NjU4MzUwMTQwODMgYy0wLjk4MDcyNzY2MzY3MDI5NzYsLTAuOTc2NDA5OTc3NzY3NzAzMyAtMi4yODcyMDkzOTIzMDUyODksLTEuNTEzNjkzNzc1MDU3ODY4NSAtMy42NzUxMjk2MzcxODE0NTI2LC0xLjUxMzY5Mzc3NTA1Nzg2ODUgcy0yLjY5NDQwMTk3MzUxMTE1NDQsMC41MzkwMDU4NjA3NDMwMTc4IC0zLjY3NTEyOTYzNzE4MTQ1MjYsMS41MTM2OTM3NzUwNTc4Njg1IEMwLjUyOTMzNDk3NjYyNDUxNzksMi42Njc1NjU5ODc1Mzk5NzUgLTAuMDExMjc4MTUyNDY1ODIwMzE2LDMuOTY0Mjc5NzY3NTM4MzU3NiAtMC4wMTEyNzgxNTI0NjU4MjAzMTYsNS4zNDUzNzQ2NTY3MjY1MzIgYzAsMS4zNzkzNzI4MjU3MzUzMjczIDAuNTQyMzQ1ODYzNDc4NDUxNCwyLjY3NzgwODY2OTE4NjU1NzUgMS41MjMwNzM1MjcxNDg3NDksMy42NTI0OTY1ODM1MDE0MDgzIEMyLjQ5MjUyMzAzODM1MzIyMiw5Ljk3NDI4MTIxNzk5NTY0OCAzLjc5NzI3MjAzMjYwMDEwNDQsMTAuNTExNTY1MDE1Mjg1ODEgNS4xODY5MjUwMTE4NjQzOCwxMC41MTE1NjUwMTUyODU4MSBjMS4xNjA5MzIwNDAwMzM3NDUsMCAyLjI2Mjk1MTExMDg3MTc0NzUsLTAuMzc1NDA5ODMyNzIxOTc0MzcgMy4xNjU3MDU3MjcwNzcwOTIsLTEuMDY3Njc5MzQwNzY4OTE3MSBsNC40OTk5MTEyMDU5MjE4NDQsNC40NzA0NzY3MjM2MDY2MjggYTAuMTQyMDg0MjE5ODI1MDI1NywwLjE0MTIwOTIwMzEzMzk1MzYzIDAgMCAwIDAuMjAwOTk3MTg5MDIwNzY4MDUsMCBsMC43NTU0NzIxOTMyMTU5OTA0LC0wLjc0OTA5NzYwMTk5MTA5NTUgYTAuMTQyMDg0MjE5ODI1MDI1NywwLjE0MTIwOTIwMzEzMzk1MzYzIDAgMCAwIDAsLTAuMTk5NzU5MzYwNTMwOTU5MDUgek03LjkzMTU3NjI4MjYzMDcyOCw4LjA3MzEyMzE2NjA0NTgzNiBDNy4xOTY4OTY5MDIwNzIwNTgsOC44MDE1NTYwMDY2MDI2OSA2LjIyMzEwMDE3NTk1NDIwNTUsOS4yMDI3OTY3OTExMTc0NiA1LjE4NjkyNTAxMTg2NDM4LDkuMjAyNzk2NzkxMTE3NDYgcy0yLjAwOTk3MTg5MDIwNzY3NzUsLTAuNDAxMjQwNzg0NTE0NzcwNiAtMi43NDQ2NTEyNzA3NjYzNDcsLTEuMTI5NjczNjI1MDcxNjI4NiBDMS43MDkzMjcwOTQ5Mjc0NzgsNy4zNDI5NjgyNjIwMzYxMjEgMS4zMDU1OTk5ODI0OTc4Mzc1LDYuMzc1MTY4NjAxNTMyNjggMS4zMDU1OTk5ODI0OTc4Mzc1LDUuMzQ1Mzc0NjU2NzI2NTMyIHMwLjQwMzcyNzExMjQyOTY0NTgsLTEuOTk5MzE1NjY4NzYyNDQgMS4xMzY2NzM3NTg2MDAyMDM2LC0yLjcyNzc0ODUwOTMxOTI5OCBDMy4xNzY5NTMxMjE2NTY3MDI2LDEuODg5MTkzMzA2ODUwMzgxNyA0LjE1MDc0OTg0Nzc3NDU2MiwxLjQ4Nzk1MjUyMjMzNTYwNjcgNS4xODY5MjUwMTE4NjQzOCwxLjQ4Nzk1MjUyMjMzNTYwNjcgczIuMDExNzA0NjI0NTk1Nzg4NCwwLjM5OTUxODcyMTA2MTkxNzUgMi43NDQ2NTEyNzA3NjYzNDcsMS4xMjk2NzM2MjUwNzE2Mjg2IFM5LjA2ODI1MDA0MTIzMDkzLDQuMzE1NTgwNzExOTIwMzg1IDkuMDY4MjUwMDQxMjMwOTMsNS4zNDUzNzQ2NTY3MjY1MzIgcy0wLjQwMzcyNzExMjQyOTY0NTgsMS45OTkzMTU2Njg3NjI0NCAtMS4xMzY2NzM3NTg2MDAyMDM2LDIuNzI3NzQ4NTA5MzE5Mjk4IHoiCiAgICAgICAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICBpZD0iYWRkX2ludGVudF9idG4iCiAgICAgICAgICAgICAgICB0aXRsZT0iQWRkIG5ldyBJbnRlbnQiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF92YXJpYW50X29wZW5fbW9kYWwoKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjE0IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjEzLjk5NyIKICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDE0IDEzLjk5NyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICBpZD0iVW5pb25fMTMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1uYW1lPSJVbmlvbiAxMyIKICAgICAgICAgICAgICAgICAgICBkPSJNLTEyNjg0LDIwNTh2LTVoLTVhMSwxLDAsMCwxLTEtMSwxLDEsMCwwLDEsMS0xaDV2LTVhMSwxLDAsMCwxLDEtMSwxLDEsMCwwLDEsMSwxdjVoNWExLDEsMCwwLDEsMSwxLDEsMSwwLDAsMS0xLDFoLTV2NWExLDEsMCwwLDEtMSwxQTEsMSwwLDAsMS0xMjY4NCwyMDU4WiIKICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMjY5MC4wMDEgLTIwNDUuMDAyKSIKICAgICAgICAgICAgICAgICAgICBmaWxsPSIjZmZmIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICB7e3RsdCgnaW50ZW50X3BhZ2VfYWRkX2ludGVudF9idG4nKX19CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgICAgIHRpdGxlPSJVcGxvYWQgRmlsZSIKICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgIEBjbGljaz0idXBsb2FkX2ZpbGVfb3Blbl9tb2RhbCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjE0IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE0IgogICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgMTQgMTMuOTk3IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgIGQ9Ik04LjY5Mzk5NDY1OTU0MjgsLTAuMDE0MDc0NjQ3Njg1NTg5NTI5IEgxLjgzMDc1MzQxOTM3ODY1NzcgYTEuNzE1ODEwMzEwMDQxMDM1OCwxLjM4NzMzMjg3MzgzOTU0IDAgMCAwIC0xLjcxNTgxMDMxMDA0MTAzNTgsMS4zODczMzI4NzM4Mzk1NCB2MTEuMDk4NjYyOTkwNzE2MzIgYTEuNzE1ODEwMzEwMDQxMDM1OCwxLjM4NzMzMjg3MzgzOTU0IDAgMCAwIDEuNzE1ODEwMzEwMDQxMDM1OCwxLjM4NzMzMjg3MzgzOTU0IGgxMC4yOTQ4NjE4NjAyNDYyMTUgYTEuNzE1ODEwMzEwMDQxMDM1OCwxLjM4NzMzMjg3MzgzOTU0IDAgMCAwIDEuNzE1ODEwMzEwMDQxMDM1OCwtMS4zODczMzI4NzM4Mzk1NCBWNC4xNDc5MjM5NzM4MzMwMzEgbC01LjE0NzQzMDkzMDEyMzEwNywtNC4xNjE5OTg2MjE1MTg2MiB6bS0wLjQyODk1MjU3NzUxMDI1OTU2LDkuNzExMzMwMTE2ODc2NzggdjIuMDgwOTk5MzEwNzU5MzEgaC0yLjU3MzcxNTQ2NTA2MTU1Mzcgdi0yLjA4MDk5OTMxMDc1OTMxIEgzLjU0NjU2MzcyOTQxOTY5MzQgbDMuNDMxNjIwNjIwMDgyMDcxNiwtMi43NzQ2NjU3NDc2NzkwOCBsMy40MzE2MjA2MjAwODIwNzE2LDIuNzc0NjY1NzQ3Njc5MDggaC0yLjE0NDc2Mjg4NzU1MTI5NDcgek03LjgzNjA4OTUwNDUyMjI4Myw0Ljg0MTU5MDQxMDc1MjgwMSBWMS4wMjY0MjUwMDc2OTQwNjU3IEwxMi41NTQ1Njc4NTcxMzUxMzEsNC44NDE1OTA0MTA3NTI4MDEgSDcuODM2MDg5NTA0NTIyMjgzIHoiCiAgICAgICAgICAgICAgICAgICAgaWQ9InN2Z18xIgogICAgICAgICAgICAgICAgICAgIGNsYXNzCiAgICAgICAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICBAY2xpY2s9ImRvd25sb2FkX2NzdiIKICAgICAgICAgICAgICAgIHRpdGxlPSJEb3dubG9hZCBDU1YgRmlsZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiCiAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNCIKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICBkPSJNOC4xMjQwNDY1Njk3OTY0NDgsMy43MDQ4ODg4NDIzODExNTYzIFYtMC4wMDA0NzI1MDg1NjkyNTkwMzE5IEgwLjg2ODQ0ODAyNzUzMjM3NTggQzAuMzg1OTUwNzI0NDcxODE2LC0wLjAwMDQ3MjUwODU2OTI1OTAzMTkgLTAuMDAyMjIzNzk3NTM5MzA5NDY2NSwwLjI5MTA1MjI0NDc3NzU3NjEzIC0wLjAwMjIyMzc5NzUzOTMwOTQ2NjUsMC42NTM0MTQ3ODg2NTcyODI5IHYxMi42NDE4MjEwNzk3MTMxNzMgYzAsMC4zNjIzNjI1NDM4Nzk3MTAzIDAuMzg4MTc0NTIyMDExMTI4OSwwLjY1Mzg4NzI5NzIyNjU0NDIgMC44NzA2NzE4MjUwNzE2ODg2LDAuNjUzODg3Mjk3MjI2NTQ0MiBoMTIuMTg5NDA1NTUxMDAzNjQgYzAuNDgyNDk3MzAzMDYwNTYxOSwwIDAuODcwNjcxODI1MDcxNjg4NiwtMC4yOTE1MjQ3NTMzNDY4MzQ2IDAuODcwNjcxODI1MDcxNjg4NiwtMC42NTM4ODcyOTcyMjY1NDQyIFY0LjM1ODc3NjEzOTYwNzY5NyBIOC45OTQ3MTgzOTQ4NjgxMzcgYy0wLjQ3ODg2OTUwMzc4OTQyODgzLDAgLTAuODcwNjcxODI1MDcxNjg4NiwtMC4yOTQyNDkyODM3NTE5NDQ5IC0wLjg3MDY3MTgyNTA3MTY4ODYsLTAuNjUzODg3Mjk3MjI2NTQ0MiB6bTIuNzczNDUyNTQyNzgwNDQyLDUuNzU4NTY3NDY0MjQxNzYxIGwtMy40OTc5MjQwNTcyMjU1MDgsMi42MDczNzU1OTc2OTA4NDE1IGMtMC4yNDEyNDg2NTE1MzAyODA2MywwLjE4MDA5MTQ1OTc3NzgxMDcxIC0wLjYzMDg3NDI5MzI0OTg2MTQsMC4xODAwOTE0NTk3Nzc4MTA3MSAtMC44NzIxMjI5NDQ3ODAxNDIsMCBsLTMuNDk3OTI0MDU3MjI1NTA4LC0yLjYwNzM3NTU5NzY5MDg0MTUgQzIuNjYxMzA2NDI3MzI1ODI5LDkuMTg5MDk2MDk0ODI4Mjc4IDIuOTE5NjA1NzM1NDMwNDMzNyw4LjcxODAyNDc4Nzc4NDY1NSAzLjQzNzY1NTQ3MTM0ODA4NCw4LjcxODAyNDc4Nzc4NDY1NSBINS44MDIyNTUwMzYyNzE5NDcgdi0yLjE3OTYyNDMyNDA4ODQ3ODMgYzAsLTAuMjQwODQ4NDg3ODExNzc3MzQgMC4yNTk3NTA0Mjc4MTMwNTQzLC0wLjQzNTkyNDg2NDgxNzY5NjYgMC41ODA0NDc4ODMzODExMjY5LC0wLjQzNTkyNDg2NDgxNzY5NjYgaDEuMTYwODk1NzY2NzYyMjUyMSBjMC4zMjA2OTc0NTU1NjgwNzI1LDAgMC41ODA0NDc4ODMzODExMjY5LDAuMTk1MDc2Mzc3MDA1OTE5NiAwLjU4MDQ0Nzg4MzM4MTEyNjksMC40MzU5MjQ4NjQ4MTc2OTY2IHYyLjE3OTYyNDMyNDA4ODQ3ODMgaDIuMzY0NTk5NTY0OTIzODYyNSBjMC41MTgwNDk3MzU5MTc2NTUxLDAgMC43NzYzNDkwNDQwMjIyNTU0LDAuNDcxMDcxMzA3MDQzNjIyOTMgMC40MDg4NTI5Nzc4NTY1ODE2LDAuNzQ1NDMxNTE4ODM4MjYxMSB6TTEzLjY3NDU3OTQ1NDYyODQ2MiwyLjg2MDI4NDQxNjc5Njg3IEwxMC4xMjI5NjM5NjgxOTAxOTksMC4xOTAyNDQ2MTk3ODg0ODUyIGMtMC4xNjMyNTA5NjcyMDA5NDE5NSwtMC4xMjI2MDM4NjgyMjk5NzcxOCAtMC4zODQ1NDY3MjI3Mzk5OTY0NiwtMC4xOTA3MTcxMjgzNTc3NDIzIC0wLjYxNjcyNTg3NjA5MjQ0NjMsLTAuMTkwNzE3MTI4MzU3NzQyMyBIOS4yODQ5NDIzMzY1NTg3MDIgdjMuNDg3Mzk4OTE4NTQxNTY0NCBoNC42NDM1ODMwNjcwNDkwMDcgdi0wLjE2NjE5NjM1NDcxMTc0Njg1IGMwLC0wLjE3MTY0NTQxNTUyMTk2ODEgLTAuMDkwNjk0OTgxNzc4MzAwOTYsLTAuMzM3ODQxNzcwMjMzNzE0ODcgLTAuMjUzOTQ1OTQ4OTc5MjQzMSwtMC40NjA0NDU2Mzg0NjM2OTEzNSB6IgogICAgICAgICAgICAgICAgICAgIGZpbGw9IiNmZmYiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0idHJhaW5fbW9kZWxfYnRuIiBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgICBAY2xpY2s9ImlzRWRpdEludGVudCA/IHZlcmlmeV9jaGFuZ2VzKCkgOiB0cmFpbl9tb2RlbCgpIgogICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImludGVudF9jb3JlX21vZGVsX2lucHJvZ3Jlc3MgPT0gdHJ1ZSIKICAgICAgICAgICAgICAgOnN0eWxlPSJzaG93X21vZGVsX3Byb2dyZXNzKCdzdHlsZScpIgogICAgICAgICAgICAgICA6dGl0bGU9InNob3dfbW9kZWxfcHJvZ3Jlc3MoJ3RpdGxlJykiPgogICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3Bpbm5lciBmYS1zcGluIiB2LXNob3c9ImludGVudF9jb3JlX21vZGVsX2lucHJvZ3Jlc3MiPjwvaT4KICAgICAgICAgICAgICAgIHt7dGx0KCdpbnRlbnRfcGFnZV90cmFpbl9tb2RlbF9idG4nKX19CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICAgIGNsYXNzPSJyZWQtYnRuIgogICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxldGVfc2VsZWN0ZWQiCiAgICAgICAgICAgICAgICBpZD0iZGVsZXRlX2ludGVudCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjE0IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE0IgogICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgMTQgMTQiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgZD0iTTguMzc1LDN2Ljc3OEg0VjUuMzMzaC44NzVWMTUuNDQ0QTEuNjYxLDEuNjYxLDAsMCwwLDYuNjI1LDE3aDguNzVhMS42NjEsMS42NjEsMCwwLDAsMS43NS0xLjU1NlY1LjMzM0gxOFYzLjc3OEgxMy42MjVWM0g4LjM3NU02LjYyNSw1LjMzM2g4Ljc1VjE1LjQ0NEg2LjYyNVY1LjMzM20xLjc1LDEuNTU2djdoMS43NXYtN0g4LjM3NW0zLjUsMHY3aDEuNzV2LTdaIgogICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKC00IC0zKSIKICAgICAgICAgICAgICAgICAgICBmaWxsPSIjZmZmIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICB7e3RsdCgnaW50ZW50X3BhZ2VfZGVsZXRlX2J0bicpfX0KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiIGlkPSJwYWdlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGQtZmxleCBweC0wIiB2LXNob3c9ImludGVudGxpc3QubGVuZ3RoID4gMCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgcGwtMCIgdi1zaG93PSJpbnRlbnRsaXN0Lmxlbmd0aCA+IDAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtYm94Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtcmVzcG9uc2l2ZSI+CiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWNoZWNrIGNoZWNrYm94IGNoZWNrYm94LXN1Y2Nlc3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tY2hlY2stbGFiZWwiIDpzdHlsZT0iY2hrX2NieF9jcnNyKCdhbGwnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jaGVjay1pbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJzZWxlY3RhbGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9InNlbGVjdGVkX2ludGVudHMoJ2FsbCcpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJjaGVja19zZWxlY3RfYWxsX2ludGVudHNfY2J4X2Rpc2FibGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiIgdi1pZj0iY2hlY2tfc2VsZWN0X2FsbF9pbnRlbnRzX2NieF9kaXNhYmxlZCIgc3R5bGU9ImJhY2tncm91bmQ6I2JiYjsgYm9yZGVyOnNvbGlkIDFweCAjZTVlNWU1OyI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIHYtZWxzZT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0idGV4dC1sZWZ0Ij57e3RsdCgnaW50ZW50X3RhYmxlX2hlYWRlcicpfX08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihpbnRlbnRzLCBpbmRleCkgaW4gaW50ZW50bGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9ImNoZWNrX2N1cnJlbnRfaW50ZW50KGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tY2hlY2sgY2hlY2tib3gtc3VjY2VzcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNoZWNrLWxhYmVsIGNoZWNrYm94IGNoZWNrYm94LXN1Y2Nlc3MiIDpzdHlsZT0iY2hrX2NieF9jcnNyKGludGVudHMuSW50ZW50KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY2hlY2staW5wdXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ2ludGVudF9jaGVja2JveF8nK2ludGVudHMuSW50ZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0ic2VsZWN0ZWRfaW50ZW50cyhpbnRlbnRzLkludGVudCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0X3JldGFpbF9pbnRlbnRzLmluY2x1ZGVzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudHMuSW50ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIHYtaWY9ImRlZmF1bHRfcmV0YWlsX2ludGVudHMuaW5jbHVkZXMoaW50ZW50cy5JbnRlbnQpIiBzdHlsZT0iYmFja2dyb3VuZDojYmJiOyBib3JkZXI6c29saWQgMXB4ICNlNWU1ZTU7Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiIgdi1lbHNlPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJpc0VkaXRJbnRlbnQgPyB2ZXJpZnlfY2hhbmdlcygpIDogc2hvd19pbnRlbnRzKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT0iaW50ZW50cy5JbnRlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaW50ZW50cy5JbnRlbnQgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS04IHByLTAiIGlkPSJlZGl0LWludGVudC1ib3giIHYtc2hvdz0iaW50ZW50bGlzdC5sZW5ndGggPiAwIj4KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkICNkYmUyZTgiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxoNT48cCBjbGFzcz0ibXQtMiBtYi0wIj57e3RsdCgnaW50ZW50X3BhZ2VfZGV0YWlsX2hlYWRlcicpfX08L3A+PC9oNT4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZWRpdF9pbnRlbnRfZGV0YWlscyIKICAgICAgICAgICAgICAgICAgICAgICAgdi1odG1sPSJwZW5jaWxfc3ZnIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWwtYXV0byBtci0yIG10LTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJlZGl0LWludGVudC1jdXJzb3IiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgICAgIDwhLS0gPEVESVQgSU5URU5UL1NIT1cgSU5URU5UPiAtLT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMXJlbSI+CiAgICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIj4KICAgICAgICAgICAgICAgICAgICAgICAge3t0bHQoJ2ludGVudF9wYWdlX25hbWVfbGFiZWwnKX19IAogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJwbC0xIiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiIHYtaWY9ImlzRWRpdEludGVudCI+e3t0bHQoJ2ludGVudF9wYWdlX25hbWVfZGVzY19sYWJlbCcpfX08L2g2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0iIWlzRWRpdEludGVudCIgc3R5bGU9InBhZGRpbmctbGVmdDogMjBweCI+CiAgICAgICAgICAgICAgICAgICAgICA8cD57eyBjdXJyZW50X3NlbGVjdGVkX2ludGVudCB9fTwvcD4KICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gdi1odG1sPSJjdXJyZW50X2ludGVudF9yZXNwb25zZSI+PC9zcGFuPiAtLT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlLWlmPSJpc0VkaXRJbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduPSJyaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBlZGl0IgogICAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9Im9mZiIKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIEludGVudCIKICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImVudGVyX2ludGVudF9pZF9lZGl0IgogICAgICAgICAgICAgICAgICAgICAgICB2LW9uOmtleXVwPSJlbnRlcmludGVudGlkX2VkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50IgogICAgICAgICAgICAgICAgICAgICAgICBAa2V5ZG93bj0iaW50ZW50X25hbWVfY2hlY2tfc3BlY2lhbF9jaGFyYWN0ZXJzKCRldmVudCkiCiAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iKGRlZmF1bHRfcmV0YWlsX2ludGVudHMuaW5jbHVkZXMoY3VycmVudF9zZWxlY3RlZF9pbnRlbnQpKSAgICYmIChjdXJyZW50X3NlbGVjdGVkX2ludGVudCA9PT0gY3VycmVudF9zZWxlY3RlZF9pbnRlbnRfaGlnaGxpZ2h0KSAiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJpbnRlbnRfYWxyZWFkeV9leGlzdHNfZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiByZWQiCiAgICAgICAgICAgICAgICAgICAgICAgID57e3RsdCgnaW50ZW50X3BhZ2VfbmFtZV9leGlzdF9jb25kaXRpb24nKX19Ljwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0ic2VsZWN0ZWRfaW50ZW50X2Rlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICB7e3RsdCgnaW50ZW50X3BhZ2VfZGVzY3JpcHRpb25fbGFiZWwnKX19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9IiFpc0VkaXRJbnRlbnQiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBzZWxlY3RlZF9pbnRlbnRfZGVzY3JpcHRpb24gfX08L3A+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduPSJyaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGVkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkFkZCBkZXNjcmlwdGlvbiB0byB0aGlzIGludGVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iZW50ZXJfaW50ZW50X2Rlc2NyaXB0aW9uX2lkX2VkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2VsZWN0ZWRfaW50ZW50X2Rlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgcC0wIiBzdHlsZT0icGFkZGluZy1sZWZ0OjE1cHggIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+e3t0bHQoJ2ludGVudF9wYWdlX3F1ZXN0aW9uX2xhYmVsJyl9fTwvcD4KICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgIDwhLS0gPHAgY2xhc3M9IiI+e3sgY3VycmVudF9zZWxlY3RlZF9pbnRlbnQgfX08L3A+IC0tPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPSIhaXNFZGl0SW50ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlNjcm9sbFN0eWxlIiBzdHlsZT0icGFkZGluZy1yaWdodDo4cHggIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3F1ZXN0aW9uLCBpbmRleAogICAgICAgICAgICAgICAgICAgICAgICAgICkgaW4gbmV3X2ludGVudF9xdWVzdGlvbl9saXN0IgogICAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMHJlbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IG5ld19pbnRlbnRfcXVlc3Rpb25fbGlzdFtpbmRleF0gfX0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHA+e3sgc2VsZWN0ZWRfaW50ZW50X3F1ZXN0aW9ucyB9fTwvcD4gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KCiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHN0eWxlPSJmbG9hdDogbGVmdCAhaW1wb3J0YW50O21hcmdpbi10b3A6IDVweCAhaW1wb3J0YW50OyIKICAgICAgICAgICAgICAgICAgICAgICAgPnt7dGx0KCdpbnRlbnRfcGFnZV9xdWVzdGlvbl9kZXNjX2xhYmVsJyl9fTwvbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXNoLW1vZGFsIGNhcmQtYWN0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiBlbmQgIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IC0xMHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA2cHggIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi13cmFwIG10LTAgcHktMCBib3JkZXItdG9wLTAiIHN0eWxlPSJwYWRkaW5nLXJpZ2h0OiAxNXB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhZGRfcXVlc3Rpb25fYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogNXB4IDEwcHg7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF90b19xdWVzdGlvbnNfbGlzdCgnYWRkJykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjE0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTMuOTk3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9IlVuaW9uXzEzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1uYW1lPSJVbmlvbiAxMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik0tMTI2ODQsMjA1OHYtNWgtNWExLDEsMCwwLDEtMS0xLDEsMSwwLDAsMSwxLTFoNXYtNWExLDEsMCwwLDEsMS0xLDEsMSwwLDAsMSwxLDF2NWg1YTEsMSwwLDAsMSwxLDEsMSwxLDAsMCwxLTEsMWgtNXY1YTEsMSwwLDAsMS0xLDFBMSwxLDAsMCwxLTEyNjg0LDIwNThaIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTI2OTAuMDAxIC0yMDQ1LjAwMikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjZmZmIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zYXZlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImVkaXRfaW50ZW50KCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7dGx0KCdpbnRlbnRfcGFnZV9lZGl0X3NhdmVfYnRuMicpfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iU2Nyb2xsU3R5bGUiIHN0eWxlPSJwYWRkaW5nLXJpZ2h0OjhweCAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcXVlc3Rpb24sIGluZGV4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIGluIHNlbGVjdGVkX2ludGVudF9xdWVzdGlvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6ZmxleDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0ic2VsZWN0ZWRfaW50ZW50X3F1ZXN0aW9uc1tpbmRleF0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIFF1ZXN0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9ImBlbnRlcl9xdWVzdGlvbl9pZF8ke2luZGV4fWAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0ic2VsZWN0ZWRfaW50ZW50X3F1ZXN0aW9ucy5sZW5ndGggPiAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXktYXV0byBtbC0yIG1yLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3F1ZXN0aW9uc19saXN0KCdyZW1vdmUnLCBpbmRleCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIHN0eWxlPSJmb250LXNpemU6IDE2cHgiIGNsYXNzPSJmYSI+JiN4ZjAwZDs8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICA8aHIgdi1zaG93PSIhZGVmYXVsdF9yZXRhaWxfaW50ZW50cy5pbmNsdWRlcyh0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50KSI+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz0iaXNfcmVzcG9uc2UgfHwgaXNfZW5kcG9pbnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1zaG93PSIhaXNFZGl0SW50ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiIgdi1zaG93PSJpc19yZXNwb25zZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPnt7dGx0KCdpbnRlbnRfcGFnZV9zYXZlX3Jlc3BfbGFiZWwnKX19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyI+UmVzcG9uc2UgOjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWh0bWw9InNlbGVjdGVkX2ludGVudF9yZXNwb25zZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IC0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4ge3t0bHQoJ2ludGVudF9wYWdlX3NhdmVfcmVzcG9uc2VzX2xhYmVsJyl9fSA8L3N0cm9uZz46CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iU2Nyb2xsU3R5bGUiIHN0eWxlPSJwYWRkaW5nLXJpZ2h0OjhweCAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gdi1odG1sPSJzZWxlY3RlZF9pbnRlbnRfcmVzcG9uc2UiPjwvc3Bhbj4gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Jlc3BvbnNlLCBpbmRleAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIGluIHNlbGVjdGVkX2ludGVudF9yZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBmbGV4OyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3tpbmRleCsxfX0uIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMC41cmVtOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Qtc3R5bGUtcG9zaXRpb246IGluc2lkZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaHRtbD0ic2VsZWN0ZWRfaW50ZW50X3Jlc3BvbnNlW2luZGV4XSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0ge3sgc2VsZWN0ZWRfaW50ZW50X3Jlc3BvbnNlW2luZGV4XSB9fSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOiAxNnB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPiB7e3RsdCgnaW50ZW50X3BhZ2Vfc291cmNlX2xhYmVsJyl9fSA8L3N0cm9uZz46CiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc2VsZWN0ZWRfaW50ZW50X3Jlc3BvbnNlX3NvdXJjZSB9fQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGJyIC8+IC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8cCB2LWlmPSJmaWxlX2xhYmVsMyA9PSAnQ2hvb3NlIGZpbGUnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPnt7dGx0KCdpbnRlbnRfcGFnZV9pbWdfdXJsX2xhYmVsJyl9fTwvc3Ryb25nPiA6IE5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCB2LWVsc2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57e3RsdCgnaW50ZW50X3BhZ2VfaW1nX3VybF9sYWJlbCcpfX08L3N0cm9uZz4gOiB7eyBmaWxlX2xhYmVsMyB9fQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGJyIC8+IC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRfaW50ZW50X3Jlc3BvbnNlX3ZpZGVvID09ICcnIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9pbnRlbnRfcmVzcG9uc2VfdmlkZW8gPT0gW10KICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPnt7dGx0KCdpbnRlbnRfcGFnZV92aWRlb191cmxfbGFiZWwnKX19PC9zdHJvbmc+IDogTm9uZQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1lbHNlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+e3t0bHQoJ2ludGVudF9wYWdlX3ZpZGVvX3VybF9sYWJlbCcpfX08L3N0cm9uZz4gOnt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9pbnRlbnRfcmVzcG9uc2VfdmlkZW8KICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIiB2LXNob3c9ImlzX2VuZHBvaW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUEkgRW5kcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPlVSTDwvc3Ryb25nPiA6IHt7IHVybCB9fTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5BUEkgTWV0aG9kPC9zdHJvbmc+IDoge3sgYXBpX21ldGhvZCB9fTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5SZXF1ZXN0IEpTT048L3N0cm9uZz4gOgogICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHNob3dfanNvbl9yZXF1ZXN0X2RhdGEgfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImVkaXRhYmxlX3ZhbHVlcyAhPSAnJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5SZXF1ZXN0IEpTT04gUGFyYW1ldGVyczwvc3Ryb25nPiA6CiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgZWRpdGFibGVfdmFsdWVzIH19CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0idGFza19pbnB1dF92YWx1ZXMgPT0gJyciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1lbHNlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5UYXNrIElucHV0IFZhbHVlczwvc3Ryb25nPiA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIiBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgYmxhY2siPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJib3JkZXI6IDFweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGU9ImNvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQgVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJhcGlfbWV0aG9kID09ICdQT1NUJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGU9ImNvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWVzdGlvbiB0byBiZSBhc2tlZCBieSB0aGUgY2hhdGJvdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImFwaV9tZXRob2QgPT0gJ0dFVCciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWQgdGFncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHJvdywgaW5kZXgpIGluIHV0dGVyYW5jZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJsaXN0LWdyb3VwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJvcmRlcjogMXB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZT0icm93IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5SYXdTbG90TmFtZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5UZXh0IH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJyZXNwb25zZV9qc29uX2VkaXRhYmxlICE9ICcnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+UmVzcG9uc2UgSnNvbiBFZGl0YWJsZTwvc3Ryb25nPiA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyByZXNwb25zZV9qc29uX2VkaXRhYmxlIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJlbmR1c2VyX21zZ190eXBlICE9IG51bGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5FbmQgVXNlciBNZXNzYWdlIFR5cGU8L3N0cm9uZz4gOgogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgZW5kdXNlcl9tc2dfdHlwZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0ic2hvd19qc29uX3Jlc3BvbnNlX2RhdGEgIT0gJyciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5SZXNwb25zZSBKU09OPC9zdHJvbmc+IDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHNob3dfanNvbl9yZXNwb25zZV9kYXRhIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJyZXNwb25zZV9rZXlfdG9fZW5kdXNlciAhPSAnJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5SZXNwb25zZSBKU09OIHBhcmFtZXRlciBzZW50IHRvIGVuZCB1c2VyPC9zdHJvbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHJlc3BvbnNlX2tleV90b19lbmR1c2VyIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJyZXNwb25zZV9rZXlfZWRpdF9tZXNzYWdlICE9ICcnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+TWVzc2FnZSBXaXRoIFJlc3BvbnNlIEpTT04gUGFyYW1ldGVyPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHt7IHJlc3BvbnNlX2tleV9lZGl0X21lc3NhZ2UgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImVuZF91c2VyX21lc3NhZ2UgIT0gJyciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5FbmQgVXNlciBNZXNzYWdlPC9zdHJvbmc+IDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGVuZF91c2VyX21lc3NhZ2UgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9InVuc3VjY2Vzc2Z1bF9tZXNzYWdlICE9ICcnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+TWVzc2FnZSB0byB1c2VyIHVwb24gZmFpbHVyZTwvc3Ryb25nPiA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB1bnN1Y2Nlc3NmdWxfbWVzc2FnZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiIHYtc2hvdz0iaXNFZGl0SW50ZW50ICYmICghZGVmYXVsdF9yZXRhaWxfaW50ZW50cy5pbmNsdWRlcyh0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50KSB8fCAodGhpcy5jdXJyZW50X3NlbGVjdGVkX2ludGVudCA9PT0gJ3NoaXBwaW5nJyB8fCAnbWVzc2FnaW5nX3BsYXRmb3JtJyB8fCAnY29udGFjdF91cycpKSI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgc3R5bGU9IndpZHRoOiAzMCUiPiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9ImlzX3Jlc3BvbnNlIiBzdHlsZT0id2lkdGg6IDMwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t0bHQoJ2ludGVudF9wYWdlX2VkaXRfcmVzcF9sYWJlbCcpfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9IiFpc19yZXNwb25zZSIgc3R5bGU9IndpZHRoOiAzMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFQSSBFbmRwb2ludAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDwvZGl2PiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPSJyYWRpbyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiA0MCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyYWRpb0J0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZWRpdHN3aXRjaGluZyh0aGlzKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUgRW5kcG9pbnRzIEhlcmU8L2xhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAtLT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz0iaXNfcmVzcG9uc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3t0bHQoJ2ludGVudF9wYWdlX2VkaXRfcmVzcF93aXRoX2ltYWdlJyl9fTo8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNlbnRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDMlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZWRpdF9pbWFnZV9yZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iWWVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+IHt7dGx0KCdpbnRlbnRfZWRpdF9pbWdfeWVzJyl9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZWRpdF9pbWFnZV9yZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iTm8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4ge3t0bHQoJ2ludGVudF9lZGl0X2ltZ19ubycpfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY2VudGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tZmlsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iZWRpdF9pbWFnZV9yZXNwb25zZSA9PSAnWWVzJyIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iZmlsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0PSJpbWFnZS94LXBuZywgaW1hZ2UvZ2lmLCBpbWFnZS9qcGVnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWZpbGUtaW5wdXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9ImZpbGVpbnB1dDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJpbnB1dEdyb3VwRmlsZUFkZG9uMDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyBsaW5lLWhlaWdodDogMTVweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImN1c3RvbS1maWxlLWxhYmVsIGZvcm0tY29udHJvbCBlZGl0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3I9ImZpbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57eyBmaWxlX2xhYmVsMyB9fTwvbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57e3RsdCgnaW50ZW50X3BhZ2VfZWRpdF9yZXNwX3dpdGhfdmlkZW8nKX19OjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2VudGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhZGlvIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMyUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVzX3ZpZGVvX3R5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZWRpdF92aWRlb19yZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iWWVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIiBpZD0icmVzX3ZpZGVvX2ljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e3RsdCgnaW50ZW50X3BhZ2VfZWRpdF92aWRlb195ZXNfb3B0aW9uJyl9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZWRpdF92aWRlb19yZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iTm8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4ge3t0bHQoJ2ludGVudF9lZGl0X3ZpZGVvX25vJyl9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jZW50ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImVkaXRfdmlkZW9fcmVzcG9uc2UgPT0gJ1llcyciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWJvdHRvbTogNSUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZXNfdmlkZW9fdXJsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ1cmwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIG9ubHkgVVJMIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzZWxlY3RlZF9pbnRlbnRfcmVzcG9uc2VfdmlkZW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9ImVtYmVkZGVkX2NoYW5nZV9lZGl0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBzdHlsZT0iZmxvYXQ6IGxlZnQgIWltcG9ydGFudDttYXJnaW4tdG9wOiA1cHggIWltcG9ydGFudDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57e3RsdCgnaW50ZW50X3BhZ2VfZWRpdF9yZXNwX3VzZXJfYnlfYm90X3RleHQnKX19PC9sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGFzaC1tb2RhbCBjYXJkLWFjdCIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiBlbmQgIWltcG9ydGFudDsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLTEwcHggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA2cHggIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCBtdC0wIHB5LTAgYm9yZGVyLXRvcC0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWRkX3F1ZXN0aW9uX2J1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogNXB4IDEwcHg7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fcmVzcG9uc2VfbGlzdCgnYWRkJykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9IlVuaW9uXzEzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iVW5pb24gMTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTS0xMjY4NCwyMDU4di01aC01YTEsMSwwLDAsMS0xLTEsMSwxLDAsMCwxLDEtMWg1di01YTEsMSwwLDAsMSwxLTEsMSwxLDAsMCwxLDEsMXY1aDVhMSwxLDAsMCwxLDEsMSwxLDEsMCwwLDEtMSwxaC01djVhMSwxLDAsMCwxLTEsMUExLDEsMCwwLDEtMTI2ODQsMjA1OFoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTI2OTAuMDAxIC0yMDQ1LjAwMikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NhdmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImVkaXRfaW50ZW50KCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t0bHQoJ2ludGVudF9wYWdlX2VkaXRfc2F2ZV9idG4xJyl9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19yZXNwb25zZSwgaW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgaW4gc2VsZWN0ZWRfaW50ZW50X3Jlc3BvbnNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJzZWxlY3RlZF9pbnRlbnRfcmVzcG9uc2UubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZsb2F0OiByaWdodDsgY3Vyc29yOiBwb2ludGVyOyBtYXJnaW4tcmlnaHQ6IDEycHg7IG1hcmdpbi10b3A6IDEycHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3Jlc3BvbnNlX2xpc3QoJ3JlbW92ZScsIGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIgY2xhc3M9ImZhIj4mI3hmMDBkOzwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2dWUtZWRpdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlbGVjdGVkX2ludGVudF9yZXNwb25zZVtpbmRleF0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDplZGl0b3JUb29sYmFyPSJjdXN0b21Ub29sYmFyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdnVlLWVkaXRvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57e3RsdCgnaW50ZW50X3BhZ2VfZWRpdF9zZWxlY3Rfc291cmNlJyl9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOjZweCA2cHggNnB4IDFyZW0haW1wb3J0YW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2VsZWN0ZWRfaW50ZW50X3Jlc3BvbnNlX3NvdXJjZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc291cmNlIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcHRpb24sIGluZGV4KSBpbiBvcHRpb25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJvcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IG9wdGlvbiB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxFRElUIElOVEVOVCBFTkRQT0lOVD4gLS0+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz0iIWlzX3Jlc3BvbnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWh0bWw9InBvaW50X2NpcmNsZV9zdmciPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWwtMSI+PGI+IFJFUVVFU1QgSlNPTiA8L2I+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlVSTDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBlZGl0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idXJsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFkZF9hcGlfdXJsX2VkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgVVJMIEhlcmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InB0LTEiPk1ldGhvZDo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhZGlvIG1sLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJjb25maWdhcGlfcG9zdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhcGlfbWV0aG9kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJQT1NUIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIiBpZD0iY29uZmlnYXBpX3Bvc3RfaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBPU1QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFwaV9tZXRob2QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IkdFVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPiBHRVQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UmVxdWVzdCBKU09OPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDhweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcD0idG9vbHRpcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9ImJvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkhlbHAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb25maWdhcGltb2RhbDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczpjYz0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbj0iMS4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIC0xMDI4LjQpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0ibTIyIDEyYzAgNS41MjMtNC40NzcgMTAtMTAgMTAtNS41MjI4IDAtMTAtNC40NzctMTAtMTAgMC01LjUyMjggNC40NzcyLTEwIDEwLTEwIDUuNTIzIDAgMTAgNC40NzcyIDEwIDEweiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTAyOS40KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMyOTgwYjkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0ibTIyIDEyYzAgNS41MjMtNC40NzcgMTAtMTAgMTAtNS41MjI4IDAtMTAtNC40NzctMTAtMTAgMC01LjUyMjggNC40NzcyLTEwIDEwLTEwIDUuNTIzIDAgMTAgNC40NzcyIDEwIDEweiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTAyOC40KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMyNzM2NzkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0ibTEyIDEwMzUuNGMtMS43MjctMC4xLTMuNDMwNiAxLjEtMy44NDM4IDIuOC0wLjA0MDMgMC4zLTAuMDU0NiAwLjQtMC4xNTYyIDEuMmgyYy0wLjA1MjYtMS4zIDEuMzA2LTIuMyAyLjUtMiAxLjAyMSAwLjMgMS43NjMgMS41IDEuNDA2IDIuNS0wLjI5NCAwLjYtMC45OTggMS0xLjU2MiAxLjQtMC41NzcgMC41LTEuMDc0IDEuMS0xLjMxMyAxLjgtMC4wMzkgMC40LTAuMDM0IDAuOC0wLjAzMSAxLjNoMnYtMWMwLjE3Mi0wLjcgMC42ODgtMS4xIDEuMjUtMS40IDAuNjM0LTAuMyAxLjA4Ny0wLjggMS40MDYtMS40IDAuNTQzLTEgMC40NTQtMi4yLTAuMTI1LTMuMS0wLjcwNS0xLjMtMi4wNjctMi4yLTMuNTMxLTIuMXptMCAxMGMtMC41NTIgMC0xIDAuNC0xIDEgMCAwLjUgMC40NDggMSAxIDFzMS0wLjUgMS0xYzAtMC42LTAuNDQ4LTEtMS0xeiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMyOTgwYjkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0ibTEyIDZjLTEuNzI3LTAuMDI3NC0zLjQzMDYgMS4xNzQ5LTMuODQzOCAyLjg3NS0wLjA0MDMgMC4yOTQxLTAuMDU0NiAwLjMyODEtMC4xNTYyIDEuMTI1aDJjLTAuMDUyNi0xLjI0NzcgMS4zMDYtMi4yODkgMi41LTEuOTM3NSAxLjAyMSAwLjIzNzQgMS43NjMgMS40MjgxIDEuNDA2IDIuNDM3NS0wLjI5NCAwLjY4NC0wLjk5OCAwLjk5Mi0xLjU2MiAxLjQwNi0wLjU3NyAwLjQ4Mi0xLjA3NCAxLjA5NC0xLjMxMyAxLjgxMy0wLjAzOSAwLjQyLTAuMDM0IDAuODU5LTAuMDMxIDEuMjgxaDJ2LTFjMC4xNzItMC42MjQgMC42ODgtMS4wNDIgMS4yNS0xLjMxMiAwLjYzNC0wLjMxMiAxLjA4Ny0wLjgzNSAxLjQwNi0xLjQ2OSAwLjU0My0wLjk3NCAwLjQ1NC0yLjE3NDYtMC4xMjUtMy4wOTQtMC43MDUtMS4yNjk5LTIuMDY3LTIuMTQzOC0zLjUzMS0yLjEyNXptMCAxMGMtMC41NTIgMC0xIDAuNDQ4LTEgMXMwLjQ0OCAxIDEgMSAxLTAuNDQ4IDEtMS0wLjQ0OC0xLTEtMXoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDEwMjguNCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjZWNmMGYxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJjb25maWdhcGlfcmVxX2pzb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9IidlZGl0IGZvcm0tY29udHJvbCAnICsganNvbl9yZXF1ZXN0X2NsYXNzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlJlcXVlc3QgSlNPTiBkYXRhIGhlcmUuLi4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzPSI1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2hvd19qc29uX3JlcXVlc3RfZGF0YSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InB0LTEiPlJlcXVlc3QgSlNPTiBFZGl0YWJsZTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhZGlvIG1sLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InJlcXVlc3RfanNvbl9lZGl0YWJsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iVHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iY29uZmlnYXBpX3RydWUxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIiBpZD0iY29uZmlnYXBpX3RydWVfaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icmVxdWVzdF9qc29uX2VkaXRhYmxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJGYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPiBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9InJlcXVlc3RfanNvbl9lZGl0YWJsZSA9PSAnVHJ1ZSciCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UmVxdWVzdCBKU09OIFBhcmFtZXRlcnM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImlucHV0X2Zyb21fdXNlcl9pZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImVkaXRhYmxlX3ZhbHVlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJNZW50aW9uIGFsbCB0aGUgcmVxdWVzdCBqc29uIHBhcmFtZXRlcnMgaGVyZSwgdGhlIHZhbHVlcyB3aGljaCB3aWxsIGJlIGdpdmVuIGJ5IHRoZSB1c2Vycy4gTXVsdGlwbGUgcGFyYW1ldGVycyB0byBiZSBzZXBhcmF0ZWQgYnkgJzsnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93cz0iNSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtb246a2V5dXA9ImVkaXRfcHVzaGluZygpIgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyb3ciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpX21ldGhvZCA9PSAnUE9TVCcgJiYgc2hvd190YXNrX3ZhbHVlcyA9PSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj5JbnB1dCBWYWx1ZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFF1ZXN0aW9uIHRvIGJlIGFza2VkIGJ5IHRoZSBjaGF0Ym90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icm93IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iYXBpX21ldGhvZCA9PSAnR0VUJyAmJiBzaG93X3Rhc2tfdmFsdWVzID09IHRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj5JbnB1dCBWYWx1ZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOSI+U2VsZWN0IHRoZSB0YWdzPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJvdyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoaW5wdXQsIGluZGV4KSBpbiB0YXNrX2lucHV0X3ZhbHVlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJyZXF1ZXN0X2pzb25fZWRpdGFibGUgPT0gJ1RydWUnIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+e3sgaW5wdXQua2V5X25hbWUgfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciIHYtc2hvdz0iYXBpX21ldGhvZCA9PSAnUE9TVCciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC05Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGVkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSInc3ViamVjdF9pbnB1dF9lZGl0JyArIGluZGV4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza19pbnB1dF92YWx1ZXNbaW5kZXhdLmlucHV0X3RleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImFwaV9tZXRob2QgPT0gJ0dFVCciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGVkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnB1dC5pbnB1dF90ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU+U2VsZWN0IEEgVmFsdWU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSwgaW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSBpbiBwb3N0X21ldGhvZF9yZXF1ZXN0X2xpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0idmFsdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB2YWx1ZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaHRtbD0icG9pbnRfY2lyY2xlX3N2ZyI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtbC0xIj48Yj4gUkVTUE9OU0UgSlNPTiA8L2I+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icHQtMSI+RW5kIFVzZXIgTWVzc2FnZSBUeXBlOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFkaW8gbWwtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImVuZHVzZXJfbXNnX3R5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJpc0VkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IlRocm91Z2hfQVBJIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJldV9tc2dfcmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIGlkPSJldV90aHJ1X2FwaSI+PC9zcGFuPiBUaHJvdWdoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZW5kdXNlcl9tc2dfdHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iQ3VzdG9tIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+IEN1c3RvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImVuZHVzZXJfbXNnX3R5cGUgPT0gJ1Rocm91Z2hfQVBJJyIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5SZXNwb25zZSBKU09OPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDhweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcD0idG9vbHRpcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9ImJvdHRvbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkhlbHAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb25maWdhcGltb2RhbDIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMyNzM2NzkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczpjYz0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbj0iMS4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNob3dfYmxvY2soJ3VwJykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgLTEwMjguNCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJtMjIgMTJjMCA1LjUyMy00LjQ3NyAxMC0xMCAxMC01LjUyMjggMC0xMC00LjQ3Ny0xMC0xMCAwLTUuNTIyOCA0LjQ3NzItMTAgMTAtMTAgNS41MjMgMCAxMCA0LjQ3NzIgMTAgMTB6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAxMDI5LjQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI5ODBiOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJtMjIgMTJjMCA1LjUyMy00LjQ3NyAxMC0xMCAxMC01LjUyMjggMC0xMC00LjQ3Ny0xMC0xMCAwLTUuNTIyOCA0LjQ3NzItMTAgMTAtMTAgNS41MjMgMCAxMCA0LjQ3NzIgMTAgMTB6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAxMDI4LjQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI3MzY3OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJtMTIgMTAzNS40Yy0xLjcyNy0wLjEtMy40MzA2IDEuMS0zLjg0MzggMi44LTAuMDQwMyAwLjMtMC4wNTQ2IDAuNC0wLjE1NjIgMS4yaDJjLTAuMDUyNi0xLjMgMS4zMDYtMi4zIDIuNS0yIDEuMDIxIDAuMyAxLjc2MyAxLjUgMS40MDYgMi41LTAuMjk0IDAuNi0wLjk5OCAxLTEuNTYyIDEuNC0wLjU3NyAwLjUtMS4wNzQgMS4xLTEuMzEzIDEuOC0wLjAzOSAwLjQtMC4wMzQgMC44LTAuMDMxIDEuM2gydi0xYzAuMTcyLTAuNyAwLjY4OC0xLjEgMS4yNS0xLjQgMC42MzQtMC4zIDEuMDg3LTAuOCAxLjQwNi0xLjQgMC41NDMtMSAwLjQ1NC0yLjItMC4xMjUtMy4xLTAuNzA1LTEuMy0yLjA2Ny0yLjItMy41MzEtMi4xem0wIDEwYy0wLjU1MiAwLTEgMC40LTEgMSAwIDAuNSAwLjQ0OCAxIDEgMXMxLTAuNSAxLTFjMC0wLjYtMC40NDgtMS0xLTF6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI5ODBiOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJtMTIgNmMtMS43MjctMC4wMjc0LTMuNDMwNiAxLjE3NDktMy44NDM4IDIuODc1LTAuMDQwMyAwLjI5NDEtMC4wNTQ2IDAuMzI4MS0wLjE1NjIgMS4xMjVoMmMtMC4wNTI2LTEuMjQ3NyAxLjMwNi0yLjI4OSAyLjUtMS45Mzc1IDEuMDIxIDAuMjM3NCAxLjc2MyAxLjQyODEgMS40MDYgMi40Mzc1LTAuMjk0IDAuNjg0LTAuOTk4IDAuOTkyLTEuNTYyIDEuNDA2LTAuNTc3IDAuNDgyLTEuMDc0IDEuMDk0LTEuMzEzIDEuODEzLTAuMDM5IDAuNDItMC4wMzQgMC44NTktMC4wMzEgMS4yODFoMnYtMWMwLjE3Mi0wLjYyNCAwLjY4OC0xLjA0MiAxLjI1LTEuMzEyIDAuNjM0LTAuMzEyIDEuMDg3LTAuODM1IDEuNDA2LTEuNDY5IDAuNTQzLTAuOTc0IDAuNDU0LTIuMTc0Ni0wLjEyNS0zLjA5NC0wLjcwNS0xLjI2OTktMi4wNjctMi4xNDM4LTMuNTMxLTIuMTI1em0wIDEwYy0wLjU1MiAwLTEgMC40NDgtMSAxczAuNDQ4IDEgMSAxIDEtMC40NDggMS0xLTAuNDQ4LTEtMS0xeiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTAyOC40KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiNlY2YwZjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImNvbmZpZ2FwaV9yZXNfanNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz0iJ2VkaXQgZm9ybS1jb250cm9sICcgKyBqc29uX3Jlc3BvbnNlX2NsYXNzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlJlc3BvbnNlIEpTT04gZGF0YSBoZXJlLi4uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93cz0iNSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNob3dfanNvbl9yZXNwb25zZV9kYXRhIgogICAgICAgICAgICAgICAgICAgICAgICAgID48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iZW5kdXNlcl9tc2dfdHlwZSA9PSAnVGhyb3VnaF9BUEknIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlJlc3BvbnNlIEpTT04gcGFyYW1ldGVyIHNlbnQgdG8gZW5kIHVzZXI8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBlZGl0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icmVzcG9uc2Vfa2V5X3RvX2VuZHVzZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iTWVudGlvbiB0aGUgcmVzcG9uc2UganNvbiBwYXJhbWV0ZXIgaGVyZSwgdGhlIHZhbHVlIG9mIHdoaWNoIHdpbGwgYmUgc2VudCB0byB0aGUgdXNlci4uLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3M9IjMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVzcG9uc2Vfa2V5X2pzb25faWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tZ3JvdXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJlbmR1c2VyX21zZ190eXBlID09ICdDdXN0b20nIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1lc3NhZ2UgdG8gZW5kIHVzZXI8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImNvbmZpZ2FwaV9lbmRfdXNlcl9tc2dfZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJNZXNzYWdlIHRvIGVuZCB1c2VyLi4udHlwZSBoZXJlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZW5kX3VzZXJfbWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iZW5kdXNlcl9tc2dfdHlwZSA9PSAnVGhyb3VnaF9BUEknIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlJlc3BvbnNlIEpTT04gRWRpdGFibGU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhZGlvIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDMyJSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icmVzcG9uc2VfanNvbl9lZGl0YWJsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iVHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iY29uZmlnYXBpX3RydWUyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIiBpZD0iY29uZmlnYXBpX3RydWVfaWNuMiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InJlc3BvbnNlX2pzb25fZWRpdGFibGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IkZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZV9qc29uX2VkaXRhYmxlID09ICdUcnVlJyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kdXNlcl9tc2dfdHlwZSA9PSAnVGhyb3VnaF9BUEknCiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1lc3NhZ2UgV2l0aCBSZXNwb25zZSBKU09OIFBhcmFtZXRlcjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiA4cHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvb2x0aXA9InRvb2x0aXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJib3R0b20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJIZWxwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29uZmlnYXBpbW9kYWxfanNvbl9lZGl0YWJsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI3MzY3OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uPSIxLjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgLTEwMjguNCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJtMjIgMTJjMCA1LjUyMy00LjQ3NyAxMC0xMCAxMC01LjUyMjggMC0xMC00LjQ3Ny0xMC0xMCAwLTUuNTIyOCA0LjQ3NzItMTAgMTAtMTAgNS41MjMgMCAxMCA0LjQ3NzIgMTAgMTB6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAxMDI5LjQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI5ODBiOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJtMjIgMTJjMCA1LjUyMy00LjQ3NyAxMC0xMCAxMC01LjUyMjggMC0xMC00LjQ3Ny0xMC0xMCAwLTUuNTIyOCA0LjQ3NzItMTAgMTAtMTAgNS41MjMgMCAxMCA0LjQ3NzIgMTAgMTB6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAxMDI4LjQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI3MzY3OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJtMTIgMTAzNS40Yy0xLjcyNy0wLjEtMy40MzA2IDEuMS0zLjg0MzggMi44LTAuMDQwMyAwLjMtMC4wNTQ2IDAuNC0wLjE1NjIgMS4yaDJjLTAuMDUyNi0xLjMgMS4zMDYtMi4zIDIuNS0yIDEuMDIxIDAuMyAxLjc2MyAxLjUgMS40MDYgMi41LTAuMjk0IDAuNi0wLjk5OCAxLTEuNTYyIDEuNC0wLjU3NyAwLjUtMS4wNzQgMS4xLTEuMzEzIDEuOC0wLjAzOSAwLjQtMC4wMzQgMC44LTAuMDMxIDEuM2gydi0xYzAuMTcyLTAuNyAwLjY4OC0xLjEgMS4yNS0xLjQgMC42MzQtMC4zIDEuMDg3LTAuOCAxLjQwNi0xLjQgMC41NDMtMSAwLjQ1NC0yLjItMC4xMjUtMy4xLTAuNzA1LTEuMy0yLjA2Ny0yLjItMy41MzEtMi4xem0wIDEwYy0wLjU1MiAwLTEgMC40LTEgMSAwIDAuNSAwLjQ0OCAxIDEgMXMxLTAuNSAxLTFjMC0wLjYtMC40NDgtMS0xLTF6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI5ODBiOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJtMTIgNmMtMS43MjctMC4wMjc0LTMuNDMwNiAxLjE3NDktMy44NDM4IDIuODc1LTAuMDQwMyAwLjI5NDEtMC4wNTQ2IDAuMzI4MS0wLjE1NjIgMS4xMjVoMmMtMC4wNTI2LTEuMjQ3NyAxLjMwNi0yLjI4OSAyLjUtMS45Mzc1IDEuMDIxIDAuMjM3NCAxLjc2MyAxLjQyODEgMS40MDYgMi40Mzc1LTAuMjk0IDAuNjg0LTAuOTk4IDAuOTkyLTEuNTYyIDEuNDA2LTAuNTc3IDAuNDgyLTEuMDc0IDEuMDk0LTEuMzEzIDEuODEzLTAuMDM5IDAuNDItMC4wMzQgMC44NTktMC4wMzEgMS4yODFoMnYtMWMwLjE3Mi0wLjYyNCAwLjY4OC0xLjA0MiAxLjI1LTEuMzEyIDAuNjM0LTAuMzEyIDEuMDg3LTAuODM1IDEuNDA2LTEuNDY5IDAuNTQzLTAuOTc0IDAuNDU0LTIuMTc0Ni0wLjEyNS0zLjA5NC0wLjcwNS0xLjI2OTktMi4wNjctMi4xNDM4LTMuNTMxLTIuMTI1em0wIDEwYy0wLjU1MiAwLTEgMC40NDgtMSAxczAuNDQ4IDEgMSAxIDEtMC40NDggMS0xLTAuNDQ4LTEtMS0xeiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTAyOC40KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiNlY2YwZjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBlZGl0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icmVzcG9uc2Vfa2V5X2VkaXRfbWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJQbGVhc2UgZW50ZXIgdGhlIGN1c3RvbSBtZXNzYWdlIHdpdGggcmVzcG9uc2UganNvbiBwYXJhbWV0ZXIgd2hpY2ggd2lsbCBzZW50IHRvIGVuZHVzZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzPSIzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9Im1zZ19yZXBvbnNlX2tleSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5NZXNzYWdlIHRvIFVzZXIgdXBvbiBBUEkgZmFpbHVyZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGVkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ1bnN1Y2Nlc3NmdWxfbWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJNZXNzYWdlIG9uIEFQSSBmYWlsdXJlLi4udHlwZSBoZXJlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93cz0iMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhcGlfZmFpbHVyZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciIgdi1pZj0iaXNFZGl0SW50ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXNoLW1vZGFsIGNhcmQtYWN0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCB0ZXh0LXJpZ2h0IG10LTAgcHktMCBib3JkZXItdG9wLTAiPgogICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZWRpdF9pbnRlbnRfZGV0YWlscyIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3t0bHQoJ2ludGVudF9wYWdlX2VkaXRfY2FuY2VsX2J0bicpfX0KICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc2F2ZSIKICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlZGl0X2ludGVudCgpIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7e3RsdCgnaW50ZW50X3BhZ2VfZWRpdF9zYXZlX2J0bjMnKX19CiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgdi1zaG93PSJpbnRlbnRsaXN0Lmxlbmd0aCA9PT0gMCAmJiAhc3Bpbm5lck9uIj4KICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgPHN0cm9uZz4KICAgICAgICAgICAgICAgICAge3t0bHQoJ2ludGVudF9wYWdlX25vX2ludGVudF9hZGRlZF90ZXh0Jyl9fS48L3N0cm9uZwogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhZ2luLXRhYmxlIiBzdHlsZT0ibWFyZ2luLXRvcDogMiUiIHYtc2hvdz0iaW50ZW50bGlzdC5sZW5ndGggPiAwIj4KICAgICAgICAgICAgICA8bmF2IGFyaWEtbGFiZWw9IlBhZ2UgbmF2aWdhdGlvbiBleGFtcGxlIj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icGFnaW5hdGlvbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iaXNFZGl0SW50ZW50ID8gdmVyaWZ5X2NoYW5nZXMoKSA6IHBhZ2VfcmVxdWlyZShwYWdlX25vIC0gMSkiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSI4LjY2NyIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNS4yMDQiCiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA4LjY2NyAxNS4yMDQiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFycm93LXBvaW50LXRvLWxlZnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTA1LjgwNiAxNS4yMDQpIHJvdGF0ZSgxODApIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJQYXRoXzExMzYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9IlBhdGggMTEzNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik0xMDUuNDkzLDguMzU0bC02LjUzNyw2LjUzN2ExLjA2NSwxLjA2NSwwLDEsMS0xLjUwNi0xLjUwNkwxMDMuMjM1LDcuNiw5Ny40NSwxLjgxN0ExLjA2NSwxLjA2NSwwLDAsMSw5OC45NTYuMzEybDYuNTM3LDYuNTM3YTEuMDY1LDEuMDY1LDAsMCwxLDAsMS41MDVaIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAwKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiM5NDk5YWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9IidwYWdlLWl0ZW0gJyArIHBhZ2luYXRpb25fY2xhc3MocGFnZW5vKSIKICAgICAgICAgICAgICAgICAgICB2LWZvcj0icGFnZW5vIGluIHBhZ2VfYXJyYXkiCiAgICAgICAgICAgICAgICAgICAgOmtleT0icGFnZW5vIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIHYtaWY9InBhZ2VubyA9PSAnLi4ucycgfHwgcGFnZW5vID09ICcuLi5sJyIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwYWdlLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJpc0VkaXRJbnRlbnQgPyB2ZXJpZnlfY2hhbmdlcygpIDogcGFnZV9yZXF1aXJlKHBhZ2VubykiCiAgICAgICAgICAgICAgICAgICAgICA+Li4uPC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJwYWdlbm8gIT0gJy4uLnMnICYmIHBhZ2VubyAhPSAnLi4ubCciCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iaXNFZGl0SW50ZW50ID8gdmVyaWZ5X2NoYW5nZXMoKSA6IHBhZ2VfcmVxdWlyZShwYWdlbm8pIgogICAgICAgICAgICAgICAgICAgICAgPnt7IHBhZ2VubyB9fTwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iaXNFZGl0SW50ZW50ID8gdmVyaWZ5X2NoYW5nZXMoKSA6IHBhZ2VfcmVxdWlyZShwYWdlX25vICsgMSkiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSI4LjY2NyIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNS4yMDQiCiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA4LjY2NyAxNS4yMDQiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFycm93LXBvaW50LXRvLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKC05Ny4xMzkgMCkiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9IlBhdGhfMTEzNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iUGF0aCAxMTM2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTEwNS40OTMsOC4zNTRsLTYuNTM3LDYuNTM3YTEuMDY1LDEuMDY1LDAsMSwxLTEuNTA2LTEuNTA2TDEwMy4yMzUsNy42LDk3LjQ1LDEuODE3QTEuMDY1LDEuMDY1LDAsMCwxLDk4Ljk1Ni4zMTJsNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwwLDEsMCwxLjUwNVoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzk0OTlhZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvbmF2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPCEtLSBNb2RhbCAtLT4KICAgIDwhLS0gU0FWRSBORVcgSU5URU5UIC0tPgogICAgPGRpdgogICAgICBpZD0iaW50ZW50bW9kZWwiCiAgICAgIGNsYXNzPSJtb2RhbCBmYWRlIGRhc2gtbW9kYWwiCiAgICAgIHJvbGU9ImRpYWxvZyIKICAgICAgZGF0YS1iYWNrZHJvcD0ic3RhdGljIgogICAgICBkYXRhLWtleWJvYXJkPSJmYWxzZSIKICAgID4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGgzPnt7dGx0KCdpbnRlbnRfbW9kZWxfaW50ZW50X2xhYmVsJyl9fTwvaDM+CiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgIDxsYWJlbD57e3RsdCgnaW50ZW50X21vZGVsX25hbWVfZGVzY19sYWJlbCcpfX0gPHNwYW4gY2xhc3M9InBsLTEiPnt7dGx0KCdpbnRlbnRfbW9kZWxfbmFtZV9kZXNjX3RleHQnKX19PC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJuZXdfaW50ZW50cyIKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgSW50ZW50IgogICAgICAgICAgICAgICAgaWQ9ImVudGVyX2ludGVudF9pZCIKICAgICAgICAgICAgICAgIHYtb246a2V5dXA9ImVudGVyaW50ZW50aWQoKSIKICAgICAgICAgICAgICAgIEBrZXlkb3duPSJpbnRlbnRfbmFtZV9jaGVja19zcGVjaWFsX2NoYXJhY3RlcnMoJGV2ZW50KSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz0iaW50ZW50X2FscmVhZHlfZXhpc3RzIiBzdHlsZT0iY29sb3I6IHJlZCIKICAgICAgICAgICAgICAgID57e3RsdCgnaW50ZW50X3BhZ2VfaW50ZW50X25hbWVfZXhpc3QnKX19Ljwvc3BhbgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8aDM+e3t0bHQoJ2ludGVudF9tb2RlbF9xdWVzdGlvbl9sYWJlbCcpfX08L2gzPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogYmxvY2s7IG1hcmdpbi1ib3R0b206IDJweDsiPgogICAgICAgICAgICAgIDxsYWJlbD57e3RsdCgnaW50ZW50X21vZGVsX3F1ZXN0aW9uX2Rlc2NfbGFiZWwnKX19PC9sYWJlbD4KICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBpZD0iYWRkX3F1ZXN0aW9uX2J1dHRvbiIKICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogNXB4IDEwcHg7IG1hcmdpbi1sZWZ0OiAxMCUiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF90b19xdWVzdGlvbnNfbGlzdCgnYWRkJykiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNCIKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMy45OTciCiAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxMy45OTciCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgaWQ9IlVuaW9uXzEzIgogICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iVW5pb24gMTMiCiAgICAgICAgICAgICAgICAgICAgZD0iTS0xMjY4NCwyMDU4di01aC01YTEsMSwwLDAsMS0xLTEsMSwxLDAsMCwxLDEtMWg1di01YTEsMSwwLDAsMSwxLTEsMSwxLDAsMCwxLDEsMXY1aDVhMSwxLDAsMCwxLDEsMSwxLDEsMCwwLDEtMSwxaC01djVhMSwxLDAsMCwxLTEsMUExLDEsMCwwLDEtMTI2ODQsMjA1OFoiCiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTI2OTAuMDAxIC0yMDQ1LjAwMikiCiAgICAgICAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIHYtZm9yPSIobmV3X3F1ZXN0aW9uLCBpbmRleCkgaW4gYWRkX3F1ZXN0aW9uc19saXN0IgogICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OmZsZXg7IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJhZGRfcXVlc3Rpb25zX2xpc3RbaW5kZXhdIgogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBwbC0zIgogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIFF1ZXN0aW9uIgogICAgICAgICAgICAgICAgOmlkPSJgZW50ZXJfcXVlc3Rpb25faWRfJHtpbmRleH1gIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIHYtaWY9ImFkZF9xdWVzdGlvbnNfbGlzdC5sZW5ndGggPiAxIgogICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlciIKICAgICAgICAgICAgICAgIGNsYXNzPSJteS1hdXRvIG1sLTIgbXItMCIKICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3F1ZXN0aW9uc19saXN0KCdyZW1vdmUnLCBpbmRleCkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGkgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIgY2xhc3M9ImZhIj4mI3hmMDBkOzwvaT4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGgzPnt7dGx0KCdpbnRlbnRfbW9kZWxfcmVzcG9uc2VfbGFiZWwnKX19PC9oMz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAyNSUiPgogICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIGlkPSJyYWRpb0J0bm4iIEBjbGljaz0ic3dpdGNoaW5nKHRoaXMpIiAvPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgIHt7dGx0KCdpbnRlbnRfbW9kZWxfZGVmaW5lX2VuZHBvaW50c19sYWJlbCcpfX08L2xhYmVsCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSA8L2J1dHRvbj4gLS0+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiB2LXNob3c9InZpZXdfcmVzcG9uc2VfbW9kYWwiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPHA+e3t0bHQoJ2ludGVudF9tb2RlbF9yZXNwb25zZV9pbWdfbGFiZWwnKX19PC9wPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC0yIj4KICAgICAgICAgICAgICAgICAgICA8Y2VudGVyPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFkaW8iIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAzJSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW1hZ2VfcmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iWWVzIgogICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPiB7e3RsdCgnaW50ZW50X21vZGVsX3llc19vcHRpb24nKX19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW1hZ2VfcmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iTm8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+IHt7dGx0KCdpbnRlbnRfbW9kZWxfbm9fb3B0aW9uJyl9fQogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9jZW50ZXI+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tZmlsZSIKICAgICAgICAgICAgICAgICAgdi1zaG93PSJpbWFnZV9yZXNwb25zZSA9PSAnWWVzJyIKICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDUlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJmaWxlIgogICAgICAgICAgICAgICAgICAgIGFjY2VwdD0iaW1hZ2UveC1wbmcsIGltYWdlL2dpZiwgaW1hZ2UvanBlZyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWZpbGUtaW5wdXQiCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkNob29zZSBhIEltYWdlIgogICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9ImZpbGVpbnB1dDIiCiAgICAgICAgICAgICAgICAgICAgaWQ9ImlucHV0R3JvdXBGaWxlQWRkb24wMiIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPGxhYmVsCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7IGxpbmUtaGVpZ2h0OiAxNXB4IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tZmlsZS1sYWJlbCBmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgZm9yPSJmaWxlIgogICAgICAgICAgICAgICAgICAgID57eyBmaWxlX2xhYmVsMiB9fTwvbGFiZWwKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8cD57e3RsdCgnaW50ZW50X21vZGVsX3Jlc3BvbnNlX3ZpZGVvX2xhYmVsJyl9fTwvcD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtMiI+CiAgICAgICAgICAgICAgICAgICAgPGNlbnRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhZGlvIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMyUiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZXNfdmlkZW9fdHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZpZGVvX3Jlc3BvbnNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IlllcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIGlkPSJyZXNfdmlkZW9faWNuIj48L3NwYW4+IHt7dGx0KCdpbnRlbnRfbW9kZWxfeWVzX29wdGlvbicpfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2aWRlb19yZXNwb25zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJObyIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4ge3t0bHQoJ2ludGVudF9tb2RlbF9ub19vcHRpb24nKX19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2NlbnRlcj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgdi1zaG93PSJ2aWRlb19yZXNwb25zZSA9PSAnWWVzJyIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDUlIj4KICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgaWQ9InJlc192aWRlb191cmwiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idXJsIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIG9ubHkgVVJMIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZpZGVvX2xpbmsiCiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iZW1iZWRkZWRfY2hhbmdlIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+e3t0bHQoJ2ludGVudF9tb2RlbF9yZXNwb25zZV90b191c2VyX2J5X2JvdF9sYWJlbCcpfX08L2xhYmVsPgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICBpZD0iYWRkX3F1ZXN0aW9uX2J1dHRvbiIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDVweCAxMHB4OyBtYXJnaW4tbGVmdDogMTclIgogICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF90b19yZXNwb25zZV9saXN0KCdhZGQnKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTQiCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMy45OTciCiAgICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDE0IDEzLjk5NyIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICBpZD0iVW5pb25fMTMiCiAgICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9IlVuaW9uIDEzIgogICAgICAgICAgICAgICAgICAgICAgZD0iTS0xMjY4NCwyMDU4di01aC01YTEsMSwwLDAsMS0xLTEsMSwxLDAsMCwxLDEtMWg1di01YTEsMSwwLDAsMSwxLTEsMSwxLDAsMCwxLDEsMXY1aDVhMSwxLDAsMCwxLDEsMSwxLDEsMCwwLDEtMSwxaC01djVhMSwxLDAsMCwxLTEsMUExLDEsMCwwLDEtMTI2ODQsMjA1OFoiCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMjY5MC4wMDEgLTIwNDUuMDAyKSIKICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiNmZmYiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgdi1mb3I9IihuZXdfcmVzcG9uc2UsIGluZGV4KSBpbiBtdWx0aXBsZV9yZXNwb25zZSIKICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIHYtaWY9Im11bHRpcGxlX3Jlc3BvbnNlLmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZsb2F0OiByaWdodDsgY3Vyc29yOiBwb2ludGVyOyBtYXJnaW4tcmlnaHQ6IDEycHg7IG1hcmdpbi10b3A6IDEycHgiCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fcmVzcG9uc2VfbGlzdCgncmVtb3ZlJywgaW5kZXgpIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIgY2xhc3M9ImZhIj4mI3hmMDBkOzwvaT4KICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8dnVlLWVkaXRvcgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im11bHRpcGxlX3Jlc3BvbnNlW2luZGV4XSIKICAgICAgICAgICAgICAgICAgICA6ZWRpdG9yVG9vbGJhcj0iY3VzdG9tVG9vbGJhciIKICAgICAgICAgICAgICAgICAgPjwvdnVlLWVkaXRvcj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsPnt7dGx0KCdpbnRlbnRfbW9kZWxfc2VsZWN0X3NvdXJjZV9sYWJlbCcpfX08L2xhYmVsPgogICAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzb3VyY2UiCiAgICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc291cmNlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcHRpb24sIGluZGV4KSBpbiBvcHRpb25zIgogICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0ib3B0aW9uIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAge3sgb3B0aW9uIH19CiAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIDxORVcgSU5URU5UIFNFQ1RJT04+IC0tPgogICAgICAgICAgICA8ZGl2IHYtc2hvdz0iIXZpZXdfcmVzcG9uc2VfbW9kYWwiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICA8c3BhbiB2LWh0bWw9InBvaW50X2NpcmNsZV9zdmciPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtbC0xIj48Yj4ge3t0bHQoJ2ludGVudF9tb2RlbF9yZXF1ZXN0X2pzb25fbGFiZWwnKX19IDwvYj48L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+e3t0bHQoJ2ludGVudF9tb2RlbF91cmxfbGFiZWwnKX19PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzYXZlX3VybCIKICAgICAgICAgICAgICAgICAgaWQ9ImFkZF9hcGlfdXJsIgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgVVJMIEhlcmUiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgZC1mbGV4Ij4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icHQtMSI+e3t0bHQoJ2ludGVudF9tb2RlbF9tZXRob2RfbGFiZWwnKX19OjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBtbC0zIj4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgaWQ9ImNvbmZpZ2FwaV9wb3N0IgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2F2ZV9hcGlfbWV0aG9kIgogICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IlBPU1QiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIiBpZD0iY29uZmlnYXBpX3Bvc3RfaWNuIj48L3NwYW4+IHt7dGx0KCdpbnRlbnRfbW9kZWxfcG9zdF9sYWJlbCcpfX0KICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgdi1tb2RlbD0ic2F2ZV9hcGlfbWV0aG9kIiB2YWx1ZT0iR0VUIiAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4ge3t0bHQoJ2ludGVudF9tb2RlbF9nZXRfbGFiZWwnKX19CiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxsYWJlbD57e3RsdCgnaW50ZW50X21vZGVsX3JlcXVlc3RfanNvbl9zbWFsbF9sYWJlbCcpfX08L2xhYmVsPgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiA4cHgiPgogICAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgICAgZGF0YS10b29sdGlwPSJ0b29sdGlwIgogICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJib3R0b20iCiAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkhlbHAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29uZmlnYXBpbW9kYWw0IgogICAgICAgICAgICAgICAgICAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgeG1sbnM6Y2M9Imh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL25zIyIKICAgICAgICAgICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbj0iMS4xIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAtMTAyOC40KSI+CiAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICBkPSJtMjIgMTJjMCA1LjUyMy00LjQ3NyAxMC0xMCAxMC01LjUyMjggMC0xMC00LjQ3Ny0xMC0xMCAwLTUuNTIyOCA0LjQ3NzItMTAgMTAtMTAgNS41MjMgMCAxMCA0LjQ3NzIgMTAgMTB6IgogICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDEwMjkuNCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMyOTgwYjkiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgZD0ibTIyIDEyYzAgNS41MjMtNC40NzcgMTAtMTAgMTAtNS41MjI4IDAtMTAtNC40NzctMTAtMTAgMC01LjUyMjggNC40NzcyLTEwIDEwLTEwIDUuNTIzIDAgMTAgNC40NzcyIDEwIDEweiIKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAxMDI4LjQpIgogICAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjMjczNjc5IgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgIGQ9Im0xMiAxMDM1LjRjLTEuNzI3LTAuMS0zLjQzMDYgMS4xLTMuODQzOCAyLjgtMC4wNDAzIDAuMy0wLjA1NDYgMC40LTAuMTU2MiAxLjJoMmMtMC4wNTI2LTEuMyAxLjMwNi0yLjMgMi41LTIgMS4wMjEgMC4zIDEuNzYzIDEuNSAxLjQwNiAyLjUtMC4yOTQgMC42LTAuOTk4IDEtMS41NjIgMS40LTAuNTc3IDAuNS0xLjA3NCAxLjEtMS4zMTMgMS44LTAuMDM5IDAuNC0wLjAzNCAwLjgtMC4wMzEgMS4zaDJ2LTFjMC4xNzItMC43IDAuNjg4LTEuMSAxLjI1LTEuNCAwLjYzNC0wLjMgMS4wODctMC44IDEuNDA2LTEuNCAwLjU0My0xIDAuNDU0LTIuMi0wLjEyNS0zLjEtMC43MDUtMS4zLTIuMDY3LTIuMi0zLjUzMS0yLjF6bTAgMTBjLTAuNTUyIDAtMSAwLjQtMSAxIDAgMC41IDAuNDQ4IDEgMSAxczEtMC41IDEtMWMwLTAuNi0wLjQ0OC0xLTEtMXoiCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMyOTgwYjkiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgZD0ibTEyIDZjLTEuNzI3LTAuMDI3NC0zLjQzMDYgMS4xNzQ5LTMuODQzOCAyLjg3NS0wLjA0MDMgMC4yOTQxLTAuMDU0NiAwLjMyODEtMC4xNTYyIDEuMTI1aDJjLTAuMDUyNi0xLjI0NzcgMS4zMDYtMi4yODkgMi41LTEuOTM3NSAxLjAyMSAwLjIzNzQgMS43NjMgMS40MjgxIDEuNDA2IDIuNDM3NS0wLjI5NCAwLjY4NC0wLjk5OCAwLjk5Mi0xLjU2MiAxLjQwNi0wLjU3NyAwLjQ4Mi0xLjA3NCAxLjA5NC0xLjMxMyAxLjgxMy0wLjAzOSAwLjQyLTAuMDM0IDAuODU5LTAuMDMxIDEuMjgxaDJ2LTFjMC4xNzItMC42MjQgMC42ODgtMS4wNDIgMS4yNS0xLjMxMiAwLjYzNC0wLjMxMiAxLjA4Ny0wLjgzNSAxLjQwNi0xLjQ2OSAwLjU0My0wLjk3NCAwLjQ1NC0yLjE3NDYtMC4xMjUtMy4wOTQtMC43MDUtMS4yNjk5LTIuMDY3LTIuMTQzOC0zLjUzMS0yLjEyNXptMCAxMGMtMC41NTIgMC0xIDAuNDQ4LTEgMXMwLjQ0OCAxIDEgMSAxLTAuNDQ4IDEtMS0wLjQ0OC0xLTEtMXoiCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTAyOC40KSIKICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iI2VjZjBmMSIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICBpZD0iY29uZmlnYXBpX3JlcV9qc29uIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9Iidmb3JtLWNvbnRyb2wgJyArIGpzb25fcmVxdWVzdF9jbGFzcyIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlJlcXVlc3QgSlNPTiBkYXRhIGhlcmUuLi4iCiAgICAgICAgICAgICAgICAgIHJvd3M9IjUiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhdmVfanNvbl9yZXF1ZXN0X2RhdGEiCiAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGQtZmxleCI+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InB0LTEiPnt7dGx0KCdpbnRlbnRfbW9kZWxfanNvbl9lZGl0X2xhYmVsJyl9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBtbC0zIj4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2F2ZV9yZXF1ZXN0X2pzb25fZWRpdGFibGUiCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iVHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJjb25maWdhcGlfdHJ1ZTEiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIiBpZD0iY29uZmlnYXBpX3RydWVfaWNuIj48L3NwYW4+IHt7dGx0KCdpbnRlbnRfbW9kZWxfanNvbl9lZGl0X3RydWVfbGFiZWwnKX19CiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhdmVfcmVxdWVzdF9qc29uX2VkaXRhYmxlIgogICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IkZhbHNlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPiB7e3RsdCgnaW50ZW50X21vZGVsX2pzb25fZWRpdF9mYWxzZV9sYWJlbCcpfX0KICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgdi1zaG93PSJzYXZlX3JlcXVlc3RfanNvbl9lZGl0YWJsZSA9PSAnVHJ1ZSciCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxhYmVsPnt7dGx0KCdqc29uX3BhcmFtZXRlcl9sYWJlbCcpfX08L2xhYmVsPgogICAgICAgICAgICAgICAgPHRleHRhcmVhCiAgICAgICAgICAgICAgICAgIGlkPSJpbnB1dF9mcm9tX3VzZXJfaWQiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhdmVfZWRpdGFibGVfdmFsdWVzIgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iTWVudGlvbiBhbGwgdGhlIHJlcXVlc3QganNvbiBwYXJhbWV0ZXJzIGhlcmUsIHRoZSB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBnaXZlbiBieSB0aGUgdXNlcnMuIE11bHRpcGxlIHBhcmFtZXRlcnMgdG8gYmUgc2VwYXJhdGVkIGJ5ICc7JyIKICAgICAgICAgICAgICAgICAgcm93cz0iNSIKICAgICAgICAgICAgICAgICAgdi1vbjprZXl1cD0ic2F2ZV9wdXNoaW5nKCkiCiAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtdC00IiB2LWlmPSJzYXZlX2FwaV9tZXRob2QgPT0gJ1BPU1QnICYmIHNhdmVfc2hvd190YXNrX3ZhbHVlcyA9PSB0cnVlIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPklucHV0IFZhbHVlPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOSI+CiAgICAgICAgICAgICAgICAgICAgUXVlc3Rpb24gdG8gYmUgYXNrZWQgYnkgdGhlIGNoYXRib3QKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9InJvdyIKICAgICAgICAgICAgICAgICAgdi1pZj0iCiAgICAgICAgICAgICAgICAgICAgc2F2ZV9hcGlfbWV0aG9kID09ICdHRVQnICYmIHNhdmVfc2hvd190YXNrX3ZhbHVlcyA9PSB0cnVlCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPklucHV0IFZhbHVlPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOSI+U2VsZWN0IHRoZSB0YWdzPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9InJvdyIKICAgICAgICAgICAgICAgICAgdi1mb3I9IihpbnB1dCwgaW5kZXgpIGluIHNhdmVfdGFza19pbnB1dF92YWx1ZXMiCiAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICB2LXNob3c9InNhdmVfcmVxdWVzdF9qc29uX2VkaXRhYmxlID09ICdUcnVlJyAmJiBzYXZlX2FwaV9tZXRob2QgIT0gbnVsbCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIHN0eWxlPSJ3b3JkLXdyYXA6IGJyZWFrLXdvcmQgIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICAgICAgICAge3sgaW5wdXQua2V5X25hbWUgfX0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC05Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciIHYtc2hvdz0ic2F2ZV9hcGlfbWV0aG9kID09ICdQT1NUJyI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ3N1YmplY3RfaW5wdXQnICsgaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzYXZlX3Rhc2tfaW5wdXRfdmFsdWVzW2luZGV4XS5pbnB1dF90ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCIgdi1zaG93PSJzYXZlX2FwaV9tZXRob2QgPT0gJ0dFVCciPgogICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiB2LW1vZGVsPSJpbnB1dC5pbnB1dF90ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT5TZWxlY3QgQSBWYWx1ZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iih2YWx1ZSwgaW5kZXgpIGluIHBvc3RfbWV0aG9kX3JlcXVlc3RfbGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9InZhbHVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdmFsdWUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgPHNwYW4gdi1odG1sPSJwb2ludF9jaXJjbGVfc3ZnIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWwtMSI+PGI+IHt7dGx0KCdpbnRlbnRfbW9kZWxfcmVzcG9uc2VfanNvbl9sYWJlbCcpfX0gPC9iPjwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGQtZmxleCI+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InB0LTEiPnt7dGx0KCdpbnRlbnRfbW9kZWxfZW5kX3VzZXJfbXNnX2xhYmVsJyl9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBtbC0zIj4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzYXZlX2VuZHVzZXJfbXNnX3R5cGUiCiAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImlzRWRpdCIKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJUaHJvdWdoX0FQSSIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJldV9tc2dfcmFkaW8iCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIiBpZD0iZXVfdGhydV9hcGkiPjwvc3Bhbj4ge3t0bHQoJ2ludGVudF9tb2RlbF90aHJvdWdoX2FwaV9sYWJlbCcpfX0KICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzYXZlX2VuZHVzZXJfbXNnX3R5cGUiCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iQ3VzdG9tIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPiB7e3RsdCgnaW50ZW50X21vZGVsX2N1c3RvbV9sYWJlbCcpfX0KICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgdi1zaG93PSJzYXZlX2VuZHVzZXJfbXNnX3R5cGUgPT0gJ1Rocm91Z2hfQVBJJyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGFiZWw+e3t0bHQoJ2ludGVudF9tb2RlbF9yZXNwb25zZV9qc29uX3NtYWxsX2xhYmVsJyl9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDhweCI+CiAgICAgICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICAgICAgICBkYXRhLXRvb2x0aXA9InRvb2x0aXAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9ImJvdHRvbSIKICAgICAgICAgICAgICAgICAgICB0aXRsZT0iSGVscCIKICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb25maWdhcGltb2RhbDIiCiAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI3MzY3OSIKICAgICAgICAgICAgICAgICAgICB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiCiAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgICAgICAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgICAgICAgICAgICAgICAgICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgIHZlcnNpb249IjEuMSIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNob3dfYmxvY2soJ3VwJykiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIC0xMDI4LjQpIj4KICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgIGQ9Im0yMiAxMmMwIDUuNTIzLTQuNDc3IDEwLTEwIDEwLTUuNTIyOCAwLTEwLTQuNDc3LTEwLTEwIDAtNS41MjI4IDQuNDc3Mi0xMCAxMC0xMCA1LjUyMyAwIDEwIDQuNDc3MiAxMCAxMHoiCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTAyOS40KSIKICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI5ODBiOSIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICBkPSJtMjIgMTJjMCA1LjUyMy00LjQ3NyAxMC0xMCAxMC01LjUyMjggMC0xMC00LjQ3Ny0xMC0xMCAwLTUuNTIyOCA0LjQ3NzItMTAgMTAtMTAgNS41MjMgMCAxMCA0LjQ3NzIgMTAgMTB6IgogICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDEwMjguNCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMyNzM2NzkiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgZD0ibTEyIDEwMzUuNGMtMS43MjctMC4xLTMuNDMwNiAxLjEtMy44NDM4IDIuOC0wLjA0MDMgMC4zLTAuMDU0NiAwLjQtMC4xNTYyIDEuMmgyYy0wLjA1MjYtMS4zIDEuMzA2LTIuMyAyLjUtMiAxLjAyMSAwLjMgMS43NjMgMS41IDEuNDA2IDIuNS0wLjI5NCAwLjYtMC45OTggMS0xLjU2MiAxLjQtMC41NzcgMC41LTEuMDc0IDEuMS0xLjMxMyAxLjgtMC4wMzkgMC40LTAuMDM0IDAuOC0wLjAzMSAxLjNoMnYtMWMwLjE3Mi0wLjcgMC42ODgtMS4xIDEuMjUtMS40IDAuNjM0LTAuMyAxLjA4Ny0wLjggMS40MDYtMS40IDAuNTQzLTEgMC40NTQtMi4yLTAuMTI1LTMuMS0wLjcwNS0xLjMtMi4wNjctMi4yLTMuNTMxLTIuMXptMCAxMGMtMC41NTIgMC0xIDAuNC0xIDEgMCAwLjUgMC40NDggMSAxIDFzMS0wLjUgMS0xYzAtMC42LTAuNDQ4LTEtMS0xeiIKICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI5ODBiOSIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICBkPSJtMTIgNmMtMS43MjctMC4wMjc0LTMuNDMwNiAxLjE3NDktMy44NDM4IDIuODc1LTAuMDQwMyAwLjI5NDEtMC4wNTQ2IDAuMzI4MS0wLjE1NjIgMS4xMjVoMmMtMC4wNTI2LTEuMjQ3NyAxLjMwNi0yLjI4OSAyLjUtMS45Mzc1IDEuMDIxIDAuMjM3NCAxLjc2MyAxLjQyODEgMS40MDYgMi40Mzc1LTAuMjk0IDAuNjg0LTAuOTk4IDAuOTkyLTEuNTYyIDEuNDA2LTAuNTc3IDAuNDgyLTEuMDc0IDEuMDk0LTEuMzEzIDEuODEzLTAuMDM5IDAuNDItMC4wMzQgMC44NTktMC4wMzEgMS4yODFoMnYtMWMwLjE3Mi0wLjYyNCAwLjY4OC0xLjA0MiAxLjI1LTEuMzEyIDAuNjM0LTAuMzEyIDEuMDg3LTAuODM1IDEuNDA2LTEuNDY5IDAuNTQzLTAuOTc0IDAuNDU0LTIuMTc0Ni0wLjEyNS0zLjA5NC0wLjcwNS0xLjI2OTktMi4wNjctMi4xNDM4LTMuNTMxLTIuMTI1em0wIDEwYy0wLjU1MiAwLTEgMC40NDgtMSAxczAuNDQ4IDEgMSAxIDEtMC40NDggMS0xLTAuNDQ4LTEtMS0xeiIKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAxMDI4LjQpIgogICAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjZWNmMGYxIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPHRleHRhcmVhCiAgICAgICAgICAgICAgICAgIGlkPSJjb25maWdhcGlfcmVzX2pzb24iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iJ2Zvcm0tY29udHJvbCAnICsganNvbl9yZXNwb25zZV9jbGFzcyIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlJlc3BvbnNlIEpTT04gZGF0YSBoZXJlLi4uIgogICAgICAgICAgICAgICAgICByb3dzPSI1IgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzYXZlX2pzb25fcmVzcG9uc2VfZGF0YSIKICAgICAgICAgICAgICAgID48L3RleHRhcmVhPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgdi1zaG93PSJzYXZlX2VuZHVzZXJfbXNnX3R5cGUgPT0gJ1Rocm91Z2hfQVBJJyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGFiZWw+e3t0bHQoJ2ludGVudF9tb2RlbF9yZXNwX2pzb25fcGFyYW1ldGVyX2xhYmVsJyl9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2F2ZV9yZXNwb25zZV9rZXlfdG9fZW5kdXNlciIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Ik1lbnRpb24gdGhlIHJlc3BvbnNlIGpzb24gcGFyYW1ldGVyIGhlcmUsIHRoZSB2YWx1ZSBvZiB3aGljaCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXIuLi4iCiAgICAgICAgICAgICAgICAgIHJvd3M9IjMiCiAgICAgICAgICAgICAgICAgIGlkPSJyZXNwb25zZV9rZXlfanNvbl9pZCIKICAgICAgICAgICAgICAgID48L3RleHRhcmVhPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgdi1zaG93PSJzYXZlX2VuZHVzZXJfbXNnX3R5cGUgPT0gJ0N1c3RvbSciCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxhYmVsPnt7dGx0KCdpbnRlbnRfbW9kZWxfbXNnX2VuZF91c2VyX2xhYmVsJyl9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgaWQ9ImNvbmZpZ2FwaV9lbmRfdXNlcl9tc2ciCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJNZXNzYWdlIHRvIGVuZCB1c2VyLi4udHlwZSBoZXJlIgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzYXZlX2VuZF91c2VyX21lc3NhZ2UiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgdi1zaG93PSJzYXZlX2VuZHVzZXJfbXNnX3R5cGUgPT0gJ1Rocm91Z2hfQVBJJyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8bGFiZWw+e3t0bHQoJ2ludGVudF9tb2RlbF90aHJvdWdoX2FwaV9qc29uX2VkaXRfbGFiZWwnKX19PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhZGlvIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDMyJSI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhdmVfcmVzcG9uc2VfanNvbl9lZGl0YWJsZSIKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJUcnVlIgogICAgICAgICAgICAgICAgICAgICAgaWQ9ImNvbmZpZ2FwaV90cnVlMiIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIGlkPSJjb25maWdhcGlfdHJ1ZV9pY24yIj48L3NwYW4+IHt7dGx0KCdpbnRlbnRfbW9kZWxfanNvbl9lZGl0X2luc2lkZV9hcGlfdHJ1ZV9sYWJlbCcpfX0KICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2F2ZV9yZXNwb25zZV9qc29uX2VkaXRhYmxlIgogICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IkZhbHNlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPiB7e3RsdCgnaW50ZW50X21vZGVsX2pzb25fZWRpdF9pbnNpZGVfYXBpX2ZhbHNlX2xhYmVsJyl9fQogICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tZ3JvdXAiCiAgICAgICAgICAgICAgICB2LXNob3c9IgogICAgICAgICAgICAgICAgICBzYXZlX3Jlc3BvbnNlX2pzb25fZWRpdGFibGUgPT0gJ1RydWUnICYmCiAgICAgICAgICAgICAgICAgIHNhdmVfZW5kdXNlcl9tc2dfdHlwZSA9PSAnVGhyb3VnaF9BUEknCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGxhYmVsPnt7dGx0KCdpbnRlbnRfbW9kZWxfcmVzcG9uc2VfanNvbl9wYXJhbWV0ZXJfbGFiZWwnKX19PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJtYXJnaW4tbGVmdDogOHB4Ij4KICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcD0idG9vbHRpcCIKICAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD0iYm90dG9tIgogICAgICAgICAgICAgICAgICAgIHRpdGxlPSJIZWxwIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvbmZpZ2FwaW1vZGFsX2pzb25fZWRpdGFibGUiCiAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI3MzY3OSIKICAgICAgICAgICAgICAgICAgICB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiCiAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgICAgICAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgICAgICAgICAgICAgICAgICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgIHZlcnNpb249IjEuMSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgLTEwMjguNCkiPgogICAgICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgZD0ibTIyIDEyYzAgNS41MjMtNC40NzcgMTAtMTAgMTAtNS41MjI4IDAtMTAtNC40NzctMTAtMTAgMC01LjUyMjggNC40NzcyLTEwIDEwLTEwIDUuNTIzIDAgMTAgNC40NzcyIDEwIDEweiIKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAxMDI5LjQpIgogICAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjMjk4MGI5IgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgIGQ9Im0yMiAxMmMwIDUuNTIzLTQuNDc3IDEwLTEwIDEwLTUuNTIyOCAwLTEwLTQuNDc3LTEwLTEwIDAtNS41MjI4IDQuNDc3Mi0xMCAxMC0xMCA1LjUyMyAwIDEwIDQuNDc3MiAxMCAxMHoiCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMTAyOC40KSIKICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzI3MzY3OSIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICBkPSJtMTIgMTAzNS40Yy0xLjcyNy0wLjEtMy40MzA2IDEuMS0zLjg0MzggMi44LTAuMDQwMyAwLjMtMC4wNTQ2IDAuNC0wLjE1NjIgMS4yaDJjLTAuMDUyNi0xLjMgMS4zMDYtMi4zIDIuNS0yIDEuMDIxIDAuMyAxLjc2MyAxLjUgMS40MDYgMi41LTAuMjk0IDAuNi0wLjk5OCAxLTEuNTYyIDEuNC0wLjU3NyAwLjUtMS4wNzQgMS4xLTEuMzEzIDEuOC0wLjAzOSAwLjQtMC4wMzQgMC44LTAuMDMxIDEuM2gydi0xYzAuMTcyLTAuNyAwLjY4OC0xLjEgMS4yNS0xLjQgMC42MzQtMC4zIDEuMDg3LTAuOCAxLjQwNi0xLjQgMC41NDMtMSAwLjQ1NC0yLjItMC4xMjUtMy4xLTAuNzA1LTEuMy0yLjA2Ny0yLjItMy41MzEtMi4xem0wIDEwYy0wLjU1MiAwLTEgMC40LTEgMSAwIDAuNSAwLjQ0OCAxIDEgMXMxLTAuNSAxLTFjMC0wLjYtMC40NDgtMS0xLTF6IgogICAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjMjk4MGI5IgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgIGQ9Im0xMiA2Yy0xLjcyNy0wLjAyNzQtMy40MzA2IDEuMTc0OS0zLjg0MzggMi44NzUtMC4wNDAzIDAuMjk0MS0wLjA1NDYgMC4zMjgxLTAuMTU2MiAxLjEyNWgyYy0wLjA1MjYtMS4yNDc3IDEuMzA2LTIuMjg5IDIuNS0xLjkzNzUgMS4wMjEgMC4yMzc0IDEuNzYzIDEuNDI4MSAxLjQwNiAyLjQzNzUtMC4yOTQgMC42ODQtMC45OTggMC45OTItMS41NjIgMS40MDYtMC41NzcgMC40ODItMS4wNzQgMS4wOTQtMS4zMTMgMS44MTMtMC4wMzkgMC40Mi0wLjAzNCAwLjg1OS0wLjAzMSAxLjI4MWgydi0xYzAuMTcyLTAuNjI0IDAuNjg4LTEuMDQyIDEuMjUtMS4zMTIgMC42MzQtMC4zMTIgMS4wODctMC44MzUgMS40MDYtMS40NjkgMC41NDMtMC45NzQgMC40NTQtMi4xNzQ2LTAuMTI1LTMuMDk0LTAuNzA1LTEuMjY5OS0yLjA2Ny0yLjE0MzgtMy41MzEtMi4xMjV6bTAgMTBjLTAuNTUyIDAtMSAwLjQ0OC0xIDFzMC40NDggMSAxIDEgMS0wLjQ0OCAxLTEtMC40NDgtMS0xLTF6IgogICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDEwMjguNCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiNlY2YwZjEiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2F2ZV9yZXNwb25zZV9rZXlfZWRpdF9tZXNzYWdlIgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iUGxlYXNlIGVudGVyIHRoZSBjdXN0b20gbWVzc2FnZSB3aXRoIHJlc3BvbnNlIGpzb24gcGFyYW1ldGVyIHdoaWNoIHdpbGwgc2VudCB0byBlbmR1c2VyIgogICAgICAgICAgICAgICAgICByb3dzPSIzIgogICAgICAgICAgICAgICAgICBpZD0ibXNnX3JlcG9uc2Vfa2V5IgogICAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+e3t0bHQoJ2ludGVudF9tb2RlbF9tc2dfdG9fdXNlcl9sYWJlbCcpfX08L2xhYmVsPgogICAgICAgICAgICAgICAgPHRleHRhcmVhCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhdmVfdW5zdWNjZXNzZnVsX21lc3NhZ2UiCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJNZXNzYWdlIG9uIEFQSSBmYWlsdXJlLi4udHlwZSBoZXJlIgogICAgICAgICAgICAgICAgICByb3dzPSIzIgogICAgICAgICAgICAgICAgICBpZD0iYXBpX2ZhaWx1cmUiCiAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi13cmFwIGNhcmQtYWN0IHRleHQtcmlnaHQgbXQtMCBweS0wIGJvcmRlci10b3AtMCI+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tbGluayIKICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImVtcHR5X3ZhcmlhYmxlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIHt7dGx0KCdhZGRfaW50ZW50X2NhbmNlbF9idG4nKX19CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgdHlwZT0ic3VibWl0IgogICAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc2F2ZSIKICAgICAgICAgICAgICAgIEBjbGljaz0ic2F2ZV9pbnRlbnQoKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7e3RsdCgnYWRkX2ludGVudF9zYXZlX2J0bicpfX0KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYKICAgICAgY2xhc3M9Im1vZGFsIGZhZGUgZGFzaC1tb2RhbCIKICAgICAgaWQ9ImNvbmZpZ2FwaW1vZGFsMiIKICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICByb2xlPSJkaWFsb2ciCiAgICAgIGFyaWEtbGFiZWxsZWRieT0iY29uZmlnYXBpbW9kYWx0aXRsZSIKICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgIGRhdGEtYmFja2Ryb3A9InRydWUiCiAgICA+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiIHN0eWxlPSJ3aWR0aDogZml0LWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGgzPkhlbHA8L2gzPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJoY2xhc3M2Ij4KICAgICAgICAgICAgICAgICAgVG8gc2hvdyB0aGUgbWVzc2FnZSBhcyBpcyBmcm9tIHRoZSBBUEksIGl0IGNhbiBiZSBjb25maWd1cmVkCiAgICAgICAgICAgICAgICAgIGFzIGZvbGxvd3M6CiAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgPGxhYmVsPlJlc3BvbnNlIEpTT048L2xhYmVsPgogICAgICAgICAgICAgICAgPHRleHRhcmVhCiAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgIGlkPSJjb25maWdhcGlfcmVxX2pzb24iCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iJ2Zvcm0tY29udHJvbCAnICsganNvbl9yZXF1ZXN0X2NsYXNzIgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0icmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgIHJvd3M9IjUiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InJlc3BvbnNlX2pzb25fY2FzZV8xIgogICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IGJsYWNrIgogICAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+UmVzcG9uc2UgSlNPTiBwYXJhbWV0ZXIgc2VudCB0byBlbmQgdXNlcjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgcm93cz0iMSIKICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiBibGFjayIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICBtZXNzYWdlPC90ZXh0YXJlYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxoNiBjbGFzcz0iaGNsYXNzNiI+CiAgICAgICAgICAgICAgICBTbyBpbiB0aGlzIGNhc2UsIHRoZSB2YWx1ZSBvZiBtZXNzYWdlIGtleSB3b3VsZCBiZQogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0NTAiCiAgICAgICAgICAgICAgICAgID4nWW91ciBhcHBvaW50bWVudCBoYXMgYmVlbiBzY2hlZHVsZWQnPC9zcGFuCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICA8YnIgLz4KCiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2CiAgICAgIGNsYXNzPSJtb2RhbCBmYWRlIGRhc2gtbW9kYWwiCiAgICAgIGlkPSJjb25maWdhcGltb2RhbF9qc29uX2VkaXRhYmxlIgogICAgICB0YWJpbmRleD0iLTEiCiAgICAgIHJvbGU9ImRpYWxvZyIKICAgICAgYXJpYS1sYWJlbGxlZGJ5PSJjb25maWdhcGltb2RhbHRpdGxlIgogICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgZGF0YS1iYWNrZHJvcD0idHJ1ZSIKICAgID4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCIgcm9sZT0iZG9jdW1lbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSIgc3R5bGU9IndpZHRoOiBmaXQtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvbXNnLWJsdWUucG5nIiBhbHQgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8aDM+SGVscDwvaDM+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9ImhjbGFzczYiPgogICAgICAgICAgICAgICAgICBUaGlzIGV4YW1wbGUgc2hvdyBob3cgd2UgY2FuIHVzZSB0aGUgdmFyaW91cyBvdXRwdXQgcGFyYW1ldGVycwogICAgICAgICAgICAgICAgICBmcm9tIHRoZSBBUEkgdG8gbW9kaWZ5IHRoZSB1c2VyIG1lc3NhZ2UKICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICA8bGFiZWw+UmVzcG9uc2UgSlNPTjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgaWQ9ImNvbmZpZ2FwaV9yZXFfanNvbiIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSInZm9ybS1jb250cm9sICcgKyBqc29uX3JlcXVlc3RfY2xhc3MiCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJyZXNwb25zZSIKICAgICAgICAgICAgICAgICAgcm93cz0iNiIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icmVzcG9uc2VfanNvbl9jYXNlXzExIgogICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IGJsYWNrIgogICAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+UmVzcG9uc2UgSlNPTiBwYXJhbWV0ZXIgc2VudCB0byBlbmQgdXNlcjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgcm93cz0iMSIKICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiBibGFjayIKICAgICAgICAgICAgICAgID4KY291bnQ8L3RleHRhcmVhCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+TWVzc2FnZSBXaXRoIFJlc3BvbnNlIEpTT04gUGFyYW1ldGVyPC9sYWJlbD4KICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IGJsYWNrIgogICAgICAgICAgICAgICAgICByb3dzPSIxIgogICAgICAgICAgICAgICAgPgpZb3UgaGF2ZSB7Y291bnR9IGFwcG9pbnRtZW50czwvdGV4dGFyZWEKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgPGg2IGNsYXNzPSJoY2xhc3M2Ij4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJub3RlY2xhc3MiPk5vdGU6LTwvc3Bhbj4gVGhlIFJlc3BvbnNlIHNlbnQgdG8gZW5kCiAgICAgICAgICAgICAgICB1c2VyIGlzCiAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQ1MCI+WW91IGhhdmUgOCBhcHBvaW50bWVudHM8L3NwYW4+CiAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvY2xvc2UtaWNuLnBuZyIgYWx0IC8+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdgogICAgICBjbGFzcz0ibW9kYWwgZmFkZSBkYXNoLW1vZGFsIgogICAgICBpZD0iY29uZmlnYXBpbW9kYWw0IgogICAgICB0YWJpbmRleD0iLTEiCiAgICAgIHJvbGU9ImRpYWxvZyIKICAgICAgYXJpYS1sYWJlbGxlZGJ5PSJjb25maWdhcGltb2RhbDR0aXRsZSIKICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICA+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiIHN0eWxlPSJ3aWR0aDogZml0LWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGgzPkhlbHA8L2gzPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8aDY+RXhhbXBsZSAxOjwvaDY+CiAgICAgICAgICAgICAgPGg2IGNsYXNzPSJoY2xhc3M2Ij4KICAgICAgICAgICAgICAgIEJlbG93IGlzIHRoZSBqc29uLCB3aGVyZSB0aGUgdmFsdWVzIGZvciBjb21wYW55aWQsIGVtYWlsIGFuZAogICAgICAgICAgICAgICAgcm9sZSBhcmUgc2V0IGZyb20gdGhlIHNlc3Npb24uIFRoZSB2YWx1ZXMgZm9yIHN1YmplY3QgYW5kCiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiBhcmUgb2J0YWluZWQgZnJvbSB0aGUgdXNlci4KICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8bGFiZWw+UmVxdWVzdCBKU09OPC9sYWJlbD4KICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICBpZD0iY29uZmlnYXBpX3JlcV9qc29uIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9Iidmb3JtLWNvbnRyb2wgJyArIGpzb25fcmVxdWVzdF9jbGFzcyIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlJlcXVlc3QgSlNPTiBkYXRhIGhlcmUuLi4iCiAgICAgICAgICAgICAgICAgIHJvd3M9IjciCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InJlcXVlc3RfanNvbl9jYXNlXzEiCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogYmxhY2siCiAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxsYWJlbD5SZXF1ZXN0IEpTT04gRWRpdGFibGU8L2xhYmVsPgogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyIgc3R5bGU9InBhZGRpbmctbGVmdDogMTUlIj4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZCB0eXBlPSJyYWRpbyIgY2hlY2tlZCAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIGlkPSJjb25maWdhcGlfdHJ1ZV9pY24iPjwvc3Bhbj4gVHJ1ZQogICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGRpc2FibGVkIHR5cGU9InJhZGlvIiAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4gRmFsc2UKICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8bGFiZWw+UmVxdWVzdCBKU09OIFBhcmFtZXRlcnM8L2xhYmVsPgogICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImlucHV0X2Zyb21fdXNlcl9jYXNlXzEiCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogYmxhY2siCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxoNj5FeGFtcGxlIDIgOjwvaDY+CiAgICAgICAgICAgICAgPGg2IGNsYXNzPSJoY2xhc3M2Ij4KICAgICAgICAgICAgICAgIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgd2UgbWFwIHRoZSBwYXJhbWV0ZXJzIGZyb20ganNvbiB0aGF0IHdlCiAgICAgICAgICAgICAgICBuZWVkIGZyb20gdXNlcnMuIEluIHRoZSBiZWxvdyBqc29uLCBpZiB3ZSBuZWVkIHRoZSBpbnB1dHMgZnJvbQogICAgICAgICAgICAgICAgdGhlIHVzZXIgZm9yIHNheSBwYXJhbWV0ZXIgIm5pY2tuYW1lIi4gVGhpcyBoYXMgdG8gYmUgbWFwcGVkIGFzCiAgICAgICAgICAgICAgICAidXNlcixpbmZvLG5pY2tuYW1lIiBpbiB0aGUgIlJlcXVlc3QgSlNPTiBQYXJhbWV0ZXJzIiBmaWVsZC4KICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8bGFiZWw+UmVxdWVzdCBKU09OPC9sYWJlbD4KICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICBpZD0iY29uZmlnYXBpX3JlcV9qc29uIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9Iidmb3JtLWNvbnRyb2wgJyArIGpzb25fcmVxdWVzdF9jbGFzcyIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlJlcXVlc3QgSlNPTiBkYXRhIGhlcmUuLi4iCiAgICAgICAgICAgICAgICAgIHJvd3M9IjIzIgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJyZXF1ZXN0X2pzb25fY2FzZV8yIgogICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IGJsYWNrIgogICAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxsYWJlbD5SZXF1ZXN0IEpTT04gRWRpdGFibGU8L2xhYmVsPgogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyIgc3R5bGU9InBhZGRpbmctbGVmdDogMTUlIj4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgZGlzYWJsZWQgY2hlY2tlZCAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIGlkPSJjb25maWdhcGlfdHJ1ZV9pY24iPjwvc3Bhbj4gVHJ1ZQogICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBkaXNhYmxlZCAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4gRmFsc2UKICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8bGFiZWw+UmVxdWVzdCBKU09OIFBhcmFtZXRlcnM8L2xhYmVsPgogICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImlucHV0X2Zyb21fdXNlcl9jYXNlXzIiCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogYmxhY2siCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICA8aDY+RXhhbXBsZSAzIDo8L2g2PgogICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJoY2xhc3M2Ij4KICAgICAgICAgICAgICAgICAgV2hlbmV2ZXIgdGhlIHJlcXVlc3QganNvbiBwYXJhbWV0ZXJzIGFyZSBzZXQgZnJvbSBzZXNzaW9uIG9yCiAgICAgICAgICAgICAgICAgIGNvb2tpZXMgb3Igc29tZSBzb3VyY2UgYW5kIG5vdCBmcm9tIHRoZSB1c2VyIGlucHV0LCBpbiBzdWNoCiAgICAgICAgICAgICAgICAgIGNhc2VzIGNoZWNrICJGYWxzZSIgYXQgUmVxdWVzdCBKU09OIEVkaXRhYmxlCiAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGxhYmVsPlJlcXVlc3QgSlNPTjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgaWQ9ImNvbmZpZ2FwaV9yZXFfanNvbiIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSInZm9ybS1jb250cm9sICcgKyBqc29uX3JlcXVlc3RfY2xhc3MiCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJSZXF1ZXN0IEpTT04gZGF0YSBoZXJlLi4uIgogICAgICAgICAgICAgICAgICByb3dzPSI1IgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJyZXF1ZXN0X2pzb25fY2FzZV8zIgogICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IGJsYWNrIgogICAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxsYWJlbD5SZXF1ZXN0IEpTT04gRWRpdGFibGU8L2xhYmVsPgogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyIgc3R5bGU9InBhZGRpbmctbGVmdDogMTUlIj4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgZGlzYWJsZWQgLz4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIiBpZD0iY29uZmlnYXBpX3RydWVfaWNuIj48L3NwYW4+IFRydWUKICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgZGlzYWJsZWQgY2hlY2tlZCAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4gRmFsc2UKICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgIDwhLS0gPGg2IGNsYXNzPSJoY2xhc3M2Ij4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJub3RlY2xhc3MiPk5vdGU6LTwvc3Bhbj5DaGF0Ym90IHdpbGwgdGFrZSBhbGwgdGhlIGpzb24ga2V5cyBmcm9tIHNlc3Npb24gLCBjb29raWVzLCBldGMuCiAgICAgICAgICAgICAgPC9oNj4tLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYKICAgICAgY2xhc3M9Im1vZGFsIGZhZGUgZGFzaC1tb2RhbCIKICAgICAgaWQ9ImZpbGVfdXBsb2FkIgogICAgICB0YWJpbmRleD0iLTEiCiAgICAgIHJvbGU9ImRpYWxvZyIKICAgICAgYXJpYS1sYWJlbGxlZGJ5PSJleGFtcGxlTW9kYWxDZW50ZXJUaXRsZSIKICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIKICAgICAgZGF0YS1rZXlib2FyZD0iZmFsc2UiCiAgICA+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGgzPnt7dGx0KCdpbnRlbnRfbW9kZWxfdXBsb2FkX2ZpbGVfbGFiZWwnKX19PC9oMz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiCiAgICAgICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2Nsb3NlLWljbi5wbmciIGFsdCAvPgogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPGZvcm0gQHN1Ym1pdD0iZmlsZV9zdWJtaXQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWZpbGUiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJmaWxlIgogICAgICAgICAgICAgICAgICAgIGFjY2VwdD0iLmNzdiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWZpbGUtaW5wdXQiCiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iZmlsZWlucHV0X2NzdiIKICAgICAgICAgICAgICAgICAgICBpZD0iaW5wdXRHcm91cEZpbGVjc3YiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT0iaW5wdXRHcm91cEZpbGVBZGRvbmNzdiIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPGxhYmVsCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7IGxpbmUtaGVpZ2h0OiAxNXB4IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tZmlsZS1sYWJlbCBmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgZm9yPSJmaWxlIgogICAgICAgICAgICAgICAgICAgID57eyBmaWxlX2xhYmVsX2NzdiB9fTwvbGFiZWwKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiIgc3R5bGU9ImNvbG9yOiAjZmEwMDAwOyBmb250LXNpemU6IDAuODVyZW0iPgogICAgICAgICAgICAgICAgICB7e3RsdCgnaW50ZW50X21vZGVsX3VwbG9hZF9maWxlX2Rlc2Nfbm90ZScpfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCB0ZXh0LXJpZ2h0Ij4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIEBjbGljaz0iZG93bmxvYWRfc2FtcGxlX2ZpbGUiPgogICAgICAgICAgICAgICAgICB7e3RsdCgnaW50ZW50X21vZGVsX2Rvd25sb2FkX3NhbXBsZV9maWxlX2xhYmVsJyl9fQogICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zcGlubmVyIGZhLXNwaW4iCiAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJzcGlubmVyT25GaWxlRG93bmxvYWQiCiAgICAgICAgICAgICAgICAgID48L2k+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tbGluayIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSIKICAgICAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAge3t0bHQoJ2ludGVudF9wYWdlX2NhbmNlbF9idG4nKX19CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iZGFya2JsdWUtYnRuIj57e3RsdCgnaW50ZW50X3BhZ2Vfc3VibWl0X2J0bicpfX08L2J1dHRvbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cg=="},null]}