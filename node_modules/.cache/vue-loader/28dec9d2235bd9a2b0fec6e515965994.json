{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Layout/DashboardLayout.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Layout/DashboardLayout.vue","mtime":1663910265474},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRhc2gtY29udDEgewogIG1hcmdpbi1sZWZ0OiAwcHggIWltcG9ydGFudDsKICBwYWRkaW5nOiAwcHggIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["DashboardLayout.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmhBA;AACA;AACA;AACA","file":"DashboardLayout.vue","sourceRoot":"src/portal/Chatbot/Dashboard/Layout","sourcesContent":["<template>\n  <body class=\"dashboard\">\n    <div\n      class=\"dash-wrap\"\n      id=\"main_dashboard\"\n      v-if=\"setup_api_call_response_received\"\n    >\n      <top-navbar\n        v-if=\"$route.name != 'Workflow' && $route.name != 'OpenBot' && $route.name !='WhatsApp Chat NewPage'\"\n      ></top-navbar>\n      <div v-if=\"!is_retail\">\n        <side-bar :style=\"sidebar_disable()\"\n          v-if=\"$route.name != 'Workflow' && $route.name != 'OpenBot' && $route.name !='WhatsApp Chat NewPage'\" \n          :key=\"sidebar_key\"\n        ></side-bar>\n        <zoom-center-transition :duration=\"200\" mode=\"out-in\">\n          <div\n            class=\"dash-cont\"\n            v-bind:class=\"{ 'dash-cont1': $route.name == 'Workflow' || $route.name == 'WhatsApp Chat NewPage'}\"\n          >\n            <router-view></router-view>\n          </div>\n        </zoom-center-transition>\n      </div>\n      <div v-else>\n        <setup></setup>\n      </div>\n    </div>\n  </body>\n</template>\n<script>\nimport TopNavbar from \"./TopNavbar.vue\";\nimport SideBar from \"./SideBar.vue\";\nimport swal from \"sweetalert2\";\nimport { SlideYDownTransition, ZoomCenterTransition } from \"vue2-transitions\";\nimport axios from \"axios\";\nimport api_calls from \"@/portal/api_calls\";\nimport { setTimeout } from \"timers\";\nimport { bus } from \"@/portal/main\";\nimport Setup from \"./Setup.vue\";\nimport moment from \"moment\";\n\nexport default {\n  name: \"dashboard-layout\",\n  data() {\n    return {\n      spinnerOn: false,\n      display_list: this.$session.has(\"ChatbotMenu\")\n        ? this.$session.get(\"ChatbotMenu\")\n        : [],\n      user_role: this.$session.has(\"UserInformation\")\n        ? this.$session.get(\"UserInformation\").role\n        : \"\",\n      refresh_token_api_on: false,\n      jwt_token_interval: null,\n      models_status_interval: null,\n      is_retail: false,\n      send_status: true,\n      setup_api_call_response_received: false,\n      expiry_day_date_mapping: {\n        0: \"within a day\",\n        1: \"in a day\",\n        2: \"in 2 days\",\n        3: \"in 3 days\",\n        4: \"in 4 days\",\n        5: \"in 5 days\",\n        6: \"in 6 days\",\n        7: \"in a week\"\n      },\n      sidebar_key: 0,\n      disable_sidebar: false,\n      is_free_trial:false,\n    };\n  },\n  components: {\n    TopNavbar,\n    SideBar,\n    SlideYDownTransition,\n    ZoomCenterTransition,\n    Setup\n  },\n  created() {\n    if (this.$session.has(\"UserInformation\")) {\n      this.jwt_token_interval = window.setInterval(() => {\n        axios\n          .post(\n            api_calls.refresh_token_url(),\n            {},\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"rt\")}`\n              }\n            }\n          )\n          .then(response => {\n            this.$session.set(\"at\", response.data.data.access_token);\n          })\n          .catch(() => {\n            this.$session.destroy();\n            clearInterval(this.jwt_token_interval);\n            clearInterval(this.models_status_interval);\n            this.models_status_interval = null;\n            this.jwt_token_interval = null;\n            this.$router.push(\"/bot/login\");\n          });\n      }, 14 * 60 * 1000);\n      axios\n        .post(\n          api_calls.token_verification_url(),\n          {\n            token: this.$session.get(\"UserInformation\").tokens,\n            email: this.$session.get(\"UserInformation\").email,\n            license_key: this.$session.get(\"UserInformation\").license_key\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`\n            }\n          }\n        )\n        .then(response => {\n          if (\n            response.data.message.MSG_CODE == this.api_status_code.TOKEN_INVALID_0001.MSG_CODE ||\n            response.data.message.MSG_CODE == this.api_status_code.INVALID_CREDENTIALS_0005.MSG_CODE\n          ) {\n            swal({\n              type: \"error\",\n              text:\n                this.tlt('layout_dashboard_loggedin_again', 'code'),\n              allowOutsideClick: false\n            }).then(result => {\n              if (result.value) {\n                setTimeout(() => {\n                  this.$session.destroy();\n                  clearInterval(this.jwt_token_interval);\n                  this.$router.push(\"/bot/login\");\n                }, 500);\n              }\n            });\n          } else if (response.data.message.MSG_CODE == this.api_status_code.SESSION_TOKEN_VALID.MSG_CODE) {\n          }\n        })\n        .catch(e => {\n          this.$session.destroy();\n          clearInterval(this.jwt_token_interval);\n          this.jwt_token_interval = null;\n          this.$router.push(\"/bot/login\");\n          console.log(e);\n        });\n    }\n    if (this.$session.has(\"UserInformation\")) {\n      bus.$emit(\"You can enable bot chat now\", \"True\");\n    }\n    let valid_to = this.$session.get(\"UserInformation\").valid_to,\n      date_seven_days_ago = new Date(),\n      current_day = new Date();\n    date_seven_days_ago.setDate(date_seven_days_ago.getDate() - 7);\n    let is_validity_expiring_soon = this.dateCheckExpiry(\n      date_seven_days_ago,\n      current_day,\n      valid_to\n    );\n    let start = moment(current_day),\n      end = moment(valid_to),\n      days_remaining = end.diff(start, \"days\");\n    var subscripton_status = this.$session.get(\"UserInformation\").subscription_status;\n    let user_expiry_informed = Boolean(this.$session.get(\"UserExpiryInformed\"));\n    if (\n      days_remaining in Object.keys(this.expiry_day_date_mapping) &&\n      !user_expiry_informed && subscripton_status != \"active\"\n    ) {\n      swal({\n        type: \"warning\",\n        text: this.tlt('layout_dashboard_trial_period_expire', 'code') + ` ${this.expiry_day_date_mapping[days_remaining]},` + this.tlt('layout_dashboard_upgrade_plan_text', 'code') + this.tlt('layout_dashboard_upgrade_plan_text2', 'code'),\n        showCancelButton: true,\n        confirmButtonColor:'#3085d6',\n        confirmButtonText: this.tlt('layout_dashboard_subscribe_now', 'code'),\n        cancelButtonText: this.tlt('layout_dashboard_later_btn', 'code'),\n        cancelButtonColor: '#d33',\n      }).then((result) => {\n        if (result.value == true)\n        {\n          this.$router.push({name: 'Settings',params:{Subscription:true}});     \n        }\n        })\n      this.$session.set(\"UserExpiryInformed\", true);\n    } \n    if (days_remaining < 0 && !user_expiry_informed) {\n      swal({\n        type: \"warning\",\n        text: this.tlt('layout_dashboard_trial_period_expire1', 'code'),\n        showCancelButton: true,\n        confirmButtonColor:'#3085d6',\n        confirmButtonText: this.tlt('layout_dashboard_subscribe_now', 'code'),\n        cancelButtonText: this.tlt('layout_dashboard_later_btn', 'code'),\n        cancelButtonColor: '#d33',\n      }).then((result) => {\n        if (result.value == true)\n        {\n          this.$router.push({name: 'Settings',params:{Subscription:true}});     \n        }\n        })\n      this.$session.set(\"UserExpiryInformed\", true);\n    }\n    if (this.$session.has(\"UserInformation\")) {\n      this.check_model_status();\n      this.models_status_interval = window.setInterval(() => {\n        this.check_model_status();\n      }, 10 * 60 * 1000);\n    } \n  },\n  beforeCreate() {\n    if(this.$route.params.is_shopify_billing_redirect === true) {\n      swal({\n        title: \"Thank You!!\",\n        html: `Your Subscription of Cense App with Shopify is now Active.! \\n Continue browsing through our portal for making your bot more interactive.!!`,\n        showCancelButton: false,\n        type: \"success\",\n        allowOutsideClick: false,\n        allowEscapeKey: false\n      })\n    }\n    if(this.$route.params.stripe_payment_redirect === true) {\n      if(this.$route.params.payment_response_data === 'Success'){\n        if (this.$route.params.payment_type === 'subscription'){\n          swal({\n            title: \"Thank You!!\",\n            html: \"Your Subscription of Cense App is now Active.! \\n Continue browsing through our portal for making your bot more interactive.!!\",\n            showCancelButton: false,\n            type: \"success\",\n            allowOutsideClick: false,\n            allowEscapeKey: false\n          })\n        }\n        else if(this.$route.params.payment_type === 'payment'){\n          swal({\n            title: \"Thank You!!\",\n            text: \"Your Add on is now Active.! \\n Continue browsing through our portal for making your bot more interactive.!!\",\n            showCancelButton: false,\n            type: \"success\",\n            allowOutsideClick: false,\n            allowEscapeKey: false\n          })\n        }\n      } else if(this.$route.params.payment_response_data === 'Failure') {\n        swal({\n          title: \"Oops!!\",\n          html: `<div style=\"text-align:left\"> It seems there was some error in processing your payment request! <br> If you think this was a mistake, please reach out to us at <a href=\"mailto:support@cense.ai?subject=Payment Failure Dispute${Boolean(this.$route.params.payment_response_cense_reference_id) === true ? `:CensePayment#${this.$route.params.payment_response_cense_reference_id}` : null}>support@cense.ai</a>. <br> <br> ${Boolean(this.$route.params.payment_response_cense_reference_id) === true ? `Please note the reference ID<b>CensePayment#${this.$route.params.payment_response_cense_reference_id} </b> for all further communication regarding this payment`: null} </div>`,\n          showCancelButton: false,\n          type: \"error\",\n          allowOutsideClick: false,\n          allowEscapeKey: false\n        })\n      }\n    }\n    let subscription = this.$session.get(\"UserInformation\").subscription;\n    let subscription_status = this.$session.get(\"UserInformation\").subscription_status;\n    if(subscription == 'Free' && subscription_status != 'freetrial'){\n      this.is_free_trial = this.$route.params.is_free_trial;\n      this.$router.push(\"/bot/subscription-renewal\");\n    }\n    try {\n      axios\n        .post(\n          api_calls.setup_status(),\n          {\n            company_name: this.$session.get(\"UserInformation\").company_name,\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            update: false\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`\n            }\n          }\n        )\n        .then((response) => {\n          if (response.data.message.MSG_CODE == this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE) {\n            if (response.data.data.is_completed == false) {\n              this.is_retail = true;\n            } else {\n              this.is_retail = false;\n\n            }\n          } else if(response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\n            this.is_retail = false;\n          } else {\n            this.is_retail = false;\n            Swal({\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              type: \"error\"\n            })\n          }\n          this.setup_api_call_response_received = true;\n        })\n        .catch(e => {\n         console.log(e)\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n            setTimeout(() => {\n              this.setup_api_call_response_received = false;\n              axios\n                .post(\n                  api_calls.setup_status(),\n                  {\n                    company_name: this.$session.get(\"UserInformation\").company_name,\n                    company_id: this.$session.get(\"UserInformation\").company_id,\n                    update: false\n                  },\n                  {\n                    headers: {\n                      Authorization: `Bearer ${this.$session.get(\"at\")}`\n                    }\n                  }\n                )\n                .then(response => {\n                  \n                  this.spinnerOn = false;\n                  if (response.data.message.MSG_CODE == this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE) {\n                    if (response.data.data.is_completed == false) {\n                      this.is_retail = true;\n                    } else {\n                      this.is_retail = false;\n                \n                    }\n                  } else if(response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\n                    this.is_retail = false;\n                  } else {\n                    this.is_retail = false;\n                    Swal({\n                      title: response.data.message.MSG_CODE,\n                      text: response.data.message.MSG,\n                      showCancelButton: false,\n                      showConfirmButton: false,\n                      type: \"error\"\n                    })\n                  }\n                  this.setup_api_call_response_received = true;\n                }\n                ).catch(e=>{\n                  console.log(e)\n                });\n            }, 100);\n          }\n          this.setup_api_call_response_received = true;\n        });\n      if (!this.$session.has(\"UserInformation\")) {\n        this.$router.push(\"/bot/login\");\n      } else if (!this.$session.has(\"ChatbotMenu\")) {\n        if (this.$route.name != \"Direct Response Bot\") {\n          this.$router.push(\"/bot/directresponsebot\");\n        }\n      }\n      var menu = this.$session.get(\"ChatbotMenu\");\n      for (var i in menu) {\n        var matched = false;\n        if (menu[i].sub_menu_list.length == 0) {\n          if (menu[i].main_menu.name === this.$route.name) {\n            matched = true;\n          }\n        } else if (menu[i].sub_menu_list.length > 0) {\n          for (var j in menu[i].sub_menu_list) {\n            if (\n              menu[i].sub_menu_list[j].name === this.$route.name ||\n              this.$route.name === \"Workflow\" ||\n              this.$route.name === \"Test Closed Bot\" || this.$route.name === \"WhatsApp Chat NewPage\" || this.$route.name === 'Subscription Renewal'\n            ) {\n              matched = true;\n            }\n          }\n        }\n        if (matched) {\n          break;\n        } else if (i == menu.length - 1 && matched == false) {\n          this.$router.push(\"/bot/dashboard\");\n        }\n      }\n    } catch (error) {\n      if (!this.$session.has(\"UserInformation\")) {\n        this.$router.push(\"/bot/login\");\n      }\n    }\n  },\n  mounted() {\n    this.$root.$on(\"Session_Expired\", data => {\n      if (data.message.MSG === \"You are logged in on another device.\") {\n        swal\n          .fire({\n            type: \"error\",\n            title: this.tlt('layout_dashboard_swal_oops2', 'code'),\n            text:\n              this.tlt('layout_dashboard_logged_again','code'),\n            allowOutsideClick: false\n          })\n          .then(result => {\n            if (result.value) {\n              setTimeout(() => {\n                this.$root.$emit(\"sign_out\");\n              }, 500);\n            }\n          });\n      } else if (data.msg === \"Permissions Updated\") {\n        this.$session.set(\"permissions\", data.permissions);\n        this.getToken();\n      } else if (!this.refresh_token_api_on) {\n        this.refresh_token_api_on = true;\n        this.getToken();\n      }\n    });\n\n    this.$root.$on(\"Clear_Refresh_Token_Interval\", data => {\n      if (data.clear_interval) {\n        clearInterval(this.jwt_token_interval);\n        this.jwt_token_interval = null;\n      }\n    });\n    let is_first_login = this.$session.get(\"UserInformation\").show_portal_guide;\n    if (Boolean(is_first_login)) {\n      // this.$root.$emit(\"show_tour_guide\", true);\n    }\n    this.$root.$on(\"want_model_status\", data =>{\n      if (data == true){\n        this.check_model_status();\n      }\n    })\n    this.$root.$on(\"SideBarMenuUpdated\", (data) => {\n      if (data === true){\n        this.sidebar_key +=1;\n      }\n    });\n    if (this.$session.get(\"SettingTopnavbarDisable\") == true) {\n      this.disable_sidebar = true;\n    }else{\n       this.disable_sidebar = false;\n    }\n    this.$root.$on(\"DashboardSidebarDisable\", (data) => {\n      if(data===true){\n        this.disable_sidebar = true;\n      }else{\n         this.disable_sidebar = false;\n      }\n    });\n  },\n  methods: {\n    getToken() {\n      axios\n        .post(\n          api_calls.refresh_token_url(),\n          {},\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"rt\")}`\n            }\n          }\n        )\n        .then(response => {\n          this.refresh_token_api_on = false;\n          this.$session.set(\"at\", response.data.data.access_token);\n        })\n        .catch(() => {\n          this.$session.destroy();\n          this.$router.push(\"/bot/login\");\n        });\n    },\n    dateCheckExpiry(from, to, check) {\n      var fDate, lDate, cDate;\n      fDate = Date.parse(from);\n      lDate = Date.parse(to);\n      cDate = Date.parse(check);\n      if (cDate <= lDate && cDate >= fDate) {\n        return true;\n      }\n      return false;\n    },\n    check_model_status(){\n      axios\n          .post(\n            api_calls.models_training_status(),\n            {\n              company_id: this.$session.get(\"UserInformation\").company_id,\n              company_name: this.$session.get(\"UserInformation\").company_name,\n              is_get: true\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            // this.$session.set(\"at\", response.data.access_token);\n            if(response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE){\n              this.$session.set(\"ModelStatus\", response.data.data.model_status);\n            }\n            else if(response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\n              this.$session.set(\"ModelStatus\", response.data.data.model_status);\n            }\n            else{\n              this.$session.set(\"ModelStatus\", {});\n            }\n            this.$root.$emit(\"send_model_status\",this.send_status);\n          })\n          .catch((e) => {\n            this.$session.set(\"ModelStatus\", {});\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    sidebar_disable(){\n      if (this.disable_sidebar === true) {\n        return 'pointer-events:none;'    \n      }else{\n        return ''\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\">\n.dash-cont1 {\n  margin-left: 0px !important;\n  padding: 0px !important;\n}\n</style>\n"]}]}