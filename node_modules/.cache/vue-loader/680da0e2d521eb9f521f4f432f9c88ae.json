{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Customer Support/SuperAdminTicketDashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Customer Support/SuperAdminTicketDashboard.vue","mtime":1645594423483},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBhcGlfY2FsbHMgZnJvbSAiQC9wb3J0YWwvYXBpX2NhbGxzIjsKaW1wb3J0IHsgc2V0VGltZW91dCwgc2V0SW50ZXJ2YWwgfSBmcm9tICJ0aW1lcnMiOwppbXBvcnQgU3dhbCBmcm9tICJzd2VldGFsZXJ0MiI7CmltcG9ydCBtb21lbnQgZnJvbSAibW9tZW50IjsKCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcGVuY2lsX3N2ZzoKICAgICAgICAnIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMTUuNTQ2IiBoZWlnaHQ9IjE1LjQ2MSIgdmlld0JveD0iMCAwIDE1LjU0NiAxNS40NjEiPjxkZWZzPjxzdHlsZT4uYXtmaWxsOiM5ZTllOWU7fTwvc3R5bGU+PC9kZWZzPjxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKC03NDcuODg4IC0zNTYuNzY5KSI+PHBhdGggY2xhc3M9ImEiIGQ9Ik03NTkuNDE2LDM1Ni43NjlhMi4zNTgsMi4zNTgsMCwwLDEsMS43NzcuNjYyYy41MzQuNTEzLDEuMDcyLDEuMDI1LDEuNTY3LDEuNTc1YTIuMywyLjMsMCwwLDEtLjA3MSwzLjMyNWMtMi43MzYsMi43Ni01LjQ5NCw1LjUtOC4yMzgsOC4yNTFhMS4zODEsMS4zODEsMCwwLDEtLjc1OC4yODhjLS43MTkuMTc0LTEuNDI5LjM3OS0yLjE0NC41NzItLjkzMi4yNTEtMS44NjIuNS0yLjc5NS43NTEtLjYuMTU4LS45ODktLjIxMy0uODMyLS44MDdxLjY4OS0yLjU5NSwxLjQwNi01LjE4MmExLjE2NCwxLjE2NCwwLDAsMSwuMjg5LS40ODdxNC4wOTEtNC4xMDcsOC4yLTguMkEyLjI2NSwyLjI2NSwwLDAsMSw3NTkuNDE2LDM1Ni43NjlabS0xLjk4OSwyLjk1Ni02LjU0LDYuNTM4LDMuMDI1LDMuMDI0LDYuNTM4LTYuNTM3Wm00LjAyMywyLjE2NWMuMTE4LS4xMzUuMjI1LS4yNjkuMzQzLS4zOTJhMS4xMzQsMS4xMzQsMCwwLDAsMC0xLjczNGMtLjQ2LS40NjYtLjkyNi0uOTI1LTEuMzg4LTEuMzlhMS4xNjYsMS4xNjYsMCwwLDAtLjg2MS0uMzY4Yy0uNTc4LDAtLjg4MS40LTEuMjE0Ljc2Wm0tMTIuMDg0LDguODYzLDMuMi0uODYzLTIuMzM3LTIuMzMxWiIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCkiLz48cGF0aCBjbGFzcz0iYSIgZD0iTTgxMy45NDIsNDIyLjZsLS43ODktLjgsMy44MjEtMy44MTkuNzg0LjhaIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtNTkuNjQ4IC01NS45NDcpIi8+PC9nPjwvc3ZnPicsCiAgICAgIGZpbHRlcl9zdGF0dXM6ICdBbGxUaWNrZXRzJywKICAgICAgc3Bpbm5lck9uOiBmYWxzZSwKICAgICAgcGFnZV9ubzogMSwKICAgICAgcGVyX3BhZ2U6IDIwLAogICAgICB0b3RhbF9wYWdlczogbnVsbCwKICAgICAgbnVtYmVyX29mX3Jvd3M6IG51bGwsCiAgICAgIHRpY2tldHNfbGlzdDogW10sCiAgICAgIHNvcnRfc3RhdHVzOiAnQWxsJywKICAgICAgY29tcGFueV9saXN0OiBbXSwKICAgICAgcGFnZV9hcnJheTogW10sCiAgICAgIFVzZXJfY29tbWVudHM6IFtdLAogICAgICBDb21tZW50c19saXN0OiBbXSwKICAgICAgY29tbWVudF9pdGVtX2xpc3Q6IFtdLAogICAgICB0aWNrZXRfbnVtYmVyOiAiIiwKICAgICAgY3VycmVudF9zZWxlY3RlZF90aWNrZXRfbnVtYmVyOiAiIiwKICAgICAgdGlja2V0X2Rlc2NyaXB0aW9uOiAiIiwKICAgICAgbmV3X3RpY2tldF9jb21tZW50OiAiIiwKICAgICAgY3VycmVudF9pbWFnZV91cmw6ICIiLAogICAgICAvLyBjdXJyZW50X2ltYWdlX25hbWU6ICIiLAogICAgICBjdXJyZW50X2ltYWdlX25hbWVfaW5fY29tbWVudDoiIiwKICAgICAgSW1hZ2VzX2luX2N1cnJlbnRfY29tbWVudDogIiIsCiAgICAgIG5ld19pbWFnZV9uYW1lOiAiIiwKICAgICAgbmV3X2ltYWdlX2ZpbGU6ICIiLAogICAgICBpbWFnZV9maWxlOiAiIiwKICAgICAgc2VuZF9zb2x1dGlvbl90ZXh0OiAiIiwKICAgICAgdGlja2V0X2lzc3VlX25hbWU6ICIiLAogICAgICB0aWNrZXRfc3RhdHVzOiAiIiwKICAgICAgdGlja2V0X3NvbHV0aW9uOiAiIiwKICAgICAgaXNfc3RhdHVzOiBudWxsLAogICAgICBjdXJyZW50X3N0YXR1czogIiIsCiAgICAgIGlzX3N0YXR1c19jbG9zZWQ6IGZhbHNlLAogICAgICBzZWFyY2hfa2V5OiAiIiwKICAgICAgaXNFZGl0VGlja2V0U3RhdHVzOiBmYWxzZSwKICAgICAgY3VycmVudF90aWNrZXRfc3RhdHVzOiAiIiwKICAgICAgY29tcGFueV90aWNrZXRzX2xpc3Q6IFtdLAogICAgICBzb3J0X2NvbXBhbnlfc3RhdHVzOiAnQWxsJywKICAgICAgaXNfY29sbGFwc2U6IGZhbHNlLAogICAgICBzZW5kX2J5X2NvbXBhbnk6IGZhbHNlLAogICAgICByZXFfY29tcF9pZDogIiIsCiAgICAgIHJlcV9jb21wX25hbWU6ICIiLAogICAgICB0aWNrZXRfY29tcGFueV9pZDoiIiwKICAgICAgdGlja2V0X2NvbXBhbnlfbmFtZToiIiwKICAgICAgaXNWaXNpYmxlU2VhcmNoQ2xlYXI6IGZhbHNlCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGlzX3NlbmRfYnRuX2VuYWJsZSgpIHsKICAgICAgaWYgKEJvb2xlYW4odGhpcy5zZW5kX3NvbHV0aW9uX3RleHQgfHwgdGhpcy5uZXdfaW1hZ2VfbmFtZSB8fCB0aGlzLm5ld190aWNrZXRfY29tbWVudCkpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgICBpc19yZW9wZW5fYnRuX2VuYWJsZSgpIHsKICAgICAgaWYgKEJvb2xlYW4odGhpcy5uZXdfdGlja2V0X2NvbW1lbnQgfHwgdGhpcy5uZXdfaW1hZ2VfbmFtZSkpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgfSwKICBjcmVhdGVkKCkgewogICAgaWYgKAogICAgICAhdGhpcy4kc2Vzc2lvbi5oYXMoIkNvbXBhbnlJZCIpICYmCiAgICAgIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5yb2xlID09ICJTdXBlckFkbWluIgogICAgKSB7CiAgICAgIHRvYXN0ci53YXJuaW5nKCJQbGVhc2Ugc2VsZWN0IGEgY29tcGFueSBuYW1lIGZyb20gdGhlIGRyb3Bkb3duIik7CiAgICB9IGVsc2UgaWYgKHRoaXMudXNlcl9yb2xlID09ICJTdXBlckFkbWluIikgewogICAgICBpZiAodGhpcy4kc2Vzc2lvbi5oYXMoIkNvbXBhbnlJZCIpKSB7CiAgICAgICAgdGhpcy5jb21wYW55aWQgPSB0aGlzLiRzZXNzaW9uLmdldCgiQ29tcGFueUlkIik7CiAgICAgICAgdGhpcy5jb21wYW55bmFtZSA9IHRoaXMuJHNlc3Npb24uZ2V0KCJDb21wYW55TmFtZSIpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY29tcGFueWlkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQ7CiAgICAgICAgdGhpcy5jb21wYW55bmFtZSA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWU7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuY29tcGFueWlkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQ7CiAgICAgIHRoaXMuY29tcGFueW5hbWUgPSB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lOwogICAgfQogICAgdGhpcy5nZXRfdGlja2V0X2RldGFpbHMoKTsKICB9LAogIHdhdGNoOiB7CiAgICBmaWx0ZXJfc3RhdHVzKCl7CiAgICAgIGlmKHRoaXMuZmlsdGVyX3N0YXR1cyA9PT0gICdBbGxUaWNrZXRzJyl7CiAgICAgICAgdGhpcy5nZXRfdGlja2V0X2RldGFpbHMoKTsgIAogICAgICB9ZWxzZXsKICAgICAgICB0aGlzLmdldF9jb21wYW55X2xpc3QoKTsKICAgICAgfQogICAgfSwKICB9LAogIG1ldGhvZHMgOiB7CiAgICBjaGVja19jb2xsYXBzZShpbmRleCkgewogICAgICBpZiAoJCgnI2NvbGxhcHNlRXhhbXBsZV9fJyArIGluZGV4KS5pcygnLmNvbGxhcHNlLnNob3cnKSA9PT0gZmFsc2UpIHsKICAgICAgICB0aGlzLmlzX2NvbGxhcHNlID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmlzX2NvbGxhcHNlID0gZmFsc2U7CiAgICAgICAgdGhpcy5zb3J0X2NvbXBhbnlfc3RhdHVzID0gJ0FsbCc7CiAgICAgIH0KICAgIH0sCiAgICB0cmltX3RpY2tldF9pc3N1ZSh2YWwxKSB7CiAgICAgIGlmICh2YWwxLmxlbmd0aCA+IDUwKSB7CiAgICAgICAgbGV0IHN0cjEgPSB2YWwxLnN1YnN0cmluZygwLCA1MCkgKyAiLi4uLiI7CiAgICAgICAgcmV0dXJuIHN0cjE7CiAgICAgIH0KICAgICAgcmV0dXJuIHZhbDE7CiAgICB9LAogICAgdHJpbV90aWNrZXRfZGVzY3JpcHRpb24oZGVzX25hbWUpewogICAgICBpZihkZXNfbmFtZS5sZW5ndGggPiA2MCl7CiAgICAgICAgbGV0IHRpY2tldF9kZXNfbmFtZSA9IGRlc19uYW1lLnN1YnN0cmluZygwLDUwKSArICIuLi4iOwogICAgICAgIHJldHVybiB0aWNrZXRfZGVzX25hbWU7CiAgICAgIH0KICAgICAgcmV0dXJuIGRlc19uYW1lOwogICAgfSwKICAgICBkYXRlX2Zvcm1hdGluZyhzdWJfZGF0ZSkgewogICAgICByZXR1cm4gbW9tZW50KHN1Yl9kYXRlKS5mb3JtYXQoIkQgTU1NIFlZWVkgSEg6bW0gYSIpOwogICAgfSwKICAgIGZvcm1hdF9kYXRlKGRhdGUpIHsKICAgICAgaWYoZGF0ZSA9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuICJOL0EiCiAgICAgIH0KICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQoIkRvIE1NTSBZWVlZIik7CiAgICB9LAogICAgZWRpdF90aWNrZXRfc3RhdHVzKCkgewogICAgICBpZiAoIXRoaXMuaXNFZGl0VGlja2V0U3RhdHVzKSB7CiAgICAgICAgdGhpcy5pc0VkaXRUaWNrZXRTdGF0dXMgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuaXNFZGl0VGlja2V0U3RhdHVzID0gZmFsc2U7CiAgICAgICAgLy8gdGhpcy5sb2FkX2ludGVudCgpOwogICAgICB9CiAgICAgIHJldHVybjsKICAgIH0sCiAgICBzYXZlX3RpY2tldF9zdGF0dXMoKSB7CiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgaWYgKHRoaXMuY3VycmVudF90aWNrZXRfc3RhdHVzID09PSAiIikgewogICAgICAgIHRoaXMuY3VycmVudF90aWNrZXRfc3RhdHVzID0gdGhpcy5jdXJyZW50X3N0YXR1czsKICAgICAgfQogICAgICAgIGF4aW9zCiAgICAgICAgICAucG9zdCgKICAgICAgICAgICAgYXBpX2NhbGxzLnN1cHBvcnRfdGlja2V0KCksCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgICAgaXNfZWRpdDogdHJ1ZSwKICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgcmVzcG9uc2U6IHsKICAgICAgICAgICAgICAgIHRpY2tldF9udW1iZXI6IHRoaXMuY3VycmVudF9zZWxlY3RlZF90aWNrZXRfbnVtYmVyLAogICAgICAgICAgICAgICAgdXBkYXRlX3N0YXR1czogdGhpcy5jdXJyZW50X3RpY2tldF9zdGF0dXMsCiAgICAgICAgICAgICAgICBzb2x1dGlvbjogbnVsbCwKICAgICAgICAgICAgICAgIHRpY2tldF9jb21wYW55X2lkOiB0aGlzLnRpY2tldF9jb21wYW55X2lkLAogICAgICAgICAgICAgICAgdGlja2V0X2NvbXBhbnlfbmFtZTp0aGlzLnRpY2tldF9jb21wYW55X25hbWUsCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIC8vIHBhZ2VubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgICAgIC8vIHBlcnBhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgKQogICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlID09PSAiVGlja2V0IFVwZGF0ZWQiKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiVGlja2V0IHN0YXR1cyB1cGRhdGVkIFN1Y2Nlc3NmdWxseS4iLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB0aGlzLmVtcHR5X3ZhcmlhYmxlKCk7CiAgICAgICAgICAgICAgJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICAgICAgaWYgKHRoaXMuc2VuZF9ieV9jb21wYW55ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmdldF9jb21wYW55X3RpY2tldHModGhpcy5yZXFfY29tcF9uYW1lLCB0aGlzLnJlcV9jb21wX2lkKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5nZXRfdGlja2V0X2RldGFpbHMoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZihyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT0gIkRCIE9QRVJBVElPTiBVTlNVQ0NFU1NGVUwiKXsKICAgICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdGV4dDoKICAgICAgICAgICAgICAgICAgIlNvbWUgZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAkKCIjdGlja2V0TW9kZWxEZXRhaWxzIikubW9kYWwoImhpZGUiKTsKICAgICAgICAgICAgICBpZiAodGhpcy5zZW5kX2J5X2NvbXBhbnkgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0X2NvbXBhbnlfdGlja2V0cyh0aGlzLnJlcV9jb21wX25hbWUsIHRoaXMucmVxX2NvbXBfaWQpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmdldF90aWNrZXRfZGV0YWlscygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLmVtcHR5X3ZhcmlhYmxlKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZihyZXNwb25zZS5kYXRhLnN0YXR1cyA9PSAiRXJyb3IiKXsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiU29tZSBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgaWYgKHRoaXMuc2VuZF9ieV9jb21wYW55ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmdldF9jb21wYW55X3RpY2tldHModGhpcy5yZXFfY29tcF9uYW1lLCB0aGlzLnJlcV9jb21wX2lkKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5nZXRfdGlja2V0X2RldGFpbHMoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgICAgICAgICQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAgICAgLy8kKCIjdGlja2V0TW9kZWxEZXRhaWxzIikubW9kYWwoImhpZGUiKTsKICAgICAgICAgICAgICAgIC8vdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICB0aGlzLmVtcHR5X3ZhcmlhYmxlKCk7CiAgICAgICAgICAgICAgJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICAgICAgaWYgKHRoaXMuc2VuZF9ieV9jb21wYW55ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmdldF9jb21wYW55X3RpY2tldHModGhpcy5yZXFfY29tcF9uYW1lLCB0aGlzLnJlcV9jb21wX2lkKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5nZXRfdGlja2V0X2RldGFpbHMoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICB9LAogICAgb3Blbl9jb21tZW50X21vZGVsKGluZGV4LCBrZXkpIHsKICAgICAgaWYgKGtleSA9PT0gbnVsbCkgewogICAgICAgIHRoaXMuQ29tbWVudHNfbGlzdCA9IFtdOwogICAgICAgIHRoaXMuQ29tbWVudHNfbGlzdCA9IEJvb2xlYW4odGhpcy50aWNrZXRzX2xpc3RbaW5kZXhdLkNvbW1lbnRzKQogICAgICAgICAgPyB0aGlzLnRpY2tldHNfbGlzdFtpbmRleF0uQ29tbWVudHMKICAgICAgICAgIDogW107CiAgICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX3RpY2tldF9udW1iZXIgPSB0aGlzLnRpY2tldHNfbGlzdFsKICAgICAgICAgIGluZGV4CiAgICAgICAgXS5UaWNrZXROdW1iZXI7CiAgICAgICAgdGhpcy50aWNrZXRfY29tcGFueV9pZCA9IHRoaXMudGlja2V0c19saXN0W2luZGV4XS5Db21wYW55SWQ7CiAgICAgICAgdGhpcy50aWNrZXRfY29tcGFueV9uYW1lID0gdGhpcy50aWNrZXRzX2xpc3RbaW5kZXhdLkNvbXBhbnlOYW1lOwogICAgICAgIHRoaXMudGlja2V0X2Rlc2NyaXB0aW9uID0gdGhpcy50aWNrZXRzX2xpc3RbaW5kZXhdLkRlc2NyaXB0aW9uOwogICAgICAgIHRoaXMudGlja2V0X2lzc3VlX25hbWUgPSB0aGlzLnRpY2tldHNfbGlzdFtpbmRleF0uVGlja2V0SXNzdWU7CiAgICAgICAgdGhpcy50aWNrZXRfc3RhdHVzID0gdGhpcy50aWNrZXRzX2xpc3RbaW5kZXhdLkN1cnJlbnRTdGF0dXM7CiAgICAgICAgaWYgKHRoaXMudGlja2V0c19saXN0W2luZGV4XS5Tb2x1dGlvbiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aGlzLnRpY2tldF9zb2x1dGlvbiA9IHRoaXMudGlja2V0c19saXN0W2luZGV4XS5Tb2x1dGlvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy50aWNrZXRfc29sdXRpb24gPSAiIjsKICAgICAgICB9CiAgICAgICAgaWYodGhpcy50aWNrZXRfc3RhdHVzID09PSAiQ2xvc2VkIikKICAgICAgICB7CiAgICAgICAgICB0aGlzLmlzX3N0YXR1c19jbG9zZWQgPSB0cnVlOwogICAgICAgIH1lbHNlewogICAgICAgICAgdGhpcy5pc19zdGF0dXNfY2xvc2VkID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHRoaXMuY3VycmVudF9zdGF0dXMgPSB0aGlzLnRpY2tldHNfbGlzdFtpbmRleF0uQ3VycmVudFN0YXR1czsKICAgICAgICB0aGlzLnNlbmRfYnlfY29tcGFueSA9IGZhbHNlOwogICAgICB9ICAKICAgICAgZWxzZSBpZiAoa2V5ID09PSAnQ29tcGFueV90aWNrZXRzJykgewogICAgICAgIHRoaXMuQ29tbWVudHNfbGlzdCA9IFtdOwogICAgICAgIHRoaXMuQ29tbWVudHNfbGlzdCA9IEJvb2xlYW4odGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFtpbmRleF0uQ29tbWVudHMpCiAgICAgICAgICA/IHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3RbaW5kZXhdLkNvbW1lbnRzCiAgICAgICAgICA6IFtdOwogICAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF90aWNrZXRfbnVtYmVyID0gdGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFsKICAgICAgICAgIGluZGV4CiAgICAgICAgXS5UaWNrZXROdW1iZXI7CiAgICAgICAgdGhpcy50aWNrZXRfZGVzY3JpcHRpb24gPSB0aGlzLmNvbXBhbnlfdGlja2V0c19saXN0W2luZGV4XS5EZXNjcmlwdGlvbjsKICAgICAgICB0aGlzLnRpY2tldF9pc3N1ZV9uYW1lID0gdGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFtpbmRleF0uVGlja2V0SXNzdWU7CiAgICAgICAgdGhpcy50aWNrZXRfc3RhdHVzID0gdGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFtpbmRleF0uQ3VycmVudFN0YXR1czsKICAgICAgICB0aGlzLnJlcV9jb21wX2lkID0gdGhpcy5jb21wYW55X3RpY2tldHNfbGlzdFtpbmRleF0uQ29tcGFueUlkOwogICAgICAgIHRoaXMucmVxX2NvbXBfbmFtZSA9IHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3RbaW5kZXhdLkNvbXBhbnlOYW1lOwogICAgICAgIGlmICh0aGlzLmNvbXBhbnlfdGlja2V0c19saXN0W2luZGV4XS5Tb2x1dGlvbiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aGlzLnRpY2tldF9zb2x1dGlvbiA9IHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3RbaW5kZXhdLlNvbHV0aW9uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnRpY2tldF9zb2x1dGlvbiA9ICIiOwogICAgICAgIH0KICAgICAgICBpZih0aGlzLnRpY2tldF9zdGF0dXMgPT09ICJDbG9zZWQiKQogICAgICAgIHsKICAgICAgICAgIHRoaXMuaXNfc3RhdHVzX2Nsb3NlZCA9IHRydWU7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICB0aGlzLmlzX3N0YXR1c19jbG9zZWQgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgdGhpcy5jdXJyZW50X3N0YXR1cyA9IHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3RbaW5kZXhdLkN1cnJlbnRTdGF0dXM7CiAgICAgICAgdGhpcy5zZW5kX2J5X2NvbXBhbnkgPSB0cnVlOwogICAgICB9CiAgICB9LAogICAgZ2V0X3RpY2tldF9kZXRhaWxzKCkgewogICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgIGF4aW9zCiAgICAgIC5wb3N0KGFwaV9jYWxscy5zdXBwb3J0X3RpY2tldCgpLCB7CiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgZmlsdGVyX2J5OiB0aGlzLnNvcnRfc3RhdHVzLAogICAgICAgIGlzX2dldDogdHJ1ZSwKICAgICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICBwYWdlX25vOiB0aGlzLnBhZ2Vfbm8KICAgICAgfSwKICAgICAgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgIH0sCiAgICAgIH0pCiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICB0b2FzdHIuZXJyb3IoCiAgICAgICAgICAgICJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLlRpY2tldHMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEuQ291bnQ7CiAgICAgICAgICB0aGlzLnRvdGFsX3BhZ2VzID0gTWF0aC5jZWlsKHRoaXMubnVtYmVyX29mX3Jvd3MgLyB0aGlzLnBlcl9wYWdlKTsKICAgICAgICAgIHRoaXMudGlja2V0c19saXN0ID0gcmVzcG9uc2UuZGF0YS5UaWNrZXRzOwogICAgICAgICAgdGhpcy5zZXRwYWdpbmF0aW9uKHRoaXMucGFnZV9ubyk7CiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT09ICJubyBleGlzdGluZyB0aWNrZXQgZm91bmQiKSB7CiAgICAgICAgICB0aGlzLnRpY2tldHNfbGlzdCA9IFtdOwogICAgICAgIH0KICAgICAgfSkKICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICApIHsKICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9LAogICAgc2VuZF9zb2x1dGlvbigpewogICAgICBpZih0aGlzLnNlbmRfc29sdXRpb25fdGV4dCAhPSAiIiAmJiB0aGlzLmN1cnJlbnRfdGlja2V0X3N0YXR1cyA9PT0gJ0Nsb3NlZCcpewogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcwogICAgICAgICAgLnBvc3QoCiAgICAgICAgICAgIGFwaV9jYWxscy5zdXBwb3J0X3RpY2tldCgpLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgICAgICAgIGlzX2VkaXQ6IHRydWUsCiAgICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICAgICAgICB0aWNrZXRfbnVtYmVyOiB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdGlja2V0X251bWJlciwKICAgICAgICAgICAgICAgIHNvbHV0aW9uOiB0aGlzLnNlbmRfc29sdXRpb25fdGV4dCwKICAgICAgICAgICAgICAgIHVwZGF0ZV9zdGF0dXM6IHRoaXMuY3VycmVudF90aWNrZXRfc3RhdHVzLAogICAgICAgICAgICAgICAgdGlja2V0X2NvbXBhbnlfaWQ6IHRoaXMudGlja2V0X2NvbXBhbnlfaWQsCiAgICAgICAgICAgICAgICB0aWNrZXRfY29tcGFueV9uYW1lOnRoaXMudGlja2V0X2NvbXBhbnlfbmFtZSwKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gcGFnZW5vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgICAgICAgLy8gcGVycGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICApCiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT09ICJUaWNrZXQgVXBkYXRlZCIpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJUaWNrZXQgc3RhdHVzIHVwZGF0ZWQgU3VjY2Vzc2Z1bGx5LiIsCiAgICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICAgIH0pLnRoZW4ocmVzdWx0ID0+IHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbmRfYnlfY29tcGFueSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgdGhpcy5nZXRfY29tcGFueV90aWNrZXRzKHRoaXMucmVxX2NvbXBfbmFtZSwgdGhpcy5yZXFfY29tcF9pZCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0X3RpY2tldF9kZXRhaWxzKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICAgICAgICB0aGlzLmVtcHR5X3ZhcmlhYmxlKCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YSA9PSAiRHVwbGljYXRlIGltYWdlIikgewogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdGV4dDoKICAgICAgICAgICAgICAgICAgIkltYWdlIGFscmVhZHkgZm91bmQuIFBsZWFzZSB1cGxvYWQgYW5vdGhlciBpbWFnZSBvciByZW5hbWUgaXQuIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmKHJlc3BvbnNlLmRhdGEubWVzc2FnZSA9PSAiREIgT1BFUkFUSU9OIFVOU1VDQ0VTU0ZVTCIpewogICAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0ZXh0OgogICAgICAgICAgICAgICAgICAiU29tZSBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4iLAogICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAzMDAwLAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgICAgICAgICAgJCgiI3RpY2tldE1vZGVsRGV0YWlscyIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICAgIH0gZWxzZSBpZihyZXNwb25zZS5kYXRhLnN0YXR1cyA9PSAiRXJyb3IiKXsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiU29tZSBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAvLyQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAgICAgLy90aGlzLmVtcHR5X3ZhcmlhYmxlKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAkKCIjdGlja2V0TW9kZWxEZXRhaWxzIikubW9kYWwoImhpZGUiKTsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgIH1lbHNlewogICAgICB9CgogICAgfSwKICAgICBvcGVuX2ltYWdlX21vZGVsKGluZGV4KSB7CiAgICAgIGlmICh0aGlzLkNvbW1lbnRzX2xpc3RbaW5kZXhdLmltYWdlX3VybCAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5JbWFnZXNfaW5fY3VycmVudF9jb21tZW50ID0gdGhpcy5Db21tZW50c19saXN0W2luZGV4XS5pbWFnZV91cmw7CiAgICAgICAgdGhpcy5jdXJyZW50X2ltYWdlX25hbWVfaW5fY29tbWVudCA9IHRoaXMuQ29tbWVudHNfbGlzdFtpbmRleF0uaW1hZ2VfbmFtZTsKICAgICAgfQogICAgfSwKICAgIFVwbG9hZF9pbWFnZV9maWxlKGV2ZW50KSB7CiAgICAgIGxldCBmaWxlcyA9IGV2ZW50LnRhcmdldC5maWxlc1swXTsKICAgICAgaWYgKGZpbGVzLnNpemUgPiAyMDk3MTUyKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiVXBsb2FkIGltYWdlIHdpdGggc2l6ZSBsZXNzIHRoYW4gMk1CIiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMTAwMDAsCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMubmV3X2ltYWdlX25hbWUgPSBldmVudC50YXJnZXQuZmlsZXNbMF0ubmFtZTsKICAgICAgdGhpcy5uZXdfaW1hZ2VfZmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXS50eXBlOwoKICAgICAgaWYgKHRoaXMubmV3X2ltYWdlX25hbWUgIT0gdGhpcy5jdXJyZW50X2ltYWdlX25hbWVfaW5fY29tbWVudCkgewogICAgICB9CiAgICAgIGlmICh0aGlzLm5ld19pbWFnZV9maWxlID09ICJpbWFnZS9wbmciKSB7CiAgICAgICAgdGhpcy5jcmVhdGVJbWFnZShmaWxlcywgdGhpcy5uZXdfaW1hZ2VfZmlsZSk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5uZXdfaW1hZ2VfZmlsZSA9PSAiaW1hZ2UvanBlZyIpIHsKICAgICAgICB0aGlzLmNyZWF0ZUltYWdlKGZpbGVzLCB0aGlzLm5ld19pbWFnZV9maWxlKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLm5ld19pbWFnZV9maWxlID09ICJpbWFnZS9qcGciKSB7CiAgICAgICAgdGhpcy5jcmVhdGVJbWFnZShmaWxlcywgdGhpcy5uZXdfaW1hZ2VfZmlsZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgdGV4dDogIlBsZWFzZSBTZWxlY3QgYW4gSW1hZ2Ugb2YgdHlwZSBQTkcgb3IgSlBFRyIsCiAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgY3JlYXRlSW1hZ2UoZmlsZSwgdHlwZSkgewogICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IGUgPT4gewogICAgICAgIHRoaXMuaW1hZ2VfZmlsZSA9IGUudGFyZ2V0LnJlc3VsdC5zcGxpdCgiYmFzZTY0LCIpWzFdOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTsKICAgIH0sCgogICAgU2VuZF90aWNrZXRfY29tbWVudHMoKSB7CiAgICAgIGlmICgKICAgICAgICB0aGlzLm5ld190aWNrZXRfY29tbWVudCAhPSAiIiB8fAogICAgICAgICh0aGlzLm5ld19pbWFnZV9uYW1lICE9ICIiICYmIHRoaXMubmV3X2ltYWdlX2ZpbGUgIT0gIiIpCiAgICAgICkgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGV4dDogIlBsZWFzZSB3YWl0IHdoaWxlIHdlIGFyZSBhZGRpbmcgeW91ciB0aWNrZXQgY29tbWVudHMuLi4iLAogICAgICAgICAgdHlwZTogImluZm8iLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UKICAgICAgICB9KTsKICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgYXhpb3MKICAgICAgICAgIC5wb3N0KAogICAgICAgICAgICBhcGlfY2FsbHMuc3VwcG9ydF90aWNrZXQoKSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgICBpc19lZGl0OiB0cnVlLAogICAgICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgICByZXNwb25zZTogewogICAgICAgICAgICAgICAgdGlja2V0X251bWJlcjogdGhpcy5jdXJyZW50X3NlbGVjdGVkX3RpY2tldF9udW1iZXIsCiAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOiB0aGlzLmN1cnJlbnRfdGlja2V0X3N0YXR1cyA/IHRoaXMuY3VycmVudF90aWNrZXRfc3RhdHVzIDogbnVsbCwKICAgICAgICAgICAgICAgIG5ld19jb21tZW50OiB0aGlzLm5ld190aWNrZXRfY29tbWVudAogICAgICAgICAgICAgICAgICA/IHRoaXMubmV3X3RpY2tldF9jb21tZW50CiAgICAgICAgICAgICAgICAgIDogbnVsbCwKICAgICAgICAgICAgICAgIHRpY2tldF9pbWdfbmFtZTogdGhpcy5uZXdfaW1hZ2VfbmFtZSA/IHRoaXMubmV3X2ltYWdlX25hbWUgOiBudWxsLAogICAgICAgICAgICAgICAgdGlja2V0X2ltZ19maWxlOiB0aGlzLmltYWdlX2ZpbGUgPyB0aGlzLmltYWdlX2ZpbGUgOiBudWxsLAogICAgICAgICAgICAgICAgdGlja2V0X2NvbXBhbnlfaWQ6IHRoaXMudGlja2V0X2NvbXBhbnlfaWQsCiAgICAgICAgICAgICAgICB0aWNrZXRfY29tcGFueV9uYW1lOnRoaXMudGlja2V0X2NvbXBhbnlfbmFtZSwKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gcGFnZW5vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgICAgICAgLy8gcGVycGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICApCiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UgPT09ICJUaWNrZXQgVXBkYXRlZCIpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJZb3VyIENvbW1lbnRzIGhhcyBiZWVuIGFkZGVkIFN1Y2Nlc3NmdWxseS4iLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgICB9KS50aGVuKHJlc3VsdCA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmVtcHR5X3ZhcmlhYmxlKCk7CiAgICAgICAgICAgICAgICQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAgIAogICAgICAgICAgICAgIC8vICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpOwogICAgICAgICAgICAgIC8vICQoJy5tb2RhbC1iYWNrZHJvcCcpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VuZF9ieV9jb21wYW55ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmdldF9jb21wYW55X3RpY2tldHModGhpcy5yZXFfY29tcF9uYW1lLCB0aGlzLnJlcV9jb21wX2lkKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5nZXRfdGlja2V0X2RldGFpbHMoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YSA9PSAiRHVwbGljYXRlIGltYWdlIikgewogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdGV4dDoKICAgICAgICAgICAgICAgICAgIkltYWdlIGFscmVhZHkgZm91bmQuIFBsZWFzZSB1cGxvYWQgYW5vdGhlciBpbWFnZSBvciByZW5hbWUgaXQuIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09ICJFcnJvciIpewogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJTb21lIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAvLyQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAgIC8vdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgICAgdGltZXI6IDI1MDAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaChlID0+IHsKICAgICAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgICApIHsKICAgICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICQoIiN0aWNrZXRNb2RlbERldGFpbHMiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgICAgICB0aW1lcjogMjUwMAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGVtcHR5X3ZhcmlhYmxlKCkgewogICAgICB0aGlzLkNvbW1lbnRzX2xpc3QgPSBbIiJdOwogICAgICB0aGlzLmNvbW1lbnRfaXRlbV9saXN0ID0gWyIiXTsKICAgICAgdGhpcy5uZXdfdGlja2V0X2NvbW1lbnQgPSAiIjsKICAgICAgdGhpcy5zZW5kX3NvbHV0aW9uX3RleHQgPSAiIjsKICAgICAgdGhpcy5uZXdfaW1hZ2VfbmFtZSA9ICIiOwogICAgICB0aGlzLm5ld19pbWFnZV9maWxlID0gIiI7CiAgICAgIHRoaXMuZmlsZV9jb250ZW50MiA9ICIiOwogICAgICB0aGlzLmlzRWRpdFRpY2tldFN0YXR1cyA9IGZhbHNlOwogICAgICB0aGlzLmN1cnJlbnRfdGlja2V0X3N0YXR1cyA9ICIiOwogICAgICB0aGlzLnRpY2tldF9jb21wYW55X2lkID0gJyc7CiAgICAgIHRoaXMudGlja2V0X2NvbXBhbnlfbmFtZSA9ICcnOwogICAgfSwKICAgIGdldF9jb21wYW55X2xpc3QoKSB7CiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgYXhpb3MKICAgICAgLnBvc3QoYXBpX2NhbGxzLnN1cHBvcnRfdGlja2V0KCksIHsKICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICBzb3J0X2J5X2NvbXBhbnk6IHRydWUsCiAgICAgICAgaXNfZ2V0OiB0cnVlLAogICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgIHBhZ2Vfbm86IHRoaXMucGFnZV9ubwogICAgICB9LAogICAgICB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgfSwKICAgICAgfSkKICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgPT0gIkludGVybmFsIFNlcnZlciBFcnJvciIpIHsKICAgICAgICAgIHRvYXN0ci5lcnJvcigKICAgICAgICAgICAgIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIgogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEuQ291bnQ7CiAgICAgICAgICB0aGlzLnRvdGFsX3BhZ2VzID0gTWF0aC5jZWlsKHRoaXMubnVtYmVyX29mX3Jvd3MgLyB0aGlzLnBlcl9wYWdlKTsKICAgICAgICAgIHRoaXMuY29tcGFueV9saXN0ID0gcmVzcG9uc2UuZGF0YS5SZXNwb25zZUxpc3Q7CiAgICAgICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgICAgICB9CiAgICAgIH0pCiAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgLy8gY29uc29sZS5sb2coZSk7CiAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgaWYgKAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIGdldF9jb21wYW55X3RpY2tldHMoa2V5MSwga2V5MikgewogICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgIGF4aW9zCiAgICAgIC5wb3N0KGFwaV9jYWxscy5zdXBwb3J0X3RpY2tldCgpLCB7CiAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgZmlsdGVyX2J5OiB0aGlzLnNvcnRfY29tcGFueV9zdGF0dXMsCiAgICAgICAgcmVxX2NvbXBhbnlfbmFtZToga2V5MSwKICAgICAgICByZXFfY29tcGFueV9pZDoga2V5MiwKICAgICAgICBpc19nZXQ6IHRydWUsCiAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICB9LAogICAgICB9KQogICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSA9PSAiSW50ZXJuYWwgU2VydmVyIEVycm9yIikgewogICAgICAgICAgdG9hc3RyLmVycm9yKAogICAgICAgICAgICAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5UaWNrZXRzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHRoaXMucmVxX2NvbXBfaWQgPSAiIjsKICAgICAgICAgIHRoaXMucmVxX2NvbXBfbmFtZSA9ICIiOwogICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEuQ291bnQ7CiAgICAgICAgICB0aGlzLnRvdGFsX3BhZ2VzID0gTWF0aC5jZWlsKHRoaXMubnVtYmVyX29mX3Jvd3MgLyB0aGlzLnBlcl9wYWdlKTsKICAgICAgICAgIHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3QgPSByZXNwb25zZS5kYXRhLlRpY2tldHM7CiAgICAgICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZSA9PT0gIm5vIGV4aXN0aW5nIHRpY2tldCBmb3VuZCIpIHsKICAgICAgICAgIHRoaXMuY29tcGFueV90aWNrZXRzX2xpc3QgPSBbXTsKICAgICAgICB9CiAgICAgIH0pCiAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgLy8gY29uc29sZS5sb2coZSk7CiAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgaWYgKAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIHBhZ2VfcmVxdWlyZShwYWdlKSB7CiAgICAgIGlmIChwYWdlID09IDAgfHwgcGFnZSA9PSB0aGlzLnRvdGFsX3BhZ2VzICsgMSkgewogICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHBhZ2UgPT0gIi4uLnMiKSB7CiAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKDEgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgfSBlbHNlIGlmIChwYWdlID09ICIuLi5sIikgewogICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCh0aGlzLnRvdGFsX3BhZ2VzICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBwYWdlOwogICAgICAgIH0KICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgaWYgKHRoaXMuZmlsdGVyX3N0YXR1cyA9PT0gJ0FsbFRpY2tldHMnKXsKICAgICAgICAgIHRoaXMuZ2V0X3RpY2tldF9kZXRhaWxzKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuZ2V0X2NvbXBhbnlfbGlzdCgpOyAKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzZXRwYWdpbmF0aW9uKHBhZ2Vfbm8pIHsKICAgICAgdGhpcy5wYWdlX2FycmF5ID0gW107CiAgICAgIGlmICh0aGlzLnRvdGFsX3BhZ2VzIDw9IDcpIHsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudG90YWxfcGFnZXM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChwYWdlX25vID09IDEpIHsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPT0gdGhpcy50b3RhbF9wYWdlcykgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMudG90YWxfcGFnZXMgLSA0OyBpIDwgdGhpcy50b3RhbF9wYWdlczsgaSsrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChpICsgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPD0gNCkgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFnZV9ubyArIDM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPj0gdGhpcy50b3RhbF9wYWdlcyAtIDQpIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwogICAgICAgIGZvciAobGV0IGkgPSBwYWdlX25vIC0gNDsgaSA8IHRoaXMudG90YWxfcGFnZXM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwogICAgICAgIGZvciAobGV0IGkgPSBwYWdlX25vIC0gMzsgaSA8PSBwYWdlX25vICsgMzsgaSsrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChpKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCh0aGlzLnRvdGFsX3BhZ2VzKTsKICAgICAgfQogICAgfSwKICAKICB9LAp9Cg=="},null]}