{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Dashboard.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Dashboard.vue","mtime":1663910265458},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm11bHRpc2VsZWN0X190YWdzIHsKICBtaW4taGVpZ2h0OiA0MnB4ICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappingsw1CA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/portal/Chatbot/Dashboard","sourcesContent":["<template>\n  <div>\n    <div class=\"dash-cont\">\n      <div class=\"spinner\" id=\"spinner\" v-show=\"spinnerOn\"></div>\n      <div class=\"container-fluid\" id=\"dashboard-chart\">\n        <div class=\"card dash-card\">\n          <div\n            class=\"card-header d-flex flex-wrap justify-content-between pb-0\"\n          >\n            <h3 class=\"mab-3 mb-md-0\">\n              {{tlt('welcome_text')}} {{ $session.get(\"UserFirstName\") }}\n            </h3>\n            <!-- <span\n              style=\"\n                margin-bottom: 5px !important;\n                color: #0645ad;\n                cursor: pointer;\n              \"\n            >\n              <i\n                class=\"fa fa-info-circle\"\n                aria-hidden=\"true\"\n                style=\"font-size: 22px\"\n                title=\"start your page tour.\"\n                @click=\"start_tour\"\n              >\n              </i>\n            </span> -->\n          </div>\n          <ul\n            class=\"list-group mb-2\"\n            style=\"width: auto\"\n            :style=\"display_list_dynamic_class()\"\n          >\n            <li\n              class=\"list-group-item\"\n              :class=\"list_group_dynamic_class(row.entity)\"\n              v-for=\"(row, index) in display_list\"\n              :key=\"index\"\n            >\n              <span v-html=\"row.message\">\n\n              </span>\n              <!-- {{ row.message }} -->\n              <a href=\"#\" style=\"float: right\" @click=\"go_to_page(row.entity)\">\n                {{ row.click_text }}</a\n              >\n            </li>\n          </ul>\n        </div>\n        <div class=\"card dash-card\">\n          <div class=\"card-header d-flex flex-wrap justify-content-between\">\n            <h4 class=\"mab-3 mb-md-0\">{{tlt('chatbot_request_response_label')}}</h4>\n            <div class=\"card-act d-flex flex-wrap\">\n              <div class=\"form-group mb-0\">\n                <select\n                  class=\"form-control\"\n                  @change=\"bar_chart_dropdown\"\n                  id=\"exampleFormControlSelect1\"\n                >\n                  <option value=\"Monthly billing cycle\">{{tlt('dashboard_billing_cycle')}}</option>\n                  <option value=\"Last 7 days\">{{tlt('dashboard_last_seven')}}</option>\n                  <option value=\"Last 30 days\">{{tlt('dashboard_last_30')}}</option>\n                  <option value=\"Last 3 months\">{{tlt('dashboard_last_3_month')}}</option>\n                  <option value=\"Last 9 months\">{{tlt('dashboard_last_9_month')}}</option>\n                  <option value=\"Last 12 months\">{{tlt('dashboard_last_12_month')}}</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"chart-box\">\n              <request-chart\n                :Successful=\"API_data.Successful\"\n                :Total=\"API_data.Total\"\n                :Unsuccessful=\"API_data.Unsuccessful\"\n                :labels=\"API_data.labels\"\n                :scaleLabel=\"bar_chart_dropdown_value_show\"\n                :scaleLabelY=\"this.tlt('dashboard_chart_yaxis')\"\n                :labelSuccessfulResponse =\"this.tlt('dashboard_chart_sucrespon')\"\n                :labelTotalRequests =\"this.tlt('dashboard_chart_totlreq')\"\n                :labelUnsuccessfulResponse =\"this.tlt('dashboard_chart_unsucrespon')\"\n              ></request-chart>\n            </div>\n          </div>\n        </div>\n        <div v-show=\"whatsapp_subscription\">\n          <div class=\"card dash-card\">\n            <div class=\"card-header d-flex justify-content-between\">\n              <h4 class=\"mab-3 mb-md-0\">{{tlt('dashboard_monthly_usage')}}</h4>\n                <div class=\"form-group mb-0\"  v-show=\"this.monthly_usage_data.length > 0\">\n                  <select\n                    class=\"form-control  pt-1 pr-3 pb-1 pl-3\"\n                    id=\"exampleFormControlSelect1\"\n                    @change=\"line_chart_dropdown\"\n                  >\n                    <option value=\"all\">{{tlt('dashboard_monthly_all')}}</option>\n                    <option value=\"free\">{{tlt('dashboard_monthly_free')}}</option>\n                    <option value=\"paid\">{{tlt('dashboard_monthly_paid')}}</option>\n                  </select>\n                </div>\n            </div>\n            <div v-if=\"not_enough_data === false && this.monthly_usage_data.length>0\">\n              <line-chart v-bind=\"line_chart_props_monthly_usage\"></line-chart>\n            </div>\n            <div v-else >\n              <div v-if=\"not_enough_data === true \" style=\"text-align: center;\">\n                  <h5 class=\"mab-3 mb-md-0 pb-4\">{{tlt('dashboard_monthly_nodata')}}</h5>\n              </div>\n              <div v-else style=\"text-align: center;\">\n                  <h5 class=\"mab-3 mb-md-0 pb-4\">{{tlt('dashboard_monthly_notengdata')}}</h5>\n              </div>\n            </div>\n          </div>\n          <div class=\"card dash-card\">\n            <div class=\"card-header  d-flex justify-content-between\">\n              <h4 class=\"mab-3 mb-md-0\">{{tlt('dashboard_appro_charge')}}</h4>\n              <div class=\"form-group mb-0\" v-if=\"list_of_year.length > 0\">\n                <select\n                  class=\"form-control pt-1 pr-3 pb-1 pl-3\"\n                  id=\"exampleFormControlSelect1\"\n                  @change=\"line_chart_year_dropdown\"\n                >\n                  <option v-for=\"(year,index) in list_of_year\"\n                  :key=\"index\"\n                  >{{year}}</option>\n                </select>\n              </div>\n            </div>\n            <div v-if=\"pricing_data.length>0\">\n            <line-chart v-bind=\"line_chart_props_approx_charge\"></line-chart>\n            </div>\n            <div v-else >\n              <div v-if=\"not_enough_data === true \" style=\"text-align: center;\">\n                  <h5 class=\"mab-3 mb-md-0 pb-4\">{{tlt('dashboard_monthly_nodata')}}</h5>\n              </div>\n              <div v-else style=\"text-align: center;\">\n                  <h5 class=\"mab-3 mb-md-0 pb-4\">{{tlt('dashboard_appro_charge_noenoughdata')}}</h5>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- <div class=\"card dash-card\">\n          <div class=\"card-header d-flex flex-wrap justify-content-between\">\n            <h4 class=\"mab-3 mb-md-0\">Chatbot Billing Parameters</h4>\n            <div class=\"card-act d-flex flex-wrap\">\n              <div class=\"form-group mb-0\">\n                <select\n                  class=\"form-control\"\n                  v-model=\"bar_chart2_dropdown_value\"\n                  @change=\"graph_2_bar_chart_dropdown\"\n                  id=\"exampleFormControlSelect\"\n                >\n                  <option>Last 7 days</option>\n                  <option>Last 30 days</option>\n                  <option>Last 3 months</option>\n                  <option>Last 9 months</option>\n                  <option>Last 12 months</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"chart-box\">\n              <billing-chart\n                :CallsCount=\"this.Second_chart.CallCount\"\n                :MsgExchange=\"this.Second_chart.MsgExchange\"\n                :TasksExecuted=\"this.Second_chart.TaskExecution\"\n                :labels=\"this.Second_chart.labels\"\n                :scaleLabel=\"this.bar_chart2_dropdown_value\"\n              ></billing-chart>\n            </div>\n          </div>\n        </div> -->\n      </div>\n    </div>\n    <div\n      class=\"modal fade dash-modal\"\n      id=\"store_config\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-hidden=\"true\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-body\">\n            <div class=\"modal-head d-flex align-items-center\">\n              <div class=\"head-icn\">\n                <img src=\"/img/msg-blue.png\" alt />\n              </div>\n              <h3>{{tlt('dashboard_store_config')}}</h3>\n            </div>\n            <button\n              type=\"button\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n            >\n              <img src=\"/img/close-icn.png\" alt />\n            </button>\n            <div class=\"col-sm-12\">\n               <div class=\"form-group mb-0\">\n                  <div></div>\n                  <label\n                    class=\"mb-sm-6 mt-3\"\n                    style=\"margin-top: 0.3rem !important;\"\n                  ><strong>{{tlt('shop_base_currency_label')}}</strong></label\n                  >\n                  <div class=\"form-group mb-0\">\n                    <multiselect\n                      v-model=\"currency_code\"\n                      :options=\"currency_list\"\n                      :searchable=\"true\"\n                      :close-on-select=\"true\"\n                      :taggable=\"false\"\n                      :multiple=\"false\"\n                      :placeholder=\"tlt('shop_currency')\"\n                      :max-height=\"200\"\n                      track-by=\"display_name\"\n                      label=\"display_name\"\n                      :allow-empty=\"false\"\n                    >\n                      <!-- <span>{{ currency_name}}</span> -->\n                    </multiselect>\n                  </div>\n                  <hr style=\"margin-top: 1.9rem !important;\" />\n                  <div>\n                    <label\n                    class=\"mb-sm-6 mt-4\"\n                    style=\"margin-top: 0.3rem !important;\"\n                    ><strong>{{tlt('contact_us_email_label')}}</strong>\n                    </label><br/>\n                    <label>\n                      {{tlt('email_for_customer_label')}}\n                    </label>\n                    <input\n                      v-model.trim=\"contact_us_email\"\n                      type=\"email\"\n                      class=\"form-control\"\n                      :placeholder=\"tlt('enter_email')\"\n                      style=\"padding: 8px;margin-bottom: 1rem;border-radius: 12px !important\"\n                      required\n                    />\n                    <div\n                      class=\"is-invalid\"\n                      style=\"color:red; padding-bottom:15px;\"\n                      v-if=\"validEmail!=true && contact_us_email!=''\"\n                    >\n                      {{ validEmail }}\n                    </div>\n                  </div>\n                  <div\n                  class=\"card-act btn-wrap text-right mt-0 pt-0 pb-3 border-top-0\"\n                  style=\"margin-left: 2rem;margin-bottom: 0.4rem\"\n                  >\n                  <button\n                    type=\"submit\"\n                    style=\"display: text-center !important;\"\n                    class=\"darkblue-btn mt-3\"\n                    @click=\"configure_product_settings()\"\n                  >\n                    {{tlt('save_btn')}}\n                  </button>\n                </div>\n               </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal fade dash-modal\"\n      id=\"bot_language_setup\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-hidden=\"true\"\n      data-backdrop=\"static\"\n      data-keyboard=\"false\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-body\">\n            <div class=\"modal-head d-flex align-items-center\">\n              <div class=\"head-icn\">\n                <img src=\"/img/msg-blue.png\" alt />\n              </div>\n              <h3>{{tlt('chatbot_default_heading')}}</h3>\n            </div>\n            <div class=\"col-sm-12\">\n               <div class=\"form-group mb-0\">\n                  <label\n                    class=\"mb-sm-6 mt-3\"\n                    style=\"margin-top: 0.3rem !important;\"\n                  ><strong>{{tlt('chatbot_default_lang')}}</strong></label\n                  >\n                  <div class=\"form-group mb-0\">\n                    <multiselect\n                      v-model=\"language_code\"\n                      :options=\"country_list\"\n                      :searchable=\"true\"\n                      :close-on-select=\"true\"\n                      :taggable=\"false\"\n                      :multiple=\"false\"\n                      :placeholder=\"tlt('Country')\"\n                      :max-height=\"200\"\n                      track-by=\"display_name\"\n                      label=\"display_name\"\n                      :allow-empty=\"false\"\n                    >\n                    </multiselect>\n                  </div>\n                  <div\n                  class=\"card-act btn-wrap text-right mt-3 pt-0 pb-3 border-top-0\"\n                  style=\"margin-left: 2rem;margin-bottom: 0.4rem\"\n                  >\n                  <button\n                    id=\"save_language_chatbot_btn\"\n                    type=\"submit\"\n                    style=\"display: text-center !important;\"\n                    class=\"darkblue-btn \"\n                    @click=\"save_language_chatbot()\"\n                  >\n                    {{tlt('save_btn')}}\n                  </button>\n                </div>\n               </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { bus } from \"@/portal/main\";\nimport api_calls from \"@/portal/api_calls\";\nimport RequestChart from \"@/portal/components/RequestChart.vue\";\nimport AreaChart from \"@/portal/components/AreaChart.vue\";\nimport BillingChart from \"@/portal/components/BillingChart.vue\";\nimport swal from 'sweetalert2';\nimport Multiselect from \"vue-multiselect\";\nimport currency from \"@/portal/components/Currency\";\nimport LineChart from \"@/portal/components/LineChart\";\nimport {  close_modal } from \"@/portal/mixins\";\n\n//import page_guide from \"@/portal/mixins/pageguide.js\";\nexport default {\n  //mixins: [page_guide],\n  props: {},\n    mixins: [ close_modal],\n  components: {\n    RequestChart,\n    AreaChart,\n    BillingChart,\n    Multiselect,\n    LineChart,\n  },\n  mounted(){\n    this.retail_web_framework = this.$session.get(\"retail_web_framework\");\n    for (var i = 0; i < currency.length; i++) {\n      this.currency_list.push({\n        display_name:\n          currency[i].emoji +\n          \" \" +\n          currency[i].currency_code +\n          \" - \" +\n          currency[i].currency_name,\n        value: currency[i].currency_code\n      });\n    }\n    var currentTime = new Date()\n    this.current_year = currentTime.getFullYear();\n    if(this.whatsapp_subscription == true){\n     this.get_metrics_data();\n     this.get_metrics_price_data();\n    }\n    let check_domain = this.$session.get(\"UserInformation\").domain;\n    let is_set_default_language = this.$session.get(\"UserInformation\").is_set_default_language;\n      if(is_set_default_language == true ){\n        $(\"#bot_language_setup\").modal('show');\n      }\n    this.$root.$on('call_dashboard_details', (data) => {\n      if (data === true) {\n        this.dashboard_details();\n        this.bar_chart_dropdown(this.bar_chart_dropdown_value);\n      }\n    });\n  },\n  created() {\n    if (\n      !this.$session.has(\"CompanyId\") &&\n      this.$session.has(\"UserInformation\").role &&\n      this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\n    ) {\n      toastr.warning(this.tlt('select_company_name_label'));\n    }\n    if (this.user_role == \"SuperAdmin\") {\n      if (this.$session.has(\"CompanyId\")) {\n        this.companyid = this.$session.get(\"CompanyId\");\n        this.companyname = this.$session.get(\"CompanyName\");\n      }\n    } else {\n      this.companyid = this.$session.has(\"UserInformation\")\n        ? this.$session.get(\"UserInformation\").company_id\n        : \"\";\n      this.companyname = this.$session.has(\"UserInformation\")\n        ? this.$session.get(\"UserInformation\").company_name\n        : \"\";\n    }\n    this.whatsapp_subscription = this.$session.get(\"whatsapp_subscription\");\n    this.dashboard_details();\n    // axios\n    //   .post(\n    //     api_calls.billing_usage_url(),\n    //     {\n    //       company_name: this.companyname,\n    //       company_id: this.companyid,\n    //       email: this.$session.get(\"UserInformation\").email,\n    //       token: this.$session.get(\"UserInformation\").tokens,\n    //       load_data_by: \"Last 7 days\",\n    //       license_key: this.$session.get(\"UserInformation\").license_key,\n    //     },\n    //     {\n    //       headers: {\n    //         Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //       },\n    //     }\n    //   )\n    //   .then((response) => {\n    //     this.Second_chart.labels = [];\n    //     this.Second_chart.CallCount = [];\n    //     this.Second_chart.MsgExchange = [];\n    //     this.Second_chart.TaskExecution = [];\n    //     if (response.data == \"No Data available\") {\n    //       bus.$emit(\n    //         \"chart is updated\",\n    //         \"True\",\n    //         [],\n    //         [],\n    //         [],\n    //         [],\n    //         this.bar_chart2_dropdown_value\n    //       );\n    //     } else {\n    //       for (var i in response.data) {\n    //         this.Second_chart.labels.push(i);\n    //         this.Second_chart.CallCount.push(response.data[i].CallCount);\n    //         this.Second_chart.MsgExchange.push(response.data[i].MsgExchange);\n    //         this.Second_chart.TaskExecution.push(\n    //           response.data[i].TaskExecution\n    //         );\n    //       }\n    //       bus.$emit(\n    //         \"billing chart is updated\",\n    //         \"True\",\n    //         this.Second_chart.CallCount,\n    //         this.Second_chart.MsgExchange,\n    //         this.Second_chart.TaskExecution,\n    //         this.Second_chart.labels,\n    //         this.bar_chart2_dropdown_value\n    //       );\n    //     }\n    //   })\n    //   .catch((e) => {\n    //     if (\n    //       e.response.status === 410 ||\n    //       e.response.status === 440 ||\n    //       e.response.status === 409\n    //     ) {\n    //       this.$root.$emit(\"Session_Expired\", e.response.data);\n    //     }\n    //   });\n    axios\n      .post(\n        api_calls.dashboard_chart_url(),\n        {\n          company_name: this.companyname,\n          company_id: this.companyid,\n          email: this.$session.get(\"UserInformation\").email,\n          token: this.$session.get(\"UserInformation\").tokens,\n          load_data_by: \"Monthly billing cycle\",\n          license_key: this.$session.get(\"UserInformation\").license_key,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${this.$session.get(\"at\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data.message.MSG_CODE == this.api_status_code.BILLING_CHART.MSG_CODE) {\n          this.update_chart_data(response.data.data);\n        }else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\n          toastr.error(this.tlt('add_role_internal_server_msg3'));\n        }else {\n          Swal({\n            title: response.data.message.MSG_CODE,\n            text: response.data.message.MSG,\n            showCancelButton: false,\n            showConfirmButton: false,\n            type: \"error\",\n            toast:true,\n            timer:2500\n          })\n          return;\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n        if (\n          e.response.status === 410 ||\n          e.response.status === 440 ||\n          e.response.status === 409\n        ) {\n          this.$root.$emit(\"Session_Expired\", e.response.data);\n        }\n      });\n  },\n  updated() {\n    bus.$on(\"company attributes updated\", (data) => {\n      if (data == \"True\") {\n        bus.$emit(\"send company attributes\");\n      }\n    });\n    bus.$on(\"company name and company id\", (data1, data2) => {\n      this.$router.go();\n    });\n  },\n  computed:{\n    validEmail () {\n      if(this.contact_us_email != null){\n        if (this.email_validity.test(this.contact_us_email)) {\n          return true;\n        } else {\n          return this.tlt('valid_email_addr_label');\n        }\n      }\n    },\n    line_chart_props_monthly_usage(){\n      return {\n        xAxisLabel: 'Timeline',\n        yAxisLabel: 'Value',\n        xKey: 'date',\n        yKey: 'value',\n        interval: 'day',\n        data: this.monthly_usage_data\n      }\n    },\n    line_chart_props_approx_charge(){\n      return {\n        xAxisLabel: 'Timeline',\n        yAxisLabel: 'price ($)',\n        xKey: 'date',\n        yKey: 'value',\n        interval: 'day',\n        data: this.pricing_data\n      }\n    }\n  },\n  data() {\n    return {\n      show: false,\n      bar_chart_dropdown_value: \"Monthly billing cycle\",\n      bar_chart_dropdown_value_show: \"Monthly billing cycle\",\n      bar_chart2_dropdown_value: \"Last 7 days\",\n      companyname: null,\n      companyid: null,\n      permission_list: [],\n      API_data: {\n        labels: [],\n        Successful: [],\n        Total: [],\n        Unsuccessful: [],\n        xAxisLabel: \"\",\n      },\n      Second_chart: {\n        labels: [],\n        CallCount: [],\n        MsgExchange: [],\n        TaskExecution: [],\n      },\n      Concurrent_Users_Data: {\n        labels: [],\n        data: [],\n      },\n      concurrent_users_month: \"\",\n      user_role: this.$session.has(\"UserInformation\")\n        ? this.$session.get(\"UserInformation\").role\n        : \"\",\n      intent_count: 53,\n      intent_count_display: 0,\n      display_list: [],\n      primary_item_entities_list: [\"Intents\", \"Questions\", \"Responses\", \"Training\"],\n      danger_item_entities_list: [\n        \"Verify Responses Unanswered\",\n        \"Verify Bot Response\",\n        \"Products\",\n        \"Synonyms\",\n        \"Accounts\"\n      ],\n      info_item_entities_list: [],\n      success_item_info_list: [\"Check Bot Response\",\"Bot Configuration\"],\n      item_list_order: [\"danger_item_entities_list\", \"success_item_info_list\", \"primary_item_entities_list\"],\n      spinnerOn: false,\n      retail_web_framework:this.$session.get(\"retail_web_framework\"),\n      currency_code: \"\",\n      currency_list: [],\n      email_validity: /^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$/,\n      contact_us_email:'',\n      monthly_usage_data:[],\n      pricing_data:[],\n      line_chart_dropdown_value :'all',\n      list_of_year: [],\n      price_chart_dropdown_value:'',\n      current_year: '',\n      whatsapp_subscription:false,\n      not_enough_data: false,\n      is_bot_lang_set : false,\n      country_list: [\n        {\n          display_name: \"🇺🇸 English\",\n          value: \"en\",\n          lang: \"english\"\n        },\n        // {\n        //   display_name: \"🇪🇸 Spanish\",\n        //   value: \"es\",\n        //   lang: \"spanish\"\n        // },\n        {\n          display_name: \"🇮🇳 Hindi\",\n          value: \"hi\",\n          lang : \"hindi\"\n        },\n        {\n          display_name: \"🇵🇹 Portuguese\",\n          value: \"pt\",\n          lang : \"portuguese\"\n        }\n      ],\n      language_code: null\n      //tour_guide_icon: require(\"@/portal/assets/img/info_icon.svg\"),\n    };\n  },\n  methods: {\n    // graph_2_bar_chart_dropdown() {\n    //   this.bar_chart2_dropdown_value = event.target.value;\n    //   // console.log(this.bar_chart2_dropdown_value)\n    //   axios\n    //     .post(\n    //       api_calls.billing_usage_url(),\n    //       {\n    //         company_name: this.$session.get(\"UserInformation\").company_name,\n    //         company_id: this.$session.get(\"UserInformation\").company_id,\n    //         email: this.$session.get(\"UserInformation\").email,\n    //         token: this.$session.get(\"UserInformation\").tokens,\n    //         load_data_by: this.bar_chart2_dropdown_value,\n    //         license_key: this.$session.get(\"UserInformation\").license_key,\n    //       },\n    //       {\n    //         headers: {\n    //           Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //         },\n    //       }\n    //     )\n    //     .then((response) => {\n    //       this.Second_chart.labels = [];\n    //       this.Second_chart.CallCount = [];\n    //       this.Second_chart.MsgExchange = [];\n    //       this.Second_chart.TaskExecution = [];\n    //       if (response.data == \"No Data available\") {\n    //       } else {\n    //         for (var i in response.data) {\n    //           this.Second_chart.labels.push(i);\n    //           this.Second_chart.CallCount.push(response.data[i].CallCount);\n    //           this.Second_chart.MsgExchange.push(response.data[i].MsgExchange);\n    //           this.Second_chart.TaskExecution.push(\n    //             response.data[i].TaskExecution\n    //           );\n    //         }\n    //       }\n    //     })\n    //     .catch((e) => {\n    //       if (\n    //         e.response.status === 410 ||\n    //         e.response.status === 440 ||\n    //         e.response.status === 409\n    //       ) {\n    //         this.$root.$emit(\"Session_Expired\", e.response.data);\n    //       }\n    //     });\n    // },\n    bar_chart_dropdown(val) {\n      if (typeof(val) == 'object'){\n        this.bar_chart_dropdown_value = event.target.value;\n      }else{\n        this.bar_chart_dropdown_value = val\n      }\n      axios\n        .post(\n          api_calls.dashboard_chart_url(),\n          {\n            company_name: this.companyname,\n            company_id: this.companyid,\n            email: this.$session.get(\"UserInformation\").email,\n            token: this.$session.get(\"UserInformation\").tokens,\n            load_data_by: this.bar_chart_dropdown_value,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          if (response.data.message.MSG_CODE == this.api_status_code.BILLING_CHART.MSG_CODE) {\n            this.update_chart_data(response.data.data);\n          }else {\n            Swal({\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              toast: true,\n              position: \"top-end\",\n              type: \"error\"\n            })\n          }\n        })\n        .catch((e) => {\n          console.log(e)\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    update_chart_data(message) {\n      this.API_data.labels = [];\n      this.API_data.Successful = [];\n      this.API_data.Total = [];\n      this.API_data.Unsuccessful = [];\n      if( this.bar_chart_dropdown_value == 'Monthly billing cycle'){\n         this.bar_chart_dropdown_value_show = this.tlt('dashboard_billing_cycle');\n      }else if ( this.bar_chart_dropdown_value == 'Last 7 days'){\n         this.bar_chart_dropdown_value_show = this.tlt('dashboard_last_seven');\n      }else if ( this.bar_chart_dropdown_value == 'Last 30 days'){\n         this.bar_chart_dropdown_value_show = this.tlt('dashboard_last_30');\n      }else if ( this.bar_chart_dropdown_value == 'Last 3 months'){\n        this.bar_chart_dropdown_value_show = this.tlt('dashboard_last_3_month');\n      }else if ( this.bar_chart_dropdown_value == 'Last 9 months'){\n        this.bar_chart_dropdown_value_show = this.tlt('dashboard_last_9_month');\n      }else {\n        this.bar_chart_dropdown_value_show = this.tlt('dashboard_last_12_month');\n      }\n      if (message == \"No Data available\") {\n      } else {\n        for (var i in message) {\n          this.API_data.labels.push(i);\n          this.API_data.Successful.push(message[i].Successful);\n          this.API_data.Total.push(message[i].Total);\n          this.API_data.Unsuccessful.push(message[i].Unsuccessful);\n        }\n      }\n    },\n    go_to_page(page_name) {\n      if (page_name == \"Verify Responses Unanswered\") {\n        this.$router.push({\n          name: \"Verify Bot Response\",\n          params: { modal_open_switch_tab: false },\n        });\n      } else if(page_name == \"Synonyms\"){\n        swal({\n          title: this.tlt('dashboard_swal_alert_msg'),\n          text: this.tlt('dashboard_train_model_msg'),\n          type: \"question\",\n          showCancelButton: true,\n          confirmButtonColor: \"#3085d6\",\n          cancelButtonColor: \"#d33\",\n          confirmButtonText: this.tlt('dashboard_swal_confirm_msg'),\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n        }).then((result) => {\n          if (result.value) {\n            this.spinnerOn = true;\n            axios\n              .post(\n                api_calls.train_intent_ner_model(),\n                {\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  subscription: this.$session.get(\"UserInformation\").subscription,\n                  company_name: this.$session.get(\"UserInformation\").company_name,\n                  company_id: this.$session.get(\"UserInformation\").company_id,\n                  update_model: true,\n                  update_model_status: true\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                this.spinnerOn = false;\n                this.$root.$emit(\"want_model_status\",true);\n                \n                  Swal({\n                    title: response.data.message.MSG_CODE,\n                    text: response.data.message.MSG,\n                    showCancelButton: false,\n                    showConfirmButton: false,\n                    \n                  })\n\n                if(response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE){\n                  toastr.error(this.tlt('dashboard_internal_server_msg'));\n                }\n              })\n              .catch((e) => {\n                this.spinnerOn = false;\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n                toastr.error(this.tlt('some_error_please_try_again','code'));\n              });\n          }\n        });\n      } else if (page_name == \"Products\"){\n          $(\"#store_config\").modal('show');\n          this.load_product_settings();\n      }\n      else if (page_name==\"Accounts\"){\n        this.$router.push({\n          name: 'Settings',params:{Subscription:true}\n        })\n      }\n      else {\n        this.$router.push({\n          name: page_name,\n          params: { modal_open_switch_tab: true },\n        });\n      }\n    },\n    intents_count_function() {\n      let startTimestamp = null;\n      let duration = 2000;\n      let end = this.intent_count;\n      let start = 0;\n      const step = (timestamp) => {\n        if (!startTimestamp) startTimestamp = timestamp;\n        const progress = Math.min((timestamp - startTimestamp) / duration, 1);\n        this.intent_count_display = Math.floor(\n          progress * (end - start) + start\n        );\n        if (progress < 1) {\n          window.requestAnimationFrame(step);\n        }\n      };\n      window.requestAnimationFrame(step);\n    },\n    list_group_dynamic_class(row) {\n      if (this.primary_item_entities_list.includes(row)) {\n        return \"list-group-item-primary\";\n      } else if (this.danger_item_entities_list.includes(row)) {\n        return \"list-group-item-danger\";\n      } else if (this.info_item_entities_list.includes(row)) {\n        return \"list-group-item-info\";\n      } else if (this.success_item_info_list.includes(row)) {\n        return \"list-group-item-success\";\n      }\n    },\n    list_group_dynamic_type(row) {\n      /**\n        * @param- row determines which list grou pit belongs to.\n        * @returns- the respective list item colour prefixed with alphabet for easy sorting as per our requirement\n      */\n      if (this.primary_item_entities_list.includes(row)) {\n        return \"d-primary\";\n      } else if (this.danger_item_entities_list.includes(row)) {\n        return \"a-danger\";\n      } else if (this.info_item_entities_list.includes(row)) {\n        return \"b-info\";\n      } else if (this.success_item_info_list.includes(row)) {\n        return \"c-success\";\n      }\n    },\n    display_list_dynamic_class() {\n      if (this.display_list.length > 0) {\n        return \"padding: 20px 25px;\";\n      } else {\n        return \"padding: 10px 25px;\";\n      }\n    },\n    configure_product_settings() {\n      if(this.validEmail != true){\n        swal({\n          text: this.tlt('dashboard_valid_email_text'),\n          type: \"warning\",\n          timer: 3000\n        });\n        return\n      }\n      if(this.currency_code == ''){\n        swal({\n          text: this.tlt('dashboard_base_currency_text'),\n          type: \"warning\",\n          timer: 3000\n        });\n        return\n      }else {\n        this.big_spinner = true;\n        axios\n          .post(\n            api_calls.product_settings(),\n            {\n              company_name: this.companyname,\n              company_id: this.companyid,\n              email: this.$session.get(\"UserInformation\").email,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              token: this.$session.get(\"UserInformation\").tokens,\n              is_email_required: true,\n              email_required: {\n                contact_help_email:this.contact_us_email,\n                base_currency: this.currency_code,\n                \"shop_settings_saved\": true\n              }\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`\n              }\n            }\n          )\n          .then(response => {\n            this.big_spinner = false;\n             $(\"#store_config\").modal('hide');\n            if (response.data.message.MSG_CODE == this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE) {\n              swal({\n                text: this.tlt('dashboard_changes_saved_text'),\n                type: \"success\",\n                timer: 4000\n              });\n              this.empty_variable();\n              this.dashboard_details();\n            } else if(response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE){\n              swal({\n                text: this.tlt('dashboard_internal_server_error'),\n                type: \"error\",\n                timer: 2000,\n                showCancelButton: false,\n                showConfirmButton: false,\n              });\n            }else {\n              Swal({\n                title: response.data.message.MSG_CODE,\n                text: response.data.message.MSG,\n                showCancelButton: false,\n                showConfirmButton: false,\n                type: \"error\"\n              })\n            }\n          })\n          .catch(e => {\n            this.big_spinner = false;\n            toastr.error(this.tlt('some_error_occurred_msg', 'code'));\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      }\n    },\n    empty_variable() {\n      this.contact_us_email = '';\n      this.email_required = false;\n      this.currency_code = \"\";\n    },\n    dashboard_details(){\n    this.spinnerOn = true;\n    axios\n      .post(\n        api_calls.dashboard_bot_details_count(),\n        {\n          company_name: this.companyname,\n          company_id: this.companyid,\n          email: this.$session.get(\"UserInformation\").email,\n          token: this.$session.get(\"UserInformation\").tokens,\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          portal_lang: this.$session.get(\"PreferredLanguage\"),\n          is_get: true,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${this.$session.get(\"at\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        this.spinnerOn = false;\n        this.display_list = [];\n        this.permission_list = [];\n        for (var i in this.$session.get(\"ChatbotMenu\")) {\n          this.permission_list.push(\n            this.$session.get(\"ChatbotMenu\")[i].main_menu.name\n          );\n          for (var j in this.$session.get(\"ChatbotMenu\")[i].sub_menu_list) {\n            this.permission_list.push(\n              this.$session.get(\"ChatbotMenu\")[i].sub_menu_list[j].name\n            );\n          }\n        }\n        if (response.data.data.Status === \"Success\") {\n          var verify_bot_response = false,\n          store_settings = false;\n          for (var n in this.permission_list) {\n            if (this.permission_list[n] == \"Verify Bot Response\") {\n              verify_bot_response = true;\n            }\n            if(this.permission_list[n] === \"Store\"){\n              store_settings = true;\n            }\n          }\n          for (var i in response.data.data.data) {\n            let pushed = false;\n            for (var j in this.permission_list) {\n              if (response.data.data.data[i].entity == this.permission_list[j]) {\n                response.data.data.data[i].list_belong = this.list_group_dynamic_type(response.data.data.data[i].entity)\n                this.display_list.push(response.data.data.data[i]);\n                pushed = true;\n              }\n              if (\n                verify_bot_response == true &&\n                response.data.data.data[i].entity == \"Verify Responses Unanswered\"\n              ) {\n                pushed = true;\n                response.data.data.data[i].list_belong = this.list_group_dynamic_type(response.data.data.data[i].entity)\n                this.display_list.push(response.data.data.data[i]);\n                verify_bot_response = false;\n              }\n              if (\n                store_settings == true &&\n                response.data.data.data[i].entity == \"Products\"\n              ) {\n                pushed = true;\n                response.data.data.data[i].list_belong = this.list_group_dynamic_type(response.data.data.data[i].entity)\n                this.display_list.push(response.data.data.data[i]);\n                store_settings = false;\n              }\n            }\n            if(!pushed){\n              if(response.data.data.data[i].entity === \"Training\"){\n                response.data.data.data[i].list_belong = this.list_group_dynamic_type(response.data.data.data[i].entity)\n                this.display_list.push(response.data.data.data[i])\n                pushed = true;\n              }\n            }\n            if(!pushed){\n              if(response.data.data.data[i].entity === \"Synonyms\"){\n                response.data.data.data[i].list_belong = this.list_group_dynamic_type(response.data.data.data[i].entity)\n                this.display_list.push(response.data.data.data[i])\n                pushed = true;\n              }\n            }\n            if(!pushed){\n              if(response.data.data.data[i].entity === \"Accounts\"){\n                response.data.data.data[i].list_belong = this.list_group_dynamic_type(response.data.data.data[i].entity)\n                this.display_list.push(response.data.data.data[i])\n                pushed = true;\n              }\n            }\n\n          }\n          this.display_list.sort((a,b) => (a.list_belong > b.list_belong) ? 1 : -1 )\n        }else {\n            Swal({\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              toast: true,\n              position: \"top-end\",\n              type: \"error\"\n            })\n          }\n      })\n      .catch((e) => {\n        this.spinnerOn = false;\n        if (\n          e.response.status === 410 ||\n          e.response.status === 440 ||\n          e.response.status === 409\n        ) {\n          this.$root.$emit(\"Session_Expired\", e.response.data);\n        }\n      });\n    },\n    load_product_settings() {\n      this.contact_us_email = '';\n      this.email_required = false;\n      this.currency_code = \"\";\n      this.big_spinner = true;\n      axios\n        .post(\n          api_calls.product_settings(),\n          {\n            company_name: this.companyname,\n            company_id: this.companyid,\n            email: this.$session.get(\"UserInformation\").email,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.$session.get(\"UserInformation\").tokens,\n            is_get: true\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`\n            }\n          }\n        )\n        .then(response => {\n          this.big_spinner = false;\n          var webframework = this.retail_web_framework;\n          if (\n            \n            response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE \n          ) {\n            this.contact_us_email = response.data.data[webframework + '_details'].contact_help_email;\n            this.email_required =\n              response.data.data[webframework + '_details'].order_retrieval_only_email_required;\n            this.currency_code =\n              response.data.data[webframework + '_details'].base_currency;\n          } else if(response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE){\n            toastr.error(this.tlt('dashboard_internal_server_msg1'));\n          }else {\n                Swal({\n                  title: response.data.message.MSG_CODE,\n                  text: response.data.message.MSG,\n                  showCancelButton: false,\n                  showConfirmButton: false,\n                  type: \"error\"\n                })\n              }\n        })\n        .catch(e => {\n          this.big_spinner = false;\n          toastr.error(this.tlt('some_error_occurred_msg','code'));\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    get_metrics_data(){\n       axios\n        .post(\n          api_calls.whatsapp_metrics(),\n          {\n            company_name: this.companyname,\n            company_id: this.companyid,\n            is_get:this.line_chart_dropdown_value,\n            is_get_conversation_metrics:true,\n            year: this.current_year\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n           if (response.data.message.MSG_CODE == this.api_status_code.INSUFFICIENT_WHATSAPP_METRICS_DATA.MSG_CODE) {\n                        this.not_enough_data = true;\n\n            this.monthly_usage_data = [];\n          }else if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\n            this.monthly_usage_data =response.data.data.data;\n\n            this.not_enough_data = false;\n          }else {\n  Swal({\n    title: response.data.message.MSG_CODE,\n    text: response.data.message.MSG,\n    showCancelButton: false,\n    showConfirmButton: false,\n    type: \"error\"\n  })\n}\n        })\n        .catch((e) => {\n          console.log(e)\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    get_metrics_price_data(){\n       axios\n        .post(\n          api_calls.whatsapp_metrics(),\n          {\n            company_name: this.companyname,\n            company_id: this.companyid,\n            is_get:'price',\n            is_get_conversation_metrics:true,\n            year: this.current_year\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          if (response.data.message.MSG_CODE == this.api_status_code.INSUFFICIENT_WHATSAPP_METRICS_DATA.MSG_CODE) {\n            this.pricing_data= [];\n            this.pricing_data = [];\n            this.not_enough_data = true;\n          }else if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\n      \n            this.pricing_data = response.data.data.data;\n            this.list_of_year = response.data.data.years;\n          }else {\n  Swal({\n    title: response.data.message.MSG_CODE,\n    text: response.data.message.MSG,\n    showCancelButton: false,\n    showConfirmButton: false,\n    type: \"error\"\n  })\n}\n        })\n        .catch((e) => {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    line_chart_dropdown(){\n      this.line_chart_dropdown_value = event.target.value;\n      this.get_metrics_data();\n    },\n    line_chart_year_dropdown(){\n      this.current_year = event.target.value;\n      this.get_metrics_price_data();\n      this.get_metrics_data();\n    },\n    save_language_chatbot(){\n      if(this.language_code == null){\n         swal({\n          text: \"Please select language\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 3000\n        });\n        return\n      }\n      let language = this.language_code.lang;\n      let lang_code = this.language_code.value;\n      axios.\n        post(\n          api_calls.portal_language_data(),\n          {\n            company_name: this.companyname,\n            company_id: this.companyid,\n            email: this.$session.get(\"UserInformation\").email,\n            token: this.$session.get(\"UserInformation\").tokens,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            chatbot_language_code:lang_code,\n            chatbot_language: language,\n            save_chatbot_language: true,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          if(response.data.message.MSG_CODE == this.api_status_code.LANGUAGE_UPDATED.MSG_CODE){\n            swal({\n              text: \"Bot Language Update Successfully\",\n              type: \"success\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 3000\n            });\n            let userinfo = this.$session.get(\"UserInformation\");\n            userinfo[\"is_set_default_language\"] = false;\n            userinfo[\"chatbot_language\"] = language;\n            userinfo[\"chatbot_language_code\"] = lang_code;\n            this.$session.set(\"UserInformation\", userinfo);\n          }else if(response.data.message.MSG_CODE == this.api_status_code.UNSUCCESSFUL_DB_OPERATION.MSG_CODE){\n             swal({\n              text: \"Unable to update Bot Language\",\n              type: \"error\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 3000\n            });\n          }else {\n            swal({\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              toast: true,\n              position: \"top-end\",\n              type: \"error\"\n            });\n          }\n        })\n        .catch((e) => {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n        this.close_modal('save_language_chatbot_btn')\n    }\n  },\n};\n</script>\n\n<style scoped>\n.dash-card .card-body {\n  min-height: fit-content;\n}\na {\n  color: black;\n}\na:hover {\n  color: #4024da;\n}\n</style>\n<style>\n.multiselect__tags {\n  min-height: 42px !important;\n}\n</style>\n"]}]}