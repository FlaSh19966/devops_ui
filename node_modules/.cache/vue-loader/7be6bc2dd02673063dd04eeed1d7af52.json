{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue?vue&type=style&index=0&lang=scss&rel=stylesheet%2Fless&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue","mtime":1645594423479},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Dialog.vue"],"names":[],"mappingsuOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dialog.vue","sourceRoot":"src/portal/Chatbot/Dashboard/ConversationalFlow","sourcesContent":["<template>\n  <div>\n    <div class=\"spinner\" id=\"spinner\" v-show=\"spinnerOn\"></div>\n    <div\n      class=\"\n        card-header\n        px-0\n        d-block d-sm-flex\n        flex-wrap\n        justify-content-between\n      \"\n    >\n      <div class=\"card-act d-flex flex-wrap\" style=\"width: 100%\">\n        <button\n          id=\"add_node_btn\"\n          class=\"darkblue-btn\"\n          data-toggle=\"modal\"\n          @click=\"change_root\"\n          data-target=\"#addnodemodal\"\n        >\n          Add Node\n        </button>\n        <!-- <button id=\"add_child_node_btn\" class=\"darkblue-btn\" @click=\"testFunction\">Add Child Node</button> -->\n        <!-- <button id=\"add_folder_btn\" class=\"darkblue-btn\">Add Folder</button> -->\n        <button\n          id=\"try_bot_btn\"\n          class=\"ml-auto darkblue-btn\"\n          data-toggle=\"modal\"\n          @click=\"visible_try_bot()\"\n        >\n          Try Bot\n        </button>\n      </div>\n    </div>\n    <div class=\"d-flex px-0\">\n      <div class=\"card-body px-0\">\n        <vue-tree-list\n          @click=\"onClick\"\n          @delete-node=\"onDel\"\n          @add-node=\"onAddNode\"\n          @drop-before=\"dropBefore\"\n          @drop-after=\"dropAfter\"\n          @drop=\"drop\"\n          :model=\"data\"\n          default-tree-node-name=\"\"\n          default-leaf-node-name=\"\"\n          v-bind:default-expanded=\"true\"\n        >\n          <template v-slot:leafNameDisplay=\"slotProps\">\n            <span>\n              {{ slotProps.model.name }}\n            </span>\n            <br />\n            <span class=\"muted\"\n              >{{ slotProps.model.responses.length }} Responses</span\n            >\n          </template>        \n          <!-- <template v-slot:treeNodeIcon=\"slotProps\">\n          <span class=\"icon\">\n            {{ (slotProps.model.children && slotProps.model.children.length > 0 && !slotProps.expanded) ?\n            '' : '' }}</span>\n        </template> -->\n          <!-- <span class=\"icon\" title=\"Add Node\" slot=\"addTreeNodeIcon\">📂</span> -->\n          <!-- <span class=\"icon\" slot=\"addLeafNodeIcon\">＋</span> -->\n          <!-- <span class=\"icon\" slot=\"editNodeIcon\">📃</span> -->\n          <!-- <span class=\"icon\" slot=\"delNodeIcon\">✂️</span> -->\n          <span class=\"icon\" slot=\"leafNodeIcon\"></span>\n          <span class=\"icon\" slot=\"treeNodeIcon\"></span>\n        </vue-tree-list>\n        <br />\n        <!-- <Following part is for testing, do not remove> -->\n        <!-- <button @click=\"testNewTree\">Get new tree</button>\n        <pre>\n        {{ newTree }}\n      </pre\n        >  -->\n      </div>\n      <div\n        class=\"px-0\"\n        id=\"try_bot_response\"\n        style=\"margin-right: -19px !important; margin-top: -28px !important\"\n      >\n        <template v-if=\"load_bot_preview\" style=\"overflow: hidden\">\n          <response-bot\n            style=\"padding: 0px\"\n            :isDialogBot=\"true\"\n          ></response-bot>\n        </template>\n      </div>\n    </div>\n    <div\n      class=\"modal fade\"\n      id=\"addnodemodal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n      data-backdrop=\"static\"\n      data-keyboard=\"false\"\n    >\n      <div class=\"modal-dialog modal-xl\" role=\"document\">\n        <div class=\"modal-content p-2\">\n          <div class=\"modal-body\">\n            <button\n              v-if=\"new_child_node\"\n              @click=\"onDel(child_node)\"\n              type=\"button\"\n              class=\"close\"\n              aria-label=\"Close\"\n            >\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n            <button\n              v-else\n              type=\"button\"\n              @click=\"close_addnodemodal\"\n              class=\"close\"\n              aria-label=\"Close\"\n            >\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n            <div class=\"form-group\" style=\"width: 150px\">\n              <h5>Node Name</h5>\n              <input\n                type=\"text\"\n                v-model.trim=\"node_name\"\n                class=\"form-control input-tag\"\n                placeholder=\"Enter node name\"\n                style=\"padding: 0.375rem 0.5rem !important\"\n              />\n            </div>\n            <div class=\"form-group\">\n              <h5>If Assistant Recognizes</h5>\n              <div class=\"row d-flex\">\n                <div\n                  class=\"d-flex ml-2 pb-2\"\n                  v-for=\"(trigger, index) in triggers\"\n                  :key=\"index\"\n                >\n                  <!-- class=\"form-control input-tag\" -->\n                  <div v-if=\"!is_root\" class=\"ml-2 my-auto\">\n                    <!-- <multiselect\n                      id=\"trigger_filter_by_id\"\n                      :close-on-select=\"true\"\n                      :options=\"triggers_filter_by_options\"\n                      placeholder=\"Filter by\"\n                      v-model=\"trigger.trigger_type\"\n                      :allow-empty=\"false\"\n                      :show-labels=\"false\"\n                      @input=\"change_trigger_value(trigger.trigger_type, index)\"\n                    >\n                    </multiselect> -->\n                    <div>\n                      <select \n                        class=\"custom-select\" \n                        aria-label=\"Filter by\"\n                        id=\"trigger_filter_by_id\"\n                        style=\"width: 120px; height: 40px; padding-left: 14px; padding-bottom:4px;\"\n                        placeholder=\"Filter by\"\n                        v-model=\"trigger.trigger_type\"\n                        @input=\"change_trigger_value(trigger.trigger_type, index)\"\n                      >\n                        <option value=\"\" disabled selected>Filter by</option>\n                        <option value=\"intent\">Objective</option>\n                        <option value=\"entity\">Entity</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div\n                    class=\"ml-2 my-auto\"\n                    v-if=\"\n                      (!is_root && Boolean(trigger.trigger_type)) || is_root\n                    \"\n                  >\n                    <multiselect\n                      v-model=\"trigger.trigger_value\"\n                      :options=\"\n                        is_root === true\n                          ? trigger_options_intent\n                          : trigger.trigger_type === 'intent'\n                          ? trigger_options_intent\n                          : trigger_options_entity\n                      \"\n                      :placeholder=\"\n                        is_root === true\n                          ? 'Search Objective'\n                          : trigger.trigger_type === 'intent'\n                          ? 'Search Objective'\n                          : 'Search Entity'\n                      \"\n                      :close-on-select=\"true\"\n                      :clear-on-select=\"false\"\n                      :preserve-search=\"true\"\n                      :show-labels=\"false\"\n                      :allow-empty=\"false\"\n                      open-direction=\"bottom\"\n                      :searchable=\"true\"\n                      :loading=\"is_loading\"\n                      @input=\"\n                        change_trigger_type(\n                          trigger.trigger_type,\n                          trigger.trigger_value,\n                          index\n                        )\n                      \"\n                      @search-change=\"search_intent_entity(trigger.trigger_type, $event)\"\n                      style=\"height: 30px; padding: 0px\"\n                      id=\"res_n_int_source\"\n                    >\n                      <!-- <option\n                          v-for=\"(option, index) in trigger_options\"\n                          :key=\"index\"\n                          :value=\"option\"\n                        >\n                          {{ option }}\n                        </option> -->\n                      <span slot=\"noOptions\"></span>\n                      <span slot=\"noResult\">No Condition found.</span>\n                    </multiselect>\n                  </div>\n                  <div\n                    class=\"ml-2 my-auto\"\n                    v-if=\"\n                      !is_root &&\n                      Boolean(trigger.trigger_type === 'entity') &&\n                      Boolean(trigger.trigger_value)\n                    \"\n                    :style=\"\n                      is_entity_type_sys_pattern(trigger.trigger_value) === true\n                        ? 'cursor: not-allowed'\n                        : null\n                    \"\n                    :title=\"\n                      is_entity_type_sys_pattern(trigger.trigger_value) === true\n                        ? 'Entity selected is of type pattern or system entity, hence further option(s) cannot be selected.'\n                        : null\n                    \"\n                  >\n                    <multiselect\n                      id=\"trigger_operand_id\"\n                      :close-on-select=\"true\"\n                      :options=\"entity_operand_options\"\n                      placeholder=\"Operator\"\n                      v-model=\"trigger.operand\"\n                      :allow-empty=\"false\"\n                      :show-labels=\"false\"\n                      @input=\"\n                        change_trigger_entity_value(trigger.operand, index)\n                      \"\n                      :disabled=\"\n                        is_entity_type_sys_pattern(trigger.trigger_value) ===\n                        true\n                      \"\n                    >\n                    </multiselect>\n                  </div>\n                  <div\n                    class=\"ml-2 my-auto\"\n                    v-if=\"\n                      !is_root &&\n                      Boolean(trigger.trigger_type === 'entity') &&\n                      Boolean(trigger.trigger_value) &&\n                      Boolean(trigger.operand === 'is')\n                    \"\n                  >\n                    <!-- <p style=\"margin:0px !important\" \n                        v-if=\"is_entity_type_sys_pattern(trigger.trigger_value)\">\n                        (Entity selected is of type pattern or system entity,<br> hence further option(s) cannot be selected.)\n                      </p> -->\n                    <multiselect\n                      id=\"trigger_entity_value_id\"\n                      :close-on-select=\"true\"\n                      :options=\"entity_value_options(trigger.trigger_value)\"\n                      placeholder=\"select entity value\"\n                      v-model=\"trigger.entity_value\"\n                      :allow-empty=\"false\"\n                      :show-labels=\"false\"\n                      @input=\"\n                        set_trigger_entity_value(trigger.entity_value, index)\n                      \"\n                    >\n                    </multiselect>\n                  </div>\n                  <span\n                    v-if=\"triggers.length > 1\"\n                    style=\"cursor: pointer\"\n                    class=\"my-auto ml-2 mr-0 close\"\n                    @click=\"add_to_triggers_list('remove', index)\"\n                  >\n                    &times;\n                  </span>\n                  <span\n                    v-if=\"triggers.length > 1\"\n                    class=\"my-auto\"\n                    style=\"margin-left: 10px; font-size: 17px\"\n                    >&&\n                  </span>\n                </div>\n                <button\n                  v-if=\"!is_root\"\n                  id=\"add_trigger_btn\"\n                  class=\"ml-2 my-auto\"\n                  style=\"\n                    cursor: pointer;\n                    border: none;\n                    height: 30px;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                    margin-top: 5px !important;\n                  \"\n                  @click=\"add_to_triggers_list('add')\"\n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n            <!-- <hr /> -->\n            <div class=\"form-group d-flex mb-0\">\n              <h5 style=\"width: 20%; padding: 0px; margin-top: 4px\">Slots</h5>\n              <label\n                class=\"switch ml-auto\"\n                style=\"margin-top: 4px; margin-bottom: 0px\"\n              >\n                <input type=\"checkbox\" v-model=\"is_slot\" id=\"slots_required\" />\n                <span class=\"slider round\" style=\"border-radius: 50px\"></span>\n              </label>\n            </div>\n            <p>\n              (Enable this to gather the information your bot needs to respond\n              to a user.)\n            </p>\n            <div v-if=\"is_slot\">\n              <!-- <hr style=\"margin: 10px 0px\" /> -->\n              <div class=\"d-flex\">\n                <div class=\"d-flex\">\n                    <p\n                    class=\"sub_heading\"\n                    style=\"margin-top: 6px; margin-bottom: 5px\"\n                  >\n                    Add Slot\n                  </p>\n                  <button\n                    style=\"\n                      cursor: pointer;\n                      border: none;\n                      background: transparent url('@portal/assets/img/plus.png')\n                        0% 0% no-repeat padding-box;\n                    \"\n                    @click=\"add_to_slots_list('add')\"\n                  >\n                    <img src=\"/img/black_plus.png\" alt=\"\" />\n                  </button>\n                </div>\n                <div \n                  v-show=\"slots.length > 0\"\n                  class=\"ml-auto card-act\"\n                >\n                  <!-- <a \n                    href=\"#manage_handler_id\" \n                    class=\"sub_heading\" \n                    data-toggle=\"modal\"\n                  >\n                    Manage Handlers\n                  </a> -->\n                  <button \n                    type=\"button\"\n                    data-toggle=\"modal\"\n                    data-target=\"#manage_handler_id\"\n                    class=\"darkblue-btn\"\n                  >\n                    Manage Handlers\n                  </button>\n                </div>\n              </div>\n             <div\n                v-show=\"slots.length > 0\"\n                class=\"custom-button-box px-3 pb-0 pt-2 mt-3 mb-3\"\n              >\n                <!-- <hr style=\"margin: 10px 0px\" /> -->\n                <div class=\"d-flex mb-1\" style=\"text-align: center\">\n                  <div class=\"col-sm-4\">Check for entity</div>\n                  <div class=\"col-sm-4\">Save it as</div>\n                  <div class=\"col-sm-3\">\n                    If not present, ask <br />\n                    (Optional)\n                  </div>\n                </div>\n                <hr style=\"margin: 10px 0px\" />\n                <draggable\n                  v-model=\"slots\"\n                  group=\"people\"\n                  @start=\"drag_slots = true\"\n                  @end=\"drag_slots = false\"\n                  v-bind=\"dragOptionsSlots\"\n                  handle=\".handle\"\n                >\n                  <transition-group\n                    type=\"transition\"\n                    :name=\"!drag_slots ? 'flip-list' : null\"\n                  >\n                    <div\n                      class=\"col-sm-12 p-0 d-flex form-group\"\n                      v-for=\"(slot, index) in slots\"\n                      :key=\"slot.id\"\n                    >\n                      <div class=\"col-sm-4 p-0\">\n                        <div>\n                          <!-- <select\n                          class=\"form-control input-tag\"\n                          v-model=\"slot.check_for\"\n                          style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                          placeholder=\"Select response\"\n                          @click=\"set_slot_entity_variable(index, slot.check_for)\"\n                          id=\"res_n_int_source\"\n                        > -->\n                          <multiselect\n                            v-model=\"slot.check_for\"\n                            :options=\"entity_list\"\n                            :close-on-select=\"true\"\n                            :clear-on-select=\"false\"\n                            :preserve-search=\"true\"\n                            :show-labels=\"false\"\n                            :allow-empty=\"false\"\n                            placeholder=\"Search Entity\"\n                            open-direction=\"bottom\"\n                            :searchable=\"true\"\n                            :loading=\"is_loading\"\n                            @search-change=\"search_entity\"\n                            @input=\"set_slot_entity_variable(index, slot.check_for)\"\n                            style=\"height: 30px; padding: 0px\"\n                            id=\"res_n_int_source\"\n                          >\n                            <!-- <option\n                            v-for=\"(option, index) in temp_entities\"\n                            :key=\"index\"\n                            :value=\"option\"\n                          >\n                            {{ option }}\n                          </option> -->\n                            <span slot=\"noOptions\"></span>\n                            <span slot=\"noResult\">No Entites found.</span>\n                          </multiselect>\n                        </div>\n                        <!-- <div v-else>Add some Entities first</div> -->\n                      </div>\n                      <div class=\"col-sm-4\">\n                        <input\n                          class=\"form-control input-tag\"\n                          style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                          placeholder=\"Enter variable\"\n                          type=\"text\"\n                          disabled\n                          v-model=\"slot.slot\"\n                        />\n                      </div>\n                      <div class=\"col-sm-3 p-0\" style=\"text-align: center\">\n                        <input\n                          id=\"checkfocus\"\n                          class=\"form-control input-tag\"\n                          style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                          placeholder=\"Response ID's\"\n                          type=\"text\"\n                          @focusout=\"\n                            add_slot_to_assistant_response(\n                              'text',\n                              index,\n                              slot.check_for,\n                              slot.slot,\n                              slot.responses\n                            )\n                          \"\n                          @focusin=\"\n                            remove_slot_to_assistant_response(index, slot.slot)\n                          \"\n                          v-model=\"slot.responses\"\n                          :disabled=\"true\"\n                        />\n                        <!-- :disabled=\"slot.responses.length > 1\" -->\n                      </div>\n                      <div class=\"col-sm-1 pr-0\">\n                        <div class=\"col-sm-12 d-flex p-0\">\n                          <div class=\"col-sm-4 px-auto\" style=\"padding-top: 8px\">\n                            <span\n                              style=\"float: right; cursor: pointer; font-size: 14px\"\n                              class=\"muted\"\n                            >\n                              <a\n                                data-toggle=\"modal\"\n                                href=\"#slotmodal\"\n                                @click=\"\n                                  on_open_slots_modal(slot.slot, index, slot.check_for)\n                                \"\n                              >\n                                <i title=\"Customize Slot\" class=\"fas fa-cog\"></i>\n                              </a>\n                            </span>\n                          </div>\n                          <div class=\"col-sm-4 px-auto\" style=\"padding-top: 10px\">\n                            <i\n                              class=\"fas fa-arrows-alt handle\"\n                              style=\"cursor: pointer; float:right !important;\"\n                              title=\"Drag to Change Order\"\n                              v-if=\"slots.length != 1\"\n                            ></i>\n                          </div>\n                          <div class=\"col-sm-4 px-auto\" style=\"padding-top: 6px\">\n                            <span\n                              style=\"float: right; cursor: pointer\"\n                              @click=\"add_to_slots_list('remove', index, slot.responses)\"\n                              class=\"close\"\n                              title=\"Delete Slot\"\n                            >\n                              &times;\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </transition-group>\n                </draggable>\n                <!-- <hr /> -->\n              </div>\n            </div>\n            <div class=\"form-group d-flex mb-0\">\n              <h5 style=\"width: 20%; padding: 0px; margin-top: 4px\">Webhook</h5>\n              <label\n                class=\"switch ml-auto\"\n                style=\"margin-top: 4px; margin-bottom: 0px\"\n              >\n                <input\n                  type=\"checkbox\"\n                  v-model=\"is_webhook\"\n                  id=\"webhook_required\"\n                />\n                <span class=\"slider round\" style=\"border-radius: 50px\"></span>\n              </label>\n            </div>\n            <p>\n              (Enable this to use an external source to populate a response. You\n              can only call one external source per node.)\n            </p>\n            <div style=\"color: red\" v-if=\"is_webhook && !is_webhook_details\">\n              Please set your webhook details first\n            </div>\n            <!-- <hr style=\"margin: 10px 0px\" /> -->\n            <div v-if=\"is_webhook && is_webhook_details\">\n              <div class=\"d-flex\">\n                <p\n                  class=\"sub_heading\"\n                  style=\"margin-top: 3px; margin-bottom: 5px\"\n                >\n                  Add Parameters\n                </p>\n                <button\n                  style=\"\n                    cursor: pointer;\n                    border: none;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                    height: 29px;\n                    margin-left: 10px;\n                  \"\n                  @click=\"add_to_webhook_mapping('add')\"\n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n                <p\n                  class=\"ml-2 sub_heading\"\n                  style=\"margin-top: 4px; margin-bottom: 0px; margin-left: 10px\"\n                  v-show=\"webhook_mapping.length > 0\"\n                >\n                  Select Webhook :\n                </p>\n                <div class=\"col-sm-3 ml-2 p-0\" v-show=\"webhook_mapping.length > 0\">\n                  <multiselect\n                    v-model=\"webhook_id\"\n                    :options=\"webhook_list.map((webhook) => webhook.id)\"\n                    :custom-label=\"\n                      (webhook) =>\n                        webhook_list.find((x) => x.id == webhook).name\n                    \"\n                    :close-on-select=\"true\"\n                    :clear-on-select=\"false\"\n                    :preserve-search=\"true\"\n                    :show-labels=\"false\"\n                    :allow-empty=\"false\"\n                    placeholder=\"Search Webhook\"\n                    open-direction=\"bottom\"\n                    :searchable=\"true\"\n                    :loading=\"is_loading\"\n                    @search-change=\"search_webhook\"\n                    @input=\"set_webhook_return_variable(webhook_id)\"\n                    style=\"\n                      height: 30px;\n                      padding: 0px; \n                    \"\n                    id=\"res_n_int_source\"\n                  >\n                    <!-- @input=\"set_slot_entity_variable(index, slot.check_for)\" -->\n                    <!-- <option\n                  v-for=\"(option, index) in temp_entities\"\n                  :key=\"index\"\n                  :value=\"option\"\n                >\n                  {{ option }}\n                </option> -->\n                    <span slot=\"noOptions\"></span>\n                    <span slot=\"noResult\">No Webhooks found.</span>\n                  </multiselect>\n                </div>\n                <p\n                  class=\"ml-2 sub_heading\"\n                  style=\"margin-top: 6px; margin-bottom: 0px; margin-left: 10px\"\n                  v-show=\"webhook_mapping.length > 0\"\n                >\n                  Webhook Return Variable :\n                </p>\n                <div class=\"col-sm-3\" style=\"text-align: center\" v-show=\"webhook_mapping.length > 0\">\n                    <input\n                      id=\"webhook_variable_id\"\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Enter variable e.g. $webhook_result\"\n                      type=\"text\"\n                      v-model=\"webhook_variable\"\n                      :style=\"(webhook_variable.length > 0) ? 'padding-left:19px !important;': 'padding: 0.375rem 0.5rem !important'\"\n                    />\n                    <span v-if=\"webhook_variable.length >0\" class=\"unit\">$</span>\n                </div>\n                <span style=\"margin-left: 0px; color: #0645AD;\"\n                  class=\"my-auto\"\n                  v-show=\"webhook_mapping.length > 0\"\n                >\n                  <i\n                    class=\"fa fa-info-circle\"\n                    aria-hidden=\"true\"\n                    style=\"font-size: 16px\"\n                    title=\"To avoid overide always use unique webhook return variable\"\n                  >\n                  </i>\n                </span>\n              </div>\n              <div\n                v-show=\"webhook_mapping.length > 0\"\n                class=\"custom-button-box px-3 pb-0 pt-2 mt-3 mb-3\"\n              >\n                <!-- <hr style=\"margin: 10px 0px\" /> -->\n                <div\n                  v-if=\"is_webhook\"\n                  class=\"d-flex mb-1\"\n                  style=\"text-align: center\"\n                >\n                  <div class=\"col-sm-5\">Key</div>\n                  <div class=\"col-sm-5\">Value</div>\n                </div>\n                <hr style=\"margin: 10px 0px\" />\n                <div v-if=\"is_webhook\">\n                  <div\n                    class=\"col-sm-12 p-0 d-flex form-group\"\n                    v-for=\"(params, index) in webhook_mapping\"\n                    :key=\"index\"\n                  >\n                    <div class=\"col-sm-5 p-0\">\n                      <input\n                        class=\"form-control input-tag\"\n                        style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                        placeholder=\"Enter name\"\n                        type=\"text\"\n                        v-model=\"params.key\"\n                      />\n                    </div>\n                    <div class=\"col-sm-5\">\n                      <input\n                        class=\"form-control input-tag\"\n                        style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                        placeholder=\"Enter value ex. $date or $sys-date\"\n                        type=\"text\"\n                        v-model=\"params.value\"\n                      />\n                    </div>\n                    <div class=\"col-sm-2 pr-0\" style=\"padding-top: 10px\">\n                      <span\n                        style=\"float: right; cursor: pointer\"\n                        @click=\"add_to_webhook_mapping('remove', index)\"\n                        class=\"close\"\n                        title=\"Delete Parameter\"\n                      >\n                        &times;\n                      </span>\n                    </div>\n                  </div>\n                  <!-- <div>\n                  <div class=\"d-flex\">\n                  <h5>Return Variable : </h5>\n                  <h5 class=\"pl-1\">{{webhook_variable}}</h5>\n                  <div class=\"ml-auto\" style=\"padding-right: 15px;\">\n                  <span\n                    style=\"float: right; cursor: pointer; font-size: 14px\"\n                    class=\"muted\"\n                  >\n                    <a\n                      data-toggle=\"modal\"\n                      href=\"#webhookmodal\"\n                      @click=\"\n                        on_open_webhook_modal(webhook_variable)\n                      \"\n                    >\n                      <i title=\"Customize Webhook Response\" class=\"fas fa-cog\"></i>\n                    </a>\n                  </span>\n                </div>\n                  </div>\n                </div> -->\n                  <!-- <hr style=\"margin: 10px 0px\" /> -->\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group d-flex mb-0\">\n              <h5 style=\"width: 20%; padding: 0px; margin-top: 4px\">Notifications</h5>\n              <label\n                class=\"switch ml-auto\"\n                style=\"margin-top: 4px; margin-bottom: 0px\"\n              >\n                <input type=\"checkbox\" v-model=\"is_notification\" id=\"notifications_required\" />\n                <span class=\"slider round\" style=\"border-radius: 50px\"></span>\n              </label>\n            </div>\n            <p>\n              (Enable this to send notification to users.)\n            </p>\n            <div v-if=\"is_notification\">\n              <!-- <hr style=\"margin: 10px 0px\" /> -->\n             <div\n                class=\"custom-button-box px-3 pb-0 pt-2 mt-3 mb-3\"\n              >\n                <!-- <hr style=\"margin: 10px 0px\" /> -->\n                <div class=\"d-flex mb-1\" style=\"text-align: center\">\n                  <div class=\"col-sm-3\">Notification type</div>\n                  <div class=\"col-sm-3\">\n                    Variable Name\n                    <span style=\"margin-left: 12px; color: #0645AD;\"\n                      class=\"my-auto\"\n                    >\n                      <i\n                        class=\"fa fa-info-circle\"\n                        aria-hidden=\"true\"\n                        style=\"font-size: 16px\"\n                        title=\"the value here should be the value of 'Save it as' of any slots used to capture email/sms. Example $email_id.\"\n                      >\n                      </i>\n                    </span>\n                    </div>\n                  <div class=\"col-sm-3\">Check for template</div>\n                  <div class=\"col-sm-2\">\n                    Response ID's (Optional)\n                  </div>\n                </div>\n                <hr style=\"margin: 10px 0px\" />\n                <div class=\"col-sm-12 p-0 d-flex form-group\">\n                  <div class=\"col-sm-3 p-0\">\n                    <div>\n                      <multiselect\n                        v-model=\"notifications.notify[0].type\"\n                        :options=\"notifications_notify_type_list\"\n                        :close-on-select=\"true\"\n                        :clear-on-select=\"false\"\n                        :preserve-search=\"true\"\n                        :show-labels=\"false\"\n                        :allow-empty=\"false\"\n                        placeholder=\"Select notification type\"\n                        open-direction=\"bottom\"\n                        :searchable=\"true\"\n                        style=\"height: 30px; padding: 0px\"\n                        id=\"notifications_notify_type_id\"\n                      >\n                      </multiselect>\n                    </div>\n                  </div>\n                  <div class=\"col-sm-3\">\n                    <div>\n                      <multiselect\n                        :close-on-select=\"true\"\n                        v-model=\"notifications.notify[0].slot\"\n                        :options=\"insert_slot_variable_options\"\n                        placeholder=\"Select Variable\"\n                        :show-labels=\"false\"\n                        :clear-on-select=\"false\"\n                        open-direction=\"top\"\n                        :max-height=\"120\"\n                        :searchable=\"true\"\n                        :allow-empty=\"false\"\n                        :preserve-search=\"true\"\n                        @open=\"add_to_insert_slot_variable_options\"\n                      >\n                        <span slot=\"noResult\">No Variable found.</span>\n                      </multiselect>\n                    </div>\n                    <!-- <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Enter variable e.g.$email_id\"\n                      type=\"text\"\n                      v-model=\"notifications.notify[0].slot\"\n                    /> -->\n                  </div>\n                  <div class=\"col-sm-3 p-0\">\n                    <div>\n                      <multiselect\n                        v-model=\"notifications.notify[0].template_name\"\n                        :options=\"notifications_notify_template_list.map((name)=> {return name.template_name})\"\n                        :close-on-select=\"true\"\n                        :clear-on-select=\"false\"\n                        :preserve-search=\"true\"\n                        :show-labels=\"false\"\n                        :allow-empty=\"false\"\n                        placeholder=\"Search template name\"\n                        open-direction=\"bottom\"\n                        :searchable=\"true\"\n                        :loading=\"is_loading\"\n                        @search-change=\"search_template_name\"\n                        @input=\"set_notifications_notify_template_id(notifications.notify[0].template_name)\"\n                        style=\"height: 30px; padding: 0px\"\n                        id=\"notifications_notify_template_id\"\n                      >\n                        <!-- <span slot=\"noOptions\"></span> -->\n                        <span slot=\"noResult\">No Template found.</span>\n                      </multiselect>\n                    </div>\n                  </div>\n                  <div class=\"col-sm-2\" style=\"text-align: center\">\n                    <input\n                      id=\"notifications_responses_id\"\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Response ID's\"\n                      type=\"text\"\n                      v-model=\"notifications.responses\"\n                      :disabled=\"true\"\n                    />\n                  </div>\n                  <div class=\"col-sm-1 pr-0\">\n                    <div class=\"col-sm-12 d-flex p-0\">\n                      <div class=\"col-sm-12 p-0 px-auto\" style=\"padding-top: 8px !important;\">\n                        <span\n                          style=\"float: right; cursor: pointer; font-size: 14px\"\n                          class=\"muted\"\n                        >\n                          <a\n                            data-toggle=\"modal\"\n                            href=\"#notificationmodal\"\n                            @click=\"\n                              on_open_notification_modal()\n                            \"\n                          >\n                            <i title=\"Customize Notification\" class=\"fas fa-cog\"></i>\n                          </a>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <!-- <hr /> -->\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <h5 style=\"margin-top: 6px; margin-bottom: 5px\">\n                Assistant Response\n              </h5>\n              <div\n                v-for=\"(new_response, index) in assistant_response\"\n                :key=\"index\"\n                class=\"form-group\"\n              >\n                <div v-if=\"new_response.condition != 'unfilled_slot' && (new_response.condition != '!successful' && new_response.condition != '!unsuccessful' )\">\n                  <span\n                    style=\"float: right; cursor: pointer; font-size: 14px\"\n                    @click=\"add_to_assistant_response_list('remove', index)\"\n                    class=\"close\"\n                    title=\"Remove Response\"\n                  >\n                    Remove\n                    <!-- <i style=\"font-size: 16px\" class=\"fa\">&#xf00d;</i> -->\n                  </span>\n                  <div v-if=\"new_response.type == 'text'\">\n                    <p class=\"sub_heading\">\n                      Text Response : {{ new_response.id }}\n                    </p>\n                    <div class=\"custom-button-box px-3 pb-2 pt-3 mt-3 mb-3\">\n                      <div\n                        v-for=\"(response, num) in new_response.values\"\n                        :key=\"num\"\n                        class=\"form-group\"\n                      >\n                        <div class=\"d-flex\">\n                          <input\n                            class=\"form-control input-tag\"\n                            placeholder=\"Enter response text\"\n                            style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                            type=\"text\"\n                            v-model=\"new_response.values[num]\"\n                            :id=\"'assistance_response_'+ new_response.id + '_' + num\"\n                            @focusout=\"insert_variable_block_off(new_response.id , num)\"\n                            @focusin=\"insert_variable_block_on(new_response.id, num)\"\n                          >\n                          <div style=\"opacity:0\" :id=\"'insert_variable_block' + new_response.id + '_' + num\">\n                            <a \n                              @click=\"set_assistance_response_index(new_response.id, num)\" \n                              class=\"example fa-stack fa-1x\"\n                              id=\"insert_variable_button\" \n                              type=\"button\"\n                              data-toggle=\"modal\"\n                              data-target=\"#insert_variable_modal\"\n                              style=\"margin-top:20px !important\"\n                            >\n                              <i \n                                class=\"fas fa-circle fa-stack-2x\"\n                                style=\"color:#dbe2e8\" \n                                :id=\"'insert_variable_circle_'+ new_response.id + '_' + num\"\n                                >\n                              </i>\n                              <span \n                                class=\"fa fa-stack-1x\"\n                                style=\"color:white;\"\n                                @mouseover=\"circle_mouseover(new_response.id, num)\" \n                                @mouseout=\"circle_mouseout(new_response.id, num)\"\n                              >\n                                <span style=\"font-size:14px; display:block;\">\n                                    {...}\n                                </span>\n                              </span>\n                            </a>\n                          </div>\n                          <!-- v-on:keyup.enter=\"\n                              add_to_assistant_response_text_list('add', index)\n                            \" -->\n                          <span style=\"margin-left: 12px; color: #0645AD;\"\n                            class=\"my-auto\"\n                            v-if=\"check_slot_value_use_in_response(new_response.values[num])\"\n                          >\n                            <i\n                              class=\"fa fa-info-circle\"\n                              aria-hidden=\"true\"\n                              style=\"font-size: 16px\"\n                              title=\"You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com).\"\n                            >\n                            </i>\n                          </span>\n                          <span\n                            v-if=\"new_response.values.length > 1\"\n                            title=\"Remove Text Response\"\n                            class=\"close my-auto\"\n                            style=\"cursor: pointer; margin-left: 12px\"\n                            @click=\"\n                              add_to_assistant_response_text_list(\n                                'remove',\n                                index,\n                                num\n                              )\n                            \"\n                          >\n                            &times;\n                          </span>\n                        </div>\n                      </div>\n                      <div class=\"d-flex\">\n                        <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                          Add value\n                        </p>\n                        <button\n                          style=\"\n                            cursor: pointer;\n                            border: none;\n                            background: transparent\n                              url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                              padding-box;\n                          \"\n                          @click=\"\n                            add_to_assistant_response_text_list('add', index)\n                          \"\n                        >\n                          <img src=\"/img/black_plus.png\" alt=\"\" />\n                        </button>\n                      </div>\n                      <div class=\"response-variations\">\n                        <span\n                          >Response variations are set to\n                          <strong>{{ new_response.variation }}</strong\n                          >.</span\n                        >\n                        Set to\n                        <a\n                          @click=\"select_response_variation(index, 'sequential')\"\n                          v-show=\"new_response.variation != 'sequential'\"\n                          href=\"javascript:void(0);\"\n                          class=\"response-variation\"\n                        >\n                          sequential\n                        </a>\n                        <span v-show=\"new_response.variation != 'sequential'\"\n                          >|</span\n                        >\n                        <a\n                          @click=\"select_response_variation(index, 'multiline')\"\n                          v-show=\"new_response.variation != 'multiline'\"\n                          href=\"javascript:void(0);\"\n                          class=\"variation-multiline\"\n                        >\n                          multiline\n                        </a>\n                        <span\n                          v-show=\"\n                            new_response.variation != 'random' &&\n                            new_response.variation != 'multiline'\n                          \"\n                          >|</span\n                        >\n                        <a\n                          @click=\"select_response_variation(index, 'random')\"\n                          v-show=\"new_response.variation != 'random'\"\n                          href=\"javascript:void(0);\"\n                          class=\"variation-random\"\n                        >\n                          random\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                  <div v-if=\"new_response.type == 'image'\">\n                    <p class=\"sub_heading\">\n                      Image Response : {{ new_response.id }}\n                    </p>\n                    <!-- <p>Enter Name (Optional)</p>\n                        <input class=\"form-control input-tag\" type=\"text\" v-model=\"new_response.image_name\"> -->\n                    <!-- <p class=\"mb-0\">Image source :</p> -->\n                    <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                      <input\n                        class=\"form-control input-tag\"\n                        style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                        placeholder=\"Add Image url\"\n                        type=\"text\"\n                        v-model=\"new_response.source\"\n                      />\n                      <p\n                        v-show=\"check_image_url(new_response.source) == false && Boolean(new_response.source)\"\n                        style=\"\n                          color: red !important;\n                          margin-bottom: 0px !important;\n                          padding-top: 8px !important;\n                        \"\n                      >\n                        Please enter a valid image URL in png or jpg format only.\n                      </p>\n                    </div>\n                  </div>\n                  <div v-if=\"new_response.type == 'video'\">\n                    <p class=\"sub_heading\">\n                      Video Response : {{ new_response.id }}\n                    </p>\n                    <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                      <input\n                        class=\"form-control input-tag\"\n                        style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                        placeholder=\"Add Video url (It is recommended to use embed link.)\"\n                        type=\"text\"\n                        v-model.trim=\"new_response.source\"\n                      />\n                      <p\n                        v-show=\"check_video_url(new_response.source) === false && Boolean(new_response.source)\"\n                        style=\"\n                          color: red !important;\n                          margin-bottom: 0px !important;\n                          padding-top: 8px !important;\n                        \"\n                      >\n                        Please enter a valid video url.\n                      </p>\n                    </div>\n                  </div>\n                  <div v-if=\"new_response.type == 'choices'\">\n                    <p class=\"sub_heading\">\n                      Choice Response : {{ new_response.id }}\n                    </p>\n                    <!-- <div>\n                      <input\n                        class=\"form-control input-tag\"\n                        placeholder=\"Enter response text\"\n                        style=\"width: 100%\"\n                        type=\"text\"\n                        v-model=\"new_response.title\"\n                      />\n                    </div> -->\n                    <div class=\"custom-button-box px-3 py-2 mt-3 mb-3\">\n                      <template>\n                        <div style=\"display: block; margin-bottom: 1rem\">\n                          <div\n                            v-for=\"(response, num) in new_response.choices\"\n                            :key=\"num\"\n                            class=\"custom-button-box px-3 py-3 mt-3 mb-3\"\n                            style=\"\"\n                          >\n                            <label class=\"mt-0 choice-label\" style=\"\"\n                              >Title:</label\n                            >\n                            <span\n                              style=\"cursor: pointer; float: right\"\n                              class=\"close ml-auto mr-0\"\n                              title=\"Remove Choice Response\"\n                              v-if=\"new_response.choices.length > 1\"\n                              @click=\"\n                                add_to_assistant_response_choice_list(\n                                  'remove',\n                                  new_response.id,\n                                  num\n                                )\n                              \"\n                            >\n                              &times;</span\n                            >\n                            <input\n                              type=\"text\"\n                              v-model.trim=\"response.title\"\n                              class=\"form-control input-tag\"\n                              placeholder=\"title of the button\"\n                              style=\"width: 100% !important;padding: 0.375rem 0.5rem\"\n                            />\n                            <div class=\"mt-2 mb-2\">\n                              <label class=\"choice-label\" style=\"\">Value:</label>\n                            </div>\n                            <input\n                              type=\"text\"\n                              v-model.trim=\"response.payload\"\n                              class=\"form-control input-tag\"\n                              placeholder=\"value to be passed when clicked on button\"\n                              style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                            />\n                          </div>\n                        </div>\n                      </template>\n                      <div class=\"d-flex\">\n                        <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                          Add choice\n                        </p>\n                        <button\n                          style=\"\n                            cursor: pointer;\n                            border: none;\n                            background: transparent\n                              url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                              padding-box;\n                          \"\n                          @click=\"\n                            add_to_assistant_response_choice_list(\n                              'add',\n                              new_response.id\n                            )\n                          \"\n                        >\n                          <img src=\"/img/black_plus.png\" alt=\"\" />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                  <hr style=\"margin: 10px 0px\" />\n                  <!-- <vue-editor\n                    WHILE SAVING DETAILS ADD VALIDATION ADDNODE()\n                      v-model=\"assistant_response[index]\" \n                      :editorToolbar=\"customToolbar\"\n                    ></vue-editor> -->\n                </div>\n              </div>\n              <div class=\"d-flex\">\n                <p class=\"sub_heading\">Select a response type first :</p>\n                <select\n                  class=\"form-control input-tag\"\n                  v-model=\"selected_response_type\"\n                  style=\"\n                    width: 100px;\n                    height: 25px;\n                    margin-left: 10px;\n                    padding: 0px;\n                  \"\n                  id=\"res_n_int_source\"\n                >\n                  <option\n                    v-for=\"(option, index) in assistant_response_type\"\n                    :key=\"index\"\n                    :value=\"option\"\n                  >\n                    {{ option }}\n                  </option>\n                </select>\n                <!-- </div> -->\n                <!-- <div class=\"d-flex\"> -->\n                <p class=\"sub_heading\" style=\"margin-left: 20px\">\n                  Add response\n                </p>\n                <button\n                  style=\"\n                    margin-top: -14px;\n                    cursor: pointer;\n                    border: none;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                  \"\n                  @click=\"add_to_assistant_response_list('add')\"\n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <h5>Then assistant should</h5>\n              <p>\n                (Choose whether you want your Assistant to continue, or wait for\n                the customer to respond.)\n              </p>\n              <div class=\"d-flex\">\n                <select\n                  class=\"form-control input-tag\"\n                  v-model=\"save_then_assistant_should\"\n                  @click=\"set_next_step()\"\n                  style=\"width: 120px; height: 30px; padding: 0px\"\n                  id=\"res_n_int_source\"\n                >\n                  <option value=\"\" disabled selected>Select a Option</option>\n                  <option\n                    v-for=\"(option, index) in then_assistant_should\"\n                    :key=\"index\"\n                    :value=\"option\"\n                  >\n                    {{ option }}\n                  </option>\n                </select>\n                <select\n                  class=\"form-control input-tag\"\n                  v-if=\"save_then_assistant_should == 'jump_to'\"\n                  v-model=\"jump_to_node_id\"\n                  @click=\"set_next_step()\"\n                  style=\"\n                    width: 120px;\n                    height: 30px;\n                    margin-left: 10px;\n                    padding: 0px;\n                  \"\n                  id=\"res_n_int_source\"\n                >\n                  <option value=\"\" disabled selected>Select a Node</option>\n                  <option\n                    v-for=\"(option, index) in updated_node_list\"\n                    :key=\"index\"\n                    :value=\"option.id\"\n                  >\n                    {{ option.name }}\n                  </option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-act modal-footer\">\n            <!-- These conditions for saving node defines that we are adding child node/editing a node OR adding a new root node -->\n            <button\n              v-if=\"is_show_edit\"\n              type=\"button\"\n              @click=\"editNode\"\n              class=\"darkblue-btn\"\n            >\n              Save Changes\n            </button>\n            <button v-else type=\"button\" @click=\"addNode\" class=\"darkblue-btn\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal fade\"\n      id=\"slotmodal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"slotmodal\"\n      aria-hidden=\"true\"\n      data-backdrop=\"static\"\n      data-keyboard=\"false\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 style=\"font-style: regular\" class=\"modal-title\">\n              Configure slot {{ edit_slot_index }}\n            </h5>\n            <button\n              type=\"button\"\n              @click=\"on_close_slots_modal()\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-hidden=\"true\"\n            >\n              ×\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"form-group\">\n              <h5 style=\"margin-top: 6px; margin-bottom: 5px\">\n                Assistant Response\n              </h5>\n              <div\n                v-for=\"(new_response, index) in unfilled_slot_assistant_response\"\n                :key=\"index\"\n                class=\"form-group\"\n              >\n                <span\n                  style=\"float: right; cursor: pointer; font-size: 14px\"\n                  @click=\"\n                    remove_slot_to_assistant_response(\n                      new_response.id,\n                      new_response.recognizes,\n                      'slotmodal'\n                    )\n                  \"\n                  class=\"close\"\n                  title=\"Remove Response\"\n                >\n                  Remove\n                  <!-- <i style=\"font-size: 16px\" class=\"fa\">&#xf00d;</i> -->\n                </span>\n                <div v-if=\"new_response.type == 'text'\">\n                  <p class=\"sub_heading\">\n                    Text Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 pb-2 pt-3 mt-3 mb-3\">\n                    <div\n                      v-for=\"(response, num) in new_response.values\"\n                      :key=\"num\"\n                      class=\"form-group\"\n                    >\n                      <div class=\"d-flex\">\n                        <input\n                          class=\"form-control input-tag\"\n                          placeholder=\"Enter response text\"\n                          style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                          type=\"text\"\n                          v-model=\"new_response.values[num]\"\n                          :id=\"'assistance_response_'+ new_response.id + '_' + num\"\n                          @focusout=\"insert_variable_block_off(new_response.id , num)\"\n                          @focusin=\"insert_variable_block_on(new_response.id, num)\"\n                          v-on:keyup.enter=\"\n                            add_to_assistant_response_text_list(\n                              'add',\n                              new_response.id\n                            )\n                          \"\n                        />\n                          <div style=\"opacity:0\" :id=\"'insert_variable_block' + new_response.id + '_' + num\">\n                            <a \n                              @click=\"set_assistance_response_index(new_response.id, num)\" \n                              class=\"example fa-stack fa-1x\"\n                              id=\"insert_variable_button\" \n                              type=\"button\"\n                              data-toggle=\"modal\"\n                              data-target=\"#insert_variable_modal\"\n                              style=\"margin-top:20px !important\"\n                            >\n                              <i \n                                class=\"fas fa-circle fa-stack-2x\"\n                                style=\"color:#dbe2e8\" \n                                :id=\"'insert_variable_circle_'+ new_response.id + '_' + num\"\n                                >\n                              </i>\n                              <span \n                                class=\"fa fa-stack-1x\"\n                                style=\"color:white;\"\n                                @mouseover=\"circle_mouseover(new_response.id, num)\" \n                                @mouseout=\"circle_mouseout(new_response.id, num)\"\n                              >\n                                <span style=\"font-size:14px; display:block;\">\n                                    {...}\n                                </span>\n                              </span>\n                            </a>\n                          </div>\n                        <span style=\"margin-left: 12px; color: #0645AD;\"\n                          class=\"my-auto\"\n                          v-if=\"check_slot_value_use_in_response(new_response.values[num])\"\n                        >\n                          <i\n                            class=\"fa fa-info-circle\"\n                            aria-hidden=\"true\"\n                            style=\"font-size: 16px\"\n                            title=\"You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com).\"\n                          >\n                          </i>\n                        </span>\n                        <span\n                          v-if=\"new_response.values.length > 1\"\n                          title=\"Remove Text Response\"\n                          class=\"close my-auto\"\n                          style=\"cursor: pointer; margin-left: 12px\"\n                          @click=\"\n                            add_to_assistant_response_text_list(\n                              'remove',\n                              new_response.id,\n                              num\n                            )\n                          \"\n                        >\n                          &times;\n                        </span>\n                      </div>\n                    </div>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add value\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_text_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                    <div class=\"response-variations\">\n                      <span\n                        >Response variations are set to\n                        <strong>{{ new_response.variation }}</strong\n                        >.</span\n                      >\n                      Set to\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'sequential'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'sequential'\"\n                        href=\"javascript:void(0);\"\n                        class=\"response-variation\"\n                      >\n                        sequential\n                      </a>\n                      <span v-show=\"new_response.variation != 'sequential'\">\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'multiline'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'multiline'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-multiline\"\n                      >\n                        multiline\n                      </a>\n                      <span\n                        v-show=\"\n                          new_response.variation != 'random' &&\n                          new_response.variation != 'multiline'\n                        \"\n                      >\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(new_response.id, 'random')\n                        \"\n                        v-show=\"new_response.variation != 'random'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-random\"\n                      >\n                        random\n                      </a>\n                    </div>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'image'\">\n                  <p class=\"sub_heading\">Image Response :</p>\n                  <!-- <p>Enter Name (Optional)</p>\n                      <input class=\"form-control input-tag\" type=\"text\" v-model=\"new_response.image_name\"> -->\n                  <!-- <p class=\"mb-0\">Image source :</p> -->\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Image url\"\n                      type=\"text\"\n                      v-model=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_image_url(new_response.source) == false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid image URL in png or jpg format only.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'video'\">\n                  <p class=\"sub_heading\">\n                    Video Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Video url (It is recommended to use embed link.)\"\n                      type=\"text\"\n                      v-model.trim=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_video_url(new_response.source) === false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid video url.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'choices'\">\n                  <p class=\"sub_heading\">\n                    Choice Response : {{ new_response.id }}\n                  </p>\n                  <!-- <div>\n                    <input\n                      class=\"form-control input-tag\"\n                      placeholder=\"Enter response text\"\n                      style=\"width: 100%\"\n                      type=\"text\"\n                      v-model=\"new_response.title\"\n                    />\n                  </div> -->\n                  <div class=\"custom-button-box px-3 py-2 mt-3 mb-3\">\n                    <template>\n                      <div style=\"display: block; margin-bottom: 1rem\">\n                        <div\n                          v-for=\"(response, num) in new_response.choices\"\n                          :key=\"num\"\n                          class=\"custom-button-box px-3 py-3 mt-3 mb-3\"\n                          style=\"\"\n                        >\n                          <label class=\"mt-0 choice-label\" style=\"\"\n                            >Title:</label\n                          >\n                          <span\n                            style=\"cursor: pointer; float: right\"\n                            class=\"close ml-auto mr-0\"\n                            title=\"Remove Choice Response\"\n                            v-if=\"new_response.choices.length > 1\"\n                            @click=\"\n                              add_to_assistant_response_choice_list(\n                                'remove',\n                                new_response.id,\n                                num\n                              )\n                            \"\n                          >\n                            &times;</span\n                          >\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.title\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"title of the button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                          <div class=\"mt-2 mb-2\">\n                            <label class=\"choice-label\" style=\"\">Value:</label>\n                          </div>\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.payload\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"value to be passed when clicked on button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                        </div>\n                      </div>\n                    </template>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add choice\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_choice_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <hr style=\"margin: 10px 0px\" />\n                <!-- <vue-editor\n                  WHILE SAVING DETAILS ADD VALIDATION ADDNODE()\n                    v-model=\"assistant_response[index]\"\n                    :editorToolbar=\"customToolbar\"\n                  ></vue-editor> -->\n              </div>\n              <div class=\"d-flex\">\n                <p class=\"sub_heading\">Select a response type first :</p>\n                <select\n                  class=\"form-control input-tag\"\n                  v-model=\"selected_response_type\"\n                  style=\"\n                    width: 100px;\n                    height: 25px;\n                    margin-left: 10px;\n                    padding: 0px;\n                  \"\n                  id=\"res_n_int_source\"\n                >\n                  <option\n                    v-for=\"(option, index) in assistant_response_type\"\n                    :key=\"index\"\n                    :value=\"option\"\n                  >\n                    {{ option }}\n                  </option>\n                </select>\n                <!-- </div> -->\n                <!-- <div class=\"d-flex\"> -->\n                <p class=\"sub_heading\" style=\"margin-left: 20px\">\n                  Add response\n                </p>\n                <button\n                  style=\"\n                    margin-top: -14px;\n                    cursor: pointer;\n                    border: none;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                  \"\n                  @click=\"\n                    add_slot_to_assistant_response(\n                      'Addbtn',\n                      'unused',\n                      edit_slot_check_for,\n                      edit_slot_slot_variable,\n                      null,\n                      'unfilled_slot'\n                    )\n                  \"\n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n            <div v-if=\"is_validation_entity\" class=\"form-group\">\n              <h5 style=\"margin-top: 6px; margin-bottom: 5px\">\n                Assistant Validation Response(Optional)\n              </h5>\n              <div\n                v-for=\"(new_response, index) in validation_slot_assistant_response\"\n                :key=\"index\"\n                class=\"form-group\"\n              >\n                <span\n                  style=\"float: right; cursor: pointer; font-size: 14px\"\n                  @click=\"\n                    remove_slot_to_assistant_response(\n                      new_response.id,\n                      new_response.recognizes,\n                      'slotmodal'\n                    )\n                  \"\n                  class=\"close\"\n                  title=\"Remove Response\"\n                >\n                  Remove\n                  <!-- <i style=\"font-size: 16px\" class=\"fa\">&#xf00d;</i> -->\n                </span>\n                <div v-if=\"new_response.type == 'text'\">\n                  <p class=\"sub_heading\">\n                    Text Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 pb-2 pt-3 mt-3 mb-3\">\n                    <div\n                      v-for=\"(response, num) in new_response.values\"\n                      :key=\"num\"\n                      class=\"form-group\"\n                    >\n                      <div class=\"d-flex\">\n                        <input\n                          class=\"form-control input-tag\"\n                          placeholder=\"Enter response text\"\n                          style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                          type=\"text\"\n                          v-model=\"new_response.values[num]\"\n                          :id=\"'assistance_response_'+ new_response.id + '_' + num\"\n                          @focusout=\"insert_variable_block_off(new_response.id , num)\"\n                          @focusin=\"insert_variable_block_on(new_response.id, num)\"\n                          v-on:keyup.enter=\"\n                            add_to_assistant_response_text_list(\n                              'add',\n                              new_response.id\n                            )\n                          \"\n                        />\n                          <div style=\"opacity:0\" :id=\"'insert_variable_block' + new_response.id + '_' + num\">\n                            <a \n                              @click=\"set_assistance_response_index(new_response.id, num)\" \n                              class=\"example fa-stack fa-1x\"\n                              id=\"insert_variable_button\" \n                              type=\"button\"\n                              data-toggle=\"modal\"\n                              data-target=\"#insert_variable_modal\"\n                              style=\"margin-top:20px !important\"\n                            >\n                              <i \n                                class=\"fas fa-circle fa-stack-2x\"\n                                style=\"color:#dbe2e8\" \n                                :id=\"'insert_variable_circle_'+ new_response.id + '_' + num\"\n                                >\n                              </i>\n                              <span \n                                class=\"fa fa-stack-1x\"\n                                style=\"color:white;\"\n                                @mouseover=\"circle_mouseover(new_response.id, num)\" \n                                @mouseout=\"circle_mouseout(new_response.id, num)\"\n                              >\n                                <span style=\"font-size:14px; display:block;\">\n                                    {...}\n                                </span>\n                              </span>\n                            </a>\n                          </div>\n                        <span style=\"margin-left: 12px; color: #0645AD;\"\n                          class=\"my-auto\"\n                          v-if=\"check_slot_value_use_in_response(new_response.values[num])\"\n                        >\n                          <i\n                            class=\"fa fa-info-circle\"\n                            aria-hidden=\"true\"\n                            style=\"font-size: 16px\"\n                            title=\"You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com).\"\n                          >\n                          </i>\n                        </span>\n                        <span\n                          v-if=\"new_response.values.length > 1\"\n                          title=\"Remove Text Response\"\n                          class=\"close my-auto\"\n                          style=\"cursor: pointer; margin-left: 12px\"\n                          @click=\"\n                            add_to_assistant_response_text_list(\n                              'remove',\n                              new_response.id,\n                              num\n                            )\n                          \"\n                        >\n                          &times;\n                        </span>\n                      </div>\n                    </div>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add value\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_text_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                    <div class=\"response-variations\">\n                      <span\n                        >Response variations are set to\n                        <strong>{{ new_response.variation }}</strong\n                        >.</span\n                      >\n                      Set to\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'sequential'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'sequential'\"\n                        href=\"javascript:void(0);\"\n                        class=\"response-variation\"\n                      >\n                        sequential\n                      </a>\n                      <span v-show=\"new_response.variation != 'sequential'\">\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'multiline'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'multiline'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-multiline\"\n                      >\n                        multiline\n                      </a>\n                      <span\n                        v-show=\"\n                          new_response.variation != 'random' &&\n                          new_response.variation != 'multiline'\n                        \"\n                      >\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(new_response.id, 'random')\n                        \"\n                        v-show=\"new_response.variation != 'random'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-random\"\n                      >\n                        random\n                      </a>\n                    </div>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'image'\">\n                  <p class=\"sub_heading\">Image Response :</p>\n                  <!-- <p>Enter Name (Optional)</p>\n                      <input class=\"form-control input-tag\" type=\"text\" v-model=\"new_response.image_name\"> -->\n                  <!-- <p class=\"mb-0\">Image source :</p> -->\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Image url\"\n                      type=\"text\"\n                      v-model=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_image_url(new_response.source) == false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid image URL in png or jpg format only.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'video'\">\n                  <p class=\"sub_heading\">\n                    Video Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Video url (It is recommended to use embed link.)\"\n                      type=\"text\"\n                      v-model.trim=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_video_url(new_response.source) === false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid video url.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'choices'\">\n                  <p class=\"sub_heading\">\n                    Choice Response : {{ new_response.id }}\n                  </p>\n                  <!-- <div>\n                    <input\n                      class=\"form-control input-tag\"\n                      placeholder=\"Enter response text\"\n                      style=\"width: 100%\"\n                      type=\"text\"\n                      v-model=\"new_response.title\"\n                    />\n                  </div> -->\n                  <div class=\"custom-button-box px-3 py-2 mt-3 mb-3\">\n                    <template>\n                      <div style=\"display: block; margin-bottom: 1rem\">\n                        <div\n                          v-for=\"(response, num) in new_response.choices\"\n                          :key=\"num\"\n                          class=\"custom-button-box px-3 py-3 mt-3 mb-3\"\n                          style=\"\"\n                        >\n                          <label class=\"mt-0 choice-label\" style=\"\"\n                            >Title:</label\n                          >\n                          <span\n                            style=\"cursor: pointer; float: right\"\n                            class=\"close ml-auto mr-0\"\n                            title=\"Remove Choice Response\"\n                            v-if=\"new_response.choices.length > 1\"\n                            @click=\"\n                              add_to_assistant_response_choice_list(\n                                'remove',\n                                new_response.id,\n                                num\n                              )\n                            \"\n                          >\n                            &times;</span\n                          >\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.title\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"title of the button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                          <div class=\"mt-2 mb-2\">\n                            <label class=\"choice-label\" style=\"\">Value:</label>\n                          </div>\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.payload\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"value to be passed when clicked on button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                        </div>\n                      </div>\n                    </template>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add choice\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_choice_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <hr style=\"margin: 10px 0px\" />\n                <!-- <vue-editor\n                  WHILE SAVING DETAILS ADD VALIDATION ADDNODE()\n                    v-model=\"assistant_response[index]\"\n                    :editorToolbar=\"customToolbar\"\n                  ></vue-editor> -->\n              </div>\n              <div class=\"d-flex\">\n                <p class=\"sub_heading\">Select a response type first :</p>\n                <select\n                  class=\"form-control input-tag\"\n                  v-model=\"selected_response_type\"\n                  style=\"\n                    width: 100px;\n                    height: 25px;\n                    margin-left: 10px;\n                    padding: 0px;\n                  \"\n                  id=\"res_n_int_source\"\n                >\n                  <option\n                    v-for=\"(option, index) in assistant_response_type\"\n                    :key=\"index\"\n                    :value=\"option\"\n                  >\n                    {{ option }}\n                  </option>\n                </select>\n                <!-- </div> -->\n                <!-- <div class=\"d-flex\"> -->\n                <p class=\"sub_heading\" style=\"margin-left: 20px\">\n                  Add response\n                </p>\n                <button\n                  style=\"\n                    margin-top: -14px;\n                    cursor: pointer;\n                    border: none;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                  \"\n                  @click=\"\n                    add_slot_to_assistant_response(\n                      'Addbtn',\n                      'unused',\n                      edit_slot_check_for,\n                      edit_slot_slot_variable,\n                      null,\n                      'validation_response'\n                    )\n                  \"\n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n          </div>\n          <!-- <div class=\"modal-footer\">\n            <a href=\"#\" data-dismiss=\"modal\" class=\"btn\">Close</a>\n            <a href=\"#\" class=\"btn btn-primary\">Save changes</a>\n          </div> -->\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal fade\"\n      id=\"webhookmodal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"webhookmodal\"\n      aria-hidden=\"true\"\n      data-backdrop=\"static\"\n      data-keyboard=\"false\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 style=\"font-style: regular\" class=\"modal-title\">\n              Configure Webhook Response for : {{ webhook_variable }}\n            </h5>\n            <button\n              type=\"button\"\n              @click=\"on_close_webhook_modal()\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-hidden=\"true\"\n            >\n              ×\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"form-group\">\n              <h5 style=\"margin-top: 6px; margin-bottom: 5px\">\n                Assistant Response\n              </h5>\n              <div\n                v-for=\"(new_response, index) in webhook_assistant_response\"\n                :key=\"index\"\n                class=\"form-group\"\n              >\n                <span\n                  style=\"float: right; cursor: pointer; font-size: 14px\"\n                  @click=\"\n                    webhook_to_assistant_response(\n                      'remove',\n                      webhook_variable,\n                      new_response.id\n                    )\n                  \"\n                  class=\"close\"\n                  title=\"Remove Response\"\n                >\n                  Remove\n                  <!-- <i style=\"font-size: 16px\" class=\"fa\">&#xf00d;</i> -->\n                </span>\n                <div v-if=\"new_response.type == 'text'\">\n                  <p class=\"sub_heading\">\n                    Text Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 pb-2 pt-3 mt-3 mb-3\">\n                    <div\n                      v-for=\"(response, num) in new_response.values\"\n                      :key=\"num\"\n                      class=\"form-group\"\n                    >\n                      <div class=\"d-flex\">\n                        <input\n                          class=\"form-control input-tag\"\n                          placeholder=\"Enter response text\"\n                          style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                          type=\"text\"\n                          v-model=\"new_response.values[num]\"\n                          :id=\"'assistance_response_'+ new_response.id + '_' + num\"\n                          @focusout=\"insert_variable_block_off(new_response.id , num)\"\n                          @focusin=\"insert_variable_block_on(new_response.id, num)\"\n                        />\n                        <div style=\"opacity:0\" :id=\"'insert_variable_block' + new_response.id + '_' + num\">\n                          <a \n                            @click=\"set_assistance_response_index(new_response.id, num)\" \n                            class=\"example fa-stack fa-1x\"\n                            id=\"insert_variable_button\" \n                            type=\"button\"\n                            data-toggle=\"modal\"\n                            data-target=\"#insert_variable_modal\"\n                            style=\"margin-top:20px !important\"\n                          >\n                            <i \n                              class=\"fas fa-circle fa-stack-2x\"\n                              style=\"color:#dbe2e8\" \n                              :id=\"'insert_variable_circle_'+ new_response.id + '_' + num\"\n                              >\n                            </i>\n                            <span \n                              class=\"fa fa-stack-1x\"\n                              style=\"color:white;\"\n                              @mouseover=\"circle_mouseover(new_response.id, num)\" \n                              @mouseout=\"circle_mouseout(new_response.id, num)\"\n                            >\n                              <span style=\"font-size:14px; display:block;\">\n                                  {...}\n                              </span>\n                            </span>\n                          </a>\n                        </div>\n                        <!-- v-on:keyup.enter=\"\n                            add_to_assistant_response_text_list(\n                              'add',new_response.id)\" \n                              -->\n                        <span style=\"margin-left: 12px; color: #0645AD;\"\n                          class=\"my-auto\"\n                          v-if=\"check_slot_value_use_in_response(new_response.values[num])\"\n                        >\n                          <i\n                            class=\"fa fa-info-circle\"\n                            aria-hidden=\"true\"\n                            style=\"font-size: 16px\"\n                            title=\"You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com).\"\n                          >\n                          </i>\n                        </span>      \n                        <span\n                          v-if=\"new_response.values.length > 1\"\n                          title=\"Remove Text Response\"\n                          class=\"close my-auto\"\n                          style=\"cursor: pointer; margin-left: 12px\"\n                          @click=\"\n                            add_to_assistant_response_text_list(\n                              'remove',\n                              new_response.id,\n                              num\n                            )\n                          \"\n                        >\n                          &times;\n                        </span>\n                      </div>\n                    </div>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add value\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_text_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                    <div class=\"response-variations\">\n                      <span\n                        >Response variations are set to\n                        <strong>{{ new_response.variation }}</strong\n                        >.</span\n                      >\n                      Set to\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'sequential'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'sequential'\"\n                        href=\"javascript:void(0);\"\n                        class=\"response-variation\"\n                        >sequential</a\n                      >\n                      <span v-show=\"new_response.variation != 'sequential'\">\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'multiline'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'multiline'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-multiline\"\n                        >multiline</a\n                      >\n                      <span\n                        v-show=\"\n                          new_response.variation != 'random' &&\n                          new_response.variation != 'multiline'\n                        \"\n                      >\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(new_response.id, 'random')\n                        \"\n                        v-show=\"new_response.variation != 'random'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-random\"\n                        >random</a\n                      >\n                    </div>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'image'\">\n                  <p class=\"sub_heading\">Image Response :</p>\n                  <!-- <p>Enter Name (Optional)</p>\n                      <input class=\"form-control input-tag\" type=\"text\" v-model=\"new_response.image_name\"> -->\n                  <!-- <p class=\"mb-0\">Image source :</p> -->\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Image url\"\n                      type=\"text\"\n                      v-model=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_image_url(new_response.source) == false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid image URL in png or jpg format only.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'video'\">\n                  <p class=\"sub_heading\">\n                    Video Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Video url (It is recommended to use embed link.)\"\n                      type=\"text\"\n                      v-model.trim=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_video_url(new_response.source) === false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid video url.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'choices'\">\n                  <p class=\"sub_heading\">\n                    Choice Response : {{ new_response.id }}\n                  </p>\n                  <!-- <div>\n                    <input\n                      class=\"form-control input-tag\"\n                      placeholder=\"Enter response text\"\n                      style=\"width: 100%\"\n                      type=\"text\"\n                      v-model=\"new_response.title\"\n                    />\n                  </div> -->\n                  <div class=\"custom-button-box px-3 py-2 mt-3 mb-3\">\n                    <template>\n                      <div style=\"display: block; margin-bottom: 1rem\">\n                        <div\n                          v-for=\"(response, num) in new_response.choices\"\n                          :key=\"num\"\n                          class=\"custom-button-box px-3 py-3 mt-3 mb-3\"\n                          style=\"\"\n                        >\n                          <label class=\"mt-0 choice-label\" style=\"\"\n                            >Title:</label\n                          >\n                          <span\n                            style=\"cursor: pointer; float: right\"\n                            class=\"close ml-auto mr-0\"\n                            title=\"Remove Choice Response\"\n                            v-if=\"new_response.choices.length > 1\"\n                            @click=\"\n                              add_to_assistant_response_choice_list(\n                                'remove',\n                                new_response.id,\n                                num\n                              )\n                            \"\n                          >\n                            &times;</span\n                          >\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.title\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"title of the button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                          <div class=\"mt-2 mb-2\">\n                            <label class=\"choice-label\" style=\"\">Value:</label>\n                          </div>\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.payload\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"value to be passed when clicked on button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                        </div>\n                      </div>\n                    </template>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add choice\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_choice_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <hr style=\"margin: 10px 0px\" />\n                <!-- <vue-editor\n                  WHILE SAVING DETAILS ADD VALIDATION ADDNODE()\n                    v-model=\"assistant_response[index]\"\n                    :editorToolbar=\"customToolbar\"\n                  ></vue-editor> -->\n              </div>\n              <div class=\"d-flex\">\n                <p class=\"sub_heading\">Select a response type first :</p>\n                <select\n                  class=\"form-control input-tag\"\n                  v-model=\"selected_response_type\"\n                  style=\"\n                    width: 100px;\n                    height: 25px;\n                    margin-left: 10px;\n                    padding: 0px;\n                  \"\n                  id=\"res_n_int_source\"\n                >\n                  <option\n                    v-for=\"(option, index) in assistant_response_type\"\n                    :key=\"index\"\n                    :value=\"option\"\n                  >\n                    {{ option }}\n                  </option>\n                </select>\n                <!-- </div> -->\n                <!-- <div class=\"d-flex\"> -->\n                <p class=\"sub_heading\" style=\"margin-left: 20px\">\n                  Add response\n                </p>\n                <button\n                  style=\"\n                    margin-top: -14px;\n                    cursor: pointer;\n                    border: none;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                  \"\n                  @click=\"\n                    webhook_to_assistant_response('add', webhook_variable)\n                  \"\n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n          </div>\n          <!-- <div class=\"modal-footer\">\n            <a href=\"#\" data-dismiss=\"modal\" class=\"btn\">Close</a>\n            <a href=\"#\" class=\"btn btn-primary\">Save changes</a>\n          </div> -->\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal fade\"\n      id=\"manage_handler_id\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"manage_handler_id\"\n      aria-hidden=\"true\"\n      data-backdrop=\"static\"\n      data-keyboard=\"false\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <div>\n              <h5 style=\"font-style: regular\" class=\"modal-title\">\n                Manage handlers\n              </h5>\n              <p class=\"m-0\">\n                (Handlers are how your bot will respond when the users answer to a prompt is not found.)\n            </p>\n            </div>\n            <button\n              type=\"button\"\n              @click=\"on_close_manage_handlers()\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-hidden=\"true\"\n            >\n              ×\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"form-group\">\n              <!-- <h5>If answer to any prompt is not found and</h5> -->\n              <div\n                v-for=\"(handler, ind) in manage_handlers\"\n                :key=\"ind\"\n              >\n                <div>\n                  <span\n                    style=\"float: right; cursor: pointer; font-size: 14px\"\n                    @click=\"add_remove_to_manage_handler_list('remove', ind)\"\n                    class=\"close\"\n                    title=\"Delete Handler\"\n                  >\n                    Delete\n                    <!-- <i style=\"font-size: 16px\" class=\"fa\">&#xf00d;</i> -->\n                  </span>\n                  <h5>\n                    Handler : {{ ind }}\n                  </h5>\n                </div>\n                <div class=\"custom-button-box-head px-3 py-3 mt-3 mb-3\">\n                  <div class=\"form-group\">\n                    <h5>If Assistant Recognizes</h5>\n                    <div class=\"row d-flex\">\n                      <div\n                        class=\"d-flex ml-2 pb-2\"\n                        v-for=\"(trigger, index) in handler.triggers\"\n                        :key=\"index\"\n                      >\n                        <div class=\"ml-2 my-auto\">\n                          <div>\n                            <select \n                              class=\"custom-select\" \n                              aria-label=\"Filter by\"\n                              id=\"trigger_filter_by_id\"\n                              style=\"width: 120px; height: 40px; padding-left: 14px; padding-bottom:4px;\"\n                              placeholder=\"Filter by\"\n                              v-model=\"trigger.trigger_type\"\n                              @input=\"manage_handlers_change_trigger_value(trigger.trigger_type, index, ind)\"\n                            >\n                              <option value=\"\" disabled selected>Filter by</option>\n                              <option value=\"intent\">Objective</option>\n                              <option value=\"entity\">Entity</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div\n                          class=\"ml-2 my-auto\"\n                          v-if=\"Boolean(trigger.trigger_type)\"\n                        >\n                          <multiselect\n                            v-model=\"trigger.trigger_value\"\n                            :options=\"trigger.trigger_type === 'intent'\n                                ? trigger_options_intent\n                                : trigger_options_entity\n                            \"\n                            :placeholder=\"trigger.trigger_type === 'intent'\n                                ? 'Search Objective'\n                                : 'Search Entity'\n                            \"\n                            :close-on-select=\"true\"\n                            :clear-on-select=\"false\"\n                            :preserve-search=\"true\"\n                            :show-labels=\"false\"\n                            :allow-empty=\"false\"\n                            open-direction=\"bottom\"\n                            :searchable=\"true\"\n                            :loading=\"is_loading\"\n                            @input=\"\n                              manage_handlers_change_trigger_type(\n                                trigger.trigger_type,\n                                trigger.trigger_value,\n                                index,\n                                ind\n                              )\n                            \"\n                            @search-change=\"search_intent_entity(trigger.trigger_type, $event)\"\n                            style=\"height: 30px; padding: 0px\"\n                            id=\"res_n_int_source\"\n                          >\n                            <span slot=\"noOptions\"></span>\n                            <span slot=\"noResult\">No Condition found.</span>\n                          </multiselect>\n                        </div>\n                        <div\n                          class=\"ml-2 my-auto\"\n                          v-if=\"\n                            Boolean(trigger.trigger_type === 'entity') &&\n                            Boolean(trigger.trigger_value)\n                          \"\n                          :style=\"\n                            is_entity_type_sys_pattern(trigger.trigger_value) === true\n                              ? 'cursor: not-allowed'\n                              : null\n                          \"\n                          :title=\"\n                            is_entity_type_sys_pattern(trigger.trigger_value) === true\n                              ? 'Entity selected is of type pattern or system entity, hence further option(s) cannot be selected.'\n                              : null\n                          \"\n                        >\n                          <multiselect\n                            id=\"trigger_operand_id\"\n                            :close-on-select=\"true\"\n                            :options=\"entity_operand_options\"\n                            placeholder=\"Operator\"\n                            v-model=\"trigger.operand\"\n                            :allow-empty=\"false\"\n                            :show-labels=\"false\"\n                            @input=\"\n                              manage_handlers_change_trigger_entity_value(trigger.operand, index, ind)\n                            \"\n                            :disabled=\"\n                              is_entity_type_sys_pattern(trigger.trigger_value) ===\n                              true\n                            \"\n                          >\n                          </multiselect>\n                        </div>\n                        <div\n                          class=\"ml-2 my-auto\"\n                          v-if=\" Boolean(trigger.trigger_type === 'entity') &&\n                            Boolean(trigger.trigger_value) &&\n                            Boolean(trigger.operand === 'is')\n                          \"\n                        >\n                          <multiselect\n                            id=\"trigger_entity_value_id\"\n                            :close-on-select=\"true\"\n                            :options=\"entity_value_options(trigger.trigger_value)\"\n                            placeholder=\"select entity value\"\n                            v-model=\"trigger.entity_value\"\n                            :allow-empty=\"false\"\n                            :show-labels=\"false\"\n                            @input=\"\n                              manage_handlers_set_trigger_entity_value(trigger.entity_value, index, ind)\n                            \"\n                          >\n                          </multiselect>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"form-group\">\n                    <h5 style=\"margin-top: 6px; margin-bottom: 5px\">\n                      Assistant Response\n                    </h5>\n                    <div\n                      v-for=\"(new_response, index) in handler.responses\"\n                      :key=\"index\"\n                      class=\"form-group\"\n                    >\n                      <span\n                        style=\"float: right; cursor: pointer; font-size: 14px\"\n                        @click=\"\n                          manage_handlers_add_to_assistant_response_list('remove', ind, index)\n                        \"\n                        class=\"close\"\n                        title=\"Remove Response\"\n                      >\n                        Remove\n                      </span>\n                      <div v-if=\"new_response.type == 'text'\">\n                        <p class=\"sub_heading\">\n                          <!-- Text Response : {{ new_response.id }} -->\n                          Text Response\n                        </p>\n                        <div class=\"custom-button-box px-3 pb-2 pt-3 mt-3 mb-3\">\n                          <div\n                            v-for=\"(response, num) in new_response.values\"\n                            :key=\"num\"\n                            class=\"form-group\"\n                          >\n                            <div class=\"d-flex\">\n                              <input\n                                class=\"form-control input-tag\"\n                                placeholder=\"Enter response text\"\n                                style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                                type=\"text\"\n                                v-model=\"new_response.values[num]\"\n                                :id=\"'manage_handlers_assistance_response_'+ new_response.id + '_' + num\"\n                                @focusout=\"manage_handlers_insert_variable_block_off(new_response.id , num)\"\n                                @focusin=\"manage_handlers_insert_variable_block_on(new_response.id, num)\"\n                                v-on:keyup.enter=\"\n                                  manage_handler_add_to_assistant_response_text_list(\n                                    'add',\n                                    new_response.id, \n                                    ind\n                                  )\n                                \"\n                              />\n                              <div style=\"opacity:0\" :id=\"'manage_handlers_insert_variable_block' + new_response.id + '_' + num\">\n                                <a \n                                  @click=\"manage_handlers_set_assistance_response_index(new_response.id, num, ind)\" \n                                  class=\"example fa-stack fa-1x\"\n                                  id=\"manage_handlers_insert_variable_button\" \n                                  type=\"button\"\n                                  data-toggle=\"modal\"\n                                  data-target=\"#manage_handlers_insert_variable_modal\"\n                                  style=\"margin-top:20px !important\"\n                                >\n                                  <i \n                                    class=\"fas fa-circle fa-stack-2x\"\n                                    style=\"color:#dbe2e8\" \n                                    :id=\"'manage_handlers_insert_variable_circle_'+ new_response.id + '_' + num\"\n                                    >\n                                  </i>\n                                  <span \n                                    class=\"fa fa-stack-1x\"\n                                    style=\"color:white;\"\n                                    @mouseover=\"manage_handlers_circle_mouseover(new_response.id, num)\" \n                                    @mouseout=\"manage_handlers_circle_mouseout(new_response.id, num)\"\n                                  >\n                                    <span style=\"font-size:14px; display:block;\">\n                                        {...}\n                                    </span>\n                                  </span>\n                                </a>\n                              </div>\n                              <span style=\"margin-left: 12px; color: #0645AD;\"\n                                class=\"my-auto\"\n                                v-if=\"check_slot_value_use_in_response(new_response.values[num])\"\n                              >\n                                <i\n                                  class=\"fa fa-info-circle\"\n                                  aria-hidden=\"true\"\n                                  style=\"font-size: 16px\"\n                                  title=\"You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com).\"\n                                >\n                                </i>\n                              </span>\n                              <span\n                                v-if=\"new_response.values.length > 1\"\n                                title=\"Remove Text Response\"\n                                class=\"close my-auto\"\n                                style=\"cursor: pointer; margin-left: 12px\"\n                                @click=\"\n                                  manage_handler_add_to_assistant_response_text_list(\n                                    'remove',\n                                    new_response.id,\n                                    ind,\n                                    num\n                                  )\n                                \"\n                              >\n                                &times;\n                              </span>\n                            </div>\n                          </div>\n                          <div class=\"d-flex\">\n                            <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                              Add value\n                            </p>\n                            <button\n                              style=\"\n                                cursor: pointer;\n                                border: none;\n                                background: transparent\n                                  url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                                  padding-box;\n                              \"\n                              @click=\"\n                                manage_handler_add_to_assistant_response_text_list(\n                                  'add',\n                                  new_response.id,\n                                  ind\n                                )\n                              \"\n                            >\n                              <img src=\"/img/black_plus.png\" alt=\"\" />\n                            </button>\n                          </div>\n                          <div class=\"response-variations\">\n                            <span\n                              >Response variations are set to\n                              <strong>{{ new_response.variation }}</strong\n                              >.</span\n                            >\n                            Set to\n                            <a\n                              @click=\"\n                                manage_handlers_select_response_variation(\n                                  new_response.id,\n                                  'sequential',\n                                  ind\n                                )\n                              \"\n                              v-show=\"new_response.variation != 'sequential'\"\n                              href=\"javascript:void(0);\"\n                              class=\"response-variation\"\n                            >\n                              sequential\n                            </a>\n                            <span v-show=\"new_response.variation != 'sequential'\">\n                              |\n                            </span>\n                            <a\n                              @click=\"\n                                manage_handlers_select_response_variation(\n                                  new_response.id,\n                                  'multiline',\n                                  ind\n                                )\n                              \"\n                              v-show=\"new_response.variation != 'multiline'\"\n                              href=\"javascript:void(0);\"\n                              class=\"variation-multiline\"\n                            >\n                              multiline\n                            </a>\n                            <span\n                              v-show=\"\n                                new_response.variation != 'random' &&\n                                new_response.variation != 'multiline'\n                              \"\n                            >\n                              |\n                            </span>\n                            <a\n                              @click=\"\n                                manage_handlers_select_response_variation(new_response.id, 'random', ind)\n                              \"\n                              v-show=\"new_response.variation != 'random'\"\n                              href=\"javascript:void(0);\"\n                              class=\"variation-random\"\n                            >\n                              random\n                            </a>\n                          </div>\n                        </div>\n                      </div>\n                      <div v-if=\"new_response.type == 'image'\">\n                        <p class=\"sub_heading\">\n                          <!-- Image Response : {{ new_response.id }} -->\n                          Image Response\n                        </p>\n                        <!-- <p>Enter Name (Optional)</p>\n                            <input class=\"form-control input-tag\" type=\"text\" v-model=\"new_response.image_name\"> -->\n                        <!-- <p class=\"mb-0\">Image source :</p> -->\n                        <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                          <input\n                            class=\"form-control input-tag\"\n                            style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                            placeholder=\"Add Image url\"\n                            type=\"text\"\n                            v-model=\"new_response.source\"\n                          />\n                          <p\n                            v-show=\"check_image_url(new_response.source) == false && Boolean(new_response.source)\"\n                            style=\"\n                              color: red !important;\n                              margin-bottom: 0px !important;\n                              padding-top: 8px !important;\n                            \"\n                          >\n                            Please enter a valid image URL in png or jpg format only.\n                          </p>\n                        </div>\n                      </div>\n                      <div v-if=\"new_response.type == 'video'\">\n                        <p class=\"sub_heading\">\n                          <!-- Video Response : {{ new_response.id }} -->\n                          Video Response\n                        </p>\n                        <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                          <input\n                            class=\"form-control input-tag\"\n                            style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                            placeholder=\"Add Video url (It is recommended to use embed link.)\"\n                            type=\"text\"\n                            v-model.trim=\"new_response.source\"\n                          />\n                          <p\n                            v-show=\"check_video_url(new_response.source) === false && Boolean(new_response.source)\"\n                            style=\"\n                              color: red !important;\n                              margin-bottom: 0px !important;\n                              padding-top: 8px !important;\n                            \"\n                          >\n                            Please enter a valid video url.\n                          </p>\n                        </div>\n                      </div>\n                      <div v-if=\"new_response.type == 'choices'\">\n                        <p class=\"sub_heading\">\n                          <!-- Choice Response : {{ new_response.id }} -->\n                          Choice Response\n                        </p>\n                        <!-- <div>\n                          <input\n                            class=\"form-control input-tag\"\n                            placeholder=\"Enter response text\"\n                            style=\"width: 100%\"\n                            type=\"text\"\n                            v-model=\"new_response.title\"\n                          />\n                        </div> -->\n                        <div class=\"custom-button-box px-3 py-2 mt-3 mb-3\">\n                          <template>\n                            <div style=\"display: block; margin-bottom: 1rem\">\n                              <div\n                                v-for=\"(response, num) in new_response.choices\"\n                                :key=\"num\"\n                                class=\"custom-button-box px-3 py-3 mt-3 mb-3\"\n                                style=\"\"\n                              >\n                                <label class=\"mt-0 choice-label\" style=\"\"\n                                  >Title:</label\n                                >\n                                <span\n                                  style=\"cursor: pointer; float: right\"\n                                  class=\"close ml-auto mr-0\"\n                                  title=\"Remove Choice Response\"\n                                  v-if=\"new_response.choices.length > 1\"\n                                  @click=\"\n                                    manage_handlers_add_to_assistant_response_choice_list(\n                                      'remove',\n                                      new_response.id,\n                                      ind,\n                                      num\n                                    )\n                                  \"\n                                >\n                                  &times;</span\n                                >\n                                <input\n                                  type=\"text\"\n                                  v-model.trim=\"response.title\"\n                                  class=\"form-control input-tag\"\n                                  placeholder=\"title of the button\"\n                                  style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                                />\n                                <div class=\"mt-2 mb-2\">\n                                  <label class=\"choice-label\" style=\"\">Value:</label>\n                                </div>\n                                <input\n                                  type=\"text\"\n                                  v-model.trim=\"response.payload\"\n                                  class=\"form-control input-tag\"\n                                  placeholder=\"value to be passed when clicked on button\"\n                                  style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                                />\n                              </div>\n                            </div>\n                          </template>\n                          <div class=\"d-flex\">\n                            <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                              Add choice\n                            </p>\n                            <button\n                              style=\"\n                                cursor: pointer;\n                                border: none;\n                                background: transparent\n                                  url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                                  padding-box;\n                              \"\n                              @click=\"\n                                manage_handlers_add_to_assistant_response_choice_list(\n                                  'add',\n                                  new_response.id,\n                                  ind\n                                )\n                              \"\n                            >\n                              <img src=\"/img/black_plus.png\" alt=\"\" />\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                      <hr style=\"margin: 10px 0px\" />\n                      <!-- <vue-editor\n                        WHILE SAVING DETAILS ADD VALIDATION ADDNODE()\n                          v-model=\"assistant_response[index]\"\n                          :editorToolbar=\"customToolbar\"\n                        ></vue-editor> -->\n                    </div>\n                    <div class=\"d-flex\">\n                      <p class=\"sub_heading\">Select a response type first :</p>\n                      <select\n                        class=\"form-control input-tag\"\n                        v-model=\"selected_response_type\"\n                        style=\"\n                          width: 100px;\n                          height: 25px;\n                          margin-left: 10px;\n                          padding: 0px;\n                        \"\n                        id=\"res_n_int_source\"\n                      >\n                        <option\n                          v-for=\"(option, index) in assistant_response_type\"\n                          :key=\"index\"\n                          :value=\"option\"\n                        >\n                          {{ option }}\n                        </option>\n                      </select>\n                      <!-- </div> -->\n                      <!-- <div class=\"d-flex\"> -->\n                      <p class=\"sub_heading\" style=\"margin-left: 20px\">\n                        Add response\n                      </p>\n                      <button\n                        style=\"\n                          margin-top: -14px;\n                          cursor: pointer;\n                          border: none;\n                          background: transparent url('@portal/assets/img/plus.png')\n                            0% 0% no-repeat padding-box;\n                        \"\n                        @click=\"manage_handlers_add_to_assistant_response_list('add', ind)\"\n                        \n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                  </div>\n                  <div class=\"form-group\">\n                    <h5>Then assistant should</h5>\n                    <div class=\"d-flex\">\n                      <select\n                        class=\"form-control input-tag\"\n                        style=\"width: 120px; height: 30px; padding: 0px\"\n                        id=\"res_n_int_source\"\n                        disabled\n                      >\n                        <option value=\"skip_all_slots\" disabled selected>Skip all slots</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"d-flex\" v-if=\"Boolean(manage_handlers.length === 0)\">\n                <p\n                  class=\"sub_heading\"\n                  style=\"margin-top: 6px; margin-bottom: 5px\"\n                >\n                  Add handler\n                </p>\n                <button\n                  style=\"\n                    cursor: pointer;\n                    border: none;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                  \"\n                  @click=\"add_remove_to_manage_handler_list('add')\"\n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n\n          </div>\n          <!-- <div class=\"modal-footer\">\n            <a href=\"#\" data-dismiss=\"modal\" class=\"btn\">Close</a>\n            <a href=\"#\" class=\"btn btn-primary\">Save changes</a>\n          </div> -->\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal fade\"\n      id=\"notificationmodal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"notificationmodal\"\n      aria-hidden=\"true\"\n      data-backdrop=\"static\"\n      data-keyboard=\"false\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 style=\"font-style: regular\" class=\"modal-title\">\n              Configure notification\n            </h5>\n            <button\n              type=\"button\"\n              @click=\"on_close_notification_modal()\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-hidden=\"true\"\n            >\n              ×\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"form-group\">\n              <h5 style=\"margin-top: 6px; margin-bottom: 5px\">\n                Assistant Response When Notification Successful\n              </h5>\n              <div\n                v-for=\"(new_response, index) in notification_successful_assistant_response\"\n                :key=\"index\"\n                class=\"form-group\"\n              >\n                <span\n                  style=\"float: right; cursor: pointer; font-size: 14px\"\n                  @click=\"\n                    remove_notification_to_assistant_response(\n                      new_response.id,\n                      new_response.recognizes,\n                    )\n                  \"\n                  class=\"close\"\n                  title=\"Remove Response\"\n                >\n                  Remove\n                  <!-- <i style=\"font-size: 16px\" class=\"fa\">&#xf00d;</i> -->\n                </span>\n                <div v-if=\"new_response.type == 'text'\">\n                  <p class=\"sub_heading\">\n                    Text Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 pb-2 pt-3 mt-3 mb-3\">\n                    <div\n                      v-for=\"(response, num) in new_response.values\"\n                      :key=\"num\"\n                      class=\"form-group\"\n                    >\n                      <div class=\"d-flex\">\n                        <input\n                          class=\"form-control input-tag\"\n                          placeholder=\"Enter response text\"\n                          style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                          type=\"text\"\n                          v-model=\"new_response.values[num]\"\n                          :id=\"'assistance_response_'+ new_response.id + '_' + num\"\n                          @focusout=\"insert_variable_block_off(new_response.id , num)\"\n                          @focusin=\"insert_variable_block_on(new_response.id, num)\"\n                          v-on:keyup.enter=\"\n                            add_to_assistant_response_text_list(\n                              'add',\n                              new_response.id\n                            )\n                          \"\n                        />\n                        <div style=\"opacity:0\" :id=\"'insert_variable_block' + new_response.id + '_' + num\">\n                          <a \n                            @click=\"set_assistance_response_index(new_response.id, num)\" \n                            class=\"example fa-stack fa-1x\"\n                            id=\"insert_variable_button\" \n                            type=\"button\"\n                            data-toggle=\"modal\"\n                            data-target=\"#insert_variable_modal\"\n                            style=\"margin-top:20px !important\"\n                          >\n                            <i \n                              class=\"fas fa-circle fa-stack-2x\"\n                              style=\"color:#dbe2e8\" \n                              :id=\"'insert_variable_circle_'+ new_response.id + '_' + num\"\n                              >\n                            </i>\n                            <span \n                              class=\"fa fa-stack-1x\"\n                              style=\"color:white;\"\n                              @mouseover=\"circle_mouseover(new_response.id, num)\" \n                              @mouseout=\"circle_mouseout(new_response.id, num)\"\n                            >\n                              <span style=\"font-size:14px; display:block;\">\n                                  {...}\n                              </span>\n                            </span>\n                          </a>\n                        </div>\n                        <span style=\"margin-left: 12px; color: #0645AD;\"\n                          class=\"my-auto\"\n                          v-if=\"check_slot_value_use_in_response(new_response.values[num])\"\n                        >\n                          <i\n                            class=\"fa fa-info-circle\"\n                            aria-hidden=\"true\"\n                            style=\"font-size: 16px\"\n                            title=\"You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com).\"\n                          >\n                          </i>\n                        </span>\n                        <span\n                          v-if=\"new_response.values.length > 1\"\n                          title=\"Remove Text Response\"\n                          class=\"close my-auto\"\n                          style=\"cursor: pointer; margin-left: 12px\"\n                          @click=\"\n                            add_to_assistant_response_text_list(\n                              'remove',\n                              new_response.id,\n                              num\n                            )\n                          \"\n                        >\n                          &times;\n                        </span>\n                      </div>\n                    </div>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add value\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_text_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                    <div class=\"response-variations\">\n                      <span\n                        >Response variations are set to\n                        <strong>{{ new_response.variation }}</strong\n                        >.</span\n                      >\n                      Set to\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'sequential'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'sequential'\"\n                        href=\"javascript:void(0);\"\n                        class=\"response-variation\"\n                      >\n                        sequential\n                      </a>\n                      <span v-show=\"new_response.variation != 'sequential'\">\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'multiline'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'multiline'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-multiline\"\n                      >\n                        multiline\n                      </a>\n                      <span\n                        v-show=\"\n                          new_response.variation != 'random' &&\n                          new_response.variation != 'multiline'\n                        \"\n                      >\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(new_response.id, 'random')\n                        \"\n                        v-show=\"new_response.variation != 'random'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-random\"\n                      >\n                        random\n                      </a>\n                    </div>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'image'\">\n                  <p class=\"sub_heading\">Image Response : {{ new_response.id }}</p>\n                  <!-- <p>Enter Name (Optional)</p>\n                      <input class=\"form-control input-tag\" type=\"text\" v-model=\"new_response.image_name\"> -->\n                  <!-- <p class=\"mb-0\">Image source :</p> -->\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Image url\"\n                      type=\"text\"\n                      v-model=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_image_url(new_response.source) == false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid image URL in png or jpg format only.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'video'\">\n                  <p class=\"sub_heading\">\n                    Video Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Video url (It is recommended to use embed link.)\"\n                      type=\"text\"\n                      v-model.trim=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_video_url(new_response.source) === false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid video url.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'choices'\">\n                  <p class=\"sub_heading\">\n                    Choice Response : {{ new_response.id }}\n                  </p>\n                  <!-- <div>\n                    <input\n                      class=\"form-control input-tag\"\n                      placeholder=\"Enter response text\"\n                      style=\"width: 100%\"\n                      type=\"text\"\n                      v-model=\"new_response.title\"\n                    />\n                  </div> -->\n                  <div class=\"custom-button-box px-3 py-2 mt-3 mb-3\">\n                    <template>\n                      <div style=\"display: block; margin-bottom: 1rem\">\n                        <div\n                          v-for=\"(response, num) in new_response.choices\"\n                          :key=\"num\"\n                          class=\"custom-button-box px-3 py-3 mt-3 mb-3\"\n                          style=\"\"\n                        >\n                          <label class=\"mt-0 choice-label\" style=\"\"\n                            >Title:</label\n                          >\n                          <span\n                            style=\"cursor: pointer; float: right\"\n                            class=\"close ml-auto mr-0\"\n                            title=\"Remove Choice Response\"\n                            v-if=\"new_response.choices.length > 1\"\n                            @click=\"\n                              add_to_assistant_response_choice_list(\n                                'remove',\n                                new_response.id,\n                                num\n                              )\n                            \"\n                          >\n                            &times;</span\n                          >\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.title\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"title of the button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                          <div class=\"mt-2 mb-2\">\n                            <label class=\"choice-label\" style=\"\">Value:</label>\n                          </div>\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.payload\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"value to be passed when clicked on button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                        </div>\n                      </div>\n                    </template>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add choice\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_choice_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <hr style=\"margin: 10px 0px\" />\n                <!-- <vue-editor\n                  WHILE SAVING DETAILS ADD VALIDATION ADDNODE()\n                    v-model=\"assistant_response[index]\"\n                    :editorToolbar=\"customToolbar\"\n                  ></vue-editor> -->\n              </div>\n              <div class=\"d-flex\">\n                <p class=\"sub_heading\">Select a response type first :</p>\n                <select\n                  class=\"form-control input-tag\"\n                  v-model=\"selected_response_type\"\n                  style=\"\n                    width: 100px;\n                    height: 25px;\n                    margin-left: 10px;\n                    padding: 0px;\n                  \"\n                  id=\"res_n_int_source\"\n                >\n                  <option\n                    v-for=\"(option, index) in assistant_response_type\"\n                    :key=\"index\"\n                    :value=\"option\"\n                  >\n                    {{ option }}\n                  </option>\n                </select>\n                <!-- </div> -->\n                <!-- <div class=\"d-flex\"> -->\n                <p class=\"sub_heading\" style=\"margin-left: 20px\">\n                  Add response\n                </p>\n                <button\n                  style=\"\n                    margin-top: -14px;\n                    cursor: pointer;\n                    border: none;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                  \"\n                  @click=\"add_notification_successful_to_assistant_response('successful')\"\n                  \n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <h5 style=\"margin-top: 6px; margin-bottom: 5px\">\n                Assistant Response When Notification Unsuccessful\n              </h5>\n              <div\n                v-for=\"(new_response, index) in notification_unsuccessful_assistant_response\"\n                :key=\"index\"\n                class=\"form-group\"\n              >\n                <span\n                  style=\"float: right; cursor: pointer; font-size: 14px\"\n                  @click=\"\n                    remove_notification_to_assistant_response(\n                      new_response.id,\n                      new_response.recognizes,\n                    )\n                  \"\n                  class=\"close\"\n                  title=\"Remove Response\"\n                >\n                  Remove\n                  <!-- <i style=\"font-size: 16px\" class=\"fa\">&#xf00d;</i> -->\n                </span>\n                <div v-if=\"new_response.type == 'text'\">\n                  <p class=\"sub_heading\">\n                    Text Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 pb-2 pt-3 mt-3 mb-3\">\n                    <div\n                      v-for=\"(response, num) in new_response.values\"\n                      :key=\"num\"\n                      class=\"form-group\"\n                    >\n                      <div class=\"d-flex\">\n                        <input\n                          class=\"form-control input-tag\"\n                          placeholder=\"Enter response text\"\n                          style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                          type=\"text\"\n                          v-model=\"new_response.values[num]\"\n                          :id=\"'assistance_response_'+ new_response.id + '_' + num\"\n                          @focusout=\"insert_variable_block_off(new_response.id , num)\"\n                          @focusin=\"insert_variable_block_on(new_response.id, num)\"\n                          v-on:keyup.enter=\"\n                            add_to_assistant_response_text_list(\n                              'add',\n                              new_response.id\n                            )\n                          \"\n                        />\n                        <div style=\"opacity:0\" :id=\"'insert_variable_block' + new_response.id + '_' + num\">\n                          <a \n                            @click=\"set_assistance_response_index(new_response.id, num)\" \n                            class=\"example fa-stack fa-1x\"\n                            id=\"insert_variable_button\" \n                            type=\"button\"\n                            data-toggle=\"modal\"\n                            data-target=\"#insert_variable_modal\"\n                            style=\"margin-top:20px !important\"\n                          >\n                            <i \n                              class=\"fas fa-circle fa-stack-2x\"\n                              style=\"color:#dbe2e8\" \n                              :id=\"'insert_variable_circle_'+ new_response.id + '_' + num\"\n                              >\n                            </i>\n                            <span \n                              class=\"fa fa-stack-1x\"\n                              style=\"color:white;\"\n                              @mouseover=\"circle_mouseover(new_response.id, num)\" \n                              @mouseout=\"circle_mouseout(new_response.id, num)\"\n                            >\n                              <span style=\"font-size:14px; display:block;\">\n                                  {...}\n                              </span>\n                            </span>\n                          </a>\n                        </div>\n                        <span style=\"margin-left: 12px; color: #0645AD;\"\n                          class=\"my-auto\"\n                          v-if=\"check_slot_value_use_in_response(new_response.values[num])\"\n                        >\n                          <i\n                            class=\"fa fa-info-circle\"\n                            aria-hidden=\"true\"\n                            style=\"font-size: 16px\"\n                            title=\"You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com).\"\n                          >\n                          </i>\n                        </span>\n                        <span\n                          v-if=\"new_response.values.length > 1\"\n                          title=\"Remove Text Response\"\n                          class=\"close my-auto\"\n                          style=\"cursor: pointer; margin-left: 12px\"\n                          @click=\"\n                            add_to_assistant_response_text_list(\n                              'remove',\n                              new_response.id,\n                              num\n                            )\n                          \"\n                        >\n                          &times;\n                        </span>\n                      </div>\n                    </div>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add value\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_text_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                    <div class=\"response-variations\">\n                      <span\n                        >Response variations are set to\n                        <strong>{{ new_response.variation }}</strong\n                        >.</span\n                      >\n                      Set to\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'sequential'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'sequential'\"\n                        href=\"javascript:void(0);\"\n                        class=\"response-variation\"\n                      >\n                        sequential\n                      </a>\n                      <span v-show=\"new_response.variation != 'sequential'\">\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(\n                            new_response.id,\n                            'multiline'\n                          )\n                        \"\n                        v-show=\"new_response.variation != 'multiline'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-multiline\"\n                      >\n                        multiline\n                      </a>\n                      <span\n                        v-show=\"\n                          new_response.variation != 'random' &&\n                          new_response.variation != 'multiline'\n                        \"\n                      >\n                        |\n                      </span>\n                      <a\n                        @click=\"\n                          select_response_variation(new_response.id, 'random')\n                        \"\n                        v-show=\"new_response.variation != 'random'\"\n                        href=\"javascript:void(0);\"\n                        class=\"variation-random\"\n                      >\n                        random\n                      </a>\n                    </div>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'image'\">\n                  <p class=\"sub_heading\">Image Response :</p>\n                  <!-- <p>Enter Name (Optional)</p>\n                      <input class=\"form-control input-tag\" type=\"text\" v-model=\"new_response.image_name\"> -->\n                  <!-- <p class=\"mb-0\">Image source :</p> -->\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Image url\"\n                      type=\"text\"\n                      v-model=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_image_url(new_response.source) == false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid image URL in png or jpg format only.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'video'\">\n                  <p class=\"sub_heading\">\n                    Video Response : {{ new_response.id }}\n                  </p>\n                  <div class=\"custom-button-box px-3 py-3 mt-3 mb-3\">\n                    <input\n                      class=\"form-control input-tag\"\n                      style=\"width: 100%; padding: 0.375rem 0.5rem\"\n                      placeholder=\"Add Video url (It is recommended to use embed link.)\"\n                      type=\"text\"\n                      v-model.trim=\"new_response.source\"\n                    />\n                    <p\n                      v-show=\"check_video_url(new_response.source) === false && Boolean(new_response.source)\"\n                      style=\"\n                        color: red !important;\n                        margin-bottom: 0px !important;\n                        padding-top: 8px !important;\n                      \"\n                    >\n                      Please enter a valid video url.\n                    </p>\n                  </div>\n                </div>\n                <div v-if=\"new_response.type == 'choices'\">\n                  <p class=\"sub_heading\">\n                    Choice Response : {{ new_response.id }}\n                  </p>\n                  <!-- <div>\n                    <input\n                      class=\"form-control input-tag\"\n                      placeholder=\"Enter response text\"\n                      style=\"width: 100%\"\n                      type=\"text\"\n                      v-model=\"new_response.title\"\n                    />\n                  </div> -->\n                  <div class=\"custom-button-box px-3 py-2 mt-3 mb-3\">\n                    <template>\n                      <div style=\"display: block; margin-bottom: 1rem\">\n                        <div\n                          v-for=\"(response, num) in new_response.choices\"\n                          :key=\"num\"\n                          class=\"custom-button-box px-3 py-3 mt-3 mb-3\"\n                          style=\"\"\n                        >\n                          <label class=\"mt-0 choice-label\" style=\"\"\n                            >Title:</label\n                          >\n                          <span\n                            style=\"cursor: pointer; float: right\"\n                            class=\"close ml-auto mr-0\"\n                            title=\"Remove Choice Response\"\n                            v-if=\"new_response.choices.length > 1\"\n                            @click=\"\n                              add_to_assistant_response_choice_list(\n                                'remove',\n                                new_response.id,\n                                num\n                              )\n                            \"\n                          >\n                            &times;</span\n                          >\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.title\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"title of the button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                          <div class=\"mt-2 mb-2\">\n                            <label class=\"choice-label\" style=\"\">Value:</label>\n                          </div>\n                          <input\n                            type=\"text\"\n                            v-model.trim=\"response.payload\"\n                            class=\"form-control input-tag\"\n                            placeholder=\"value to be passed when clicked on button\"\n                            style=\"width: 100% !important; padding: 0.375rem 0.5rem\"\n                          />\n                        </div>\n                      </div>\n                    </template>\n                    <div class=\"d-flex\">\n                      <p style=\"margin-top: 6px; margin-bottom: 5px\">\n                        Add choice\n                      </p>\n                      <button\n                        style=\"\n                          cursor: pointer;\n                          border: none;\n                          background: transparent\n                            url('@portal/assets/img/plus.png') 0% 0% no-repeat\n                            padding-box;\n                        \"\n                        @click=\"\n                          add_to_assistant_response_choice_list(\n                            'add',\n                            new_response.id\n                          )\n                        \"\n                      >\n                        <img src=\"/img/black_plus.png\" alt=\"\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <hr style=\"margin: 10px 0px\" />\n                <!-- <vue-editor\n                  WHILE SAVING DETAILS ADD VALIDATION ADDNODE()\n                    v-model=\"assistant_response[index]\"\n                    :editorToolbar=\"customToolbar\"\n                  ></vue-editor> -->\n              </div>\n              <div class=\"d-flex\">\n                <p class=\"sub_heading\">Select a response type first :</p>\n                <select\n                  class=\"form-control input-tag\"\n                  v-model=\"selected_response_type\"\n                  style=\"\n                    width: 100px;\n                    height: 25px;\n                    margin-left: 10px;\n                    padding: 0px;\n                  \"\n                  id=\"res_n_int_source\"\n                >\n                  <option\n                    v-for=\"(option, index) in assistant_response_type\"\n                    :key=\"index\"\n                    :value=\"option\"\n                  >\n                    {{ option }}\n                  </option>\n                </select>\n                <!-- </div> -->\n                <!-- <div class=\"d-flex\"> -->\n                <p class=\"sub_heading\" style=\"margin-left: 20px\">\n                  Add response\n                </p>\n                <button\n                  style=\"\n                    margin-top: -14px;\n                    cursor: pointer;\n                    border: none;\n                    background: transparent url('@portal/assets/img/plus.png')\n                      0% 0% no-repeat padding-box;\n                  \"\n                  @click=\"add_notification_successful_to_assistant_response('unsuccessful')\"\n                  \n                >\n                  <img src=\"/img/black_plus.png\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n          </div>\n          <!-- <div class=\"modal-footer\">\n            <a href=\"#\" data-dismiss=\"modal\" class=\"btn\">Close</a>\n            <a href=\"#\" class=\"btn btn-primary\">Save changes</a>\n          </div> -->\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal\"\n      id=\"insert_variable_modal\"\n      aria-labelledby=\"insert_variable_modal\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered modal-sm\" role=\"document\">\n        <div \n          class=\"modal-content\" \n          style=\"box-shadow: none !important\">\n          <div class=\"modal-body\">\n            <div>\n              <multiselect\n                id=\"insert_variable_id\"\n                :close-on-select=\"false\"\n                :options=\"insert_slot_variable_options\"\n                placeholder=\"Select Variable\"\n                :show-labels=\"false\"\n                open-direction=\"top\"\n                :max-height=\"120\"\n                @open=\"add_to_insert_slot_variable_options\"\n                @input=\"insert_slot_variable_to_assistance_response($event)\"\n              >\n              </multiselect>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal\"\n      id=\"manage_handlers_insert_variable_modal\"\n      aria-labelledby=\"manage_handlers_insert_variable_modal\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered modal-sm\" role=\"document\">\n        <div \n          class=\"modal-content\" \n          style=\"box-shadow: none !important\">\n          <div class=\"modal-body\">\n            <div>\n              <multiselect\n                id=\"manage_handlers_insert_variable_id\"\n                :close-on-select=\"false\"\n                :options=\"insert_slot_variable_options\"\n                placeholder=\"Select Variable\"\n                :show-labels=\"false\"\n                open-direction=\"top\"\n                :max-height=\"120\"\n                @open=\"add_to_insert_slot_variable_options\"\n                @input=\"manage_handlers_insert_slot_variable_to_assistance_response($event)\"\n              >\n              </multiselect>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// import { Tree, TreeNode } from \"vue-tree-list\";\nimport {\n  VueTreeList,\n  Tree,\n  TreeNode,\n} from \"../../../../../public/js/vue-tree-list.umd.min.js\";\nimport axios from \"axios\";\nimport api_calls from \"@/portal/api_calls\";\nimport Swal from \"sweetalert2\";\nimport { VueEditor } from \"vue2-editor\";\nimport Multiselect from \"vue-multiselect\";\nimport ResponseBot from \"../Data Inputs/ResponseBot\";\nimport draggable from \"vuedraggable\";\n\nexport default {\n  components: {\n    VueTreeList,\n    VueEditor,\n    Multiselect,\n    ResponseBot,\n    draggable,\n  },\n  data() {\n    return {\n      updated_node_list:\"\",\n      spinnerOn: false,\n      assistance_response_id: 0,\n      assistance_response__val_index: 0,\n      manage_handlers_ind: 0,\n      manage_handlers_assistance_response_id: 0,\n      manage_handlers_assistance_response__val_index: 0,\n      slot_variable: [],\n      reg_url:\n        /https:\\/\\/[(www\\.)?a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)/i,\n      reg_image:\n        /(https:\\/\\/)([^\\s([\"<,>/]*)(\\/)[^\\s[\",><]*(.png|.jpg)(\\?[^\\s[\",><]*)?/,\n      newTree: {},\n      nodes_list: [],\n      data: new Tree([]),\n      load_bot_preview: false,\n      drag_slots:false,\n      // test_response_tree: [\n      //   {\n      //     id: 1623669014307,\n      //     is_leaf: false,\n      //     editNodeDisabled: true,\n      //     name: \"Hello\",\n      //     next_step: {\n      //       behavior: \"wait_for_reply\",\n      //       node_id: null,\n      //       selector: \"wait_for_user_input\",\n      //     },\n      //     pid: 0,\n      //     responses: [\n      //       {\n      //         condition: false,\n      //         id: 0,\n      //         recognizes: null,\n      //         type: \"text\",\n      //         values: [\"Heyya\"],\n      //         variation: \"random\",\n      //       },\n      //       {\n      //         condition: false,\n      //         id: 1,\n      //         recognizes: null,\n      //         type: \"text\",\n      //         values: [\"Heyya2\"],\n      //         variation: \"random\",\n      //       },\n      //     ],\n      //     slot_setting: false,\n      //     slots: [],\n      //     triggers: [\n      //       {\n      //         trigger_type: \"intent\",\n      //         trigger_value: \"intent\",\n      //       },\n      //     ],\n      //     webhook_id: null,\n      //     webhook_integration: false,\n      //     webhook_mapping: null,\n      //     webhook_return_variable: null,\n      //     children: [\n      //       {\n      //         id: 1623670999878,\n      //         is_leaf: false,\n      //         editNodeDisabled: true,\n      //         name: \"Hello child\",\n      //         next_step: {\n      //           behavior: \"wait_for_reply\",\n      //           node_id: null,\n      //           selector: \"wait_for_user_input\",\n      //         },\n      //         pid: 1623669014307,\n      //         responses: [\n      //           {\n      //             condition: false,\n      //             id: 0,\n      //             recognizes: null,\n      //             type: \"text\",\n      //             values: [\"child\", \"node\"],\n      //             variation: \"sequential\",\n      //           },\n      //         ],\n      //         slot_setting: false,\n      //         slots: [],\n      //         triggers: [\n      //           {\n      //             trigger_type: \"intent\",\n      //             trigger_value: \"intent\",\n      //           },\n      //         ],\n      //         webhook_id: null,\n      //         webhook_integration: false,\n      //         webhook_mapping: null,\n      //         webhook_return_variable: null,\n      //       },\n      //       {\n      //         id: 1623731025414,\n      //         is_leaf: false,\n      //         editNodeDisabled: true,\n      //         name: \"child_2\",\n      //         next_step: {\n      //           behavior: \"wait_for_reply\",\n      //           node_id: null,\n      //           selector: \"wait_for_user_input\",\n      //         },\n      //         node_name: \"basic_child_2\",\n      //         node_type: \"basic\",\n      //         pid: 1623669014307,\n      //         responses: [\n      //           {\n      //             condition: false,\n      //             id: 0,\n      //             recognizes: null,\n      //             type: \"text\",\n      //             values: [\"child\", \"text response\"],\n      //             variation: \"random\",\n      //           },\n      //           {\n      //             condition: false,\n      //             id: 1,\n      //             recognizes: null,\n      //             source: \"googl.com\",\n      //             type: \"image\",\n      //             variation: \"random\",\n      //           },\n      //         ],\n      //         slot_setting: false,\n      //         slots: [],\n      //         triggers: [\n      //           {\n      //             trigger_type: \"intent\",\n      //             trigger_value: \"intent\",\n      //           },\n      //         ],\n      //         webhook_id: null,\n      //         webhook_integration: false,\n      //         webhook_mapping: null,\n      //         webhook_return_variable: null,\n      //       },\n      //     ],\n      //   },\n      //   {\n      //     id: 1623670882130,\n      //     is_leaf: false,\n      //     editNodeDisabled: true,\n      //     name: \"World\",\n      //     next_step: {\n      //       behavior: \"wait_for_reply\",\n      //       node_id: null,\n      //       selector: \"wait_for_user_input\",\n      //     },\n      //     node_name: \"basic_World\",\n      //     node_type: \"basic\",\n      //     pid: 0,\n      //     responses: [\n      //       {\n      //         condition: false,\n      //         id: \"0\",\n      //         recognizes: null,\n      //         type: \"text\",\n      //         values: [\"text\"],\n      //         variation: \"random\",\n      //       },\n      //       {\n      //         condition: false,\n      //         id: \"1\",\n      //         recognizes: null,\n      //         type: \"text\",\n      //         values: [\"resp\"],\n      //         variation: \"random\",\n      //       },\n      //     ],\n      //     slot_setting: false,\n      //     slots: [],\n      //     triggers: [\n      //       {\n      //         trigger_type: \"intent\",\n      //         trigger_value: \"intent\",\n      //       },\n      //     ],\n      //     webhook_id: null,\n      //     webhook_integration: false,\n      //     webhook_mapping: null,\n      //     webhook_return_variable: null,\n      //   },\n      //   {\n      //     id: 1623671218996,\n      //     is_leaf: false,\n      //     editNodeDisabled: true,\n      //     name: \"Test node3\",\n      //     next_step: {\n      //       behavior: \"wait_for_reply\",\n      //       node_id: null,\n      //       selector: \"wait_for_user_input\",\n      //     },\n      //     pid: 0,\n      //     responses: [\n      //       {\n      //         condition: \"unfilled\",\n      //         id: \"0\",\n      //         recognizes: \"$webhook_result\",\n      //         type: \"text\",\n      //         values: [\"webhook_variabble response\"],\n      //         variation: \"random\",\n      //       },\n      //     ],\n      //     slot_setting: false,\n      //     slots: [],\n      //     triggers: [\n      //       {\n      //         trigger_type: \"Intent\",\n      //         trigger_value: \"Intent\",\n      //       },\n      //     ],\n      //     webhook_id: \"1\",\n      //     webhook_integration: true,\n      //     webhook_mapping: [\n      //       {\n      //         key: \"name\",\n      //         value: \"value\",\n      //       },\n      //     ],\n      //     webhook_return_variable: \"$webhook_result\",\n      //     children: [\n      //       {\n      //         id: 1623730827206,\n      //         is_leaf: false,\n      //         editNodeDisabled: true,\n      //         name: \"test child node\",\n      //         next_step: {\n      //           behavior: \"wait_for_reply\",\n      //           node_id: null,\n      //           selector: \"wait_for_user_input\",\n      //         },\n      //         node_name: \"basic_test child node\",\n      //         node_type: \"basic\",\n      //         pid: 1623671218996,\n      //         responses: [\n      //           {\n      //             condition: false,\n      //             id: 0,\n      //             recognizes: null,\n      //             type: \"text\",\n      //             values: [\"hello\"],\n      //             variation: \"sequential\",\n      //           },\n      //           {\n      //             condition: false,\n      //             id: 1,\n      //             recognizes: null,\n      //             type: \"text\",\n      //             values: [\"text\", \"response\"],\n      //             variation: \"random\",\n      //           },\n      //         ],\n      //         slot_setting: false,\n      //         slots: [],\n      //         triggers: [\n      //           {\n      //             trigger_type: \"Intent\",\n      //             trigger_value: \"Intent\",\n      //           },\n      //         ],\n      //         webhook_id: \"1\",\n      //         webhook_integration: true,\n      //         webhook_mapping: [\n      //           {\n      //             key: \"name\",\n      //             value: \"$value\",\n      //           },\n      //         ],\n      //         webhook_return_variable: \"$webhook_result\",\n      //       },\n      //     ],\n      //   },\n      // ],\n      new_child_node: false,\n      child_node: {},\n      node_id: \"\",\n      node_name: \"\",\n      node_type: \"\",\n      is_root: false,\n      assistant_response: [],\n      assistant_response_type: [\"text\", \"image\", \"video\", \"choices\"],\n      selected_response_type: \"text\",\n      response_variation: [\"sequential\"],\n      triggers_filter_by_options: [\"intent\", \"entity\"],\n      insert_slot_variable_options: [],\n      entity_operand_options: [\"is\", \"any\"],\n      triggers: [\n        {\n          trigger_type: \"\",\n          trigger_value: \"\",\n        },\n      ],\n      then_assistant_should: [\"wait_for_reply\", \"jump_to\"],\n      save_then_assistant_should: \"\",\n      next_step: {},\n      jump_to_node_id: \"\",\n      is_slot: false,\n      is_webhook: false,\n      is_notification: false,\n      webhook_id: null,\n      webhook_list: [],\n      is_webhook_details: false,\n      webhook_mapping: [],\n      webhook_variable: \"\",\n      webhook_assistant_response: [],\n      slots: [],\n      is_validation_entity: false,\n      unfilled_slot_assistant_response: [],\n      validation_slot_assistant_response: [],\n      notification_successful_assistant_response: [],\n      notification_unsuccessful_assistant_response: [],\n      edit_slot_index: \"\",\n      edit_slot_check_for: \"\",\n      edit_slot_slot_variable: \"\",\n      manage_handlers: [],\n      notifications: {\n        \"notify\": [\n            {\n                \"type\": \"\",\n                \"slot\": \"\",\n                \"template_id\": \"\",\n                \"template_name\": \"\"\n            }\n        ],\n        \"responses\": []\n      },\n      notifications_notify_type_list:['email'],\n      notifications_notify_template_list:[\n          // {\n          //   \"email\": \"<p>New Year Offers of 50% discount on all grocery products!!!</p>\", \n          //   \"sms\": null, \n          //   \"template_id\": \"435312bc-d427-497a-aece-b8b92a482e20\", \n          //   \"template_name\": \"New Year Offers\"\n          // }, \n          // {\n          //   \"email\": \"<p>Sale of 50 % on diwali</p>\", \n          //   \"sms\": null, \n          //   \"template_id\": \"e766e795-9b3a-4ad8-8ea3-59d69edf0267\", \n          //   \"template_name\": \"Diwali Template\"\n          // }, \n          // {\n          //   \"email\": \"<p>Hello Customers!</p><p>Christmas may be weeks ago but we are encouraging customers to shop early this year for timely delivery. COVID-19 will cause surge in online shopping, which means that there could be unexpected shipping delays with carriers. Go visit our store now: https://earthonstore.com/ </p>\", \n          //   \"sms\": null, \n          //   \"subject\": \"Offers\", \n          //   \"template_id\": \"0bb0ceb3-fd30-413e-8f37-b0bc59bb00e7\", \n          //   \"template_name\": \"Christmas\"\n          // }\n      ],\n      customToolbar: [\n        [\"bold\", \"italic\", \"underline\"],\n        [{ align: [] }],\n        [{ color: [] }, { background: [] }],\n        [{ list: \"ordered\" }, { list: \"bullet\" }],\n        [\"link\"],\n      ],\n      // entity_list: [\"entity1\",\"entity2\"],\n      entity_list: [],\n      // trigger_options: [\"INtent1\",\"Intent2\",\"Intent3\"],\n      trigger_options: [],\n      trigger_options_intent: [],\n      trigger_options_entity: [],\n      trigger_options_entity_values: [],\n      is_show_edit: false,\n      is_loading: false,\n    };\n  },\n  watch: {},\n  computed: {\n    dragOptionsSlots() {\n      return {\n        animation: 200,\n        group: \"description\",\n        disabled: false,\n        ghostClass: \"ghost\",\n        scrollSensitivity: 200,\n        forceFallback: true,\n      };\n    },\n    // placeholder() {\n    //   if (this.triggers.length > 1){\n    //     this.trigger_options = [];\n    //     return \"Type to search Entity\"\n    //   }else{\n    //     return \"Type to search objective\"\n    //   }\n    // }\n  },\n  mounted() {\n    // $(\"#try_bot_btn\").click(function () {\n    //   alert('clicked!');\n    // });\n    var vm = this;\n    $(\"#insert_variable_modal\").on(\"hidden.bs.modal\", function (e) {\n      var id = vm.assistance_response_id;\n      var num = vm.assistance_response__val_index;\n      $(`#assistance_response_${id}_${num}`).focus();\n    });\n    $(\"#manage_handlers_insert_variable_modal\").on(\"hidden.bs.modal\", function (e) {\n      var id = vm.manage_handlers_assistance_response_id;\n      var num = vm.manage_handlers_assistance_response__val_index;\n      $(`#manage_handlers_assistance_response_${id}_${num}`).focus();\n    });\n    document.onclick = function (e) {\n      if (\n        e.target.closest(\"#try_bot_response\") ||\n        e.target.closest(\"#try_bot_btn\")\n      ) {\n      } else {\n        vm.load_bot_preview = false;\n      }\n    };\n    // GET SAVED DIALOG TREE\n    this.load_saved_dialog_tree();\n    // CHECKING WEBHOOK DETAILS\n    this.load_webhook();\n    this.load_intent();\n    this.load_entity();\n    this.load_templates();\n    // this.data = new Tree(this.test_response_tree)\n    // this.get_nodes_list(this.data);\n  },\n  methods: {\n    load_slot_variable(){\n      axios\n        .post(\n          api_calls.form_automation_dialog_tree(),\n          {\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            company_name: this.$session.get(\"UserInformation\").company_name,\n            is_get_slot_variable: true,\n            node_id: this.node_id.toString()\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          if (response.data.status == \"Success\") {\n            this.slot_variable = response.data.slots_list;\n          }else {\n            Swal({\n              text: \"Internal Server Error\",\n              toast: true,\n              position: \"top-end\",\n              type: \"error\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n          }\n          this.add_to_insert_slot_variable_options();\n        })\n        .catch((e) => {\n          this.add_to_insert_slot_variable_options();\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    circle_mouseover(id, num){\n      $(`#insert_variable_circle_${id}_${num}`).toggleClass(\"insert_variable_circle\");\n    },\n    circle_mouseout(id, num){\n      $(`#insert_variable_circle_${id}_${num}`).toggleClass(\"insert_variable_circle\");\n    },\n    manage_handlers_circle_mouseover(id, num){\n      $(`#manage_handlers_insert_variable_circle_${id}_${num}`).toggleClass(\"insert_variable_circle\");\n    },\n    manage_handlers_circle_mouseout(id, num){\n      $(`#manage_handlers_insert_variable_circle_${id}_${num}`).toggleClass(\"insert_variable_circle\");\n    },\n    insert_variable_block_off(id, num){\n      $(`#insert_variable_block${id}_${num}`).toggleClass(\"insert_variable_block\");\n    },\n    insert_variable_block_on(id, num){\n      $(`#insert_variable_block${id}_${num}`).toggleClass(\"insert_variable_block\");\n    },\n    manage_handlers_insert_variable_block_off(id, num){\n      $(`#manage_handlers_insert_variable_block${id}_${num}`).toggleClass(\"insert_variable_block\");\n    },\n    manage_handlers_insert_variable_block_on(id, num){\n      $(`#manage_handlers_insert_variable_block${id}_${num}`).toggleClass(\"insert_variable_block\");\n    },\n    set_assistance_response_index(id, num){\n      $(`#assistance_response_${id}_${num}`).focus();\n      this.assistance_response_id = id;\n      this.assistance_response__val_index = num;\n      this.add_to_insert_slot_variable_options();\n    },\n    manage_handlers_set_assistance_response_index(id, num, ind){\n      $(`#manage_handlers_assistance_response_${id}_${num}`).focus();\n      this.manage_handlers_ind =  ind; \n      this.manage_handlers_assistance_response_id = id;\n      this.manage_handlers_assistance_response__val_index = num;\n      this.add_to_insert_slot_variable_options();\n    },\n    add_to_insert_slot_variable_options(){\n      const temp1 = []\n      const temp = this.slots.map(slot=>{return slot.slot}).filter(item => {return item !=''});\n      if(Boolean(this.webhook_variable)){temp1.push('$' + this.webhook_variable);}\n      function mergeNoDuplicates(...arrays) {\n        let mergedArray = [];\n        arrays.forEach(array => {\n            mergedArray = [...mergedArray, ...array]\n        });\n        return [...new Set([...mergedArray])];\n      }\n      this.insert_slot_variable_options = mergeNoDuplicates(temp, temp1,  this.slot_variable);\n    },\n    insert_slot_variable_to_assistance_response(variable){\n      var id = this.assistance_response_id;\n      var num = this.assistance_response__val_index;\n      $(`#assistance_response_${id}_${num}`).focus();\n      var vm = this;\n      var cursorPos = $(`#assistance_response_${id}_${num}`).prop('selectionStart');\n      var v = $(`#assistance_response_${id}_${num}`).val();\n      var textBefore = v.substring(0,  cursorPos );\n      var textAfter  = v.substring( cursorPos, v.length );\n      // $('#assistance_response_'+ id + '_' + num).val( textBefore+ am +textAfter );\n      this.assistant_response[id].values[num] = textBefore +'{' + variable +'}' + textAfter;\n      vm.$set(vm.assistant_response, id, vm.assistant_response[id]);\n  \n    },\n    manage_handlers_insert_slot_variable_to_assistance_response(variable){\n      var ind = this.manage_handlers_ind;\n      var id = this.manage_handlers_assistance_response_id;\n      var num = this.manage_handlers_assistance_response__val_index;\n      $(`#manage_handlers_assistance_response_${id}_${num}`).focus();\n      var vm = this;\n      var cursorPos = $(`#manage_handlers_assistance_response_${id}_${num}`).prop('selectionStart');\n      var v = $(`#manage_handlers_assistance_response_${id}_${num}`).val();\n      var textBefore = v.substring(0,  cursorPos );\n      var textAfter  = v.substring( cursorPos, v.length );\n      // $('#manage_handlers_assistance_response_'+ id + '_' + num).val( textBefore+ am +textAfter );\n      this.manage_handlers[ind].responses[id].values[num] = textBefore +'{' + variable +'}' + textAfter;\n      vm.$set(vm.manage_handlers, ind, vm.manage_handlers[ind]);\n  \n    },\n    add_remove_to_manage_handler_list(func, ind){\n      if(func === 'add'){\n        this.manage_handlers.push({\n          id:  Date.now(),\n          node_type: \"event_handler\",\n          name:\"\",\n          triggers: [\n            {\n              \"trigger_type\": \"\",\n              \"trigger_value\": \"\"\n            }\n          ],\n          responses: [],\n          parent_node: this.node_id,\n          previous_node: \"\",\n          next_step: {\n            \"behavior\": \"skip_all_slots\",\n            \"selector\": null,\n            \"node_id\": null\n          },\n          event_name: \"generic\"\n        });\n      }else if(func === 'remove'){\n        this.manage_handlers.splice(ind, 1);\n      }\n    },\n    set_webhook_return_variable(webhook_id){\n      this.webhook_variable = this.webhook_list.filter(id=>{return id.id == webhook_id})[0].name.replace(/\\s+/g, \"_\");\n    },\n    load_saved_dialog_tree(){\n      this.spinnerOn = true;\n      axios\n        .post(\n          api_calls.form_automation_dialog_tree(),\n          {\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            company_name: this.$session.get(\"UserInformation\").company_name,\n            is_get: true,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          this.spinnerOn = false;\n          if (response.data.MSG == \"Node structure Received Successfully\") {\n            this.data = new Tree(response.data.node_structure[0].nodestructure);\n            this.get_nodes_list(this.data);\n          } else if (response.data.MSG == \"Node Structure Does Not Exists\") {\n            Swal({\n              title: \"Create a Dialog Tree\",\n              text: \"Start by Adding Nodes\",\n              type: \"info\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n          } else {\n            Swal({\n              text: \"Internal Server Error\",\n              toast: true,\n              position: \"top-end\",\n              type: \"error\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n          }\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    load_webhook(){\n      this.spinnerOn = true;\n      axios\n        .post(\n          api_calls.form_automation_webhook_details(),\n          {\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            company_name: this.$session.get(\"UserInformation\").company_name,\n            is_get: true,\n            page_no: 1,\n            per_page: 40,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          this.spinnerOn = false;\n          this.webhook_list = [];\n          if (response.data.MSG === \"Webhook Details Received Successfully\") {\n            this.is_webhook_details = true;\n            for (var i in response.data.webhook[0].webhook) {\n              this.webhook_list.push(response.data.webhook[0].webhook[i]);\n            }\n          } else if (response.data.MSG === \"Webhook Details Does not Exists\") {\n            this.is_webhook_details = false;\n            this.webhook_id = null;\n          } else {\n            Swal({\n              type: \"error\",\n              toast: true,\n              position: \"top-end\",\n              text: \"Internal Server Error\",\n              timer: 2000,\n            });\n          }\n        })\n        .catch((e) => {\n          console.log(e);\n          this.spinnerOn = false;\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    load_intent(){\n      this.spinnerOn = true;\n      axios\n        .post(\n          api_calls.form_automation_save_intent_example(),\n          {\n            is_get: true,\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            company_name: this.$session.get(\"UserInformation\").company_name,\n            email: this.$session.get(\"UserInformation\").email,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.$session.get(\"UserInformation\").tokens,\n            page_no: 1,\n            per_page: 40,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          this.spinnerOn = false;\n          if (response.status == 200) {\n            this.trigger_options_intent = [];\n            for (var i = 0; i < response.data.data.length; i++) {\n              this.trigger_options_intent.push(response.data.data[i].Intent);\n            }\n          }\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    load_entity(){\n      this.spinnerOn = true;\n      axios\n        .post(\n          api_calls.form_automation_add_entity(),\n          {\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            company_name: this.$session.get(\"UserInformation\").company_name,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            email: this.$session.get(\"UserInformation\").email,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.$session.get(\"UserInformation\").tokens,\n            subscription: this.$session.get(\"UserInformation\").subscription,\n            is_get_entity: true,\n            page_no: 1,\n            per_page: 40,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          this.spinnerOn = false;\n          if (response.data.MSG == \"Entity Data Exists\") {\n            this.entity_list = [];\n            this.trigger_options_entity_values = [];\n            this.trigger_options_entity = [];\n            for (var i = 0; i < response.data.entity_names.length; i++) {\n              this.entity_list.push(response.data.entity_names[i].entity);\n              this.trigger_options_entity_values.push(\n                response.data.entity_names[i]\n              );\n              this.trigger_options_entity.push(\n                response.data.entity_names[i].entity\n              );\n            }\n          } else if (response.data.MSG == \"Entity Does not Exists\") {\n            Swal({\n              text: \"You should add some Entities first\",\n              toast: true,\n              position: \"top-end\",\n              type: \"warning\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n          }\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    load_templates() {\n      this.spinnerOn = true;\n      axios\n        .post(\n          api_calls.template_promotional_email(),\n          {\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            company_name: this.$session.get(\"UserInformation\").company_name,\n            is_get: true,\n            is_notification: true,\n            page_no: 1,\n            per_page: 40\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`\n            }\n          }\n        )\n        .then(response => {\n          this.spinnerOn = false;\n          if (response.data != null) {\n            if (response.data === \"DB OPERATION UNSUCCESSFUL\") {\n              this.notifications_notify_template_list = [];\n              return;\n            }\n            this.notifications_notify_template_list = response.data.data;\n          }\n        })\n        .catch(e => {\n          this.spinnerOn = false;\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    check_slot_value_use_in_response(response){\n      if(Boolean(response.includes('{'))){\n        return true\n      }else{\n        return false\n      }\n    },\n    visible_try_bot() {\n      if (this.load_bot_preview) {\n        this.load_bot_preview = false;\n      } else {\n        this.load_bot_preview = true;\n      }\n    },\n    is_entity_type_sys_pattern(trigger_value) {\n      if (\n        this.trigger_options_entity_values.filter((item) => {\n          return item.entity == trigger_value;\n        })[0].type === \"pattern\" ||\n        this.trigger_options_entity_values.filter((item) => {\n          return item.entity == trigger_value;\n        })[0].type === \"system\"\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    entity_value_options(trigger_value) {\n      var temp = [];\n      temp = this.trigger_options_entity_values\n        .filter((item) => {\n          return item.entity == trigger_value;\n        })[0]\n        .values.map((val) => {\n          return val.value;\n        });\n      return temp;\n    },\n    check_image_url(url) {\n      if (this.reg_image.test(url) === true) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    check_video_url(url) {\n      if (this.reg_url.test(url) === true) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    search_webhook(query) {\n      if (query != \"\") {\n        axios\n          .post(\n            api_calls.form_automation_webhook_details(),\n            {\n              company_id: this.companyid,\n              company_name: this.companyname,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              email: this.$session.get(\"UserInformation\").email,\n              token: this.$session.get(\"UserInformation\").tokens,\n              subscription: \"Platinum\",\n              is_search: true,\n              search_term: this.search_name,\n              per_page: 40,\n              page_no: 1,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            this.spinnerOn = false;\n            if (response.data.MSG === \"Webhook Details Received Successfully\") {\n              this.webhook_list = [];\n              this.is_webhook_details = true;\n              for (var i in response.data.webhook[0].webhook) {\n                this.webhook_list.push(response.data.webhook[0].webhook[i]);\n              }\n            } else if (response.data.MSG === \"Searched webhook not found\") {\n              Swal({\n                type: \"warning\",\n                text: \"Searched webhook not found\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 3000,\n              });\n            } else {\n              Swal({\n                text: \"Internal Server Error\",\n                toast: true,\n                position: \"top-end\",\n                type: \"warning\",\n                showConfirmButton: false,\n                timer: 2000,\n              });\n            }\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      }\n    },\n    search_intent_entity(trigger_type,query) {\n      // if(query == \"\"){\n      //   this.trigger_options_intent = [];\n      //   this.trigger_options_entity = [];\n      // }\n      if (this.is_root || trigger_type  === 'intent') {\n        if (query != \"\") {\n          this.is_loading = true;\n          axios\n            .post(\n              api_calls.form_automation_save_intent_example(),\n              {\n                company_id: this.$session.get(\"UserInformation\").company_id,\n                company_name: this.$session.get(\"UserInformation\").company_name,\n                license_key: this.$session.get(\"UserInformation\").license_key,\n                email: this.$session.get(\"UserInformation\").email,\n                token: this.$session.get(\"UserInformation\").tokens,\n                subscription: \"Platinum\",\n                is_search: true,\n                search_key: query,\n                page_no: 1,\n                per_page: 40,\n              },\n              {\n                headers: {\n                  Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                },\n              }\n            )\n            .then((response) => {\n              this.spinnerOn = false;\n              if (response.data.MSG == \"No Results Found\") {\n                // toastr.error(\"No Results Found\");\n                Swal({\n                  text: \"No Results Found\",\n                  toast: true,\n                  position: \"top-end\",\n                  type: \"warning\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n              } else if (\n                response.data.MSG != \"Internal Server Error\" &&\n                response.data.MSG != \"No Intents Found\"\n              ) {\n                this.trigger_options_intent = [];\n                if (response.data != \"token invalid\") {\n                  for (var i = 0; i < response.data.ResponseList.length; i++) {\n                    this.trigger_options_intent.push(\n                      response.data.ResponseList[i].Intent\n                    );\n                  }\n                }\n              } else if (response.data == \"Internal Server Error\") {\n                // toastr.error(\"Intrnal Server Error\");\n                Swal({\n                  text: \"Internal Server Error\",\n                  toast: true,\n                  position: \"top-end\",\n                  type: \"error\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n              } else {\n                // toastr.error(\"Intrnal Server Error\");\n                Swal({\n                  text: \"Internal Server Error\",\n                  toast: true,\n                  position: \"top-end\",\n                  type: \"error\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n              }\n            })\n            .catch((e) => {\n              if (\n                e.response.status === 410 ||\n                e.response.status === 440 ||\n                e.response.status === 409\n              ) {\n                this.$root.$emit(\"Session_Expired\", e.response.data);\n              }\n            });\n          this.is_loading = false;\n        }\n        else {\n          this.load_intent();\n        }\n      } else if(trigger_type  === 'entity') {\n        if (query != \"\") {\n          this.is_loading = true;\n          axios\n            .post(\n              api_calls.form_automation_add_entity(),\n              {\n                company_id: this.$session.get(\"UserInformation\").company_id,\n                company_name: this.$session.get(\"UserInformation\").company_name,\n                license_key: this.$session.get(\"UserInformation\").license_key,\n                email: this.$session.get(\"UserInformation\").email,\n                token: this.$session.get(\"UserInformation\").tokens,\n                subscription: \"Platinum\",\n                is_search: true,\n                search_key: query,\n                page_no: 1,\n                per_page: 40,\n              },\n              {\n                headers: {\n                  Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                },\n              }\n            )\n            .then((response) => {\n              this.spinnerOn = false;\n              if (response.data.MSG == \"Entities Search Successfully\") {\n                this.trigger_options_entity = [];\n                this.trigger_options_entity_values = [];\n                for (var i = 0; i < response.data.entities_search.length; i++) {\n                  this.trigger_options_entity_values.push(\n                    response.data.entities_search[i]\n                  );\n                  this.trigger_options_entity.push(\n                    response.data.entities_search[i].entity\n                  );\n                }\n              } else if (response.data.MSG == \"Entity Does not Exists\") {\n                Swal({\n                  text: \"No Results Found\",\n                  toast: true,\n                  position: \"top-end\",\n                  type: \"warning\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n              } else {\n                // toastr.error(\"Intrnal Server Error\");\n                Swal({\n                  text: \"Internal Server Error\",\n                  toast: true,\n                  position: \"top-end\",\n                  type: \"error\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n              }\n            })\n            .catch((e) => {\n              if (\n                e.response.status === 410 ||\n                e.response.status === 440 ||\n                e.response.status === 409\n              ) {\n                this.$root.$emit(\"Session_Expired\", e.response.data);\n              }\n            });\n          this.is_loading = false;\n        }\n        else {\n          this.load_entity();\n        }\n      }\n    },\n\n    search_entity(query) {\n      if (query != \"\") {\n        this.is_loading = true;\n        axios\n          .post(\n            api_calls.form_automation_add_entity(),\n            {\n              company_id: this.$session.get(\"UserInformation\").company_id,\n              company_name: this.$session.get(\"UserInformation\").company_name,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              email: this.$session.get(\"UserInformation\").email,\n              token: this.$session.get(\"UserInformation\").tokens,\n              subscription: \"Platinum\",\n              is_search: true,\n              search_key: query,\n              page_no: 1,\n              per_page: 40,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            this.spinnerOn = false;\n            if (response.data.MSG == \"Entities Search Successfully\") {\n              this.entity_list = [];\n              for (var i = 0; i < response.data.entities_search.length; i++) {\n                this.entity_list.push(response.data.entities_search[i].entity);\n              }\n            } else if (response.data.MSG == \"Entity Does not Exists\") {\n              Swal({\n                text: \"No Results Found\",\n                toast: true,\n                position: \"top-end\",\n                type: \"warning\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            } else {\n              // toastr.error(\"Intrnal Server Error\");\n              Swal({\n                text: \"Internal Server Error\",\n                toast: true,\n                position: \"top-end\",\n                type: \"error\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            }\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n        this.is_loading = false;\n      } else {\n        this.load_entity();\n      }\n    },\n    search_for_entity_has_validation(query) {\n      if (query != \"\") {\n        axios\n          .post(\n            api_calls.form_automation_add_entity(),\n            {\n              company_id: this.$session.get(\"UserInformation\").company_id,\n              company_name: this.$session.get(\"UserInformation\").company_name,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              email: this.$session.get(\"UserInformation\").email,\n              token: this.$session.get(\"UserInformation\").tokens,\n              subscription: \"Platinum\",\n              is_validation_entity: true,\n              entity: query,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            this.spinnerOn = false;\n            if (response.data.MSG == \"Entity has validation\") {\n              this.is_validation_entity = true;\n            } else if (response.data.MSG == \"Entity not has validation\") {\n              this.is_validation_entity = false;\n            }else {\n              this.is_validation_entity = false;\n            }\n          })\n          .catch((e) => {\n            this.is_validation_entity = false;\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      }else{\n        this.is_validation_entity = false;\n      }\n    },\n    search_template_name(query){\n      if (query != \"\") {\n        this.is_loading = true;\n        axios\n          .post(\n            api_calls.template_promotional_email(),\n            {\n              company_id: this.$session.get(\"UserInformation\").company_id,\n              company_name: this.$session.get(\"UserInformation\").company_name,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              email: this.$session.get(\"UserInformation\").email,\n              token: this.$session.get(\"UserInformation\").tokens,\n              subscription: \"Platinum\",\n              is_search: true,\n              is_notification: true,\n              search_key: query,\n              page_no: 1,\n              per_page: 40,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            this.spinnerOn = false;\n            if (response.data.MSG == \"Template Search Successfully\") {\n              this.notifications_notify_template_list = [];\n              for (var i = 0; i < response.data.template_search.length; i++) {\n                this.notifications_notify_template_list.push(response.data.template_search[i]);\n              }\n            } else if (response.data.MSG == \"Template Does not Exists\") {\n              Swal({\n                text: \"No Results Found\",\n                toast: true,\n                position: \"top-end\",\n                type: \"warning\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            } else {\n              Swal({\n                text: \"Internal Server Error\",\n                toast: true,\n                position: \"top-end\",\n                type: \"error\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            }\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n        this.is_loading = false;\n      } else {\n        this.load_templates();\n      }\n    },\n    manage_handlers_arrange_ids_function(ind){\n      if (this.manage_handlers[ind].responses != []) {\n        for (var i in this.assistant_response) {\n          this.manage_handlers[ind].responses[i].id = i.toString();\n        }\n      }\n    },\n    arrange_ids_function() {\n      //For responses rewrite ids\n      if (this.assistant_response != []) {\n        for (var i in this.assistant_response) {\n          this.assistant_response[i].id = i.toString();\n        }\n      }\n      //For slots rewrite ids\n      if (this.slots != []) {\n        for (var i in this.slots) {\n          this.slots[i].responses = [];\n          var temp = this.slots[i].slot;\n          for (var j in this.assistant_response) {\n            if (this.assistant_response[j].recognizes == temp) {\n              this.slots[i].responses.push(this.assistant_response[j].id);\n            }\n          }\n        }\n      }\n    },\n    arrange_ids_function_for_notification(){\n      //For responses rewrite ids\n      if (this.assistant_response != []) {\n        for (var i in this.assistant_response) {\n          this.assistant_response[i].id = i.toString();\n        }\n      }\n      //For slots rewrite ids\n      if (this.notifications.responses != []) {\n          this.notifications.responses = [];\n          for (var j in this.assistant_response) {\n            if (this.assistant_response[j].recognizes == \"successful\" || \n              this.assistant_response[j].recognizes == \"unsuccessful\") {\n                this.notifications.responses.push(this.assistant_response[j].id);\n            }\n          }\n      }\n    },\n    get_nodes_list(oldNode) {\n      if (oldNode.children && oldNode.children.length > 0) {\n        for (var i = 0, len = oldNode.children.length; i < len; i++) {\n          oldNode.children[i].is_root = true;\n          this.nodes_list.push([{\n            id: oldNode.children[i].id,\n            name: oldNode.children[i].name,\n          }]);\n          this.add_children_node_name(oldNode.children[i],i)\n        }\n      }\n     },\n    add_children_node_name(childNode, indx){\n      if (childNode.children && childNode.children.length > 0) {\n        for (var i = 0, len = childNode.children.length; i < len; i++) {\n          childNode.children[i].is_root = false;\n          this.nodes_list[indx].splice(indx,0,{\n            id: childNode.children[i].id,\n            name: childNode.children[i].name,\n          });\n          this.add_children_node_name(childNode.children[i],indx);\n        }\n      }\n    },\n    drop(node, src, target) {\n      // console.log(node, src, target);\n      this.pushNewTree();\n    },\n    dropAfter(node, src, target) {\n      // console.log(node, src, target);\n      this.pushNewTree();\n    },\n    dropBefore(node, src, target) {\n      // console.log(node, src, target);\n      this.pushNewTree();\n    },\n    close_addnodemodal(){\n      Swal.fire({\n        title: \"Are you sure?\",\n        text: \"If you have made any changes, please save them, else they will not be reflected!\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#3085d6\",\n        cancelButtonColor: \"#d33\",\n        confirmButtonText: \"Save\",\n        cancelButtonText: \"Discard\",\n      }).then((result) => {\n        if (result.value) {\n          if(this.is_show_edit){\n            this.editNode();\n          }else{\n            this.addNode();\n          }\n        }else if (result.dismiss === \"cancel\"){\n          $(\"#addnodemodal\").modal(\"hide\");\n          this.empty_variable();\n        }\n      });\n    },\n    onDel(node) {\n      if (this.new_child_node) {\n        Swal.fire({\n          title: \"Are you sure?\",\n          text: \"If you have made any changes, please save them, else they will not be reflected!\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonColor: \"#3085d6\",\n          cancelButtonColor: \"#d33\",\n          confirmButtonText: \"Save\",\n          cancelButtonText: \"Discard\",\n        }).then((result) => {\n          if (result.value) {\n            if(this.is_show_edit){\n              this.editNode();\n            }else{\n              this.addNode();\n            }\n          }else if (result.dismiss === \"cancel\"){\n            $(\"#addnodemodal\").modal(\"hide\");\n            var new_nodes = this.nodes_list.filter(\n              (select) => select.id !== node.id\n            );\n            this.nodes_list = new_nodes;\n            this.new_child_node = false;\n            node.remove();\n            this.empty_variable();\n          }\n        });\n      } else {\n          Swal.fire({\n            title: \"Are you sure?\",\n            text: \"You won't be able to revert this!\",\n            type: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#3085d6\",\n            cancelButtonColor: \"#d33\",\n            confirmButtonText: \"Yes, delete!!\",\n          }).then((result) => {\n            if (result.value) {\n              var new_nodes = this.nodes_list.filter(\n                (select) => select.id !== node.id\n              );\n              this.nodes_list = new_nodes;\n              node.remove();\n              var vm = this;\n              _dfs(vm.data);\n              function _dfs(oldNode) {\n                if (oldNode.children && oldNode.children.length > 0) {\n                  for (var i = 0, len = oldNode.children.length; i < len; i++) {\n                    if (node.id == oldNode.children[i].next_step.node_id) {\n                      oldNode.children[i].next_step.behavior = \"wait_for_reply\";\n                      oldNode.children[i].next_step.node_id = null;\n                      oldNode.children[i].next_step.selector = \"wait_for_user_input\";\n                    }\n                    _dfs(oldNode.children[i]);\n                  }\n                }\n              }\n              this.pushNewTree(\"deletenode\");\n              this.empty_variable();\n            }\n          });\n        }\n      // this.empty_variable();\n    },\n\n    onAddNode(params) {\n      this.child_node = params;\n      this.empty_variable();\n      this.is_show_edit = true;\n      this.new_child_node = true;\n      // Node id is important, check how we are adding childnode in editNode()\n      this.node_id = params.id;\n      this.node_name = params.name;\n      $(\"#addnodemodal\").modal(\"show\");\n    },\n    change_root() {\n      this.is_root = true;\n    },\n    onClick(params) {\n      var new_obj = JSON.parse(JSON.stringify({\n        triggers:params.triggers,\n        assistant_response:params.responses,\n        slots:params.slots != null ? params.slots : [],\n        notifications:params.notifications != null ? params.notifications : {\n        \"notify\": [\n            {\n                \"type\": \"\",\n                \"slot\": \"\",\n                \"template_id\": \"\",\n                \"template_name\": \"\"\n            }\n        ],\n        \"responses\": []\n         },\n        manage_handlers:params.manage_handlers != null ? params.manage_handlers : [],\n        webhook_mapping:params.webhook_mapping == null ? [] : params.webhook_mapping,\n        node_id:params.id,\n        node_name:params.name,\n        is_root:params.is_root,\n        is_slot:params.slot_setting,\n        is_notification:params.notification_enabled,\n        next_step:params.next_step,\n        save_then_assistant_should:params.next_step.behavior,\n        jump_to_node_id:params.next_step.node_id,\n        is_webhook:params.webhook_integration,\n        // webhook_id: this.is_webhook == true ? params.webhook_id : null,\n        // webhook_variable:this.webhook_id != null ? params.webhook_return_variable : \"\",\n      }));\n      // new_obj = JSON.parse(JSON.stringify(new_obj));\n      this.empty_variable();\n      this.is_show_edit = true;\n      this.node_id = new_obj.node_id;\n      this.node_name = new_obj.node_name;\n      this.is_root = new_obj.is_root;\n      this.assistant_response = new_obj.assistant_response;\n      // this.triggers = Object.assign(params.triggers);\n      this.triggers =new_obj.triggers;\n      this.slots = new_obj.slots;\n      this.is_slot = new_obj.is_slot;\n      this.is_notification = new_obj.is_notification;\n      this.notifications = new_obj.notifications;\n      this.manage_handlers = new_obj.manage_handlers;\n      this.next_step = new_obj.next_step;\n      this.save_then_assistant_should = new_obj.save_then_assistant_should;\n      this.jump_to_node_id = new_obj.jump_to_node_id === null ? \"\" : new_obj.jump_to_node_id;\n      this.is_webhook = new_obj.is_webhook;\n      this.webhook_id = this.is_webhook == true ? params.webhook_id : null,\n      this.webhook_variable = this.webhook_id != null ? params.webhook_return_variable : \"\",\n      this.webhook_mapping = new_obj.webhook_mapping;\n      // This condition is to check if root node is selected then don't let it add more than one trigger\n      // if (this.is_root) {\n      //   document.getElementById(\"add_trigger_btn\").style.display = \"none\";\n      // } else {\n      //   document.getElementById(\"add_trigger_btn\").style.display = \"block\";\n      //   this.is_root = false;\n      // }\n      this.remove_current_node_jump_name(this.nodes_list,this.node_name);\n      this.load_slot_variable();\n      $(\"#addnodemodal\").modal(\"show\");\n    },\n\n    editNode() {\n      if (this.node_name == \"\") {\n        Swal({\n          text: \"Please Enter a Node Name\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.triggers.length < 1) {\n        Swal({\n          text: \"Add atleast one condition to recognize the node\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      } else if (this.triggers.length > 0) {\n        for (let i = 0; i < this.triggers.length; i++) {\n          if (\n            this.triggers[i].trigger_value === \"\" ||\n            this.triggers[i].trigger_value === null\n          ) {\n            Swal({\n              text: \"Condition's cannot be blank\",\n              toast: true,\n              type: \"warning\",\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          }\n          if (this.triggers[i].trigger_type === \"entity\") {\n            if (\n              this.triggers[i].operand === \"\" ||\n              this.triggers[i].operand === null\n            ) {\n              Swal({\n                text: \"Condition's cannot be blank\",\n                toast: true,\n                type: \"warning\",\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n              return;\n            }\n            if (this.triggers[i].operand === \"is\") {\n              if (\n                this.triggers[i].entity_value === \"\" ||\n                this.triggers[i].entity_value === null\n              ) {\n                Swal({\n                  text: \"Condition's cannot be blank\",\n                  toast: true,\n                  type: \"warning\",\n                  position: \"top-end\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      if (this.is_slot && this.slots.length == 0) {\n        Swal({\n          text: \"Atleast add one Slot setting\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.is_slot && this.slots.length > 0) {\n        for (let l = 0; l < this.slots.length; l++) {\n          const slot = this.slots[l];\n          if(!Boolean(slot.slot)){\n            Swal({\n              text: \"Please select Entity for each slot.\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          }\n          if(!Boolean(slot.responses.length)){\n            Swal({\n              text: \"Add atleast one Response to every slot\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          }\n        }\n      }\n      if(this.manage_handlers.length > 0 && this.is_slot){\n        for (let ind = 0; ind < this.manage_handlers.length; ind++) {\n          const handler = this.manage_handlers[ind];\n          if (handler.triggers.length < 1) {\n            Swal({\n              text: \"Add atleast one condition to recognize the node in manage handler\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          } else if (handler.triggers.length > 0) {\n            for (let i = 0; i < handler.triggers.length; i++) {\n              if (\n                handler.triggers[i].trigger_value === \"\" ||\n                handler.triggers[i].trigger_value === null\n              ) {\n                Swal({\n                  text: \"Condition's cannot be blank in manage handler\",\n                  toast: true,\n                  type: \"warning\",\n                  position: \"top-end\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n                return;\n              }\n              if (handler.triggers[i].trigger_type === \"entity\") {\n                if (\n                  handler.triggers[i].operand === \"\" ||\n                  handler.triggers[i].operand === null\n                ) {\n                  Swal({\n                    text: \"Condition's cannot be blank manage handler\",\n                    toast: true,\n                    type: \"warning\",\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 5000,\n                  });\n                  return;\n                }\n                if (handler.triggers[i].operand === \"is\") {\n                  if (\n                    handler.triggers[i].entity_value === \"\" ||\n                    handler.triggers[i].entity_value === null\n                  ) {\n                    Swal({\n                      text: \"Condition's cannot be blank manage handler\",\n                      toast: true,\n                      type: \"warning\",\n                      position: \"top-end\",\n                      showConfirmButton: false,\n                      timer: 5000,\n                    });\n                    return;\n                  }\n                }\n              }\n            }\n          }\n          if (handler.responses.length < 1) {\n            Swal({\n              text: \"Add atleast one Response to handler\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          } else if (handler.responses.length > 0) {\n            for (let i = 0; i < handler.responses.length; i++) {\n              if (handler.responses[i].type === \"text\") {\n                for (let j = 0; j < handler.responses[i].values.length; j++) {\n                  if (Boolean(handler.responses[i].values[j]) === false) {\n                    Swal({\n                      text: \"Text Response cannot be empty in manage handler\",\n                      type: \"warning\",\n                      toast: true,\n                      position: \"top-end\",\n                      showConfirmButton: false,\n                      timer: 5000,\n                    });\n                    return;\n                  }\n                }\n              } else if (handler.responses[i].type === \"image\") {\n                if (Boolean(handler.responses[i].source) === false) {\n                  Swal({\n                    text: \"Image Response cannot be empty in manage handler\",\n                    type: \"warning\",\n                    toast: true,\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 5000,\n                  });\n                  return;\n                }\n                if (this.reg_image.test(handler.responses[i].source)=== false) {\n                  Swal({\n                    text: \"Please enter a valid image URL in png or jpg format only in manage handler\",\n                    type: \"warning\",\n                    toast: true,\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 8000,\n                  });\n                  return;\n                }\n              } else if (handler.responses[i].type === \"video\") {\n                if (Boolean(handler.responses[i].source) === false) {\n                  Swal({\n                    text: \"Video Response cannot be empty in manage handler\",\n                    type: \"warning\",\n                    toast: true,\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 5000,\n                  });\n                  return;\n                }\n                if (this.reg_url.test(handler.responses[i].source)=== false) {\n                  Swal({\n                    text: \"Please enter a valid video URL in manage handler\",\n                    type: \"warning\",\n                    toast: true,\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 8000,\n                  });\n                  return;\n                }\n              } else if (handler.responses[i].type === \"choices\") {\n                for (\n                  let j = 0;\n                  j < handler.responses[i].choices.length;\n                  j++\n                ) {\n                  if (\n                    Boolean(handler.responses[i].choices[j].title) ===\n                      false ||\n                    Boolean(handler.responses[i].choices[j].payload) === false\n                  ) {\n                    Swal({\n                      text: \"Choice Response cannot be empty in manage handler\",\n                      type: \"warning\",\n                      toast: true,\n                      position: \"top-end\",\n                      showConfirmButton: false,\n                      timer: 5000,\n                    });\n                    return;\n                  }\n                }\n              }\n            }\n          }          \n        }\n      }\n      if (!this.is_webhook_details) {\n        this.is_webhook = false;\n        this.webhook_mapping = {};\n      }\n      if(this.is_webhook){\n        if (!Boolean(this.webhook_id)) {\n          Swal({\n            text: \"Please select webhook name\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 5000,\n          });\n          return;\n        }\n        if (!Boolean(this.webhook_variable)) {\n          Swal({\n            text: \"Please enter webhook return variable name\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 8000,\n          });\n          return;\n        }\n        if (!Boolean(this.webhook_mapping.length)) {\n          Swal({\n            text: \"Atleast add one webhook parameter\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 8000,\n          });\n          return;\n        }else{\n          for (let index = 0; index < this.webhook_mapping.length; index++) {\n            if(!Boolean(this.webhook_mapping[index].key) || !Boolean(this.webhook_mapping[index].value)){\n              Swal({\n                text: \"Webhook parameter can not be empty\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 8000,\n              });\n              return;\n            }\n          }\n        }\n      }\n      if (this.is_notification){\n        if (this.notifications.notify[0].type == \"\" || this.notifications.notify[0].type == null) {\n          Swal({\n            text: \"Please select notification type\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 5000,\n          });\n          return;\n        }\n        if (this.notifications.notify[0].slot == \"\" || this.notifications.notify[0].slot == null) {\n          Swal({\n            text: \"Please enter variable name\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 5000,\n          });\n          return;\n        }\n        if (this.notifications.notify[0].template_name == \"\" || this.notifications.notify[0].template_name == null) {\n          Swal({\n            text: \"Please select template name\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 5000,\n          });\n          return;\n        }\n        if (this.notifications.responses.length < 1) {\n          Swal({\n            text: \"Please add responses for the notification in both cases of notification successful & unsuccessful.\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 8000,\n          });\n          return;\n        }else{\n          let check_notification_successful_response = false\n          let check_notification_unsuccessful_response = false\n          for (let l = 0; l < this.notifications.responses.length; l++) {\n            const notification_response_id = this.notifications.responses[l];\n            if (this.assistant_response[notification_response_id].condition === \"!successful\"){\n              check_notification_successful_response = true;\n            }\n            if (this.assistant_response[notification_response_id].condition === \"!unsuccessful\"){\n              check_notification_unsuccessful_response = true;\n            }\n          }\n          if(!Boolean(check_notification_successful_response)){\n            Swal({\n              text: \"Please add responses for the notification in case of notification successful.\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 8000,\n            });\n            return;\n          }else if(!Boolean(check_notification_unsuccessful_response)){\n            Swal({\n              text: \"Please add responses for the notification in case of notification unsuccessful.\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 8000,\n            });\n            return;\n          }\n        }\n      }else{\n        this.notifications = {\n          \"notify\": [\n              {\n                  \"type\": \"\",\n                  \"slot\": \"\",\n                  \"template_id\": \"\",\n                  \"template_name\": \"\"\n              }\n          ],\n          \"responses\": []\n        }\n      }\n      if (this.assistant_response.length < 1) {\n        Swal({\n          text: \"Add atleast one Response to node\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      } else if (this.assistant_response.length > 0) {\n        for (let i = 0; i < this.assistant_response.length; i++) {\n          if (this.assistant_response[i].type === \"text\") {\n            for (let j = 0; j < this.assistant_response[i].values.length; j++) {\n              if (Boolean(this.assistant_response[i].values[j]) === false) {\n                Swal({\n                  text: \"Text Response cannot be empty\",\n                  type: \"warning\",\n                  toast: true,\n                  position: \"top-end\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n                return;\n              }\n            }\n          } else if (this.assistant_response[i].type === \"image\") {\n            if (Boolean(this.assistant_response[i].source) === false) {\n              Swal({\n                text: \"Image Response cannot be empty\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n              return;\n            }\n            if (this.reg_image.test(this.assistant_response[i].source)=== false) {\n              Swal({\n                text: \"Please enter a valid image URL in png or jpg format only.\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 8000,\n              });\n              return;\n            }\n          }\n          else if (this.assistant_response[i].type === \"video\") {\n            if (Boolean(this.assistant_response[i].source) === false) {\n              Swal({\n                text: \"Video Response cannot be empty\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n              return;\n            }\n            if (this.reg_url.test(this.assistant_response[i].source)=== false) {\n              Swal({\n                text: \"Please enter a valid video URL.\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 8000,\n              });\n              return;\n            }\n          } else if (this.assistant_response[i].type === \"choices\") {\n            for (\n              let j = 0;\n              j < this.assistant_response[i].choices.length;\n              j++\n            ) {\n              if (\n                Boolean(this.assistant_response[i].choices[j].title) ===\n                  false ||\n                Boolean(this.assistant_response[i].choices[j].payload) === false\n              ) {\n                Swal({\n                  text: \"Choice Response cannot be empty\",\n                  type: \"warning\",\n                  toast: true,\n                  position: \"top-end\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      if (!this.next_step.behavior) {\n        Swal({\n          text: \"Select a Next Step for Node\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (\n        this.save_then_assistant_should == \"jump_to\" &&\n        this.jump_to_node_id == \"\"\n      ) {\n        Swal({\n          text: \"Select a Node Id to jump\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.is_slot && this.slots.length != 0) {\n        this.node_type = \"form\";\n      } else {\n        this.node_type = \"basic\";\n      }\n      var vm = this;\n      _dfs(vm.data);\n      function _dfs(oldNode) {\n        if (oldNode.children && oldNode.children.length > 0) {\n          for (var i = 0, len = oldNode.children.length; i < len; i++) {\n            if (vm.node_id == oldNode.children[i].id) {\n              oldNode.children[i].name = vm.node_name;\n              oldNode.children[i].node_name = vm.node_type + \"_\" + vm.node_name;\n              oldNode.children[i].node_type = vm.node_type;\n              oldNode.children[i].is_root = vm.is_root ? true : false;\n              oldNode.children[i].responses = vm.assistant_response;\n              oldNode.children[i].slot_setting = vm.is_slot;\n              oldNode.children[i].notification_enabled = vm.is_notification,\n              oldNode.children[i].slots = vm.is_slot ? vm.slots : null,\n              oldNode.children[i].notifications = vm.is_notification ? vm.notifications : null,\n              oldNode.children[i].manage_handlers = (vm.manage_handlers.length > 0 && vm.is_slot) ? vm.manage_handlers : null,\n              oldNode.children[i].triggers = vm.triggers;\n              oldNode.children[i].next_step = vm.next_step;\n              oldNode.children[i].webhook_id = vm.is_webhook\n                ? vm.webhook_id\n                : null;\n              oldNode.children[i].webhook_integration = vm.is_webhook;\n              oldNode.children[i].webhook_mapping = vm.is_webhook\n                ? vm.webhook_mapping\n                : null;\n              oldNode.children[i].webhook_return_variable = vm.is_webhook\n                ? vm.webhook_variable\n                : null;\n              oldNode.children[i].editNodeDisabled = true;\n            }\n            _dfs(oldNode.children[i]);\n          }\n        }\n      }\n      if (vm.new_child_node) {\n        vm.nodes_list.push({\n          id: vm.node_id,\n          name: vm.node_name,\n        });\n      }\n      if (vm.new_child_node) {\n        vm.pushNewTree(\"childnode\");\n      } else {\n        vm.pushNewTree(\"editnode\");\n      }\n      vm.new_child_node = false;\n      vm.is_show_edit = false;\n      vm.empty_variable();\n      // document.getElementById(\"add_trigger_btn\").style.display = \"block\";\n      $(\"#addnodemodal\").modal(\"hide\");\n    },\n\n    addNode() {\n      if (this.node_name == \"\") {\n        Swal({\n          text: \"Please Enter a Node Name\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.triggers.length < 1) {\n        Swal({\n          text: \"Add atleast one condition to recognize the node\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      } else if (this.triggers.length > 0) {\n        for (let i = 0; i < this.triggers.length; i++) {\n          if (\n            this.triggers[i].trigger_value === \"\" ||\n            this.triggers[i].trigger_value === null\n          ) {\n            Swal({\n              text: \"Condition's cannot be blank\",\n              toast: true,\n              type: \"warning\",\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          }\n          if (this.triggers[i].trigger_type === \"entity\") {\n            if (\n              this.triggers[i].operand === \"\" ||\n              this.triggers[i].operand === null\n            ) {\n              Swal({\n                text: \"Condition's cannot be blank\",\n                toast: true,\n                type: \"warning\",\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n              return;\n            }\n            if (this.triggers[i].operand === \"is\") {\n              if (\n                this.triggers[i].entity_value === \"\" ||\n                this.triggers[i].entity_value === null\n              ) {\n                Swal({\n                  text: \"Condition's cannot be blank\",\n                  toast: true,\n                  type: \"warning\",\n                  position: \"top-end\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      if (this.is_slot && this.slots.length == 0) {\n        Swal({\n          text: \"Atleast add one Slot setting\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.is_slot && this.slots.length > 0) {\n        for (let l = 0; l < this.slots.length; l++) {\n          const slot = this.slots[l];\n          if(!Boolean(slot.slot)){\n            Swal({\n              text: \"Please select Entity for each slot.\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          }\n          if(!Boolean(slot.responses.length)){\n            Swal({\n              text: \"Add atleast one Response to every slot\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          }\n        }\n      }\n      if(this.manage_handlers.length > 0 && this.is_slot){\n        for (let ind = 0; ind < this.manage_handlers.length; ind++) {\n          const handler = this.manage_handlers[ind];\n          if (handler.triggers.length < 1) {\n            Swal({\n              text: \"Add atleast one condition to recognize the node in manage handler\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          } else if (handler.triggers.length > 0) {\n            for (let i = 0; i < handler.triggers.length; i++) {\n              if (\n                handler.triggers[i].trigger_value === \"\" ||\n                handler.triggers[i].trigger_value === null\n              ) {\n                Swal({\n                  text: \"Condition's cannot be blank in manage handler\",\n                  toast: true,\n                  type: \"warning\",\n                  position: \"top-end\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n                return;\n              }\n              if (handler.triggers[i].trigger_type === \"entity\") {\n                if (\n                  handler.triggers[i].operand === \"\" ||\n                  handler.triggers[i].operand === null\n                ) {\n                  Swal({\n                    text: \"Condition's cannot be blank manage handler\",\n                    toast: true,\n                    type: \"warning\",\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 5000,\n                  });\n                  return;\n                }\n                if (handler.triggers[i].operand === \"is\") {\n                  if (\n                    handler.triggers[i].entity_value === \"\" ||\n                    handler.triggers[i].entity_value === null\n                  ) {\n                    Swal({\n                      text: \"Condition's cannot be blank manage handler\",\n                      toast: true,\n                      type: \"warning\",\n                      position: \"top-end\",\n                      showConfirmButton: false,\n                      timer: 5000,\n                    });\n                    return;\n                  }\n                }\n              }\n            }\n          }\n          if (handler.responses.length < 1) {\n            Swal({\n              text: \"Add atleast one Response to handler\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 5000,\n            });\n            return;\n          } else if (handler.responses.length > 0) {\n            for (let i = 0; i < handler.responses.length; i++) {\n              if (handler.responses[i].type === \"text\") {\n                for (let j = 0; j < handler.responses[i].values.length; j++) {\n                  if (Boolean(handler.responses[i].values[j]) === false) {\n                    Swal({\n                      text: \"Text Response cannot be empty in manage handler\",\n                      type: \"warning\",\n                      toast: true,\n                      position: \"top-end\",\n                      showConfirmButton: false,\n                      timer: 5000,\n                    });\n                    return;\n                  }\n                }\n              } else if (handler.responses[i].type === \"image\") {\n                if (Boolean(handler.responses[i].source) === false) {\n                  Swal({\n                    text: \"Image Response cannot be empty in manage handler\",\n                    type: \"warning\",\n                    toast: true,\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 5000,\n                  });\n                  return;\n                }\n                if (this.reg_image.test(handler.responses[i].source)=== false) {\n                  Swal({\n                    text: \"Please enter a valid image URL in png or jpg format only in manage handler.\",\n                    type: \"warning\",\n                    toast: true,\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 8000,\n                  });\n                  return;\n                }\n              } else if (handler.responses[i].type === \"video\") {\n                if (Boolean(handler.responses[i].source) === false) {\n                  Swal({\n                    text: \"Video Response cannot be empty in manage handler\",\n                    type: \"warning\",\n                    toast: true,\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 5000,\n                  });\n                  return;\n                }\n                if (this.reg_url.test(handler.responses[i].source)=== false) {\n                  Swal({\n                    text: \"Please enter a valid video URL in manage handler\",\n                    type: \"warning\",\n                    toast: true,\n                    position: \"top-end\",\n                    showConfirmButton: false,\n                    timer: 8000,\n                  });\n                  return;\n                }\n              } else if (handler.responses[i].type === \"choices\") {\n                for (\n                  let j = 0;\n                  j < handler.responses[i].choices.length;\n                  j++\n                ) {\n                  if (\n                    Boolean(handler.responses[i].choices[j].title) ===\n                      false ||\n                    Boolean(handler.responses[i].choices[j].payload) === false\n                  ) {\n                    Swal({\n                      text: \"Choice Response cannot be empty in manage handler\",\n                      type: \"warning\",\n                      toast: true,\n                      position: \"top-end\",\n                      showConfirmButton: false,\n                      timer: 5000,\n                    });\n                    return;\n                  }\n                }\n              }\n            }\n          }          \n        }\n      }\n      if (!this.is_webhook_details) {\n        this.is_webhook = false;\n        this.webhook_mapping = [];\n      }\n      if(this.is_webhook){\n        if (!Boolean(this.webhook_id)) {\n          Swal({\n            text: \"Please select webhook name\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 5000,\n          });\n          return;\n        }\n        if (!Boolean(this.webhook_variable)) {\n          Swal({\n            text: \"Please enter webhook return variable name\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 8000,\n          });\n          return;\n        }\n        if (!Boolean(this.webhook_mapping.length)) {\n          Swal({\n            text: \"Atleast add one webhook parameter\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 8000,\n          });\n          return;\n        }else{\n          for (let index = 0; index < this.webhook_mapping.length; index++) {\n            if(!Boolean(this.webhook_mapping[index].key) || !Boolean(this.webhook_mapping[index].value)){\n              Swal({\n                text: \"Webhook parameter can not be empty\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 8000,\n              });\n              return;\n            }\n          }\n        }\n      }\n      if (this.is_notification){\n        if (this.notifications.notify[0].type == \"\" || this.notifications.notify[0].type == null) {\n          Swal({\n            text: \"Please select notification type\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 5000,\n          });\n          return;\n        }\n        if (this.notifications.notify[0].slot == \"\" || this.notifications.notify[0].slot == null) {\n          Swal({\n            text: \"Please enter variable name\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 5000,\n          });\n          return;\n        }\n        if (this.notifications.notify[0].template_name == \"\" || this.notifications.notify[0].template_name == null) {\n          Swal({\n            text: \"Please select template name\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 5000,\n          });\n          return;\n        }\n        if (this.notifications.responses.length < 1) {\n          Swal({\n            text: \"Please add responses for the notification in both cases of notification successful & unsuccessful.\",\n            type: \"warning\",\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 8000,\n          });\n          return;\n        }else{\n          let check_notification_successful_response = false\n          let check_notification_unsuccessful_response = false\n          for (let l = 0; l < this.notifications.responses.length; l++) {\n            const notification_response_id = this.notifications.responses[l];\n            if (this.assistant_response[notification_response_id].condition === \"!successful\"){\n              check_notification_successful_response = true;\n            }\n            if (this.assistant_response[notification_response_id].condition === \"!unsuccessful\"){\n              check_notification_unsuccessful_response = true;\n            }\n          }\n          if(!Boolean(check_notification_successful_response)){\n            Swal({\n              text: \"Please add responses for the notification in case of notification successful.\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 8000,\n            });\n            return;\n          }else if(!Boolean(check_notification_unsuccessful_response)){\n            Swal({\n              text: \"Please add responses for the notification in case of notification unsuccessful.\",\n              type: \"warning\",\n              toast: true,\n              position: \"top-end\",\n              showConfirmButton: false,\n              timer: 8000,\n            });\n            return;\n          }\n        }\n      }else{\n        this.notifications = {\n          \"notify\": [\n              {\n                  \"type\": \"\",\n                  \"slot\": \"\",\n                  \"template_id\": \"\",\n                  \"template_name\": \"\"\n              }\n          ],\n          \"responses\": []\n        }\n      }\n      if (this.assistant_response.length < 1) {\n        Swal({\n          text: \"Add atleast one Response to node\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      } else if (this.assistant_response.length > 0) {\n        for (let i = 0; i < this.assistant_response.length; i++) {\n          if (this.assistant_response[i].type === \"text\") {\n            for (let j = 0; j < this.assistant_response[i].values.length; j++) {\n              if (Boolean(this.assistant_response[i].values[j]) === false) {\n                Swal({\n                  text: \"Text Response cannot be empty\",\n                  type: \"warning\",\n                  toast: true,\n                  position: \"top-end\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n                return;\n              }\n            }\n          } else if (this.assistant_response[i].type === \"image\") {\n            if (Boolean(this.assistant_response[i].source) === false) {\n              Swal({\n                text: \"Image Response cannot be empty\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n              return;\n            }\n            if (this.reg_image.test(this.assistant_response[i].source)=== false) {\n              Swal({\n                text: \"Please enter a valid image URL in png or jpg format only.\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 8000,\n              });\n              return;\n            }\n          } else if (this.assistant_response[i].type === \"video\") {\n            if (Boolean(this.assistant_response[i].source) === false) {\n              Swal({\n                text: \"Video Response cannot be empty\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n              return;\n            }\n            if (this.reg_url.test(this.assistant_response[i].source)=== false) {\n              Swal({\n                text: \"Please enter a valid video URL.\",\n                type: \"warning\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 8000,\n              });\n              return;\n            }\n          } else if (this.assistant_response[i].type === \"choices\") {\n            for (\n              let j = 0;\n              j < this.assistant_response[i].choices.length;\n              j++\n            ) {\n              if (\n                Boolean(this.assistant_response[i].choices[j].title) ===\n                  false ||\n                Boolean(this.assistant_response[i].choices[j].payload) === false\n              ) {\n                Swal({\n                  text: \"Choice Response cannot be empty\",\n                  type: \"warning\",\n                  toast: true,\n                  position: \"top-end\",\n                  showConfirmButton: false,\n                  timer: 5000,\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      if (!this.next_step.behavior) {\n        Swal({\n          text: \"Select a Next Step for Node\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (\n        this.save_then_assistant_should == \"jump_to\" &&\n        this.jump_to_node_id == \"\"\n      ) {\n        Swal({\n          text: \"Select a Node Id to jump\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.is_slot && this.slots.length != 0) {\n        this.node_type = \"form\";\n      } else {\n        this.node_type = \"basic\";\n      }\n      var new_triggers = this.triggers;\n      var new_assistant_response = this.assistant_response;\n      var new_slots = this.slots;\n      var webhook_mapping = this.webhook_mapping;\n      var manage_handlers = this.manage_handlers;\n      var new_next_step = this.next_step;\n      var node = new TreeNode({\n        name: this.node_name,\n        node_name: this.node_type + \"_\" + this.node_name,\n        node_type: this.node_type,\n        is_leaf: false,\n        is_root: true,\n        triggers: new_triggers,\n        responses: new_assistant_response,\n        slot_setting: this.is_slot,\n        notification_enabled: this.is_notification,\n        slots: this.is_slot ? new_slots : null,\n        notifications: this.is_notification ? this.notifications : null,\n        next_step: new_next_step,\n        webhook_integration: this.is_webhook,\n        webhook_id: this.is_webhook ? this.webhook_id : null,\n        webhook_return_variable: this.is_webhook ? this.webhook_variable : \"\",\n        webhook_mapping: this.is_webhook ? webhook_mapping : null,\n        editNodeDisabled: true,\n        manage_handlers: (manage_handlers.length > 0 && this.is_slot) ? manage_handlers : null\n        // addTreeNodeDisabled: true,\n        // addLeafNodeDisabled: true\n      });\n      if (!this.data.children) this.data.children = [];\n      this.data.addChildren(node);\n      this.nodes_list.push({\n        id: node.id,\n        name: node.name,\n      });\n      this.pushNewTree(\"addnode\");\n      this.empty_variable();\n      // document.getElementById(\"add_trigger_btn\").style.display = \"block\";\n      $(\"#addnodemodal\").modal(\"hide\");\n    },\n    empty_variable() {\n      this.node_id = \"\";\n      this.node_name = \"\";\n      this.node_type = \"\";\n      this.is_root = false;\n      this.is_slot = false;\n      this.is_notification = false;\n      this.is_webhook = false;\n      this.webhook_id = null;\n      this.webhook_variable = \"\";\n      this.webhook_mapping = [];\n      this.triggers = [\n        {\n          trigger_type: \"\",\n          trigger_value: \"\",\n        },\n      ];\n      this.assistant_response = [];\n      this.slots = [];\n      this.manage_handlers = [];\n      this.notifications = {\n        \"notify\": [\n            {\n                \"type\": \"\",\n                \"slot\": \"\",\n                \"template_id\": \"\",\n                \"template_name\": \"\"\n            }\n        ],\n        \"responses\": []\n      },\n      this.next_step = {};\n      this.save_then_assistant_should = \"\";\n      this.jump_to_node_id = \"\";\n      this.is_show_edit = false;\n      // document.getElementById(\"add_trigger_btn\").style.display = \"block\";\n    },\n    pushNewTree(from) {\n      var vm = this;\n      function _dfs(oldNode) {\n        var newNode = {};\n        for (var k in oldNode) {\n          if (k !== \"children\" && k !== \"parent\") {\n            newNode[k] = oldNode[k];\n          }\n        }\n        if (oldNode.children && oldNode.children.length > 0) {\n          newNode.children = [];\n          for (var i = 0, len = oldNode.children.length; i < len; i++) {\n            newNode.children.push(_dfs(oldNode.children[i]));\n          }\n        }\n        return newNode;\n      }\n      vm.newTree = _dfs(vm.data);\n      axios\n        .post(\n          api_calls.form_automation_dialog_tree(),\n          {\n            company_id: vm.$session.get(\"UserInformation\").company_id,\n            company_name: vm.$session.get(\"UserInformation\").company_name,\n            is_save: true,\n            node_structure: vm.newTree,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          if (response.data.MSG == \"Node Structure Saved Successfully\") {\n            if (from == \"addnode\") {\n              Swal({\n                type: \"success\",\n                text: \"Node Added Successfully\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            } else if (from == \"childnode\") {\n              Swal({\n                type: \"success\",\n                text: \"Child Node Added Successfully\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            } else if (from == \"editnode\") {\n              Swal({\n                type: \"success\",\n                text: \"Node Edited Successfully\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            } else if (from == \"deletenode\") {\n              Swal({\n                type: \"success\",\n                text: \"Node Deleted Successfully\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            } else {\n              Swal({\n                type: \"success\",\n                text: \"Dialog Updated Successfully\",\n                toast: true,\n                position: \"top-end\",\n                showConfirmButton: false,\n                timer: 5000,\n              });\n            }\n          }\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n\n    testNewTree() {\n      var vm = this;\n      function _dfs(oldNode) {\n        var newNode = {};\n        for (var k in oldNode) {\n          if (k !== \"children\" && k !== \"parent\") {\n            newNode[k] = oldNode[k];\n          }\n        }\n        if (oldNode.children && oldNode.children.length > 0) {\n          newNode.children = [];\n          for (var i = 0, len = oldNode.children.length; i < len; i++) {\n            newNode.children.push(_dfs(oldNode.children[i]));\n          }\n        }\n        return newNode;\n      }\n      vm.newTree = _dfs(vm.data);\n    },\n    remove_current_node_jump_name(arr,value){\n      let update_list = false;\n      for (let i = 0, len = arr.length; i < len; i++){\n        const found = arr[i].some(val => val.name === value)\n        if (found == true){\n          this.updated_node_list = arr[i].filter((item) => item.name !== value);\n          update_list = true;\n          break;\n        }\n      }if (update_list === false){\n        this.updated_node_list =  [];\n      }\n    },\n\n    set_next_step() {\n      this.next_step = {\n        behavior: this.save_then_assistant_should,\n        node_id:\n          this.save_then_assistant_should == \"jump_to\"\n            ? this.jump_to_node_id.toString()\n            : null,\n        selector:\n          this.save_then_assistant_should == \"jump_to\"\n            ? \"respond\"\n            : \"wait_for_user_input\",\n      };\n    },\n    add_to_triggers_list(func, index) {\n      if (func == \"add\") {\n        this.triggers.push({\n          trigger_type: \"\",\n          trigger_value: \"\",\n        });\n      } else if (func == \"remove\") {\n        this.triggers.splice(index, 1);\n      }\n      // if (this.is_root && this.triggers.length > 0) {\n      //   document.getElementById(\"add_trigger_btn\").style.display = \"none\";\n      // }\n    },\n    manage_handlers_change_trigger_value(type, index, ind) {\n      if (type === \"intent\") {\n        this.manage_handlers[ind].triggers[index].trigger_value = \"\";\n        delete this.manage_handlers[ind].triggers[index].operand;\n        delete this.manage_handlers[ind].triggers[index].entity_value;\n      } else if (type === \"entity\") {\n        this.manage_handlers[ind].triggers[index].trigger_value = \"\";\n        this.manage_handlers[ind].triggers[index].operand = \"\";\n        this.manage_handlers[ind].triggers[index].entity_value = \"\";\n      }\n    },\n    change_trigger_value(type, index) {\n      if (type === \"intent\") {\n        this.triggers[index].trigger_value = \"\";\n        delete this.triggers[index].operand;\n        delete this.triggers[index].entity_value;\n      } else if (type === \"entity\") {\n        this.triggers[index].trigger_value = \"\";\n        this.triggers[index].operand = \"\";\n        this.triggers[index].entity_value = \"\";\n      }\n    },\n    manage_handlers_change_trigger_type(type, value, index, ind){\n      if (type === \"intent\") {\n        this.manage_handlers[ind].name = '#' + value;\n        delete this.manage_handlers[ind].triggers[index].operand;\n        delete this.manage_handlers[ind].triggers[index].entity_value;\n      } else if (type === \"entity\") {\n        if(value.substring(0,1) === \"@\"){\n          this.manage_handlers[ind].name = '#' + value.substring(1,value.length);\n        }else{\n          this.manage_handlers[ind].name = '#' + value;\n        }\n        if (this.is_entity_type_sys_pattern(value)) {\n          this.manage_handlers[ind].triggers[index].operand = \"any\";\n          this.manage_handlers[ind].triggers[index].entity_value = \"\";\n        } else {\n          this.manage_handlers[ind].triggers[index].operand = \"\";\n          this.manage_handlers[ind].triggers[index].entity_value = \"\";\n        }\n      }\n    },\n    change_trigger_type(type, value, index) {\n      // @click=\"change_trigger_type(trigger.trigger_value, index)\"\n      // Here add detection of whether the value selected is intent or entity\n      // if (Boolean(value.entity)) {\n      //   this.triggers[index].trigger_type = \"entity\";\n      // } else {\n      //   this.triggers[index].trigger_type = \"intent\";\n      // }\n      if (this.is_root) {\n        this.triggers[index].trigger_type = \"intent\";\n      }\n      if (type === \"intent\") {\n        delete this.triggers[index].operand;\n        delete this.triggers[index].entity_value;\n      } else if (type === \"entity\") {\n        if (this.is_entity_type_sys_pattern(value)) {\n          this.triggers[index].operand = \"any\";\n          this.triggers[index].entity_value = \"\";\n        } else {\n          this.triggers[index].operand = \"\";\n          this.triggers[index].entity_value = \"\";\n        }\n      }\n    },\n    manage_handlers_change_trigger_entity_value(operand, index, ind) {\n      var vm = this;\n      vm.$set(vm.manage_handlers[ind].triggers, index, vm.manage_handlers[ind].triggers[index]);\n      this.manage_handlers[ind].triggers[index].entity_value = \"\";\n    },\n    change_trigger_entity_value(operand, index) {\n      var vm = this;\n      vm.$set(vm.triggers, index, vm.triggers[index]);\n      this.triggers[index].entity_value = \"\";\n    },\n    manage_handlers_set_trigger_entity_value(entity_value, index, ind) {\n      var vm = this;\n      vm.$set(vm.manage_handlers[ind].triggers, index, vm.manage_handlers[ind].triggers[index]);\n    },\n    set_trigger_entity_value(entity_value, index) {\n      var vm = this;\n      vm.$set(vm.triggers, index, vm.triggers[index]);\n    },\n    add_to_webhook_mapping(func, index) {\n      if (func == \"add\") {\n        this.webhook_mapping.push({\n          key: \"\",\n          value: \"\",\n        });\n      } else if (func == \"remove\") {\n        this.webhook_mapping.splice(index, 1);\n      }\n    },\n    // set_slot_setting(index, check_for, slot) {\n    //   this.edit_slot_index = index;\n    //   this.edit_slot_check_for = check_for;\n    //   this.edit_slot_slot_variable = slot;\n    // },\n    set_slot_entity_variable(index, entity) {\n      entity = entity.slice(1);\n      for (var i in this.slots) {\n        if (i == index) {\n          this.slots[i].slot = \"$\" + entity;\n        }\n      }\n    },\n    set_notifications_notify_template_id(template_name){\n      this.notifications.notify[0].template_id = this.notifications_notify_template_list.filter((name)=>{return name.template_name === template_name}).map((id)=> {return id.template_id})[0];\n    },\n    on_open_webhook_modal(variable) {\n      this.webhook_assistant_response = [];\n      for (var i in this.assistant_response) {\n        if (this.assistant_response[i].recognizes == variable) {\n          this.webhook_assistant_response.push(this.assistant_response[i]);\n        }\n      }\n    },\n    on_close_webhook_modal() {\n      this.webhook_assistant_response = [];\n    },\n\n    on_open_slots_modal(slot, index, check_for) {\n      this.edit_slot_index = index;\n      this.edit_slot_check_for = check_for;\n      this.edit_slot_slot_variable = slot;\n      this.unfilled_slot_assistant_response = [];\n      this.validation_slot_assistant_response = [];\n      for (var i in this.assistant_response) {\n        if (this.assistant_response[i].recognizes == slot && this.assistant_response[i].condition === \"unfilled_slot\") {\n          this.unfilled_slot_assistant_response.push(this.assistant_response[i]);\n        }\n        if (this.assistant_response[i].recognizes == slot && this.assistant_response[i].condition === \"validation_response\") {\n          this.validation_slot_assistant_response.push(this.assistant_response[i]);\n        }\n      }\n      this.search_for_entity_has_validation(check_for);\n    },\n    on_close_slots_modal() {\n      this.unfilled_slot_assistant_response = [];\n      this.validation_slot_assistant_response = [];\n      this.is_validation_entity = false;\n      this.edit_slot_index = \"\";\n      this.edit_slot_check_for = \"\";\n      this.edit_slot_slot_variable = \"\";\n    },\n    on_open_notification_modal() {\n      this.notification_successful_assistant_response = [];\n      this.notification_unsuccessful_assistant_response = [];\n      for (var i in this.assistant_response) {\n        if (this.assistant_response[i].recognizes == \"successful\") {\n          this.notification_successful_assistant_response.push(this.assistant_response[i]);\n        }\n      }\n      for (var i in this.assistant_response) {\n        if (this.assistant_response[i].recognizes == \"unsuccessful\") {\n          this.notification_unsuccessful_assistant_response.push(this.assistant_response[i]);\n        }\n      }\n    },\n    on_close_manage_handlers() {\n\n    },\n    on_close_notification_modal() {\n      this.notification_successful_assistant_response = [];\n      this.notification_unsuccessful_assistant_response = [];\n    },\n    webhook_to_assistant_response(func, webhook, index) {\n      if (func == \"remove\") {\n        index = this.assistant_response.findIndex((x) => x.id == index);\n        for (var i in this.assistant_response) {\n          if (\n            this.assistant_response[i].id == index &&\n            this.assistant_response[i].recognizes == webhook\n          ) {\n            // this.slots[this.edit_slot_index].responses.splice(this.assistant_response[i].id, 1);\n            this.assistant_response.splice(index, 1);\n          }\n        }\n      }\n      if (func == \"add\" && this.selected_response_type == \"text\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length,\n          type: this.selected_response_type,\n          condition: \"unfilled\",\n          recognizes: webhook,\n          variation: \"random\",\n          values: [\"\"],\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"image\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: \"image\",\n          condition: \"unfilled\",\n          recognizes: webhook,\n          variation: \"random\",\n          source: \"\",\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"video\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: \"video\",\n          condition: \"unfilled\",\n          recognizes: webhook,\n          variation: \"random\",\n          source: \"\",\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"choices\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: \"choices\",\n          condition: \"unfilled\",\n          recognizes: webhook,\n          variation: \"random\",\n          title: \"\",\n          description: \"\",\n          choices: [\n            {\n              title: \"\",\n              payload: \"\",\n            },\n          ],\n        });\n      }\n      this.arrange_ids_function();\n      this.on_open_webhook_modal(webhook);\n    },\n    remove_notification_to_assistant_response(index, recognizes) {\n      index = this.assistant_response.findIndex((x) => x.id == index);\n      for (var i in this.assistant_response) {\n        if (\n          this.assistant_response[i].id == index &&\n          this.assistant_response[i].recognizes == recognizes\n        ) {\n          this.assistant_response.splice(index, 1);\n        }\n      }\n      this.on_open_notification_modal();\n      this.arrange_ids_function_for_notification();\n    },\n    manage_handlers_add_to_assistant_response_list(func, ind, index) {\n      if (func == \"add\" && this.selected_response_type == \"text\") {\n        this.manage_handlers[ind].responses.push({\n          id: this.manage_handlers[ind].responses.length.toString(),\n          type: this.selected_response_type,\n          condition: false,\n          recognizes: null,\n          variation: \"random\",\n          values: [\"\"],\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"image\") {\n        this.manage_handlers[ind].responses.push({\n          id: this.manage_handlers[ind].responses.length.toString(),\n          type: this.selected_response_type,\n          condition: false,\n          recognizes: null,\n          variation: \"random\",\n          source: \"\",\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"video\") {\n        this.manage_handlers[ind].responses.push({\n          id: this.manage_handlers[ind].responses.length.toString(),\n          type: this.selected_response_type,\n          condition: false,\n          recognizes: null,\n          variation: \"random\",\n          source: \"\",\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"choices\") {\n        this.manage_handlers[ind].responses.push({\n          id: this.manage_handlers[ind].responses.length.toString(),\n          type: this.selected_response_type,\n          condition: false,\n          recognizes: null,\n          variation: \"random\",\n          title: \"\",\n          description: \"\",\n          choices: [\n            {\n              title: \"\",\n              payload: \"\",\n            },\n          ],\n        });\n      } else if (func == \"remove\") {\n        this.manage_handlers[ind].responses.splice(index, 1);\n        this.manage_handlers_arrange_ids_function(ind);\n      }\n    },\n    add_notification_successful_to_assistant_response(type) {\n      if (this.notifications.notify[0].type == \"\" || this.notifications.notify[0].type == null) {\n        Swal({\n          text: \"Select notification type first\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.notifications.notify[0].slot == \"\" || this.notifications.notify[0].slot == null) {\n        Swal({\n          text: \"Enter variable name first\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.notifications.notify[0].template_name == \"\" || this.notifications.notify[0].template_name == null) {\n        Swal({\n          text: \"Select template name first\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (this.selected_response_type == \"text\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: \"text\",\n          condition: \"!\" + type,\n          recognizes: type,\n          variation: \"random\",\n          values: [\"\"],\n        });\n      } else if (this.selected_response_type == \"image\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: \"image\",\n          condition: \"!\" + type,\n          recognizes: type,\n          variation: \"random\",\n          source: \"\",\n        });\n      } else if (this.selected_response_type == \"video\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: \"video\",\n          condition: \"!\" + type,\n          recognizes: type,\n          variation: \"random\",\n          source: \"\",\n        });\n      } else if (this.selected_response_type == \"choices\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: \"choices\",\n          condition: \"!\" + type,\n          recognizes: type,\n          variation: \"random\",\n          title: \"\",\n          description: \"\",\n          choices: [\n            {\n              title: \"\",\n              payload: \"\",\n            },\n          ],\n        });\n      }\n      this.notifications.responses.push(\n        (this.assistant_response.length - 1).toString()\n      );\n      this.on_open_notification_modal();\n    },\n    remove_slot_to_assistant_response(index, slot, from) {\n      if (from == \"slotmodal\") {\n        index = this.assistant_response.findIndex((x) => x.id == index);\n        for (var i in this.assistant_response) {\n          if (\n            this.assistant_response[i].id == index &&\n            this.assistant_response[i].recognizes == slot\n          ) {\n            // this.slots[this.edit_slot_index].responses.splice(this.assistant_response[i].id, 1);\n            this.assistant_response.splice(index, 1);\n          }\n        }\n        this.on_open_slots_modal(slot, this.edit_slot_index);\n      } else {\n        var id = index;\n        for (var i in this.assistant_response) {\n          if (\n            this.assistant_response[i].id == id &&\n            this.assistant_response[i].recognizes == slot\n          ) {\n            // this.slots[index].responses.splice(this.assistant_response[i].id, 1);\n            this.assistant_response.splice(this.assistant_response[i], 1);\n          }\n        }\n      }\n      this.arrange_ids_function();\n    },\n    add_slot_to_assistant_response(from, index, check_for, slot, response, condition_type) {\n\n      if (slot == \"\" || slot == null) {\n        Swal({\n          text: \"Add Entity first\",\n          type: \"warning\",\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 5000,\n        });\n        return;\n      }\n      if (from == \"text\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: \"text\",\n          condition: \"unfilled_slot\",\n          recognizes: slot,\n          variation: \"random\",\n          values: [response],\n        });\n        // document.getElementById(\"checkfocus\").disabled = true;\n        this.slots[index].responses = [];\n        this.slots[index].responses.push(\n          (this.assistant_response.length - 1).toString()\n        );\n        this.on_open_slots_modal(\n          this.edit_slot_slot_variable,\n          this.edit_slot_index\n        );\n      }\n      if (from == \"Addbtn\") {\n        if (this.selected_response_type == \"text\") {\n          this.assistant_response.push({\n            id: this.assistant_response.length.toString(),\n            type: \"text\",\n            condition: condition_type,\n            recognizes: slot,\n            variation: \"random\",\n            values: [\"\"],\n          });\n        } else if (this.selected_response_type == \"image\") {\n          this.assistant_response.push({\n            id: this.assistant_response.length.toString(),\n            type: \"image\",\n            condition: condition_type,\n            recognizes: slot,\n            variation: \"random\",\n            source: \"\",\n          });\n        } else if (this.selected_response_type == \"video\") {\n          this.assistant_response.push({\n            id: this.assistant_response.length.toString(),\n            type: \"video\",\n            condition: condition_type,\n            recognizes: slot,\n            variation: \"random\",\n            source: \"\",\n          });\n        } else if (this.selected_response_type == \"choices\") {\n          this.assistant_response.push({\n            id: this.assistant_response.length.toString(),\n            type: \"choices\",\n            condition: condition_type,\n            recognizes: slot,\n            variation: \"random\",\n            title: \"\",\n            description: \"\",\n            choices: [\n              {\n                title: \"\",\n                payload: \"\",\n              },\n            ],\n          });\n        }\n        this.slots[this.edit_slot_index].responses.push(\n          (this.assistant_response.length - 1).toString()\n        );\n        this.on_open_slots_modal(\n          this.edit_slot_slot_variable,\n          this.edit_slot_index\n        );\n      }\n    },\n    add_to_slots_list(func, index, response_id) {\n      if (func == \"add\") {\n        this.slots.push({\n          id: this.slots.length.toString(),\n          check_for: \"\",\n          slot: \"\",\n          responses: [],\n        });\n      } else if (func == \"remove\") {\n        this.slots.splice(index, 1);\n        for(var i in response_id){\n          for(var j in this.assistant_response){\n            if (response_id[i] == this.assistant_response[j].id){\n              this.assistant_response.splice(j, 1);\n            }\n          }\n        }\n        this.arrange_ids_function();\n        if(this.slots !=[]){\n          for(var i in this.slots){\n            this.slots[i].id = i.toString();\n          }\n        }\n      }\n    },\n    manage_handlers_select_response_variation(index, variation, ind) {\n      this.manage_handlers[ind].responses[index].variation = variation;\n    },\n    select_response_variation(index, variation) {\n      this.assistant_response[index].variation = variation;\n    },\n    manage_handler_add_to_assistant_response_text_list(func, index, ind, num) {\n      if (func == \"add\") {\n        this.manage_handlers[ind].responses[index].values.push(\"\");\n      } else if (func == \"remove\") {\n        this.manage_handlers[ind].responses[index].values.splice(num, 1);\n      }\n    },\n    add_to_assistant_response_text_list(func, index, num) {\n      if (func == \"add\") {\n        this.assistant_response[index].values.push(\"\");\n      } else if (func == \"remove\") {\n        this.assistant_response[index].values.splice(num, 1);\n      }\n    },\n    manage_handlers_add_to_assistant_response_choice_list(func, index, ind, num) {\n      if (func == \"add\") {\n        this.manage_handlers[ind].responses[index].choices.push({\n          title: \"\",\n          payload: \"\",\n        });\n      } else if (func == \"remove\") {\n        this.manage_handlers[ind].responses[index].choices.splice(num, 1);\n      }\n    },\n    add_to_assistant_response_choice_list(func, index, num) {\n      if (func == \"add\") {\n        this.assistant_response[index].choices.push({\n          title: \"\",\n          payload: \"\",\n        });\n      } else if (func == \"remove\") {\n        this.assistant_response[index].choices.splice(num, 1);\n      }\n    },\n    add_to_assistant_response_list(func, index) {\n      if (func == \"add\" && this.selected_response_type == \"text\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: this.selected_response_type,\n          condition: false,\n          recognizes: null,\n          variation: \"random\",\n          values: [\"\"],\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"image\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: this.selected_response_type,\n          condition: false,\n          recognizes: null,\n          variation: \"random\",\n          source: \"\",\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"video\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: this.selected_response_type,\n          condition: false,\n          recognizes: null,\n          variation: \"random\",\n          source: \"\",\n        });\n      } else if (func == \"add\" && this.selected_response_type == \"choices\") {\n        this.assistant_response.push({\n          id: this.assistant_response.length.toString(),\n          type: this.selected_response_type,\n          condition: false,\n          recognizes: null,\n          variation: \"random\",\n          title: \"\",\n          description: \"\",\n          choices: [\n            {\n              title: \"\",\n              payload: \"\",\n            },\n          ],\n        });\n      } else if (func == \"remove\") {\n        this.assistant_response.splice(index, 1);\n        this.arrange_ids_function();\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\" rel=\"stylesheet/less\">\n.multiselect .multiselect__tags {\n  min-height: 40px !important;\n  max-height: 40px !important;\n}\n.multiselect {\n  min-height: 40px !important;\n  max-height: 40px !important;\n}\n.multiselect__single {\n  overflow: hidden;\n  white-space: nowrap;\n  padding-right: 5px !important;\n}\n.vtl-node-main {\n  border: 0.5px solid #a5a5a5;\n  opacity: 1;\n  border-radius: 3px;\n  padding: 0 !important;\n  width: 350px;\n}\n.vtl-node-main .vtl-caret {\n  margin-left: 0px !important;\n  padding-left: 6px !important;\n}\n.vtl-node-content {\n  width: 230px !important;\n  padding: 8px 0px 8px 16px;\n  margin-left: 8px;\n  border-left: 0.5px solid #a5a5a5;\n}\n.vtl-node-main .vtl-operation * {\n  padding-right: 3px !important;\n}\n.vtl-border {\n  margin-top: 0px !important;\n  height: 10px !important;\n}\n.vtl-up {\n  margin-top: 0px !important;\n}\n.vtl-bottom {\n  height: 0px !important;\n  margin-top: 0px !important;\n}\n.vtl {\n  .vtl-drag-disabled {\n    background-color: #d0cfcf;\n    &:hover {\n      background-color: #d0cfcf;\n    }\n  }\n  .vtl-disabled {\n    background-color: #d0cfcf;\n  }\n}\n</style>\n<style lang=\"scss\" rel=\"stylesheet/less\" scoped>\n.form-control{\n  color: #545864 !important;\n}\n.modal-content{\n  border: 0.12rem solid !important;\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19) !important;\n  // transition: box-shadow 0.5s ease-in-out !important;\n}\na:hover {\n  color: #192765;\n}\na {\n   color: #273679;\n}\n.custom-select { \n  background: none !important;\n  background-image: linear-gradient(45deg, transparent 50%, #999 60%), linear-gradient(135deg, #999 40%, transparent 50%) !important;\n  background-position: calc(100% - 19px) 15px, calc(100% - 13px) 15px, 100% 0 !important;\n  background-size: 6px 6px, 6px 6px !important;\n  background-repeat: no-repeat !important;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n.unit { \n  position: absolute !important; \n  display: block !important; \n  left: 27px !important; \n  top: 9px !important; \n  z-index: 9 !important;\n  color: #545864 !important; \n  font-size: 14px !important;\n}\n.choice-label {\n  font-size: 14px !important;\n}\n.response-variations {\n  font-size: 14px !important;\n}\n.sub_heading {\n  font-size: 16px !important;\n  font-weight: 500 !important;\n}\n.modal-xl {\n  max-width: 1140px;\n}\n.modal-lg {\n  max-width: 1000px;\n}\n.custom-button-box {\n  border: 0.5px solid #ccc;\n}\n.custom-button-box-head {\n  border: 2px solid !important;\n  padding: 10px !important;\n  box-shadow: 2px 8px 7px -6px !important;\n}\n.modal {\n  overflow-y: auto;\n}\nh6 {\n  text-align: left;\n  font: normal 16px/18px Fira Sans;\n  letter-spacing: 0px;\n  color: #1d1d1d;\n  opacity: 1;\n}\np {\n  font-size: 14px;\n}\n.input-tag {\n  top: 248px;\n  left: 508px;\n  width: 405px;\n  height: 38px;\n  // border: 1px solid #dbe2e8;\n  border-radius: 5px;\n  opacity: 1;\n  font-size: 14px;\n  padding: 10px 15px 10px 20px;\n}\n.icon {\n  &:hover {\n    cursor: pointer;\n  }\n}\n\n.muted {\n  color: gray;\n  font-size: 80%;\n}\n\n.add_response_button {\n  font-size: 14px;\n  color: rgb(10, 10, 10);\n  background: #fff;\n  border: 1px solid #dbe2e8;\n  padding-left: 7px;\n  padding-right: 7px;\n  font-weight: 400;\n  line-height: 20px;\n  /* display: inline-block; */\n  border-radius: 5px;\n  cursor: pointer;\n  float: right;\n}\n.multiselect .multiselect__tags {\n  min-height: unset !important;\n  line-height: 1 !important;\n}\n.example {\n  margin-left: -110px !important;\n  cursor: pointer !important;\n  height: 0px !important;\n  z-index: 100;\n}\n.insert_variable_circle{\n  color: blue !important;\n}\n.insert_variable_block{\n  opacity: 1 !important;\n}\n</style>"]}]}