{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/Chatscreen.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/Chatscreen.vue","mtime":1647493919877},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ib3QtaW1nIHsKICAvKiBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2ltZy9Cb3RfaW1nLnBuZyk7ICovCiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsKICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsKICB3aWR0aDogMjNweDsKICBoZWlnaHQ6IDIzcHg7CiAgYm9yZGVyLXJhZGl1czogMTAwJTsKfQo="},{"version":3,"sources":["Chatscreen.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA43BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chatscreen.vue","sourceRoot":"src/portal/Chatbot/Dashboard/Data Inputs","sourcesContent":["<template>\n  <div :style=\"cssProps\">\n    <div\n      class=\"modal fade dash-modal\"\n      id=\"intentmodal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"intentmodeltitle\"\n      aria-hidden=\"true\"\n      style=\"z-index: 10000\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-body\">\n            <div class=\"modal-head d-flex align-items-center\">\n              <div class=\"head-icn\">\n                <img src=\"/img/msg-blue.png\" alt />\n              </div>\n              <h3>Edit Intent</h3>\n            </div>\n            <button\n              type=\"button\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n            >\n              <img src=\"/img/close-icn.png\" alt />\n            </button>\n            <form @submit=\"edit_submit\">\n              <div class=\"form-group\">\n                <label><h5>Intent</h5></label>\n                <select class=\"form-control\" v-model=\"intent\">\n                  <option value>Select an intent</option>\n                  <option\n                    v-for=\"(intent_, index) in intent_list\"\n                    :key=\"index\"\n                    :value=\"intent_\"\n                  >\n                    {{ intent_ }}\n                  </option>\n                </select>\n              </div>\n              <div class=\"form-group\">\n                <h5>Response:</h5>\n                <div class=\"ql-snow\">\n                  <div class=\"ql-editor p-0\" style=\"min-height: 0px\">\n                    <!-- <span v-html=\"selected_intent_response\"></span> -->\n                    <div\n                      v-for=\"(\n                        new_response, index\n                      ) in intent_response\"\n                      :key=\"index\"\n                    >\n                      <li class=\" mt-3\">\n                        <div class=\"\"\n                          style=\"\n                            display: inline-block;\n                          \"\n                          v-html=\"intent_response[index]\"\n                        ></div>\n                        <!-- {{ selected_intent_response[index] }} -->\n                      </li>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"btn-wrap text-right\">\n                <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\">\n                  Cancel\n                </button>\n                <button type=\"submit\" class=\"darkblue-btn\">Save</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- <div class=\"dash-cont\">\n      <div class=\"container-fluid\">\n        <div class=\"card dash-card\"> -->\n    <div\n      class=\"card-header d-block d-sm-flex flex-wrap justify-content-between\"\n    ></div>\n    <div class=\"card-body\">\n      <div class=\"row\">\n        <div class=\"card-act col\" style=\"margin-left: 2%; width: min-content\">\n          <div>\n            Here administrator can check if the bot returns accurate intent for\n            a given question. If the given intent is not right, administrator\n            can edit and correct the intent.\n          </div>\n          <button\n            id=\"checkbot_response_train_model_btn\"\n            type=\"submit\"\n            class=\"darkblue-btn\"\n            style=\"width: 230px; margin-top: 40%\"\n            @click=\"train_intent_model\"\n            :disabled=\"intent_core_model_inprogress == true\"\n            :style=\"show_model_progress('style')\"\n            :title=\"show_model_progress('title')\"\n          >\n            Train Model \n            <i class=\"fa fa-spinner fa-spin\" v-show=\"intent_core_model_inprogress\"></i>\n          </button>\n        </div>\n        <div class=\"col\"></div>\n        <div class=\"col\">\n          <div class=\"chat-master\" id=\"app\">\n            <div\n              class=\"chat-wrap chat-wrap1\"\n              :style=\"chat_bot_background_image\"\n              style=\"\n                margin: 0 auto;\n                z-index: 0;\n                min-width: 450px;\n              \"\n            >\n              <div class=\"chat-head\">\n                <div class=\"media media2\">\n                  <img\n                    :src=\"chat_widget.logo\"\n                    :style=\"chat_widget.style\"\n                    class=\"rounded\"\n                    alt=\"...\"\n                    style=\"max-width: 100%\"\n                  />\n                  <!-- <div class=\"media-body\" style=\"margin-left: 10px\">\n                    <p\n                      style=\"\n                        font-size: 16px;\n                        font-weight: bold;\n                        margin-top: 6px;\n                      \"\n                    >\n                      {{ chat_widget.title }}\n                    </p>\n                  </div> -->\n                </div>\n              </div>\n              <div class=\"chat-body chat-body1\">\n                <div\n                  class=\"chat-inner\"\n                  v-for=\"(single, item) in chat\"\n                  :key=\"item\"\n                  id=\"chat\"\n                >\n                  <div class=\"typewriter\" v-if=\"single.popup != null\">\n                    <span\n                      class=\"chat\"\n                      style=\"\n                        color: black;\n                        font-size: 14px;\n                        font-weight: bold;\n                        border: 0px;\n                      \"\n                      v-html=\"popup_msg\"\n                    ></span>\n                  </div>\n                  <div v-if=\"single.sending\" class=\"chat-row sender\">\n                    <div class=\"chat\">{{ single.sent }}</div>\n                    <div class=\"chat-his\" v-if=\"single.time != null\">\n                      <span class=\"time\" style=\"color: #000\">{{ single.time }}</span>\n                      <span class=\"del-note delivered\">Delivered</span>\n                    </div>\n                  </div>\n                  <div v-if=\"single.receiving\" class=\"chat-row receiver\">\n                    <div class=\"d-flex\">\n                      <div class=\"bot-img\" :style=\"bot_img_icon\"></div>\n                      <div\n                        v-if=\"Boolean(single.received) == true\"\n                        class=\"chat\"\n                      >\n                        <strong>Intent</strong>: {{ single.received }}<br>\n                        <strong>Prediction Confidence</strong>: {{ single.confidence}}%\n                        <div v-for=\"(entity, item) in single.Entities\" :key=\"item\" style=\"margin-bottom: 0.5rem\">\n                         <ul>\n                           <li style=\"max-height: 1rem;font-weight: 100\">\n                             <strong>Entity</strong>: {{ entity.entity }}\n                           </li>\n                           <li style=\"max-height: 1rem;font-weight: 100\"><strong>Value</strong>: {{ entity.value }}</li>\n                         </ul>\n                        </div>\n                      </div>\n                      <a\n                        class=\"#\"\n                        data-toggle=\"modal\"\n                        data-target=\"#intentmodal\"\n                        @click=\"intent_fields(item)\"\n                        style=\"padding-left: 8px\"\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"15.392\"\n                          height=\"15.392\"\n                          viewBox=\"0 0 15.392 15.392\"\n                        >\n                          <path\n                            id=\"square-edit-outline\"\n                            d=\"M4.71,3A1.7,1.7,0,0,0,3,4.71V16.682a1.71,1.71,0,0,0,1.71,1.71H16.682a1.71,1.71,0,0,0,1.71-1.71V10.7h-1.71v5.986H4.71V4.71H10.7V3H4.71m10.928.855a.591.591,0,0,0-.41.171L14.185,5.061,16.322,7.2l1.043-1.035a.578.578,0,0,0,0-.812L16.04,4.026a.571.571,0,0,0-.4-.171M13.578,5.668l-6.3,6.311v2.138H9.413l6.3-6.311Z\"\n                            transform=\"translate(-3 -3)\"\n                            fill=\"#9499ae\"\n                          />\n                        </svg>\n                      </a>\n                    </div>\n                    <div class=\"chat-his\" v-if=\"single.time != null\">\n                    <span class=\"time\" style=\"color: #000\">{{ single.time }}</span>\n                  </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"chat-footer\">\n                <div class=\"typing-indicator\" style=\"display: none\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n                <span \n                  v-show=\"this.chat_widget.is_powered_by_cense\"\n                  class=\"powered-by\">\n                  Powered by &nbsp;\n                  <a href=\"https://cense.ai\" target=\"_blank\"\n                    title=\"click here to visit\"\n                    class=\"open_cense_website\"><img src=\"/img/cense_image.png\" style=\"height: 20px\" /></a>\n                </span>\n              </div>\n              <div class=\"chat-txt\" style=\"width: 100%\">\n                <div class=\"input-group mb-0\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    v-model=\"to_send\"\n                    @keyup.enter=\"send_message\"\n                    @input=\"button_fill\"\n                    placeholder=\"Type your message here ...\"\n                    id=\"text_chat_enter\"\n                  />\n                  <div class=\"input-group-append\">\n                    <button\n                      class=\"btn\"\n                      type=\"button\"\n                      id=\"button-addon2\"\n                      @click=\"send_message\"\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        style=\"fill: #8a8a8a63\"\n                        width=\"40\"\n                        height=\"25\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" />\n                        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- </div>\n      </div>\n    </div> -->\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport fingerprint from \"@/portal/components/fingerprint\";\nimport api_calls from \"@/portal/api_calls\";\nimport { generate_time, freeze_portal } from \"@/portal/mixins\";\nimport Swal from \"sweetalert2\";\n\nexport default {\n  name: \"chatscreen\",\n  mixins: [generate_time, freeze_portal],\n  data() {\n    return {\n      open_modal: false,\n      chat: [],\n      intent: \"\",\n      intent_value: \"\",\n      to_send: \"\",\n      intent_list: [],\n      index: null,\n      new_questions: 0,\n      // chat_widget: {\n      //   logo: \"\",\n      //   title: \"\",\n      //   style: \"margin-top: 5px;height:30px;width:60px\",\n      // },\n      chat_widget: {\n        logo: \"\",\n        title: \"\",\n        style: \"\",\n        bot_theme: \"\",\n        button_theme: \"\",\n        user_response_bg_color: \"\",\n        button_alignment: \"\",\n        bot_icon: \"\",\n        bot_background_image: \"\",\n        button_horizontal_spacing: \"3\",\n        button_vertical_spacing: \"5\",\n        header_background: \"\",\n        is_powered_by_cense: true,\n      },\n      user_role: this.$session.get(\"UserInformation\").role,\n      companyid: this.$session.get(\"UserInformation\").company_id,\n      companyname: this.$session.get(\"UserInformation\").company_name,\n      intent_response: \"\",\n      responses_map: {},\n      want_status: true,\n      disable_btn_expired:false,\n      intent_core_model_inprogress: false,\n    };\n  },\n  // mounted() {\n  //   console.log(\"HELOOOOOOOO/*  */\")\n  //   // this.freeze_portal();\n  //   // // console.log(\"companyid\", this.companyid);\n  //   // this.show = false;\n  // },\n  props: {\n    isTextToBot: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  computed: {\n    cssProps() {\n      let botAttributes = {\n        head_color: this.chat_widget.header_background,\n      };\n      if (this.companyid === \"retailigence84926\") {\n        botAttributes.head_color = this.chat_widget.bot_theme;\n      } else if (this.isexchange) {\n        return {\n          \"--bot-head-color\": \"#fff\",\n          \"--bot-sender-color\": \"#2b3184\",\n          \"--bot-button-color\": \"#fdcf38\",\n          \"--bot-link-color\": \"#2b3184\",\n          \"--user-response-bg-color\": \"#273679\",\n          \"--bot-button-background\": \"#1daae1\",\n          \"--bot-buttons-alignment\": \"center\",\n          \"--bot-buttons-vertical-spacing\": \"5%\",\n          \"--bot-buttons-horizontal-spacing\": \"3%\",\n        };\n      }\n      return {\n        \"--bot-head-color\": botAttributes.head_color,\n        \"--bot-sender-color\": this.chat_widget.bot_theme,\n        \"--bot-button-color\": this.chat_widget.bot_theme,\n        \"--bot-link-color\": this.chat_widget.bot_theme,\n        \"--user-response-bg-color\": this.chat_widget.user_response_bg_color,\n        \"--bot-button-background\": this.chat_widget.button_theme,\n        \"--bot-buttons-alignment\": this.chat_widget.button_alignment.value,\n        \"--bot-buttons-vertical-spacing\": `${this.chat_widget.button_vertical_spacing}%`,\n        \"--bot-buttons-horizontal-spacing\": `${this.chat_widget.button_horizontal_spacing}%`,\n      };\n    },\n    bot_img_icon() {\n      return {\n        \"background-image\": `url(${this.chat_widget.bot_icon})`,\n      };\n    },\n    chat_bot_background_image() {\n      return {\n        \"background-image\": `url(${this.chat_widget.bot_background_image})`,\n      };\n    },\n    // cssProps() {\n    //   if (this.companyid === \"retailigence84926\") {\n    //     return {\n    //       \"--bot-head-color\": \"#990000d1\",\n    //       \"--bot-sender-color\": \"#990000d1\",\n    //       \"--bot-button-color\": \"#990000d1\",\n    //       \"--bot-link-color\": \"#990000d1\",\n    //     };\n    //   }\n    //   return {\n    //     \"--bot-head-color\": \"#FFFFFF\",\n    //     \"--bot-sender-color\": \"#273679\",\n    //     \"--bot-button-color\": \"#273679\",\n    //     \"--bot-link-color\": \"#273679\",\n    //   };\n    // },\n  },\n  watch: {\n    intent(newVal) {\n      if (newVal !== \"No_intent\") {\n        this.intent_response = this.responses_map[newVal];\n      }\n    },\n  },\n  created() {\n    axios\n      .post(\n        api_calls.get_unanswered_url(),\n        {\n          companyid: this.companyid,\n          companyname: this.companyname,\n          isDropdown: \"True\",\n          email: this.$session.get(\"UserInformation\").email,\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          token: this.$session.get(\"UserInformation\").tokens,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${this.$session.get(\"at\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        // for (var i in response.data[0]) {\n        //   this.intent_list.push(\n        //     response.data[0][i].replace(this.companyid + \"_\", \"\")\n        //   );\n        // }\n        for (var i in response.data[0]) {\n          this.intent_list.push(\n            response.data[0][i]\n          );\n        }\n        axios\n          .post(\n            api_calls.load_question_response_url(),\n            {\n              role: this.user_role,\n              companyname: this.companyname,\n              email: this.$session.get(\"UserInformation\").email,\n              companyid: this.companyid,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              token: this.$session.get(\"UserInformation\").tokens,\n              page_no: 1,\n              per_page: this.intent_list.length,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((res) => {\n            let intentsList = res.data.show_intent_field.intent_intentlist;\n            let intentResponses =\n              res.data.show_intent_field.intent_responselist;\n            for (let i = 0, n = intentResponses.length; i < n; i += 1) {\n              this.responses_map[\n                intentsList[i].replace(`${this.companyid}_`, \"\")\n              ] = intentResponses[i];\n            }\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      })\n      .catch((e) => {\n        if (\n          (Boolean(e.response)) && (\n          e.response.status === 410 ||\n          e.response.status === 440 ||\n          e.response.status === 409)\n        ) {\n          this.$root.$emit(\"Session_Expired\", e.response.data);\n        }\n      });\n    // if (!this.$session.has(\"ChatBotImageParameters\")) {\n      axios\n      .post(\n        api_calls.get_widget_settings(),\n        {\n          companyname: this.companyname,\n          companyid: this.companyid,\n          email: this.$session.get(\"UserInformation\").email,\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          token: this.$session.get(\"UserInformation\").tokens,\n          isShow: true,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${this.$session.get(\"at\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        this.chat_widget.title = response.data.WidgetTitle;\n        this.chat_widget.logo = response.data.ImageUrl;\n        this.chat_widget.button_theme = response.data.ButtonTheme;\n        this.chat_widget.bot_theme = response.data.BotTheme;\n        this.chat_widget.user_response_bg_color = response.data.UserResponseBgColor === undefined ?\n                                                  this.chat_widget.user_response_bg_color : response.data.UserResponseBgColor;\n        this.chat_widget.button_alignment = response.data.BotStyling;\n        this.chat_widget.bot_icon = response.data.BotImageUrl;\n        this.chat_widget.button_vertical_spacing =\n          response.data.ButtonStyling.vertical;\n        this.chat_widget.button_horizontal_spacing =\n          response.data.ButtonStyling.horizontal;\n        this.chat_widget.bot_background_image = response.data.BgImageUrl;\n        this.chat_widget.header_background = response.data.HeaderTheme;\n        this.chat_widget.is_powered_by_cense = response.data.IsPoweredByCense === undefined ? \n                                                this.chat_widget.is_powered_by_cense : response.data.IsPoweredByCense;\n        if (this.chat_widget.button_alignment === undefined) {\n          this.chat_widget.button_alignment = \"flex-end\";\n        }\n        if (this.chat_widget.bot_icon === undefined) {\n          this.chat_widget.bot_icon = \"/img/Bot_img.png\";\n        }\n        this.$session.set(\"ChatBotImageParameters\", this.chat_widget);\n        let styling_value = response.data.HeaderStyling.value;\n        let temp_string = \"\";\n        if (styling_value === \"left\") {\n          temp_string = \"margin-left: 0;margin-right: auto;\";\n        } else if (styling_value === \"right\") {\n          temp_string = \"margin-left: auto;margin-right: 0;\";\n        } else if (styling_value === \"center\") {\n          temp_string = \"margin-left: auto;margin-right: auto;\";\n        } else {\n          temp_string = \"margin-left: auto;margin-right: auto;\";\n        }\n        this.chat_widget.style =\n          \"margin-top: 5px;height:30px;width:auto;max-width:100% !important;\" +\n          temp_string;\n      })\n      .catch((e) => {\n        if (e.response) {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        } else {\n          if (this.$session.get(\"UserInformation\").company_name == \"gogyb\") {\n            this.chat_widget.style =\n              \"margin-top: 5px;height:30px;width:60px;margin-left: auto;margin-right: auto;\";\n            this.chat_widget.logo = \"/img/cense_image.png\";\n            this.chat_widget.bot_icon = \"/img/Bot_img.png\";\n            this.chat_widget.button_vertical_spacing = \"5\";\n            this.chat_widget.button_horizontal_spacing = \"3\";\n            this.chat_widget.bot_background_image = \"\";\n            this.chat_widget.header_background = \"#ffffff\";\n            this.chat_widget.button_theme = \"#1daae1\";\n            this.chat_widget.bot_theme = \"#273679\";\n            this.chat_widget.user_response_bg_color = \"#273679\";\n          } else if (\n            this.$session.get(\"UserInformation\").company_name == \"MT Care\"\n          ) {\n            this.chat_widget.logo = \"/img/robomate_logo.png\";\n            this.chat_widget.style =\n              \"margin-top: 5px;height:50px;width:95px;margin-left: auto;margin-right: auto;\";\n            this.chat_widget.bot_icon = \"/img/Bot_img.png\";\n            this.chat_widget.button_vertical_spacing = \"5\";\n            this.chat_widget.button_horizontal_spacing = \"3\";\n            this.chat_widget.bot_background_image = \"\";\n            this.chat_widget.header_background = \"#ffffff\";\n            this.chat_widget.button_theme = \"#1daae1\";\n            this.chat_widget.bot_theme = \"#273679\";\n            this.chat_widget.user_response_bg_color = \"#273679\";\n          } else {\n            this.chat_widget.logo = \"/img/cense_image.png\";\n            this.chat_widget.style =\n              \"margin-top: 5px;height:30px;width:60px;margin-left: auto;margin-right: auto;\";\n            this.chat_widget.bot_icon = \"/img/Bot_img.png\";\n            this.chat_widget.button_vertical_spacing = \"5\";\n            this.chat_widget.button_horizontal_spacing = \"3\";\n            this.chat_widget.bot_background_image = \"\";\n            this.chat_widget.header_background = \"#ffffff\";\n            this.chat_widget.button_theme = \"#1daae1\";\n            this.chat_widget.bot_theme = \"#273679\";\n            this.chat_widget.user_response_bg_color = \"#273679\";\n          }\n          this.$session.set(\"ChatBotImageParameters\", this.chat_widget);\n        }\n      });\n    // } else {\n    //   this.chat_widget = this.$session.get(\"ChatBotImageParameters\");\n    //   this.chat_widget.style = \"margin-top: 5px;height:30px;width:auto\";\n    // }\n    this.check_intent_core_model_status();\n  },\n  mounted() {\n    setTimeout(() => {\n      this.freeze_portal();\n    }, 1000);\n      \n  //   // // console.log(\"companyid\", this.companyid);\n     this.$root.$on(\"chatscreenDisabled\", (data) =>{\n      if(data===true){\n        this.disable_btn_expired = true;\n      }\n    })\n      this.show = false;\n      this.$root.$on(\"send_model_status\", data =>{\n      if (data == true){\n        this.check_intent_core_model_status();\n      }\n    })\n  },\n  methods: {\n    check_intent_core_model_status(){\n      var model_status = this.$session.get(\"ModelStatus\");\n      if (model_status == \"No Failure\"){\n      this.intent_core_model_inprogress = false;\n      }\n      else if(Boolean(model_status.intent_model) === true\n        || Boolean(model_status.dialogue_model) === true)\n        {\n        if(model_status.intent_model == \"InProgress\" || model_status.dialogue_model == \"InProgress\"){\n          this.intent_core_model_inprogress = true;\n        }\n        else{\n          this.intent_core_model_inprogress = false;\n        }\n      }\n      else{\n        this.intent_core_model_inprogress = false; \n      }\n    },\n    show_model_progress(index){\n      if(this.intent_core_model_inprogress == true){\n         if (index == 'style'){\n            return \"cursor: not-allowed\";\n          }\n          else if(index == 'title'){\n              return \"Training in Progress (This process might take around 45 mins to finish) \";\n          }\n      }\n      else{\n        return null;\n      }\n    },\n    show_popup() {\n      this.show = false;\n      this.stop = false;\n    },\n    send_message() {\n      this.chat.push({\n        sending: true,\n        sent: this.to_send,\n        time: this.generate_time(),\n      });\n      document.querySelector(\".typing-indicator\").style.display = \"block\";\n      if (this.to_send != \"\" && this.to_send != null) {\n        axios\n          .post(\n            api_calls.chat_url(),\n            {\n              companyid: this.$session.get(\"UserInformation\").company_id,\n              companyname: this.$session.get(\"UserInformation\").company_name,\n              token: this.$session.get(\"UserInformation\").tokens,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              email: this.$session.get(\"UserInformation\").email,\n              question: this.to_send,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            if (response.data == null) {\n              this.update_scrollbar();\n            } else if (response.data.msg == \"Internal Server Error\") {\n              this.update_scrollbar();\n            } else {\n              this.chat.push({\n                receiving: true,\n                time: this.generate_time(),\n                // received: response.data.Msg.Intent.replace(\n                //   this.companyid + \"_\",\n                //   \"\"\n                // ),\n                received: response.data.Msg.Intent,\n                Entities: response.data.Msg.Entities,\n                confidence: response.data.Msg.Intent_value\n              });\n              // this.intent_value = response.data.Msg.Intent.replace(\n              //   this.companyid + \"_\",\n              //   \"\"\n              // );  \n              this.intent_value = response.data.Msg.Intent;\n              this.update_scrollbar();\n            }\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      }\n      this.to_send = \"\";\n    },\n    click_prompt(type) {\n      var divclickpopup = event.target.innerText;\n\n      setTimeout(() => {\n        document.querySelector(\".typing-indicator\").style.display = \"none\";\n      }, 500);\n      document.querySelector(\".typing-indicator\").style.display = \"block\";\n\n      if (type != \"collapsible\") {\n        axios\n          .post(api_calls.prompt_url(), {\n            uid: \"cense\",\n            companyid: this.$session.get(\"UserInformation\").company_id,\n            chat: event.target.innerText,\n            level: event.target.attributes.value.nodeValue,\n          })\n          .then((response) => {\n            if (response.data.collapsible == true) {\n              this.create_chat(response.data);\n              this.update_scrollbar();\n            } else {\n              this.chat.push(response.data);\n              this.level = response.data.level;\n              this.update_scrollbar();\n            }\n          });\n      } else if (type == \"collapsible\") {\n        axios\n          .post(api_calls.prompt_url(), {\n            uid: \"cense\",\n            companyid: this.$session.get(\"UserInformation\").company_id,\n            chat: \"\",\n          })\n          .then((response) => {\n            this.chat.push(response.data);\n          });\n      }\n    },\n    intent_fields(index) {\n      this.index = index;\n      this.intent = this.chat[index].received;\n      if (this.chat[index].received == \"No_intent\") {\n        this.intent = \"\";\n      }\n    },\n    edit_submit() {\n      event.preventDefault();\n      if (this.intent == \"\" || this.intent_value == \"\") {\n        toastr.error(\"Please Enter the values\");\n      } else if (\n        !this.$session.has(\"CompanyId\") &&\n        this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\n      ) {\n        toastr.warning(\"Please select a company name from the dropdown\");\n      } else {\n        axios\n          .post(\n            api_calls.edit_intent_url(),\n            {\n              companyname: this.$session.get(\"UserInformation\").company_name,\n              companyid: this.$session.get(\"UserInformation\").company_id,\n              question: this.chat[this.index - 1].sent,\n              // editintent: this.companyid + \"_\" + this.intent,\n              // intentvalue: this.companyid + \"_\" + this.intent_value,\n              editintent: this.intent,\n              intentvalue: this.intent_value,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              email: this.$session.get(\"UserInformation\").email,\n              token: this.$session.get(\"UserInformation\").tokens,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            this.new_questions += 1;\n            var chat_name = \"ChatMessage\" + this.companyname;\n            if (response.data == \"Intent Updated\") {\n              toastr.success(\"Your values have been updated!\");\n              this.$session.set(chat_name, this.meta);\n            }\n            this.chat[this.index].received = this.intent;\n            $(\"#intentmodal\").modal(\"hide\");\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n            $(\"#intentmodal\").modal(\"hide\");\n          });\n      }\n    },\n    button_fill() {\n      document.querySelector(\"svg\").style.fill = \"#273679\";\n      if (this.to_send == \"\") {\n        document.querySelector(\"svg\").style.fill = \"#8a8a8a63\";\n      }\n    },\n    create_chat(message) {\n      this.chat.push(message);\n    },\n    update_scrollbar(type) {\n      setTimeout(() => {\n        document.querySelector(\".typing-indicator\").style.display = \"none\";\n      }, 1000);\n      setTimeout(() => {\n        document.querySelector(\".chat-body\").scrollTop =\n          document.querySelector(\".chat-body\").scrollHeight -\n          document.querySelector(\".chat-body\").lastChild.scrollHeight;\n      }, 1000);\n    },\n    train_intent_model() {\n      if(!this.disable_btn_expired){\n      event.preventDefault();\n      if (this.new_questions < 1) {\n        toastr.error(\"Please edit atleast one question to train the model\");\n      } else if (this.new_questions >= 1) {\n        Swal({\n          title: \"Are You Sure?\",\n          text: \"You want to Train The Model?\",\n          type: \"question\",\n          showCancelButton: true,\n          confirmButtonColor: \"#3085d6\",\n          cancelButtonColor: \"#d33\",\n          confirmButtonText: \"Yes, Confirm!\",\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n        }).then((result) => {\n          if (result.value) {\n            axios\n              .post(\n                api_calls.train_intent_model(),\n                {\n                  company_id: this.$session.get(\"UserInformation\").company_id,\n                  company_name: this.$session.get(\"UserInformation\")\n                    .company_name,\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  epochs: 100,\n                  update_model: true,\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                if (response.data.MSG_CODE === 4046) {\n                  toastr.success(response.data.MSG);\n                  this.want_status = true;\n                  this.$root.$emit(\"want_model_status\",this.want_status);\n                  this.check_intent_core_model_status();\n                } else if(response.data.MSG_CODE === 1034) {\n                  toastr.error(response.data.MSG);\n                }\n              })\n              .catch((e) => {\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n              });\n          }\n        });\n      }\n      }else{\n        this.show_subscription_expired_swal();\n      }\n    },\n  },\n};\n</script>\n<style>\n.bot-img {\n  /* background-image: url(/img/Bot_img.png); */\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  width: 23px;\n  height: 23px;\n  border-radius: 100%;\n}\n</style>\n<style scoped>\nsvg :hover {\n  fill: #273679;\n}\ndiv::-webkit-scrollbar {\n  max-height: 20px;\n  width: 6px;\n  border-radius: 10px;\n}\n\n/* Track */\ndiv::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 10px;\n}\n.toast-message {\n  margin-top: 1000px;\n}\n/* Handle */\ndiv::-webkit-scrollbar-thumb {\n  background: #7d7d7d;\n  border-radius: 10px;\n}\n\n/* Handle on hover */\ndiv::-webkit-scrollbar-thumb:hover {\n  background: #555;\n  border-radius: 10px;\n}\n.toast-container {\n  margin-left: 800px;\n}\n.typewriter span {\n  color: #fff;\n  font-family: monospace;\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\n  border-right: 0.15em solid orange; /* The typwriter cursor */\n  white-space: nowrap; /* Keeps the content on a single line */\n  margin: 0 auto; /* Gives that scrolling effect as the typing happens */\n  letter-spacing: 0.15em; /* Adjust as needed */\n  animation: typing 3.5s steps(30, end), blink-caret 0.5s step-end infinite;\n}\n\n/* The typing effect */\n@keyframes typing {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\n\n/* The typewriter cursor effect */\n@keyframes blink-caret {\n  from,\n  to {\n    border-color: transparent;\n  }\n  50% {\n    border-color: orange;\n  }\n}\n\n/*harsh*/\n.chat-body1 {\n  max-height: 300px;\n  min-height: 70vh;\n}\n\n.chat-wrap1 {\n  min-width: 320px;\n  max-width: 320px;\n}\n/* .media2 {\n  background: #fff;\n} */\n\n.receiver .chat {\n  color: #000 !important;\n  margin-left: 10px;\n}\n</style>\n"]}]}