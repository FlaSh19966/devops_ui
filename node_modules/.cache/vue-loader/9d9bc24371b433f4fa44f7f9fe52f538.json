{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Customer Support/LiveChat.vue?vue&type=style&index=0&id=7f6cf6be&scoped=true&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Customer Support/LiveChat.vue","mtime":1655466542520},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgovKiB1bCB7CiAgbGlzdC1zdHlsZS10eXBlOiBub25lOwogIHBhZGRpbmc6IDA7CiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKfSAqLwoKbGkgewogIHBhZGRpbmc6IDhweCAxNnB4OwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkOwp9CgovKiB1bCBsaTpsYXN0LWNoaWxkIHsKICBib3JkZXItYm90dG9tOiBub25lCn0KdWwgbGk6Zmlyc3QtY2hpbGQgewogIGJvcmRlci10b3A6IG5vbmUKfSAqLwouY3VycmVudC1hY3RpdmUtdXNlciB7CiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEpOwp9Ci5kYXJrYmx1ZS1idG4gewogIHBhZGRpbmc6IDEwcHggNnB4OwogIGZvbnQtc2l6ZTogMTJweDsKfQoubmF2LWxpbmsuaW5hY3RpdmUgewogIHRleHQtYWxpZ246IGNlbnRlcjsKICBib3JkZXI6IDFweCBzb2xpZCAjZmZmOwp9Ci5uYXYtbGluay5hY3RpdmUgewogIGJvcmRlcjogMXB4IHNvbGlkICMyOTM5Nzg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Ci8qIC5uYXYtaXRlbSA6aG92ZXIgewogIGJvcmRlcjogMXB4IHNvbGlkICMyOTM5Nzg7Cn0gKi8KLnVzZXItaW1nIHsKICB3aWR0aDogNDBweDsKICBoZWlnaHQ6IDQwcHg7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIGJvcmRlcjogc29saWQgMXB4ICMyOTM5Nzg7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIG92ZXJmbG93OiBoaWRkZW47CiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKfQouY2hhdCB7CiAgdHJhbnNmb3JtOiBzY2FsZSgwKTsKICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7CiAgYW5pbWF0aW9uOiBib3VuY2UgNTAwbXMgbGluZWFyIGJvdGg7CiAgYm9yZGVyLXJhZGl1czogNXB4OwogIHBhZGRpbmc6IDVweCA4cHg7CiAgd2lkdGg6IGZpdC1jb250ZW50Owp9Ci5yZWNlaXZlciAuY2hhdCB7CiAgY29sb3I6ICMwMDAgIWltcG9ydGFudDsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIC8qIG1hcmdpbi10b3A6IDMlOyAqLwp9Ci5zZW5kZXIgewogIGNvbG9yOiAjZmZmOwogIG1hcmdpbi1sZWZ0OiA1MCU7CiAgdGV4dC1hbGlnbjogcmlnaHQ7CiAgbWFyZ2luLXRvcDogMyU7Cn0KLnNlbmRlciAuY2hhdCB7CiAgYmFja2dyb3VuZDogIzI5Mzk3ODsKfQouY2hhdC1yb3c6bm90KDpmaXJzdC1jaGlsZCkgewogIG1hcmdpbjogMTBweCAwOwp9CiNjaGF0LAouY2hhdC10eHQgaW5wdXQgewogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgvaW1nL3Nkay1iYWNrZ3JvdW5kLnBuZyk7Cn0KZGl2Ojotd2Via2l0LXNjcm9sbGJhciB7CiAgbWF4LWhlaWdodDogMjBweDsKICB3aWR0aDogNnB4OwogIGJvcmRlci1yYWRpdXM6IDEwcHg7Cn0KCi8qIFRyYWNrICovCmRpdjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sgewogIGJhY2tncm91bmQ6ICNmMWYxZjE7CiAgYm9yZGVyLXJhZGl1czogMTBweDsKfQoKLyogSGFuZGxlICovCmRpdjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIgewogIGJhY2tncm91bmQ6ICM3ZDdkN2Q7CiAgYm9yZGVyLXJhZGl1czogMTBweDsKfQoKLyogSGFuZGxlIG9uIGhvdmVyICovCmRpdjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIgewogIGJhY2tncm91bmQ6ICM1NTU7CiAgYm9yZGVyLXJhZGl1czogMTBweDsKfQo="},{"version":3,"sources":["LiveChat.vue"],"names":[],"mappingsmjBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"LiveChat.vue","sourceRoot":"src/portal/Chatbot/Dashboard/Customer Support","sourcesContent":["<template>\n  <div class=\"dash-cont\">\n    <div class=\"container-fluid\">\n      <div class=\"card dash-card\">\n        <div class=\"card-body p-0\">\n          <div class=\"d-flex\" style=\"border-bottom: 1px solid #dbe2e8\">\n            <div class=\"col-md-3\" style=\"border-right: 1px solid #dbe2e8\">\n              <div style=\"display: flex\">\n                <!-- <span\n                  class=\"user-img text-center\"\n                  style=\"font-size: x-large; margin-bottom: 5px\"\n                  >{{ first_name[0] }}{{ last_name[0] }}</span\n                > -->\n                <!-- <h4 style=\"margin-top: 3%; margin-left: 5%\">\n                  {{ first_name }}&nbsp;\n                </h4> -->\n                <h4 style=\"margin-top: 3%;\">Online Customers</h4>\n              </div>\n            </div>\n            <div class=\"col-md-9\">\n              <div class=\"card-act d-flex flex-wrap\" style=\"margin-top: 1%\">\n                <h4 class=\"mb-sm-0\" v-if=\"Boolean(current_user.username)\">{{ current_user.username }}</h4>\n                <h4 class=\"mb-sm-0\" v-else-if=\"current_user.username == ''\">{{\"Customer\"}}</h4>\n                <h4 class=\"mb-sm-0\" v-else>{{\"Select a Customer\"}}</h4>\n                <div class=\"ml-auto\" v-show=\"user_list.length\">\n                <a\n                  href=\"#\"\n                  class=\"ml-auto\"\n                  style=\"color: red;\"\n                  v-if=\"current_user.state == 'joined'\"\n                  @click=\"disconnect_support_chat\"\n                  >Stop Chat</a\n                >\n                <a\n                  href=\"#\"\n                  class=\"ml-auto\"\n                  style=\"color: black;\"\n                  v-else-if=\"current_user.state == 'ended'\"\n                  >Chat Ended</a\n                >\n                <a\n                  href=\"#\"\n                  class=\"ml-auto\"\n                  @click=\"join_customer(current_user)\"\n                  v-else-if=\"current_user.state == 'waiting'\"\n                  >Join</a\n                >\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"d-flex\">\n            <div class=\"col-sm-3 p-0\" style=\"border-right: 1px solid #dbe2e8\">\n              <ul class=\"navbar-nav flex-column\" style=\"width: 100%\">\n                <div v-for=\"(user, index) in user_list\"\n                  :key=\"index\">\n                <li\n                  class=\"nav-item\"\n                  v-if=\"user.agent_username == agent_username || user.agent_username == null\"\n                  style=\"cursor: pointer\"\n                  :class=\"check_current_active_user(index)\"\n                  @click=\"select_user(user)\"\n                >\n                  <a\n                    class=\"d-flex\"\n                    href=\"#\"\n                    role=\"button\"\n                  >\n                    <template v-if=\"user.username == ''\">\n                      <p style=\"color: black; margin: 0;\">User</p> \n                    </template>\n                    <template v-else-if=\"user.username != ''\">\n                      <p style=\"color: black; margin: 0;\">{{user.username}}</p> \n                    </template>\n                    <span\n                      href=\"#\"\n                      v-if=\"user.is_connected == false\"\n                      class=\"ml-auto\"\n                      @click=\"select_user(user) ,join_customer(user)\"\n                    >\n                      Join\n                    </span>\n                    <span\n                      v-if=\"user.state == 'ended'\"\n                      class=\"ml-auto\"\n                      style=\"color: black;\"\n                    >\n                      Chat Ended\n                    </span>\n                  </a>\n                </li>\n                </div>\n              </ul>\n            </div>\n            <div class=\"col-md-9\" id=\"chat\">\n              <div class=\"chat-master\">\n                <div class=\"chat-body\" style=\"height: 65vh; overflow-y: auto\">\n                  <div\n                    class=\"chat-inner\"\n                    v-for=\"(chat, item) in chat_list\"\n                    :key=\"item\"\n                    v-show=\"chat.current_channel == current_user.channel_name\"\n                  >\n                    <div class=\"chat-row sender\" v-if=\"chat.sent\">\n                      <div class=\"chat\" v-html=\"chat.text\"></div>\n                      <div class=\"chat-his justify-content-between\">\n                        <span class=\"time\" style=\"color: #000\">{{\n                          chat.time\n                        }}</span>\n                        <span class=\"del-note delivered\">Delivered</span>\n                      </div>\n                    </div>\n                    <div class=\"chat-row receiver\" v-if=\"chat.received\">\n                      <div class=\"chat\" v-html=\"chat.text\"></div>\n                      <div class=\"chat-his justify-content-between\">\n                        <span class=\"time\" style=\"color: #000\">{{\n                          chat.time\n                        }}</span>\n                        <span class=\"del-note delivered\">Delivered</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"chat-footer\" style=\"margin-bottom: 20px\">\n                  <div\n                    class=\"typing-indicator\"\n                    style=\"margin-left: 10px\"\n                    v-show=\"is_typing_indicator_on\"\n                  >\n                    <p style=\"font-size: 13px; font-weight: 300\">\n                      {{ msg_sender }} is typing\n                    </p>\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                  </div>\n                </div>\n                <div\n                  class=\"chat-footer\"\n                  style=\"\n                    border-top: solid 1px #dbe2e8;\n                    border-radius: 0 0 0 0;\n                    overflow: hidden;\n                  \"\n                >\n                  <div class=\"chat-txt\">\n                    <div class=\"input-group mb-0\">\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        placeholder=\"Type your message here ...\"\n                        v-model=\"to_send\"\n                        @keypress.enter=\"send_message\"\n                      />\n                      <div class=\"input-group-append\">\n                        <button class=\"btn\" type=\"button\" @click=\"send_message\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            style=\"fill: #8a8a8a63\"\n                            width=\"40\"\n                            height=\"25\"\n                            viewBox=\"0 0 24 24\"\n                          >\n                            <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" />\n                            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                          </svg>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport { Socket } from \"phoenix-socket\";\nimport { setInterval } from \"timers\";\nimport debounce from \"vue-debounce/dist/debounce.min.js\";\nimport { generate_time } from \"@/portal/mixins\";\nimport { freeze_portal,show_subscription_expired_swal } from \"@/portal/mixins\";\n\nexport default {\n  name: \"LiveChatPage\",\n  data() {\n    return {\n      user_list: [],\n      current_user: {},\n      current_channel: \"\",\n      first_name: this.$session.has(\"UserFirstName\")\n        ? this.$session.get(\"UserFirstName\")\n        : this.$session.get(\"UserInformation\").first_name,\n      last_name: this.$session.has(\"UserLastName\")\n        ? this.$session.get(\"UserLastName\")\n        : this.$session.get(\"UserInformation\").last_name,\n      agent_username: this.$session.get(\"UserInformation\").email,\n      chat_list: [],\n      to_send: \"\",\n      ch: null,\n      message: null,\n      user_channels: {},\n      socket: null,\n      msg_sender: \"\",\n      delay: 10000,\n      is_typing_indicator_on: false,\n      disable_btn_expired : false,\n      // user_list: [{\"channel_name\":\"customers_groups:dhs6bennkl\",\"username\":\"Vimleshh\",\"is_connected\":false,\"agent_username\":null,\"agent_role\":null,\"state\":\"waiting\"},{\"channel_name\":\"customers_groups:hemzastnhe\",\"username\":\"Akshay\",\"is_connected\":false,\"agent_username\":null,\"agent_role\":null,\"state\":\"waiting\"}]\n    };\n  },\n  watch: {\n    to_send(newVal) {\n      this.button_fill();\n    },\n  },\n  mixins: [generate_time,freeze_portal],\n  mounted() {\n    setTimeout(() => {\n      this.freeze_portal();\n    }, 1000);\n    this.$root.$on(\"LiveChatPageDisabled\", (data) => {\n      if(data===true){\n        this.disable_btn_expired = true;\n      }\n    });\n    setTimeout(() => {\n      if (!this.disable_btn_expired) {\n      this.socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {\n      params: {\n        username: this.$session.get(\"UserInformation\").email,\n        token: this.$session.get(\"UserInformation\").tokens,\n        role: this.$session.get(\"UserInformation\").role\n      },\n      });\n      this.socket.connect();\n      this.ch = this.socket.channel(\n        \"companies:\" + this.$session.get(\"UserInformation\").company_name\n      );\n      this.ch.join();\n\n      this.ch.on('new_name', (res) => {\n        var check = this.user_list.some(obj => obj.channel_name === res.topic)\n        var index = this.user_list.findIndex(obj => obj.channel_name === res.topic);\n        if(check) this.user_list[index].username = res.name;\n      })\n      this.ch.on(\"customer_needs_support_agent\", (res) => { \n        var temp = res;\n        for (var i in temp.metas) {\n          var channel_group = temp.customer_chat_group;\n          var check = this.user_list.some(obj => obj.channel_name === channel_group)\n          // this.user_channels[channel_group] = this.socket.channel(res.customer_chat_group);\n          if (check) {\n            var index = this.user_list.findIndex(obj => obj.channel_name === channel_group);\n            if (Boolean(temp.metas[i].user_info.is_customer) && temp.metas.length == 1) {\n              this.user_list[index].is_connected = false;\n              this.user_list[index].agent_role = null;\n              this.user_list[index].agent_username = null;\n              this.user_list[index].state == \"ended\" ? \"ended\" : \"waiting\";\n            } else {\n              this.user_list[index].is_connected = true;\n              this.user_list[index].agent_role = temp.metas[i].user_info.role;\n              this.user_list[index].agent_username = temp.metas[i].user_info.username;\n              this.user_list[index].state == \"ended\" ? \"ended\" : \"joined\";\n            }\n          } else {\n            this.user_list.push({\n              \"channel_name\": channel_group,\n              \"username\": \"\",\n              \"is_connected\": false,\n              \"agent_username\": null,\n              \"agent_role\": null,\n              \"state\": \"waiting\"\n            })\n            this.user_channels[channel_group] = this.socket.channel(\n              channel_group\n            );\n          }\n        }\n      })\n\n      // this.ch.on(\"customer_needs_support_agent\", (res) => {\n      // console.log(\"customer_needs_support_agent\", res);\n      // this.user_list.push({\n      //   channel_name: res.customer_chat_group,\n      //   username: \"\",\n      //   is_connected: false\n      // });\n      // this.current_user = res.customer_chat_group;\n      // this.current_user = \"Customer\";\n      // this.current_channel = res.customer_chat_group;\n      // this.user_channels[res.customer_chat_group] = this.socket.channel(\n      //   res.customer_chat_group\n      // );\n      // this.message = this.socket.channel(res.customer_chat_group);\n\n      // this.user_channels[res.customer_chat_group].on(\"started_typing\",\n      //   (typing_response) => {\n      //     if (res.customer_chat_group == this.current_user.channel_name) {\n      //       if (typing_response.sender != \"support_agent\") {\n      //         var name = this.user_list.filter((user) => {\n      //           return user.channel_name == res.customer_chat_group;\n      //         });\n      //         if (name[0].username == \"\") {\n      //           this.msg_sender = typing_response.sender;\n      //         } else {\n      //           this.msg_sender = name[0].username;\n      //         }\n      //       }\n      //       this.is_typing_indicator_on = true;\n      //     }\n      //   }\n      // );\n      // this.user_channels[res.customer_chat_group].on(\"stopped_typing\", () => {\n      //   this.is_typing_indicator_on = false;\n      // });\n      // this.user_channels[res.customer_chat_group].on(\"new_chat_message\",\n      //   (response) => {\n      //     if (response.sender == \"customer\") {\n      //       this.chat_list.push({\n      //         received: true,\n      //         text: response.message,\n      //         current_channel: res.customer_chat_group,\n      //         time: this.generate_time(),\n      //       });\n      //       this.update_scrollbar();\n      //       this.no_response(this);\n      //     }\n      //   }\n      // );\n      // // this.user_channels[res.customer_chat_group].on(\"new_name\", (resp) => {\n      // //   for (let i = 0, n = this.user_list.length; i < n; i++) {\n      // //     if (this.user_list[i].channel_name == res.customer_chat_group) {\n      // //       this.user_list[i].username = resp.name;\n      // //     }\n      // //   }\n      // //   this.current_user = resp.name;\n      // //   this.no_response(this);\n      // // });\n      // this.user_channels[res.customer_chat_group].on(\"stopped_chat\", (resp) => {\n      //   this.chat_list.push({\n      //     received: true,\n      //     text: resp.name + resp.message,\n      //     current_channel: resp.topic,\n      //     time: this.generate_time(),\n      //   });\n      //   this.update_scrollbar();\n      //   swal({\n      //     text: resp.name + resp.message,\n      //     toast: true,\n      //     showConfirmButton: false,\n      //     position: \"top-end\",\n      //     type: \"info\",\n      //     timer: 5000,\n      //   });\n      //   var index = this.user_list.findIndex(obj => obj.channel_name === resp.topic);\n      //   this.user_list[index].agent_username = this.agent_username;\n      //   this.user_list[index].is_connected = true;\n      //   this.user_list[index].state = \"ended\";\n      //   // toastr.info(resp.name + \" \" + resp.message);\n      //   // this.user_list = this.user_list.filter((user) => {\n      //   //   return user.username != resp.name;\n      //   // });\n      //   // this.chat_list = this.chat_list.filter((chat) => {\n      //   //   return chat.current_channel != this.current_channel;\n      //   // });\n      //   // this.current_user = this.first_name;\n      // });\n\n      // this.user_channels[res.customer_chat_group].join();\n    // });\n\n    // this.ch.on(\"customer_needs_support_agent\", (res) => {\n    //   console.log(\"customer_needs_support_agent\", res);\n    // });\n    }else {\n      swal({\n        type: \"warning\",\n        text: `You are on free trial please, kindly upgrade your plan to use this feature`,\n        showCancelButton: true,\n        confirmButtonColor:'#3085d6',\n        confirmButtonText: 'Subscribe Now',\n        cancelButtonText: 'Later',\n        cancelButtonColor: '#d33',\n      }).then((result) => {\n      if (result.value == true)\n      {\n        this.$router.push({name: 'Settings',params:{Subscription:true}});\n      }else{\n        this.$router.push(\"/bot/dashboard\");\n        this.$root.$emit(\"change_sidebar_main_menu\", \"Dashboard\");\n        }\n      })\n    }\n    },1000);\n  },\n  beforeDestroy(){\n    if (!this.disable_btn_expired) {\n    this.ch.leave();\n    //disconnect all customer when SA navigates to other page\n      for (const property in this.user_channels) {\n      this.user_channels[property].push(\"stopped_chat\", {\n          name: \"Support Agent\",\n          message: \" has ended this conversation.\",\n          });\n            this.user_channels[property].leave();\n      }\n    this.socket.disconnect(); \n    }\n  },\n  methods: {\n    join_customer(res) {\n      this.user_channels[res.channel_name].join();\n      var index = this.user_list.findIndex(obj => obj.channel_name === res.channel_name);\n      this.user_list[index].agent_username = this.agent_username;\n      this.user_list[index].is_connected = true;\n      this.user_list[index].state = \"joined\";\n      // this.user_channels[res.channel_name] = this.socket.channel(\n      //   res.channel_name\n      // );\n      \n      this.user_channels[res.channel_name].on(\"started_typing\",\n        (typing_response) => {\n          if (res.channel_name == this.current_user.channel_name) {\n            if (typing_response.sender != \"support_agent\") {\n              var name = this.user_list.filter((user) => {\n                return user.channel_name == res.channel_name;\n              });\n              if (name[0].username == \"\") {\n                this.msg_sender = typing_response.sender;\n              } else {\n                this.msg_sender = name[0].username;\n              }\n            }\n            this.is_typing_indicator_on = true;\n          }\n        }\n      );\n      this.user_channels[res.channel_name].on(\"stopped_typing\", () => {\n        this.is_typing_indicator_on = false;\n      });\n      this.user_channels[res.channel_name].on(\"new_chat_message\",\n        (response) => {\n          if (response.sender == \"customer\") {\n            this.chat_list.push({\n              received: true,\n              text: response.message,\n              current_channel: res.channel_name,\n              time: this.generate_time(),\n            });\n            this.update_scrollbar();\n            this.no_response(this);\n          }\n        }\n      );\n      this.user_channels[res.channel_name].on(\"stopped_chat\", (resp) => {\n        this.chat_list.push({\n          received: true,\n          text: resp.name + resp.message,\n          current_channel: resp.topic,\n          time: this.generate_time(),\n        });\n        this.update_scrollbar();\n        swal({\n          text: resp.name + resp.message,\n          toast: true,\n          showConfirmButton: false,\n          position: \"top-end\",\n          type: \"info\",\n          timer: 5000,\n        });\n        var index = this.user_list.findIndex(obj => obj.channel_name === resp.topic);\n        this.user_list[index].agent_username = this.agent_username;\n        this.user_list[index].is_connected = true;\n        this.user_list[index].state = \"ended\";\n      });\n    },\n    button_fill() {\n      document.querySelector(\"svg\").style.fill = \"#273679\";\n      if (this.to_send == \"\") {\n        document.querySelector(\"svg\").style.fill = \"#8a8a8a63\";\n      } else if (this.to_send != \"\") {\n        this.user_channels[this.current_user.channel_name].push(\"started_typing\");\n      }\n      this.stop_typing(this);\n    },\n    stop_typing: debounce(function (vm) {\n      vm.user_channels[vm.current_user.channel_name].push(\"stopped_typing\");\n    }, 5000),\n    no_response: debounce(function (vm) {\n      vm.user_channels[vm.current_user.channel_name].push(\"no_response\", {\n        sender: \"sender\",\n      });\n    }, 10000),\n    send_message() {\n      if (this.to_send != \"\" && this.user_list.length > 0) {\n        this.chat_list.push({\n          sent: true,\n          text: this.to_send,\n          time: this.generate_time(),\n          current_channel: this.current_user.channel_name,\n        });\n        this.user_channels[this.current_user.channel_name].push(\"new_chat_message\", {\n          message: this.to_send,\n        });\n        this.to_send = \"\";\n        this.no_response(this);\n        this.update_scrollbar();\n      }\n    },\n    disconnect_support_chat() {\n      this.user_channels[this.current_user.channel_name].push(\"stopped_chat\", {\n        name: \"Support Agent\",\n        message: \" has ended this conversation.\",\n      });\n      this.user_channels[this.current_user.channel_name].leave();\n      // this.user_list = this.user_list.filter((user) => {\n      //   return user.channel_name != this.current_user.channel_name;\n      // });\n\n      var index = this.user_list.findIndex(obj => obj.channel_name === this.current_user.channel_name);\n      this.user_list[index].agent_username = this.agent_username;\n      this.user_list[index].is_connected = true;\n      this.user_list[index].state = \"ended\";\n      // this.current_user = this.first_name;\n    },\n    update_scrollbar() {\n      setTimeout(() => {\n        this.is_typing_indicator_on = false;\n      }, 1500);\n      setTimeout(() => {\n        document.querySelector(\".chat-body\").scrollTop = document.querySelector(\n          \".chat-body\"\n        ).scrollHeight;\n      }, 200);\n    },\n    // user_list_class(channelname) {\n      // if (channelname == this.current_channel) {\n      //   return \"nav-link active\";\n      // } else {\n      //   return \"nav-link inactive\";\n      // }\n    // },\n    select_user(user) {\n      this.current_user = user;\n      this.update_scrollbar();\n    },\n    check_current_active_user(index) {\n      if (Boolean(this.current_user) === true) {\n        return this.current_user.channel_name ===\n          this.user_list[index].channel_name\n          ? \"current-active-user\"\n          : null;\n      }\n    },\n  },\n};\n</script>\n<style scoped>\n/* ul {\n  list-style-type: none;\n  padding: 0;\n  border: 1px solid #ddd;\n} */\n\nli {\n  padding: 8px 16px;\n  border-bottom: 1px solid #ddd;\n}\n\n/* ul li:last-child {\n  border-bottom: none\n}\nul li:first-child {\n  border-top: none\n} */\n.current-active-user {\n  background: rgba(0, 0, 0, 0.1);\n}\n.darkblue-btn {\n  padding: 10px 6px;\n  font-size: 12px;\n}\n.nav-link.inactive {\n  text-align: center;\n  border: 1px solid #fff;\n}\n.nav-link.active {\n  border: 1px solid #293978;\n  text-align: center;\n}\n/* .nav-item :hover {\n  border: 1px solid #293978;\n} */\n.user-img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: solid 1px #293978;\n  display: inline-block;\n  overflow: hidden;\n  vertical-align: middle;\n}\n.chat {\n  transform: scale(0);\n  transform-origin: 0 0;\n  animation: bounce 500ms linear both;\n  border-radius: 5px;\n  padding: 5px 8px;\n  width: fit-content;\n}\n.receiver .chat {\n  color: #000 !important;\n  text-align: left;\n  /* margin-top: 3%; */\n}\n.sender {\n  color: #fff;\n  margin-left: 50%;\n  text-align: right;\n  margin-top: 3%;\n}\n.sender .chat {\n  background: #293978;\n}\n.chat-row:not(:first-child) {\n  margin: 10px 0;\n}\n#chat,\n.chat-txt input {\n  background-image: url(/img/sdk-background.png);\n}\ndiv::-webkit-scrollbar {\n  max-height: 20px;\n  width: 6px;\n  border-radius: 10px;\n}\n\n/* Track */\ndiv::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 10px;\n}\n\n/* Handle */\ndiv::-webkit-scrollbar-thumb {\n  background: #7d7d7d;\n  border-radius: 10px;\n}\n\n/* Handle on hover */\ndiv::-webkit-scrollbar-thumb:hover {\n  background: #555;\n  border-radius: 10px;\n}\n</style>\n"]}]}