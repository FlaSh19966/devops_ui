{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue?vue&type=template&id=d864dc54&scoped=true&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue","mtime":1655807120945},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div id="dialog_page">
  <div class="spinner" id="spinner" v-show="spinnerOn"></div>
  <div
    class="
      card-header
      px-0
      d-block d-sm-flex
      flex-wrap
      justify-content-between
    "
  >
    <div class="card-act d-flex flex-wrap" style="width: 100%">
      <button
        id="add_node_btn"
        class="darkblue-btn"
        data-toggle="modal"
        @click="change_root"
        data-target="#addnodemodal"
      >
        {{tlt('add_node_btn_label')}}
      </button>
      <!-- <button id="add_child_node_btn" class="darkblue-btn" @click="testFunction">Add Child Node</button> -->
      <!-- <button id="add_folder_btn" class="darkblue-btn">Add Folder</button> -->
      <button
        id="try_bot_btn"
        class="ml-auto darkblue-btn"
        data-toggle="modal"
        @click="visible_try_bot()"
      >
        {{tlt('try_bot_btn_label')}}
      </button>
    </div>
  </div>
  <div class="d-flex px-0">
    <div class="card-body px-0">
      <vue-tree-list
        @click="onClick"
        @delete-node="onDel"
        @add-node="onAddNode"
        @drop-before="dropBefore"
        @drop-after="dropAfter"
        @drop="drop"
        :model="data"
        default-tree-node-name=""
        default-leaf-node-name=""
        v-bind:default-expanded="false"
      >
        <template v-slot:leafNameDisplay="slotProps">
          <span>
            {{ slotProps.model.name }}
          </span>
          <br />
          <span class="muted" v-if="!new_child_node"
            >{{ slotProps.model.responses.length }} Responses</span
          >
        </template>
        <!-- <template v-slot:treeNodeIcon="slotProps">
        <span class="icon">
          {{ (slotProps.model.children && slotProps.model.children.length > 0 && !slotProps.expanded) ?
          '' : '' }}</span>
      </template> -->
        <!-- <span class="icon" title="Add Node" slot="addTreeNodeIcon">📂</span> -->
        <!-- <span class="icon" slot="addLeafNodeIcon">＋</span> -->
        <!-- <span class="icon" slot="editNodeIcon">📃</span> -->
        <!-- <span class="icon" slot="delNodeIcon">✂️</span> -->
        <span class="icon" slot="leafNodeIcon"></span>
        <span class="icon" slot="treeNodeIcon"></span>
      </vue-tree-list>
      <br />
      <!-- <Following part is for testing, do not remove> -->
      <!-- <button @click="testNewTree">Get new tree</button>
      <pre>
      {{ newTree }}
    </pre
      >  -->
    </div>
    <div
      class="px-0"
      id="try_bot_response"
      style="margin-right: -19px !important; margin-top: -28px !important"
    >
      <template v-if="load_bot_preview" style="overflow: hidden">
        <response-bot style="padding: 0px" :isDialogBot="true"></response-bot>
      </template>
    </div>
  </div>
  <div
    class="modal fade"
    id="addnodemodal"
    tabindex="-1"
    role="dialog"
    aria-labelledby="exampleModalLabel"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-xl" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <div class="form-group" style="width: 150px">
            <h5>{{tlt('dialog_flow_node_name_header')}}</h5>
            <input
              type="text"
              v-model.trim="node_name"
              class="form-control input-tag"
              placeholder="Enter node name"
              style="
                padding: 0.375rem 0.5rem !important;
                margin-left: 1rem !important;
              "
            />
          </div>
          <button
            v-if="new_child_node"
            @click="onDel(child_node)"
            type="button"
            class="close"
            aria-label="Close"
          >
            <span aria-hidden="true">&times;</span>
          </button>
          <button
            v-else
            type="button"
            @click="close_addnodemodal"
            class="close"
            aria-label="Close"
          >
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group" style="margin-top: 1rem !important">
            <h5>{{tlt('dialog_flow_assistant_recognizes_header')}}</h5>
            <div class="row d-flex" style="margin-left: 1rem !important">
              <div
                class="d-flex pb-2"
                v-for="(trigger, index) in triggers"
                :key="index"
              >
                <!-- class="form-control input-tag" -->
                <div v-if="!is_root" class="mr-2 my-auto">
                  <!-- <multiselect
                    id="trigger_filter_by_id"
                    :close-on-select="true"
                    :options="triggers_filter_by_options"
                    placeholder="Filter by"
                    v-model="trigger.trigger_type"
                    :allow-empty="false"
                    :show-labels="false"
                    @input="change_trigger_value(trigger.trigger_type, index)"
                  >
                  </multiselect> -->
                  <div>
                    <select
                      class="custom-select"
                      aria-label="Filter by"
                      id="trigger_filter_by_id"
                      style="
                        width: 120px;
                        height: 40px;
                        padding-left: 14px;
                        padding-bottom: 4px;
                      "
                      placeholder="Filter by"
                      v-model="trigger.trigger_type"
                      @input="
                        change_trigger_value(trigger.trigger_type, index)
                      "
                    >
                      <option value="" disabled selected>{{tlt('filter_by_label')}}</option>
                      <option value="intent">{{tlt('objective_label')}}</option>
                      <option value="entity">{{tlt('entity_label')}}</option>
                    </select>
                  </div>
                </div>
                <div
                  class="mr-2 my-auto"
                  v-if="
                    (!is_root && Boolean(trigger.trigger_type)) || is_root
                  "
                >
                  <multiselect
                    v-model="trigger.trigger_value"
                    :options="
                      is_root === true
                        ? trigger_options_intent
                        : trigger.trigger_type === 'intent'
                        ? trigger_options_intent
                        : trigger_options_entity
                    "
                    :placeholder="
                      is_root === true
                        ? 'Search Objective'
                        : trigger.trigger_type === 'intent'
                        ? 'Search Objective'
                        : 'Search Entity'
                    "
                    :close-on-select="true"
                    :clear-on-select="false"
                    :preserve-search="true"
                    :show-labels="false"
                    :allow-empty="false"
                    open-direction="bottom"
                    :searchable="true"
                    :loading="is_loading"
                    @input="
                      change_trigger_type(
                        trigger.trigger_type,
                        trigger.trigger_value,
                        index
                      )
                    "
                    @search-change="
                      search_intent_entity(trigger.trigger_type, $event)
                    "
                    style="height: 30px; padding: 0px"
                    id="res_n_int_source"
                  >
                    <!-- <option
                        v-for="(option, index) in trigger_options"
                        :key="index"
                        :value="option"
                      >
                        {{ option }}
                      </option> -->
                    <span slot="noOptions"></span>
                    <span slot="noResult">{{tlt('no_condition_text')}}</span>
                  </multiselect>
                </div>
                <div
                  class="mr-2 my-auto"
                  v-if="
                    !is_root &&
                    Boolean(trigger.trigger_type === 'entity') &&
                    Boolean(trigger.trigger_value)
                  "
                  :style="
                    is_entity_type_sys_pattern(trigger.trigger_value) === true
                      ? 'cursor: not-allowed'
                      : null
                  "
                  :title="
                    is_entity_type_sys_pattern(trigger.trigger_value) === true
                      ? 'Entity selected is of type pattern or system entity, hence further option(s) cannot be selected.'
                      : null
                  "
                >
                  <multiselect
                    id="trigger_operand_id"
                    :close-on-select="true"
                    :options="entity_operand_options"
                    placeholder="Operator"
                    v-model="trigger.operand"
                    :allow-empty="false"
                    :show-labels="false"
                    @input="
                      change_trigger_entity_value(trigger.operand, index)
                    "
                    :disabled="
                      is_entity_type_sys_pattern(trigger.trigger_value) ===
                      true
                    "
                  >
                  </multiselect>
                </div>
                <div
                  class="mr-2 my-auto"
                  v-if="
                    !is_root &&
                    Boolean(trigger.trigger_type === 'entity') &&
                    Boolean(trigger.trigger_value) &&
                    Boolean(trigger.operand === 'is')
                  "
                >
                  <!-- <p style="margin:0px !important" 
                      v-if="is_entity_type_sys_pattern(trigger.trigger_value)">
                      (Entity selected is of type pattern or system entity,<br> hence further option(s) cannot be selected.)
                    </p> -->
                  <multiselect
                    id="trigger_entity_value_id"
                    :close-on-select="true"
                    :options="entity_value_options(trigger.trigger_value)"
                    placeholder="select entity value"
                    v-model="trigger.entity_value"
                    :allow-empty="false"
                    :show-labels="false"
                    @input="
                      set_trigger_entity_value(trigger.entity_value, index)
                    "
                  >
                  </multiselect>
                </div>
                <span
                  v-if="triggers.length > 1"
                  style="cursor: pointer"
                  class="my-auto mr-2 ml-0 close"
                  @click="add_to_triggers_list('remove', index)"
                >
                  &times;
                </span>
                <span
                  v-if="triggers.length > 1"
                  class="my-auto mr-2 ml-0"
                  style="font-size: 17px"
                  >&&
                </span>
              </div>
              <button
                v-if="!is_root"
                id="add_trigger_btn"
                class="mr-2 my-auto"
                style="
                  cursor: pointer;
                  border: none;
                  height: 30px;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                  margin-top: 5px !important;
                "
                @click="add_to_triggers_list('add')"
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
          <hr />
          <div class="form-group d-flex">
            <h5 class="mr-2 p-0">{{tlt('dialog_flow_slots_header')}}</h5>
            <p class="text-muted p-0 mb-0" style="margin-top: 3px !important">
              {{tlt('dialog_flow_slots_help_text')}}
            </p>
            <div
              v-show="slots.length > 0 && is_slot"
              class="ml-auto card-act"
            >
              <button
                type="button"
                data-toggle="modal"
                data-target="#manage_handler_id"
                class="darkblue-btn"
              >
                {{tlt('manage_handler_btn')}}
              </button>
            </div>
            <label
              class="switch my-auto ml-2"
              :class="Boolean(slots.length > 0) ? '' : 'ml-auto'"
            >
              <input type="checkbox" v-model="is_slot" id="slots_required" />
              <span class="slider round" style="border-radius: 50px"></span>
            </label>
          </div>
          <div v-if="is_slot" class="form-group custom-box">
            <div v-show="slots.length > 0">
              <!-- <hr style="margin: 10px 0px" /> -->
              <div class="d-flex mb-1" style="text-align: center">
                <div class="col-sm-4">{{tlt('slots_check_for_entity_label')}}</div>
                <div class="col-sm-4">{{tlt('slots_save_it_as_label')}}</div>
                <div class="col-sm-3">{{tlt('slots_if_not_present_label')}}</div>
                <div class="col-sm-1">{{tlt('slots_action_label')}}</div>
              </div>
              <hr style="margin: 10px 0px !important" />
              <draggable
                v-model="slots"
                group="people"
                @start="drag_slots = true"
                @end="drag_slots = false"
                v-bind="dragOptionsSlots"
                handle=".handle"
              >
                <transition-group
                  type="transition"
                  :name="!drag_slots ? 'flip-list' : null"
                >
                  <div
                    class="col-sm-12 p-0 d-flex form-group"
                    v-for="(slot, index) in slots"
                    :key="slot.id"
                  >
                    <div class="col-sm-4 p-0">
                      <div>
                        <!-- <select
                        class="form-control input-tag"
                        v-model="slot.check_for"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        placeholder="Select response"
                        @click="set_slot_entity_variable(index, slot.check_for)"
                        id="res_n_int_source"
                      > -->
                        <multiselect
                          v-model="slot.check_for"
                          :options="
                            updated_entity_list_after_removing_used_entity_in_slot(
                              entity_list,
                              slots
                            )
                          "
                          :close-on-select="true"
                          :clear-on-select="false"
                          :preserve-search="true"
                          :show-labels="false"
                          :allow-empty="false"
                          placeholder="Search Entity"
                          open-direction="bottom"
                          :searchable="true"
                          :loading="is_loading"
                          @search-change="search_entity"
                          @input="
                            set_slot_entity_variable(index, slot.check_for)
                          "
                          style="height: 30px; padding: 0px"
                          id="res_n_int_source"
                        >
                          <!-- <option
                          v-for="(option, index) in temp_entities"
                          :key="index"
                          :value="option"
                        >
                          {{ option }}
                        </option> -->
                          <span slot="noOptions"></span>
                          <span slot="noResult">No Entites found.</span>
                        </multiselect>
                      </div>
                      <!-- <div v-else>Add some Entities first</div> -->
                    </div>
                    <div class="col-sm-4">
                      <input
                        class="form-control input-tag"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        placeholder="Enter variable"
                        type="text"
                        disabled
                        v-model="slot.slot"
                      />
                    </div>
                    <div class="col-sm-3 p-0" style="text-align: center">
                      <input
                        id="checkfocus"
                        class="form-control input-tag"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        placeholder="Response ID's"
                        type="text"
                        @focusout="
                          add_slot_to_assistant_response(
                            'text',
                            index,
                            slot.check_for,
                            slot.slot,
                            slot.responses
                          )
                        "
                        @focusin="
                          remove_slot_to_assistant_response(index, slot.slot)
                        "
                        v-model="slot.responses"
                        :disabled="true"
                      />
                      <!-- :disabled="slot.responses.length > 1" -->
                    </div>
                    <div class="col-sm-1 pr-0">
                      <div class="col-sm-12 d-flex p-0">
                        <div
                          class="col-sm-4 px-auto"
                          style="padding-top: 8px"
                        >
                          <span
                            style="
                              float: right;
                              cursor: pointer;
                              font-size: 14px;
                            "
                            class="muted"
                          >
                            <a
                              data-toggle="modal"
                              href="#slotmodal"
                              @click="
                                on_open_slots_modal(
                                  slot.slot,
                                  index,
                                  slot.check_for
                                )
                              "
                            >
                              <i
                                title="Customize Slot"
                                class="fas fa-cog"
                              ></i>
                            </a>
                          </span>
                        </div>
                        <div
                          class="col-sm-4 px-auto"
                          style="padding-top: 10px"
                        >
                          <i
                            class="fas fa-arrows-alt handle"
                            style="cursor: pointer; float: right !important"
                            title="Drag to Change Order"
                            v-if="slots.length != 1"
                          ></i>
                        </div>
                        <div
                          class="col-sm-4 px-auto"
                          style="padding-top: 6px"
                        >
                          <span
                            style="float: right; cursor: pointer"
                            @click="
                              add_to_slots_list(
                                'remove',
                                index,
                                slot.responses
                              )
                            "
                            class="close"
                            title="Delete Slot"
                          >
                            &times;
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </transition-group>
              </draggable>
              <!-- <hr /> -->
            </div>
            <div class="d-flex">
              <div class="d-flex">
                <p
                  class="sub_heading"
                  style="margin-top: 6px; margin-bottom: 5px"
                >
                  {{tlt('sms_model_msg_label')}}
                </p>
                <button
                  style="
                    cursor: pointer;
                    border: none;
                    background: transparent url('@portal/assets/img/plus.png')
                      0% 0% no-repeat padding-box;
                  "
                  @click="add_to_slots_list('add')"
                >
                  <img src="/img/black_plus.png" alt="" />
                </button>
              </div>
            </div>
          </div>
          <hr />
          <div class="form-group d-flex">
            <h5 class="mr-2 p-0">{{tlt('webhook_header')}}</h5>
            <p class="text-muted p-0 mb-0" style="margin-top: 3px !important">
              {{tlt('webhook_help_text')}}
            </p>
            <label class="switch ml-auto my-auto">
              <input
                type="checkbox"
                v-model="is_webhook"
                id="webhook_required"
              />
              <span class="slider round" style="border-radius: 50px"></span>
            </label>
          </div>
          <div style="color: red" v-if="is_webhook && !is_webhook_details">
            {{tlt('set_webhook_help_text')}}
          </div>
          <!-- <hr style="margin: 10px 0px" /> -->
          <div
            v-if="is_webhook && is_webhook_details"
            class="form-group custom-box"
          >
            <div class="d-flex">
              <p
                class="ml-0 sub_heading"
                style="margin-top: 6px; margin-bottom: 0px; margin-left: 10px"
              >
                {{tlt('select_webhook_label')}} :
              </p>
              <div class="col-sm-3 ml-2 p-0">
                <multiselect
                  v-model="webhook_id"
                  :options="webhook_list.map((webhook) => webhook.id)"
                  :custom-label="
                    (webhook) =>
                      webhook_list.find((x) => x.id == webhook).name
                  "
                  :close-on-select="true"
                  :clear-on-select="false"
                  :preserve-search="true"
                  :show-labels="false"
                  :allow-empty="false"
                  placeholder="Search Webhook"
                  open-direction="bottom"
                  :searchable="true"
                  :loading="is_loading"
                  @search-change="search_webhook"
                  @input="set_webhook_return_variable(webhook_id)"
                  style="height: 30px; padding: 0px"
                  id="res_n_int_source"
                >
                  <!-- @input="set_slot_entity_variable(index, slot.check_for)" -->
                  <!-- <option
                v-for="(option, index) in temp_entities"
                :key="index"
                :value="option"
              >
                {{ option }}
              </option> -->
                  <span slot="noOptions"></span>
                  <span slot="noResult">{{tlt('no_webhook_found_text')}}</span>
                </multiselect>
              </div>
              <p
                class="ml-2 sub_heading"
                style="margin-top: 8px; margin-bottom: 0px; margin-left: 10px"
              >
                {{tlt('webhook_return_variable_label')}} :
              </p>
              <div class="col-sm-3 p-0 ml-2" style="text-align: center">
                <input
                  id="webhook_variable_id"
                  class="form-control input-tag"
                  style="width: 100%; padding: 0.375rem 0.5rem"
                  placeholder="Enter variable e.g. $webhook_result"
                  type="text"
                  v-model="webhook_variable"
                  :style="
                    webhook_variable.length > 0
                      ? 'padding-left:19px !important;'
                      : 'padding: 0.375rem 0.5rem !important'
                  "
                />
                <span v-if="webhook_variable.length > 0" class="unit">$</span>
              </div>
              <span
                style="margin-left: 0px; color: #0645ad"
                class="my-auto ml-2"
              >
                <i
                  class="fa fa-info-circle"
                  aria-hidden="true"
                  style="font-size: 16px"
                  title="To avoid overide always use unique webhook return variable"
                >
                </i>
              </span>
            </div>
            <div
              :class="
                Boolean(webhook_mapping.length > 0)
                  ? 'custom-button-box px-3 py-2 pt-0 mt-3 mb-3'
                  : ''
              "
            >
              <div v-show="webhook_mapping.length > 0">
                <!-- <hr style="margin: 10px 0px" /> -->
                <div
                  v-if="is_webhook"
                  class="d-flex mb-1"
                  style="text-align: center"
                >
                  <div class="col-sm-6">{{tlt('add_parameter_key_label')}}</div>
                  <div class="col-sm-6">{{tlt('add_parameter_value_label')}}</div>
                </div>
                <hr style="margin: 10px 0px !important" />
                <div v-if="is_webhook">
                  <div
                    class="col-sm-12 p-0 d-flex form-group"
                    v-for="(params, index) in webhook_mapping"
                    :key="index"
                  >
                    <div class="col-sm-6 pr-2 p-0">
                      <input
                        class="form-control input-tag"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        placeholder="Enter name"
                        type="text"
                        v-model="params.key"
                      />
                    </div>
                    <div class="col-sm-6 pl-2 p-0 d-flex">
                      <input
                        class="form-control input-tag"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        placeholder="Enter value or you can also use slot variable ex. $date"
                        type="text"
                        v-model="params.value"
                      />
                      <span
                        style="cursor: pointer"
                        @click="add_to_webhook_mapping('remove', index)"
                        class="close ml-2 my-auto"
                        title="Delete Parameter"
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <!-- <div>
                  <div class="d-flex">
                  <h5>Return Variable : </h5>
                  <h5 class="pl-1">{{webhook_variable}}</h5>
                  <div class="ml-auto" style="padding-right: 15px;">
                  <span
                    style="float: right; cursor: pointer; font-size: 14px"
                    class="muted"
                  >
                    <a
                      data-toggle="modal"
                      href="#webhookmodal"
                      @click="
                        on_open_webhook_modal(webhook_variable)
                      "
                    >
                      <i title="Customize Webhook Response" class="fas fa-cog"></i>
                    </a>
                  </span>
                </div>
                  </div>
                </div> -->
                  <!-- <hr style="margin: 10px 0px" /> -->
                </div>
              </div>
              <div class="mt-2 d-flex">
                <p
                  class="sub_heading"
                  style="margin-top: 3px; margin-bottom: 5px"
                >
                  {{tlt('add_parameter_btn_label')}}
                </p>
                <button
                  style="
                    cursor: pointer;
                    border: none;
                    background: transparent url('@portal/assets/img/plus.png')
                      0% 0% no-repeat padding-box;
                    height: 29px;
                    margin-left: 10px;
                  "
                  @click="add_to_webhook_mapping('add')"
                >
                  <img src="/img/black_plus.png" alt="" />
                </button>
              </div>
            </div>
          </div>
          <hr />
          <div class="form-group d-flex">
            <h5 class="mr-2 p-0">{{tlt('notification_header')}}</h5>
            <p class="text-muted p-0 mb-0" style="margin-top: 3px !important">
              {{tlt('notification_help_text')}}
            </p>
            <label
              class="switch ml-auto"
              style="margin-top: 4px; margin-bottom: 0px"
            >
              <input
                type="checkbox"
                v-model="is_notification"
                id="notifications_required"
              />
              <span class="slider round" style="border-radius: 50px"></span>
            </label>
          </div>
          <div v-if="is_notification">
            <!-- <hr style="margin: 10px 0px" /> -->
            <div class="custom-box">
              <!-- <hr style="margin: 10px 0px" /> -->
              <div class="d-flex mb-1" style="text-align: center">
                <div class="col-sm-3">{{tlt('notification_type_label')}}</div>
                <div class="col-sm-3">
                  {{tlt('variable_name_label')}}
                  <span
                    style="margin-left: 12px; color: #0645ad"
                    class="my-auto"
                  >
                    <i
                      class="fa fa-info-circle"
                      aria-hidden="true"
                      style="font-size: 16px"
                      title="the value here should be the value of 'Save it as' of any slots used to capture email/sms. Example $email_id."
                    >
                    </i>
                  </span>
                </div>
                <div class="col-sm-3">{{tlt('check_for_template_label')}}</div>
                <div class="col-sm-2">{{tlt('response_id_label')}}</div>
              </div>
              <hr style="margin: 10px 0px !important" />
              <div class="col-sm-12 p-0 d-flex form-group">
                <div class="col-sm-3 p-0">
                  <div>
                    <multiselect
                      v-model="notifications.notify[0].type"
                      :options="notifications_notify_type_list"
                      :close-on-select="true"
                      :clear-on-select="false"
                      :preserve-search="true"
                      :show-labels="false"
                      :allow-empty="false"
                      placeholder="Select notification type"
                      open-direction="bottom"
                      :searchable="true"
                      style="height: 30px; padding: 0px"
                      id="notifications_notify_type_id"
                    >
                    </multiselect>
                  </div>
                </div>
                <div class="col-sm-3">
                  <div>
                    <multiselect
                      :close-on-select="true"
                      v-model="notifications.notify[0].slot"
                      :options="insert_slot_variable_options"
                      placeholder="Select or enter to add"
                      :show-labels="false"
                      :clear-on-select="false"
                      open-direction="top"
                      :max-height="120"
                      :searchable="true"
                      :allow-empty="false"
                      :preserve-search="true"
                      @open="add_to_insert_slot_variable_options"
                      @tag="addTag"
                      :taggable="true"
                      tag-position="top"
                      tag-placeholder="Add this as new value"
                    >
                      <span slot="noResult">{{tlt('no_variable_found_text')}}</span>
                    </multiselect>
                  </div>
                  <!-- <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Enter variable e.g.$email_id"
                    type="text"
                    v-model="notifications.notify[0].slot"
                  /> -->
                </div>
                <div class="col-sm-3 p-0">
                  <div>
                    <multiselect
                      v-model="notifications.notify[0].template_name"
                      :options="
                        notifications_notify_template_list.map((name) => {
                          return name.template_name;
                        })
                      "
                      :close-on-select="true"
                      :clear-on-select="false"
                      :preserve-search="true"
                      :show-labels="false"
                      :allow-empty="false"
                      placeholder="Search template name"
                      open-direction="bottom"
                      :searchable="true"
                      :loading="is_loading"
                      @search-change="search_template_name"
                      @input="
                        set_notifications_notify_template_id(
                          notifications.notify[0].template_name
                        )
                      "
                      style="height: 30px; padding: 0px"
                      id="notifications_notify_template_id"
                    >
                      <!-- <span slot="noOptions"></span> -->
                      <span slot="noResult">No Template found.</span>
                    </multiselect>
                  </div>
                </div>
                <div class="col-sm-2" style="text-align: center">
                  <input
                    id="notifications_responses_id"
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Response ID's"
                    type="text"
                    v-model="notifications.responses"
                    :disabled="true"
                  />
                </div>
                <div class="col-sm-1 pr-0">
                  <div class="col-sm-12 d-flex p-0">
                    <div
                      class="col-sm-12 p-0 px-auto"
                      style="padding-top: 8px !important"
                    >
                      <span
                        style="float: right; cursor: pointer; font-size: 14px"
                        class="muted"
                      >
                        <a
                          data-toggle="modal"
                          href="#notificationmodal"
                          @click="on_open_notification_modal()"
                        >
                          <i
                            title="Customize Notification"
                            class="fas fa-cog"
                          ></i>
                        </a>
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              <!-- <hr /> -->
            </div>
          </div>
          <hr />
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              {{tlt('assistant_response_header')}}
            </h5>
            <div
              v-for="(new_response, index) in filtered_assistant_response"
              :key="index"
              class="form-group"
            >
              <div v-if="new_response.type == 'text'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="add_to_assistant_response_list('remove', new_response.id)"
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === filtered_assistant_response.length-1"
                  :style="index === filtered_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index+1].id,
                      'filter_assistance'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index-1].id,
                      'filter_assistance'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_resp_text_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        :id="
                          'assistance_response_' +
                          new_response.id +
                          '_' +
                          num
                        "
                        @focusout="
                          insert_variable_block_off(new_response.id, num)
                        "
                        @focusin="
                          insert_variable_block_on(new_response.id, num)
                        "
                      />
                      <div
                        style="opacity: 0"
                        :id="
                          'insert_variable_block' +
                          new_response.id +
                          '_' +
                          num
                        "
                      >
                        <a
                          @click="
                            set_assistance_response_index(
                              new_response.id,
                              num
                            )
                          "
                          class="example fa-stack fa-1x"
                          id="insert_variable_button"
                          type="button"
                          data-toggle="modal"
                          data-target="#insert_variable_modal"
                          style="margin-top: 20px !important"
                        >
                          <i
                            class="fas fa-circle fa-stack-2x"
                            style="color: #dbe2e8"
                            :id="
                              'insert_variable_circle_' +
                              new_response.id +
                              '_' +
                              num
                            "
                          >
                          </i>
                          <span
                            class="fa fa-stack-1x"
                            style="color: white"
                            @mouseover="
                              circle_mouseover(new_response.id, num)
                            "
                            @mouseout="
                              circle_mouseout(new_response.id, num)
                            "
                          >
                            <span style="font-size: 14px; display: block">
                              {...}
                            </span>
                          </span>
                        </a>
                      </div>
                      <!-- v-on:keyup.enter="
                          add_to_assistant_response_text_list('add', new_response.id)
                        " -->
                      <span
                        style="margin-left: 12px; color: #0645ad"
                        class="my-auto"
                        v-if="
                          check_slot_value_use_in_response(
                            new_response.values[num]
                          )
                        "
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('assist_resp_add_value_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list('add', new_response.id)
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >Response variations are set to
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    Set to
                    <a
                      @click="
                        select_response_variation(index, 'sequential')
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                    >
                      sequential
                    </a>
                    <span v-show="new_response.variation != 'sequential'"
                      >|</span
                    >
                    <a
                      @click="select_response_variation(index, 'multiline')"
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                    >
                      multiline
                    </a>
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                      >|</span
                    >
                    <a
                      @click="select_response_variation(index, 'random')"
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                    >
                      random
                    </a>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="add_to_assistant_response_list('remove', new_response.id)"
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === filtered_assistant_response.length-1"
                  :style="index === filtered_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index+1].id,
                      'filter_assistance'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index-1].id,
                      'filter_assistance'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_resp_img_response_header')}} : {{ new_response.id }}
                </p>
                <!-- <p>Enter Name (Optional)</p>
                    <input class="form-control input-tag" type="text" v-model="new_response.image_name"> -->
                <!-- <p class="mb-0">Image source :</p> -->
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                  />
                  <p
                    v-show="
                      check_image_url(new_response.source) == false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('assist_resp_card_response_image_condition_text')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'video'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="add_to_assistant_response_list('remove', new_response.id)"
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === filtered_assistant_response.length-1"
                  :style="index === filtered_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index+1].id,
                      'filter_assistance'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index-1].id,
                      'filter_assistance'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_resp_video_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Video url (It is recommended to use embed link.)"
                    type="text"
                    v-model.trim="new_response.source"
                  />
                  <p
                    v-show="
                      check_video_url(new_response.source) === false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('card_response_video_condition_text')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="add_to_assistant_response_list('remove', new_response.id)"
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === filtered_assistant_response.length-1"
                  :style="index === filtered_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index+1].id,
                      'filter_assistance'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index-1].id,
                      'filter_assistance'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_resp_choice_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="d-flex mb-2"
                      >
                        <div class="input-group" style="display: block">
                          <div class="d-flex">
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              maxlength="50"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 5px 0px 0px 5px !important;
                              "
                            />
                            <input
                              type="text"
                              v-model.trim="response.payload"
                              class="form-control input-tag"
                              :placeholder="
                                change_btn_value_placeholder(response.type)
                              "
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 0px !important;
                              "
                            />
                            <div class="input-group-append">
                              <select
                                class="form-control"
                                v-model="response.type"
                                style="
                                  width: 100px !important;
                                  height: 38px;
                                  padding: 0px !important;
                                "
                                id="button_type_list_id"
                              >
                                <option
                                  v-for="(
                                    option, index
                                  ) in button_type_list"
                                  :key="index"
                                  :value="option.value"
                                >
                                  {{ option.name }}
                                </option>
                              </select>
                            </div>
                          </div>
                        </div>
                        <span
                          style="cursor: pointer; float: right"
                          class="close my-auto mr-0 ml-2"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('assist_resp_add_choice_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'card'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="add_to_assistant_response_list('remove', new_response.id)"
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === filtered_assistant_response.length-1"
                  :style="index === filtered_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index+1].id,
                      'filter_assistance'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      filtered_assistant_response[index-1].id,
                      'filter_assistance'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_resp_card_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div class="row">
                      <div
                        v-for="(response, num) in new_response.card_list"
                        :key="num"
                        class="col-sm-4 pb-3"
                      >
                        <div class="card">
                          <div class="card-body">
                            <p
                              class="sub_heading_carousel"
                              style="color: dimgray; margin-bottom: 5px"
                            >
                              {{tlt('assist_resp_card_response_card_label')}} : {{ num + 1 }}
                            </p>
                            <span
                              style="
                                cursor: pointer;
                                float: right;
                                margin-top: -29px;
                              "
                              class="close ml-auto mr-0"
                              title="Remove Card Response"
                              v-if="new_response.card_list.length > 1"
                              @click="
                                add_to_assistant_response_carousel_card_list(
                                  'remove',
                                  new_response.id,
                                  num
                                )
                              "
                            >
                              &times;</span
                            >
                            <div>
                              <div class="d-sm-flex justify-content-start">
                                <h6
                                  class="label_header"
                                  style="margin-top: 0"
                                >
                                  {{tlt('assist_resp_card_response_file_type_label')}}:
                                </h6>
                                <div class="radio my-auto radio-label">
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="true"
                                      id="carousel_img"
                                    />
                                    <span
                                      class="icn"
                                      id="filter_portal_user_radio"
                                    ></span>
                                    {{tlt('assist_resp_card_response_image_label')}}
                                  </label>
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="false"
                                      id="carousel_video"
                                    />
                                    <span class="icn"></span> {{tlt('assist_resp_card_response_video_label')}}
                                  </label>
                                </div>
                              </div>
                            </div>
                            <div v-if="response.is_image">
                              <input
                                class="form-control input-tag"
                                style="
                                  width: 100%;
                                  padding: 0.375rem 0.5rem;
                                "
                                placeholder="Enter image URL"
                                type="text"
                                v-model="response.image"
                              />
                              <p
                                v-show="
                                  check_image_url(response.image) ===
                                    false && Boolean(response.image)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('assist_resp_card_response_image_condition_text')}}
                              </p>
                            </div>
                            <div v-else>
                              <input
                                type="text"
                                v-model.trim="response.video"
                                class="form-control input-tag"
                                placeholder="Enter video url."
                                style="
                                  width: 100% !important;
                                  padding: 0.375rem 0.5rem;
                                "
                              />
                              <p
                                v-show="
                                  check_video_url(response.video) ===
                                    false && Boolean(response.video)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('card_response_video_condition_text')}}
                              </p>
                            </div>
                            <label class="label_header">{{tlt('assist_resp_card_response_title_label')}}</label>
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                              "
                            />
                            <label class="label_header">{{tlt('assist_resp_card_response_desc_label')}}</label>
                            <textarea
                              type="text"
                              v-model.trim="response.text"
                              class="form-control input-tag textarea-style"
                              rows="3"
                              cols="20"
                              placeholder="Enter Description"
                              style="resize: none"
                            ></textarea>
                            <div>
                              <p class="label_header">{{tlt('assist_resp_card_response_button_label')}}</p>
                              <div class="ScrollStyle">
                                <div
                                  v-for="(
                                    button, btn_num
                                  ) in response.buttons"
                                  :key="btn_num"
                                  class="mb-2"
                                >
                                  <div class="d-flex">
                                    <div
                                      class="input-group"
                                      style="display: block"
                                    >
                                      <div class="d-flex">
                                        <input
                                          type="text"
                                          v-model.trim="button.title"
                                          class="form-control input-tag"
                                          placeholder="Enter title"
                                          maxlength="50"
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 5px 0px 0px 5px !important;
                                          "
                                        />
                                        <input
                                          type="text"
                                          v-model.trim="button.value"
                                          class="form-control input-tag"
                                          :placeholder="
                                            change_btn_value_placeholder(
                                              button.type
                                            )
                                          "
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 0px !important;
                                          "
                                        />
                                        <div class="input-group-append">
                                          <select
                                            class="form-control"
                                            v-model="button.type"
                                            style="
                                              width: 20px !important;
                                              height: 38px;
                                              padding: 0px !important;
                                            "
                                            id="button_type_list_id"
                                          >
                                            <option
                                              v-for="(
                                                option, index
                                              ) in button_type_list"
                                              :key="index"
                                              :value="option.value"
                                            >
                                              {{ option.name }}
                                            </option>
                                          </select>
                                        </div>
                                      </div>
                                    </div>
                                    <span
                                      style="
                                        cursor: pointer;
                                        float: right;
                                        margin-top: 8px;
                                      "
                                      class="close mx-1"
                                      title="Remove Button Response"
                                      v-if="response.buttons.length > 1"
                                      @click="
                                        add_to_assistant_response_carousel_card_button_list(
                                          'remove',
                                          new_response.id,
                                          num,
                                          btn_num
                                        )
                                      "
                                    >
                                      &times;</span
                                    >
                                  </div>
                                </div>
                              </div>
                              <div class="d-flex">
                                <p
                                  style="
                                    margin-top: 6px;
                                    margin-bottom: 5px;
                                  "
                                >
                                  {{tlt('assist_resp_card_response_add_btn_label')}}
                                </p>
                                <button
                                  style="
                                    cursor: pointer;
                                    border: none;
                                    background: transparent
                                      url('@portal/assets/img/plus.png') 0%
                                      0% no-repeat padding-box;
                                  "
                                  @click="
                                    add_to_assistant_response_carousel_card_button_list(
                                      'add',
                                      new_response.id,
                                      num
                                    )
                                  "
                                >
                                  <img src="/img/black_plus.png" alt="" />
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('assist_resp_card_response_add_card_label')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_carousel_card_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div style="margin-left: 1rem !important" class="d-flex">
              <p class="sub_heading my-0">{{tlt('response_type_first_label')}} :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading my-0" style="margin-left: 20px">
                {{tlt('assist_resp_add_response_btn')}}
              </p>
              <button
                style="
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="add_to_assistant_response_list('add')"
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
          <hr />
          <div class="form-group">
            <div class="d-flex">
              <h5 class="mr-2 p-0">{{tlt('dialog_flow_assist_should_label')}}</h5>
              <p
                class="text-muted p-0 mb-0"
                style="margin-top: 3px !important"
              >
                {{tlt('dialog_flow_assist_should_help_text')}}
              </p>
            </div>
            <div class="d-flex" style="margin-left: 1rem !important">
              <select
                class="form-control input-tag"
                v-model="save_then_assistant_should"
                @click="set_next_step()"
                style="width: 120px; height: 30px; padding: 0px"
                id="res_n_int_source"
              >
                <option value="" disabled selected>{{tlt('select_option_label')}}</option>
                <option
                  v-for="(option, index) in then_assistant_should"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <select
                class="form-control input-tag"
                v-if="save_then_assistant_should == 'jump_to'"
                v-model="jump_to_node_id"
                @click="set_next_step()"
                style="
                  width: 120px;
                  height: 30px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option value="" disabled selected>{{tlt('select_node_label')}}</option>
                <option
                  v-for="(option, index) in updated_node_list"
                  :key="index"
                  :value="option.id"
                >
                  {{ option.name }}
                </option>
              </select>
            </div>
          </div>
        </div>
        <div class="card-act modal-footer">
          <!-- These conditions for saving node defines that we are adding child node/editing a node OR adding a new root node -->
          <button
            v-if="is_show_edit"
            type="button"
            @click="editNode"
            class="darkblue-btn"
          >
            {{tlt('save_changes_main_btn')}}
          </button>
          <button v-else type="button" @click="addNode" class="darkblue-btn">
            {{tlt('Save_btn_label')}}
          </button>
        </div>
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="slotmodal"
    tabindex="-1"
    role="dialog"
    aria-labelledby="slotmodal"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 style="font-style: regular" class="modal-title">
            {{tlt('slots_config_slot_header')}} {{ edit_slot_index }}
          </h5>
          <button
            type="button"
            @click="on_close_slots_modal()"
            class="close"
            data-dismiss="modal"
            aria-hidden="true"
          >
            ×
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              {{tlt('slots_assistant_response_header')}}
            </h5>
            <div
              v-for="(
                new_response, index
              ) in unfilled_slot_assistant_response"
              :key="index"
              class="form-group"
            >
              <div v-if="new_response.type == 'text'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === unfilled_slot_assistant_response.length-1"
                  :style="index === unfilled_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('sots_text_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        :id="
                          'assistance_response_' + new_response.id + '_' + num
                        "
                        @focusout="
                          insert_variable_block_off(new_response.id, num)
                        "
                        @focusin="
                          insert_variable_block_on(new_response.id, num)
                        "
                        v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',
                            new_response.id
                          )
                        "
                      />
                      <div
                        style="opacity: 0"
                        :id="
                          'insert_variable_block' +
                          new_response.id +
                          '_' +
                          num
                        "
                      >
                        <a
                          @click="
                            set_assistance_response_index(
                              new_response.id,
                              num
                            )
                          "
                          class="example fa-stack fa-1x"
                          id="insert_variable_button"
                          type="button"
                          data-toggle="modal"
                          data-target="#insert_variable_modal"
                          style="margin-top: 20px !important"
                        >
                          <i
                            class="fas fa-circle fa-stack-2x"
                            style="color: #dbe2e8"
                            :id="
                              'insert_variable_circle_' +
                              new_response.id +
                              '_' +
                              num
                            "
                          >
                          </i>
                          <span
                            class="fa fa-stack-1x"
                            style="color: white"
                            @mouseover="
                              circle_mouseover(new_response.id, num)
                            "
                            @mouseout="circle_mouseout(new_response.id, num)"
                          >
                            <span style="font-size: 14px; display: block">
                              {...}
                            </span>
                          </span>
                        </a>
                      </div>
                      <span
                        style="margin-left: 12px; color: #0645ad"
                        class="my-auto"
                        v-if="
                          check_slot_value_use_in_response(
                            new_response.values[num]
                          )
                        "
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('slots_add_value_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >{{tlt('response_variation_text1')}}
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    {{tlt('response_variation_text2')}}
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                    >
                      {{tlt('response_variation_text3')}}
                    </a>
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                    >
                      {{tlt('response_variation_text4')}}
                    </a>
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                    >
                      {{tlt('response_variation_text5')}}
                    </a>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === unfilled_slot_assistant_response.length-1"
                  :style="index === unfilled_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">Image Response : {{ new_response.id }}</p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                  />
                  <p
                    v-show="
                      check_image_url(new_response.source) == false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('slots_img_condition_text')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'video'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === unfilled_slot_assistant_response.length-1"
                  :style="index === unfilled_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('sots_video_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Video url (It is recommended to use embed link.)"
                    type="text"
                    v-model.trim="new_response.source"
                  />
                  <p
                    v-show="
                      check_video_url(new_response.source) === false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('slots_video_condition_text')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === unfilled_slot_assistant_response.length-1"
                  :style="index === unfilled_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('sots_choice_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="d-flex mb-2"
                      >
                        <div class="input-group" style="display: block">
                          <div class="d-flex">
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              maxlength="50"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 5px 0px 0px 5px !important;
                              "
                            />
                            <input
                              type="text"
                              v-model.trim="response.payload"
                              class="form-control input-tag"
                              :placeholder="
                                change_btn_value_placeholder(response.type)
                              "
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 0px !important;
                              "
                            />
                            <div class="input-group-append">
                              <select
                                class="form-control"
                                v-model="response.type"
                                style="
                                  width: 100px !important;
                                  height: 38px;
                                  padding: 0px !important;
                                "
                                id="button_type_list_id"
                              >
                                <option
                                  v-for="(option, index) in button_type_list"
                                  :key="index"
                                  :value="option.value"
                                >
                                  {{ option.name }}
                                </option>
                              </select>
                            </div>
                          </div>
                        </div>
                        <span
                          style="cursor: pointer; float: right"
                          class="close my-auto mr-0 ml-2"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('sots_add_choice_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'card'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === unfilled_slot_assistant_response.length-1"
                  :style="index === unfilled_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      unfilled_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('sots_card_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div class="row">
                      <div
                        v-for="(response, num) in new_response.card_list"
                        :key="num"
                        class="col-sm-4 pb-3"
                      >
                        <div class="card">
                          <div class="card-body">
                            <p
                              class="sub_heading_carousel"
                              style="color: dimgray; margin-bottom: 5px"
                            >
                              {{tlt('card_response_card_label')}} : {{ num + 1 }}
                            </p>
                            <span
                              style="
                                cursor: pointer;
                                float: right;
                                margin-top: -29px;
                              "
                              class="close ml-auto mr-0"
                              title="Remove Card Response"
                              v-if="new_response.card_list.length > 1"
                              @click="
                                add_to_assistant_response_carousel_card_list(
                                  'remove',
                                  new_response.id,
                                  num
                                )
                              "
                            >
                              &times;</span
                            >
                            <div>
                              <div class="d-sm-flex justify-content-start">
                                <h6
                                  class="label_header"
                                  style="margin-top: 0"
                                >
                                  {{tlt('card_response_file_type_label')}}:
                                </h6>
                                <div class="radio my-auto radio-label">
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="true"
                                      id="carousel_img"
                                    />
                                    <span
                                      class="icn"
                                      id="filter_portal_user_radio"
                                    ></span>
                                    {{tlt('card_response_image_label')}}
                                  </label>
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="false"
                                      id="carousel_video"
                                    />
                                    <span class="icn"></span> {{tlt('card_response_video_label')}}
                                  </label>
                                </div>
                              </div>
                            </div>
                            <div v-if="response.is_image">
                              <input
                                class="form-control input-tag"
                                style="width: 100%; padding: 0.375rem 0.5rem"
                                placeholder="Enter image URL"
                                type="text"
                                v-model="response.image"
                              />
                              <p
                                v-show="
                                  check_image_url(response.image) === false &&
                                  Boolean(response.image)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                               {{tlt('card_response_image_condition_text')}}
                              </p>
                            </div>
                            <div v-else>
                              <input
                                type="text"
                                v-model.trim="response.video"
                                class="form-control input-tag"
                                placeholder="Enter video url.."
                                style="
                                  width: 100% !important;
                                  padding: 0.375rem 0.5rem;
                                "
                              />
                              <p
                                v-show="
                                  check_video_url(response.video) === false &&
                                  Boolean(response.video)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('card_response_video_condition_text')}}
                              </p>
                            </div>
                            <label class="label_header">{{tlt('card_response_title_label')}}</label>
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                              "
                            />
                            <label class="label_header">{{tlt('card_response_desc_label')}}</label>
                            <textarea
                              type="text"
                              v-model.trim="response.text"
                              class="form-control input-tag textarea-style"
                              rows="3"
                              cols="20"
                              placeholder="Enter Description"
                              style="resize: none"
                            ></textarea>
                            <div>
                              <p class="label_header">{{tlt('card_response_button_label')}}</p>
                              <!-- <div class="custom-button-box px-3 py-2 pt-0 mt-3 mb-3"> -->
                              <div class="ScrollStyle">
                                <div
                                  v-for="(
                                    button, btn_num
                                  ) in response.buttons"
                                  :key="btn_num"
                                  class="mb-2"
                                >
                                  <div class="d-flex">
                                    <div
                                      class="input-group"
                                      style="display: block"
                                    >
                                      <div class="d-flex">
                                        <input
                                          type="text"
                                          v-model.trim="button.title"
                                          class="form-control input-tag"
                                          placeholder="Enter title"
                                          maxlength="50"
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 5px 0px 0px 5px !important;
                                          "
                                        />
                                        <input
                                          type="text"
                                          v-model.trim="button.value"
                                          class="form-control input-tag"
                                          :placeholder="
                                            change_btn_value_placeholder(
                                              button.type
                                            )
                                          "
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 0px !important;
                                          "
                                        />
                                        <div class="input-group-append">
                                          <select
                                            class="form-control"
                                            v-model="button.type"
                                            style="
                                              width: 20px !important;
                                              height: 38px;
                                              padding: 0px !important;
                                            "
                                            id="button_type_list_id"
                                          >
                                            <option
                                              v-for="(
                                                option, index
                                              ) in button_type_list"
                                              :key="index"
                                              :value="option.value"
                                            >
                                              {{ option.name }}
                                            </option>
                                          </select>
                                        </div>
                                      </div>
                                    </div>
                                    <span
                                      style="
                                        cursor: pointer;
                                        float: right;
                                        margin-top: 8px;
                                      "
                                      class="close mx-1"
                                      title="Remove Button Response"
                                      v-if="response.buttons.length > 1"
                                      @click="
                                        add_to_assistant_response_carousel_card_button_list(
                                          'remove',
                                          new_response.id,
                                          num,
                                          btn_num
                                        )
                                      "
                                    >
                                      &times;</span
                                    >
                                  </div>
                                </div>
                              </div>
                              <div class="d-flex">
                                <p
                                  style="margin-top: 6px; margin-bottom: 5px"
                                >
                                  {{tlt('card_response_add_btn_label')}}
                                </p>
                                <button
                                  style="
                                    cursor: pointer;
                                    border: none;
                                    background: transparent
                                      url('@portal/assets/img/plus.png') 0% 0%
                                      no-repeat padding-box;
                                  "
                                  @click="
                                    add_to_assistant_response_carousel_card_button_list(
                                      'add',
                                      new_response.id,
                                      num
                                    )
                                  "
                                >
                                  <img src="/img/black_plus.png" alt="" />
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('card_response_add_card_label')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_carousel_card_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex" style="margin-left: 1rem !important">
              <p class="sub_heading">{{tlt('slots_response_type_first_label')}} :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <p class="sub_heading" style="margin-left: 20px">
                {{tlt('slots_add_response_btn')}}
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="
                  add_slot_to_assistant_response(
                    'Addbtn',
                    'unused',
                    edit_slot_check_for,
                    edit_slot_slot_variable,
                    null,
                    'unfilled_slot'
                  )
                "
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
          <div v-if="is_validation_entity" class="form-group">
            <hr />
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              {{tlt('assist_validate_response_header')}}
            </h5>
            <div
              v-for="(
                new_response, index
              ) in validation_slot_assistant_response"
              :key="index"
              class="form-group"
            >
              <div v-if="new_response.type == 'text'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === validation_slot_assistant_response.length-1"
                  :style="index === validation_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_validate_text_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        :id="
                          'assistance_response_' + new_response.id + '_' + num
                        "
                        @focusout="
                          insert_variable_block_off(new_response.id, num)
                        "
                        @focusin="
                          insert_variable_block_on(new_response.id, num)
                        "
                        v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',
                            new_response.id
                          )
                        "
                      />
                      <div
                        style="opacity: 0"
                        :id="
                          'insert_variable_block' +
                          new_response.id +
                          '_' +
                          num
                        "
                      >
                        <a
                          @click="
                            set_assistance_response_index(
                              new_response.id,
                              num
                            )
                          "
                          class="example fa-stack fa-1x"
                          id="insert_variable_button"
                          type="button"
                          data-toggle="modal"
                          data-target="#insert_variable_modal"
                          style="margin-top: 20px !important"
                        >
                          <i
                            class="fas fa-circle fa-stack-2x"
                            style="color: #dbe2e8"
                            :id="
                              'insert_variable_circle_' +
                              new_response.id +
                              '_' +
                              num
                            "
                          >
                          </i>
                          <span
                            class="fa fa-stack-1x"
                            style="color: white"
                            @mouseover="
                              circle_mouseover(new_response.id, num)
                            "
                            @mouseout="circle_mouseout(new_response.id, num)"
                          >
                            <span style="font-size: 14px; display: block">
                              {...}
                            </span>
                          </span>
                        </a>
                      </div>
                      <span
                        style="margin-left: 12px; color: #0645ad"
                        class="my-auto"
                        v-if="
                          check_slot_value_use_in_response(
                            new_response.values[num]
                          )
                        "
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('assist_validate_response_header')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >{{tlt('response_variation_text1')}}
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    {{tlt('response_variation_text2')}}
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                    >
                      {{tlt('response_variation_text3')}}
                    </a>
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                    >
                      {{tlt('response_variation_text4')}}
                    </a>
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                    >
                      {{tlt('response_variation_text5')}}
                    </a>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === validation_slot_assistant_response.length-1"
                  :style="index === validation_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">Image Response : {{ new_response.id }}</p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                  />
                  <p
                    v-show="
                      check_image_url(new_response.source) == false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('assist_validate_image_condition_text')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'video'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === validation_slot_assistant_response.length-1"
                  :style="index === validation_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_validate_video_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Video url (It is recommended to use embed link.)"
                    type="text"
                    v-model.trim="new_response.source"
                  />
                  <p
                    v-show="
                      check_video_url(new_response.source) === false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('assist_validate_video_condition_text')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === validation_slot_assistant_response.length-1"
                  :style="index === validation_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_validate_choice_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="d-flex mb-2"
                      >
                        <div class="input-group" style="display: block">
                          <div class="d-flex">
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              maxlength="50"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 5px 0px 0px 5px !important;
                              "
                            />
                            <input
                              type="text"
                              v-model.trim="response.payload"
                              class="form-control input-tag"
                              :placeholder="
                                change_btn_value_placeholder(response.type)
                              "
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 0px !important;
                              "
                            />
                            <div class="input-group-append">
                              <select
                                class="form-control"
                                v-model="response.type"
                                style="
                                  width: 100px !important;
                                  height: 38px;
                                  padding: 0px !important;
                                "
                                id="button_type_list_id"
                              >
                                <option
                                  v-for="(option, index) in button_type_list"
                                  :key="index"
                                  :value="option.value"
                                >
                                  {{ option.name }}
                                </option>
                              </select>
                            </div>
                          </div>
                        </div>
                        <span
                          style="cursor: pointer; float: right"
                          class="close my-auto mr-0 ml-2"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('assist_validate_add_choice_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'card'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_slot_to_assistant_response(
                      new_response.id,
                      new_response.recognizes,
                      'slotmodal'
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === validation_slot_assistant_response.length-1"
                  :style="index === validation_slot_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index+1].id,
                      'slot_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      validation_slot_assistant_response[index-1].id,
                      'slot_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('assist_validate_card_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div class="row">
                      <div
                        v-for="(response, num) in new_response.card_list"
                        :key="num"
                        class="col-sm-4 pb-3"
                      >
                        <div class="card">
                          <div class="card-body">
                            <p
                              class="sub_heading_carousel"
                              style="color: dimgray; margin-bottom: 5px"
                            >
                              {{tlt('assist_validate_card_response_card_label')}} : {{ num + 1 }}
                            </p>
                            <span
                              style="
                                cursor: pointer;
                                float: right;
                                margin-top: -29px;
                              "
                              class="close ml-auto mr-0"
                              title="Remove Card Response"
                              v-if="new_response.card_list.length > 1"
                              @click="
                                add_to_assistant_response_carousel_card_list(
                                  'remove',
                                  new_response.id,
                                  num
                                )
                              "
                            >
                              &times;</span
                            >
                            <div>
                              <div class="d-sm-flex justify-content-start">
                                <h6
                                  class="label_header"
                                  style="margin-top: 0"
                                >
                                  {{tlt('assist_validate_card_response_file_type_label')}}:
                                </h6>
                                <div class="radio my-auto radio-label">
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="true"
                                      id="carousel_img"
                                    />
                                    <span
                                      class="icn"
                                      id="filter_portal_user_radio"
                                    ></span>
                                    {{tlt('assist_validate_card_response_image_label')}}
                                  </label>
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="false"
                                      id="carousel_video"
                                    />
                                    <span class="icn"></span> {{tlt('assist_validate_card_response_video_label')}}
                                  </label>
                                </div>
                              </div>
                            </div>
                            <div v-if="response.is_image">
                              <input
                                class="form-control input-tag"
                                style="width: 100%; padding: 0.375rem 0.5rem"
                                placeholder="Enter image URL"
                                type="text"
                                v-model="response.image"
                              />
                              <p
                                v-show="
                                  check_image_url(response.image) === false &&
                                  Boolean(response.image)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('assist_validate_response_image_condition_text')}}
                              </p>
                            </div>
                            <div v-else>
                              <input
                                type="text"
                                v-model.trim="response.video"
                                class="form-control input-tag"
                                placeholder="Enter video url.."
                                style="
                                  width: 100% !important;
                                  padding: 0.375rem 0.5rem;
                                "
                              />
                              <p
                                v-show="
                                  check_video_url(response.video) === false &&
                                  Boolean(response.video)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('assist_validate_card_response_video_condition_text')}}
                              </p>
                            </div>
                            <label class="label_header">{{tlt('assist_validate_card_response_title_label')}}</label>
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                              "
                            />
                            <label class="label_header">{{tlt('assist_validate_card_response_desc_label')}}</label>
                            <textarea
                              type="text"
                              v-model.trim="response.text"
                              class="form-control input-tag textarea-style"
                              rows="3"
                              cols="20"
                              placeholder="Enter Description"
                              style="resize: none"
                            ></textarea>
                            <div>
                              <p class="label_header">{{tlt('assist_validate_card_response_button_label')}}</p>
                              <!-- <div class="custom-button-box px-3 py-2 pt-0 mt-3 mb-3"> -->
                              <div class="ScrollStyle">
                                <div
                                  v-for="(
                                    button, btn_num
                                  ) in response.buttons"
                                  :key="btn_num"
                                  class="mb-2"
                                >
                                  <div class="d-flex">
                                    <div
                                      class="input-group"
                                      style="display: block"
                                    >
                                      <div class="d-flex">
                                        <input
                                          type="text"
                                          v-model.trim="button.title"
                                          class="form-control input-tag"
                                          placeholder="Enter title"
                                          maxlength="50"
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 5px 0px 0px 5px !important;
                                          "
                                        />
                                        <input
                                          type="text"
                                          v-model.trim="button.value"
                                          class="form-control input-tag"
                                          :placeholder="
                                            change_btn_value_placeholder(
                                              button.type
                                            )
                                          "
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 0px !important;
                                          "
                                        />
                                        <div class="input-group-append">
                                          <select
                                            class="form-control"
                                            v-model="button.type"
                                            style="
                                              width: 20px !important;
                                              height: 38px;
                                              padding: 0px !important;
                                            "
                                            id="button_type_list_id"
                                          >
                                            <option
                                              v-for="(
                                                option, index
                                              ) in button_type_list"
                                              :key="index"
                                              :value="option.value"
                                            >
                                              {{ option.name }}
                                            </option>
                                          </select>
                                        </div>
                                      </div>
                                    </div>
                                    <span
                                      style="
                                        cursor: pointer;
                                        float: right;
                                        margin-top: 8px;
                                      "
                                      class="close mx-1"
                                      title="Remove Button Response"
                                      v-if="response.buttons.length > 1"
                                      @click="
                                        add_to_assistant_response_carousel_card_button_list(
                                          'remove',
                                          new_response.id,
                                          num,
                                          btn_num
                                        )
                                      "
                                    >
                                      &times;</span
                                    >
                                  </div>
                                </div>
                              </div>
                              <div class="d-flex">
                                <p
                                  style="margin-top: 6px; margin-bottom: 5px"
                                >
                                  {{tlt('assist_validate_card_response_add_btn_label')}}
                                </p>
                                <button
                                  style="
                                    cursor: pointer;
                                    border: none;
                                    background: transparent
                                      url('@portal/assets/img/plus.png') 0% 0%
                                      no-repeat padding-box;
                                  "
                                  @click="
                                    add_to_assistant_response_carousel_card_button_list(
                                      'add',
                                      new_response.id,
                                      num
                                    )
                                  "
                                >
                                  <img src="/img/black_plus.png" alt="" />
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('assist_validate_card_response_add_card_label')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_carousel_card_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex" style="margin-left: 1rem !important">
              <p class="sub_heading">{{tlt('assist_validate_response_type_first_label')}} :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <p class="sub_heading" style="margin-left: 20px">
                {{tlt('assist_validate_add_response_btn')}}
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="
                  add_slot_to_assistant_response(
                    'Addbtn',
                    'unused',
                    edit_slot_check_for,
                    edit_slot_slot_variable,
                    null,
                    'validation_response'
                  )
                "
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
        </div>
        <!-- <div class="modal-footer">
          <a href="#" data-dismiss="modal" class="btn">Close</a>
          <a href="#" class="btn btn-primary">Save changes</a>
        </div> -->
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="webhookmodal"
    tabindex="-1"
    role="dialog"
    aria-labelledby="webhookmodal"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 style="font-style: regular" class="modal-title">
            Configure Webhook Response for : {{ webhook_variable }}
          </h5>
          <button
            type="button"
            @click="on_close_webhook_modal()"
            class="close"
            data-dismiss="modal"
            aria-hidden="true"
          >
            ×
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              {{tlt('slots_assistant_response_header')}}
            </h5>
            <div
              v-for="(new_response, index) in webhook_assistant_response"
              :key="index"
              class="form-group"
            >
              <div v-if="new_response.type == 'text'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    webhook_to_assistant_response(
                      'remove',
                      webhook_variable,
                      new_response.id
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === webhook_assistant_response.length-1"
                  :style="index === webhook_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index+1].id,
                      'webhook_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index-1].id,
                      'webhook_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('sots_text_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        :id="
                          'assistance_response_' + new_response.id + '_' + num
                        "
                        @focusout="
                          insert_variable_block_off(new_response.id, num)
                        "
                        @focusin="
                          insert_variable_block_on(new_response.id, num)
                        "
                      />
                      <div
                        style="opacity: 0"
                        :id="
                          'insert_variable_block' +
                          new_response.id +
                          '_' +
                          num
                        "
                      >
                        <a
                          @click="
                            set_assistance_response_index(
                              new_response.id,
                              num
                            )
                          "
                          class="example fa-stack fa-1x"
                          id="insert_variable_button"
                          type="button"
                          data-toggle="modal"
                          data-target="#insert_variable_modal"
                          style="margin-top: 20px !important"
                        >
                          <i
                            class="fas fa-circle fa-stack-2x"
                            style="color: #dbe2e8"
                            :id="
                              'insert_variable_circle_' +
                              new_response.id +
                              '_' +
                              num
                            "
                          >
                          </i>
                          <span
                            class="fa fa-stack-1x"
                            style="color: white"
                            @mouseover="
                              circle_mouseover(new_response.id, num)
                            "
                            @mouseout="circle_mouseout(new_response.id, num)"
                          >
                            <span style="font-size: 14px; display: block">
                              {...}
                            </span>
                          </span>
                        </a>
                      </div>
                      <!-- v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',new_response.id)" 
                            -->
                      <span
                        style="margin-left: 12px; color: #0645ad"
                        class="my-auto"
                        v-if="
                          check_slot_value_use_in_response(
                            new_response.values[num]
                          )
                        "
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('slots_add_value_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >{{tlt('response_variation_text1')}}
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    {{tlt('response_variation_text2')}}
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                      >{{tlt('response_variation_text3')}}</a
                    >
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                      >{{tlt('response_variation_text4')}}</a
                    >
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                      >{{tlt('response_variation_text5')}}</a
                    >
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    webhook_to_assistant_response(
                      'remove',
                      webhook_variable,
                      new_response.id
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === webhook_assistant_response.length-1"
                  :style="index === webhook_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index+1].id,
                      'webhook_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index-1].id,
                      'webhook_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">{{tlt('sots_img_response_header')}} :</p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                  />
                  <p
                    v-show="
                      check_image_url(new_response.source) == false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('slots_img_condition_text')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'video'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    webhook_to_assistant_response(
                      'remove',
                      webhook_variable,
                      new_response.id
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === webhook_assistant_response.length-1"
                  :style="index === webhook_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index+1].id,
                      'webhook_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index-1].id,
                      'webhook_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('sots_video_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Video url (It is recommended to use embed link.)"
                    type="text"
                    v-model.trim="new_response.source"
                  />
                  <p
                    v-show="
                      check_video_url(new_response.source) === false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('slots_video_condition_text')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    webhook_to_assistant_response(
                      'remove',
                      webhook_variable,
                      new_response.id
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === webhook_assistant_response.length-1"
                  :style="index === webhook_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index+1].id,
                      'webhook_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index-1].id,
                      'webhook_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('sots_choice_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="d-flex mb-2"
                      >
                        <div class="input-group" style="display: block">
                          <div class="d-flex">
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              maxlength="50"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 5px 0px 0px 5px !important;
                              "
                            />
                            <input
                              type="text"
                              v-model.trim="response.payload"
                              class="form-control input-tag"
                              :placeholder="
                                change_btn_value_placeholder(response.type)
                              "
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 0px !important;
                              "
                            />
                            <div class="input-group-append">
                              <select
                                class="form-control"
                                v-model="response.type"
                                style="
                                  width: 100px !important;
                                  height: 38px;
                                  padding: 0px !important;
                                "
                                id="button_type_list_id"
                              >
                                <option
                                  v-for="(option, index) in button_type_list"
                                  :key="index"
                                  :value="option.value"
                                >
                                  {{ option.name }}
                                </option>
                              </select>
                            </div>
                          </div>
                        </div>
                        <span
                          style="cursor: pointer; float: right"
                          class="close my-auto mr-0 ml-2"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('sots_add_choice_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'card'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    webhook_to_assistant_response(
                      'remove',
                      webhook_variable,
                      new_response.id
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === webhook_assistant_response.length-1"
                  :style="index === webhook_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index+1].id,
                      'webhook_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      webhook_assistant_response[index-1].id,
                      'webhook_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('sots_card_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div class="row">
                      <div
                        v-for="(response, num) in new_response.card_list"
                        :key="num"
                        class="col-sm-4 pb-3"
                      >
                        <div class="card">
                          <div class="card-body">
                            <p
                              class="sub_heading_carousel"
                              style="color: dimgray; margin-bottom: 5px"
                            >
                              {{tlt('card_response_card_label')}} : {{ num + 1 }}
                            </p>
                            <span
                              style="
                                cursor: pointer;
                                float: right;
                                margin-top: -29px;
                              "
                              class="close ml-auto mr-0"
                              title="Remove Card Response"
                              v-if="new_response.card_list.length > 1"
                              @click="
                                add_to_assistant_response_carousel_card_list(
                                  'remove',
                                  new_response.id,
                                  num
                                )
                              "
                            >
                              &times;</span
                            >
                            <div>
                              <div class="d-sm-flex justify-content-start">
                                <h6
                                  class="label_header"
                                  style="margin-top: 0"
                                >
                                  {{tlt('card_response_file_type_label')}}:
                                </h6>
                                <div class="radio my-auto radio-label">
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="true"
                                      id="carousel_img"
                                    />
                                    <span
                                      class="icn"
                                      id="filter_portal_user_radio"
                                    ></span>
                                    {{tlt('card_response_image_label')}}
                                  </label>
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="false"
                                      id="carousel_video"
                                    />
                                    <span class="icn"></span> {{tlt('card_response_video_label')}}
                                  </label>
                                </div>
                              </div>
                            </div>
                            <div v-if="response.is_image">
                              <input
                                class="form-control input-tag"
                                style="width: 100%; padding: 0.375rem 0.5rem"
                                placeholder="Enter image URL"
                                type="text"
                                v-model="response.image"
                              />
                              <p
                                v-show="
                                  check_image_url(response.image) === false &&
                                  Boolean(response.image)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('card_response_image_condition_text')}}
                              </p>
                            </div>
                            <div v-else>
                              <input
                                type="text"
                                v-model.trim="response.video"
                                class="form-control input-tag"
                                placeholder="Enter video url.."
                                style="
                                  width: 100% !important;
                                  padding: 0.375rem 0.5rem;
                                "
                              />
                              <p
                                v-show="
                                  check_video_url(response.video) === false &&
                                  Boolean(response.video)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('card_response_video_condition_text')}}
                              </p>
                            </div>
                            <label class="label_header">{{tlt('card_response_title_label')}}</label>
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                              "
                            />
                            <label class="label_header">{{tlt('card_response_desc_label')}}</label>
                            <textarea
                              type="text"
                              v-model.trim="response.text"
                              class="form-control input-tag textarea-style"
                              rows="3"
                              cols="20"
                              placeholder="Enter Description"
                              style="resize: none"
                            ></textarea>
                            <div>
                              <p class="label_header">{{tlt('card_response_button_label')}}</p>
                              <!-- <div class="custom-button-box px-3 py-2 pt-0 mt-3 mb-3"> -->
                              <div class="ScrollStyle">
                                <div
                                  v-for="(
                                    button, btn_num
                                  ) in response.buttons"
                                  :key="btn_num"
                                  class="mb-2"
                                >
                                  <div class="d-flex">
                                    <div
                                      class="input-group"
                                      style="display: block"
                                    >
                                      <div class="d-flex">
                                        <input
                                          type="text"
                                          v-model.trim="button.title"
                                          class="form-control input-tag"
                                          placeholder="Enter title"
                                          maxlength="50"
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 5px 0px 0px 5px !important;
                                          "
                                        />
                                        <input
                                          type="text"
                                          v-model.trim="button.value"
                                          class="form-control input-tag"
                                          :placeholder="
                                            change_btn_value_placeholder(
                                              button.type
                                            )
                                          "
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 0px !important;
                                          "
                                        />
                                        <div class="input-group-append">
                                          <select
                                            class="form-control"
                                            v-model="button.type"
                                            style="
                                              width: 20px !important;
                                              height: 38px;
                                              padding: 0px !important;
                                            "
                                            id="button_type_list_id"
                                          >
                                            <option
                                              v-for="(
                                                option, index
                                              ) in button_type_list"
                                              :key="index"
                                              :value="option.value"
                                            >
                                              {{ option.name }}
                                            </option>
                                          </select>
                                        </div>
                                      </div>
                                    </div>
                                    <span
                                      style="
                                        cursor: pointer;
                                        float: right;
                                        margin-top: 8px;
                                      "
                                      class="close mx-1"
                                      title="Remove Button Response"
                                      v-if="response.buttons.length > 1"
                                      @click="
                                        add_to_assistant_response_carousel_card_button_list(
                                          'remove',
                                          new_response.id,
                                          num,
                                          btn_num
                                        )
                                      "
                                    >
                                      &times;</span
                                    >
                                  </div>
                                </div>
                              </div>
                              <div class="d-flex">
                                <p
                                  style="margin-top: 6px; margin-bottom: 5px"
                                >
                                  {{tlt('card_response_add_btn_label')}}
                                </p>
                                <button
                                  style="
                                    cursor: pointer;
                                    border: none;
                                    background: transparent
                                      url('@portal/assets/img/plus.png') 0% 0%
                                      no-repeat padding-box;
                                  "
                                  @click="
                                    add_to_assistant_response_carousel_card_button_list(
                                      'add',
                                      new_response.id,
                                      num
                                    )
                                  "
                                >
                                  <img src="/img/black_plus.png" alt="" />
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('card_response_add_card_label')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_carousel_card_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex" style="margin-left: 1rem !important">
              <p class="sub_heading">{{tlt('assist_validate_response_type_first_label')}} :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading" style="margin-left: 20px">
                {{tlt('assist_validate_add_response_btn')}}
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="
                  webhook_to_assistant_response('add', webhook_variable)
                "
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
        </div>
        <!-- <div class="modal-footer">
          <a href="#" data-dismiss="modal" class="btn">Close</a>
          <a href="#" class="btn btn-primary">Save changes</a>
        </div> -->
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="manage_handler_id"
    tabindex="-1"
    role="dialog"
    aria-labelledby="manage_handler_id"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h5 style="font-style: regular" class="modal-title">
              {{tlt('manage_handlers_header')}}
            </h5>
            <p class="m-0">
              {{tlt('manage_handlers_help_text')}}
            </p>
          </div>
          <button
            type="button"
            @click="on_close_manage_handlers()"
            class="close"
            data-dismiss="modal"
            aria-hidden="true"
          >
            ×
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <!-- <h5>If answer to any prompt is not found and</h5> -->
            <div
              v-for="(handler, ind) in manage_handlers"
              :key="ind"
              class="custom-box-head px-3 py-3 mt-3 mb-3"
            >
              <div>
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="add_remove_to_manage_handler_list('remove', ind)"
                  class="close"
                  title="Delete Handler"
                >
                  {{tlt('manage_handlers_delete_btn')}}
                  <!-- <i style="font-size: 16px" class="fa">&#xf00d;</i> -->
                </span>
                <h5>{{tlt('handler_header')}}: {{ ind }}</h5>
              </div>
              <div>
                <div class="form-group">
                  <h5>{{tlt('manage_handlers_assistant_recognize_header')}}</h5>
                  <div
                    class="row d-flex"
                    style="margin-left: 1rem !important"
                  >
                    <div
                      class="d-flex pb-2"
                      v-for="(trigger, index) in handler.triggers"
                      :key="index"
                    >
                      <div class="mr-2 my-auto">
                        <div>
                          <select
                            class="custom-select"
                            aria-label="Filter by"
                            id="trigger_filter_by_id"
                            style="
                              width: 120px;
                              height: 40px;
                              padding-left: 14px;
                              padding-bottom: 4px;
                            "
                            placeholder="Filter by"
                            v-model="trigger.trigger_type"
                            @input="
                              manage_handlers_change_trigger_value(
                                trigger.trigger_type,
                                index,
                                ind
                              )
                            "
                          >
                            <option value="" disabled selected>
                              {{tlt('filter_by_label')}}
                            </option>
                            <option value="intent">{{tlt('objective_label')}}</option>
                            <option value="entity">{{tlt('entity_label')}}</option>
                          </select>
                        </div>
                      </div>
                      <div
                        class="mr-2 my-auto"
                        v-if="Boolean(trigger.trigger_type)"
                      >
                        <multiselect
                          v-model="trigger.trigger_value"
                          :options="
                            trigger.trigger_type === 'intent'
                              ? trigger_options_intent
                              : trigger_options_entity
                          "
                          :placeholder="
                            trigger.trigger_type === 'intent'
                              ? 'Search Objective'
                              : 'Search Entity'
                          "
                          :close-on-select="true"
                          :clear-on-select="false"
                          :preserve-search="true"
                          :show-labels="false"
                          :allow-empty="false"
                          open-direction="bottom"
                          :searchable="true"
                          :loading="is_loading"
                          @input="
                            manage_handlers_change_trigger_type(
                              trigger.trigger_type,
                              trigger.trigger_value,
                              index,
                              ind
                            )
                          "
                          @search-change="
                            search_intent_entity(trigger.trigger_type, $event)
                          "
                          style="height: 30px; padding: 0px"
                          id="res_n_int_source"
                        >
                          <span slot="noOptions"></span>
                          <span slot="noResult">No Condition found.</span>
                        </multiselect>
                      </div>
                      <div
                        class="mr-2 my-auto"
                        v-if="
                          Boolean(trigger.trigger_type === 'entity') &&
                          Boolean(trigger.trigger_value)
                        "
                        :style="
                          is_entity_type_sys_pattern(
                            trigger.trigger_value
                          ) === true
                            ? 'cursor: not-allowed'
                            : null
                        "
                        :title="
                          is_entity_type_sys_pattern(
                            trigger.trigger_value
                          ) === true
                            ? 'Entity selected is of type pattern or system entity, hence further option(s) cannot be selected.'
                            : null
                        "
                      >
                        <multiselect
                          id="trigger_operand_id"
                          :close-on-select="true"
                          :options="entity_operand_options"
                          placeholder="Operator"
                          v-model="trigger.operand"
                          :allow-empty="false"
                          :show-labels="false"
                          @input="
                            manage_handlers_change_trigger_entity_value(
                              trigger.operand,
                              index,
                              ind
                            )
                          "
                          :disabled="
                            is_entity_type_sys_pattern(
                              trigger.trigger_value
                            ) === true
                          "
                        >
                        </multiselect>
                      </div>
                      <div
                        class="mr-2 my-auto"
                        v-if="
                          Boolean(trigger.trigger_type === 'entity') &&
                          Boolean(trigger.trigger_value) &&
                          Boolean(trigger.operand === 'is')
                        "
                      >
                        <multiselect
                          id="trigger_entity_value_id"
                          :close-on-select="true"
                          :options="
                            entity_value_options(trigger.trigger_value)
                          "
                          placeholder="select entity value"
                          v-model="trigger.entity_value"
                          :allow-empty="false"
                          :show-labels="false"
                          @input="
                            manage_handlers_set_trigger_entity_value(
                              trigger.entity_value,
                              index,
                              ind
                            )
                          "
                        >
                        </multiselect>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="form-group">
                  <h5 style="margin-top: 6px; margin-bottom: 5px">
                   {{tlt('manage_handlers_assist_resp_label')}}
                  </h5>
                  <div
                    v-for="(new_response, index) in handler.responses"
                    :key="index"
                    class="form-group"
                  >
                    <div
                      v-if="new_response.type == 'text'"
                      class="custom-box"
                    >
                      <span
                        style="float: right; cursor: pointer; font-size: 14px"
                        @click="
                          manage_handlers_add_to_assistant_response_list(
                            'remove',
                            ind,
                            index
                          )
                        "
                        class="btn btn-light"
                        title="Remove Response"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                          <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                          <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                        </svg>
                      </span>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        class="btn btn-light"
                        :disabled="index === handler.responses.length-1"
                        :style="index === handler.responses.length-1 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index+1].id,
                            ind
                          )
                        "
                        title="Move down"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                        </svg>
                      </button>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        :disabled="index === 0"
                        :style="index === 0 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index-1].id,
                            ind
                          )
                        "
                        class="btn btn-light"
                        title="Move Up"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                        </svg>
                      </button>
                      <p class="sub_heading">
                        <!-- Text Response : {{ new_response.id }} -->
                        {{tlt('manage_handlers_text_response_header')}}
                      </p>
                      <div>
                        <div
                          v-for="(response, num) in new_response.values"
                          :key="num"
                          class="form-group"
                        >
                          <div class="d-flex">
                            <input
                              class="form-control input-tag"
                              placeholder="Enter response text"
                              style="width: 100%; padding: 0.375rem 0.5rem"
                              type="text"
                              v-model="new_response.values[num]"
                              :id="
                                'manage_handlers_assistance_response_' +
                                new_response.id +
                                '_' +
                                num
                              "
                              @focusout="
                                manage_handlers_insert_variable_block_off(
                                  new_response.id,
                                  num
                                )
                              "
                              @focusin="
                                manage_handlers_insert_variable_block_on(
                                  new_response.id,
                                  num
                                )
                              "
                              v-on:keyup.enter="
                                manage_handler_add_to_assistant_response_text_list(
                                  'add',
                                  new_response.id,
                                  ind
                                )
                              "
                            />
                            <div
                              style="opacity: 0"
                              :id="
                                'manage_handlers_insert_variable_block' +
                                new_response.id +
                                '_' +
                                num
                              "
                            >
                              <a
                                @click="
                                  manage_handlers_set_assistance_response_index(
                                    new_response.id,
                                    num,
                                    ind
                                  )
                                "
                                class="example fa-stack fa-1x"
                                id="manage_handlers_insert_variable_button"
                                type="button"
                                data-toggle="modal"
                                data-target="#manage_handlers_insert_variable_modal"
                                style="margin-top: 20px !important"
                              >
                                <i
                                  class="fas fa-circle fa-stack-2x"
                                  style="color: #dbe2e8"
                                  :id="
                                    'manage_handlers_insert_variable_circle_' +
                                    new_response.id +
                                    '_' +
                                    num
                                  "
                                >
                                </i>
                                <span
                                  class="fa fa-stack-1x"
                                  style="color: white"
                                  @mouseover="
                                    manage_handlers_circle_mouseover(
                                      new_response.id,
                                      num
                                    )
                                  "
                                  @mouseout="
                                    manage_handlers_circle_mouseout(
                                      new_response.id,
                                      num
                                    )
                                  "
                                >
                                  <span
                                    style="font-size: 14px; display: block"
                                  >
                                    {...}
                                  </span>
                                </span>
                              </a>
                            </div>
                            <span
                              style="margin-left: 12px; color: #0645ad"
                              class="my-auto"
                              v-if="
                                check_slot_value_use_in_response(
                                  new_response.values[num]
                                )
                              "
                            >
                              <i
                                class="fa fa-info-circle"
                                aria-hidden="true"
                                style="font-size: 16px"
                                title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                              >
                              </i>
                            </span>
                            <span
                              v-if="new_response.values.length > 1"
                              title="Remove Text Response"
                              class="close my-auto"
                              style="cursor: pointer; margin-left: 12px"
                              @click="
                                manage_handler_add_to_assistant_response_text_list(
                                  'remove',
                                  new_response.id,
                                  ind,
                                  num
                                )
                              "
                            >
                              &times;
                            </span>
                          </div>
                        </div>
                        <div class="d-flex">
                          <p style="margin-top: 6px; margin-bottom: 5px">
                            {{tlt('manage_handlers_add_value_btn')}}
                          </p>
                          <button
                            style="
                              cursor: pointer;
                              border: none;
                              background: transparent
                                url('@portal/assets/img/plus.png') 0% 0%
                                no-repeat padding-box;
                            "
                            @click="
                              manage_handler_add_to_assistant_response_text_list(
                                'add',
                                new_response.id,
                                ind
                              )
                            "
                          >
                            <img src="/img/black_plus.png" alt="" />
                          </button>
                        </div>
                        <div class="response-variations">
                          <span
                            >{{tlt('response_variation_text1')}}
                            <strong>{{ new_response.variation }}</strong
                            >.</span
                          >
                          {{tlt('response_variation_text2')}}
                          <a
                            @click="
                              manage_handlers_select_response_variation(
                                new_response.id,
                                'sequential',
                                ind
                              )
                            "
                            v-show="new_response.variation != 'sequential'"
                            href="javascript:void(0);"
                            class="response-variation"
                          >
                            {{tlt('response_variation_text3')}}
                          </a>
                          <span
                            v-show="new_response.variation != 'sequential'"
                          >
                            |
                          </span>
                          <a
                            @click="
                              manage_handlers_select_response_variation(
                                new_response.id,
                                'multiline',
                                ind
                              )
                            "
                            v-show="new_response.variation != 'multiline'"
                            href="javascript:void(0);"
                            class="variation-multiline"
                          >
                            {{tlt('response_variation_text4')}}
                          </a>
                          <span
                            v-show="
                              new_response.variation != 'random' &&
                              new_response.variation != 'multiline'
                            "
                          >
                            |
                          </span>
                          <a
                            @click="
                              manage_handlers_select_response_variation(
                                new_response.id,
                                'random',
                                ind
                              )
                            "
                            v-show="new_response.variation != 'random'"
                            href="javascript:void(0);"
                            class="variation-random"
                          >
                            {{tlt('response_variation_text5')}}
                          </a>
                        </div>
                      </div>
                    </div>
                    <div
                      v-if="new_response.type == 'image'"
                      class="custom-box"
                    >
                      <span
                        style="float: right; cursor: pointer; font-size: 14px"
                        @click="
                          manage_handlers_add_to_assistant_response_list(
                            'remove',
                            ind,
                            index
                          )
                        "
                        class="btn btn-light"
                        title="Remove Response"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                          <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                          <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                        </svg>
                      </span>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        class="btn btn-light"
                        :disabled="index === handler.responses.length-1"
                        :style="index === handler.responses.length-1 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index+1].id,
                            ind
                          )
                        "
                        title="Move down"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                        </svg>
                      </button>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        :disabled="index === 0"
                        :style="index === 0 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index-1].id,
                            ind
                          )
                        "
                        class="btn btn-light"
                        title="Move Up"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                        </svg>
                      </button>
                      <p class="sub_heading">
                        <!-- Image Response : {{ new_response.id }} -->
                        {{tlt('manage_handlers_img_response_header')}}
                      </p>
                      <div>
                        <input
                          class="form-control input-tag"
                          style="width: 100%; padding: 0.375rem 0.5rem"
                          placeholder="Add Image url"
                          type="text"
                          v-model="new_response.source"
                        />
                        <p
                          v-show="
                            check_image_url(new_response.source) == false &&
                            Boolean(new_response.source)
                          "
                          style="
                            color: red !important;
                            margin-bottom: 0px !important;
                            padding-top: 8px !important;
                          "
                        >
                          {{tlt('manage_handlers_image_condition_text')}}
                        </p>
                      </div>
                    </div>
                    <div
                      v-if="new_response.type == 'video'"
                      class="custom-box"
                    >
                      <span
                        style="float: right; cursor: pointer; font-size: 14px"
                        @click="
                          manage_handlers_add_to_assistant_response_list(
                            'remove',
                            ind,
                            index
                          )
                        "
                        class="btn btn-light"
                        title="Remove Response"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                          <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                          <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                        </svg>
                      </span>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        class="btn btn-light"
                        :disabled="index === handler.responses.length-1"
                        :style="index === handler.responses.length-1 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index+1].id,
                            ind
                          )
                        "
                        title="Move down"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                        </svg>
                      </button>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        :disabled="index === 0"
                        :style="index === 0 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index-1].id,
                            ind
                          )
                        "
                        class="btn btn-light"
                        title="Move Up"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                        </svg>
                      </button>
                      <p class="sub_heading">
                        <!-- Video Response : {{ new_response.id }} -->
                        {{tlt('manage_handlers_video_response_header')}}
                      </p>
                      <div>
                        <input
                          class="form-control input-tag"
                          style="width: 100%; padding: 0.375rem 0.5rem"
                          placeholder="Add Video url (It is recommended to use embed link.)"
                          type="text"
                          v-model.trim="new_response.source"
                        />
                        <p
                          v-show="
                            check_video_url(new_response.source) === false &&
                            Boolean(new_response.source)
                          "
                          style="
                            color: red !important;
                            margin-bottom: 0px !important;
                            padding-top: 8px !important;
                          "
                        >
                          {{tlt('manage_handlers_video_condition_text')}}
                        </p>
                      </div>
                    </div>
                    <div
                      v-if="new_response.type == 'choices'"
                      class="custom-box"
                    >
                      <span
                        style="float: right; cursor: pointer; font-size: 14px"
                        @click="
                          manage_handlers_add_to_assistant_response_list(
                            'remove',
                            ind,
                            index
                          )
                        "
                        class="btn btn-light"
                        title="Remove Response"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                          <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                          <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                        </svg>
                      </span>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        class="btn btn-light"
                        :disabled="index === handler.responses.length-1"
                        :style="index === handler.responses.length-1 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index+1].id,
                            ind
                          )
                        "
                        title="Move down"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                        </svg>
                      </button>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        :disabled="index === 0"
                        :style="index === 0 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index-1].id,
                            ind
                          )
                        "
                        class="btn btn-light"
                        title="Move Up"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                        </svg>
                      </button>
                      <p class="sub_heading">
                        <!-- Choice Response : {{ new_response.id }} -->
                        {{tlt('manage_handlers_choice_response_header')}}
                      </p>
                      <div>
                        <template>
                          <div style="display: block; margin-bottom: 1rem">
                            <div
                              v-for="(response, num) in new_response.choices"
                              :key="num"
                              class="d-flex mb-2"
                            >
                              <div class="input-group" style="display: block">
                                <div class="d-flex">
                                  <input
                                    type="text"
                                    v-model.trim="response.title"
                                    class="form-control input-tag"
                                    placeholder="Enter title"
                                    maxlength="50"
                                    style="
                                      width: 100% !important;
                                      padding: 0.375rem 0.5rem;
                                      border-radius: 5px 0px 0px 5px !important;
                                    "
                                  />
                                  <input
                                    type="text"
                                    v-model.trim="response.payload"
                                    class="form-control input-tag"
                                    :placeholder="
                                      change_btn_value_placeholder(
                                        response.type
                                      )
                                    "
                                    style="
                                      width: 100% !important;
                                      padding: 0.375rem 0.5rem;
                                      border-radius: 0px !important;
                                    "
                                  />
                                  <div class="input-group-append">
                                    <select
                                      class="form-control"
                                      v-model="response.type"
                                      style="
                                        width: 100px !important;
                                        height: 38px;
                                        padding: 0px !important;
                                      "
                                      id="button_type_list_id"
                                    >
                                      <option
                                        v-for="(
                                          option, index
                                        ) in button_type_list"
                                        :key="index"
                                        :value="option.value"
                                      >
                                        {{ option.name }}
                                      </option>
                                    </select>
                                  </div>
                                </div>
                              </div>
                              <span
                                style="cursor: pointer; float: right"
                                class="close my-auto mr-0 ml-2"
                                title="Remove Choice Response"
                                v-if="new_response.choices.length > 1"
                                @click="
                                  manage_handlers_add_to_assistant_response_choice_list(
                                    'remove',
                                    new_response.id,
                                    ind,
                                    num
                                  )
                                "
                              >
                                &times;</span
                              >
                            </div>
                          </div>
                        </template>
                        <div class="d-flex">
                          <p style="margin-top: 6px; margin-bottom: 5px">
                            {{tlt('manage_handlers_add_choice_btn')}}
                          </p>
                          <button
                            style="
                              cursor: pointer;
                              border: none;
                              background: transparent
                                url('@portal/assets/img/plus.png') 0% 0%
                                no-repeat padding-box;
                            "
                            @click="
                              manage_handlers_add_to_assistant_response_choice_list(
                                'add',
                                new_response.id,
                                ind
                              )
                            "
                          >
                            <img src="/img/black_plus.png" alt="" />
                          </button>
                        </div>
                      </div>
                    </div>
                    <div
                      v-if="new_response.type == 'card'"
                      class="custom-box"
                    >
                      <span
                        style="float: right; cursor: pointer; font-size: 14px"
                        @click="
                          manage_handlers_add_to_assistant_response_list(
                            'remove',
                            ind,
                            index
                          )
                        "
                        class="btn btn-light"
                        title="Remove Response"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                          <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                          <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                        </svg>
                      </span>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        class="btn btn-light"
                        :disabled="index === handler.responses.length-1"
                        :style="index === handler.responses.length-1 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index+1].id,
                            ind
                          )
                        "
                        title="Move down"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                        </svg>
                      </button>
                      <button
                        style="float: right; cursor: pointer; font-size: 14px"
                        :disabled="index === 0"
                        :style="index === 0 ?'cursor: not-allowed':''"
                        @click="
                          manage_handlers_interchange_position_assistant_response(
                            new_response.id,
                            handler.responses[index-1].id,
                            ind
                          )
                        "
                        class="btn btn-light"
                        title="Move Up"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                          <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                        </svg>
                      </button>
                      <p class="sub_heading">
                        <!-- Card Response : {{ new_response.id }} -->
                        {{tlt('manage_handlers_card_response_header')}}
                      </p>
                      <div>
                        <template>
                          <div class="row">
                            <div
                              v-for="(
                                response, num
                              ) in new_response.card_list"
                              :key="num"
                              class="col-sm-4 pb-3"
                            >
                              <div class="card">
                                <div class="card-body">
                                  <p
                                    class="sub_heading_carousel"
                                    style="color: dimgray; margin-bottom: 5px"
                                  >
                                    {{tlt('manage_handlers_card_response_card_label')}}: {{ num + 1 }}
                                  </p>
                                  <span
                                    style="
                                      cursor: pointer;
                                      float: right;
                                      margin-top: -29px;
                                    "
                                    class="close ml-auto mr-0"
                                    title="Remove Card Response"
                                    v-if="new_response.card_list.length > 1"
                                    @click="
                                      manage_handlers_add_to_assistant_response_carousel_card_list(
                                        'remove',
                                        new_response.id,
                                        ind,
                                        num
                                      )
                                    "
                                  >
                                    &times;</span
                                  >
                                  <div>
                                    <div
                                      class="d-sm-flex justify-content-start"
                                    >
                                      <h6
                                        class="label_header"
                                        style="margin-top: 0"
                                      >
                                        {{tlt('manage_handlers_card_response_file_type_label')}}
                                      </h6>
                                      <div class="radio my-auto radio-label">
                                        <label style="font-size: 13px">
                                          <input
                                            type="radio"
                                            v-model="response.is_image"
                                            :value="true"
                                            id="carousel_img"
                                          />
                                          <span
                                            class="icn"
                                            id="filter_portal_user_radio"
                                          ></span>
                                          {{tlt('manage_handlers_card_response_image_label')}}
                                        </label>
                                        <label style="font-size: 13px">
                                          <input
                                            type="radio"
                                            v-model="response.is_image"
                                            :value="false"
                                            id="carousel_video"
                                          />
                                          <span class="icn"></span> {{tlt('manage_handlers_card_response_video_label')}}
                                        </label>
                                      </div>
                                    </div>
                                  </div>
                                  <div v-if="response.is_image">
                                    <input
                                      class="form-control input-tag"
                                      style="
                                        width: 100%;
                                        padding: 0.375rem 0.5rem;
                                      "
                                      placeholder="Enter image URL"
                                      type="text"
                                      v-model="response.image"
                                    />
                                    <p
                                      v-show="
                                        check_image_url(response.image) ===
                                          false && Boolean(response.image)
                                      "
                                      style="
                                        color: red !important;
                                        margin-bottom: 0px !important;
                                        padding-top: 8px !important;
                                      "
                                    >
                                      {{tlt('card_response_image_condition_text')}}
                                    </p>
                                  </div>
                                  <div v-else>
                                    <input
                                      type="text"
                                      v-model.trim="response.video"
                                      class="form-control input-tag"
                                      placeholder="Enter video url.."
                                      style="
                                        width: 100% !important;
                                        padding: 0.375rem 0.5rem;
                                      "
                                    />
                                    <p
                                      v-show="
                                        check_video_url(response.video) ===
                                          false && Boolean(response.video)
                                      "
                                      style="
                                        color: red !important;
                                        margin-bottom: 0px !important;
                                        padding-top: 8px !important;
                                      "
                                    >
                                      {{tlt('handler_card_response_video_condition_text')}}
                                    </p>
                                  </div>
                                  <label class="label_header">{{tlt('manage_handlers_card_response_title_label')}}</label>
                                  <input
                                    type="text"
                                    v-model.trim="response.title"
                                    class="form-control input-tag"
                                    placeholder="Enter title"
                                    style="
                                      width: 100% !important;
                                      padding: 0.375rem 0.5rem;
                                    "
                                  />
                                  <label class="label_header"
                                    >{{tlt('manage_handlers_card_response_desc_label')}}</label
                                  >
                                  <textarea
                                    type="text"
                                    v-model.trim="response.text"
                                    class="
                                      form-control
                                      input-tag
                                      textarea-style
                                    "
                                    rows="3"
                                    cols="20"
                                    placeholder="Enter Description"
                                    style="resize: none"
                                  ></textarea>
                                  <div>
                                    <p class="label_header">{{tlt('manage_handlers_card_response_button_label')}}</p>
                                    <!-- <div class="custom-button-box px-3 py-2 pt-0 mt-3 mb-3"> -->
                                    <div class="ScrollStyle">
                                      <div
                                        v-for="(
                                          button, btn_num
                                        ) in response.buttons"
                                        :key="btn_num"
                                        class="mb-2"
                                      >
                                        <div class="d-flex">
                                          <div
                                            class="input-group"
                                            style="display: block"
                                          >
                                            <div class="d-flex">
                                              <input
                                                type="text"
                                                v-model.trim="button.title"
                                                class="form-control input-tag"
                                                placeholder="Enter title"
                                                maxlength="50"
                                                style="
                                                  width: 100% !important;
                                                  padding: 0.375rem 0.5rem;
                                                  border-radius: 5px 0px 0px
                                                    5px !important;
                                                "
                                              />
                                              <input
                                                type="text"
                                                v-model.trim="button.value"
                                                class="form-control input-tag"
                                                :placeholder="
                                                  change_btn_value_placeholder(
                                                    button.type
                                                  )
                                                "
                                                style="
                                                  width: 100% !important;
                                                  padding: 0.375rem 0.5rem;
                                                  border-radius: 0px !important;
                                                "
                                              />
                                              <div class="input-group-append">
                                                <select
                                                  class="form-control"
                                                  v-model="button.type"
                                                  style="
                                                    width: 20px !important;
                                                    height: 38px;
                                                    padding: 0px !important;
                                                  "
                                                  id="button_type_list_id"
                                                >
                                                  <option
                                                    v-for="(
                                                      option, index
                                                    ) in button_type_list"
                                                    :key="index"
                                                    :value="option.value"
                                                  >
                                                    {{ option.name }}
                                                  </option>
                                                </select>
                                              </div>
                                            </div>
                                          </div>
                                          <span
                                            style="
                                              cursor: pointer;
                                              float: right;
                                              margin-top: 8px;
                                            "
                                            class="close mx-1"
                                            title="Remove Button Response"
                                            v-if="response.buttons.length > 1"
                                            @click="
                                              manage_handlers_add_to_assistant_response_carousel_card_button_list(
                                                'remove',
                                                new_response.id,
                                                ind,
                                                num,
                                                btn_num
                                              )
                                            "
                                          >
                                            &times;</span
                                          >
                                        </div>
                                      </div>
                                      <!-- add btn -->
                                    </div>
                                    <div class="d-flex">
                                      <p
                                        style="
                                          margin-top: 6px;
                                          margin-bottom: 5px;
                                        "
                                      >
                                        {{tlt('manage_handlers_card_response_add_btn_label')}}
                                      </p>
                                      <button
                                        style="
                                          cursor: pointer;
                                          border: none;
                                          background: transparent
                                            url('@portal/assets/img/plus.png')
                                            0% 0% no-repeat padding-box;
                                        "
                                        @click="
                                          manage_handlers_add_to_assistant_response_carousel_card_button_list(
                                            'add',
                                            new_response.id,
                                            ind,
                                            num
                                          )
                                        "
                                      >
                                        <img
                                          src="/img/black_plus.png"
                                          alt=""
                                        />
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </template>
                        <div class="d-flex">
                          <p style="margin-top: 6px; margin-bottom: 5px">
                            {{tlt('manage_handlers_card_response_add_card_label')}}
                          </p>
                          <button
                            style="
                              cursor: pointer;
                              border: none;
                              background: transparent
                                url('@portal/assets/img/plus.png') 0% 0%
                                no-repeat padding-box;
                            "
                            @click="
                              manage_handlers_add_to_assistant_response_carousel_card_list(
                                'add',
                                new_response.id,
                                ind
                              )
                            "
                          >
                            <img src="/img/black_plus.png" alt="" />
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="d-flex" style="margin-left: 1rem !important">
                    <p class="sub_heading">{{tlt('manage_handlers_response_type_first_label')}} :</p>
                    <select
                      class="form-control input-tag"
                      v-model="selected_response_type"
                      style="
                        width: 100px;
                        height: 25px;
                        margin-left: 10px;
                        padding: 0px;
                      "
                      id="res_n_int_source"
                    >
                      <option
                        v-for="(option, index) in assistant_response_type"
                        :key="index"
                        :value="option"
                      >
                        {{ option }}
                      </option>
                    </select>
                    <!-- </div> -->
                    <!-- <div class="d-flex"> -->
                    <p class="sub_heading" style="margin-left: 20px">
                      {{tlt('manage_handlers_add_response_btn')}}
                    </p>
                    <button
                      style="
                        margin-top: -14px;
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        manage_handlers_add_to_assistant_response_list(
                          'add',
                          ind
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
                <div class="form-group">
                  <h5>{{tlt('manage_handlers_assist_should_label')}}</h5>
                  <div class="d-flex" style="margin-left: 1rem !important">
                    <select
                      class="form-control input-tag"
                      style="width: 120px; height: 30px; padding: 0px"
                      id="res_n_int_source"
                      disabled
                    >
                      <option value="skip_all_slots" disabled selected>
                        Skip all slots
                      </option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex">
              <p
                class="sub_heading"
                style="margin-top: 6px; margin-bottom: 5px"
              >
                {{tlt('manage_handlers_add_handler_btn')}}
              </p>
              <button
                :disabled="!Boolean(manage_handlers.length === 0)"
                class=""
                :style="
                  !Boolean(manage_handlers.length === 0)
                    ? 'cursor: not-allowed;'
                    : 'cursor: pointer;'
                "
                style="
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="add_remove_to_manage_handler_list('add')"
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
        </div>
        <!-- <div class="modal-footer">
          <a href="#" data-dismiss="modal" class="btn">Close</a>
          <a href="#" class="btn btn-primary">Save changes</a>
        </div> -->
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="notificationmodal"
    tabindex="-1"
    role="dialog"
    aria-labelledby="notificationmodal"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 style="font-style: regular" class="modal-title">
            {{tlt('config_notification_header')}}
          </h5>
          <button
            type="button"
            @click="on_close_notification_modal()"
            class="close"
            data-dismiss="modal"
            aria-hidden="true"
          >
            ×
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              {{tlt('config_notification_when_success_label')}}
            </h5>
            <div
              v-for="(
                new_response, index
              ) in notification_successful_assistant_response"
              :key="index"
              class="form-group"
            >
              <div v-if="new_response.type == 'text'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_successful_assistant_response.length-1"
                  :style="index === notification_successful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('config_success_text_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        :id="
                          'assistance_response_' + new_response.id + '_' + num
                        "
                        @focusout="
                          insert_variable_block_off(new_response.id, num)
                        "
                        @focusin="
                          insert_variable_block_on(new_response.id, num)
                        "
                        v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',
                            new_response.id
                          )
                        "
                      />
                      <div
                        style="opacity: 0"
                        :id="
                          'insert_variable_block' +
                          new_response.id +
                          '_' +
                          num
                        "
                      >
                        <a
                          @click="
                            set_assistance_response_index(
                              new_response.id,
                              num
                            )
                          "
                          class="example fa-stack fa-1x"
                          id="insert_variable_button"
                          type="button"
                          data-toggle="modal"
                          data-target="#insert_variable_modal"
                          style="margin-top: 20px !important"
                        >
                          <i
                            class="fas fa-circle fa-stack-2x"
                            style="color: #dbe2e8"
                            :id="
                              'insert_variable_circle_' +
                              new_response.id +
                              '_' +
                              num
                            "
                          >
                          </i>
                          <span
                            class="fa fa-stack-1x"
                            style="color: white"
                            @mouseover="
                              circle_mouseover(new_response.id, num)
                            "
                            @mouseout="circle_mouseout(new_response.id, num)"
                          >
                            <span style="font-size: 14px; display: block">
                              {...}
                            </span>
                          </span>
                        </a>
                      </div>
                      <span
                        style="margin-left: 12px; color: #0645ad"
                        class="my-auto"
                        v-if="
                          check_slot_value_use_in_response(
                            new_response.values[num]
                          )
                        "
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('config_success_add_value_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >{{tlt('response_variation_text1')}}
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    {{tlt('response_variation_text2')}}
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                    >
                      {{tlt('response_variation_text3')}}
                    </a>
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                    >
                      {{tlt('response_variation_text4')}}
                    </a>
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                    >
                      {{tlt('response_variation_text5')}}
                    </a>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_successful_assistant_response.length-1"
                  :style="index === notification_successful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('config_success_img_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                  />
                  <p
                    v-show="
                      check_image_url(new_response.source) == false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('img_url_condition')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'video'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_successful_assistant_response.length-1"
                  :style="index === notification_successful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('config_success_video_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Video url (It is recommended to use embed link.)"
                    type="text"
                    v-model.trim="new_response.source"
                  />
                  <p
                    v-show="
                      check_video_url(new_response.source) === false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('valid_video_url')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_successful_assistant_response.length-1"
                  :style="index === notification_successful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('config_success_choice_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="d-flex mb-2"
                      >
                        <div class="input-group" style="display: block">
                          <div class="d-flex">
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              maxlength="50"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 5px 0px 0px 5px !important;
                              "
                            />
                            <input
                              type="text"
                              v-model.trim="response.payload"
                              class="form-control input-tag"
                              :placeholder="
                                change_btn_value_placeholder(response.type)
                              "
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 0px !important;
                              "
                            />
                            <div class="input-group-append">
                              <select
                                class="form-control"
                                v-model="response.type"
                                style="
                                  width: 100px !important;
                                  height: 38px;
                                  padding: 0px !important;
                                "
                                id="button_type_list_id"
                              >
                                <option
                                  v-for="(option, index) in button_type_list"
                                  :key="index"
                                  :value="option.value"
                                >
                                  {{ option.name }}
                                </option>
                              </select>
                            </div>
                          </div>
                        </div>
                        <span
                          style="cursor: pointer; float: right"
                          class="close my-auto mr-0 ml-2"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('config_success_add_choice_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'card'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_successful_assistant_response.length-1"
                  :style="index === notification_successful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_successful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('config_success_card_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div class="row">
                      <div
                        v-for="(response, num) in new_response.card_list"
                        :key="num"
                        class="col-sm-4 pb-3"
                      >
                        <div class="card">
                          <div class="card-body">
                            <p
                              class="sub_heading_carousel"
                              style="color: dimgray; margin-bottom: 5px"
                            >
                              {{tlt('config_success_card_response_card_label')}} : {{ num + 1 }}
                            </p>
                            <span
                              style="
                                cursor: pointer;
                                float: right;
                                margin-top: -29px;
                              "
                              class="close ml-auto mr-0"
                              title="Remove Card Response"
                              v-if="new_response.card_list.length > 1"
                              @click="
                                add_to_assistant_response_carousel_card_list(
                                  'remove',
                                  new_response.id,
                                  num
                                )
                              "
                            >
                              &times;</span
                            >
                            <div>
                              <div class="d-sm-flex justify-content-start">
                                <h6
                                  class="label_header"
                                  style="margin-top: 0"
                                >
                                  {{tlt('config_success_card_response_file_type_label')}}:
                                </h6>
                                <div class="radio my-auto radio-label">
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="true"
                                      id="carousel_img"
                                    />
                                    <span
                                      class="icn"
                                      id="filter_portal_user_radio"
                                    ></span>
                                    {{tlt('config_success_card_response_image_label')}}
                                  </label>
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="false"
                                      id="carousel_video"
                                    />
                                    <span class="icn"></span> {{tlt('config_success_card_response_video_label')}}
                                  </label>
                                </div>
                              </div>
                            </div>
                            <div v-if="response.is_image">
                              <input
                                class="form-control input-tag"
                                style="width: 100%; padding: 0.375rem 0.5rem"
                                placeholder="Enter image URL"
                                type="text"
                                v-model="response.image"
                              />
                              <p
                                v-show="
                                  check_image_url(response.image) === false &&
                                  Boolean(response.image)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('img_url_condition')}}
                              </p>
                            </div>
                            <div v-else>
                              <input
                                type="text"
                                v-model.trim="response.video"
                                class="form-control input-tag"
                                placeholder="Enter video url.."
                                style="
                                  width: 100% !important;
                                  padding: 0.375rem 0.5rem;
                                "
                              />
                              <p
                                v-show="
                                  check_video_url(response.video) === false &&
                                  Boolean(response.video)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('valid_video_url')}}
                              </p>
                            </div>
                            <label class="label_header">{{tlt('config_success_card_response_title_label')}}</label>
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                              "
                            />
                            <label class="label_header">{{tlt('config_success_card_response_desc_label')}}</label>
                            <textarea
                              type="text"
                              v-model.trim="response.text"
                              class="form-control input-tag textarea-style"
                              rows="3"
                              cols="20"
                              placeholder="Enter Description"
                              style="resize: none"
                            ></textarea>
                            <div>
                              <p class="label_header">{{tlt('config_success_card_response_button_label')}}</p>
                              <!-- <div class="custom-button-box px-3 py-2 pt-0 mt-3 mb-3"> -->
                              <div class="ScrollStyle">
                                <div
                                  v-for="(
                                    button, btn_num
                                  ) in response.buttons"
                                  :key="btn_num"
                                  class="mb-2"
                                >
                                  <div class="d-flex">
                                    <div
                                      class="input-group"
                                      style="display: block"
                                    >
                                      <div class="d-flex">
                                        <input
                                          type="text"
                                          v-model.trim="button.title"
                                          class="form-control input-tag"
                                          placeholder="Enter title"
                                          maxlength="50"
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 5px 0px 0px 5px !important;
                                          "
                                        />
                                        <input
                                          type="text"
                                          v-model.trim="button.value"
                                          class="form-control input-tag"
                                          :placeholder="
                                            change_btn_value_placeholder(
                                              button.type
                                            )
                                          "
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 0px !important;
                                          "
                                        />
                                        <div class="input-group-append">
                                          <select
                                            class="form-control"
                                            v-model="button.type"
                                            style="
                                              width: 20px !important;
                                              height: 38px;
                                              padding: 0px !important;
                                            "
                                            id="button_type_list_id"
                                          >
                                            <option
                                              v-for="(
                                                option, index
                                              ) in button_type_list"
                                              :key="index"
                                              :value="option.value"
                                            >
                                              {{ option.name }}
                                            </option>
                                          </select>
                                        </div>
                                      </div>
                                    </div>
                                    <span
                                      style="
                                        cursor: pointer;
                                        float: right;
                                        margin-top: 8px;
                                      "
                                      class="close mx-1"
                                      title="Remove Button Response"
                                      v-if="response.buttons.length > 1"
                                      @click="
                                        add_to_assistant_response_carousel_card_button_list(
                                          'remove',
                                          new_response.id,
                                          num,
                                          btn_num
                                        )
                                      "
                                    >
                                      &times;</span
                                    >
                                  </div>
                                </div>
                              </div>
                              <div class="d-flex">
                                <p
                                  style="margin-top: 6px; margin-bottom: 5px"
                                >
                                  {{tlt('config_success_card_response_add_btn_label')}}
                                </p>
                                <button
                                  style="
                                    cursor: pointer;
                                    border: none;
                                    background: transparent
                                      url('@portal/assets/img/plus.png') 0% 0%
                                      no-repeat padding-box;
                                  "
                                  @click="
                                    add_to_assistant_response_carousel_card_button_list(
                                      'add',
                                      new_response.id,
                                      num
                                    )
                                  "
                                >
                                  <img src="/img/black_plus.png" alt="" />
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('config_success_card_response_add_card_label')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_carousel_card_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex" style="margin-left: 1rem !important">
              <p class="sub_heading">{{tlt('config_success_response_type_first_label')}}:</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading" style="margin-left: 20px">
                {{tlt('config_success_add_response_btn')}}
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="
                  add_notification_successful_to_assistant_response(
                    'successful'
                  )
                "
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
          <hr />
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              {{tlt('config_notification_when_unsuccess_label')}}
            </h5>
            <div
              v-for="(
                new_response, index
              ) in notification_unsuccessful_assistant_response"
              :key="index"
              class="form-group"
            >
              <div v-if="new_response.type == 'text'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_unsuccessful_assistant_response.length-1"
                  :style="index === notification_unsuccessful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('config_unsuccess_text_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        :id="
                          'assistance_response_' + new_response.id + '_' + num
                        "
                        @focusout="
                          insert_variable_block_off(new_response.id, num)
                        "
                        @focusin="
                          insert_variable_block_on(new_response.id, num)
                        "
                        v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',
                            new_response.id
                          )
                        "
                      />
                      <div
                        style="opacity: 0"
                        :id="
                          'insert_variable_block' +
                          new_response.id +
                          '_' +
                          num
                        "
                      >
                        <a
                          @click="
                            set_assistance_response_index(
                              new_response.id,
                              num
                            )
                          "
                          class="example fa-stack fa-1x"
                          id="insert_variable_button"
                          type="button"
                          data-toggle="modal"
                          data-target="#insert_variable_modal"
                          style="margin-top: 20px !important"
                        >
                          <i
                            class="fas fa-circle fa-stack-2x"
                            style="color: #dbe2e8"
                            :id="
                              'insert_variable_circle_' +
                              new_response.id +
                              '_' +
                              num
                            "
                          >
                          </i>
                          <span
                            class="fa fa-stack-1x"
                            style="color: white"
                            @mouseover="
                              circle_mouseover(new_response.id, num)
                            "
                            @mouseout="circle_mouseout(new_response.id, num)"
                          >
                            <span style="font-size: 14px; display: block">
                              {...}
                            </span>
                          </span>
                        </a>
                      </div>
                      <span
                        style="margin-left: 12px; color: #0645ad"
                        class="my-auto"
                        v-if="
                          check_slot_value_use_in_response(
                            new_response.values[num]
                          )
                        "
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('config_unsuccess_add_value_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >{{tlt('response_variation_text1')}}
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    {{tlt('response_variation_text2')}}
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                    >
                      {{tlt('response_variation_text3')}}
                    </a>
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                    >
                      {{tlt('response_variation_text4')}}
                    </a>
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                    >
                      {{tlt('response_variation_text5')}}
                    </a>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_unsuccessful_assistant_response.length-1"
                  :style="index === notification_unsuccessful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">{{tlt('config_unsuccess_img_response_header')}} :</p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                  />
                  <p
                    v-show="
                      check_image_url(new_response.source) == false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('img_url_condition')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'video'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_unsuccessful_assistant_response.length-1"
                  :style="index === notification_unsuccessful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('video_response_label')}} : {{ new_response.id }}
                </p>
                <div>
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Video url (It is recommended to use embed link.)"
                    type="text"
                    v-model.trim="new_response.source"
                  />
                  <p
                    v-show="
                      check_video_url(new_response.source) === false &&
                      Boolean(new_response.source)
                    "
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    {{tlt('valid_video_url')}}
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_unsuccessful_assistant_response.length-1"
                  :style="index === notification_unsuccessful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('config_unsuccess_choice_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="d-flex mb-2"
                      >
                        <div class="input-group" style="display: block">
                          <div class="d-flex">
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              maxlength="50"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 5px 0px 0px 5px !important;
                              "
                            />
                            <input
                              type="text"
                              v-model.trim="response.payload"
                              class="form-control input-tag"
                              :placeholder="
                                change_btn_value_placeholder(response.type)
                              "
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                                border-radius: 0px !important;
                              "
                            />
                            <div class="input-group-append">
                              <select
                                class="form-control"
                                v-model="response.type"
                                style="
                                  width: 100px !important;
                                  height: 38px;
                                  padding: 0px !important;
                                "
                                id="button_type_list_id"
                              >
                                <option
                                  v-for="(option, index) in button_type_list"
                                  :key="index"
                                  :value="option.value"
                                >
                                  {{ option.name }}
                                </option>
                              </select>
                            </div>
                          </div>
                        </div>
                        <span
                          style="cursor: pointer; float: right"
                          class="close my-auto mr-0 ml-2"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('config_unsuccess_add_choice_btn')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'card'" class="custom-box">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="
                    remove_notification_to_assistant_response(
                      new_response.id,
                      new_response.recognizes
                    )
                  "
                  class="btn btn-light"
                  title="Remove Response"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                </span>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="btn btn-light"
                  :disabled="index === notification_unsuccessful_assistant_response.length-1"
                  :style="index === notification_unsuccessful_assistant_response.length-1 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index+1].id,
                      'notification_modal'
                    )
                  "
                  title="Move down"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </button>
                <button
                  style="float: right; cursor: pointer; font-size: 14px"
                  :disabled="index === 0"
                  :style="index === 0 ?'cursor: not-allowed':''"
                  @click="
                    interchange_position_assistant_response(
                      new_response.id,
                      notification_unsuccessful_assistant_response[index-1].id,
                      'notification_modal'
                    )
                  "
                  class="btn btn-light"
                  title="Move Up"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#273679" class="bi bi-chevron-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
                  </svg>
                </button>
                <p class="sub_heading">
                  {{tlt('config_unsuccess_card_response_header')}} : {{ new_response.id }}
                </p>
                <div>
                  <template>
                    <div class="row">
                      <div
                        v-for="(response, num) in new_response.card_list"
                        :key="num"
                        class="col-sm-4 pb-3"
                      >
                        <div class="card">
                          <div class="card-body">
                            <p
                              class="sub_heading_carousel"
                              style="color: dimgray; margin-bottom: 5px"
                            >
                              {{tlt('config_unsuccess_card_response_card_label')}} : {{ num + 1 }}
                            </p>
                            <span
                              style="
                                cursor: pointer;
                                float: right;
                                margin-top: -29px;
                              "
                              class="close ml-auto mr-0"
                              title="Remove Card Response"
                              v-if="new_response.card_list.length > 1"
                              @click="
                                add_to_assistant_response_carousel_card_list(
                                  'remove',
                                  new_response.id,
                                  num
                                )
                              "
                            >
                              &times;</span
                            >
                            <div>
                              <div class="d-sm-flex justify-content-start">
                                <h6
                                  class="label_header"
                                  style="margin-top: 0"
                                >
                                  {{tlt('config_unsuccess_card_response_file_type_label')}}:
                                </h6>
                                <div class="radio my-auto radio-label">
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="true"
                                      id="carousel_img"
                                    />
                                    <span
                                      class="icn"
                                      id="filter_portal_user_radio"
                                    ></span>
                                    {{tlt('config_unsuccess_card_response_image_label')}}
                                  </label>
                                  <label style="font-size: 13px">
                                    <input
                                      type="radio"
                                      v-model="response.is_image"
                                      :value="false"
                                      id="carousel_video"
                                    />
                                    <span class="icn"></span> {{tlt('config_unsuccess_card_response_video_label')}}
                                  </label>
                                </div>
                              </div>
                            </div>
                            <div v-if="response.is_image">
                              <input
                                class="form-control input-tag"
                                style="width: 100%; padding: 0.375rem 0.5rem"
                                placeholder="Enter image URL"
                                type="text"
                                v-model="response.image"
                              />
                              <p
                                v-show="
                                  check_image_url(response.image) === false &&
                                  Boolean(response.image)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('card_response_image_condition_text')}}
                              </p>
                            </div>
                            <div v-else>
                              <input
                                type="text"
                                v-model.trim="response.video"
                                class="form-control input-tag"
                                placeholder="Enter video url.."
                                style="
                                  width: 100% !important;
                                  padding: 0.375rem 0.5rem;
                                "
                              />
                              <p
                                v-show="
                                  check_video_url(response.video) === false &&
                                  Boolean(response.video)
                                "
                                style="
                                  color: red !important;
                                  margin-bottom: 0px !important;
                                  padding-top: 8px !important;
                                "
                              >
                                {{tlt('card_response_video_condition_text')}}
                              </p>
                            </div>
                            <label class="label_header">{{tlt('config_unsuccess_card_response_title_label')}}</label>
                            <input
                              type="text"
                              v-model.trim="response.title"
                              class="form-control input-tag"
                              placeholder="Enter title"
                              style="
                                width: 100% !important;
                                padding: 0.375rem 0.5rem;
                              "
                            />
                            <label class="label_header">{{tlt('config_unsuccess_card_response_desc_label')}}</label>
                            <textarea
                              type="text"
                              v-model.trim="response.text"
                              class="form-control input-tag textarea-style"
                              rows="3"
                              cols="20"
                              placeholder="Enter Description"
                              style="resize: none"
                            ></textarea>
                            <div>
                              <p class="label_header">{{tlt('config_unsuccess_card_response_button_label')}}</p>
                              <!-- <div class="custom-button-box px-3 py-2 pt-0 mt-3 mb-3"> -->
                              <div class="ScrollStyle">
                                <div
                                  v-for="(
                                    button, btn_num
                                  ) in response.buttons"
                                  :key="btn_num"
                                  class="mb-2"
                                >
                                  <div class="d-flex">
                                    <div
                                      class="input-group"
                                      style="display: block"
                                    >
                                      <div class="d-flex">
                                        <input
                                          type="text"
                                          v-model.trim="button.title"
                                          class="form-control input-tag"
                                          placeholder="Enter title"
                                          maxlength="50"
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 5px 0px 0px 5px !important;
                                          "
                                        />
                                        <input
                                          type="text"
                                          v-model.trim="button.value"
                                          class="form-control input-tag"
                                          :placeholder="
                                            change_btn_value_placeholder(
                                              button.type
                                            )
                                          "
                                          style="
                                            width: 100% !important;
                                            padding: 0.375rem 0.5rem;
                                            border-radius: 0px !important;
                                          "
                                        />
                                        <div class="input-group-append">
                                          <select
                                            class="form-control"
                                            v-model="button.type"
                                            style="
                                              width: 20px !important;
                                              height: 38px;
                                              padding: 0px !important;
                                            "
                                            id="button_type_list_id"
                                          >
                                            <option
                                              v-for="(
                                                option, index
                                              ) in button_type_list"
                                              :key="index"
                                              :value="option.value"
                                            >
                                              {{ option.name }}
                                            </option>
                                          </select>
                                        </div>
                                      </div>
                                    </div>
                                    <span
                                      style="
                                        cursor: pointer;
                                        float: right;
                                        margin-top: 8px;
                                      "
                                      class="close mx-1"
                                      title="Remove Button Response"
                                      v-if="response.buttons.length > 1"
                                      @click="
                                        add_to_assistant_response_carousel_card_button_list(
                                          'remove',
                                          new_response.id,
                                          num,
                                          btn_num
                                        )
                                      "
                                    >
                                      &times;</span
                                    >
                                  </div>
                                </div>
                              </div>
                              <div class="d-flex">
                                <p
                                  style="margin-top: 6px; margin-bottom: 5px"
                                >
                                  {{tlt('config_unsuccess_card_response_add_btn_label')}}
                                </p>
                                <button
                                  style="
                                    cursor: pointer;
                                    border: none;
                                    background: transparent
                                      url('@portal/assets/img/plus.png') 0% 0%
                                      no-repeat padding-box;
                                  "
                                  @click="
                                    add_to_assistant_response_carousel_card_button_list(
                                      'add',
                                      new_response.id,
                                      num
                                    )
                                  "
                                >
                                  <img src="/img/black_plus.png" alt="" />
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      {{tlt('config_unsuccess_card_response_add_card_label')}}
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_carousel_card_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex" style="margin-left: 1rem !important">
              <p class="sub_heading">{{tlt('config_unsuccess_response_type_first_label')}} :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading" style="margin-left: 20px">
                {{tlt('config_unsuccess_add_response_btn')}}
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="
                  add_notification_successful_to_assistant_response(
                    'unsuccessful'
                  )
                "
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
        </div>
        <!-- <div class="modal-footer">
          <a href="#" data-dismiss="modal" class="btn">Close</a>
          <a href="#" class="btn btn-primary">Save changes</a>
        </div> -->
      </div>
    </div>
  </div>
  <div
    class="modal"
    id="insert_variable_modal"
    aria-labelledby="insert_variable_modal"
  >
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
      <div class="modal-content" style="box-shadow: none !important">
        <div class="modal-body">
          <div>
            <multiselect
              id="insert_variable_id"
              :close-on-select="false"
              :options="insert_slot_variable_options"
              placeholder="Select Variable"
              :show-labels="false"
              open-direction="top"
              :max-height="120"
              @open="add_to_insert_slot_variable_options"
              @input="insert_slot_variable_to_assistance_response($event)"
            >
            </multiselect>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    class="modal"
    id="manage_handlers_insert_variable_modal"
    aria-labelledby="manage_handlers_insert_variable_modal"
  >
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
      <div class="modal-content" style="box-shadow: none !important">
        <div class="modal-body">
          <div>
            <multiselect
              id="manage_handlers_insert_variable_id"
              :close-on-select="false"
              :options="insert_slot_variable_options"
              placeholder="Select Variable"
              :show-labels="false"
              open-direction="top"
              :max-height="120"
              @open="add_to_insert_slot_variable_options"
              @input="
                manage_handlers_insert_slot_variable_to_assistance_response(
                  $event
                )
              "
            >
            </multiselect>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
"},null]}