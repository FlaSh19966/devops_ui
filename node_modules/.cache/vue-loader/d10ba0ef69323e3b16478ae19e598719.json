{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/End User Response/VerifyResponses.vue?vue&type=style&index=1&id=e4564b54&scoped=true&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/End User Response/VerifyResponses.vue","mtime":1643027096172},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojbXVsdGlzZWxlY3RfdGQgewogIGJvcmRlcjogbm9uZTsKICB3aWR0aDogYXV0bzsKfQo="},{"version":3,"sources":["VerifyResponses.vue"],"names":[],"mappingsw6CA;AACA;AACA;AACA","file":"VerifyResponses.vue","sourceRoot":"src/portal/Chatbot/Dashboard/End User Response","sourcesContent":["<template>\n  <div class=\"dash-cont\">\n    <div class=\"container-fluid\">\n      <!-- <div class=\"dash-wrap slim\"> -->\n      <div class=\"card dash-card\">\n        <div\n          class=\"card-header d-block d-sm-flex flex-wrap justify-content-between\"\n        >\n          <h4 class=\"mb-sm-0\">Verify Responses</h4>\n          <div class=\"card-act d-flex flex-wrap\">\n            <input\n              class=\"form-control search-bar\"\n              id=\"search_bar\"\n              placeholder=\"Search here\"\n              v-model.trim=\"search_name\"\n              @keydown.enter=\"search_question\"\n            />\n            <a type=\"button\" v-if=\"isVisibleSearchClear\" class=\"btn bg-transparent mt-auto mb-auto py-0\" @click=\"clear_search_name\" style=\"margin-left: -40px; z-index: 10;\">\n              <img src=\"/img/close-icn.png\" alt />\n            </a>\n            <a\n              href=\"#\"\n              class=\"darkblue-btn\"\n              @click=\"search_question\"\n              id=\"search_btn\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n                width=\"14\"\n                height=\"14\"\n              >\n                <path\n                  d=\"M13.809011327100071,12.965505435601472 L9.30910012117823,8.49330664854199 C10.007392079586584,7.596111589605521 10.38512817619458,6.499157170138106 10.38512817619458,5.345374656726532 c0,-1.3810948891881802 -0.5423458634784514,-2.676086605733705 -1.523073527148749,-3.6524965835014083 c-0.9807276636702976,-0.9764099777677033 -2.287209392305289,-1.5136937750578685 -3.6751296371814526,-1.5136937750578685 s-2.6944019735111544,0.5390058607430178 -3.6751296371814526,1.5136937750578685 C0.5293349766245179,2.667565987539975 -0.011278152465820316,3.9642797675383576 -0.011278152465820316,5.345374656726532 c0,1.3793728257353273 0.5423458634784514,2.6778086691865575 1.523073527148749,3.6524965835014083 C2.492523038353222,9.974281217995648 3.7972720326001044,10.51156501528581 5.18692501186438,10.51156501528581 c1.160932040033745,0 2.2629511108717475,-0.37540983272197437 3.165705727077092,-1.0676793407689171 l4.499911205921844,4.470476723606628 a0.1420842198250257,0.14120920313395363 0 0 0 0.20099718902076805,0 l0.7554721932159904,-0.7490976019910955 a0.1420842198250257,0.14120920313395363 0 0 0 0,-0.19975936053095905 zM7.931576282630728,8.073123166045836 C7.196896902072058,8.80155600660269 6.2231001759542055,9.20279679111746 5.18692501186438,9.20279679111746 s-2.0099718902076775,-0.4012407845147706 -2.744651270766347,-1.1296736250716286 C1.709327094927478,7.342968262036121 1.3055999824978375,6.37516860153268 1.3055999824978375,5.345374656726532 s0.4037271124296458,-1.99931566876244 1.1366737586002036,-2.727748509319298 C3.1769531216567026,1.8891933068503817 4.150749847774562,1.4879525223356067 5.18692501186438,1.4879525223356067 s2.0117046245957884,0.3995187210619175 2.744651270766347,1.1296736250716286 S9.06825004123093,4.315580711920385 9.06825004123093,5.345374656726532 s-0.4037271124296458,1.99931566876244 -1.1366737586002036,2.727748509319298 z\"\n                  fill=\"#fff\"\n                />\n              </svg>\n            </a>\n            <button\n              id=\"verify_response_train_model_btn\"\n              type=\"submit\"\n              :disabled=\"intent_model_inprogress == true\"\n              :style=\"show_model_progress('style')\"\n              :title=\"show_model_progress('title')\"\n              @click=\"train_intent_model\"\n              class=\"darkblue-btn\">\n              <i class=\"fa fa-spinner fa-spin\" v-show=\"intent_model_inprogress\"></i>\n              Train Model\n            </button>\n            <button id=\"verify_response_save_btn\" type=\"submit\" class=\"darkblue-btn\" @click=\"add_questions\">\n              Save\n            </button>\n            <a\n              href=\"javascript:void(0)\"\n              class=\"red-btn\"\n              @click=\"delete_multiple\"\n              id=\"delete_role\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"14\"\n                height=\"14\"\n                viewBox=\"0 0 14 14\"\n              >\n                <path\n                  id=\"trash-can-outline\"\n                  d=\"M8.375,3v.778H4V5.333h.875V15.444A1.661,1.661,0,0,0,6.625,17h8.75a1.661,1.661,0,0,0,1.75-1.556V5.333H18V3.778H13.625V3H8.375M6.625,5.333h8.75V15.444H6.625V5.333m1.75,1.556v7h1.75v-7H8.375m3.5,0v7h1.75v-7Z\"\n                  transform=\"translate(-4 -3)\"\n                  fill=\"#fff\"\n                />\n              </svg>\n              Delete\n            </a>\n          </div>\n        </div>\n        <div class=\"card-body\" id=\"page\">\n          <ul class=\"nav nav-tabs mb-3\" id=\"myTab\" role=\"tablist\">\n            <li class=\"nav-item\">\n              <a\n                class=\"nav-link pl-5 pr-5\"\n                id=\"user_responses-tab\"\n                data-toggle=\"tab\"\n                href=\"#user_responses\"\n                role=\"tab\"\n                aria-controls=\"user_responses\"\n                @click=\"view_component_name = 'user_responses'\"\n                >User Responses</a\n              >\n            </li>\n            <li class=\"nav-item\">\n              <a\n                class=\"nav-link pl-5 pr-5\"\n                id=\"unanswered_questions-tab\"\n                data-toggle=\"tab\"\n                href=\"#unanswered_questions\"\n                role=\"tab\"\n                aria-controls=\"unanswered_questions\"\n                @click=\"view_component_name = 'unanswered_questions'\"\n                >Unanswered Questions</a\n              >\n            </li>\n          </ul>\n          <div class=\"tab-content\" id=\"myTabContent\">\n            <div\n              class=\"tab-pane fade\"\n              id=\"unanswered_questions\"\n              role=\"tabpanel\"\n              aria-labelledby=\"unanswered_questions-tab\"\n            >\n              <template v-if=\"view_component_name === 'unanswered_questions'\">\n                <!-- <div class=\"table-box\">\n                  <div class=\"table-responsive\">\n                    <table class=\"table\">\n                      <thead>\n                        <tr>\n                          <th scope=\"col\">\n                            <div class=\"form-check checkbox checkbox-success\">\n                              <label class=\"form-check-label\">\n                                <input\n                                  class=\"form-check-input\"\n                                  id=\"selectall\"\n                                  type=\"checkbox\"\n                                  @change=\"question_selected('all')\"\n                                />\n                                <span class=\"icn\"></span>\n                              </label>\n                            </div>\n                          </th>\n                          <th scope=\"col\" style=\"width: 5%\">ACTION</th>\n                          <th scope=\"col\">QUESTIONS</th>\n                          <th scope=\"col\">INTENT</th>\n                          <th scope=\"col\" style=\"width: 2%\">SOURCES</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr\n                          v-for=\"(row, index) in unanswered_list\"\n                          :key=\"index\"\n                          id=\"list-group\"\n                        >\n                          <template v-if=\"row.user_response === null\">\n                            <th scope=\"col\">\n                              <div class=\"form-check checkbox checkbox-success\">\n                                <label class=\"form-check-label\">\n                                  <input\n                                    class=\"form-check-input\"\n                                    @change=\"question_selected(index)\"\n                                    type=\"checkbox\"\n                                  />\n                                  <span class=\"icn\"></span>\n                                </label>\n                              </div>\n                            </th>\n                            <td class=\"action\">\n                              <a href=\"#\" @click=\"edit_item(index)\">\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  width=\"15.392\"\n                                  height=\"15.392\"\n                                  viewBox=\"0 0 15.392 15.392\"\n                                  data-toggle=\"modal\"\n                                  data-target=\"#exampleModalCenter\"\n                                >\n                                  <path\n                                    id=\"square-edit-outline\"\n                                    d=\"M4.71,3A1.7,1.7,0,0,0,3,4.71V16.682a1.71,1.71,0,0,0,1.71,1.71H16.682a1.71,1.71,0,0,0,1.71-1.71V10.7h-1.71v5.986H4.71V4.71H10.7V3H4.71m10.928.855a.591.591,0,0,0-.41.171L14.185,5.061,16.322,7.2l1.043-1.035a.578.578,0,0,0,0-.812L16.04,4.026a.571.571,0,0,0-.4-.171M13.578,5.668l-6.3,6.311v2.138H9.413l6.3-6.311Z\"\n                                    transform=\"translate(-3 -3)\"\n                                    fill=\"#9499ae\"\n                                  />\n                                </svg>\n                              </a>\n                              <a href=\"#\" @click=\"delete_single(index)\">\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  width=\"13.682\"\n                                  height=\"15.392\"\n                                  viewBox=\"0 0 13.682 15.392\"\n                                >\n                                  <path\n                                    id=\"trash-can-outline\"\n                                    d=\"M8.276,3v.855H4v1.71h.855V16.682a1.71,1.71,0,0,0,1.71,1.71h8.551a1.71,1.71,0,0,0,1.71-1.71V5.565h.855V3.855H13.406V3H8.276M6.565,5.565h8.551V16.682H6.565V5.565m1.71,1.71v7.7h1.71v-7.7H8.276m3.42,0v7.7h1.71v-7.7Z\"\n                                    transform=\"translate(-4 -3)\"\n                                    fill=\"#f23d3d\"\n                                  />\n                                </svg>\n                              </a>\n                            </td>\n                            <td>{{ row.question }}</td>\n                            <td>\n                              <div class=\"form-group\">\n                                <multiselect\n                                  v-model=\"row.intent\"\n                                  :searchable=\"true\"\n                                  :close-on-select=\"true\"\n                                  :show-labels=\"false\"\n                                  :options=\"intent_list\"\n                                >\n                                  <span>{{ row.intent }}</span>\n                                </multiselect>\n                              </div>\n                            </td>\n                            <td>{{ row.source }}</td>\n                          </template>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  <div class=\"pagin-table\" style=\"margin-top: 2%\">\n                    <nav aria-label=\"Page navigation example\">\n                      <ul class=\"pagination justify-content-center\">\n                        <li class=\"page-item\">\n                          <a\n                            class=\"page-link\"\n                            href=\"#\"\n                            @click=\"page_require(page_no - 1)\"\n                          >\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"8.667\"\n                              height=\"15.204\"\n                              viewBox=\"0 0 8.667 15.204\"\n                            >\n                              <g\n                                id=\"arrow-point-to-left\"\n                                transform=\"translate(105.806 15.204) rotate(180)\"\n                              >\n                                <path\n                                  id=\"Path_1136\"\n                                  data-name=\"Path 1136\"\n                                  d=\"M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z\"\n                                  transform=\"translate(0 0)\"\n                                  fill=\"#9499ae\"\n                                />\n                              </g>\n                            </svg>\n                          </a>\n                        </li>\n                        <li\n                          :class=\"'page-item ' + pagination_class(pageno)\"\n                          v-for=\"pageno in page_array\"\n                          :key=\"pageno\"\n                        >\n                          <a\n                            v-if=\"pageno == '...s' || pageno == '...l'\"\n                            class=\"page-link\"\n                            href=\"#\"\n                            @click=\"page_require(pageno)\"\n                            >...</a\n                          >\n                          <a\n                            v-if=\"pageno != '...s' && pageno != '...l'\"\n                            class=\"page-link\"\n                            href=\"#\"\n                            @click=\"page_require(pageno)\"\n                            >{{ pageno }}</a\n                          >\n                        </li>\n                        <li class=\"page-item\">\n                          <a\n                            class=\"page-link\"\n                            href=\"#\"\n                            @click=\"page_require(page_no + 1)\"\n                          >\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"8.667\"\n                              height=\"15.204\"\n                              viewBox=\"0 0 8.667 15.204\"\n                            >\n                              <g\n                                id=\"arrow-point-to-right\"\n                                transform=\"translate(-97.139 0)\"\n                              >\n                                <path\n                                  id=\"Path_1136\"\n                                  data-name=\"Path 1136\"\n                                  d=\"M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z\"\n                                  transform=\"translate(0 0)\"\n                                  fill=\"#9499ae\"\n                                />\n                              </g>\n                            </svg>\n                          </a>\n                        </li>\n                      </ul>\n                    </nav>\n                  </div>\n                </div> -->\n                <unanswered-responses />\n              </template>\n            </div>\n            <div\n              class=\"tab-pane fade\"\n              id=\"user_responses\"\n              role=\"tabpanel\"\n              aria-labelledby=\"user_responses-tab\"\n            >\n              <template v-if=\"view_component_name === 'user_responses'\">\n                <!-- <div class=\"table-box\">\n                  <div class=\"table-responsive\">\n                    <table class=\"table\">\n                      <thead>\n                        <tr>\n                          <th scope=\"col\">\n                            <div class=\"form-check checkbox checkbox-success\">\n                              <label class=\"form-check-label\">\n                                <input\n                                  class=\"form-check-input\"\n                                  id=\"selectall\"\n                                  type=\"checkbox\"\n                                  @change=\"question_selected('all')\"\n                                />\n                                <span class=\"icn\"></span>\n                              </label>\n                            </div>\n                          </th>\n                          <th scope=\"col\" style=\"width: 5%\">ACTION</th>\n                          <th scope=\"col\">QUESTIONS</th>\n                          <th scope=\"col\">INTENT</th>\n                          <th scope=\"col\" style=\"width: 2%\">SOURCES</th>\n                          <th scope=\"col\">USER RESPONSES</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr\n                          v-for=\"(row, index) in unanswered_list\"\n                          :key=\"index\"\n                          id=\"list-group\"\n                        >\n                          <template v-if=\"row.user_response !== null\">\n                            <th scope=\"col\">\n                              <div class=\"form-check checkbox checkbox-success\">\n                                <label class=\"form-check-label\">\n                                  <input\n                                    class=\"form-check-input\"\n                                    @change=\"question_selected(index)\"\n                                    type=\"checkbox\"\n                                  />\n                                  <span class=\"icn\"></span>\n                                </label>\n                              </div>\n                            </th>\n                            <td class=\"action\">\n                              <a href=\"#\" @click=\"edit_item(index)\">\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  width=\"15.392\"\n                                  height=\"15.392\"\n                                  viewBox=\"0 0 15.392 15.392\"\n                                  data-toggle=\"modal\"\n                                  data-target=\"#exampleModalCenter\"\n                                >\n                                  <path\n                                    id=\"square-edit-outline\"\n                                    d=\"M4.71,3A1.7,1.7,0,0,0,3,4.71V16.682a1.71,1.71,0,0,0,1.71,1.71H16.682a1.71,1.71,0,0,0,1.71-1.71V10.7h-1.71v5.986H4.71V4.71H10.7V3H4.71m10.928.855a.591.591,0,0,0-.41.171L14.185,5.061,16.322,7.2l1.043-1.035a.578.578,0,0,0,0-.812L16.04,4.026a.571.571,0,0,0-.4-.171M13.578,5.668l-6.3,6.311v2.138H9.413l6.3-6.311Z\"\n                                    transform=\"translate(-3 -3)\"\n                                    fill=\"#9499ae\"\n                                  />\n                                </svg>\n                              </a>\n                              <a href=\"#\" @click=\"delete_single(index)\">\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  width=\"13.682\"\n                                  height=\"15.392\"\n                                  viewBox=\"0 0 13.682 15.392\"\n                                >\n                                  <path\n                                    id=\"trash-can-outline\"\n                                    d=\"M8.276,3v.855H4v1.71h.855V16.682a1.71,1.71,0,0,0,1.71,1.71h8.551a1.71,1.71,0,0,0,1.71-1.71V5.565h.855V3.855H13.406V3H8.276M6.565,5.565h8.551V16.682H6.565V5.565m1.71,1.71v7.7h1.71v-7.7H8.276m3.42,0v7.7h1.71v-7.7Z\"\n                                    transform=\"translate(-4 -3)\"\n                                    fill=\"#f23d3d\"\n                                  />\n                                </svg>\n                              </a>\n                            </td>\n                            <td>{{ row.question }}</td>\n                            <td>\n                              <div class=\"form-group\">\n                                <multiselect\n                                  v-model=\"row.intent\"\n                                  :searchable=\"true\"\n                                  :close-on-select=\"true\"\n                                  :show-labels=\"false\"\n                                  :options=\"intent_list\"\n                                >\n                                  <span>{{ row.intent }}</span>\n                                </multiselect>\n                              </div>\n                            </td>\n                            <td>{{ row.source }}</td>\n                            <td class=\"text-center\">\n                              <img\n                                :src=\"thumbs_down_icon\"\n                                v-if=\"row.user_feedback == 'dislike'\"\n                              />\n                              <img\n                                :src=\"thumbs_up_icon\"\n                                v-else-if=\"row.user_feedback == 'like'\"\n                              />\n                            </td>\n                          </template>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  <div class=\"pagin-table\" style=\"margin-top: 2%\">\n                    <nav aria-label=\"Page navigation example\">\n                      <ul class=\"pagination justify-content-center\">\n                        <li class=\"page-item\">\n                          <a\n                            class=\"page-link\"\n                            href=\"#\"\n                            @click=\"page_require(page_no - 1)\"\n                          >\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"8.667\"\n                              height=\"15.204\"\n                              viewBox=\"0 0 8.667 15.204\"\n                            >\n                              <g\n                                id=\"arrow-point-to-left\"\n                                transform=\"translate(105.806 15.204) rotate(180)\"\n                              >\n                                <path\n                                  id=\"Path_1136\"\n                                  data-name=\"Path 1136\"\n                                  d=\"M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z\"\n                                  transform=\"translate(0 0)\"\n                                  fill=\"#9499ae\"\n                                />\n                              </g>\n                            </svg>\n                          </a>\n                        </li>\n                        <li\n                          :class=\"'page-item ' + pagination_class(pageno)\"\n                          v-for=\"pageno in page_array\"\n                          :key=\"pageno\"\n                        >\n                          <a\n                            v-if=\"pageno == '...s' || pageno == '...l'\"\n                            class=\"page-link\"\n                            href=\"#\"\n                            @click=\"page_require(pageno)\"\n                            >...</a\n                          >\n                          <a\n                            v-if=\"pageno != '...s' && pageno != '...l'\"\n                            class=\"page-link\"\n                            href=\"#\"\n                            @click=\"page_require(pageno)\"\n                            >{{ pageno }}</a\n                          >\n                        </li>\n                        <li class=\"page-item\">\n                          <a\n                            class=\"page-link\"\n                            href=\"#\"\n                            @click=\"page_require(page_no + 1)\"\n                          >\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"8.667\"\n                              height=\"15.204\"\n                              viewBox=\"0 0 8.667 15.204\"\n                            >\n                              <g\n                                id=\"arrow-point-to-right\"\n                                transform=\"translate(-97.139 0)\"\n                              >\n                                <path\n                                  id=\"Path_1136\"\n                                  data-name=\"Path 1136\"\n                                  d=\"M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z\"\n                                  transform=\"translate(0 0)\"\n                                  fill=\"#9499ae\"\n                                />\n                              </g>\n                            </svg>\n                          </a>\n                        </li>\n                      </ul>\n                    </nav>\n                  </div>\n                </div> -->\n                <unanswered-feedback />\n              </template>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- <div\n        class=\"modal fade dash-modal\"\n        id=\"exampleModalCenter\"\n        tabindex=\"-1\"\n        role=\"dialog\"\n        aria-labelledby=\"exampleModalCenterTitle\"\n        aria-hidden=\"true\"\n      >\n        <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-body\">\n              <div class=\"modal-head d-flex align-items-center\">\n                <div class=\"head-icn\">\n                  <img src=\"/img/msg-blue.png\" alt />\n                </div>\n                <h3>Add Unanswered Question</h3>\n              </div>\n              <button\n                type=\"button\"\n                class=\"close\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n              >\n                <img src=\"/img/close-icn.png\" alt />\n              </button>\n              <form @submit=\"submit_question\">\n                <div class=\"form-group\">\n                  <label>Your Question</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"Enter your question\"\n                    v-model=\"old_question\"\n                    id=\"add_question_question\"\n                  />\n                </div>\n                <div class=\"form-group\">\n                  <label>Select Intent</label>\n                  <multiselect\n                    v-model=\"old_intent\"\n                    id=\"qus_n_int_intent\"\n                    :options=\"intent_list\"\n                    :searchable=\"true\"\n                    :close-on-select=\"true\"\n                    :show-labels=\"false\"\n                  >\n                    <span>{{ old_intent }}</span>\n                  </multiselect>\n                </div>\n                <div class=\"btn-wrap text-right\">\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-link\"\n                    data-dismiss=\"modal\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    type=\"submit\"\n                    class=\"darkblue-btn\"\n                    id=\"add_quesn_save\"\n                  >\n                    Save\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div> -->\n\n      <!-- </div> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport Swal from \"sweetalert2\";\nimport api_calls from \"@/portal/api_calls\";\nimport { setTimeout } from \"timers\";\nimport Multiselect from \"vue-multiselect\";\nimport unansweredResponses from \"./VerifyResponsesUnanswered.vue\";\nimport unansweredFeedback from \"./VerifyResponsesUserFeedback.vue\";\nimport { freeze_portal, show_subscription_expired_swal } from \"@/portal/mixins\";\n\nexport default {\n  name: \"VerifyResponsePage\",\n  mixins: [\n    freeze_portal,\n    show_subscription_expired_swal\n  ],\n  components: {\n    Multiselect,\n    unansweredResponses,\n    unansweredFeedback,\n  },\n  data() {\n    return {\n      unanswered_list: [],\n      user_role: this.$session.get(\"UserInformation\").role,\n      companyname: this.$session.get(\"UserInformation\").company_name,\n      companyid: this.$session.get(\"UserInformation\").company_id,\n      intent_list: [],\n      checked_list: [],\n      intentlist: \"\",\n      per_page: 10,\n      page_no: 1,\n      total_pages: 0,\n      show_loader: false,\n      number_of_rows: null,\n      search_name: \"\",\n      page_array: [],\n      old_question: \"\",\n      old_intent: \"\",\n      new_intent_list: [],\n      old_data: { question: null, intent: null },\n      thumbs_down_icon: require(\"@/portal/assets/img/Group 61.svg\"),\n      thumbs_up_icon: require(\"@/portal/assets/img/Group 71.svg\"),\n      view_component_name: \"user_responses\",\n      isVisibleSearchClear: false,\n      intent_model_inprogress: false,\n      want_status: true,\n      disable_btn_expired: false,\n    };\n  },\n  mounted() {\n    setTimeout(() => {\n      this.freeze_portal();\n    }, 1000);   \n    this.$root.$on(\"VerifyResponsePageDisabled\", (data) =>{\n      if(data===true){\n        this.disable_btn_expired = true;\n      }\n    })\n    var vm = this;\n    $(\"#selectall\").click(function () {\n      if ($(this).is(\":checked\")) {\n        $(\"input:checkbox\").prop(\"checked\", true);\n      } else {\n        vm.checked_list = [];\n        $(\"input:checkbox\").prop(\"checked\", false);\n      }\n    });\n    // $(\"#unanswered_questions-tab\").click();\n    $(\"#user_responses-tab\").click();\n    if (this.$route.params.modal_open_switch_tab === false) {\n      // this.view_component_name = \"user_responses\";\n      // $(\"#user_responses-tab\").click();\n      $(\"#unanswered_questions-tab\").click();\n      this.view_component_name = \"unanswered_questions\";\n    }\n    if(this.$route.query.switch === 'true'){\n      this.view_component_name = \"user_responses\";\n      $(\"#user_responses-tab\").click();\n    }\n    this.$root.$emit('change_sidebar_main_menu', 'Training Hub');\n    this.$root.$on(\"send_model_status\", data =>{\n      if (data == true){\n        this.check_intent_model_status();\n      }\n    })\n    this.check_intent_model_status();\n  },\n  created() {\n    this.load_verify_responses();\n  },\n  methods: {\n      clear_search_name(){\n      this.search_name = \"\";\n    },\n    check_intent_model_status(){\n    this.model_status = this.$session.get(\"ModelStatus\");\n    if (this.model_status == \"No Failure\"){\n    this.intent_model_inprogress = false;\n    }\n    else if (Boolean(this.model_status.intent_model) === true)\n    {\n     if(this.model_status.intent_model == \"InProgress\"){\n       this.intent_model_inprogress = true;\n     }\n     else{\n       this.intent_model_inprogress = false;\n     }\n    }\n    else{\n      this.intent_model_inprogress = false; \n    }\n    },\n    show_model_progress(index){\n      if(this.intent_model_inprogress == true){\n         if (index == 'style'){\n            return \"cursor: not-allowed\";\n          }\n          else if(index == 'title'){\n              return \"Training in Progress (This process might take around 45 mins to finish) \";\n          }\n      }\n      else{\n        return null;\n      }\n    },\n    load_verify_responses(){\n    this.show_loader = true;\n    this.checked_list = [];\n    this.search_name = \"\";\n    if (this.user_role == \"SuperAdmin\") {\n      if (this.$session.has(\"CompanyId\")) {\n        this.companyid = this.$session.get(\"CompanyId\");\n        this.companyname = this.$session.get(\"CompanyName\");\n      } else {\n        this.companyid = this.$session.get(\"UserInformation\").company_id;\n        this.companyname = this.$session.get(\"UserInformation\").company_name;\n      }\n    } else {\n      this.companyid = this.$session.get(\"UserInformation\").company_id;\n      this.companyname = this.$session.get(\"UserInformation\").company_name;\n    }\n    if (this.view_component_name === \"unanswered_questions\") {\n        this.$root.$emit(\"load_verify_responses_unanswered\", true);\n      } else if (this.view_component_name === \"user_responses\") {\n        this.$root.$emit(\"load_verify_responses_user_feedback\", true);\n      }\n    // if (this.companyname !== undefined) {\n    //   axios\n    //     .post(\n    //       api_calls.get_unanswered_url(),\n    //       {\n    //         companyname: this.companyname,\n    //         companyid: this.companyid,\n    //         email: this.$session.get(\"UserInformation\").email,\n    //         isDelete: \"False\",\n    //         license_key: this.$session.get(\"UserInformation\").license_key,\n    //         token: this.$session.get(\"UserInformation\").tokens,\n    //         page_no: this.page_no,\n    //         per_page: this.per_page,\n    //       },\n    //       {\n    //         headers: {\n    //           Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //         },\n    //       }\n    //     )\n    //     .then((response) => {\n    //       this.number_of_rows = response.data[0].length;\n    //       this.total_pages = response.data[4].pagecount;\n    //       var data = response.data;\n    //       for (var i in data[0]) {\n    //         let temp_int = \"\";\n    //         if (Boolean(data[2][i])) {\n    //           temp_int = data[2][i].replace(this.companyid + \"_\", \"\");\n    //         }\n    //         this.unanswered_list.push({\n    //           question: data[0][i],\n    //           intent: temp_int,\n    //           source: data[1][i],\n    //           user_response: data[2][i],\n    //           user_feedback: data[3][i],\n    //           edit: false,\n    //         });\n    //       }\n    //       this.setpagination(this.page_no);\n    //       this.show_loader = false;\n    //     })\n    //     .catch((e) => {\n    //       if (\n    //         e.response.status === 410 ||\n    //         e.response.status === 440 ||\n    //         e.response.status === 409\n    //       ) {\n    //         this.$root.$emit(\"Session_Expired\", e.response.data);\n    //       } else {\n    //         toastr.error(e.message);\n    //       }\n    //       this.show_loader = false;\n    //     });\n    // }\n    // axios\n    //   .post(\n    //     api_calls.get_unanswered_url(),\n    //     {\n    //       companyid: this.companyid,\n    //       companyname: this.companyname,\n    //       isDropdown: \"True\",\n    //       email: this.$session.get(\"UserInformation\").email,\n    //       license_key: this.$session.get(\"UserInformation\").license_key,\n    //       token: this.$session.get(\"UserInformation\").tokens,\n    //     },\n    //     {\n    //       headers: {\n    //         Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //       },\n    //     }\n    //   )\n    //   .then((response) => {\n    //     for (var i in response.data[0]) {\n    //       this.intent_list.push(\n    //         response.data[0][i].replace(this.companyid + \"_\", \"\")\n    //       );\n    //       this.new_intent_list.push(\n    //         response.data[0][i].replace(this.companyid + \"_\", \"\")\n    //       );\n    //     }\n    //   })\n    //   .catch((e) => {\n    //     if (\n    //       e.response.status === 410 ||\n    //       e.response.status === 440 ||\n    //       e.response.status === 409\n    //     ) {\n    //       this.$root.$emit(\"Session_Expired\", e.response.data);\n    //     }\n    //   });\n    },\n    train_intent_model() {\n      if(!this.disable_btn_expired){\n         event.preventDefault();\n      // if (this.unanswered_list.length >= 1) {\n        Swal({\n          title: \"Are You Sure?\",\n          text: \"You want to Train The Model?\",\n          type: \"question\",\n          showCancelButton: true,\n          confirmButtonColor: \"#3085d6\",\n          cancelButtonColor: \"#d33\",\n          confirmButtonText: \"Yes, Confirm!\",\n          allowOutsideClick: false,\n          allowEscapeKey: false,\n        }).then((result) => {\n          if (result.value) {\n            axios\n              .post(\n                api_calls.train_intent_model(),\n                {\n                  company_id: this.$session.get(\"UserInformation\").company_id,\n                  company_name: this.$session.get(\"UserInformation\")\n                    .company_name,\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  epochs: 100,\n                  update_model: true,\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                this.want_status = true;\n                this.$root.$emit(\"want_model_status\",this.want_status);\n              this.check_intent_model_status();\n                if (response.data.MSG_CODE === 4046) {\n                  toastr.success(response.data.MSG);\n                } else if (response.data.MSG_CODE === 1034) {\n                  toastr.error(response.data.MSG);\n                }\n              })\n              .catch((e) => {\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n              });\n          }\n        });}else{\n          this.show_subscription_expired_swal();\n        }\n      // } else {\n      //   toastr.error(\"You must have atleast one question to train your model\");\n      // }\n    },\n    search_question() {\n      if (this.view_component_name === \"unanswered_questions\") {\n        this.$root.$emit(\"search_unanswered\", this.search_name);\n      } else if (this.view_component_name === \"user_responses\") {\n        this.$root.$emit(\"search_user_responses\", this.search_name);\n      }\n      // if(this.search_by!=''){\n      // console.log(\"hey\");\n      // if (this.search_name != \"\") {\n      //   this.spinnerOn = true;\n      //   axios\n      //     .post(\n      //       api_calls.get_unanswered_url(),\n      //       {\n      //         companyid: this.$session.get(\"UserInformation\").company_id,\n      //         companyname: this.$session.get(\"UserInformation\").company_name,\n      //         license_key: this.$session.get(\"UserInformation\").license_key,\n      //         email: this.$session.get(\"UserInformation\").email,\n      //         token: this.$session.get(\"UserInformation\").tokens,\n      //         issearch: true,\n      //         // searchby: this.search_by,\n      //         key: this.search_name,\n      //         per_page: this.per_page,\n      //         page_no: 1,\n      //       },\n      //       {\n      //         headers: {\n      //           Authorization: `Bearer ${this.$session.get(\"at\")}`,\n      //         },\n      //       }\n      //     )\n      //     .then((response) => {\n      //       this.spinnerOn = false;\n      //       if (response.data.MSG == \"No Questions Found\") {\n      //         toastr.error(\"No Question Found\");\n      //         setTimeout(() => {\n      //           this.$router.go();\n      //         }, 2500);\n      //       } else if (response.data[4].pagecount != undefined) {\n      //         this.page_no = 1;\n      //         this.unanswered_list = [];\n      //         this.number_of_rows = response.data[0].length;\n      //         this.total_pages = response.data[4].pagecount;\n      //         var data = response.data;\n      //         for (var i in response.data[0]) {\n      //           this.unanswered_list.push({\n      //             question: response.data[0][i],\n      //             intent: \"\",\n      //             source: response.data[1][i],\n      //             user_response: data[2][i],\n      //             user_feedback: data[3][i],\n      //             edit: false,\n      //           });\n      //         }\n      //         this.setpagination(this.page_no);\n      //       }\n      //       // else if (response.data.MSG == \"No Questions Found\") {\n      //       //   toastr.error(\"No Question Found\");\n      //       //   setTimeout(() => {\n      //       //     this.$router.go();\n      //       //   }, 2500);\n      //       // }\n      //       else {\n      //         toastr.error(\"Internal Server Error\");\n      //         // setTimeout(() => {\n      //         //     this.$router.go();\n      //         //   }, 2500);\n      //       }\n      //     })\n      //     .catch((e) => {\n      //       if (\n      //         e.response.status === 410 ||\n      //         e.response.status === 440 ||\n      //         e.response.status === 409\n      //       ) {\n      //         this.$root.$emit(\"Session_Expired\", e.response.data);\n      //       }\n      //     });\n      // } else {\n      //   toastr.error(\"Enter proper data for searching\");\n      // }\n      // }else{\n      //   toastr.error(\"Select header for searching\");\n      // }\n    },\n    // setpagination(page_no) {\n    //   this.page_array = [];\n    //   if (this.total_pages <= 7) {\n    //     for (let i = 0; i < this.total_pages; i++) {\n    //       this.page_array.push(i + 1);\n    //     }\n    //   } else if (page_no == 1) {\n    //     for (let i = 0; i < 4; i++) {\n    //       this.page_array.push(i + 1);\n    //     }\n    //     this.page_array.push(\"...l\");\n    //     this.page_array.push(this.total_pages);\n    //   } else if (page_no == this.total_pages) {\n    //     this.page_array.push(1);\n    //     this.page_array.push(\"...s\");\n    //     for (let i = this.total_pages - 4; i < this.total_pages; i++) {\n    //       this.page_array.push(i + 1);\n    //     }\n    //   } else if (page_no <= 4) {\n    //     for (let i = 0; i < page_no + 3; i++) {\n    //       this.page_array.push(i + 1);\n    //     }\n    //     this.page_array.push(\"...l\");\n    //     this.page_array.push(this.total_pages);\n    //   } else if (page_no >= this.total_pages - 4) {\n    //     this.page_array.push(1);\n    //     this.page_array.push(\"...s\");\n    //     for (let i = page_no - 4; i < this.total_pages; i++) {\n    //       this.page_array.push(i + 1);\n    //     }\n    //   } else {\n    //     this.page_array.push(1);\n    //     this.page_array.push(\"...s\");\n    //     for (let i = page_no - 3; i <= page_no + 3; i++) {\n    //       this.page_array.push(i);\n    //     }\n    //     this.page_array.push(\"...l\");\n    //     this.page_array.push(this.total_pages);\n    //   }\n    // },\n    // page_require(page) {\n    //   if (page == 0 || page == this.total_pages + 1) {\n    //   } else {\n    //     $(\"input:checkbox\").prop(\"checked\", false);\n    //     if (page == \"...s\") {\n    //       this.page_no = Math.ceil((1 + this.page_no) / 2);\n    //     } else if (page == \"...l\") {\n    //       this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);\n    //     } else {\n    //       this.page_no = page;\n    //     }\n    //     if (this.search_name == \"\") {\n    //       axios\n    //         .post(\n    //           api_calls.get_unanswered_url(),\n    //           {\n    //             companyname: this.companyname,\n    //             companyid: this.companyid,\n    //             email: this.$session.get(\"UserInformation\").email,\n    //             license_key: this.$session.get(\"UserInformation\").license_key,\n    //             token: this.$session.get(\"UserInformation\").tokens,\n    //             subscription: this.$session.get(\"UserInformation\").subscription,\n    //             isDelete: \"False\",\n    //             page_no: this.page_no,\n    //             per_page: this.per_page,\n    //           },\n    //           {\n    //             headers: {\n    //               Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //             },\n    //           }\n    //         )\n    //         .then((response) => {\n    //           this.unanswered_list = [];\n    //           for (var i in response.data[0]) {\n    //             this.unanswered_list.push({\n    //               question: response.data[0][i],\n    //               intent: \"\",\n    //               source: response.data[1][i],\n    //               user_response: response.data[2][i],\n    //               user_feedback: response.data[3][i],\n    //               edit: false,\n    //             });\n    //           }\n    //           this.setpagination(this.page_no);\n    //         })\n    //         .catch((e) => {\n    //           if (\n    //             e.response.status === 410 ||\n    //             e.response.status === 440 ||\n    //             e.response.status === 409\n    //           ) {\n    //             this.$root.$emit(\"Session_Expired\", e.response.data);\n    //           }\n    //         });\n    //     } else {\n    //       axios\n    //         .post(\n    //           api_calls.get_unanswered_url(),\n    //           {\n    //             companyid: this.$session.get(\"UserInformation\").company_id,\n    //             companyname: this.$session.get(\"UserInformation\").company_name,\n    //             license_key: this.$session.get(\"UserInformation\").license_key,\n    //             email: this.$session.get(\"UserInformation\").email,\n    //             token: this.$session.get(\"UserInformation\").tokens,\n    //             issearch: true,\n    //             // searchby: this.search_by,\n    //             key: this.search_name,\n    //             per_page: this.per_page,\n    //             page_no: page,\n    //           },\n    //           {\n    //             headers: {\n    //               Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //             },\n    //           }\n    //         )\n    //         .then((response) => {\n    //           this.spinnerOn = false;\n    //           if (response.data[4].pagecount != undefined) {\n    //             this.page_no = page;\n    //             this.unanswered_list = [];\n    //             this.number_of_rows = response.data[0].length;\n    //             this.total_pages = response.data[4].pagecount;\n    //             var data = response.data;\n    //             for (var i in response.data[0]) {\n    //               this.unanswered_list.push({\n    //                 question: response.data[0][i],\n    //                 intent: \"\",\n    //                 source: response.data[1][i],\n    //                 user_response: response.data[2][i],\n    //                 user_feedback: response.data[3][i],\n    //                 edit: false,\n    //               });\n    //             }\n    //             this.setpagination(this.page_no);\n    //           } else {\n    //             toastr.error(\"Internal Server Error\");\n    //             // setTimeout(() => {\n    //             //   this.$router.go();\n    //             // }, 2500);\n    //             this.load_verify_responses();\n    //           }\n    //         })\n    //         .catch((e) => {\n    //           if (\n    //             e.response.status === 410 ||\n    //             e.response.status === 440 ||\n    //             e.response.status === 409\n    //           ) {\n    //             this.$root.$emit(\"Session_Expired\", e.response.data);\n    //           }\n    //         });\n    //     }\n    //   }\n    // },\n    // page_change(page_no) {\n    //   axios\n    //     .post(\n    //       api_calls.get_unanswered_url(),\n    //       {\n    //         companyname: this.companyname,\n    //         companyid: this.companyid,\n    //         email: this.$session.get(\"UserInformation\").email,\n    //         license_key: this.$session.get(\"UserInformation\").license_key,\n    //         token: this.$session.get(\"UserInformation\").tokens,\n    //         subscription: this.$session.get(\"UserInformation\").subscription,\n    //         page_no: this.page_no,\n    //         per_page: this.per_page,\n    //       },\n    //       {\n    //         headers: {\n    //           Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //         },\n    //       }\n    //     )\n    //     .then((response) => {\n    //       this.number_of_rows = response.data[3].number_of_rows;\n    //       this.total_pages = Math.ceil(this.number_of_rows / this.per_page);\n    //       for (var i in response.data[0]) {\n    //         this.unanswered_list.push({\n    //           question: response.data[0][i],\n    //           intent: \"\",\n    //           source: response.data[1][i],\n    //           user_response: response.data[2][i],\n    //           user_feedback: response.data[3][i],\n    //           edit: false,\n    //         });\n    //       }\n    //     })\n    //     .catch((e) => {\n    //       if (\n    //         e.response.status === 410 ||\n    //         e.response.status === 440 ||\n    //         e.response.status === 409\n    //       ) {\n    //         this.$root.$emit(\"Session_Expired\", e.response.data);\n    //       }\n    //     });\n    // },\n    // question_selected(value) {\n    //   if (event.target.checked) {\n    //     if (value == \"all\") {\n    //       for (var i in this.unanswered_list) {\n    //         this.checked_list.push(this.unanswered_list[i]);\n    //       }\n    //     } else {\n    //       this.checked_list.push(this.unanswered_list[value]);\n    //     }\n    //   } else if (!event.target.checked) {\n    //     if (value != \"all\") {\n    //       var selectall = document.querySelector(\"#selectall\");\n    //       if (selectall.checked) {\n    //         selectall.checked = false;\n    //       }\n    //       var temp = this.checked_list.filter((question) => {\n    //         return question.question !== value;\n    //       });\n    //       this.checked_list = temp;\n    //     }\n    //   }\n    // },\n    // delete_single(index) {\n    //   let questionlist = [];\n    //   Swal.fire({\n    //     title: \"Are you sure?\",\n    //     text: \" You want to Delete this Question?\",\n    //     type: \"question\",\n    //     showCancelButton: true,\n    //     confirmButtonColor: \"#3085d6\",\n    //     cancelButtonColor: \"#d33\",\n    //     confirmButtonText: \"Yes, Confirm!\",\n    //   }).then((result) => {\n    //     // console.log(result.value);\n    //     if (result.value) {\n    //       // console.log(\"deleted\");\n    //       questionlist.push(this.unanswered_list[index].question);\n    //       this.delete_questions_api(questionlist);\n    //     }\n    //   });\n    // },\n    delete_multiple() {\n      if (this.view_component_name === \"unanswered_questions\") {\n        this.$root.$emit(\"delete_multiple_unanswered\", true);\n      } else if (this.view_component_name === \"user_responses\") {\n        this.$root.$emit(\"delete_multiple_user_responses\", true);\n      }\n      // if (this.checked_list.length == 0) {\n      //   Swal.fire(\"No question selected!\", \"\", \"error\");\n      // } else if (this.checked_list.length > 0) {\n      //   let questionlist = [];\n      //   Swal.fire({\n      //     title: \"Are you sure?\",\n      //     text: \" You want to Delete this Questions?\",\n      //     type: \"question\",\n      //     showCancelButton: true,\n      //     confirmButtonColor: \"#3085d6\",\n      //     cancelButtonColor: \"#d33\",\n      //     confirmButtonText: \"Yes, Confirm!\",\n      //   }).then((result) => {\n      //     if (result.value) {\n      //       for (var i in this.checked_list) {\n      //         questionlist.push(this.checked_list[i].question);\n      //       }\n      //       this.delete_questions_api(questionlist);\n      //     }\n      //   });\n      // }\n    },\n    // delete_questions_api(questionlist) {\n    //   axios\n    //     .post(\n    //       api_calls.get_unanswered_url(),\n    //       {\n    //         companyid: this.companyid,\n    //         companyname: this.companyname,\n    //         questionlist: questionlist,\n    //         isDelete: \"True\",\n    //         email: this.$session.get(\"UserInformation\").email,\n    //         license_key: this.$session.get(\"UserInformation\").license_key,\n    //         token: this.$session.get(\"UserInformation\").tokens,\n    //       },\n    //       {\n    //         headers: {\n    //           Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //         },\n    //       }\n    //     )\n    //     .then((response) => {\n    //       if (response.data == \"Deleted Successfully\") {\n    //         // console.log(\"deleted successfully\");\n    //         this.checked_list = [];\n    //         this.number_of_rows = response.data[2].number_of_rows;\n    //         this.total_pages = Math.ceil(this.number_of_rows / this.per_page);\n    //         toastr.success(\"Deleted Successfully\");\n    //         // setTimeout(() => {\n    //         //   this.$router.go();\n    //         // }, 1500);\n    //         this.load_verify_responses();\n    //       }\n    //       this.show_loader = false;\n    //     })\n    //     .catch((e) => {\n    //       if (\n    //         e.response.status === 410 ||\n    //         e.response.status === 440 ||\n    //         e.response.status === 409\n    //       ) {\n    //         this.$root.$emit(\"Session_Expired\", e.response.data);\n    //       } else {\n    //         toastr.error(e.message);\n    //       }\n    //       this.show_loader = false;\n    //     });\n    // },\n    // edit_item(index) {\n    //   this.unanswered_list[index].edit = !this.unanswered_list[index].edit;\n    //   this.old_question = this.unanswered_list[index].question;\n    //   this.old_intent = this.unanswered_list[index].intent;\n    //   this.old_data.question = this.old_question;\n    //   this.old_data.intent = this.companyid + \"_\" + this.old_intent;\n    //   // this.question = question.question;\n    //   // this.intent = question.intent;\n    //   // console.log(this.old_data);\n    //   // console.log(this.old_question);\n    // },\n    add_questions() {\n      if(!this.disable_btn_expired){\n      if (this.view_component_name === \"unanswered_questions\") {\n        this.$root.$emit(\"add_questions_unanswered\", true);\n      } else if (this.view_component_name === \"user_responses\") {\n        this.$root.$emit(\"add_questions_user_responses\", true);\n      }}else{\n        this.show_subscription_expired_swal();\n      }\n      // this.show_loader = true;\n      // var questionlist = [];\n      // var temp_list = [];\n      // var empty = this.unanswered_list.filter((unanswered) => {\n      //   return unanswered.intent == \"\";\n      // });\n      // for (var i in this.unanswered_list) {\n      //   if (this.unanswered_list[i].intent != \"\") {\n      //     temp_list.push(\n      //       this.unanswered_list[i].question,\n      //       this.companyid + \"_\" + this.unanswered_list[i].intent\n      //     );\n      //     questionlist.push(temp_list);\n      //   }\n      //   temp_list = [];\n      // }\n      // if (questionlist.length > 0) {\n      //   axios\n      //     .post(\n      //       api_calls.get_unanswered_url(),\n      //       {\n      //         companyname: this.companyname,\n      //         companyid: this.companyid,\n      //         isAdd: \"True\",\n      //         questionintent: questionlist,\n      //         email: this.$session.get(\"UserInformation\").email,\n      //         license_key: this.$session.get(\"UserInformation\").license_key,\n      //         token: this.$session.get(\"UserInformation\").tokens,\n      //       },\n      //       {\n      //         headers: {\n      //           Authorization: `Bearer ${this.$session.get(\"at\")}`,\n      //         },\n      //       }\n      //     )\n      //     .then((response) => {\n      //       if (response.data == \"Added Successfully\") {\n      //         swal({\n      //           text: \"Added Successfully\",\n      //           type: \"success\",\n      //         });\n      //         this.$router.go();\n      //       }\n      //     })\n      //     .catch((e) => {\n      //       if (\n      //         e.response.status === 410 ||\n      //         e.response.status === 440 ||\n      //         e.response.status === 409\n      //       ) {\n      //         this.$root.$emit(\"Session_Expired\", e.response.data);\n      //       }\n      //     });\n      // } else {\n      //   toastr.error(\"No question to add. Please add some questions.\");\n      // }\n      // this.show_loader = false;\n    },\n    // pagination_class(index) {\n    //   if (index == this.page_no) {\n    //     return \" active\";\n    //   } else {\n    //     return \"\";\n    //   }\n    // },\n    // submit_question() {\n    //   // console.log(\"submit\");\n    //   // console.log(\"question\", this.old_question);\n    //   // console.log(\"intent\", this.old_intent);\n    //   // console.log(\"intent\", this.isedit);\n    //   event.preventDefault();\n    //   if (this.old_question == \"\" || this.old_intent == \"\") {\n    //     toastr.error(\"Please enter all the fields.\");\n    //   } else {\n    //     this.show_loader = true;\n    //     axios\n    //       .post(\n    //         api_calls.get_unanswered_url(),\n    //         {\n    //           is_Edit: \"True\",\n    //           question: this.old_question,\n    //           intent: this.companyid + \"_\" + this.old_intent,\n    //           companyname: this.companyname,\n    //           companyid: this.companyid,\n    //           old_question_data: this.old_data,\n    //           email: this.$session.get(\"UserInformation\").email,\n    //           license_key: this.$session.get(\"UserInformation\").license_key,\n    //           token: this.$session.get(\"UserInformation\").tokens,\n    //           subscription: this.$session.get(\"UserInformation\").subscription,\n    //         },\n    //         {\n    //           headers: {\n    //             Authorization: `Bearer ${this.$session.get(\"at\")}`,\n    //           },\n    //         }\n    //       )\n    //       .then((response) => {\n    //         this.show_loader = false;\n    //         if (response.data == \"Internal Server Error\") {\n    //           toastr.error(\"Internal Server Error\");\n    //         } else if (response.data == \"Query Executed Successfully\") {\n    //           Swal({\n    //             type: \"success\",\n    //             text: \"Your question has been edited successfully\",\n    //             timer:2000,\n    //           }).then((result) => {\n    //             if (result.value) {\n    //               // this.$router.go();\n    //               this.load_verify_responses();\n    //             }\n    //           });\n    //         } else if (response.data == \"Question Intent Updated\") {\n    //           Swal({\n    //             type: \"success\",\n    //             text: \"Your question has been updated successfully\",\n    //             timer:2000,\n    //           }).then((result) => {\n    //             if (result.value) {\n    //               // this.$router.go();\n    //               this.load_verify_responses();\n    //             }\n    //           });\n    //         }\n    //       })\n    //       .catch((e) => {\n    //         if (\n    //           e.response.status === 410 ||\n    //           e.response.status === 440 ||\n    //           e.response.status === 409\n    //         ) {\n    //           this.$root.$emit(\"Session_Expired\", e.response.data);\n    //         } else {\n    //           toastr.error(\"Internal Server Error\");\n    //         }\n    //       });\n    //   }\n    // },\n  },\n  watch: {\n    view_component_name(newVal, oldVal) {\n      this.search_name = \"\";\n    },\n    search_name(){\n      if (this.search_name === \"\"){\n      this.load_verify_responses();\n      this.isVisibleSearchClear = false;\n      }\n      else if (this.search_name !== \"\"){\n        this.isVisibleSearchClear = true;\n      }\n    },\n  },\n};\n</script>\n<style  src=\"vue-multiselect/dist/vue-multiselect.min.css\">\n</style>\n\n<style scoped>\n#multiselect_td {\n  border: none;\n  width: auto;\n}\n</style>"]}]}