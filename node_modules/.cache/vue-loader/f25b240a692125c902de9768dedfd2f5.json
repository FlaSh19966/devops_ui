{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/components/GoogleMaps.vue?vue&type=style&index=0&id=4f62c31f&scoped=true&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/components/GoogleMaps.vue","mtime":1643027096288},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI21hcCB7CiAgaGVpZ2h0OiAxMDAlOwp9Ci8qIE9wdGlvbmFsOiBNYWtlcyB0aGUgc2FtcGxlIHBhZ2UgZmlsbCB0aGUgd2luZG93LiAqLwpodG1sLApib2R5IHsKICBoZWlnaHQ6IDUwdmg7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7Cn0KLmNvbnRyb2xzIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogIGJvcmRlci1yYWRpdXM6IDJweDsKICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDsKICBib3gtc2hhZG93OiAwIDJweCA2cHggcmdiYSgwLCAwLCAwLCAwLjMpOwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgZm9udC1mYW1pbHk6IFJvYm90bzsKICBmb250LXNpemU6IDE1cHg7CiAgZm9udC13ZWlnaHQ6IDMwMDsKICBoZWlnaHQ6IDI5cHg7CiAgbWFyZ2luLWxlZnQ6IDE3cHg7CiAgbWFyZ2luLXRvcDogMTBweDsKICBvdXRsaW5lOiBub25lOwogIHBhZGRpbmc6IDAgMTFweCAwIDEzcHg7CiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgd2lkdGg6IDQwMHB4Owp9CgouY29udHJvbHM6Zm9jdXMgewogIGJvcmRlci1jb2xvcjogIzRkOTBmZTsKfQoudGl0bGUgewogIGZvbnQtd2VpZ2h0OiBib2xkOwp9CiNpbmZvd2luZG93LWNvbnRlbnQgewogIGRpc3BsYXk6IG5vbmU7Cn0KI21hcCAjaW5mb3dpbmRvdy1jb250ZW50IHsKICBkaXNwbGF5OiBpbmxpbmU7Cn0K"},{"version":3,"sources":["GoogleMaps.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GoogleMaps.vue","sourceRoot":"src/portal/components","sourcesContent":["<template>\n  <body>\n    <div style=\"display: none\">\n      <input\n        id=\"pac-input\"\n        class=\"controls\"\n        type=\"text\"\n        placeholder=\"Enter a location\"\n      />\n    </div>\n    <div id=\"map\"></div>\n    <div id=\"infowindow-content\">\n      <span id=\"place-name\" class=\"title\"></span>\n      <br />\n      <strong>Place ID:</strong>\n      <span id=\"place-id\"></span>\n      <br />\n      <span id=\"place-address\"></span>\n    </div>\n  </body>\n</template>\n\n<script>\nimport Countries from \"@/portal/components/Countries\";\nexport default {\n  name: \"google-maps\",\n  data() {\n    return {\n      placesMap: null,\n      placeIdLocal: null,\n    };\n  },\n  props: {\n    placeId: String,\n    latlng: Object,\n  },\n  watch: {\n    placeId(newVal) {\n      if (String(newVal).trim() != \"\" && newVal != this.placeIdLocal) {\n        this.placeIdLocal = newVal;\n        this.update_map(newVal);\n      }\n    },\n  },\n  beforeCreate() {\n    let maps = document.createElement(\"script\");\n    maps.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.VUE_APP_MAP_CREDS}&libraries=places&callback=initMap`;\n    maps.async = true;\n    maps.defer = true;\n    document.head.append(maps);\n  },\n  mounted() {\n    var vm = this;\n    window.initMap = () => {\n      let countryCode =\n        this.$session.get(\"country_name\") ||\n        this.$session.get(\"UserInformation\").country_name;\n      let filteredCountryName = Countries.filter((country) => {\n        return country.code == countryCode;\n      });\n      let countryName = filteredCountryName[0].name;\n\n      vm.placesMap = new google.maps.Map(document.getElementById(\"map\"), {\n        center: {\n          lat: Number(filteredCountryName[0].latlng[0]),\n          lng: Number(filteredCountryName[0].latlng[1]),\n        },\n        zoom: 5,\n      });\n\n      var input = document.getElementById(\"pac-input\");\n\n      var autocomplete = new google.maps.places.Autocomplete(input);\n      autocomplete.bindTo(\"bounds\", vm.placesMap);\n\n      // Specify just the place data fields that you need.\n      autocomplete.setFields([\"place_id\", \"geometry\", \"name\"]);\n\n      vm.placesMap.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n\n      var infowindow = new google.maps.InfoWindow();\n      var infowindowContent = document.getElementById(\"infowindow-content\");\n      infowindow.setContent(infowindowContent);\n\n      var marker = new google.maps.Marker({ map: vm.placesMap });\n\n      marker.addListener(\"click\", function () {\n        infowindow.open(vm.placesMap, marker);\n      });\n\n      const request = {\n        query: countryName,\n        fields: [\"name\", \"geometry\"],\n      };\n\n      autocomplete.addListener(\"place_changed\", function () {\n        infowindow.close();\n\n        var place = autocomplete.getPlace();\n\n        if (!place.geometry) {\n          return;\n        }\n\n        if (place.geometry.viewport) {\n          vm.placesMap.fitBounds(place.geometry.viewport);\n        } else {\n          vm.placesMap.setCenter(place.geometry.location);\n          vm.placesMap.setZoom(17);\n        }\n\n        // Set the position of the marker using the place ID and location.\n        marker.setPlace({\n          placeId: place.place_id,\n          location: place.geometry.location,\n        });\n\n        marker.setVisible(true);\n\n        infowindowContent.children[\"place-name\"].textContent = place.name;\n        infowindowContent.children[\"place-id\"].textContent = place.place_id;\n        infowindowContent.children[\"place-address\"].textContent =\n          place.formatted_address;\n        infowindow.open(vm.placesMap, marker);\n        vm.$emit(\"place_id_updated\", {\n          placeId: place.place_id,\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        });\n      });\n    };\n  },\n  methods: {\n    update_map(placeId) {\n      var vm = this;\n      const request = {\n        placeId: placeId,\n        fields: [\"name\", \"formatted_address\", \"place_id\", \"geometry\"],\n      };\n      // const infowindow = new google.maps.InfoWindow();\n      // const service = new google.maps.places.PlacesService(vm.placesMap);\n      // service.getDetails(request, (place, status) => {\n      //   if (status === google.maps.places.PlacesServiceStatus.OK) {\n      //     const marker = new google.maps.Marker({\n      //       map: this.placesMap,\n      //       position: place.geometry.location,\n      //     });\n      //     google.maps.event.addListener(marker, \"click\", function () {\n      //       infowindow.setContent(\n      //         \"<div><strong>\" +\n      //           place.name +\n      //           \"</strong><br>\" +\n      //           \"Place ID: \" +\n      //           place.place_id +\n      //           \"</div>\"\n      //       );\n\n      //       infowindow.open(vm.placesMap, this);\n      //     });\n\n      //     vm.placesMap.setCenter(place.geometry.location);\n      //   }\n      // });\n      const marker = new google.maps.Marker({\n        map: this.placesMap,\n        position: { lat: this.latlng.lat, lng: this.latlng.lng },\n      });\n      vm.placesMap.setCenter({ lat: this.latlng.lat, lng: this.latlng.lng });\n    },\n  },\n};\n</script>\n\n<style scoped>\n#map {\n  height: 100%;\n}\n/* Optional: Makes the sample page fill the window. */\nhtml,\nbody {\n  height: 50vh;\n  margin: 0;\n  padding: 0;\n}\n.controls {\n  background-color: #fff;\n  border-radius: 2px;\n  border: 1px solid transparent;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n  box-sizing: border-box;\n  font-family: Roboto;\n  font-size: 15px;\n  font-weight: 300;\n  height: 29px;\n  margin-left: 17px;\n  margin-top: 10px;\n  outline: none;\n  padding: 0 11px 0 13px;\n  text-overflow: ellipsis;\n  width: 400px;\n}\n\n.controls:focus {\n  border-color: #4d90fe;\n}\n.title {\n  font-weight: bold;\n}\n#infowindow-content {\n  display: none;\n}\n#map #infowindow-content {\n  display: inline;\n}\n</style>"]}]}