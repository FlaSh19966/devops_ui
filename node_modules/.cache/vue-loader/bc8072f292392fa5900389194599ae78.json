{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NER.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NER.vue","mtime":1663910265462},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64://
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

import axios from "axios";
import Swal from "sweetalert2";
import api_calls from "@/portal/api_calls";
import { setTimeout } from "timers";
import { freeze_portal,show_subscription_expired_swal , close_modal} from "@/portal/mixins";
import swal from 'sweetalert2';

export default {
  name: "NerTrainingPage",
  mixins: [
    freeze_portal,
    show_subscription_expired_swal,
    close_modal
  ],
  data() {
    return {
      sub_entities: {
        start: 0,
        end: 0,
        value: "",
        entity: "",
      },
      page_no: 1,
      per_page: 15,
      total_pages: null,
      page_array: [],
      pageno: "",
      number_of_rows: null,
      drop_down_select: "",
      word_selected: false,
      highlighted_text: "",
      statements: [],
      selected_statement: "",
      statement_array: [],
      master_statements_list: [],
      current_page: 1,
      done_entities: [],
      entities_list: [],
      entities_list_string: "",
      file_label: "Choose file",
      csv_file: "",
      spinnerOn: false,
      word_info: [],
      checked_list: [],
      buffer_word_list: [],
      delete_ner_tags: [],
      role: this.$session.get("UserInformation").role,
      company_name: this.$session.get("UserInformation").company_name,
      notTrainedQuestions: [],
      info_icon: require("@/portal/assets/img/info_icon.svg"),
      new_statement: "",
      edit_statement: "",
      want_status: true,
      ner_model_inprogress: false,
      current_selected: null,
      search_name: "",
      isVisibleSearchClear: false,
      disable_btn_expired:false
    };
  },
  components: {},
  created() {
    this.load_ner_statements();
    // axios
    //   .get(api_calls.get_ner_tag(), {
    //     params: {
    //       companyname: this.$session.get("UserInformation").company_name,
    //       companyid: this.$session.get("UserInformation").company_id,
    //       email: this.$session.get("UserInformation").email,
    //       license_key: this.$session.get("UserInformation").license_key,
    //       token: this.$session.get("UserInformation").tokens,
    //       subscription: this.$session.get("UserInformation").subscription,
    //     },
    //     headers: {
    //       Authorization: `Bearer ${this.$session.get("at")}`,
    //     },
    //   })
    //   .then((response) => {
    //     if (response.data !== null) {
    //       this.word_info = response.data;
    //       this.buffer_word_list = response.data;
    //     }
    //   });
      this.check_ner_model_status();
    // axios
    //   .post(
    //     api_calls.load_tag_url(),
    //     {
    //       companyid: this.$session.get("UserInformation").company_id,
    //       companyname: this.$session.get("UserInformation").company_name,
    //       email: this.$session.get("UserInformation").email,
    //       license_key: this.$session.get("UserInformation").license_key,
    //       token: this.$session.get("UserInformation").tokens,
    //       get_tagged_statements: true,
    //     },
    //     {
    //       headers: {
    //         Authorization: `Bearer ${this.$session.get("at")}`,
    //       },
    //     }
    //   )
    //   .then((response) => {
    //     if (response.data !== null) {
    //       if (response.data.MSG == "Ner Tag Completed") {
    //         // this.load_statements(response.data.Response);
    //         this.notTrainedQuestions = response.data.Response;
    //       }
    //       // else if (response.data.MSG == "Assign Ner Tag") {
    //       //   this.spinnerOn = false;
    //       // } else if (response.data.MSG == "No Data Available") {
    //       //   this.spinnerOn = false;
    //       // } else if (response.data == "Internal Server Error") {
    //       //   this.spinnerOn = false;
    //       // }
    //     }
    //   })
    //   .catch((e) => {
    //     this.spinnerOn = false;
    //     if (
    //       e.response.status === 410 ||
    //       e.response.status === 440 ||
    //       e.response.status === 409
    //     ) {
    //       this.$root.$emit("Session_Expired", e.response.data);
    //     }
    //   });
  },
  mounted() {
    setTimeout(() => {
      this.freeze_portal();
    }, 1000);
    this.$root.$on("NerTrainingPageDisabled", (data) =>{
      if(data===true){
        this.disable_btn_expired = true;
      }
    })
    $('[data-toggle="popover"]')
      .popover({
        html: true,
        content: $("#popover_content"),
      })
      .on("show.bs.popover", function () {
        $("#popover_content").addClass("d-block");
      })
      .on("shown.bs.popover", function () {})
      .on("hide.bs.popover", function () {
        $("#popover_content").addClass("d-none");
      });
    $("#popover_content").css("zIndex", 9999);
    var vm = this;
    $("#selectall").click(function () {
      if ($(this).is(":checked")) {
        $("input:checkbox").prop("checked", true);
      } else {
        vm.checked_list = [];
        $("input:checkbox").prop("checked", false);
      }
    });
      this.$root.$on("send_model_status", data =>{
      if (data == true){
        this.check_ner_model_status();
      }
    });
   
  },
  watch: {
    search_name() {
      if (this.search_name === "") {
        this.load_ner_statements();
        this.isVisibleSearchClear = false;
      } else if (this.search_name !== "") {
        this.isVisibleSearchClear = true;
      }
    },
    
    

  },
  methods: {
    upload_ner_file(){
      if(!this.disable_btn_expired){
        $("#upload_csv_file").modal('show')
      } else {
        this.show_subscription_expired_swal();
      }
    },
    add_ner_statemnent(){
      if(!this.disable_btn_expired){
        $("#statementmodal").modal('show')
      } else {
        this.show_subscription_expired_swal();
      }
    },
    add_ner_tag(){
      if(!this.disable_btn_expired){
        $("#exampleModalCenter").modal('show')
      } else {
        this.show_subscription_expired_swal();
      }
    },
    load_ner_statements(){
      $("input:checkbox").prop("checked", false);
      this.checked_list = [];
      this.spinnerOn = true;
      axios
        .get(api_calls.get_ner_tag(), {
          params: {
            company_name: this.$session.get("UserInformation").company_name,
            company_id: this.$session.get("UserInformation").company_id,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            subscription: this.$session.get("UserInformation").subscription,
          },
          headers: {
            Authorization: `Bearer ${this.$session.get("at")}`,
          },
        })
        .then((response) => {
          this.spinnerOn = false;
          if (this.api_status_code.DATA_AVAILABLE.MSG_CODE == response.data.message.MSG_CODE) {
            this.word_info = response.data.data;
            this.buffer_word_list = response.data.data;
          }
          else if(this.api_status_code.NER_TAGS_NOT_FOUND.MSG_CODE == response.data.message.MSG_CODE){
            swal.fire({
              type:'warning',
              text:'No ner tags found',
              toast:true,
              position: "top-end",
              showConfirmButton: false,
              timer: 2500
            });
            this.word_info = [];
            this.buffer_word_list = [];
          }
         
        })
        .catch((e) => {
          this.spinnerOn = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
      this.spinnerOn = true;
      axios
      .post(
        api_calls.load_tag_url(),
        {
          company_id: this.$session.get("UserInformation").company_id,
          company_name: this.$session.get("UserInformation").company_name,
          email: this.$session.get("UserInformation").email,
          license_key: this.$session.get("UserInformation").license_key,
          token: this.$session.get("UserInformation").tokens,
          get_all_ner_statements: true,
          per_page: this.per_page,
          page_no: this.page_no,
        },
        {
          headers: {
            Authorization: `Bearer ${this.$session.get("at")}`,
          },
        }
      )
      .then((response) => {
        this.spinnerOn = false;
          if (this.api_status_code.DATA_AVAILABLE.MSG_CODE == response.data.message.MSG_CODE) {
            this.load_statements(response.data.data.response);
            this.number_of_rows = response.data.pagination.total_data;
            this.total_pages = response.data.pagination.total_page;
            this.setpagination(this.page_no);
            this.notTrainedQuestions = response.data.data.response;
          } else if (this.api_status_code.NER_TAG_ASSIGN.MSG_CODE == response.data.message.MSG_CODE) {
            this.spinnerOn = false;
          } else if (this.api_status_code.EMPTY_DATA.MSG_CODE ==  response.data.message.MSG_CODE) {
            this.spinnerOn = false;
          } else if (this.api_status_code.EMPTY_DATA.MSG_CODE == response.data.message.MSG_CODE) {
            this.spinnerOn = false;
            swal.fire({
              type:'warning',
              text:'No Data Available',
              toast:true,
              position: "top-end",
              showConfirmButton: false,
              timer: 2500
            });
            this.master_statements_list = [];
          this.statements = [];
          } else if (this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE == response.data.message.MSG_CODE) {
            swal({
              type: "error",
              title: "Error",
              text: "Internal server error",
              timer: 2500,
            })
          } else {
            this.spinnerOn = false;
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error",
              timer: 2500
            })
          }
      })
      .catch((e) => {
        this.spinnerOn = false;
        if (
          e.response.status === 410 ||
          e.response.status === 440 ||
          e.response.status === 409
        ) {
          this.$root.$emit("Session_Expired", e.response.data);
        }
      });
    },
    empty_variable(){
      this.new_statement = "";
      this.edit_statement = "";
      this.current_selected = null;
      this.entities_list_string = "";
    },
    assign_variable(index){
      this.edit_statement = this.statements[index].Statement;
      this.current_selected = this.statements[index];
    },
    check_ner_model_status(){
    this.model_status = this.$session.get("ModelStatus");
    if (this.model_status == "No Failure"){
    this.ner_model_inprogress = false;
    }
    else if (Boolean(this.model_status.ner_model) === true){
     if(this.model_status.ner_model == "InProgress"){
       this.ner_model_inprogress = true;
     }
     else{
       this.ner_model_inprogress = false;
     }
    }
    else{
      this.ner_model_inprogress = false; 
    }
    },
    show_model_progress(index){
      if(this.ner_model_inprogress == true){
         if (index == 'style'){
            return "cursor: not-allowed";
          }
          else if(index == 'title'){
              return this.tlt('ner_page_training_progress_msg');
          }
      }
      else{
        return null;
      }
    },
    add_statement() {
   
      if (this.new_statement.trim() == "") {
        Swal({
          text: this.tlt('ner_page_enter_statement_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      } else {
        this.spinnerOn = true;
        axios
          .post(api_calls.add_ner_statement(), {
            company_id: this.$session.get("UserInformation").company_id,
            company_name: this.$session.get("UserInformation").company_name,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            new_statement: this.new_statement,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          })
          .then((response) => {
            this.spinnerOn = false;
            if (this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE == response.data.message.MSG_CODE) {
              Swal({
                type: "success",
                text: this.tlt('ner_page_statement_added_msg'),
                timer: 2500,
              }).then((result) => {
     
                this.empty_variable();
                this.load_ner_statements();
                // this.page_require(1);
                // this.$router.go();
                
              });
            } else if (this.api_status_code.ADD_STATEMENT_ERROR.MSG_CODE == response.data.message.MSG_CODE) {
              Swal({
                type: "error",
                text: this.tlt('ner_page_wrong_msg'),
                timer: 2500,
              });
            }else if (response.data.Msg == "Statement already exists") {
              Swal({
                type: "error",
                text: this.tlt('ner_page_statement_already_exists_msg'),
                timer: 2500,
              });
            }
          })
          .catch((e) => {
            this.spinnerOn = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
          this.close_modal('add_statement_btn')
      }
    },
    edit_statements() {
      if(this.edit_statement == this.current_selected.Statement){
        Swal.fire({
          text: this.tlt('ner_page_modify_statement_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
      }
      else {
        var final_statements_list = [];
        // console.log("statement index before---", this.current_selected);
        var valid_statement = Object.assign({}, this.current_selected);
        var key = valid_statement.key;
        valid_statement.IsTagCompleted = "NO";
        valid_statement.Statement = this.edit_statement;
        valid_statement.Tag = [];
        delete valid_statement.key;
        delete valid_statement.selected_list;
        delete valid_statement.words_list;
        final_statements_list.push({
          [key]: valid_statement,
        });
        this.spinnerOn = true;
        axios
          .post(
            api_calls.tag_sentences_url(),
            {
              company_id: this.$session.get("UserInformation").company_id,
              company_name: this.$session.get("UserInformation").company_name,
              email: this.$session.get("UserInformation").email,
              license_key: this.$session.get("UserInformation").license_key,
              token: this.$session.get("UserInformation").tokens,
              ner_tag_statement: final_statements_list,
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`,
              },
            }
          )
          .then((response) => {
            this.spinnerOn = false;
            if (this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE == response.data.message.MSG_CODE) {
              Swal({
                text: this.tlt('ner_page_tag_submit_msg'),
                // toast: true,
                // position: "top-end",
                type: "success",
                showConfirmButton: true,
                timer: 5500,
              });
                this.empty_variable();
                this.load_ner_statements();
                // this.page_require(1);
                // this.$router.go();
            } else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              })
            }
          })
          .catch((e) => {
            this.spinnerOn = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
          console.log("---")
          this.close_modal('edit_btn')
      }
    },
    delete_tags(index) {
      Swal.fire({
        title: this.tlt('ner_page_swal_alert_msg'),
        text: this.tlt('ner_page_swal_revert_msg'),
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: this.tlt('ner_page_swal_delete_msg'),
      }).then((result) => {
        if (result.value) {
          $("#exampleModalCenter").modal("hide");
          this.spinnerOn = true;
          this.delete_ner_tags.push(this.word_info[index]);
          this.word_info.splice(index, 1);
          axios
            .post(
              api_calls.delete_ner_tags(),
              {
                company_id: this.$session.get("UserInformation").company_id,
                company_name: this.$session.get("UserInformation").company_name,
                email: this.$session.get("UserInformation").email,
                license_key: this.$session.get("UserInformation").license_key,
                token: this.$session.get("UserInformation").tokens,
                tag_name: this.delete_ner_tags,
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`,
                },
              }
            )
            .then((response) => {
              this.spinnerOn = false;
              if (this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE == response.data.message.MSG_CODE) {
                toastr.success(this.tlt('ner_page_tag_removed_msg'));
                // setTimeout(() => {
                  this.delete_ner_tags = [];
                  // this.$router.go();
                  this.load_ner_statements();
                // }, 500);
              } else {
                Swal({
                  title: response.data.message.MSG_CODE,
                  text: response.data.message.MSG,
                  showCancelButton: false,
                  showConfirmButton: false,
                  type: "error"
                })
                toastr.error(this.tlt('ner_page_some_error_msg1'));
                this.delete_ner_tags = [];
              }
            })
            .catch((e) => {
              this.spinnerOn = false;
              toastr.error(this.tlt('ner_page_some_error_msg2'));
              this.delete_ner_tags = [];
              if (
                e.response.status === 410 ||
                e.response.status === 440 ||
                e.response.status === 409
              ) {
                this.$root.$emit("Session_Expired", e.response.data);
              }
            });
        }
      });
    },
    start_tagging() {
      this.spinnerOn = true;
      axios
        .post(
          api_calls.load_tag_url(),
          {
            company_id: this.$session.get("UserInformation").company_id,
            company_name: this.$session.get("UserInformation").company_name,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            getTag: false,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          this.spinnerOn = false;
          if (this.api_status_code.NER_TAG_STATUS.MSG_CODE == response.data.message.MSG_CODE) {
            toastr.error(this.tlt('ner_page_tags_alert_msg'));
            this.spinnerOn = false;
          } else if (this.api_status_code.NER_TAG_STATUS.MSG_CODE == response.data.message.MSG_CODE) {
            // setTimeout(() => {
              // this.$router.go();
              this.load_ner_statements();
            // }, 1500);
          } else if (this.api_status_code.EMPTY_DATA.MSG_CODE == response.data.message.MSG_CODE) {
            toastr.error(
              this.tlt('ner_page_tags_alert_msg1')
            );
            this.spinnerOn = false;
          } else if (this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE == response.data.message.MSG_CODE) {
            toastr.error(
              this.tlt('ner_page_tags_alert_msg3')
            );
            this.spinnerOn = false;
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            })
          }
        })
        .catch((e) => {
          this.spinnerOn = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    page_require(page) {
      $("input:checkbox").prop("checked", false);
      this.checked_list = [];
      if (page == 0 || page == this.total_pages + 1) {
      } else {
        if (this.search_name != "") {
          if (page == "...s") {
            this.page_no = Math.ceil((1 + this.page_no) / 2);
          } else if (page == "...l") {
            this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);
          } else {
            this.page_no = page;
          }
          $("input:checkbox").prop("checked", false);
          this.spinnerOn = true;
          this.search_ner_statment_page_change();
        }
        else{
          $("input:checkbox").prop("checked", false);
          if (page == "...s") {
            this.page_no = Math.ceil((1 + this.page_no) / 2);
          } else if (page == "...l") {
            this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);
          } else {
            this.page_no = page;
          }
          this.spinnerOn = true;
          axios
            .post(
              api_calls.load_tag_url(),
              {
                company_id: this.$session.get("UserInformation").company_id,
                company_name: this.$session.get("UserInformation").company_name,
                email: this.$session.get("UserInformation").email,
                license_key: this.$session.get("UserInformation").license_key,
                token: this.$session.get("UserInformation").tokens,
                get_all_ner_statements: true,
                per_page: this.per_page,
                page_no: this.page_no,
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`,
                },
              }
            )
            .then((response) => {
              if (response.data !== null) {
                if (this.api_status_code.DATA_AVAILABLE.MSG_CODE == response.data.message.MSG_CODE) {
                  this.statements = [];
                  this.load_statements(response.data.data.response);
                  // this.number_of_rows = response.data.pagecount;
                  // this.total_pages = Math.ceil(this.number_of_rows / this.per_page);
                  this.setpagination(this.page_no);
                } else if (this.api_status_code.NER_TAG_ALL.MSG_CODE == response.data.message.MSG_CODE) {
                  this.statements = [];
                  this.load_statements(response.data.data.response);
                  // this.number_of_rows = response.data.pagecount;
                  // this.total_pages = Math.ceil(this.number_of_rows / this.per_page);
                  this.setpagination(this.page_no);
                  this.notTrainedQuestions = response.data.data.response;
                } else if (this.api_status_code.NER_TAG_ASSIGN.MSG_CODE == response.data.message.MSG_CODE) {
                  this.spinnerOn = false;
                } else if (this.api_status_code.EMPTY_DATA.MSG_CODE == response.data.message.MSG_CODE) {
                  this.spinnerOn = false;
                } else if (response.data == "Internal Server Error") {
                  this.spinnerOn = false;
                }
              }else {
                this.spinnerOn = false;
                Swal({
                  title: response.data.message.MSG_CODE,
                  text: response.data.message.MSG,
                  showCancelButton: false,
                  showConfirmButton: false,
                  type: "error"
                })
              }
            })
            .catch((e) => {
              this.spinnerOn = false;
              if (
                e.response.status === 410 ||
                e.response.status === 440 ||
                e.response.status === 409
              ) {
                this.$root.$emit("Session_Expired", e.response.data);
              }
            });
        }
      }
    },
    clear_search_name() {
      this.search_name = "";
      this.page_require(1);
    },
    search_ner_statment() {
      if (this.search_name != ""){
        $("input:checkbox").prop("checked", false);
        this.checked_list = [];
        this.page_no = 1
        this.spinnerOn = true;
        axios
        .post(
          api_calls.load_tag_url(),
          {
            company_id: this.$session.get("UserInformation").company_id,
            company_name: this.$session.get("UserInformation").company_name,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            is_search: true,
            search_term: this.search_name,
            per_page: this.per_page,
            page_no: this.page_no,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          if (response.data !== null) {
            if(this.api_status_code.DATA_AVAILABLE.MSG_CODE == response.data.message.MSG_CODE){
              this.load_statements(response.data.data.response);
              // this.number_of_rows = response.data.pagecount;
              this.total_pages = response.data.pagination.total_page;
              this.setpagination(this.page_no);
            }
            else if (this.api_status_code.NER_TAG_ALL.MSG_CODE == response.data.message.MSG_CODE) {
              this.load_statements(response.data.data.response);
              // this.number_of_rows = response.data.pagecount;
              this.total_pages = response.data.pagination.total_page;
              this.setpagination(this.page_no);
            } else if (this.api_status_code.NER_TAG_ASSIGN.MSG_CODE == response.data.message.MSG_CODE) {
              this.spinnerOn = false;
            } else if (this.api_status_code.EMPTY_DATA.MSG_CODE == response.data.message.MSG_CODE) {
                Swal.fire({
                  position:"top-end",
                  text: this.tlt('ner_page_no_ner_msg'),
                  toast: true,
                  type: "warning",
                  showConfirmButton: false,
                  timer: 2500,
                });
              this.statements = [];
              this.total_pages = 1;
              this.setpagination(this.page_no);
              this.spinnerOn = false;
            } else if (this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE == response.data.message.MSG_CODE) {
              this.statements = [];
              this.total_pages = 1;
              this.setpagination(this.page_no);
              this.spinnerOn = false;
              Swal.fire({
                  text: "Internal Server Error",
                  type: "error",
                  showConfirmButton: false,
                  timer: 2500,
                });
            } 
          }else {
            this.spinnerOn = false;
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            })
          }
        })
        .catch((e) => {
          this.spinnerOn = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
      }
      else {
        Swal({
          text: this.tlt('ner_page_search_alert_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;}
    },
    search_ner_statment_page_change() {
      if (this.search_name != ""){
        this.spinnerOn = true;
        axios
        .post(
          api_calls.load_tag_url(),
          {
            company_id: this.$session.get("UserInformation").company_id,
            company_name: this.$session.get("UserInformation").company_name,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            is_search: true,
            search_term: this.search_name,
            per_page: this.per_page,
            page_no: this.page_no,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          if (response.data !== null) {
            if (this.api_status_code.NER_TAG_ALL.MSG_CODE == response.data.message.MSG_CODE) {
              this.load_statements(response.data.Response);
              // this.number_of_rows = response.data.pagecount;
              this.total_pages = response.data.pagecount;
              this.setpagination(this.page_no);
            } else if (this.api_status_code.NER_TAG_ASSIGN.MSG_CODE == response.data.message.MSG_CODE) {
              this.spinnerOn = false;
            } else if (this.api_status_code.EMPTY_DATA.MSG_CODE == response.data.message.MSG_CODE) {
              this.statements = [];
              this.total_pages = 1;
              this.setpagination(this.page_no);
              this.spinnerOn = false;
            } else if (this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE == response.data.message.MSG_CODE) {
              this.statements = [];
              this.total_pages = 1;
              this.setpagination(this.page_no);
              this.spinnerOn = false;
            } 
          }else {
            this.spinnerOn = false;
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error"
            })
          }
        })
        .catch((e) => {
          this.spinnerOn = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
      }
      else {
        Swal({
          text: this.tlt('ner_page_search_alert_msg2'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;}
    },
    setpagination(page_no) {
      this.page_array = [];
      if (this.total_pages <= 7) {
        for (let i = 0; i < this.total_pages; i++) {
          this.page_array.push(i + 1);
        }
      } else if (page_no == 1) {
        for (let i = 0; i < 4; i++) {
          this.page_array.push(i + 1);
        }
        this.page_array.push("...l");
        this.page_array.push(this.total_pages);
      } else if (page_no == this.total_pages) {
        this.page_array.push(1);
        this.page_array.push("...s");
        for (let i = this.total_pages - 4; i < this.total_pages; i++) {
          this.page_array.push(i + 1);
        }
      } else if (page_no <= 4) {
        for (let i = 0; i < page_no + 3; i++) {
          this.page_array.push(i + 1);
        }
        this.page_array.push("...l");
        this.page_array.push(this.total_pages);
      } else if (page_no >= this.total_pages - 4) {
        this.page_array.push(1);
        this.page_array.push("...s");
        for (let i = page_no - 4; i < this.total_pages; i++) {
          this.page_array.push(i + 1);
        }
      } else {
        this.page_array.push(1);
        this.page_array.push("...s");
        for (let i = page_no - 3; i <= page_no + 3; i++) {
          this.page_array.push(i);
        }
        this.page_array.push("...l");
        this.page_array.push(this.total_pages);
      }
    },
    pagination_class(index) {
      if (index == this.page_no) {
        return " active";
      } else {
        return "";
      }
    },
    load_statements(statements) {
      this.master_statements_list = [];
      this.statements = [];
      // console.log(this.statements);
      for (var i in statements) {
        var key = Object.keys(statements[i])[0];

        if (statements[i][key].IsTagCompleted != "YES") {
          var key = Object.keys(statements[i])[0];
          
          this.master_statements_list.push(statements[i][key]);

          this.master_statements_list[
            i
          ].words_list = this.master_statements_list[i].Statement.split(" ");

          this.master_statements_list[i].key = key;
        }
        if (statements[i][key].IsTagCompleted != "NO") {
          var key = Object.keys(statements[i])[0];
          this.master_statements_list.push(statements[i][key]);
          this.master_statements_list[
            i
          ].words_list = this.master_statements_list[i].Statement.split(" ");

          let desc = [];
          var values;
          var index;

          for (var a = 0; a < this.master_statements_list[i].Tag.length; a++) {
            if (this.master_statements_list[i].Tag[a] != "O") {
              var check = this.master_statements_list[i].Tag.indexOf(
                this.master_statements_list[i].Tag[a]
              );

              if (this.master_statements_list[i].Tag[a].includes("B-")) {
                // console.log("current", this.master_statements_list[i].Tag[a]);
                // console.log("next", this.master_statements_list[i].Tag[a + 1]);
                if (this.master_statements_list[i].Tag[a + 1] != undefined) {
                  if (
                    check < this.master_statements_list[i].Tag.length - 1 &&
                    this.master_statements_list[i].Tag[a + 1].includes("I-")
                  ) {
                    index = a;
                    // console.log("index", index);
                    values = this.master_statements_list[i].words_list[index];
                  } else {
                    values = null;
                    index = null;
                    index = a;
                    values = this.master_statements_list[i].words_list[index];
                    desc.push({
                      text: values,
                      word_type: this.master_statements_list[i].Tag[a].slice(2),
                    });
                    // //console.log(desc);
                  }
                } else {
                  values = null;
                  index = null;
                  index = a;
                  values = this.master_statements_list[i].words_list[index];
                  desc.push({
                    text: values,
                    word_type: this.master_statements_list[i].Tag[a].slice(2),
                  });
                }
              } else if (this.master_statements_list[i].Tag[a].includes("I-")) {
                var check = this.master_statements_list[i].Tag.indexOf(
                  this.master_statements_list[i].Tag[a]
                );
                index = a;
                if (this.master_statements_list[i].Tag[a + 1] != undefined) {
                  if (
                    this.master_statements_list[i].Tag[a + 1].includes("I-")
                  ) {
                    values =
                      values +
                      " " +
                      this.master_statements_list[i].words_list[index];
                  } else {
                    values =
                      values +
                      " " +
                      this.master_statements_list[i].words_list[index];
                    desc.push({
                      text: values,
                      word_type: this.master_statements_list[i].Tag[a].slice(2),
                    });
                    index = null;
                    values = null;
                  }
                } else {
                  values =
                    values +
                    " " +
                    this.master_statements_list[i].words_list[index];
                  desc.push({
                    text: values,
                    word_type: this.master_statements_list[i].Tag[a].slice(2),
                  });
                  index = null;
                  values = null;
                }
              }
            }
          }
          this.master_statements_list[i]["selected_list"] = desc;

          this.master_statements_list[i].key = key;
        }
      }
      for (let i = 0; i < this.master_statements_list.length; i++) {
        this.statements.push(this.master_statements_list[i]);
      }
      this.spinnerOn = false;
      //console.log(this.master_statements_list , "Mster statements loaded")
      //console.log(this.statements , " statements loaded")
    },
    load_popover(target) {
      $(".popoverDiv").css("display", "block");
      $(".popoverDiv").css("position", "absolute");
      $(".popoverDiv").css("left", target.clientX);
      $(".popoverDiv").css("top", target.clientY+ window.pageYOffset);
    },
    selected_text(index) {
      if (window.getSelection) {
        if (
          window.getSelection().toString() != "" &&
          window.getSelection().toString().split(" ").join("") != ""
        ) {
          this.highlighted_text = window.getSelection().toString().trim();
          this.word_selected = true;
          this.selected_statement = this.statements[index].Statement;
          this.load_popover(event);
        } else {
          this.highlighted_text = "";
          $(".popoverDiv").css("display", "none");
        }
      } else if (document.selection) {
        document.selection.createRange().text;
      }
    },
    update_statements(entity) {
      var words_list = entity.value.split(" ");
      var tags = [];
      for (var i in this.statements) {
        var master_words_list = this.statements[i].Statement.split(" ");
        if (this.statements[i].selected_list == undefined) {
          this.statements[i].selected_list = [];
        }
        if (this.statements[i].Tag.length == 0) {
          for (var j in master_words_list) {
            this.statements[i].Tag.push("");
          }
        }
        if (this.statements[i].Statement == this.selected_statement) {
          this.statements[i].IsTagCompleted = "NO";
          this.statements[i].selected_list.push({
            text: entity.value,
            word_type: entity.entity,
          });
          for (var j in master_words_list) {
            if (words_list.includes(master_words_list[j])) {
              var index = words_list.indexOf(master_words_list[j]);
              if (index == 0) {
                this.statements[i].Tag[j] = "B-" + entity.entity;
              } else {
                this.statements[i].Tag[j] = "I-" + entity.entity;
              }
            } else {
              if (this.statements[i].Tag[j] == "") {
                this.statements[i].Tag[j] = "O";
              }
            }
          }
        }
      }
    },
    entity(value1, value2) {
      for (var i in event.target.parentElement.children) {
        if (event.target.parentElement.children[i].style != undefined) {
          event.target.parentElement.children[i].style.backgroundColor = "";
          event.target.children[0].style.backgroundColor = "";
        }
      }
      if (event.target.style.backgroundColor == "yellow") {
        event.target.style.backgroundColor = "";
      } else {
        event.target.style.backgroundColor = "yellow";
        var flag = false;
        if (this.done_entities.length != 0) {
          for (var i = 0; i < this.done_entities.length; i++) {
            if (this.done_entities[i].value == value1) {
              flag = true;
            }
          }
        }
        if (flag == false) {
          this.word_selected = true;
          this.sub_entities.value = value1;
          this.statement_array = value2;
          var joint = this.statement_array.join();
          var a = joint.lastIndexOf(value1);
          var b = value1.length + a - 2;
          this.sub_entities.start = a;
          this.sub_entities.end = b;
        }
      }
    },
    save_statement(index) {
      if(this.statements[index].Tag.length == 0) {
        Swal({
          text: this.tlt('ner_page_add_tags_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      }else {
        var final_statements_list = [];
        var valid_statement = this.statements[index];
        // console.log("before---", this.statements[index]);
        var key = valid_statement.key;
        valid_statement.IsTagCompleted = "YES";
        delete valid_statement.key;
        delete valid_statement.selected_list;
        delete valid_statement.words_list;
        final_statements_list.push({
          [key]: valid_statement,
        });
        // console.log("singular final",final_statements_list);
        this.spinnerOn = true;
        axios
          .post(
            api_calls.tag_sentences_url(),
            {
              company_id: this.$session.get("UserInformation").company_id,
              company_name: this.$session.get("UserInformation").company_name,
              email: this.$session.get("UserInformation").email,
              license_key: this.$session.get("UserInformation").license_key,
              token: this.$session.get("UserInformation").tokens,
              ner_tag_statement: final_statements_list,
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`,
              },
            }
          )
          .then((response) => {
            this.spinnerOn = false;
            if (this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE == response.data.message.MSG_CODE) {
              Swal({
                text: this.tlt('ner_page_tags_submit_msg'),
                // toast: true,
                // position: "top-end",
                type: "success",
                showConfirmButton: true,
                timer: 3500,
              });
              // this.page_require(1);
              this.load_ner_statements();
            } else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              })
            }
          })
          .catch((e) => {
            this.spinnerOn = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      }
    },
    submit_ner_model() {
      this.spinnerOn = true;
      var final_statements_list = [];
      var valid_list = this.statements.filter((statement) => {
        return statement.IsTagCompleted != "";
      });
      if (valid_list.length == 0) {
        this.spinnerOn = false;
        toastr.error(
          this.tlt('ner_page_submit_alert_msg')
        );
      } else if (valid_list.length < 5 && this.statements.length > 5) {
        this.spinnerOn = false;
        toastr.error(
          this.tlt('ner_page_submit_alert_msg1')
        );
      } else {
        for (var i in valid_list) {
          var key = valid_list[i].key;
          delete valid_list[i].key;
          delete valid_list[i].selected_list;
          delete valid_list[i].words_list;
          final_statements_list.push({
            [key]: valid_list[i],
          });
        }
        // console.log(final_statements_list);
        if (window.getSelection().empty) {
          window.getSelection().empty();
        } else if (window.getSelection().removeAllRanges) {
          window.getSelection().removeAllRanges();
        }
        // axios
        //   .post(
        //     api_calls.tag_sentences_url(),
        //     {
        //       companyid: this.$session.get("UserInformation").company_id,
        //       companyname: this.$session.get("UserInformation").company_name,
        //       email: this.$session.get("UserInformation").email,
        //       license_key: this.$session.get("UserInformation").license_key,
        //       token: this.$session.get("UserInformation").tokens,
        //       ner_tag_statement: final_statements_list,
        //     },
        //     {
        //       headers: {
        //         Authorization: `Bearer ${this.$session.get("at")}`,
        //       },
        //     }
        //   )
        //   .then((response) => {
        //     this.spinnerOn = false;
        //     if (response.data == "Query Executed Successfully") {
        //       toastr.success("All your tags have been submitted successfully.");
        //       setTimeout(() => {
        //         this.$router.go();
        //       }, 2000);
        //     } else if (response.data == "Internal Server Error") {
        //       toastr.error("Internal Server Error");
        //     }
        //     if (window.getSelection().empty) {
        //       window.getSelection().empty();
        //     } else if (window.getSelection().removeAllRanges) {
        //       window.getSelection().removeAllRanges();
        //     }
        //   })
        //   .catch(() => {
        //     this.spinnerOn = false;
        //     toastr.error("Internal Server Error");
        //   });
      }
    },
    remove_tag(index) {
      if(this.statements[index].Tag.length == 0) {
        Swal({
          text: this.tlt('ner_page_no_tags_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      }
      Swal.fire({
        title: this.tlt('ner_page_swal_msg'),
        text: this.tlt('ner_page_untag_statement_msg'),
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: this.tlt('ner_page_swal_delete_msg'),
      }).then((result) => {
        // console.log(result);
        if (result.dismiss) {
          return;
        }
        this.statements[index].IsTagCompleted = "NO";
        this.statements[index].Tag = [];
        this.statements[index].selected_list = [];
        this.$set(this.statements, index, this.statements[index]);

        var final_statements_list = [];
        var valid_statement = this.statements[index];
        var key = valid_statement.key;
        delete valid_statement.key;
        delete valid_statement.selected_list;
        delete valid_statement.words_list;
        final_statements_list.push({
          [key]: valid_statement,
        });
        // console.log("singular final",final_statements_list);
        this.spinnerOn = true;
        axios
          .post(
            api_calls.tag_sentences_url(),
            {
              company_id: this.$session.get("UserInformation").company_id,
              company_name: this.$session.get("UserInformation").company_name,
              email: this.$session.get("UserInformation").email,
              license_key: this.$session.get("UserInformation").license_key,
              token: this.$session.get("UserInformation").tokens,
              ner_tag_statement: final_statements_list,
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`,
              },
            }
          )
          .then((response) => {
            this.spinnerOn = false;
            if (this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE == response.data.message.MSG_CODE) {
              Swal({
                text: this.tlt('ner_page_tag_removed_msg'),
                // toast: true,
                // position: "top-end",
                type: "success",
                showConfirmButton: true,
                timer: 3500,
              });
            } else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              })
            }
          })
          .catch((e) => {
            this.spinnerOn = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      });
    },
    entity_selected(word) {
      if (this.highlighted_text != "") {
        this.sub_entities.value = this.highlighted_text;
      }
      var popover_id =
        event.target.parentElement.parentElement.parentElement.id;
      // this.word_selected = false;
      this.sub_entities.entity = this.drop_down_select;
      this.done_entities.push(this.sub_entities);
      $("#" + popover_id).popover("hide");
      $(".popoverDiv").css("display", "none");
      this.drop_down_select = "";
      this.highlighted_text = "";
      this.update_statements(this.sub_entities);
      this.sub_entities = {};
      if (window.getSelection().empty) {
        window.getSelection().empty();
      } else if (window.getSelection().removeAllRanges) {
        window.getSelection().removeAllRanges();
      }
    },
    fileinput(e) {
      let files = e.target.files || e.dataTransfer.files;
      //console.log(files)
      if (files[0].size < 1000000) {
        if (
          files[0].name.includes("csv") ||
          files[0].name.includes("txt") ||
          files[0].name.includes("xls") ||
          files[0].type.includes("text")
        ) {
          //console.log(this.file_label)
          this.file_label = files[0].name;
          this.createCSV(files[0]);
          //console.log(this.file_label)
        }
      } else {
        toastr.error(this.tlt('ner_page_file_size_alert'));
      }
      if (!files.length) return;
    },
    createCSV(file, type) {
      let reader = new FileReader();
      reader.onload = (e) => {
        this.csv_file = e.target.result.split("base64")[1];
      };
      reader.readAsDataURL(file);
    },
    send_csv() {
      //console.log($("#inputGroupFile01").val())
      event.preventDefault();
      if ($("#inputGroupFile01").val() == '') {
        Swal.fire({
          title: this.tlt('ner_page_input_field_msg'),
          text: this.tlt('ner_page_upload_file_msg'),
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
      }else{
        this.spinnerOn = true;
        //console.log(this.file_label)
        axios
          .post(
            api_calls.upload_ner_file_url(),
            {
              company_name: this.$session.get("UserInformation").company_name,
              company_id: this.$session.get("UserInformation").company_id,
              email: this.$session.get("UserInformation").email,
              token: this.$session.get("UserInformation").tokens,
              license_key: this.$session.get("UserInformation").license_key,
              file_data: this.csv_file,
              file_name: this.file_label,
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`,
              },
            }
          )
          .then((response) => {
            this.spinnerOn = false;
            if (this.api_status_code.ERROR_UPLOAD.MSG_CODE == response.data.message.MSG_CODE) {
              toastr.error(this.tlt('ner_page_error_upload_alert'));
              this.file_label = "Choose file";
              this.csv_file = "";
              document.getElementById("inputGroupFile01").value="";
            } else if (this.api_status_code.NER_TAG_STATUS.MSG_CODE == response.data.message.MSG_CODE) {
              toastr.error(
                this.tlt('ner_page_tags_assign_msg')
              );
              this.file_label = "Choose file";
              this.csv_file = "";
              document.getElementById("inputGroupFile01").value="";
            } else if (this.api_status_code.INVALID_HEADING.MSG_CODE == response.data.message.MSG_CODE) {
              toastr.error(this.tlt('ner_page_invalid_header_msg'));
              this.file_label = "Choose file";
              this.csv_file = "";
              document.getElementById("inputGroupFile01").value="";
            } else if (this.api_status_code.FAILED_TO_ADD_TAGS.MSG_CODE == response.data.message.MSG_CODE) {
              // toastr.error("Unknown Tags found! Statements has been uploaded, Please tag the statements manually.")
             Swal({
                text: this.tlt('ner_page_tags_found_alert_msg'),
                type: "error",
                showConfirmButton: true,
                timer: 10000,
              });
              this.file_label = "Choose file";
              this.csv_file = "";
              document.getElementById("inputGroupFile01").value="";
              // setTimeout(() => {
                // this.$router.go();
                this.load_ner_statements();
              // }, 2500); 
            } else if (this.api_status_code.INCORRECT_FILE_FORMAT.MSG_CODE == response.data.message.MSG_CODE) {
              toastr.error(this.tlt('ner_page_file_format_msg'));
              this.file_label = "Choose file";
              this.csv_file = "";
              document.getElementById("inputGroupFile01").value="";
            } else if (this.api_status_code.INVALID_FILE_TYPE.MSG_CODE == response.data.message.MSG_CODE) {
              toastr.error(this.tlt('ner_page_file_type_msg'));
              this.file_label = "Choose file";
              this.csv_file = "";
              document.getElementById("inputGroupFile01").value="";
            } else if (this.api_status_code.FILE_UPLOAD.MSG_CODE == response.data.message.MSG_CODE) {
              toastr.success(this.tlt('ner_page_upload_success_alert_msg'));
             // setTimeout(() => {
                // this.$router.go();
                this.load_ner_statements();
              // }, 2500);
            } else if (this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE == response.data.message.MSG_CODE){
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "info"
              })
            }
            else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              })
            }
            // else if (response.data == "Internal Server Error") {
            //   this.file_label = "Choose file";
            //   this.csv_file = "";
            //   toastr.error(
            //     "Due to some internal server error, we were unable to process this request. Please try later."
            //   );
            // }
            $("#upload_csv_file").modal("hide");
          })
          .catch((e) => {
            this.spinnerOn = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
          this.close_modal('upload_btn')
        }
    },
    comma_to_list() {
      event.preventDefault();
      if (this.entities_list_string == "") {
        Swal({
          text: this.tlt('ner_page_ner_tag_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
      }
      this.entities_list = this.entities_list_string.split(",");
      if (this.entities_list_string != "") {
        $("#exampleModalCenter").modal("hide");
        this.spinnerOn = true;
        axios
          .post(
            api_calls.add_ner_tag(),
            {
              company_name: this.$session.get("UserInformation").company_name,
              company_id: this.$session.get("UserInformation").company_id,
              email: this.$session.get("UserInformation").email,
              token: this.$session.get("UserInformation").tokens,
              license_key: this.$session.get("UserInformation").license_key,
              taglist: this.entities_list,
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`,
              },
            }
          )
          .then((response) => {
            this.spinnerOn = false;
            if (this.api_status_code.NER_TAG_ADD.MSG_CODE == response.data.message.MSG_CODE) {
              toastr.success(this.tlt('ner_page_tag_added_alert_msg'));
            } else if(this.api_status_code.UNSUCCESSFUL_DB_QUERY.MSG_CODE == response.data.message.MSG_CODE){
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              })
            }
            else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              })
            } 
            this.empty_variable();
          })
          .catch((e) => {
            this.spinnerOn = false;
            toastr.error(this.tlt('ner_page_some_error_alert2'));
            this.spinnerOn = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      }
      if (this.delete_ner_tags.length > 0) {
        // axios
        //   .post(api_calls.delete_ner_tags(), {
        //     companyid: this.$session.get("UserInformation").company_id,
        //     companyname: this.$session.get("UserInformation").company_name,
        //     email: this.$session.get("UserInformation").email,
        //     license_key: this.$session.get("UserInformation").license_key,
        //     token: this.$session.get("UserInformation").tokens,
        //     tag_name: this.delete_ner_tags,
        //   })
        //   .then((response) => {
        //     if (response.data.Msg == "Query Executed Successfully") {
        //       toastr.success("Your tag has been removed successfully.");
        //       setTimeout(() => {
        //         this.$router.go();
        //       }, 2500);
        //     }
        //   });
      } else {
        // setTimeout(() => {
          // this.$router.go();
          this.load_ner_statements();
        // }, 2500);
      }
    },
    delete_ner(index) {
      // console.log("statements length",this.statements.length);
      var delete_statement_list = [];
      var valid_list = this.statements.filter((statement) => {
        return statement.Statement == this.statements[index].Statement;
      });
      // console.log(valid_list);
      for (var i in valid_list) {
        var key = valid_list[i].key;
        delete valid_list[i].key;
        delete valid_list[i].selected_list;
        delete valid_list[i].words_list;
        delete_statement_list.push({
          [key]: valid_list[i],
        });
      }
      // console.log(delete_statement_list);
      Swal.fire({
        title: this.tlt('ner_swal_alert_msg'),
        text: this.tlt('ner_swal_revert_msg'),
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: this.tlt('ner_swal_confirm_msg'),
      }).then((result) => {
        if (result.value) {
          this.spinnerOn = true;
          axios
            .post(
              api_calls.delete_ner(),
              {
                company_id: this.$session.get("UserInformation").company_id,
                company_name: this.$session.get("UserInformation").company_name,
                license_key: this.$session.get("UserInformation").license_key,
                email: this.$session.get("UserInformation").email,
                token: this.$session.get("UserInformation").tokens,
                ner_tag_statment: delete_statement_list,
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`,
                },
              }
            )
            .then((response) => {
              this.spinnerOn = false;
              if (this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE == response.data.message.MSG_CODE) {
                // toastr.success("Your NER tag deleted successfully");
                Swal({
                    text: this.tlt('ner_tag_delete_msg'),
                    toast: true,
                    position: "top-end",
                    type: "success",
                    showConfirmButton: false,
                    timer: 5500,
                  });
                if((this.statements.length === 1 && 
                  delete_statement_list.length === 1) &&
                  this.page_no > 1){
                    this.page_no = this.page_no - 1;
                }
                this.clear_fields();
                // setTimeout(() => {
                  // this.$router.go();
                  this.load_ner_statements();
                // }, 1500);
              } else {
                Swal({
                  title: response.data.message.MSG_CODE,
                  text: response.data.message.MSG,
                  showCancelButton: false,
                  showConfirmButton: false,
                  type: "error"
                })
              }
            })
            .catch((e) => {
              this.spinnerOn = false;
              if (
                e.response.status === 410 ||
                e.response.status === 440 ||
                e.response.status === 409
              ) {
                this.$root.$emit("Session_Expired", e.response.data);
              }
            });
        }
      });
    },
    selected_statements(index) {
      if (index == "all") {
        this.checked_list = [];
        var role_length = this.statements.length;
        for (var i = 0; i < role_length; i++) {
          this.checked_list.push(this.statements[i]);
        }
        //console.log(this.checked_list)
      } else {
        if (event.target.checked == true) {
          if (!this.checked_list.includes(index)) {
            this.checked_list.push(this.statements[index]);
          }
        } else if (event.target.checked == false) {
          var selectall = document.querySelector("#selectall");
          if (selectall.checked == true) {
            selectall.checked = false;
          }
          var temp = this.checked_list.filter((role)=> {
            return role !== this.statements[index];
          });
          this.checked_list = temp;
        }
      }
    },
    delete_ner_multiple() {
      // console.log(this.statements,"statements in delete function")
      // console.log(this.master_statements_list,"Master statements in delete function")
      
      var num = this.checked_list.length;
      var multiple_delete_statement_list = [];
      if (this.checked_list.length == 0) {
        Swal.fire({
          title: this.tlt('ner_no_statement_alert_msg'),
          text: "",
          type: "error",
          timer: 2000,
        });
      } else if (this.checked_list.length > 0) {
        let dlt_list=[];
        for (var i in this.checked_list) {
          // var valid_list = this.statements.filter((statement) => {

            
            // return statement.Statement == this.checked_list[i].Statement;
          // });
          
          // console.log(valid_list,"list")
          
          // console.log(valid_list[0],"list")
          var key = this.checked_list[i].key;
          dlt_list.push(key)
          

          multiple_delete_statement_list.push({ [key]: this.checked_list[i] });
     
          
        }
        Swal.fire({
          title: this.tlt('ner_swal_alert_msg2'),
          text: this.tlt('ner_swal_revert_msg2'),
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: this.tlt('ner_swal_confirm_msg2'),
        }).then((result) => {
          if (result.value) {
            this.spinnerOn = true;
            axios
              .post(
                api_calls.delete_ner(),
                {
                  company_id: this.$session.get("UserInformation").company_id,
                  company_name: this.$session.get("UserInformation")
                    .company_name,
                  license_key: this.$session.get("UserInformation").license_key,
                  email: this.$session.get("UserInformation").email,
                  token: this.$session.get("UserInformation").tokens,
                  ner_tag_statment: multiple_delete_statement_list,
                },
                {
                  headers: {
                    Authorization: `Bearer ${this.$session.get("at")}`,
                  },
                }
              )
              .then((response) => {
                this.spinnerOn = false;
                if (this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE == response.data.message.MSG_CODE) {
                  Swal({
                    text: this.tlt('ner_tag_delete_msg2'),
                    toast: true,
                    position: "top-end",
                    type: "success",
                    showConfirmButton: false,
                    timer: 5500,
                  });
                  if(multiple_delete_statement_list.length === this.statements.length && 
                    this.page_no >1){
                      this.page_no = this.page_no - 1;
                  }
                  this.clear_fields();
                  // setTimeout(() => {
                    // this.$router.go();
                    //console.log("RANNNN")
                    this.load_ner_statements();
                  // }, 1500);
                } else {
                  this.clear_fields();
                  Swal({
                    title: response.data.message.MSG_CODE,
                    text: response.data.message.MSG,
                    showCancelButton: false,
                    showConfirmButton: false,
                    type: "error"
                  })
                }
              })
              .catch((e) => {
                this.spinnerOn = false;
                if (
                  e.response.status === 410 ||
                  e.response.status === 440 ||
                  e.response.status === 409
                ) {
                  this.$root.$emit("Session_Expired", e.response.data);
                }
              });
          }
        });
      }
    },
    train_ner_model() {
      if(!this.disable_btn_expired){
      if (this.notTrainedQuestions.length > 0) {
        Swal.fire({
          title: this.tlt('ner_setup_translate_msg'),
          text: this.tlt('ner_training_time_msg'),
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: this.tlt('ner_train_entity_model_msg'),
          cancelButtonText: this.tlt('ner_go_back_msg'),
        }).then((result) => {
          if (result.value) {
            // if (this.statements.length > 0) {
            // axios
            //   .post(api_calls.notify_superadmin_url(), {
            //     companyname: this.companyname,
            //     companyid: this.companyid,
            //     notify_type: "NerModel",
            //     email: this.$session.get("UserInformation").email,
            //     token: this.$session.get("UserInformation").tokens,
            //     license_key: this.$session.get("UserInformation").license_key,
            //     subject: "Notification to train the ner model",
            //     body:
            //       this.companyname +
            //       "has requested to train the ner model of entities.",
            //   })
            //   .then((response) => {
            //     alert(response.data.Msg);
            //     if (response.data.Msg == "A mail has been sent to your email") {
            //       toastr.success(
            //         "Your Ner  model is successfully scheduled for further training."
            //       );
            //       this.new_questions = 0;
            //     }
            //   });
            axios
              .post(api_calls.train_ner_models(), {
                company_name: this.$session.get("UserInformation").company_name,
                company_id: this.$session.get("UserInformation").company_id,
                email: this.$session.get("UserInformation").email,
                license_key: this.$session.get("UserInformation").license_key,
                token: this.$session.get("UserInformation").tokens,
                subscription: this.$session.get("UserInformation").subscription,
                company_details: {
                  company_name: this.$session.get("UserInformation")
                    .company_name,
                  company_id: this.$session.get("UserInformation").company_id,
                },
                // epochs: 100,
                // batch_size: 64
              })
              .then((response) => {
                this.want_status = true;
                this.$root.$emit("want_model_status",this.want_status);
                this.check_ner_model_status();
                if (response.data.message.MSG_CODE === 20000111) {
                  toastr.success(response.data.message.MSG);
                } else {
                  Swal({
                    title: response.data.message.MSG_CODE,
                    text: response.data.message.MSG,
                    showCancelButton: false,
                    showConfirmButton: false,
                    type: "error"
                  })
                }
              })
              .catch((e) => {
                toastr.error(this.tlt('ner_internal_server_alert2'));
                if (
                  e.response.status === 410 ||
                  e.response.status === 440 ||
                  e.response.status === 409
                ) {
                  this.$root.$emit("Session_Expired", e.response.data);
                }
              });
            // } else {
            //   toastr.error("There are no tags to train. Please add some tags and");
            // }
          }
        });
      } else {
        toastr.error(
          this.tlt('ner_no_tags_train_msg')
        );
      }}else{
        this.show_subscription_expired_swal();
      }
    },
    clear_fields() {
      this.word_info = this.buffer_word_list;
      this.entities_list_string = "";
      this.checked_list = [];
    },
    download_sample() {
      // console.log(this.companyname);
      event.preventDefault();
      this.spinnerOn = true;
      axios({
        method: "post",
        url: api_calls.file_download(),
        responseType: "blob",
        data: {
          company_id: this.$session.get("UserInformation").company_id,
          company_name: this.$session.get("UserInformation").company_name,
          license_key: this.$session.get("UserInformation").license_key,
          token: this.$session.get("UserInformation").tokens,
          email: this.$session.get("UserInformation").email,
          sample_file: "ner",
        },
        headers: {
          Authorization: `Bearer ${this.$session.get("at")}`,
        },
      })
        .then((response) => {
          this.spinnerOn = false;
          if (response.data.message === "Not able to download file") {
            Swal.fire({
              title: this.tlt('ner_download_sample_alert'),
              type: "error",
              timer: 2500,
            });
          } else {
            var url = window.URL.createObjectURL(new Blob([response.data]));
            var link = document.createElement("a");
            link.href = url;
            // console.log(this.companyname)
            link.setAttribute("download", this.company_name + "NerFile.csv");
            document.body.appendChild(link);
            link.click();
          }
        })
        .catch((e) => {
          this.spinnerOn = false;
          Swal.fire({
            title: this.tlt('ner_download_sample_alert2'),
            type: "error",
            timer: 2500,
          });
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
  },
};
"},null]}