{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/Chatscreen.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/Chatscreen.vue","mtime":1643027096168},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBmaW5nZXJwcmludCBmcm9tICJAL3BvcnRhbC9jb21wb25lbnRzL2ZpbmdlcnByaW50IjsKaW1wb3J0IGFwaV9jYWxscyBmcm9tICJAL3BvcnRhbC9hcGlfY2FsbHMiOwppbXBvcnQgeyBnZW5lcmF0ZV90aW1lLCBmcmVlemVfcG9ydGFsIH0gZnJvbSAiQC9wb3J0YWwvbWl4aW5zIjsKaW1wb3J0IFN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJjaGF0c2NyZWVuIiwKICBtaXhpbnM6IFtnZW5lcmF0ZV90aW1lLCBmcmVlemVfcG9ydGFsXSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgb3Blbl9tb2RhbDogZmFsc2UsCiAgICAgIGNoYXQ6IFtdLAogICAgICBpbnRlbnQ6ICIiLAogICAgICBpbnRlbnRfdmFsdWU6ICIiLAogICAgICB0b19zZW5kOiAiIiwKICAgICAgaW50ZW50X2xpc3Q6IFtdLAogICAgICBpbmRleDogbnVsbCwKICAgICAgbmV3X3F1ZXN0aW9uczogMCwKICAgICAgLy8gY2hhdF93aWRnZXQ6IHsKICAgICAgLy8gICBsb2dvOiAiIiwKICAgICAgLy8gICB0aXRsZTogIiIsCiAgICAgIC8vICAgc3R5bGU6ICJtYXJnaW4tdG9wOiA1cHg7aGVpZ2h0OjMwcHg7d2lkdGg6NjBweCIsCiAgICAgIC8vIH0sCiAgICAgIGNoYXRfd2lkZ2V0OiB7CiAgICAgICAgbG9nbzogIiIsCiAgICAgICAgdGl0bGU6ICIiLAogICAgICAgIHN0eWxlOiAiIiwKICAgICAgICBib3RfdGhlbWU6ICIiLAogICAgICAgIGJ1dHRvbl90aGVtZTogIiIsCiAgICAgICAgYnV0dG9uX2FsaWdubWVudDogIiIsCiAgICAgICAgYm90X2ljb246ICIiLAogICAgICAgIGJvdF9iYWNrZ3JvdW5kX2ltYWdlOiAiIiwKICAgICAgICBidXR0b25faG9yaXpvbnRhbF9zcGFjaW5nOiAiMyIsCiAgICAgICAgYnV0dG9uX3ZlcnRpY2FsX3NwYWNpbmc6ICI1IiwKICAgICAgICBoZWFkZXJfYmFja2dyb3VuZDogIiIsCiAgICAgIH0sCiAgICAgIHVzZXJfcm9sZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUsCiAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgIGNvbXBhbnluYW1lOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lLAogICAgICBpbnRlbnRfcmVzcG9uc2U6ICIiLAogICAgICByZXNwb25zZXNfbWFwOiB7fSwKICAgICAgd2FudF9zdGF0dXM6IHRydWUsCiAgICAgIGRpc2FibGVfYnRuX2V4cGlyZWQ6ZmFsc2UsCiAgICAgIGludGVudF9jb3JlX21vZGVsX2lucHJvZ3Jlc3M6IGZhbHNlLAogICAgfTsKICB9LAogIC8vIG1vdW50ZWQoKSB7CiAgLy8gICBjb25zb2xlLmxvZygiSEVMT09PT09PT08vKiAgKi8iKQogIC8vICAgLy8gdGhpcy5mcmVlemVfcG9ydGFsKCk7CiAgLy8gICAvLyAvLyBjb25zb2xlLmxvZygiY29tcGFueWlkIiwgdGhpcy5jb21wYW55aWQpOwogIC8vICAgLy8gdGhpcy5zaG93ID0gZmFsc2U7CiAgLy8gfSwKICBwcm9wczogewogICAgaXNUZXh0VG9Cb3Q6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdHJ1ZSwKICAgIH0sCiAgfSwKICBjb21wdXRlZDogewogICAgY3NzUHJvcHMoKSB7CiAgICAgIGxldCBib3RBdHRyaWJ1dGVzID0gewogICAgICAgIGhlYWRfY29sb3I6IHRoaXMuY2hhdF93aWRnZXQuaGVhZGVyX2JhY2tncm91bmQsCiAgICAgIH07CiAgICAgIGlmICh0aGlzLmNvbXBhbnlpZCA9PT0gInJldGFpbGlnZW5jZTg0OTI2IikgewogICAgICAgIGJvdEF0dHJpYnV0ZXMuaGVhZF9jb2xvciA9IHRoaXMuY2hhdF93aWRnZXQuYm90X3RoZW1lOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaXNleGNoYW5nZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAiLS1ib3QtaGVhZC1jb2xvciI6ICIjZmZmIiwKICAgICAgICAgICItLWJvdC1zZW5kZXItY29sb3IiOiAiIzJiMzE4NCIsCiAgICAgICAgICAiLS1ib3QtYnV0dG9uLWNvbG9yIjogIiNmZGNmMzgiLAogICAgICAgICAgIi0tYm90LWxpbmstY29sb3IiOiAiIzJiMzE4NCIsCiAgICAgICAgICAiLS1ib3QtYnV0dG9uLWJhY2tncm91bmQiOiAiIzFkYWFlMSIsCiAgICAgICAgICAiLS1ib3QtYnV0dG9ucy1hbGlnbm1lbnQiOiAiY2VudGVyIiwKICAgICAgICAgICItLWJvdC1idXR0b25zLXZlcnRpY2FsLXNwYWNpbmciOiAiNSUiLAogICAgICAgICAgIi0tYm90LWJ1dHRvbnMtaG9yaXpvbnRhbC1zcGFjaW5nIjogIjMlIiwKICAgICAgICB9OwogICAgICB9CiAgICAgIHJldHVybiB7CiAgICAgICAgIi0tYm90LWhlYWQtY29sb3IiOiBib3RBdHRyaWJ1dGVzLmhlYWRfY29sb3IsCiAgICAgICAgIi0tYm90LXNlbmRlci1jb2xvciI6IHRoaXMuY2hhdF93aWRnZXQuYm90X3RoZW1lLAogICAgICAgICItLWJvdC1idXR0b24tY29sb3IiOiB0aGlzLmNoYXRfd2lkZ2V0LmJvdF90aGVtZSwKICAgICAgICAiLS1ib3QtbGluay1jb2xvciI6IHRoaXMuY2hhdF93aWRnZXQuYm90X3RoZW1lLAogICAgICAgICItLWJvdC1idXR0b24tYmFja2dyb3VuZCI6IHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX3RoZW1lLAogICAgICAgICItLWJvdC1idXR0b25zLWFsaWdubWVudCI6IHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX2FsaWdubWVudC52YWx1ZSwKICAgICAgICAiLS1ib3QtYnV0dG9ucy12ZXJ0aWNhbC1zcGFjaW5nIjogYCR7dGhpcy5jaGF0X3dpZGdldC5idXR0b25fdmVydGljYWxfc3BhY2luZ30lYCwKICAgICAgICAiLS1ib3QtYnV0dG9ucy1ob3Jpem9udGFsLXNwYWNpbmciOiBgJHt0aGlzLmNoYXRfd2lkZ2V0LmJ1dHRvbl9ob3Jpem9udGFsX3NwYWNpbmd9JWAsCiAgICAgIH07CiAgICB9LAogICAgYm90X2ltZ19pY29uKCkgewogICAgICByZXR1cm4gewogICAgICAgICJiYWNrZ3JvdW5kLWltYWdlIjogYHVybCgke3RoaXMuY2hhdF93aWRnZXQuYm90X2ljb259KWAsCiAgICAgIH07CiAgICB9LAogICAgY2hhdF9ib3RfYmFja2dyb3VuZF9pbWFnZSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6IGB1cmwoJHt0aGlzLmNoYXRfd2lkZ2V0LmJvdF9iYWNrZ3JvdW5kX2ltYWdlfSlgLAogICAgICB9OwogICAgfSwKICAgIC8vIGNzc1Byb3BzKCkgewogICAgLy8gICBpZiAodGhpcy5jb21wYW55aWQgPT09ICJyZXRhaWxpZ2VuY2U4NDkyNiIpIHsKICAgIC8vICAgICByZXR1cm4gewogICAgLy8gICAgICAgIi0tYm90LWhlYWQtY29sb3IiOiAiIzk5MDAwMGQxIiwKICAgIC8vICAgICAgICItLWJvdC1zZW5kZXItY29sb3IiOiAiIzk5MDAwMGQxIiwKICAgIC8vICAgICAgICItLWJvdC1idXR0b24tY29sb3IiOiAiIzk5MDAwMGQxIiwKICAgIC8vICAgICAgICItLWJvdC1saW5rLWNvbG9yIjogIiM5OTAwMDBkMSIsCiAgICAvLyAgICAgfTsKICAgIC8vICAgfQogICAgLy8gICByZXR1cm4gewogICAgLy8gICAgICItLWJvdC1oZWFkLWNvbG9yIjogIiNGRkZGRkYiLAogICAgLy8gICAgICItLWJvdC1zZW5kZXItY29sb3IiOiAiIzI3MzY3OSIsCiAgICAvLyAgICAgIi0tYm90LWJ1dHRvbi1jb2xvciI6ICIjMjczNjc5IiwKICAgIC8vICAgICAiLS1ib3QtbGluay1jb2xvciI6ICIjMjczNjc5IiwKICAgIC8vICAgfTsKICAgIC8vIH0sCiAgfSwKICB3YXRjaDogewogICAgaW50ZW50KG5ld1ZhbCkgewogICAgICBpZiAobmV3VmFsICE9PSAiTm9faW50ZW50IikgewogICAgICAgIHRoaXMuaW50ZW50X3Jlc3BvbnNlID0gdGhpcy5yZXNwb25zZXNfbWFwW25ld1ZhbF07CiAgICAgIH0KICAgIH0sCiAgfSwKICBjcmVhdGVkKCkgewogICAgYXhpb3MKICAgICAgLnBvc3QoCiAgICAgICAgYXBpX2NhbGxzLmdldF91bmFuc3dlcmVkX3VybCgpLAogICAgICAgIHsKICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgIGlzRHJvcGRvd246ICJUcnVlIiwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgfSwKICAgICAgICB9CiAgICAgICkKICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgLy8gZm9yICh2YXIgaSBpbiByZXNwb25zZS5kYXRhWzBdKSB7CiAgICAgICAgLy8gICB0aGlzLmludGVudF9saXN0LnB1c2goCiAgICAgICAgLy8gICAgIHJlc3BvbnNlLmRhdGFbMF1baV0ucmVwbGFjZSh0aGlzLmNvbXBhbnlpZCArICJfIiwgIiIpCiAgICAgICAgLy8gICApOwogICAgICAgIC8vIH0KICAgICAgICBmb3IgKHZhciBpIGluIHJlc3BvbnNlLmRhdGFbMF0pIHsKICAgICAgICAgIHRoaXMuaW50ZW50X2xpc3QucHVzaCgKICAgICAgICAgICAgcmVzcG9uc2UuZGF0YVswXVtpXQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgYXhpb3MKICAgICAgICAgIC5wb3N0KAogICAgICAgICAgICBhcGlfY2FsbHMubG9hZF9xdWVzdGlvbl9yZXNwb25zZV91cmwoKSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHJvbGU6IHRoaXMudXNlcl9yb2xlLAogICAgICAgICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgIHBhZ2Vfbm86IDEsCiAgICAgICAgICAgICAgcGVyX3BhZ2U6IHRoaXMuaW50ZW50X2xpc3QubGVuZ3RoLAogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfQogICAgICAgICAgKQogICAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICBsZXQgaW50ZW50c0xpc3QgPSByZXMuZGF0YS5zaG93X2ludGVudF9maWVsZC5pbnRlbnRfaW50ZW50bGlzdDsKICAgICAgICAgICAgbGV0IGludGVudFJlc3BvbnNlcyA9CiAgICAgICAgICAgICAgcmVzLmRhdGEuc2hvd19pbnRlbnRfZmllbGQuaW50ZW50X3Jlc3BvbnNlbGlzdDsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIG4gPSBpbnRlbnRSZXNwb25zZXMubGVuZ3RoOyBpIDwgbjsgaSArPSAxKSB7CiAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZXNfbWFwWwogICAgICAgICAgICAgICAgaW50ZW50c0xpc3RbaV0ucmVwbGFjZShgJHt0aGlzLmNvbXBhbnlpZH1fYCwgIiIpCiAgICAgICAgICAgICAgXSA9IGludGVudFJlc3BvbnNlc1tpXTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICkgewogICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICB9KQogICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICBpZiAoCiAgICAgICAgICAoQm9vbGVhbihlLnJlc3BvbnNlKSkgJiYgKAogICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOSkKICAgICAgICApIHsKICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIC8vIGlmICghdGhpcy4kc2Vzc2lvbi5oYXMoIkNoYXRCb3RJbWFnZVBhcmFtZXRlcnMiKSkgewogICAgICBheGlvcwogICAgICAucG9zdCgKICAgICAgICBhcGlfY2FsbHMuZ2V0X3dpZGdldF9zZXR0aW5ncygpLAogICAgICAgIHsKICAgICAgICAgIGNvbXBhbnluYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgY29tcGFueWlkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBpc1Nob3c6IHRydWUsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgfSwKICAgICAgICB9CiAgICAgICkKICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgdGhpcy5jaGF0X3dpZGdldC50aXRsZSA9IHJlc3BvbnNlLmRhdGEuV2lkZ2V0VGl0bGU7CiAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5sb2dvID0gcmVzcG9uc2UuZGF0YS5JbWFnZVVybDsKICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmJ1dHRvbl90aGVtZSA9IHJlc3BvbnNlLmRhdGEuQnV0dG9uVGhlbWU7CiAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5ib3RfdGhlbWUgPSByZXNwb25zZS5kYXRhLkJvdFRoZW1lOwogICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX2FsaWdubWVudCA9IHJlc3BvbnNlLmRhdGEuQm90U3R5bGluZzsKICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmJvdF9pY29uID0gcmVzcG9uc2UuZGF0YS5Cb3RJbWFnZVVybDsKICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmJ1dHRvbl92ZXJ0aWNhbF9zcGFjaW5nID0KICAgICAgICAgIHJlc3BvbnNlLmRhdGEuQnV0dG9uU3R5bGluZy52ZXJ0aWNhbDsKICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmJ1dHRvbl9ob3Jpem9udGFsX3NwYWNpbmcgPQogICAgICAgICAgcmVzcG9uc2UuZGF0YS5CdXR0b25TdHlsaW5nLmhvcml6b250YWw7CiAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5ib3RfYmFja2dyb3VuZF9pbWFnZSA9IHJlc3BvbnNlLmRhdGEuQmdJbWFnZVVybDsKICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmhlYWRlcl9iYWNrZ3JvdW5kID0gcmVzcG9uc2UuZGF0YS5IZWFkZXJUaGVtZTsKICAgICAgICBpZiAodGhpcy5jaGF0X3dpZGdldC5idXR0b25fYWxpZ25tZW50ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX2FsaWdubWVudCA9ICJmbGV4LWVuZCI7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmNoYXRfd2lkZ2V0LmJvdF9pY29uID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYm90X2ljb24gPSAiL2ltZy9Cb3RfaW1nLnBuZyI7CiAgICAgICAgfQogICAgICAgIHRoaXMuJHNlc3Npb24uc2V0KCJDaGF0Qm90SW1hZ2VQYXJhbWV0ZXJzIiwgdGhpcy5jaGF0X3dpZGdldCk7CiAgICAgICAgbGV0IHN0eWxpbmdfdmFsdWUgPSByZXNwb25zZS5kYXRhLkhlYWRlclN0eWxpbmcudmFsdWU7CiAgICAgICAgbGV0IHRlbXBfc3RyaW5nID0gIiI7CiAgICAgICAgaWYgKHN0eWxpbmdfdmFsdWUgPT09ICJsZWZ0IikgewogICAgICAgICAgdGVtcF9zdHJpbmcgPSAibWFyZ2luLWxlZnQ6IDA7bWFyZ2luLXJpZ2h0OiBhdXRvOyI7CiAgICAgICAgfSBlbHNlIGlmIChzdHlsaW5nX3ZhbHVlID09PSAicmlnaHQiKSB7CiAgICAgICAgICB0ZW1wX3N0cmluZyA9ICJtYXJnaW4tbGVmdDogYXV0bzttYXJnaW4tcmlnaHQ6IDA7IjsKICAgICAgICB9IGVsc2UgaWYgKHN0eWxpbmdfdmFsdWUgPT09ICJjZW50ZXIiKSB7CiAgICAgICAgICB0ZW1wX3N0cmluZyA9ICJtYXJnaW4tbGVmdDogYXV0bzttYXJnaW4tcmlnaHQ6IGF1dG87IjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGVtcF9zdHJpbmcgPSAibWFyZ2luLWxlZnQ6IGF1dG87bWFyZ2luLXJpZ2h0OiBhdXRvOyI7CiAgICAgICAgfQogICAgICAgIHRoaXMuY2hhdF93aWRnZXQuc3R5bGUgPQogICAgICAgICAgIm1hcmdpbi10b3A6IDVweDtoZWlnaHQ6MzBweDt3aWR0aDphdXRvO21heC13aWR0aDoxMDAlICFpbXBvcnRhbnQ7IiArCiAgICAgICAgICB0ZW1wX3N0cmluZzsKICAgICAgfSkKICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgaWYgKGUucmVzcG9uc2UpIHsKICAgICAgICAgIGlmICgKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICkgewogICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAodGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSA9PSAiZ29neWIiKSB7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuc3R5bGUgPQogICAgICAgICAgICAgICJtYXJnaW4tdG9wOiA1cHg7aGVpZ2h0OjMwcHg7d2lkdGg6NjBweDttYXJnaW4tbGVmdDogYXV0bzttYXJnaW4tcmlnaHQ6IGF1dG87IjsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5sb2dvID0gIi9pbWcvY2Vuc2VfaW1hZ2UucG5nIjsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5ib3RfaWNvbiA9ICIvaW1nL0JvdF9pbWcucG5nIjsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5idXR0b25fdmVydGljYWxfc3BhY2luZyA9ICI1IjsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5idXR0b25faG9yaXpvbnRhbF9zcGFjaW5nID0gIjMiOwogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmJvdF9iYWNrZ3JvdW5kX2ltYWdlID0gIiI7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuaGVhZGVyX2JhY2tncm91bmQgPSAiI2ZmZmZmZiI7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX3RoZW1lID0gIiMxZGFhZTEiOwogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmJvdF90aGVtZSA9ICIjMjczNjc5IjsKICAgICAgICAgIH0gZWxzZSBpZiAoCiAgICAgICAgICAgIHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUgPT0gIk1UIENhcmUiCiAgICAgICAgICApIHsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5sb2dvID0gIi9pbWcvcm9ib21hdGVfbG9nby5wbmciOwogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LnN0eWxlID0KICAgICAgICAgICAgICAibWFyZ2luLXRvcDogNXB4O2hlaWdodDo1MHB4O3dpZHRoOjk1cHg7bWFyZ2luLWxlZnQ6IGF1dG87bWFyZ2luLXJpZ2h0OiBhdXRvOyI7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYm90X2ljb24gPSAiL2ltZy9Cb3RfaW1nLnBuZyI7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX3ZlcnRpY2FsX3NwYWNpbmcgPSAiNSI7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX2hvcml6b250YWxfc3BhY2luZyA9ICIzIjsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5ib3RfYmFja2dyb3VuZF9pbWFnZSA9ICIiOwogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmhlYWRlcl9iYWNrZ3JvdW5kID0gIiNmZmZmZmYiOwogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmJ1dHRvbl90aGVtZSA9ICIjMWRhYWUxIjsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5ib3RfdGhlbWUgPSAiIzI3MzY3OSI7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmxvZ28gPSAiL2ltZy9jZW5zZV9pbWFnZS5wbmciOwogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LnN0eWxlID0KICAgICAgICAgICAgICAibWFyZ2luLXRvcDogNXB4O2hlaWdodDozMHB4O3dpZHRoOjYwcHg7bWFyZ2luLWxlZnQ6IGF1dG87bWFyZ2luLXJpZ2h0OiBhdXRvOyI7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYm90X2ljb24gPSAiL2ltZy9Cb3RfaW1nLnBuZyI7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX3ZlcnRpY2FsX3NwYWNpbmcgPSAiNSI7CiAgICAgICAgICAgIHRoaXMuY2hhdF93aWRnZXQuYnV0dG9uX2hvcml6b250YWxfc3BhY2luZyA9ICIzIjsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5ib3RfYmFja2dyb3VuZF9pbWFnZSA9ICIiOwogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmhlYWRlcl9iYWNrZ3JvdW5kID0gIiNmZmZmZmYiOwogICAgICAgICAgICB0aGlzLmNoYXRfd2lkZ2V0LmJ1dHRvbl90aGVtZSA9ICIjMWRhYWUxIjsKICAgICAgICAgICAgdGhpcy5jaGF0X3dpZGdldC5ib3RfdGhlbWUgPSAiIzI3MzY3OSI7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLiRzZXNzaW9uLnNldCgiQ2hhdEJvdEltYWdlUGFyYW1ldGVycyIsIHRoaXMuY2hhdF93aWRnZXQpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAvLyB9IGVsc2UgewogICAgLy8gICB0aGlzLmNoYXRfd2lkZ2V0ID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNoYXRCb3RJbWFnZVBhcmFtZXRlcnMiKTsKICAgIC8vICAgdGhpcy5jaGF0X3dpZGdldC5zdHlsZSA9ICJtYXJnaW4tdG9wOiA1cHg7aGVpZ2h0OjMwcHg7d2lkdGg6YXV0byI7CiAgICAvLyB9CiAgICB0aGlzLmNoZWNrX2ludGVudF9jb3JlX21vZGVsX3N0YXR1cygpOwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICB0aGlzLmZyZWV6ZV9wb3J0YWwoKTsKICAgIH0sIDEwMDApOwogICAgICAKICAvLyAgIC8vIC8vIGNvbnNvbGUubG9nKCJjb21wYW55aWQiLCB0aGlzLmNvbXBhbnlpZCk7CiAgICAgdGhpcy4kcm9vdC4kb24oImNoYXRzY3JlZW5EaXNhYmxlZCIsIChkYXRhKSA9PnsKICAgICAgaWYoZGF0YT09PXRydWUpewogICAgICAgIHRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCA9IHRydWU7CiAgICAgIH0KICAgIH0pCiAgICAgIHRoaXMuc2hvdyA9IGZhbHNlOwogICAgICB0aGlzLiRyb290LiRvbigic2VuZF9tb2RlbF9zdGF0dXMiLCBkYXRhID0+ewogICAgICBpZiAoZGF0YSA9PSB0cnVlKXsKICAgICAgICB0aGlzLmNoZWNrX2ludGVudF9jb3JlX21vZGVsX3N0YXR1cygpOwogICAgICB9CiAgICB9KQogIH0sCiAgbWV0aG9kczogewogICAgY2hlY2tfaW50ZW50X2NvcmVfbW9kZWxfc3RhdHVzKCl7CiAgICAgIHZhciBtb2RlbF9zdGF0dXMgPSB0aGlzLiRzZXNzaW9uLmdldCgiTW9kZWxTdGF0dXMiKTsKICAgICAgaWYgKG1vZGVsX3N0YXR1cyA9PSAiTm8gRmFpbHVyZSIpewogICAgICB0aGlzLmludGVudF9jb3JlX21vZGVsX2lucHJvZ3Jlc3MgPSBmYWxzZTsKICAgICAgfQogICAgICBlbHNlIGlmKEJvb2xlYW4obW9kZWxfc3RhdHVzLmludGVudF9tb2RlbCkgPT09IHRydWUKICAgICAgICB8fCBCb29sZWFuKG1vZGVsX3N0YXR1cy5kaWFsb2d1ZV9tb2RlbCkgPT09IHRydWUpCiAgICAgICAgewogICAgICAgIGlmKG1vZGVsX3N0YXR1cy5pbnRlbnRfbW9kZWwgPT0gIkluUHJvZ3Jlc3MiIHx8IG1vZGVsX3N0YXR1cy5kaWFsb2d1ZV9tb2RlbCA9PSAiSW5Qcm9ncmVzcyIpewogICAgICAgICAgdGhpcy5pbnRlbnRfY29yZV9tb2RlbF9pbnByb2dyZXNzID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgICAgICAgIHRoaXMuaW50ZW50X2NvcmVfbW9kZWxfaW5wcm9ncmVzcyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICBlbHNlewogICAgICAgIHRoaXMuaW50ZW50X2NvcmVfbW9kZWxfaW5wcm9ncmVzcyA9IGZhbHNlOyAKICAgICAgfQogICAgfSwKICAgIHNob3dfbW9kZWxfcHJvZ3Jlc3MoaW5kZXgpewogICAgICBpZih0aGlzLmludGVudF9jb3JlX21vZGVsX2lucHJvZ3Jlc3MgPT0gdHJ1ZSl7CiAgICAgICAgIGlmIChpbmRleCA9PSAnc3R5bGUnKXsKICAgICAgICAgICAgcmV0dXJuICJjdXJzb3I6IG5vdC1hbGxvd2VkIjsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYoaW5kZXggPT0gJ3RpdGxlJyl7CiAgICAgICAgICAgICAgcmV0dXJuICJUcmFpbmluZyBpbiBQcm9ncmVzcyAoVGhpcyBwcm9jZXNzIG1pZ2h0IHRha2UgYXJvdW5kIDQ1IG1pbnMgdG8gZmluaXNoKSAiOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGVsc2V7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0sCiAgICBzaG93X3BvcHVwKCkgewogICAgICB0aGlzLnNob3cgPSBmYWxzZTsKICAgICAgdGhpcy5zdG9wID0gZmFsc2U7CiAgICB9LAogICAgc2VuZF9tZXNzYWdlKCkgewogICAgICB0aGlzLmNoYXQucHVzaCh7CiAgICAgICAgc2VuZGluZzogdHJ1ZSwKICAgICAgICBzZW50OiB0aGlzLnRvX3NlbmQsCiAgICAgICAgdGltZTogdGhpcy5nZW5lcmF0ZV90aW1lKCksCiAgICAgIH0pOwogICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIudHlwaW5nLWluZGljYXRvciIpLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICBpZiAodGhpcy50b19zZW5kICE9ICIiICYmIHRoaXMudG9fc2VuZCAhPSBudWxsKSB7CiAgICAgICAgYXhpb3MKICAgICAgICAgIC5wb3N0KAogICAgICAgICAgICBhcGlfY2FsbHMuY2hhdF91cmwoKSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIHF1ZXN0aW9uOiB0aGlzLnRvX3NlbmQsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9CiAgICAgICAgICApCiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgPT0gbnVsbCkgewogICAgICAgICAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubXNnID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgICAgdGhpcy51cGRhdGVfc2Nyb2xsYmFyKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5jaGF0LnB1c2goewogICAgICAgICAgICAgICAgcmVjZWl2aW5nOiB0cnVlLAogICAgICAgICAgICAgICAgdGltZTogdGhpcy5nZW5lcmF0ZV90aW1lKCksCiAgICAgICAgICAgICAgICAvLyByZWNlaXZlZDogcmVzcG9uc2UuZGF0YS5Nc2cuSW50ZW50LnJlcGxhY2UoCiAgICAgICAgICAgICAgICAvLyAgIHRoaXMuY29tcGFueWlkICsgIl8iLAogICAgICAgICAgICAgICAgLy8gICAiIgogICAgICAgICAgICAgICAgLy8gKSwKICAgICAgICAgICAgICAgIHJlY2VpdmVkOiByZXNwb25zZS5kYXRhLk1zZy5JbnRlbnQsCiAgICAgICAgICAgICAgICBFbnRpdGllczogcmVzcG9uc2UuZGF0YS5Nc2cuRW50aXRpZXMsCiAgICAgICAgICAgICAgICBjb25maWRlbmNlOiByZXNwb25zZS5kYXRhLk1zZy5JbnRlbnRfdmFsdWUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAvLyB0aGlzLmludGVudF92YWx1ZSA9IHJlc3BvbnNlLmRhdGEuTXNnLkludGVudC5yZXBsYWNlKAogICAgICAgICAgICAgIC8vICAgdGhpcy5jb21wYW55aWQgKyAiXyIsCiAgICAgICAgICAgICAgLy8gICAiIgogICAgICAgICAgICAgIC8vICk7ICAKICAgICAgICAgICAgICB0aGlzLmludGVudF92YWx1ZSA9IHJlc3BvbnNlLmRhdGEuTXNnLkludGVudDsKICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9zY3JvbGxiYXIoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICkgewogICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICB9CiAgICAgIHRoaXMudG9fc2VuZCA9ICIiOwogICAgfSwKICAgIGNsaWNrX3Byb21wdCh0eXBlKSB7CiAgICAgIHZhciBkaXZjbGlja3BvcHVwID0gZXZlbnQudGFyZ2V0LmlubmVyVGV4dDsKCiAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi50eXBpbmctaW5kaWNhdG9yIikuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgfSwgNTAwKTsKICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnR5cGluZy1pbmRpY2F0b3IiKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCiAgICAgIGlmICh0eXBlICE9ICJjb2xsYXBzaWJsZSIpIHsKICAgICAgICBheGlvcwogICAgICAgICAgLnBvc3QoYXBpX2NhbGxzLnByb21wdF91cmwoKSwgewogICAgICAgICAgICB1aWQ6ICJjZW5zZSIsCiAgICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgIGNoYXQ6IGV2ZW50LnRhcmdldC5pbm5lclRleHQsCiAgICAgICAgICAgIGxldmVsOiBldmVudC50YXJnZXQuYXR0cmlidXRlcy52YWx1ZS5ub2RlVmFsdWUsCiAgICAgICAgICB9KQogICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmNvbGxhcHNpYmxlID09IHRydWUpIHsKICAgICAgICAgICAgICB0aGlzLmNyZWF0ZV9jaGF0KHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMuY2hhdC5wdXNoKHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIHRoaXMubGV2ZWwgPSByZXNwb25zZS5kYXRhLmxldmVsOwogICAgICAgICAgICAgIHRoaXMudXBkYXRlX3Njcm9sbGJhcigpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09ICJjb2xsYXBzaWJsZSIpIHsKICAgICAgICBheGlvcwogICAgICAgICAgLnBvc3QoYXBpX2NhbGxzLnByb21wdF91cmwoKSwgewogICAgICAgICAgICB1aWQ6ICJjZW5zZSIsCiAgICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgIGNoYXQ6ICIiLAogICAgICAgICAgfSkKICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICB0aGlzLmNoYXQucHVzaChyZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgaW50ZW50X2ZpZWxkcyhpbmRleCkgewogICAgICB0aGlzLmluZGV4ID0gaW5kZXg7CiAgICAgIHRoaXMuaW50ZW50ID0gdGhpcy5jaGF0W2luZGV4XS5yZWNlaXZlZDsKICAgICAgaWYgKHRoaXMuY2hhdFtpbmRleF0ucmVjZWl2ZWQgPT0gIk5vX2ludGVudCIpIHsKICAgICAgICB0aGlzLmludGVudCA9ICIiOwogICAgICB9CiAgICB9LAogICAgZWRpdF9zdWJtaXQoKSB7CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGlmICh0aGlzLmludGVudCA9PSAiIiB8fCB0aGlzLmludGVudF92YWx1ZSA9PSAiIikgewogICAgICAgIHRvYXN0ci5lcnJvcigiUGxlYXNlIEVudGVyIHRoZSB2YWx1ZXMiKTsKICAgICAgfSBlbHNlIGlmICgKICAgICAgICAhdGhpcy4kc2Vzc2lvbi5oYXMoIkNvbXBhbnlJZCIpICYmCiAgICAgICAgdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUgPT0gIlN1cGVyQWRtaW4iCiAgICAgICkgewogICAgICAgIHRvYXN0ci53YXJuaW5nKCJQbGVhc2Ugc2VsZWN0IGEgY29tcGFueSBuYW1lIGZyb20gdGhlIGRyb3Bkb3duIik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYXhpb3MKICAgICAgICAgIC5wb3N0KAogICAgICAgICAgICBhcGlfY2FsbHMuZWRpdF9pbnRlbnRfdXJsKCksCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgICBjb21wYW55aWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICAgIHF1ZXN0aW9uOiB0aGlzLmNoYXRbdGhpcy5pbmRleCAtIDFdLnNlbnQsCiAgICAgICAgICAgICAgLy8gZWRpdGludGVudDogdGhpcy5jb21wYW55aWQgKyAiXyIgKyB0aGlzLmludGVudCwKICAgICAgICAgICAgICAvLyBpbnRlbnR2YWx1ZTogdGhpcy5jb21wYW55aWQgKyAiXyIgKyB0aGlzLmludGVudF92YWx1ZSwKICAgICAgICAgICAgICBlZGl0aW50ZW50OiB0aGlzLmludGVudCwKICAgICAgICAgICAgICBpbnRlbnR2YWx1ZTogdGhpcy5pbnRlbnRfdmFsdWUsCiAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfQogICAgICAgICAgKQogICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgIHRoaXMubmV3X3F1ZXN0aW9ucyArPSAxOwogICAgICAgICAgICB2YXIgY2hhdF9uYW1lID0gIkNoYXRNZXNzYWdlIiArIHRoaXMuY29tcGFueW5hbWU7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJJbnRlbnQgVXBkYXRlZCIpIHsKICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcygiWW91ciB2YWx1ZXMgaGF2ZSBiZWVuIHVwZGF0ZWQhIik7CiAgICAgICAgICAgICAgdGhpcy4kc2Vzc2lvbi5zZXQoY2hhdF9uYW1lLCB0aGlzLm1ldGEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY2hhdFt0aGlzLmluZGV4XS5yZWNlaXZlZCA9IHRoaXMuaW50ZW50OwogICAgICAgICAgICAkKCIjaW50ZW50bW9kYWwiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICkgewogICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJCgiI2ludGVudG1vZGFsIikubW9kYWwoImhpZGUiKTsKICAgICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgYnV0dG9uX2ZpbGwoKSB7CiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoInN2ZyIpLnN0eWxlLmZpbGwgPSAiIzI3MzY3OSI7CiAgICAgIGlmICh0aGlzLnRvX3NlbmQgPT0gIiIpIHsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJzdmciKS5zdHlsZS5maWxsID0gIiM4YThhOGE2MyI7CiAgICAgIH0KICAgIH0sCiAgICBjcmVhdGVfY2hhdChtZXNzYWdlKSB7CiAgICAgIHRoaXMuY2hhdC5wdXNoKG1lc3NhZ2UpOwogICAgfSwKICAgIHVwZGF0ZV9zY3JvbGxiYXIodHlwZSkgewogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIudHlwaW5nLWluZGljYXRvciIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgIH0sIDEwMDApOwogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuY2hhdC1ib2R5Iikuc2Nyb2xsVG9wID0KICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5jaGF0LWJvZHkiKS5zY3JvbGxIZWlnaHQgLQogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLmNoYXQtYm9keSIpLmxhc3RDaGlsZC5zY3JvbGxIZWlnaHQ7CiAgICAgIH0sIDEwMDApOwogICAgfSwKICAgIHRyYWluX2ludGVudF9tb2RlbCgpIHsKICAgICAgaWYoIXRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCl7CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGlmICh0aGlzLm5ld19xdWVzdGlvbnMgPCAxKSB7CiAgICAgICAgdG9hc3RyLmVycm9yKCJQbGVhc2UgZWRpdCBhdGxlYXN0IG9uZSBxdWVzdGlvbiB0byB0cmFpbiB0aGUgbW9kZWwiKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLm5ld19xdWVzdGlvbnMgPj0gMSkgewogICAgICAgIFN3YWwoewogICAgICAgICAgdGl0bGU6ICJBcmUgWW91IFN1cmU/IiwKICAgICAgICAgIHRleHQ6ICJZb3Ugd2FudCB0byBUcmFpbiBUaGUgTW9kZWw/IiwKICAgICAgICAgIHR5cGU6ICJxdWVzdGlvbiIsCiAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICJZZXMsIENvbmZpcm0hIiwKICAgICAgICAgIGFsbG93T3V0c2lkZUNsaWNrOiBmYWxzZSwKICAgICAgICAgIGFsbG93RXNjYXBlS2V5OiBmYWxzZSwKICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgICAgYXhpb3MKICAgICAgICAgICAgICAucG9zdCgKICAgICAgICAgICAgICAgIGFwaV9jYWxscy50cmFpbl9pbnRlbnRfbW9kZWwoKSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgICAgIGVwb2NoczogMTAwLAogICAgICAgICAgICAgICAgICB1cGRhdGVfbW9kZWw6IHRydWUsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHX0NPREUgPT09IDQwNDYpIHsKICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MocmVzcG9uc2UuZGF0YS5NU0cpOwogICAgICAgICAgICAgICAgICB0aGlzLndhbnRfc3RhdHVzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgid2FudF9tb2RlbF9zdGF0dXMiLHRoaXMud2FudF9zdGF0dXMpOwogICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrX2ludGVudF9jb3JlX21vZGVsX3N0YXR1cygpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmKHJlc3BvbnNlLmRhdGEuTVNHX0NPREUgPT09IDEwMzQpIHsKICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKHJlc3BvbnNlLmRhdGEuTVNHKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgfWVsc2V7CiAgICAgICAgdGhpcy5zaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWwoKTsKICAgICAgfQogICAgfSwKICB9LAp9Owo="},null]}