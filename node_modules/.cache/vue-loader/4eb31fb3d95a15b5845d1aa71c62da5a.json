{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Integrations/WebFrameworks.vue?vue&type=template&id=226c7dee&scoped=true&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/Integrations/WebFrameworks.vue","mtime":1663910265474},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}