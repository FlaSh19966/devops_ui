{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/WhatsappChat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/WhatsappChat.vue","mtime":1659334208864},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64://
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

import axios from "axios";
import api_calls from "@/portal/api_calls";
import { Socket, Presence } from "phoenix";
import moment from "moment";
import Swal from "sweetalert2";
import Multiselect from "vue-multiselect";
import VuePhoneNumberInput from "vue-phone-number-input";
import swal from "sweetalert2";
export default {
  name: "WhatsAppChat",
  components: {
    Multiselect,
    VuePhoneNumberInput
  },
  data() {
    return {
      show_spinner: false,
      history: [],
      contact_list: [],
      phoneno: null,
      customer_name: "",
      chat_details: [],
      search_value: "",
      company_id: this.$session.get("UserInformation").company_id,
      company_name: this.$session.get("UserInformation").company_name,
      session_token: this.$session.get("UserInformation").tokens,
      initial_message_load: false,
      is_profile_setup: false,
      message_pagination: {
        is_scroll_up: false,
        per_page: 5,
        page_no: 1,
        total_records: 10,
        page_record_fetched: []
      },
      is_paginated_call: false,
      default_whatsapp_status: "Hey there! I am using whatsapp",
      edit_status: false,
      scroll_spinner_chat: false,
      show_send_message: false,
      is_message_sending_enabled: false,
      is_show_message_disabled: true,
      whatsapp_profile: "",
      edit_email: false,
      edit_address: false,
      edit_description: false,
      edit_website: false,
      email_address: "",
      business_address: "",
      description: "",
      website_url: "",
      whatsapp_phone_number: null,
      channel: null,
      chat_socket: null,
      support_channel: null,
      message_to_send: null,
      whatsapp_status: "",
      index_update: null,
      second_website: false,
      selected_files: "",
      mouse_hover_text: false,
      vertical_types: [
        "Automotive",
        "Beauty",
        "Spa and Salon",
        "Clothing and Apparel",
        "Education",
        "Entertainment",
        "Event Planning and Service",
        "Finance and Banking",
        "Food and Grocery",
        "Public Service",
        "Hotel and Lodging",
        "Medical and Health",
        "Non-profit",
        "Professional Services",
        "Shopping and Retail",
        "Travel and Transportation",
        "Restaurant",
        "Other"
      ],
      current_contact_number: null,
      is_contact_list: false,
      current_contact_index: null,
      search_in_contact_list: "",
      all_contact_list: [],
      start_new_conv_data: {
        start_new_conv: false,
        is_message_sending_enabled: false
      },
      all_contact_pagination: {
        per_page: 10,
        page_no: 1,
        total_records: 10
      },
      send_attachment_detail: {
        media_file_name: null,
        media_file: null,
        show_preview: false,
        media_content_type: null,
        media_type: null,
        send_media: true,
        document_content: null,
        media_caption: null
      },
      current_fullscreen_image_src: null,
      add_new_contact: {
        phone_number: null,
        is_add_contact: true,
        contact_name: null,
        formattedNumber: null
      },
      add_new_contact_formatted_phone_number: null,
      file_extensions: {
        all_allowed_file_extensions: [
          "image/png",
          "image/jpeg",
          "application/pdf",
          "text/plain",
          "application/vnd.ms-excel",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-powerpoint",
          "application/msword",
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
          "text/csv"
        ],
        image_file_extensions: ["image/png", "image/jpeg"],
        document_file_extensions: [
          "application/pdf",
          "text/plain",
          "application/vnd.ms-excel",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-powerpoint",
          "application/msword",
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
          "text/csv"
        ]
      },
      whatsapp_templates: {
        templates_list: [],
        pagination_data: {
          per_page: 10,
          page_no: 1,
          total_records: 10
        },
        selected_template: null,
        preview_template_data: null
      },
      contact_csv: {
        file_label: "Choose File",
        file_content: null,
        file_selected: false
      },
      whatsapp_format_dict: {
        "*": ["<strong>", "</strong>"],
        _: ["<i>", "</i>"],
        "~": ["<s>", "</s>"],
        "```": ["<tt>", "</tt>"]
      },
      whatsapp_formating_list: ["*", "_", "~", "```"]
    };
  },
  computed: {
    total_pages_loaded() {
      if (
        this.message_pagination.page_no * this.message_pagination.per_page >=
        this.message_pagination.total_records
      ) {
        return true;
      }
      return false;
    },
    message_text_box_placeholder() {
      return "Send a message to user";
    },
    total_contact_loaded() {
      if (
        this.all_contact_pagination.page_no *
          this.all_contact_pagination.per_page >=
        this.all_contact_pagination.total_records
      ) {
        return true;
      }
      return false;
    }
  },
  mounted() {
    this.get_contact_list(true);
    this.get_profile_details();
    const vm = this;
    $(window).bind("mousewheel", function(event) {
      if (event.originalEvent.wheelDelta >= 0) {
        vm.message_pagination.is_scroll_up = true;
      } else {
        vm.message_pagination.is_scroll_up = false;
      }
    });
    // var lastScrollTop = 0;
    // document.addEventListener(
    //   "scroll",
    //   function (ev) {
    //     if (ev.target.id === "scrolling-div-whatsapp") {
    //       console.log(ev)
    //       var st = window.pageYOffset || document.documentElement.scrollTop; // Credits: "https://github.com/qeremy/so/blob/master/so.dom.js#L426"
    //       if (st > lastScrollTop){
    //         vm.message_pagination.is_scroll_up = false;
    //       } else {
    //         console.log("Scrolling Up")
    //         vm.message_pagination.is_scroll_up = true;
    //       }
    //       lastScrollTop = st <= 0 ? 0 : st;

    //       // vm.scrollPosition = ev.target["scrollTop"];
    //     }
    //   },
    //   true
    // );
    $("#showImageModal").on("hidden.bs.modal", function(e) {
      vm.current_fullscreen_image_src = null;
    });
    $("#importContactCSVModal").on("hidden.bs.modal", function(e) {
      vm.empty_upload_csv_contacts();
    });
    $('[data-toggle="popover"]').popover({
      html: true,
      title: "Legend for Contacts",
      content: `<span style='color:#25af02;font-size: larger;'>&#x25CF;</span> <span>  This contact is on whatsapp</span> <br>
                <span style='color:#ff4747;font-size: larger;'>&#x25CF;</span> <span> This contact is not on whatsapp</span> <br>
                <span style='color:#ffc347;font-size: larger;'>&#x25CF;</span> <span> We don't know yet whether this contact is on whatsapp</span>`
    });
    axios.post(api_calls.initialize_whatsapp_topic(), 
    {
      company_id: this.company_id,
      whatsapp_phone_number: "100",
      test: btoa("test_paramater")
    }).then((response) => {
      // console.log(response)
      // this.chat_group_name = response.data.chat_group_name;
      // this.live_chat_token = response.data.token;
      // this.live_chat_on = true;
      this.chat_socket = new Socket(
        process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT,
        {
          params: {
            whatsapp: "true",
            elixir_token : response.data.elixir_token,
            token: this.session_token,
            username: this.$session.get("UserInformation").email
          },
        }
      );
      this.chat_socket.connect();
      this.channel = this.chat_socket.channel(
        "whatsapp:" + this.company_id
      );
      this.channel.join();
      this.channel.on("new_whatsapp_message", (res) => {
        if(res.company_id === this.company_id){
          // console.log(res)
          // if(!res.is_bot_conversation_realtime){
            // console.log("user bot conversation")
            let contact_index = this.contact_list.findIndex((item) => {return item.whatsapp_phone_number === res.whatsapp_phone_number});
            
            if(!res.is_bot_conversation_realtime){
            // let latest_message;
            // if(res.is_bot_conversation_realtime){
            //   let is_text =  res.BOTResponse.find((item) => item.text != null),
            //   is_product = res.BOTResponse.find((item) => (item.text == null && item.products));
            //   if(Boolean(is_text)) {
            //     latest_message = is_text.text;
            //   } else if(Boolean(is_product)) {
            //     latest_message = "Product bot response"
            //   } else {
            //     latest_message = null
            //   }
            // } else {
            // }
            // console.log(res, "else", contact_index)
              if (contact_index != -1){
                this.contact_list[contact_index].last_bot_response.text = res.whatsapp_message;
                this.contact_list[contact_index].is_new_notification = true;
                this.contact_list[contact_index].new_message_count = 1;
                this.contact_list = this.array_move(this.contact_list, contact_index, 0);
                // this.current_contact_index
              }
              if(this.check_current_number(res)){ 
                let current_timestamp = new Date(),
                current_date = moment().format('YYYY-MM-DD');
                let bot_response_date = current_date;
                if(this.history.map(item => item.bot_response_date == bot_response_date).length > 0){
                  bot_response_date = "";
                }
                this.history.push(
                {
                  "BOTResponse": [],
                  "UserQuery": res.whatsapp_message,
                  "bot_response_date": bot_response_date, 
                  "bot_response_time": current_timestamp, 
                  "user_query_date": current_date,
                  "user_query_time": current_timestamp,
                  "UserQuery_DateTime": current_timestamp.toISOString()
                }
              );
              }
            } else {
              let latest_message,
              is_text =  res.BOTResponse.find((item) => item.text != null),
              is_product = res.BOTResponse.find((item) => (item.text == null && item.products));
              if(Boolean(is_text)) {
                latest_message = is_text.text;
              } else if(Boolean(is_product)) {
                latest_message = "Product bot response"
              } else {
                latest_message = null
              }
              if (contact_index != -1){
                this.contact_list[contact_index].last_bot_response.text = latest_message;
                this.contact_list[contact_index].is_new_notification = true;
                this.contact_list[contact_index].new_message_count = 1;
                this.contact_list = this.array_move(this.contact_list, contact_index, 0);
                // this.current_contact_index
              };
              if(this.check_current_number(res)){ 
                let current_timestamp = new Date(),
                current_date = moment().format('YYYY-MM-DD');
                let bot_response_date = current_date;
                if(this.history.map(item => item.bot_response_date == bot_response_date).length > 0){
                  bot_response_date = "";
                }
                res["bot_response_date"] = bot_response_date; 
                res["bot_response_time"] = current_timestamp; 
                res["user_query_date"] = current_date;
                res["user_query_time"] = current_timestamp;
                this.history.push(res);
              }
            }
            this.scroll_down();
          // } else {
          //   console.log("realtime conversation")
          // }
        }
      })
    })
  },
  watch: {
    search_value(newValue) {
      if (newValue != "" && newValue.length > 2) {
        axios
          .post(
            api_calls.whatsapp_chat(),
            {
              company_id: this.company_id,
              company_name: this.company_name,
              is_search: true,
              search_string: newValue,
              is_get_contacts: true
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`
              }
            }
          )
          .then(response => {
            if (
              response.data == "No contacts found" ||
              response.data == "Data not found"
            ) {
              this.contact_list = [];
            } else {
              this.contact_list = response.data.contacts;
            }
          })
          .catch(e => {
            this.show_spinner = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      } else {
        this.get_contact_list(false);
      }
    },
    search_in_contact_list(newValue) {
      if (newValue != "" && newValue.length > 2) {
        axios
          .post(
            api_calls.whatsapp_chat(),
            {
              company_id: this.company_id,
              company_name: this.company_name,
              is_search: true,
              search_string: newValue,
              is_get_all_contacts: true
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`
              }
            }
          )
          .then(response => {
            // console.log(response);
            if (response.data == "No contacts found") {
              this.all_contact_list = [];
            } else {
              this.all_contact_list = response.data.contacts;
            }
          })
          .catch(e => {
            this.show_spinner = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      } else {
        this.get_all_contact_list();
      }
    },
    "whatsapp_templates.selected_template": {
      handler: function(newVal, oldVal) {
        if (Boolean(newVal)) {
          var current_template = this.whatsapp_templates.templates_list.find(
            item => item.template_id == newVal
          );
          var template_id = newVal;
          var variable_dict = current_template.variable_dict;
          var is_parent_template = false;
          axios
            .post(
              api_calls.whatsapp_template(),
              {
                company_id: this.company_id,
                company_name: this.company_name,
                is_notification: false,
                is_preview: true,
                is_parent_template: is_parent_template,
                template_id: template_id,
                variable_dict: variable_dict
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`
                }
              }
            )
            .then(response => {
              this.spinnerOn = false;
              if (response.data.status == "Success") {
                this.whatsapp_templates.preview_template_data =
                  response.data.body;
              }
            })
            .catch(e => {
              console.log(e);
            });
        }
      },
      deep: true
    }
  },
  methods: {
    empty_variable() {
      (this.history = []), (this.phoneno = null);
      this.customer_name = "";
      this.chat_details = [];
      this.message_pagination.per_page = 5;
      this.message_pagination.page_no = 1;
      this.message_pagination.total_records = 10;
      this.message_pagination.page_record_fetched = [];
      this.message_to_send = null;
      this.current_contact_index = null;
      this.all_contact_pagination.per_page = 10;
      this.all_contact_pagination.page_no = 1;
      this.all_contact_pagination.total_records = 10;
      this.send_attachment_detail = {
        media_file_name: null,
        media_file: null,
        show_preview: false,
        media_content_type: null,
        media_type: null,
        send_media: true,
        document_content: null,
        media_caption: null
      };
    },
    get_history_data(whatsapp_no, user_name, contact_index, contact) {
      this.empty_variable();
      this.show_spinner = true;
      this.customer_name = this.get_contact_display_name(contact);
      // this.customer_name = user_name;
      this.current_contact_number = whatsapp_no;
      this.show_send_message = false;
      this.current_contact_index = contact_index;
      this.contact_list[contact_index].is_new_notification = false;
      this.start_new_conv_data.start_new_conv = false;
      axios
        .post(
          api_calls.whatsapp_chat(),
          {
            company_id: this.company_id,
            company_name: this.company_name,
            get_by_whatsapp_phone_number: true,
            whatsapp_phone_number: whatsapp_no,
            per_page: this.message_pagination.per_page,
            page_no: 1
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          this.show_send_message = true;
          this.show_spinner = false;
          if (response.data != null) {
            if (response.data == "Data not found") {
              this.start_new_conv_data.start_new_conv = true;
              this.new_conv_contact_data = contact;
            } else {
              this.history = this.format_history_response(
                response.data.chat_history
              );
              this.phoneno = response.data.whatsapp_phone_number || whatsapp_no;
              // console.log(this.phoneno, this.contact_list);
              let contact_list_index = this.contact_list.findIndex(
                item => item.whatsapp_phone_number == this.phoneno
              );
              if (contact_list_index >= 1) {
                // this.contact_list = this.array_move(this.contact_list, contact_list_index, 0);
                this.current_contact_index = contact_list_index;
                this.current_contact_number = this.phoneno;
                // this.contact_list[contact_list_index].is_message_sending_enabled = false;
              }
              this.message_pagination.total_records =
                response.data.total_chat_history;
              setTimeout(() => {
                this.scroll_down();
                this.initial_message_load = true;
                this.message_pagination.is_scroll_up = true;
                this.chatScrollMessages(true);
              }, 400);
            }
          }
        })
        .catch(e => {
          this.show_spinner = false;
          console.log(e);
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    get_contact_list(enable_bot_responses) {
      this.show_spinner = true;
      axios
        .post(
          api_calls.whatsapp_chat(),
          {
            is_get_contacts: true,
            company_id: this.company_id,
            company_name: this.company_name,
            enable_bot_response_all: enable_bot_responses
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          if (
            response.data == "No contacts found" ||
            response.data == "Data not found"
          ) {
            this.contact_list = [];
          } else {
            this.contact_list = response.data.contacts;
          }
          this.show_spinner = false;
          // this.contact_list = response.data.contacts;
        })
        .catch(e => {
          this.show_spinner = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    scroll_down() {
      var container = document.querySelector(".message-table-scroll");
      // console.log(container);
      if (Boolean(container)) {
        setTimeout(() => {
          container.scrollTop = container.scrollHeight;
        }, 100);
        // this.initial_message_load = true;
      }
    },
    scroll_down_effect() {
      var container = document.querySelector(".message-table-scroll");
      // console.log(container);
      if (Boolean(container)) {
        setTimeout(() => {
          container.scrollTop = 10;
        }, 0);
        // this.initial_message_load = true;
      }
    },
    product_variation(products_list) {
      let new_product_list = [];
      for (let i in products_list) {
        let components = products_list[i].template.components;
        let temp = {};
        try {
        
        for (let j in components) {
          if (j == 0) {
            temp["img_url"] = components[j].parameters[0].image.link;
          }
          if (j == 1) {

            temp["title"] = components[j].parameters[0].text;
            if(components[j].parameters.length == 2) {
              temp["price"] = components[j].parameters[1].text;
              temp["variation"] = components[j].parameters[1].text;
            } 
            if(components[j].parameters.length == 3) { 
              temp["variation"] = components[j].parameters[1].text; 
              temp["price"] = components[j].parameters[2].text
            }
            // components[j].parameters.length == 3 ? temp["variation"] = components[j].parameters[1].text; temp["price"] = components[j].parameters[1].text: null;
            
          }
          if (j == 2) {
            temp["url"] = components[j].parameters[0].text;
            temp["type"] = components[j].parameters.type;
          }
        }
        }
        catch (error) {
          debugger
        }
        new_product_list.push(temp);
      }
      return new_product_list;
    },
    check_image_type(image) {
      if (typeof image == "string") {
        return image;
      } else {
        if (image != null) {
          return image.src;
        } else {
          return "";
        }
      }
    },
    trim_card_description(text) {
      if (Boolean(text)) {
        if (text.length > 100) {
          let string_text = text.substring(0, 80) + "...";
          return string_text;
        }
        return text;
      }
    },
    latest_bot_text(text) {
      if (!Boolean(text)) {
        return "Custom bot Response";
      }
      if (text.length > 35) {
        return `${text.substring(0, 35)}...`;
      }
      return text;
    },
    search_contact_list() {
      if (this.search_value == "") {
        return this.contact_list;
      } else {
        let new_val = this.search_value;
        if (new_val != this.search_value) {
          // console.log(this.search_value);
          axios
            .post(
              api_calls.whatsapp_chat(),
              {
                company_id: this.company_id,
                company_name: this.company_name,
                is_get_all_contacts: true,
                is_search: true,
                search_string: this.search_value
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`
                }
              }
            )
            .then(response => {
              this.show_spinner = false;
              this.contact_list = response.data.contacts;
            })
            .catch(e => {
              this.show_spinner = false;
              if (
                e.response.status === 410 ||
                e.response.status === 440 ||
                e.response.status === 409
              ) {
                this.$root.$emit("Session_Expired", e.response.data);
              }
            });
        }
        return this.contact_list;
      }
    },
    chatScrollMessages(scroll_down) {
      // console.log(this.initial_message_load);
      if (this.initial_message_load === true) {
        let container_div_scroll_top = document.getElementsByClassName(
          "message-table-scroll"
        )[0].scrollTop;
        if (
          container_div_scroll_top < 50 &&
          this.message_pagination.is_scroll_up === true &&
          !this.is_paginated_call &&
          !this.total_pages_loaded
        ) {
          // console.log("api call paginated")
          this.is_paginated_call = true;
          this.scroll_spinner_chat = true;
          axios
            .post(
              api_calls.whatsapp_chat(),
              {
                company_id: this.company_id,
                company_name: this.company_name,
                get_by_whatsapp_phone_number: true,
                whatsapp_phone_number: this.current_contact_number,
                per_page: this.message_pagination.per_page,
                page_no: this.message_pagination.page_no + 1
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`
                }
              }
            )
            .then(response => {
              // console.log(response.data);
              this.scroll_spinner_chat = false;
              this.is_paginated_call = false;
              if (
                !this.message_pagination.page_record_fetched.includes(
                  response.data.page_no
                )
              ) {
                let new_data = this.format_history_response(
                  response.data.chat_history
                );
                this.history = new_data.concat(this.history);
                this.message_pagination.page_record_fetched.push(
                  response.data.page_no
                );
                // console.log(this.history);
                this.message_pagination.page_no += 1;
                if (scroll_down == true) {
                  this.scroll_down();
                } else {
                  // this.scroll_down_effect()
                }
              }
            })
            .catch(e => {
              console.log(e);
            });
        }
      }
    },
    show_profile_setup() {
      this.is_profile_setup = !this.is_profile_setup;
      this.get_profile_details();
    },
    show_all_contacts() {
      this.is_profile_setup = !this.is_profile_setup;
      this.is_contact_list = !this.is_contact_list;
      this.get_all_contact_list();
    },
    format_history_response(response) {
      let con_date = "";
      for (let i in response) {
        if (i == 0) {
          con_date = response[i].bot_response_date;
        }
        if (con_date == response[i].bot_response_date && i != 0) {
          response[i].bot_response_date = "";
        } else {
          con_date = response[i].bot_response_date;
        }
      }
      return response;
    },
    send_message_to_user() {
      if (
        Boolean(this.message_to_send) === false &&
        this.send_attachment_detail.show_preview == false
      )
        return false;
      let current_timestamp = new Date(),
        current_date = moment().format("YYYY-MM-DD");
      if (this.send_attachment_detail.show_preview == true) {
        this.send_attachment_detail.company_id = this.company_id;
        this.send_attachment_detail.company_name = this.company_name;
        this.send_attachment_detail.whatsapp_contact_number = this.current_contact_number;
        this.send_attachment_detail.document_content = null;
        this.send_attachment_detail.media_caption = this.message_to_send;
        this.show_spinner = true;
        axios
          .post(api_calls.whatsapp_chat(), this.send_attachment_detail, {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          })
          .then(response => {
            this.show_spinner = false;
            if (response.data.message === "Whatsapp media sent successfully") {
              let bot_response = [];
              if (
                this.file_extensions.image_file_extensions.includes(
                  this.send_attachment_detail.media_content_type
                )
              ) {
                bot_response = [
                  {
                    text: null,
                    recipient_id: this.current_contact_number,
                    image: {
                      caption: this.message_to_send,
                      link: response.data.file_link
                    }
                  }
                ];
              }
              if (
                this.file_extensions.document_file_extensions.includes(
                  this.send_attachment_detail.media_content_type
                )
              ) {
                bot_response = [
                  {
                    text: null,
                    recipient_id: this.current_contact_number,
                    image: `https://storage.cense.ai/${this.company_id}/WhatsappMedia/${this.send_attachment_detail.media_file_name}`
                  }
                ];
              }
              let bot_response_date = current_date;
              if (
                this.history.map(
                  item => item.bot_response_date == bot_response_date
                ).length > 0
              ) {
                bot_response_date = "";
              }
              this.history.push({
                BOTResponse: bot_response,
                user_query_time: current_timestamp,
                UserQuery: "",
                bot_response_date: bot_response_date,
                bot_response_time: current_timestamp,
                user_query_date: current_date,
                Chat_Datetime: current_timestamp.toISOString()
              });
              this.scroll_down();
              this.contact_list[
                this.current_contact_index
              ].last_bot_response.text = this.message_to_send;
              this.contact_list = this.array_move(
                this.contact_list,
                this.current_contact_index,
                0
              );
              this.message_to_send = null;
              this.current_contact_index = 0;
              this.send_attachment_detail.show_preview = false;
            } else if (response.data.message === "Tier specific user limit reached") {
              Swal({
                title: this.tlt('tier_specific_user_limit_reached'),
                text: this.tlt('tier_specific_user_limit_reached_msg'),
                type: "warning",
                showConfirmButton: false,
                timer: 4000,
              });
            } else if(response.data.message === "Whatsapp media send failure") {
              swal({
                title: "Some Error Occurred",
                text: "Please try again",
                showCancelButton: false,
                type: "error"
              });
            } else if (
              response.data.message === "Message Sending Limit Reached"
            ) {
              swal({
                type: "warning",
                text: "Message Sending Limit Reached",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                confirmButtonText: this.tlt("email_temp_swal_upgrade_now_msg"),
                cancelButtonText: this.tlt("email_temp_swal_upgrade_later_msg"),
                cancelButtonColor: "#d33"
              }).then(result => {
                if (result.value == true) {
                  this.$router.push({
                    name: "Settings",
                    params: { Subscription: true }
                  });
                }
              });
            }
            // console.log(response);
            return;
          })
          .catch(e => {
            console.log(e);
            return;
          });
        return false;
      }
      this.show_spinner = true;
      axios
        .post(
          api_calls.whatsapp_chat(),
          {
            company_id: this.company_id,
            company_name: this.company_name,
            send_message: true,
            text: this.message_to_send,
            whatsapp_contact_number: this.current_contact_number
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          this.show_spinner = false;
          if (response.data.message === "Whatsapp message sent successfully") {
            if (this.start_new_conv_data.start_new_conv) {
              this.current_contact_index = 0;
              this.new_conv_contact_data.chat_datetime = current_timestamp.toISOString();
              this.new_conv_contact_data.is_message_sending_enabled = true;
              this.new_conv_contact_data.last_bot_response = {
                text: this.message_to_send,
                chat_datetime: current_timestamp.toISOString(),
                date: current_date,
                time: `${current_timestamp.getUTCHours()}:${current_timestamp.getUTCMinutes()}`
              };
              this.contact_list.unshift(this.new_conv_contact_data);
              this.start_new_conv_data.start_new_conv = false;
            }
            let bot_response_date = current_date;
            if (
              this.history.map(
                item => item.bot_response_date == bot_response_date
              ).length > 0
            ) {
              bot_response_date = "";
            }
            this.history.push({
              BOTResponse: [
                {
                  text: this.message_to_send,
                  recipient_id: this.current_contact_number
                }
              ],
              "user_query_time":current_timestamp,
              "UserQuery": "",
              "bot_response_date": bot_response_date, 
              "bot_response_time": current_timestamp, 
              "user_query_date": current_date,
              "Chat_Datetime": current_timestamp.toISOString()
            }
          );
          this.scroll_down();
          this.contact_list[this.current_contact_index].last_bot_response.text = this.message_to_send;
          this.contact_list = this.array_move(this.contact_list, this.current_contact_index, 0);
          this.message_to_send = null;
          this.current_contact_index = 0;
        } else if ( response.data.message == "Tier specific user limit reached") {
            Swal({
              title: this.tlt('tier_specific_user_limit_reached'),
              text: this.tlt('tier_specific_user_limit_reached_msg'),
              type: "warning",
              showConfirmButton: false,
              timer: 4000,
            });
        } else if (response.data.message === "Message Sending Limit Reached") {
            Swal({
              type: "warning",
              text: "Message Sending Limit Reached",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              confirmButtonText: this.tlt("email_temp_swal_upgrade_now_msg"),
              cancelButtonText: this.tlt("email_temp_swal_upgrade_later_msg"),
              cancelButtonColor: "#d33"
            }).then(result => {
              if (result.value == true) {
                this.$router.push({
                  name: "Settings",
                  params: { Subscription: true }
                });
              }
            });
          }
        })
        .catch(e => {
          this.show_spinner = false;
          swal({
            title: "Oops",
            text: "Some Error Occurred",
            showCancelButton: false
          });
        });
    },
    edit_website_value(index) {
      this.index_update = index;
      this.edit_website = true;
    },
    get_profile_details() {
      this.show_spinner = true;
      this.edit_email = false;
      this.edit_address = false;
      this.edit_description = false;
      this.edit_website = false;
      this.edit_status = false;
      this.index_update = null;
      axios
        .post(
          api_calls.whatsapp_profile(),
          {
            company_id: this.company_id,
            company_name: this.company_name,
            is_get: true
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          this.show_spinner = false;
          this.whatsapp_profile = response.data.whatsapp_profile;
        })
        .catch(e => {
          this.show_spinner = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    update_profile_details() {
      this.edit_email = false;
      this.edit_address = false;
      this.edit_description = false;
      this.edit_website = false;
      this.edit_status = false;
      this.index_update = null;
      if (this.whatsapp_profile.websites.length == 2) {
        this.second_website = true;
      }
      this.show_spinner = true;
      axios
        .post(
          api_calls.whatsapp_profile(),
          {
            company_id: this.company_id,
            company_name: this.company_name,
            is_edit: true,
            whatsapp_profile: this.whatsapp_profile
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          this.show_spinner = false;
          let resp = response.data.update_response;
          if (resp == "edit successful") {
            this.get_profile_details();
          } else {
            Swal({
              text: "Please entre valid data",
              toast: true,
              position: "top-end",
              type: "error",
              showConfirmButton: false,
              timer: 2000
            });
            this.get_profile_details();
          }
        })
        .catch(e => {
          console.log(e);
          this.show_spinner = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    update_profile_image(e) {
      this.selected_files = e.target.files[0];
      if (
        this.selected_files.type == "image/png" ||
        this.selected_files.type == "image/jpg" ||
        this.selected_files.type == "image/jpeg"
      ) {
        if (this.selected_files.size > 5097152) {
          Swal({
            text: "Upload image with size should be less than 5MB",
            toast: true,
            position: "top-end",
            type: "error",
            showConfirmButton: false,
            timer: 2000
          });
          this.selected_files = "";
          return;
        }
        let file_to_upload = this.selected_files;
        var profile_img = {
          company_id: this.company_id,
          company_name: this.company_name,
          photo: file_to_upload,
          wa_phone_number: this.whatsapp_profile.whatsapp_phone_number
        };
        var json = JSON.stringify(profile_img);
        var blob = new Blob([json], {
          type: "application/json"
        });
        const fd = new FormData();
        fd.append("photo", this.selected_files);
        fd.append("json", blob);
        this.show_spinner = true;
        axios
          .post(api_calls.whatsapp_profile(), fd, {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          })
          .then(response => {
            this.show_spinner = false;
            let resp = response.data;
            if (resp == "Photo updating successful") {
              this.get_profile_details();
          } else if(resp == "Photo updating unsuccessful"){
            Swal({
              text: "Some error occurred, please try again!",
              type: "error",
              showConfirmButton: true,
              showCancelButton: false
            });
          } else if(resp == "Please upload JPG image of resolution greater than 192 pixel * 192 pixel"){
            Swal({
              text: "Please upload JPG image of resolution greater than 192 pixel * 192 pixel",
              type: "error",
              showConfirmButton: true,
              showCancelButton: false
            });
          } else if (resp == "Cannot update photo yet"){
              Swal({
                text: "Some error occurred, please try again!",
                type: "error",
                showConfirmButton: true,
                showCancelButton: false
              });
            } else if (resp == "Cannot update photo yet") {
              Swal({
                text:
                  "You cannot update the profile picture yet, please try again later",
                type: "warning",
                showConfirmButton: true,
                showCancelButton: false
              });
              this.get_profile_details();
            } else {
              this.get_profile_details();
            }
          })
          .catch(e => {
            console.log(e);
            this.show_spinner = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      } else {
        Swal({
          text: "Upload image with specific formate(jpg jpeg png)",
          toast: true,
          position: "top-end",
          type: "error",
          showConfirmButton: false,
          timer: 2000
        });
      }
    },
    remove_profile_image() {
      this.show_spinner = true;
      axios
        .post(
          api_calls.whatsapp_profile(),
          {
            company_id: this.company_id,
            company_name: this.company_name,
            is_remove_photo: true
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          this.show_spinner = false;
          if (response.data === "Photo removed") {
            this.get_profile_details();
          }
          if (response.data === "Photo removal unsuccessful") {
            this.get_profile_details();
          }
        })
        .catch(e => {
          this.show_spinner = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    connect_elixir_socket() {
      axios
        .post(api_calls.initialize_whatsapp_topic(), {
          company_id: this.company_id,
          whatsapp_phone_number: "100"
        })
        .then(response => {
          // console.log(response)
          // this.chat_group_name = response.data.chat_group_name;
          // this.live_chat_token = response.data.token;
          // this.live_chat_on = true;
          this.chat_socket = new Socket(
            process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT,
            {
              params: {
                whatsapp: "true",
                token: response.data.token
              }
            }
          );
          this.chat_socket.connect();
          this.channel = this.chat_socket.channel(
            "whatsapp:" + response.data.whatsapp_topic
          );
          this.channel.join();
          this.channel.on("new_whatsapp_message", res => {
            // console.log("new_whatsapp_message", res)
          });
        });
    },
    enable_sending_messages_for_user() {
      axios
        .post(
          api_calls.whatsapp_chat(),
          {
            update_bot_response: true,
            whatsapp_contact_number: this.current_contact_number,
            bot_response: false,
            company_name: this.company_name,
            company_id: this.company_id
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          // console.log(response);
          if (response.data.status === "Success") {
            if (this.start_new_conv_data.start_new_conv === true) {
              this.start_new_conv_data.is_message_sending_enabled = true;
            } else {
              this.contact_list[
                this.current_contact_index
              ].is_message_sending_enabled = true;
              this.$set(
                this.contact_list,
                this.current_contact_index,
                this.contact_list[this.current_contact_index]
              );
            }
            this.$nextTick(() => {
              // this.$refs["message_sending_textbox"].focus();
            });
          } else if (response.data.status === "Failure") {
          } else if (response.data.status === "Error") {
          } else if (
            response.data.message === "Message Sending Limit Reached"
          ) {
            Swal({
              type: "warning",
              text: "Message Sending Limit Reached",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              confirmButtonText: this.tlt("email_temp_swal_upgrade_now_msg"),
              cancelButtonText: this.tlt("email_temp_swal_upgrade_later_msg"),
              cancelButtonColor: "#d33"
            }).then(result => {
              if (result.value == true) {
                this.$router.push({
                  name: "Settings",
                  params: { Subscription: true }
                });
              }
            });
          }
        })
        .catch(e => {
          console.log(e);
        });
    },
    expand_textbox(id, key) {
      if (id != "#business_address") {
        this.callsearch();
      } else {
        setTimeout(() => {
          var textarea = document.querySelector(id);
          textarea.addEventListener("keydown", e => {
            let scroll_height = e.target.scrollHeight;
            textarea.style.height = `${scroll_height}px`;
          });
        }, 10);
      }
    },
    callsearch() {
      if (event.keyCode === 13 && !event.shiftKey) {
        this.update_profile_details();
      }
    },
    check_current_number(res) {
      return res.whatsapp_phone_number === this.current_contact_number
        ? true
        : false;
    },
    format_user_query_date(user_query_date, index) {
      // console.log(Object.keys(this.history[index-1]))
      if (this.history[index - 1].user_query_date == user_query_date) {
        return "";
      }
      return user_query_date;
    },
    get_all_contact_list() {
      this.show_spinner = true;
      axios
        .post(
          api_calls.whatsapp_chat(),
          {
            is_get_all_contacts: true,
            company_id: this.company_id,
            company_name: this.company_name
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          this.show_spinner = false;
          this.all_contact_list = response.data.contacts;
          this.all_contact_pagination.total_records =
            response.data.total_contacts;
        })
        .catch(e => {
          this.show_spinner = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    new_contact_list() {
      let scroller = document.getElementsByClassName("all-contact-list")[0]
        .scrollTop;
      if (
        scroller > 120 &&
        !this.is_paginated_call &&
        !this.total_contact_loaded
      ) {
        this.is_paginated_call = true;
        this.scroll_spinner_chat = true;
        axios
          .post(
            api_calls.whatsapp_chat(),
            {
              is_get_all_contacts: true,
              company_id: this.company_id,
              company_name: this.company_name,
              per_page: this.all_contact_pagination.per_page,
              page_no: this.all_contact_pagination.page_no + 1
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`
              }
            }
          )
          .then(response => {
            this.scroll_spinner_chat = false;
            this.is_paginated_call = false;
            this.all_contact_list = this.all_contact_list.concat(
              response.data.contacts
            );
            this.all_contact_pagination.page_no += 1;
          })
          .catch(e => {
            this.scroll_spinner_chat = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      }
    },
    array_move(arr, old_index, new_index) {
      if (new_index >= arr.length) {
        var k = new_index - arr.length + 1;
        while (k--) {
          arr.push(undefined);
        }
      }
      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
      return arr; // for testing
    },
    formatUserQueryTime(user_query_time) {
      return new Date(user_query_time).toLocaleTimeString(navigator.language, {
        hour: "2-digit",
        minute: "2-digit"
      });
      // return user_query_time
    },
    is_active_chat(index) {
      if(index === this.current_contact_index) {
        return "background: #f0f8ff"
      } else if(this.contact_list[index].is_new_notification || false){
        return "background: #47a88433"
      }
      return "background: #ffffff"
    },
    formatContactLastMessageDate(date, time) {
      if (moment(date).isSame(Date.now(), "day")) {
        return new Date(`${date} ${time}Z`).toLocaleTimeString(
          navigator.language,
          {
            hour: "2-digit",
            minute: "2-digit"
          }
        );
      }
      return date;
    },
    check_previous_message_date_same(index) {
      // console.log(index)
      return true;
      // if(index == 0) {
      //   return true;
      // }
      // return this.history[index-1].bot_response_date == this.history[index].bot_response_date ? true : false;
    },
    process_attachment_file(e) {
      let files = e.target.files || e.dataTransfer.files;
      if (files[0].size > 2097152) {
        swal({
          text: "Upload image with size less than 2MB",
          toast: true,
          position: "top-end",
          type: "error",
          showConfirmButton: false,
          timer: 10000
        });
        return;
      }
      if (
        this.file_extensions.all_allowed_file_extensions.includes(files[0].type)
      ) {
        if (!files.length) return;
        this.send_attachment_detail.media_file_name = files[0].name;
        this.send_attachment_detail.media_content_type = files[0].type;
        this.send_attachment_detail.document_content = URL.createObjectURL(
          files[0]
        );
        this.send_attachment_detail.show_preview = true;
        this.send_attachment_detail.media_type = this.file_extensions.image_file_extensions.includes(
          files[0].type
        )
          ? "image"
          : "document";
        this.send_attachment_detail.media_caption = this.message_to_send;
        this.createAttachment(files[0]);
      } else {
        swal({
          title:
            "Please Select a proper document or image having the correct filetype",
          type: "error",
          showCancelButton: false
        });
      }
    },
    createAttachment(file, type) {
      let reader = new FileReader();

      reader.onload = e => {
        this.send_attachment_detail.media_file = e.target.result.split(
          "base64,"
        )[1];
      };
      reader.readAsDataURL(file);
      reader.addEventListener("load", function() {
        document.getElementById("img-preview").style.display = "flex";
        document.getElementById("img-preview").innerHTML =
          '<img class="custom-display-image" style="max-width:100%;height:500px; padding: 1rem;margin-left: auto; margin-right: auto;" src="' +
          this.result +
          '" />';
      });
    },
    is_response_image(data) {
      if (
        data.template == null &&
        data.text == null &&
        Boolean(data.image) != null
      ) {
        return true;
      }
      return false;
    },
    is_response_document(data) {
      if (
        data.template == null &&
        data.text == null &&
        data.image == null &&
        Boolean(data.attachment) != null
      ) {
        return true;
      }
      return false;
    },
    show_image_fullscreen(img_src) {
      $("#showImageModal").modal("show");
      this.current_fullscreen_image_src = img_src;
    },
    add_new_contact_modal() {
      // console.log("add new contact-addContactModal")
      $("#addContactModal").modal("show");
    },
    save_new_contact() {
      this.add_new_contact.company_id = this.company_id;
      this.add_new_contact.company_name = this.company_name;
      this.show_spinner = true;
      axios
        .post(api_calls.whatsapp_chat(), this.add_new_contact, {
          headers: {
            Authorization: `Bearer ${this.$session.get("at")}`
          }
        })
        .then(response => {
          this.show_spinner = false;
          if (response.data.message == "Whatsapp Contact Added Successfully") {
            swal({
              title: "Success",
              text: "Contact Added Successfully",
              type: "success",
              showCancelButton: false
            });
            $("#addContactModal").modal("hide");
            this.clear_add_contact();
            this.get_all_contact_list();
          } else if (
            response.data.message ==
            "Provided number already exists in contacts"
          ) {
            swal({
              title: "Oops!",
              text: "Contact Already Exists",
              type: "error",
              showCancelButton: false
            });
          } else {
            swal({
              title: "Oops!",
              text: "Some Error Occurred. Please Try Again!",
              type: "error",
              showCancelButton: false
            });
          }
        })
        .catch(e => {
          swal({
            title: "Oops!",
            text: "Some Error Occurred. Please Try Again!",
            type: "error",
            showCancelButton: false
          });
          this.show_spinner = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    clear_add_contact() {
      this.add_new_contact = {
        phone_number: null,
        is_add_contact: true,
        contact_name: null,
        formattedNumber: null
      };
    },
    download_document(attachment) {
      // console.log(attachment)
      var aTag = document.createElement("a");
      aTag.setAttribute("id", "abcdefg");
      aTag.setAttribute("download", "download");
      aTag.setAttribute("href", attachment.link);
      aTag.setAttribute("target", "_blank");
      aTag.click();

      // const blob = new Blob([attachment.link], { type: 'application/pdf' })
      // const link = document.createElement('a')
      // link.href = URL.createObjectURL(blob)
      // link.download = attachment.filename
      // link.click()
      // URL.revokeObjectURL(link.href)
      // link.click();
    },
    open_send_template_to_user() {
      this.retrieve_all_templates();
      $("#sendTemplateModal").modal("show");
    },
    retrieve_all_templates() {
      this.current_template = {};
      this.spinnerOn = true;
      axios
        .post(
          api_calls.whatsapp_template(),
          {
            company_id: this.company_id,
            company_name: this.company_name,
            is_get: true,
            is_notification: this.is_notification_template,
            page_no: this.page_no,
            per_page: this.per_page
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          this.spinnerOn = false;
          if (response.data != null) {
            this.whatsapp_templates.templates_list = [];
            if (response.data.message === "No Whatsapp Template in database") {
              this.whatsapp_templates.templates_list = [];
              return;
            } else if (response.data.templates != null) {
              this.whatsapp_templates.templates_list = response.data.templates;
              this.whatsapp_templates.pagination_data.number_of_rows =
                response.data.page_count;
              this.whatsapp_templates.pagination_data.total_pages = Math.ceil(
                this.number_of_rows / this.per_page
              );
              // if (this.whatsapp_templates.templates_list.length > 0) {
              //   this.show_template(0);
              // }
              // this.setpagination(this.page_no);
            } else if (response.data.message === "Internal Server Error") {
              Swal({
                type: "error",
                text: "Internal Server Error",
                timer: 2500
              });
            }
          } else {
            Swal({
              text: "Some error occured",
              type: "error",
              showConfirmButton: false,
              timer: 2500
            });
          }
        })
        .catch(e => {
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    send_template_to_customer() {
      axios
        .post(
          api_calls.whatsapp_template(),
          {
            company_name: this.company_name,
            company_id: this.company_id,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            subscription: this.$session.get("UserInformation").subscription,
            is_notification: false,
            template_id: this.whatsapp_templates.selected_template,
            contacts_list: [this.current_contact_number],
            publish_template: true
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
          }
        }
      )
      .then((response) => {
        if (response.data.message == "Selected template not found in db") {
          Swal({
            title: "Insufficient credits",
            text: "You have no credits left to send template to Non-US region, You can purchase Cense Add Ons to continue sending template",
            type: "warning",
            showConfirmButton: false,
          });
        } else if (
              response.data.message == "Tier specific user limit reached"
            ) {
              Swal({
                title: this.tlt('tier_specific_user_limit_reached'),
                text: this.tlt('tier_specific_user_limit_reached_msg'),
                type: "warning",
                showConfirmButton: false,
                timer: 4000,
              });
        } else if (
          response.data.message == "No credits left for template to non us"
        ) {
          Swal({
            title: "Insufficient credits",
            text: "You have no credits left to send template to Non-US region, You can purchase Cense Add Ons to continue sending template",
            type: "warning",
            showConfirmButton: false,
          });
        } else if (response.data.message == "template is being sent") {
          Swal({
            title: "Template is being sent",
            type: "success",
            showConfirmButton: false,
            timer: 2500
          });
          // const template =  this.whatsapp_templates.templates_list.find((item) => item.template_id == this.whatsapp_templates.selected_template);
          // console.log(this.whatsapp_templates.selected_template);
          // console.log(template.variable_dict, this.current_contact_number);
          
          let current_timestamp =  new Date(),
          current_date = moment().format('YYYY-MM-DD')
          let bot_response = [
            {
              "text": null, 
              "type": "template",
              "recipient_id": this.current_contact_number,
              "template": this.whatsapp_templates.preview_template_data
            }
          ];
          if(this.start_new_conv_data.start_new_conv){
            this.current_contact_index = 0;
            this.new_conv_contact_data.chat_datetime = current_timestamp.toISOString()
            // this.new_conv_contact_data.is_message_sending_enabled = true
            this.new_conv_contact_data.last_bot_response = {
              text: this.message_to_send, 
              chat_datetime: current_timestamp.toISOString(), 
              date: current_date, 
              time: `${current_timestamp.getUTCHours()}:${current_timestamp.getUTCMinutes()}`
            }
          }
          }
          }
        )
        .then(response => {
          if (response.data.message == "Selected template not found in db") {
            Swal({
              title: "Insufficient credits",
              text:
                "You have no credits left to send template to Non-US region, You can purchase Cense Add Ons to continue sending template",
              type: "warning",
              showConfirmButton: false
            });
          } else if (
            response.data.message == "No credits left for template to non us"
          ) {
            Swal({
              title: "Insufficient credits",
              text:
                "You have no credits left to send template to Non-US region, You can purchase Cense Add Ons to continue sending template",
              type: "warning",
              showConfirmButton: false
            });
          } else if (response.data.message == "template is being sent") {
            Swal({
              title: "Template is being sent",
              type: "success",
              showConfirmButton: false,
              timer: 2500
            });
            // const template =  this.whatsapp_templates.templates_list.find((item) => item.template_id == this.whatsapp_templates.selected_template);
            // console.log(this.whatsapp_templates.selected_template);
            // console.log(template.variable_dict, this.current_contact_number);

            let current_timestamp = new Date(),
              current_date = moment().format("YYYY-MM-DD");
            let bot_response = [
              {
                text: null,
                type: "template",
                recipient_id: this.current_contact_number,
                template: this.whatsapp_templates.preview_template_data
              }
            ];
            if (this.start_new_conv_data.start_new_conv) {
              this.current_contact_index = 0;
              this.new_conv_contact_data.chat_datetime = current_timestamp.toISOString();
              // this.new_conv_contact_data.is_message_sending_enabled = true
              this.new_conv_contact_data.last_bot_response = {
                text: this.message_to_send,
                chat_datetime: current_timestamp.toISOString(),
                date: current_date,
                time: `${current_timestamp.getUTCHours()}:${current_timestamp.getUTCMinutes()}`
              };
              this.contact_list.unshift(this.new_conv_contact_data);
              this.start_new_conv_data.start_new_conv = false;
            }
            // console.log(bot_response)
            let bot_response_date = current_date;
            if (
              this.history.map(
                item => item.bot_response_date == bot_response_date
              ).length > 0
            ) {
              bot_response_date = "";
            }
            this.history.push({
              BOTResponse: bot_response,
              user_query_time: current_timestamp,
              UserQuery: "",
              bot_response_date: bot_response_date,
              bot_response_time: current_timestamp,
              user_query_date: current_date,
              Chat_Datetime: current_timestamp.toISOString()
            });
            this.scroll_down();
            this.contact_list[
              this.current_contact_index
            ].last_bot_response.text = this.message_to_send;
            this.contact_list = this.array_move(
              this.contact_list,
              this.current_contact_index,
              0
            );
            this.message_to_send = null;
            this.current_contact_index = 0;
            this.send_attachment_detail.show_preview = false;
            this.whatsapp_templates.selected_template = null;
            $("#sendTemplateModal").modal("hide");
          } else if (
            response.data.message == "No credits left to send template"
          ) {
            Swal({
              title: "Insufficient credits",
              text:
                "You have no credits left to send template to US region, You can purchase Cense Add Ons to continue sending template",
              type: "warning",
              showConfirmButton: false
            });
          } else if (response.data.message === "Internal Server Error") {
            Swal({
              type: "error",
              text: "Internal Server Error",
              timer: 2500
            });
          } else if (
            response.data.message === "Message Sending Limit Reached"
          ) {
            Swal({
              type: "warning",
              text: "Message Sending Limit Reached",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              confirmButtonText: this.tlt("email_temp_swal_upgrade_now_msg"),
              cancelButtonText: this.tlt("email_temp_swal_upgrade_later_msg"),
              cancelButtonColor: "#d33"
            }).then(result => {
              if (result.value == true) {
                this.$router.push({
                  name: "Settings",
                  params: { Subscription: true }
                });
              }
            });
          } else {
            Swal({
              text: "Some error occured",
              type: "error",
              showConfirmButton: false,
              timer: 2500
            });
          }
        })
        .catch(e => {
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    get_contact_display_name(contact) {
      if (contact.contact_name) return contact.contact_name;
      if (contact.profile_name) return contact.profile_name;
      return contact.whatsapp_phone_number;
    },
    open_import_from_csv_modal() {
      $("#addContactModal").modal("hide");
      $("#importContactCSVModal").modal("show");
    },
    file_input_contacts_csv(e) {
      if (e.target.files[0].type == "text/csv") {
        this.contact_csv.file_label = e.target.files[0].name;
        this.contact_csv.file_content = e.target.files[0];
        this.contact_csv.file_selected = true;
      } else {
        swal({
          title: "Please select a proper document having CSV filetype",
          type: "error",
          showCancelButton: false
        });
      }
    },
    file_submit_upload_contacts() {
      if ($("#inputGroupUploadFilecsv").val() == "") {
        Swal.fire({
          title: "Oops!",
          text: "Please Select a CSV file",
          type: "warning",
          showConfirmButton: false,
          timer: 2500
        });
        return;
      }
      var user_details = {
        email: this.$session.get("UserInformation").email,
        companyname: this.companyname,
        companyid: this.companyid,
        license_key: this.$session.get("UserInformation").license_key
      };
      var json = JSON.stringify(user_details);
      var blob = new Blob([json], {
        type: "application/json"
      });
      const fd = new FormData();
      fd.append(
        "file",
        this.contact_csv.file_content,
        this.contact_csv.file_label
      );
      // fd.append("json", blob);
      fd.append("companyid", this.company_id);
      fd.append("companyname", this.company_name);
      fd.append("email", this.$session.get("UserInformation").email);
      axios
        .post(api_calls.whatsapp_import_contacts(), fd, {
          headers: {
            Authorization: `Bearer ${this.$session.get("at")}`
          }
        })
        .then(response => {
          if (response.data.status === "Success") {
            swal({
              title: "Success",
              text:
                "Multiple contacts are being added. You will receive a mail when the processing is finished.",
              type: "success",
              showCancelButton: false
            });
          } else if (response.data.status === "Failure") {
            swal({
              title: "Incorrect File Format!",
              text:
                "Please try again with a different csv file which matches the sample file structure",
              showCancelButton: false,
              type: "error"
            });
          } else if (response.data.status === "Error") {
            swal({
              title: "Some Error Occurred!",
              text: "Please try again.",
              showCancelButton: false,
              type: "error"
            });
          } else {
            swal({
              title: "Some Error Occurred!",
              text: "Please try again.",
              showCancelButton: false,
              type: "error"
            });
          }
        })
        .catch(e => {
          swal({
            title: "Some Error Occurred!",
            text: "Please Try Again",
            showCancelButton: false,
            type: "error"
          });
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    empty_upload_csv_contacts() {
      this.contact_csv = {
        file_label: "Choose File",
        file_content: null,
        file_selected: false
      };
      $("#inputGroupUploadFilecsv").val("");
    },
    download_sample_contact_file() {
      axios({
        method: "post",
        url: api_calls.file_download(),
        responseType: "blob",
        data: {
          sample_file: "whatsapp_contacts",
          companyid: this.$session.get("UserInformation").company_id,
          company_name: this.$session.get("UserInformation").company_name,
          license_key: this.$session.get("UserInformation").license_key,
          token: this.$session.get("UserInformation").tokens,
          email: this.$session.get("UserInformation").email
        },
        headers: {
          Authorization: `Bearer ${this.$session.get("at")}`
        }
      })
        .then(response => {
          this.spinnerOnFileDownload = false;
          if (response.data.message === "Not able to download file") {
            Swal({
              title: "Some Error Occurred. Please Try Again",
              type: "error",
              timer: 2500
            });
          } else {
            var url = window.URL.createObjectURL(new Blob([response.data]));
            var link = document.createElement("a");
            link.href = url;
            // console.log(this.companyname)
            link.setAttribute("download", "test.csv");
            document.body.appendChild(link);
            link.click();
          }
        })
        .catch(e => {
          this.spinnerOnFileDownload = false;
          Swal({
            title: "Some Error Occurred. Please Try Again",
            type: "error",
            timer: 2500
          });
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },

    textbox_height(id, key) {
      if (event.keyCode === 13 && !event.shiftKey) {
        event.preventDefault();
        this.send_message_to_user();
      } else {
        var textarea = document.querySelector(id);
        textarea.addEventListener("keydown", e => {
          let scroll_height = e.target.scrollHeight;
          if (scroll_height > 60) {
            textarea.style.overflow = "auto";
          } else {
            textarea.style.overflow = "hidden";
          }
        });
      }
    },
    close_document_preview() {
      this.send_attachment_detail = {
        media_file_name: null,
        media_file: null,
        show_preview: false,
        media_content_type: null,
        media_type: null,
        send_media: true,
        document_content: null,
        media_caption: null
      };
    },
    whatsapp_message_formating(a){
      for (let i= 0 ;i<this.whatsapp_formating_list.length;i++ ){
        let cnt = 0;
        let pos1 = -1;
        while(cnt < a.length){
          pos1 = a.indexOf(this.whatsapp_formating_list[i],pos1+1)
          if(pos1 == -1){
             break
          }
          var replace_first_char = a.substring(0, pos1) + this.whatsapp_format_dict[this.whatsapp_formating_list[i]][0] +
                                a.substring(pos1 + 1)
          a =replace_first_char;
          let pos2 = a.indexOf(this.whatsapp_formating_list[i])
          let replace_second_char = a.substring(0, pos2) + this.whatsapp_format_dict[this.whatsapp_formating_list[i]][1] +
                                a.substring(pos2 + 1);
          a = replace_second_char
          pos1 = pos2;
          cnt = pos2;
        }
      }
      return a;
    },
    formatUserQuery(UserQuery){
      if(UserQuery.startsWith('/')){
        try {
          let json_start = UserQuery.indexOf('{'),
          json_end = UserQuery.indexOf('}')+1,
          json_data = JSON.parse(UserQuery.substring(json_start, json_end));
          return `Id: ${json_data.order_id}`;
        } catch (error) {
          return UserQuery
        }
      }
      return UserQuery
    },
    get_order_template_formatted_text(current_bot_response){
      return this.whatsapp_message_formating(current_bot_response.template.components.find((item) => item.type =='BODY').text);
    },
    check_button_in_order_template(current_bot_response){
      let check_buttons = current_bot_response.template.components.find((item) => item.type == 'BUTTONS');
      if(Boolean(check_buttons)){
        return true;
      }
      return false;
    },
    get_order_template_button_url(current_bot_response, key){
      return current_bot_response.template.components.find((item) => item.type =='BUTTONS').buttons.find((item) => item.type == 'URL')[key]
    }

  },
  beforeDestroy() {
    this.channel.leave();
    this.chat_socket.disconnect();
  }
};
"},null]}