{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Integrations/Components/FacebookMessengerDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Integrations/Components/FacebookMessengerDetails.vue","mtime":1663910265470},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBTd2FsIGZyb20gInN3ZWV0YWxlcnQyIjsKaW1wb3J0IGFwaV9jYWxscyBmcm9tICJAL3BvcnRhbC9hcGlfY2FsbHMiOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJNZXNzYWdpbmdGcmFtZXdvcmtzIiwKICBjb21wb25lbnRzOiB7CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYmlnX3NwaW5uZXI6IGZhbHNlLAogICAgICB3ZWJzaXRlX25hbWU6ICIiLAogICAgICB3aWRnZXRfY29kZTogIiIsCiAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgIGZiX2FjY2Vzc190b2tlbjogIiIsCiAgICAgIGZiX3VzZXJfaWQ6ICIiLAogICAgICB1c2VyX2FjY2Vzc190b2tlbjogbnVsbCwKICAgICAgZmJfcGFnZV9kYXRhOiBbXSwKICAgICAgZmJfc2F2ZWRfcGFnZV9kYXRhOiBbXQogICAgICAvLyBmYl9tZXNzYWdpbmdfdXJsX3JlZ2V4OiAvWyhtLm1lKVwvP2EtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fVwuW2Etel17Miw2fVxiKFstYS16QS1aMC05QDolX1wrLn4jPyYvLz1dKikvaSwKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgZmJfcGFnZV9lbmFibGVkKG5ld1ZhbCkgewogICAgICAvLyBjb25zb2xlLmxvZyhuZXdWYWwpOwogICAgICAvLyBjb25zb2xlLmxvZyh0aGlzW3dlYnMgKyAiX2RhdGEiXS5pc192aXNpYmxlX29uX2JvdCk7CiAgICB9LAogIH0sCiAgbW91bnRlZCgpIHsgICAKICAgIHRoaXMuZ2V0X2ludGVncmF0aW9uX2RldGFpbHMoKTsKICAgIC8vIHRoaXMuY2hlY2tMb2dpblN0YXRlKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICB1cGRhdGVfZGF0YSgpIHsKICAgICAgZm9yKHZhciBpIGluIHRoaXMuZmJfc2F2ZWRfcGFnZV9kYXRhKXsKICAgICAgICBmb3IodmFyIGogaW4gdGhpcy5mYl9wYWdlX2RhdGEpewogICAgICAgICAgaWYodGhpcy5mYl9zYXZlZF9wYWdlX2RhdGFbaV0uZmJfcGFnZV9pZCA9PSB0aGlzLmZiX3BhZ2VfZGF0YVtqXS5pZCl7CiAgICAgICAgICAgIHRoaXMuZmJfcGFnZV9kYXRhLnNwbGljZShqLCAxKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBnZXRfaW50ZWdyYXRpb25fZGV0YWlscygpIHsKICAgICAgdGhpcy5iaWdfc3Bpbm5lciA9IHRydWU7CiAgICAgIGF4aW9zCiAgICAgICAgLnBvc3QoCiAgICAgICAgICBhcGlfY2FsbHMuY2hhdGJvdF9pbnRlZ3JhdGlvbl9kZXRhaWxzKCksCiAgICAgICAgICB7CiAgICAgICAgICAgIGlzX2dldDogdHJ1ZSwKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55X2lkLAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0KICAgICAgICApCiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7CiAgICAgICAgICB0aGlzLmJpZ19zcGlubmVyID0gZmFsc2U7CiAgICAgICAgICBpZiAoZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSB0aGlzLmFwaV9zdGF0dXNfY29kZS5EQVRBX0FWQUlMQUJMRS5NU0dfQ09ERSkgewogICAgICAgICAgICB0aGlzLmZiX3NhdmVkX3BhZ2VfZGF0YSA9IFtdOwogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgQm9vbGVhbihkYXRhLmRhdGEuZmFjZWJvb2tfZGV0YWlscy5sZW5ndGgpCiAgICAgICAgICAgICkgewogICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gZGF0YS5kYXRhLmZhY2Vib29rX2RldGFpbHMpIHsKICAgICAgICAgICAgICAgIHZhciB0ZW1wID0ge307CiAgICAgICAgICAgICAgICB0ZW1wID0gewogICAgICAgICAgICAgICAgICBmYl9hY2Nlc3NfdG9rZW46IGRhdGEuZGF0YS5mYWNlYm9va19kZXRhaWxzW2ldLmZiX2FjY2Vzc190b2tlbiwKICAgICAgICAgICAgICAgICAgZmJfcGFnZV9pZDogIGRhdGEuZGF0YS5mYWNlYm9va19kZXRhaWxzW2ldLmZiX3BhZ2VfaWQsCiAgICAgICAgICAgICAgICAgIGZiX3BhZ2VfbmFtZTogIGRhdGEuZGF0YS5mYWNlYm9va19kZXRhaWxzW2ldLmZiX3BhZ2VfbmFtZSwKICAgICAgICAgICAgICAgICAgZmJfdmVyaWZ5X3Rva2VuOiAgZGF0YS5kYXRhLmZhY2Vib29rX2RldGFpbHNbaV0uZmJfdmVyaWZ5X3Rva2VuLAogICAgICAgICAgICAgICAgICBmYl9wYWdlX2VuYWJsZWQ6ICBkYXRhLmRhdGEuZmFjZWJvb2tfZGV0YWlsc1tpXS5lbmFibGVkLAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5mYl9zYXZlZF9wYWdlX2RhdGEucHVzaCh0ZW1wKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gdGhpcy5mYl9zYXZlZF9wYWdlX2RhdGEuaXNfdmlzaWJsZV9vbl9ib3QgPT09IHRydWUgPyB0aGlzLmZiX3NhdmVkX3BhZ2VfZGF0YS5pc19pbnRlZ3JhdGVkID0gdHJ1ZSA6CiAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYl9zYXZlZF9wYWdlX2RhdGEuaXNfaW50ZWdyYXRlZCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMudXBkYXRlX2RhdGEoKTsKICAgICAgICAgIH1lbHNlIGlmKGRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gdGhpcy5hcGlfc3RhdHVzX2NvZGUuRU1QVFlfREFUQS5NU0dfQ09ERSkgeyAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICB0aXRsZTpkYXRhLm1lc3NhZ2UuTVNHX0NPREUsCiAgICAgICAgICAgICAgdGV4dDpkYXRhLm1lc3NhZ2UuTVNHLAogICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICAgIGlmICgKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICkgewogICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIHBhZ2VfY29ubmVjdF9mYihwYWdlKXsKICAgICAgaWYocGFnZSAhPSBudWxsKSB7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9pbnRlZ3JhdGlvbl9kZXRhaWxzKCksewogICAgICAgICAgLy8gZmJfdmVyaWZ5X3Rva2VuIDogLAogICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnlfbmFtZSwKICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueV9pZCwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBmYl9wYWdlX25hbWU6IHBhZ2UubmFtZSwKICAgICAgICAgIGZiX2FjY2Vzc190b2tlbiA6IHBhZ2UuYWNjZXNzX3Rva2VuLAogICAgICAgICAgZmJfcGFnZV9pZCA6IHBhZ2UuaWQsCiAgICAgICAgICBmYl9wYWdlX2VuYWJsZWQ6IHRydWUsCiAgICAgICAgICBpc19zYXZlOiB0cnVlLAogICAgICAgICAgaXNfZmFjZWJvb2s6IHRydWUsIAogICAgICAgICAgaXNfbWVzc2FnaW5nX3BsYXRmb3JtOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgIH0sCiAgICAgICAgfQogICAgICAgICkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IHRoaXMuYXBpX3N0YXR1c19jb2RlLlNVQ0NFU1NGVUxfREJfUVVFUlkuTVNHX0NPREUpIHsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICB0aXRsZTogdGhpcy50bHQoJ2ZhY2Vib29rX2Nvbm5lY3RfbXNnJyksCiAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIHBhdGggPSAiLyIgKyBwYWdlLmlkICsgIi9zdWJzY3JpYmVkX2FwcHM/YWNjZXNzX3Rva2VuPSIgKyBwYWdlLmFjY2Vzc190b2tlbjsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIlBPU1QiLCBwYXRoKTsKICAgICAgICAgICAgRkIuYXBpKAogICAgICAgICAgICAgIHBhdGgsCiAgICAgICAgICAgICAgJ1BPU1QnLAogICAgICAgICAgICAgIHsic3Vic2NyaWJlZF9maWVsZHMiOiJtZXNzYWdlcyJ9LAogICAgICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTdWJzY3JpcHRpb24iLCByZXNwb25zZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICApOwogICAgICAgICAgICB0aGlzLmdldF9pbnRlZ3JhdGlvbl9kZXRhaWxzKCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gdGhpcy5hcGlfc3RhdHVzX2NvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SLk1TR19DT0RFKSB7CiAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgdGl0bGU6IHRoaXMudGx0KCdmYWNlYm9va19pbnRlcm5hbF9zZXJ2ZXJfbXNnJyksCiAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9ZWxzZSB7CiAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgIHRpdGxlOmRhdGEubWVzc2FnZS5NU0dfQ09ERSwKICAgICAgICAgICAgICB0ZXh0OmRhdGEubWVzc2FnZS5NU0csCiAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgaWYgKAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBlZGl0X2ZiX3BhZ2UoaW5kZXgpewogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICB0aGlzLmZiX3NhdmVkX3BhZ2VfZGF0YVtpbmRleF0uZmJfcGFnZV9lbmFibGVkID09IGZhbHNlID8gdGhpcy5mYl9zYXZlZF9wYWdlX2RhdGFbaW5kZXhdLmZiX3BhZ2VfZW5hYmxlZCA9IHRydWUgOiB0aGlzLmZiX3NhdmVkX3BhZ2VfZGF0YVtpbmRleF0uZmJfcGFnZV9lbmFibGVkID0gZmFsc2U7IAogICAgICBpZihpbmRleCAhPSBudWxsKSB7CiAgICAgICAgYXhpb3MucG9zdChhcGlfY2FsbHMuY2hhdGJvdF9pbnRlZ3JhdGlvbl9kZXRhaWxzKCksewogICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnlfbmFtZSwKICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueV9pZCwKICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICBmYl9wYWdlX2lkIDogdGhpcy5mYl9zYXZlZF9wYWdlX2RhdGFbaW5kZXhdLmZiX3BhZ2VfaWQsCiAgICAgICAgICBpc19lZGl0OiB0cnVlLAogICAgICAgICAgaXNfZmFjZWJvb2s6IHRydWUsCiAgICAgICAgICBmYl9wYWdlX2VuYWJsZWQ6IHRoaXMuZmJfc2F2ZWRfcGFnZV9kYXRhW2luZGV4XS5mYl9wYWdlX2VuYWJsZWQKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICB9LAogICAgICAgIH0KICAgICAgICApCiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSB0aGlzLmFwaV9zdGF0dXNfY29kZS5TVUNDRVNTRlVMX0RCX1FVRVJZLk1TR19DT0RFKSB7CiAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgdGl0bGU6IHRoaXMudGx0KCdmYWNlYm9va19lZGl0ZWRfbXNnJyksCiAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYoIUJvb2xlYW4odGhpcy5mYl9zYXZlZF9wYWdlX2RhdGFbaW5kZXhdLmZiX3BhZ2VfZW5hYmxlZCkpIHsKICAgICAgICAgICAgICB2YXIgcGF0aCA9ICIvIiArIHZtLmZiX3NhdmVkX3BhZ2VfZGF0YVtpbmRleF0uZmJfcGFnZV9pZCArICIvc3Vic2NyaWJlZF9hcHBzP2FjY2Vzc190b2tlbj0iICsgdm0uZmJfc2F2ZWRfcGFnZV9kYXRhW2luZGV4XS5mYl9hY2Nlc3NfdG9rZW47CiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIlBhdGgiLCBwYXRoKTsKICAgICAgICAgICAgICBGQi5hcGkoCiAgICAgICAgICAgICAgICBwYXRoLAogICAgICAgICAgICAgICAgJ0RFTEVURScsCiAgICAgICAgICAgICAgICB7fSwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkRFTEVURSIsIHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBwYXRoID0gIi8iICsgdm0uZmJfc2F2ZWRfcGFnZV9kYXRhW2luZGV4XS5mYl9wYWdlX2lkICsgIi9zdWJzY3JpYmVkX2FwcHM/YWNjZXNzX3Rva2VuPSIgKyB2bS5mYl9zYXZlZF9wYWdlX2RhdGFbaW5kZXhdLmZiX2FjY2Vzc190b2tlbjsKICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygiUE9TVCIsIHBhdGgpOwogICAgICAgICAgICAgIEZCLmFwaSgKICAgICAgICAgICAgICAgIHBhdGgsCiAgICAgICAgICAgICAgICAnUE9TVCcsCiAgICAgICAgICAgICAgICB7InN1YnNjcmliZWRfZmllbGRzIjoibWVzc2FnZXMifSwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIlN1YnNjcmlwdGlvbiIsIHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuZ2V0X2ludGVncmF0aW9uX2RldGFpbHMoKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSB0aGlzLmFwaV9zdGF0dXNfY29kZS5GQUNFQk9PS19QQUdFX0lEX0RPRVNOVF9FWElTVFMuTVNHX0NPREUpIHsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICB0aXRsZTogdGhpcy50bHQoJ3BhZ2VfaWRfbm90X2V4aXN0JyksCiAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSB0aGlzLmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICB0aXRsZTogdGhpcy50bHQoJ2ZhY2Vib29rX2ludGVybmFsX3NlcnZlcl9tc2cnKSwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgdGl0bGU6ZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICAgIHRleHQ6ZGF0YS5tZXNzYWdlLk1TRywKICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICApIHsKICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGRlbGV0ZV9mYl9wYWdlKHBhZ2UpewogICAgICBpZihwYWdlICE9IG51bGwpIHsKICAgICAgICBheGlvcy5wb3N0KGFwaV9jYWxscy5jaGF0Ym90X2ludGVncmF0aW9uX2RldGFpbHMoKSx7CiAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueV9uYW1lLAogICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55X2lkLAogICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIGZiX3BhZ2VfaWQgOiBwYWdlLmZiX3BhZ2VfaWQsCiAgICAgICAgICBpc19kZWxldGU6IHRydWUsCiAgICAgICAgICBpc19mYWNlYm9vazogdHJ1ZSwgCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgfSwKICAgICAgICB9CiAgICAgICAgKQogICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PT0gdGhpcy5hcGlfc3RhdHVzX2NvZGUuU1VDQ0VTU0ZVTF9EQl9RVUVSWS5NU0dfQ09ERSkgewogICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRsdCgnZmFjZWJvb2tfZWRpdGVkX21zZycpLAogICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBwYXRoID0gIi8iICsgcGFnZS5mYl9wYWdlX2lkICsgIi9zdWJzY3JpYmVkX2FwcHM/YWNjZXNzX3Rva2VuPSIgKyBwYWdlLmZiX2FjY2Vzc190b2tlbjsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIlBhdGgiLCBwYXRoKTsKICAgICAgICAgICAgRkIuYXBpKAogICAgICAgICAgICAgIHBhdGgsCiAgICAgICAgICAgICAgJ0RFTEVURScsCiAgICAgICAgICAgICAge30sCiAgICAgICAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkRFTEVURSIsIHJlc3BvbnNlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHRoaXMuZ2V0X2ludGVncmF0aW9uX2RldGFpbHMoKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSB0aGlzLmFwaV9zdGF0dXNfY29kZS5GQUNFQk9PS19QQUdFX0lEX0RPRVNOVF9FWElTVFMuTVNHX0NPREUpIHsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICB0aXRsZTogdGhpcy50bHQoJ3BhZ2VfaWRfbm90X2V4aXN0JyksCiAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09PSB0aGlzLmFwaV9zdGF0dXNfY29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IuTVNHX0NPREUpIHsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICB0aXRsZTogdGhpcy50bHQoJ2ZhY2Vib29rX2ludGVybmFsX3NlcnZlcl9tc2cnKSwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgdGl0bGU6ZGF0YS5tZXNzYWdlLk1TR19DT0RFLAogICAgICAgICAgICAgIHRleHQ6ZGF0YS5tZXNzYWdlLk1TRywKICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICApIHsKICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGNoZWNrTG9naW5TdGF0ZSgpIHsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgRkIuZ2V0TG9naW5TdGF0dXMoZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICB2bS5zdGF0dXNDaGFuZ2VDYWxsYmFjayhyZXNwb25zZSk7CiAgICAgIH0pOwogICAgfSwKICAgIHN0YXR1c0NoYW5nZUNhbGxiYWNrKHJlc3BvbnNlKSB7CiAgICAgIGNvbnNvbGUubG9nKCJNZXNzZW5nZXIgbG9naW4xIiwgcmVzcG9uc2UpOwogICAgICBpZihyZXNwb25zZS5zdGF0dXMgPT09ICJjb25uZWN0ZWQiKQogICAgICB7CiAgICAgICAgdGhpcy5mYl9hY2Nlc3NfdG9rZW4gPSByZXNwb25zZS5hdXRoUmVzcG9uc2UuYWNjZXNzVG9rZW47CiAgICAgICAgdGhpcy5mYl91c2VyX2lkID0gcmVzcG9uc2UuYXV0aFJlc3BvbnNlLnVzZXJJRDsKICAgICAgICAkKCIjbG9naW4iKS5oaWRlKCk7CiAgICAgICAgJCgiI2xvZ291dCIpLnNob3coKTsgCiAgICAgICAgdGhpcy5mZXRjaFVzZXJQcm9maWxlKCk7CiAgICAgIH0KICAgICAgZWxzZXsKICAgICAgICAgIHRoaXMuZmFjZWJvb2tMb2dpbkJ5RGlhbG9nKCk7CiAgICAgIH0KICAgIH0sCiAgICBmYWNlYm9va0xvZ291dCgpIHsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgJCgiI2xvZ291dCIpLmhpZGUoKTsKICAgICAgJCgiI2xvZ2luIikuc2hvdygpOwogICAgICAkKCIjc3RhdHVzIikuZW1wdHkoKTsKICAgICAgRkIubG9nb3V0KGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgLy8gdm0uc3RhdHVzQ2hhbmdlQ2FsbGJhY2socmVzcG9uc2UpOwogICAgICB9KTsKICAgICAgdGhpcy5mYl9wYWdlX2RhdGEgPSBbXTsKICAgICAgdGhpcy5mYl9hY2Nlc3NfdG9rZW4gPSAiIjsKICAgICAgdGhpcy5mYl91c2VyX2lkID0gIiI7CiAgICAgIHRoaXMuZ2V0X2ludGVncmF0aW9uX2RldGFpbHMoKTsKICAgIH0sCiAgICBmYWNlYm9va0xvZ2luQnlEaWFsb2coKSB7CiAgICAgIHZhciB2bSA9IHRoaXM7CiAgICAgIEZCLmxvZ2luKGZ1bmN0aW9uKHJlc3BvbnNlKSB7ICAgICAgICAKICAgICAgICAgIHZtLnN0YXR1c0NoYW5nZUNhbGxiYWNrKHJlc3BvbnNlKTsKICAgICAgfSwge3Njb3BlOiAncHVibGljX3Byb2ZpbGUscGFnZXNfbWFuYWdlX21ldGFkYXRhLHBhZ2VzX3Nob3dfbGlzdCxwYWdlc19tZXNzYWdpbmcscGFnZXNfcmVhZF9lbmdhZ2VtZW50J30pOwogICAgfSwKICAgIGZldGNoVXNlclByb2ZpbGUoKSB7CiAgICAgIHZhciB2bSA9IHRoaXM7CiAgICAgIHZhciB1c2VyX2lkID0gdGhpcy5mYl91c2VyX2lkOwogICAgICB2YXIgYWNjZXNzX3Rva2VuID0gdGhpcy5mYl9hY2Nlc3NfdG9rZW47CiAgICAgIHZhciBhcHBfaWQgPSBwcm9jZXNzLmVudi5WVUVfQVBQX0ZCX0FQUF9JRDsKICAgICAgdmFyIGFwcF9zZWNyZXQgPSBwcm9jZXNzLmVudi5WVUVfQVBQX0ZCX0FQUF9TRUNSRVQ7CiAgICAgIC8vIHZhciBjbGllbnRfdG9rZW4gPSBwcm9jZXNzLmVudi5WVUVfQVBQX0ZCX0NMSUVOVF9UT0tFTjsKCiAgICAgIC8vIEZCLmFwaSgnL21lJywgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgLy8gICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXNwb25zZSkpOwogICAgICAvLyB9KTsKICAgICAgCiAgICAgIC8vIEZCLmFwaSgnL21lP2ZpZWxkcz1pZCxuYW1lLGVtYWlsLGdlbmRlcixiaXJ0aGRheScsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgIC8vICAgY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWwgbG9naW4gZm9yOiAnICsgcmVzcG9uc2UubmFtZSk7CiAgICAgIC8vIH0pOwoKICAgICAgdmFyIHBhdGgxID0gJy9vYXV0aC9hY2Nlc3NfdG9rZW4/Z3JhbnRfdHlwZT1mYl9leGNoYW5nZV90b2tlbiZjbGllbnRfaWQ9JyArIGFwcF9pZCArICcmY2xpZW50X3NlY3JldD0nICsgYXBwX3NlY3JldCArICcmZmJfZXhjaGFuZ2VfdG9rZW49JyArIGFjY2Vzc190b2tlbjsKICAgICAgRkIuYXBpKHBhdGgxLCBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgIC8vIGNvbnNvbGUubG9nKCJQYXRoIDEiLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZSkpOwogICAgICAgIHZtLnVzZXJfYWNjZXNzX3Rva2VuID0gcmVzcG9uc2UuYWNjZXNzX3Rva2VuOwogICAgICB9KQoKICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgdmFyIHBhdGgyID0gJy8nK3VzZXJfaWQrJz9maWVsZHM9aWQsbmFtZSxlbWFpbCxwaWN0dXJlJmFjY2Vzc190b2tlbj0nK3RoaXMudXNlcl9hY2Nlc3NfdG9rZW47CiAgICAgICAgRkIuYXBpKHBhdGgyLCBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZygiUGF0aCAyIiwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpCiAgICAgICAgfSk7CgogICAgICAgIHZhciBwYXRoMyA9ICcvJyt1c2VyX2lkKycvYWNjb3VudHM/ZmllbGRzPW5hbWUsYWNjZXNzX3Rva2VuJmFjY2Vzc190b2tlbj0nK3RoaXMudXNlcl9hY2Nlc3NfdG9rZW47CiAgICAgICAgRkIuYXBpKHBhdGgzLCBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZygiUGF0aCAzIiwgSlNPTi5zdHJpbmdpZnkoZGF0YS5kYXRhKSkKICAgICAgICAgIHZtLmZiX3BhZ2VfZGF0YSA9IGRhdGEuZGF0YTsKICAgICAgICAgIHZtLnVwZGF0ZV9kYXRhKCk7CiAgICAgICAgfSk7IAogICAgICB9LCAyMDAwKTsKICAgICAgCiAgICB9LAogICAgLy8gdGVzdEFQSSgpIHsKICAgIC8vICAgY29uc29sZS5sb2coJ1dlbGNvbWUhICBGZXRjaGluZyB5b3VyIGluZm9ybWF0aW9uLi4uLiAnKTsKICAgIC8vICAgRkIuYXBpKCcvbWUnLCBmdW5jdGlvbihyZXNwb25zZSkgewogICAgLy8gICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsIGxvZ2luIGZvcjogJyArIHJlc3BvbnNlLm5hbWUpOwogICAgLy8gICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICAgIC8vICAgfSk7CiAgICAvLyB9CiAgfSwKfTsK"},null]}