{"remainingRequest":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Elixir/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue?vue&type=template&id=d864dc54&scoped=true&","dependencies":[{"path":"/home/vimalesh/Elixir/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Dialog.vue","mtime":1643027096160},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div>
  <div class="spinner" id="spinner" v-show="spinnerOn"></div>
  <div
    class="
      card-header
      px-0
      d-block d-sm-flex
      flex-wrap
      justify-content-between
    "
  >
    <div class="card-act d-flex flex-wrap" style="width: 100%">
      <button
        id="add_node_btn"
        class="darkblue-btn"
        data-toggle="modal"
        @click="change_root"
        data-target="#addnodemodal"
      >
        Add Node
      </button>
      <!-- <button id="add_child_node_btn" class="darkblue-btn" @click="testFunction">Add Child Node</button> -->
      <!-- <button id="add_folder_btn" class="darkblue-btn">Add Folder</button> -->
      <button
        id="try_bot_btn"
        class="ml-auto darkblue-btn"
        data-toggle="modal"
        @click="visible_try_bot()"
      >
        Try Bot
      </button>
    </div>
  </div>
  <div class="d-flex px-0">
    <div class="card-body px-0">
      <vue-tree-list
        @click="onClick"
        @delete-node="onDel"
        @add-node="onAddNode"
        @drop-before="dropBefore"
        @drop-after="dropAfter"
        @drop="drop"
        :model="data"
        default-tree-node-name=""
        default-leaf-node-name=""
        v-bind:default-expanded="true"
      >
        <template v-slot:leafNameDisplay="slotProps">
          <span>
            {{ slotProps.model.name }}
          </span>
          <br />
          <span class="muted"
            >{{ slotProps.model.responses.length }} Responses</span
          >
        </template>        
        <!-- <template v-slot:treeNodeIcon="slotProps">
        <span class="icon">
          {{ (slotProps.model.children && slotProps.model.children.length > 0 && !slotProps.expanded) ?
          '' : '' }}</span>
      </template> -->
        <!-- <span class="icon" title="Add Node" slot="addTreeNodeIcon">📂</span> -->
        <!-- <span class="icon" slot="addLeafNodeIcon">＋</span> -->
        <!-- <span class="icon" slot="editNodeIcon">📃</span> -->
        <!-- <span class="icon" slot="delNodeIcon">✂️</span> -->
        <span class="icon" slot="leafNodeIcon"></span>
        <span class="icon" slot="treeNodeIcon"></span>
      </vue-tree-list>
      <br />
      <!-- <Following part is for testing, do not remove> -->
      <!-- <button @click="testNewTree">Get new tree</button>
      <pre>
      {{ newTree }}
    </pre
      >  -->
    </div>
    <div
      class="px-0"
      id="try_bot_response"
      style="margin-right: -19px !important; margin-top: -28px !important"
    >
      <template v-if="load_bot_preview" style="overflow: hidden">
        <response-bot
          style="padding: 0px"
          :isDialogBot="true"
        ></response-bot>
      </template>
    </div>
  </div>
  <div
    class="modal fade"
    id="addnodemodal"
    tabindex="-1"
    role="dialog"
    aria-labelledby="exampleModalLabel"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-xl" role="document">
      <div class="modal-content p-2">
        <div class="modal-body">
          <button
            v-if="new_child_node"
            @click="onDel(child_node)"
            type="button"
            class="close"
            aria-label="Close"
          >
            <span aria-hidden="true">&times;</span>
          </button>
          <button
            v-else
            type="button"
            @click="close_addnodemodal"
            class="close"
            aria-label="Close"
          >
            <span aria-hidden="true">&times;</span>
          </button>
          <div class="form-group" style="width: 150px">
            <h5>Node Name</h5>
            <input
              type="text"
              v-model.trim="node_name"
              class="form-control input-tag"
              placeholder="Enter Node Name"
              style="padding: 0.375rem 0.5rem !important"
            />
          </div>
          <div class="form-group">
            <h5>If Assistant Recognizes</h5>
            <div class="row d-flex">
              <div
                class="d-flex ml-2 pb-2"
                v-for="(trigger, index) in triggers"
                :key="index"
              >
                <!-- class="form-control input-tag" -->
                <div v-if="!is_root" class="ml-2 my-auto">
                  <!-- <multiselect
                    id="trigger_filter_by_id"
                    :close-on-select="true"
                    :options="triggers_filter_by_options"
                    placeholder="Filter by"
                    v-model="trigger.trigger_type"
                    :allow-empty="false"
                    :show-labels="false"
                    @input="change_trigger_value(trigger.trigger_type, index)"
                  >
                  </multiselect> -->
                  <div>
                    <select 
                      class="custom-select" 
                      aria-label="Filter by"
                      id="trigger_filter_by_id"
                      style="width: 120px; height: 40px; padding-left: 14px; padding-bottom:4px;"
                      placeholder="Filter by"
                      v-model="trigger.trigger_type"
                      @input="change_trigger_value(trigger.trigger_type, index)"
                    >
                      <option value="" disabled selected>Filter by</option>
                      <option value="intent">Objective</option>
                      <option value="entity">Entity</option>
                    </select>
                  </div>
                </div>
                <div
                  class="ml-2 my-auto"
                  v-if="
                    (!is_root && Boolean(trigger.trigger_type)) || is_root
                  "
                >
                  <multiselect
                    v-model="trigger.trigger_value"
                    :options="
                      is_root === true
                        ? trigger_options_intent
                        : trigger.trigger_type === 'intent'
                        ? trigger_options_intent
                        : trigger_options_entity
                    "
                    :placeholder="
                      is_root === true
                        ? 'Type to search Objective'
                        : trigger.trigger_type === 'intent'
                        ? 'Type to search Objective'
                        : 'Type to search Entity'
                    "
                    :close-on-select="true"
                    :clear-on-select="false"
                    :preserve-search="true"
                    :show-labels="false"
                    :allow-empty="false"
                    open-direction="bottom"
                    :searchable="true"
                    :loading="is_loading"
                    @input="
                      change_trigger_type(
                        trigger.trigger_type,
                        trigger.trigger_value,
                        index
                      )
                    "
                    @search-change="search_intent_entity(trigger.trigger_type, $event)"
                    style="height: 30px; padding: 0px"
                    id="res_n_int_source"
                  >
                    <!-- <option
                        v-for="(option, index) in trigger_options"
                        :key="index"
                        :value="option"
                      >
                        {{ option }}
                      </option> -->
                    <span slot="noOptions"></span>
                    <span slot="noResult">No Condition found.</span>
                  </multiselect>
                </div>
                <div
                  class="ml-2 my-auto"
                  v-if="
                    !is_root &&
                    Boolean(trigger.trigger_type === 'entity') &&
                    Boolean(trigger.trigger_value)
                  "
                  :style="
                    is_entity_type_sys_pattern(trigger.trigger_value) === true
                      ? 'cursor: not-allowed'
                      : null
                  "
                  :title="
                    is_entity_type_sys_pattern(trigger.trigger_value) === true
                      ? 'Entity selected is of type pattern or system entity, hence further option(s) cannot be selected.'
                      : null
                  "
                >
                  <multiselect
                    id="trigger_operand_id"
                    :close-on-select="true"
                    :options="entity_operand_options"
                    placeholder="Operator"
                    v-model="trigger.operand"
                    :allow-empty="false"
                    :show-labels="false"
                    @input="
                      change_trigger_entity_value(trigger.operand, index)
                    "
                    :disabled="
                      is_entity_type_sys_pattern(trigger.trigger_value) ===
                      true
                    "
                  >
                  </multiselect>
                </div>
                <div
                  class="ml-2 my-auto"
                  v-if="
                    !is_root &&
                    Boolean(trigger.trigger_type === 'entity') &&
                    Boolean(trigger.trigger_value) &&
                    Boolean(trigger.operand === 'is')
                  "
                >
                  <!-- <p style="margin:0px !important" 
                      v-if="is_entity_type_sys_pattern(trigger.trigger_value)">
                      (Entity selected is of type pattern or system entity,<br> hence further option(s) cannot be selected.)
                    </p> -->
                  <multiselect
                    id="trigger_entity_value_id"
                    :close-on-select="true"
                    :options="entity_value_options(trigger.trigger_value)"
                    placeholder="select entity value"
                    v-model="trigger.entity_value"
                    :allow-empty="false"
                    :show-labels="false"
                    @input="
                      set_trigger_entity_value(trigger.entity_value, index)
                    "
                  >
                  </multiselect>
                </div>
                <span
                  v-if="triggers.length > 1"
                  style="cursor: pointer"
                  class="my-auto ml-2 mr-0 close"
                  @click="add_to_triggers_list('remove', index)"
                >
                  &times;
                </span>
                <span
                  v-if="triggers.length > 1"
                  class="my-auto"
                  style="margin-left: 10px; font-size: 17px"
                  >&&
                </span>
              </div>
              <button
                v-if="!is_root"
                id="add_trigger_btn"
                class="ml-2 my-auto"
                style="
                  cursor: pointer;
                  border: none;
                  height: 30px;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                  margin-top: 5px !important;
                "
                @click="add_to_triggers_list('add')"
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
          <!-- <hr /> -->
          <div class="form-group d-flex mb-0">
            <h5 style="width: 20%; padding: 0px; margin-top: 4px">Slots</h5>
            <label
              class="switch ml-auto"
              style="margin-top: 4px; margin-bottom: 0px"
            >
              <input type="checkbox" v-model="is_slot" id="slots_required" />
              <span class="slider round" style="border-radius: 50px"></span>
            </label>
          </div>
          <p>
            (Enable this to gather the information your bot needs to respond
            to a user.)
          </p>
          <div v-if="is_slot">
            <!-- <hr style="margin: 10px 0px" /> -->
            <div class="d-flex">
              <div class="d-flex">
                  <p
                  class="sub_heading"
                  style="margin-top: 6px; margin-bottom: 5px"
                >
                  Add Slot
                </p>
                <button
                  style="
                    cursor: pointer;
                    border: none;
                    background: transparent url('@portal/assets/img/plus.png')
                      0% 0% no-repeat padding-box;
                  "
                  @click="add_to_slots_list('add')"
                >
                  <img src="/img/black_plus.png" alt="" />
                </button>
              </div>
              <div 
                v-show="slots.length > 0"
                class="ml-auto card-act"
              >
                <!-- <a 
                  href="#manage_handler_id" 
                  class="sub_heading" 
                  data-toggle="modal"
                >
                  Manage Handlers
                </a> -->
                <button 
                  type="button"
                  data-toggle="modal"
                  data-target="#manage_handler_id"
                  class="darkblue-btn"
                >
                  Manage Handlers
                </button>
              </div>
            </div>
           <div
              v-show="slots.length > 0"
              class="custom-button-box px-3 pb-0 pt-2 mt-3 mb-3"
            >
              <!-- <hr style="margin: 10px 0px" /> -->
              <div class="d-flex mb-1" style="text-align: center">
                <div class="col-sm-4">Check for entity</div>
                <div class="col-sm-4">Save it as</div>
                <div class="col-sm-3">
                  If not present, ask <br />
                  (Optional)
                </div>
              </div>
              <hr style="margin: 10px 0px" />
              <draggable
                v-model="slots"
                group="people"
                @start="drag_slots = true"
                @end="drag_slots = false"
                v-bind="dragOptionsSlots"
                handle=".handle"
              >
                <transition-group
                  type="transition"
                  :name="!drag_slots ? 'flip-list' : null"
                >
                  <div
                    class="col-sm-12 p-0 d-flex form-group"
                    v-for="(slot, index) in slots"
                    :key="slot.id"
                  >
                    <div class="col-sm-4 p-0">
                      <div>
                        <!-- <select
                        class="form-control input-tag"
                        v-model="slot.check_for"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        placeholder="Select response"
                        @click="set_slot_entity_variable(index, slot.check_for)"
                        id="res_n_int_source"
                      > -->
                        <multiselect
                          v-model="slot.check_for"
                          :options="entity_list"
                          :close-on-select="true"
                          :clear-on-select="false"
                          :preserve-search="true"
                          :show-labels="false"
                          :allow-empty="false"
                          placeholder="Search Entity"
                          open-direction="bottom"
                          :searchable="true"
                          :loading="is_loading"
                          @search-change="search_entity"
                          @input="set_slot_entity_variable(index, slot.check_for)"
                          style="height: 30px; padding: 0px"
                          id="res_n_int_source"
                        >
                          <!-- <option
                          v-for="(option, index) in temp_entities"
                          :key="index"
                          :value="option"
                        >
                          {{ option }}
                        </option> -->
                          <span slot="noOptions"></span>
                          <span slot="noResult">No Entites found.</span>
                        </multiselect>
                      </div>
                      <!-- <div v-else>Add some Entities first</div> -->
                    </div>
                    <div class="col-sm-4">
                      <input
                        class="form-control input-tag"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        placeholder="Enter variable"
                        type="text"
                        disabled
                        v-model="slot.slot"
                      />
                    </div>
                    <div class="col-sm-3 p-0" style="text-align: center">
                      <input
                        id="checkfocus"
                        class="form-control input-tag"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        placeholder="Response ID's"
                        type="text"
                        @focusout="
                          add_slot_to_assistant_response(
                            'text',
                            index,
                            slot.check_for,
                            slot.slot,
                            slot.responses
                          )
                        "
                        @focusin="
                          remove_slot_to_assistant_response(index, slot.slot)
                        "
                        v-model="slot.responses"
                        :disabled="true"
                      />
                      <!-- :disabled="slot.responses.length > 1" -->
                    </div>
                    <div class="col-sm-1 pr-0">
                    <div class="col-sm-12 d-flex p-0">
                      <div class="col-sm-4 px-auto" style="padding-top: 8px">
                        <span
                          style="float: right; cursor: pointer; font-size: 14px"
                          class="muted"
                        >
                          <a
                            data-toggle="modal"
                            href="#slotmodal"
                            @click="
                              on_open_slots_modal(slot.slot, index, slot.check_for)
                            "
                          >
                            <i title="Customize Slot" class="fas fa-cog"></i>
                          </a>
                        </span>
                      </div>
                      <div class="col-sm-4 px-auto" style="padding-top: 10px">
                        <i
                          class="fas fa-arrows-alt handle"
                          style="cursor: pointer; float:right !important;"
                          title="Drag to Change Order"
                          v-if="slots.length != 1"
                        ></i>
                      </div>
                      <div class="col-sm-4 px-auto" style="padding-top: 6px">
                        <span
                          style="float: right; cursor: pointer"
                          @click="add_to_slots_list('remove', index, slot.responses)"
                          class="close"
                          title="Delete Slot"
                        >
                          &times;
                        </span>
                      </div>
                    </div>
                    </div>
                  </div>
                </transition-group>
              </draggable>
              <!-- <hr /> -->
            </div>
          </div>
          <div class="form-group d-flex mb-0">
            <h5 style="width: 20%; padding: 0px; margin-top: 4px">Webhook</h5>
            <label
              class="switch ml-auto"
              style="margin-top: 4px; margin-bottom: 0px"
            >
              <input
                type="checkbox"
                v-model="is_webhook"
                id="webhook_required"
              />
              <span class="slider round" style="border-radius: 50px"></span>
            </label>
          </div>
          <p>
            (Enable this to use an external source to populate a response. You
            can only call one external source per node.)
          </p>
          <div style="color: red" v-if="is_webhook && !is_webhook_details">
            Please set your webhook details first
          </div>
          <!-- <hr style="margin: 10px 0px" /> -->
          <div v-if="is_webhook && is_webhook_details">
            <div class="d-flex">
              <p
                class="sub_heading"
                style="margin-top: 3px; margin-bottom: 5px"
              >
                Add Parameters
              </p>
              <button
                style="
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                  height: 29px;
                  margin-left: 10px;
                "
                @click="add_to_webhook_mapping('add')"
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
              <p
                class="ml-2 sub_heading"
                style="margin-top: 4px; margin-bottom: 0px; margin-left: 10px"
              >
                Select Webhook :
              </p>
              <div class="col-sm-3 ml-2 p-0">
                <multiselect
                  v-model="webhook_id"
                  :options="webhook_list.map((webhook) => webhook.id)"
                  :custom-label="
                    (webhook) =>
                      webhook_list.find((x) => x.id == webhook).name
                  "
                  :close-on-select="true"
                  :clear-on-select="false"
                  :preserve-search="true"
                  :show-labels="false"
                  :allow-empty="false"
                  placeholder="Search Webhook"
                  open-direction="bottom"
                  :searchable="true"
                  :loading="is_loading"
                  @search-change="search_webhook"
                  @input="set_webhook_return_variable(webhook_id)"
                  style="
                    height: 30px;
                    padding: 0px; 
                  "
                  id="res_n_int_source"
                >
                  <!-- @input="set_slot_entity_variable(index, slot.check_for)" -->
                  <!-- <option
                v-for="(option, index) in temp_entities"
                :key="index"
                :value="option"
              >
                {{ option }}
              </option> -->
                  <span slot="noOptions"></span>
                  <span slot="noResult">No Webhooks found.</span>
                </multiselect>
              </div>
              <p
                class="ml-2 sub_heading"
                style="margin-top: 6px; margin-bottom: 0px; margin-left: 10px"
              >
                Webhook Return Variable :
              </p>
              <div class="col-sm-2" style="text-align: center">
                  <input
                    id="webhook_variable_id"
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Enter variable name"
                    type="text"
                    v-model="webhook_variable"
                    :style="(webhook_variable.length > 0) ? 'padding-left:19px !important;': 'padding: 0.375rem 0.5rem !important'"
                  />
                  <span v-if="webhook_variable.length >0" class="unit">$</span>
              </div>
              <span style="margin-left: 0px; color: #0645AD;"
                class="my-auto"
              >
                <i
                  class="fa fa-info-circle"
                  aria-hidden="true"
                  style="font-size: 16px"
                  title="To avoid overide always use unique webhook return variable"
                >
                </i>
              </span>
            </div>
            <div
              v-show="webhook_mapping.length > 0"
              class="custom-button-box px-3 pb-0 pt-2 mt-3 mb-3"
            >
              <!-- <hr style="margin: 10px 0px" /> -->
              <div
                v-if="is_webhook"
                class="d-flex mb-1"
                style="text-align: center"
              >
                <div class="col-sm-5">Key</div>
                <div class="col-sm-5">Value</div>
              </div>
              <hr style="margin: 10px 0px" />
              <div v-if="is_webhook">
                <div
                  class="col-sm-12 p-0 d-flex form-group"
                  v-for="(params, index) in webhook_mapping"
                  :key="index"
                >
                  <div class="col-sm-5 p-0">
                    <input
                      class="form-control input-tag"
                      style="width: 100%; padding: 0.375rem 0.5rem"
                      placeholder="Enter name"
                      type="text"
                      v-model="params.key"
                    />
                  </div>
                  <div class="col-sm-5">
                    <input
                      class="form-control input-tag"
                      style="width: 100%; padding: 0.375rem 0.5rem"
                      placeholder="Enter value ex. $date or $sys-date"
                      type="text"
                      v-model="params.value"
                    />
                  </div>
                  <div class="col-sm-2 pr-0" style="padding-top: 10px">
                    <span
                      style="float: right; cursor: pointer"
                      @click="add_to_webhook_mapping('remove', index)"
                      class="close"
                      title="Delete Parameter"
                    >
                      &times;
                    </span>
                  </div>
                </div>
                <!-- <div>
                <div class="d-flex">
                <h5>Return Variable : </h5>
                <h5 class="pl-1">{{webhook_variable}}</h5>
                <div class="ml-auto" style="padding-right: 15px;">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  class="muted"
                >
                  <a
                    data-toggle="modal"
                    href="#webhookmodal"
                    @click="
                      on_open_webhook_modal(webhook_variable)
                    "
                  >
                    <i title="Customize Webhook Response" class="fas fa-cog"></i>
                  </a>
                </span>
              </div>
                </div>
              </div> -->
                <!-- <hr style="margin: 10px 0px" /> -->
              </div>
            </div>
          </div>
          <div class="form-group d-flex mb-0">
            <h5 style="width: 20%; padding: 0px; margin-top: 4px">Notifications</h5>
            <label
              class="switch ml-auto"
              style="margin-top: 4px; margin-bottom: 0px"
            >
              <input type="checkbox" v-model="is_notification" id="notifications_required" />
              <span class="slider round" style="border-radius: 50px"></span>
            </label>
          </div>
          <p>
            (Enable this to send notification to users.)
          </p>
          <div v-if="is_notification">
            <!-- <hr style="margin: 10px 0px" /> -->
           <div
              class="custom-button-box px-3 pb-0 pt-2 mt-3 mb-3"
            >
              <!-- <hr style="margin: 10px 0px" /> -->
              <div class="d-flex mb-1" style="text-align: center">
                <div class="col-sm-3">Notification type</div>
                <div class="col-sm-3">
                  Variable Name
                  <span style="margin-left: 12px; color: #0645AD;"
                    class="my-auto"
                  >
                    <i
                      class="fa fa-info-circle"
                      aria-hidden="true"
                      style="font-size: 16px"
                      title="the value here should be the value of 'Save it as' of any slots used to capture email/sms. Example $email_id."
                    >
                    </i>
                  </span>
                  </div>
                <div class="col-sm-3">Check for templte</div>
                <div class="col-sm-2">
                  Response ID's (Optional)
                </div>
              </div>
              <hr style="margin: 10px 0px" />
              <div class="col-sm-12 p-0 d-flex form-group">
                <div class="col-sm-3 p-0">
                  <div>
                    <multiselect
                      v-model="notifications.notify[0].type"
                      :options="notifications_notify_type_list"
                      :close-on-select="true"
                      :clear-on-select="false"
                      :preserve-search="true"
                      :show-labels="false"
                      :allow-empty="false"
                      placeholder="Select notification type"
                      open-direction="bottom"
                      :searchable="true"
                      style="height: 30px; padding: 0px"
                      id="notifications_notify_type_id"
                    >
                    </multiselect>
                  </div>
                </div>
                <div class="col-sm-3">
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Enter variable"
                    type="text"
                    v-model="notifications.notify[0].slot"
                  />
                </div>
                <div class="col-sm-3 p-0">
                  <div>
                    <multiselect
                      v-model="notifications.notify[0].template_name"
                      :options="notifications_notify_template_list.map((name)=> {return name.template_name})"
                      :close-on-select="true"
                      :clear-on-select="false"
                      :preserve-search="true"
                      :show-labels="false"
                      :allow-empty="false"
                      placeholder="Search template name"
                      open-direction="bottom"
                      :searchable="true"
                      :loading="is_loading"
                      @search-change="search_template_name"
                      @input="set_notifications_notify_template_id(notifications.notify[0].template_name)"
                      style="height: 30px; padding: 0px"
                      id="notifications_notify_template_id"
                    >
                      <!-- <span slot="noOptions"></span> -->
                      <span slot="noResult">No Template found.</span>
                    </multiselect>
                  </div>
                </div>
                <div class="col-sm-2" style="text-align: center">
                  <input
                    id="notifications_responses_id"
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Response ID's"
                    type="text"
                    v-model="notifications.responses"
                    :disabled="true"
                  />
                </div>
                <div class="col-sm-1 pr-0">
                  <div class="col-sm-12 d-flex p-0">
                    <div class="col-sm-12 p-0 px-auto" style="padding-top: 8px !important;">
                      <span
                        style="float: right; cursor: pointer; font-size: 14px"
                        class="muted"
                      >
                        <a
                          data-toggle="modal"
                          href="#notificationmodal"
                          @click="
                            on_open_notification_modal()
                          "
                        >
                          <i title="Customize Notification" class="fas fa-cog"></i>
                        </a>
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              <!-- <hr /> -->
            </div>
          </div>
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              Assistant Response
            </h5>
            <div
              v-for="(new_response, index) in assistant_response"
              :key="index"
              class="form-group"
            >
              <div v-if="new_response.condition != 'unfilled_slot' && (new_response.condition != '!successful' && new_response.condition != '!unsuccessful' )">
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="add_to_assistant_response_list('remove', index)"
                  class="close"
                  title="Remove Response"
                >
                  Remove
                  <!-- <i style="font-size: 16px" class="fa">&#xf00d;</i> -->
                </span>
                <div v-if="new_response.type == 'text'">
                  <p class="sub_heading">
                    Text Response : {{ new_response.id }}
                  </p>
                  <div class="custom-button-box px-3 pb-2 pt-3 mt-3 mb-3">
                    <div
                      v-for="(response, num) in new_response.values"
                      :key="num"
                      class="form-group"
                    >
                      <div class="d-flex">
                        <input
                          class="form-control input-tag"
                          placeholder="Enter response text"
                          style="width: 100%; padding: 0.375rem 0.5rem"
                          type="text"
                          v-model="new_response.values[num]"
                        />
                        <!-- v-on:keyup.enter="
                            add_to_assistant_response_text_list('add', index)
                          " -->
                        <span style="margin-left: 12px; color: #0645AD;"
                          class="my-auto"
                          v-if="check_slot_value_use_in_response(new_response.values[num])"
                        >
                          <i
                            class="fa fa-info-circle"
                            aria-hidden="true"
                            style="font-size: 16px"
                            title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                          >
                          </i>
                        </span>
                        <span
                          v-if="new_response.values.length > 1"
                          title="Remove Text Response"
                          class="close my-auto"
                          style="cursor: pointer; margin-left: 12px"
                          @click="
                            add_to_assistant_response_text_list(
                              'remove',
                              index,
                              num
                            )
                          "
                        >
                          &times;
                        </span>
                      </div>
                    </div>
                    <div class="d-flex">
                      <p style="margin-top: 6px; margin-bottom: 5px">
                        Add value
                      </p>
                      <button
                        style="
                          cursor: pointer;
                          border: none;
                          background: transparent
                            url('@portal/assets/img/plus.png') 0% 0% no-repeat
                            padding-box;
                        "
                        @click="
                          add_to_assistant_response_text_list('add', index)
                        "
                      >
                        <img src="/img/black_plus.png" alt="" />
                      </button>
                    </div>
                    <div class="response-variations">
                      <span
                        >Response variations are set to
                        <strong>{{ new_response.variation }}</strong
                        >.</span
                      >
                      Set to
                      <a
                        @click="select_response_variation(index, 'sequential')"
                        v-show="new_response.variation != 'sequential'"
                        href="javascript:void(0);"
                        class="response-variation"
                      >
                        sequential
                      </a>
                      <span v-show="new_response.variation != 'sequential'"
                        >|</span
                      >
                      <a
                        @click="select_response_variation(index, 'multiline')"
                        v-show="new_response.variation != 'multiline'"
                        href="javascript:void(0);"
                        class="variation-multiline"
                      >
                        multiline
                      </a>
                      <span
                        v-show="
                          new_response.variation != 'random' &&
                          new_response.variation != 'multiline'
                        "
                        >|</span
                      >
                      <a
                        @click="select_response_variation(index, 'random')"
                        v-show="new_response.variation != 'random'"
                        href="javascript:void(0);"
                        class="variation-random"
                      >
                        random
                      </a>
                    </div>
                  </div>
                </div>
                <div v-if="new_response.type == 'image'">
                  <p class="sub_heading">
                    Image Response : {{ new_response.id }}
                  </p>
                  <!-- <p>Enter Name (Optional)</p>
                      <input class="form-control input-tag" type="text" v-model="new_response.image_name"> -->
                  <!-- <p class="mb-0">Image source :</p> -->
                  <div class="custom-button-box px-3 py-3 mt-3 mb-3">
                    <input
                      class="form-control input-tag"
                      style="width: 100%; padding: 0.375rem 0.5rem"
                      placeholder="Add Image url"
                      type="text"
                      v-model="new_response.source"
                      @focusout="check_image_url(new_response.source)"
                      @keydown="check_image_url(new_response.source)"
                      @keyup="check_image_url(new_response.source)"
                    />
                    <p
                      v-show="!valid_image_url"
                      style="
                        color: red !important;
                        margin-bottom: 0px !important;
                        padding-top: 8px !important;
                      "
                    >
                      Please enter a valid image URL in png or jpg format only.
                    </p>
                  </div>
                </div>
                <div v-if="new_response.type == 'choices'">
                  <p class="sub_heading">
                    Choice Response : {{ new_response.id }}
                  </p>
                  <!-- <div>
                    <input
                      class="form-control input-tag"
                      placeholder="Enter response text"
                      style="width: 100%"
                      type="text"
                      v-model="new_response.title"
                    />
                  </div> -->
                  <div class="custom-button-box px-3 py-2 mt-3 mb-3">
                    <template>
                      <div style="display: block; margin-bottom: 1rem">
                        <div
                          v-for="(response, num) in new_response.choices"
                          :key="num"
                          class="custom-button-box px-3 py-3 mt-3 mb-3"
                          style=""
                        >
                          <label class="mt-0 choice-label" style=""
                            >Title:</label
                          >
                          <span
                            style="cursor: pointer; float: right"
                            class="close ml-auto mr-0"
                            title="Remove Choice Response"
                            v-if="new_response.choices.length > 1"
                            @click="
                              add_to_assistant_response_choice_list(
                                'remove',
                                new_response.id,
                                num
                              )
                            "
                          >
                            &times;</span
                          >
                          <input
                            type="text"
                            v-model.trim="response.title"
                            class="form-control input-tag"
                            placeholder="title of the button"
                            style="width: 100% !important;padding: 0.375rem 0.5rem"
                          />
                          <div class="mt-2 mb-2">
                            <label class="choice-label" style="">Value:</label>
                          </div>
                          <input
                            type="text"
                            v-model.trim="response.payload"
                            class="form-control input-tag"
                            placeholder="value to be passed when clicked on button"
                            style="width: 100% !important; padding: 0.375rem 0.5rem"
                          />
                        </div>
                      </div>
                    </template>
                    <div class="d-flex">
                      <p style="margin-top: 6px; margin-bottom: 5px">
                        Add choice
                      </p>
                      <button
                        style="
                          cursor: pointer;
                          border: none;
                          background: transparent
                            url('@portal/assets/img/plus.png') 0% 0% no-repeat
                            padding-box;
                        "
                        @click="
                          add_to_assistant_response_choice_list(
                            'add',
                            new_response.id
                          )
                        "
                      >
                        <img src="/img/black_plus.png" alt="" />
                      </button>
                    </div>
                  </div>
                </div>
                <hr style="margin: 10px 0px" />
                <!-- <vue-editor
                  WHILE SAVING DETAILS ADD VALIDATION ADDNODE()
                    v-model="assistant_response[index]" 
                    :editorToolbar="customToolbar"
                  ></vue-editor> -->
              </div>
            </div>
            <div class="d-flex">
              <p class="sub_heading">Select a response type first :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading" style="margin-left: 20px">
                Add response
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="add_to_assistant_response_list('add')"
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
          <div class="form-group">
            <h5>Then assistant should</h5>
            <p>
              (Choose whether you want your Assistant to continue, or wait for
              the customer to respond.)
            </p>
            <div class="d-flex">
              <select
                class="form-control input-tag"
                v-model="save_then_assistant_should"
                @click="set_next_step()"
                style="width: 120px; height: 30px; padding: 0px"
                id="res_n_int_source"
              >
                <option value="" disabled selected>Select a Option</option>
                <option
                  v-for="(option, index) in then_assistant_should"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <select
                class="form-control input-tag"
                v-if="save_then_assistant_should == 'jump_to'"
                v-model="jump_to_node_id"
                @click="set_next_step()"
                style="
                  width: 120px;
                  height: 30px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option value="" disabled selected>Select a Node</option>
                <option
                  v-for="(option, index) in updated_node_list"
                  :key="index"
                  :value="option.id"
                >
                  {{ option.name }}
                </option>
              </select>
            </div>
          </div>
        </div>
        <div class="card-act modal-footer">
          <!-- These conditions for saving node defines that we are adding child node/editing a node OR adding a new root node -->
          <button
            v-if="is_show_edit"
            type="button"
            @click="editNode"
            class="darkblue-btn"
          >
            Save Changes
          </button>
          <button v-else type="button" @click="addNode" class="darkblue-btn">
            Save
          </button>
        </div>
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="slotmodal"
    tabindex="-1"
    role="dialog"
    aria-labelledby="slotmodal"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 style="font-style: regular" class="modal-title">
            Configure slot {{ edit_slot_index }}
          </h5>
          <button
            type="button"
            @click="on_close_slots_modal()"
            class="close"
            data-dismiss="modal"
            aria-hidden="true"
          >
            ×
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              Assistant Response
            </h5>
            <div
              v-for="(new_response, index) in slot_assistant_response"
              :key="index"
              class="form-group"
            >
              <span
                style="float: right; cursor: pointer; font-size: 14px"
                @click="
                  remove_slot_to_assistant_response(
                    new_response.id,
                    new_response.recognizes,
                    'slotmodal'
                  )
                "
                class="close"
                title="Remove Response"
              >
                Remove
                <!-- <i style="font-size: 16px" class="fa">&#xf00d;</i> -->
              </span>
              <div v-if="new_response.type == 'text'">
                <p class="sub_heading">
                  Text Response : {{ new_response.id }}
                </p>
                <div class="custom-button-box px-3 pb-2 pt-3 mt-3 mb-3">
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',
                            new_response.id
                          )
                        "
                      />
                      <span style="margin-left: 12px; color: #0645AD;"
                        class="my-auto"
                        v-if="check_slot_value_use_in_response(new_response.values[num])"
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      Add value
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >Response variations are set to
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    Set to
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                    >
                      sequential
                    </a>
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                    >
                      multiline
                    </a>
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                    >
                      random
                    </a>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'">
                <p class="sub_heading">Image Response :</p>
                <!-- <p>Enter Name (Optional)</p>
                    <input class="form-control input-tag" type="text" v-model="new_response.image_name"> -->
                <!-- <p class="mb-0">Image source :</p> -->
                <div class="custom-button-box px-3 py-3 mt-3 mb-3">
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                    @focusout="check_image_url(new_response.source)"
                    @keydown="check_image_url(new_response.source)"
                    @keyup="check_image_url(new_response.source)"
                  />
                  <p
                    v-show="!valid_image_url"
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    Please enter a valid image URL in png or jpg format only.
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'">
                <p class="sub_heading">
                  Choice Response : {{ new_response.id }}
                </p>
                <!-- <div>
                  <input
                    class="form-control input-tag"
                    placeholder="Enter response text"
                    style="width: 100%"
                    type="text"
                    v-model="new_response.title"
                  />
                </div> -->
                <div class="custom-button-box px-3 py-2 mt-3 mb-3">
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="custom-button-box px-3 py-3 mt-3 mb-3"
                        style=""
                      >
                        <label class="mt-0 choice-label" style=""
                          >Title:</label
                        >
                        <span
                          style="cursor: pointer; float: right"
                          class="close ml-auto mr-0"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                        <input
                          type="text"
                          v-model.trim="response.title"
                          class="form-control input-tag"
                          placeholder="title of the button"
                          style="width: 100% !important; padding: 0.375rem 0.5rem"
                        />
                        <div class="mt-2 mb-2">
                          <label class="choice-label" style="">Value:</label>
                        </div>
                        <input
                          type="text"
                          v-model.trim="response.payload"
                          class="form-control input-tag"
                          placeholder="value to be passed when clicked on button"
                          style="width: 100% !important; padding: 0.375rem 0.5rem"
                        />
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      Add choice
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <hr style="margin: 10px 0px" />
              <!-- <vue-editor
                WHILE SAVING DETAILS ADD VALIDATION ADDNODE()
                  v-model="assistant_response[index]"
                  :editorToolbar="customToolbar"
                ></vue-editor> -->
            </div>
            <div class="d-flex">
              <p class="sub_heading">Select a response type first :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading" style="margin-left: 20px">
                Add response
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="
                  add_slot_to_assistant_response(
                    'Addbtn',
                    'unused',
                    edit_slot_check_for,
                    edit_slot_slot_variable
                  )
                "
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
        </div>
        <!-- <div class="modal-footer">
          <a href="#" data-dismiss="modal" class="btn">Close</a>
          <a href="#" class="btn btn-primary">Save changes</a>
        </div> -->
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="webhookmodal"
    tabindex="-1"
    role="dialog"
    aria-labelledby="webhookmodal"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 style="font-style: regular" class="modal-title">
            Configure Webhook Response for : {{ webhook_variable }}
          </h5>
          <button
            type="button"
            @click="on_close_webhook_modal()"
            class="close"
            data-dismiss="modal"
            aria-hidden="true"
          >
            ×
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              Assistant Response
            </h5>
            <div
              v-for="(new_response, index) in webhook_assistant_response"
              :key="index"
              class="form-group"
            >
              <span
                style="float: right; cursor: pointer; font-size: 14px"
                @click="
                  webhook_to_assistant_response(
                    'remove',
                    webhook_variable,
                    new_response.id
                  )
                "
                class="close"
                title="Remove Response"
              >
                Remove
                <!-- <i style="font-size: 16px" class="fa">&#xf00d;</i> -->
              </span>
              <div v-if="new_response.type == 'text'">
                <p class="sub_heading">
                  Text Response : {{ new_response.id }}
                </p>
                <div class="custom-button-box px-3 pb-2 pt-3 mt-3 mb-3">
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                      />
                      <!-- v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',new_response.id)" 
                            -->
                      <span style="margin-left: 12px; color: #0645AD;"
                        class="my-auto"
                        v-if="check_slot_value_use_in_response(new_response.values[num])"
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>      
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      Add value
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >Response variations are set to
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    Set to
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                      >sequential</a
                    >
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                      >multiline</a
                    >
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                      >random</a
                    >
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'">
                <p class="sub_heading">Image Response :</p>
                <!-- <p>Enter Name (Optional)</p>
                    <input class="form-control input-tag" type="text" v-model="new_response.image_name"> -->
                <!-- <p class="mb-0">Image source :</p> -->
                <div class="custom-button-box px-3 py-3 mt-3 mb-3">
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                    @focusout="check_image_url(new_response.source)"
                    @keydown="check_image_url(new_response.source)"
                    @keyup="check_image_url(new_response.source)"
                  />
                  <p
                    v-show="!valid_image_url"
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    Please enter a valid image URL in png or jpg format only.
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'">
                <p class="sub_heading">
                  Choice Response : {{ new_response.id }}
                </p>
                <!-- <div>
                  <input
                    class="form-control input-tag"
                    placeholder="Enter response text"
                    style="width: 100%"
                    type="text"
                    v-model="new_response.title"
                  />
                </div> -->
                <div class="custom-button-box px-3 py-2 mt-3 mb-3">
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="custom-button-box px-3 py-3 mt-3 mb-3"
                        style=""
                      >
                        <label class="mt-0 choice-label" style=""
                          >Title:</label
                        >
                        <span
                          style="cursor: pointer; float: right"
                          class="close ml-auto mr-0"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                        <input
                          type="text"
                          v-model.trim="response.title"
                          class="form-control input-tag"
                          placeholder="title of the button"
                          style="width: 100% !important; padding: 0.375rem 0.5rem"
                        />
                        <div class="mt-2 mb-2">
                          <label class="choice-label" style="">Value:</label>
                        </div>
                        <input
                          type="text"
                          v-model.trim="response.payload"
                          class="form-control input-tag"
                          placeholder="value to be passed when clicked on button"
                          style="width: 100% !important; padding: 0.375rem 0.5rem"
                        />
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      Add choice
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <hr style="margin: 10px 0px" />
              <!-- <vue-editor
                WHILE SAVING DETAILS ADD VALIDATION ADDNODE()
                  v-model="assistant_response[index]"
                  :editorToolbar="customToolbar"
                ></vue-editor> -->
            </div>
            <div class="d-flex">
              <p class="sub_heading">Select a response type first :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading" style="margin-left: 20px">
                Add response
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="
                  webhook_to_assistant_response('add', webhook_variable)
                "
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
        </div>
        <!-- <div class="modal-footer">
          <a href="#" data-dismiss="modal" class="btn">Close</a>
          <a href="#" class="btn btn-primary">Save changes</a>
        </div> -->
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="manage_handler_id"
    tabindex="-1"
    role="dialog"
    aria-labelledby="manage_handler_id"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h5 style="font-style: regular" class="modal-title">
              Manage handlers
            </h5>
            <p class="m-0">
              (Handlers are how your bot will respond when the users answer to a prompt is not found.)
          </p>
          </div>
          <button
            type="button"
            @click="on_close_manage_handlers()"
            class="close"
            data-dismiss="modal"
            aria-hidden="true"
          >
            ×
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <!-- <h5>If answer to any prompt is not found and</h5> -->
            <div
              v-for="(handler, ind) in manage_handlers"
              :key="ind"
            >
              <div>
                <span
                  style="float: right; cursor: pointer; font-size: 14px"
                  @click="add_remove_to_manage_handler_list('remove', ind)"
                  class="close"
                  title="Delete Handler"
                >
                  Delete
                  <!-- <i style="font-size: 16px" class="fa">&#xf00d;</i> -->
                </span>
                <h5>
                  Handler : {{ ind }}
                </h5>
              </div>
              <div class="custom-button-box-head px-3 py-3 mt-3 mb-3">
                <div class="form-group">
                  <h5>If Assistant Recognizes</h5>
                  <div class="row d-flex">
                    <div
                      class="d-flex ml-2 pb-2"
                      v-for="(trigger, index) in handler.triggers"
                      :key="index"
                    >
                      <div class="ml-2 my-auto">
                        <div>
                          <select 
                            class="custom-select" 
                            aria-label="Filter by"
                            id="trigger_filter_by_id"
                            style="width: 120px; height: 40px; padding-left: 14px; padding-bottom:4px;"
                            placeholder="Filter by"
                            v-model="trigger.trigger_type"
                            @input="manage_handlers_change_trigger_value(trigger.trigger_type, index, ind)"
                          >
                            <option value="" disabled selected>Filter by</option>
                            <option value="intent">Objective</option>
                            <option value="entity">Entity</option>
                          </select>
                        </div>
                      </div>
                      <div
                        class="ml-2 my-auto"
                        v-if="Boolean(trigger.trigger_type)"
                      >
                        <multiselect
                          v-model="trigger.trigger_value"
                          :options="trigger.trigger_type === 'intent'
                              ? trigger_options_intent
                              : trigger_options_entity
                          "
                          :placeholder="trigger.trigger_type === 'intent'
                              ? 'Type to search Objective'
                              : 'Type to search Entity'
                          "
                          :close-on-select="true"
                          :clear-on-select="false"
                          :preserve-search="true"
                          :show-labels="false"
                          :allow-empty="false"
                          open-direction="bottom"
                          :searchable="true"
                          :loading="is_loading"
                          @input="
                            manage_handlers_change_trigger_type(
                              trigger.trigger_type,
                              trigger.trigger_value,
                              index,
                              ind
                            )
                          "
                          @search-change="search_intent_entity(trigger.trigger_type, $event)"
                          style="height: 30px; padding: 0px"
                          id="res_n_int_source"
                        >
                          <span slot="noOptions"></span>
                          <span slot="noResult">No Condition found.</span>
                        </multiselect>
                      </div>
                      <div
                        class="ml-2 my-auto"
                        v-if="
                          Boolean(trigger.trigger_type === 'entity') &&
                          Boolean(trigger.trigger_value)
                        "
                        :style="
                          is_entity_type_sys_pattern(trigger.trigger_value) === true
                            ? 'cursor: not-allowed'
                            : null
                        "
                        :title="
                          is_entity_type_sys_pattern(trigger.trigger_value) === true
                            ? 'Entity selected is of type pattern or system entity, hence further option(s) cannot be selected.'
                            : null
                        "
                      >
                        <multiselect
                          id="trigger_operand_id"
                          :close-on-select="true"
                          :options="entity_operand_options"
                          placeholder="Operator"
                          v-model="trigger.operand"
                          :allow-empty="false"
                          :show-labels="false"
                          @input="
                            manage_handlers_change_trigger_entity_value(trigger.operand, index, ind)
                          "
                          :disabled="
                            is_entity_type_sys_pattern(trigger.trigger_value) ===
                            true
                          "
                        >
                        </multiselect>
                      </div>
                      <div
                        class="ml-2 my-auto"
                        v-if=" Boolean(trigger.trigger_type === 'entity') &&
                          Boolean(trigger.trigger_value) &&
                          Boolean(trigger.operand === 'is')
                        "
                      >
                        <multiselect
                          id="trigger_entity_value_id"
                          :close-on-select="true"
                          :options="entity_value_options(trigger.trigger_value)"
                          placeholder="select entity value"
                          v-model="trigger.entity_value"
                          :allow-empty="false"
                          :show-labels="false"
                          @input="
                            manage_handlers_set_trigger_entity_value(trigger.entity_value, index, ind)
                          "
                        >
                        </multiselect>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="form-group">
                  <h5 style="margin-top: 6px; margin-bottom: 5px">
                    Assistant Response
                  </h5>
                  <div
                    v-for="(new_response, index) in handler.responses"
                    :key="index"
                    class="form-group"
                  >
                    <span
                      style="float: right; cursor: pointer; font-size: 14px"
                      @click="
                        manage_handlers_add_to_assistant_response_list('remove', ind, index)
                      "
                      class="close"
                      title="Remove Response"
                    >
                      Remove
                    </span>
                    <div v-if="new_response.type == 'text'">
                      <p class="sub_heading">
                        <!-- Text Response : {{ new_response.id }} -->
                        Text Response
                      </p>
                      <div class="custom-button-box px-3 pb-2 pt-3 mt-3 mb-3">
                        <div
                          v-for="(response, num) in new_response.values"
                          :key="num"
                          class="form-group"
                        >
                          <div class="d-flex">
                            <input
                              class="form-control input-tag"
                              placeholder="Enter response text"
                              style="width: 100%; padding: 0.375rem 0.5rem"
                              type="text"
                              v-model="new_response.values[num]"
                              v-on:keyup.enter="
                                manage_handler_add_to_assistant_response_text_list(
                                  'add',
                                  new_response.id, 
                                  ind
                                )
                              "
                            />
                            <span style="margin-left: 12px; color: #0645AD;"
                              class="my-auto"
                              v-if="check_slot_value_use_in_response(new_response.values[num])"
                            >
                              <i
                                class="fa fa-info-circle"
                                aria-hidden="true"
                                style="font-size: 16px"
                                title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                              >
                              </i>
                            </span>
                            <span
                              v-if="new_response.values.length > 1"
                              title="Remove Text Response"
                              class="close my-auto"
                              style="cursor: pointer; margin-left: 12px"
                              @click="
                                manage_handler_add_to_assistant_response_text_list(
                                  'remove',
                                  new_response.id,
                                  ind,
                                  num
                                )
                              "
                            >
                              &times;
                            </span>
                          </div>
                        </div>
                        <div class="d-flex">
                          <p style="margin-top: 6px; margin-bottom: 5px">
                            Add value
                          </p>
                          <button
                            style="
                              cursor: pointer;
                              border: none;
                              background: transparent
                                url('@portal/assets/img/plus.png') 0% 0% no-repeat
                                padding-box;
                            "
                            @click="
                              manage_handler_add_to_assistant_response_text_list(
                                'add',
                                new_response.id,
                                ind
                              )
                            "
                          >
                            <img src="/img/black_plus.png" alt="" />
                          </button>
                        </div>
                        <div class="response-variations">
                          <span
                            >Response variations are set to
                            <strong>{{ new_response.variation }}</strong
                            >.</span
                          >
                          Set to
                          <a
                            @click="
                              manage_handlers_select_response_variation(
                                new_response.id,
                                'sequential',
                                ind
                              )
                            "
                            v-show="new_response.variation != 'sequential'"
                            href="javascript:void(0);"
                            class="response-variation"
                          >
                            sequential
                          </a>
                          <span v-show="new_response.variation != 'sequential'">
                            |
                          </span>
                          <a
                            @click="
                              manage_handlers_select_response_variation(
                                new_response.id,
                                'multiline',
                                ind
                              )
                            "
                            v-show="new_response.variation != 'multiline'"
                            href="javascript:void(0);"
                            class="variation-multiline"
                          >
                            multiline
                          </a>
                          <span
                            v-show="
                              new_response.variation != 'random' &&
                              new_response.variation != 'multiline'
                            "
                          >
                            |
                          </span>
                          <a
                            @click="
                              manage_handlers_select_response_variation(new_response.id, 'random', ind)
                            "
                            v-show="new_response.variation != 'random'"
                            href="javascript:void(0);"
                            class="variation-random"
                          >
                            random
                          </a>
                        </div>
                      </div>
                    </div>
                    <div v-if="new_response.type == 'image'">
                      <p class="sub_heading">
                        <!-- Image Response : {{ new_response.id }} -->
                        Image Response
                      </p>
                      <!-- <p>Enter Name (Optional)</p>
                          <input class="form-control input-tag" type="text" v-model="new_response.image_name"> -->
                      <!-- <p class="mb-0">Image source :</p> -->
                      <div class="custom-button-box px-3 py-3 mt-3 mb-3">
                        <input
                          class="form-control input-tag"
                          style="width: 100%; padding: 0.375rem 0.5rem"
                          placeholder="Add Image url"
                          type="text"
                          v-model="new_response.source"
                          @focusout="check_image_url(new_response.source)"
                          @keydown="check_image_url(new_response.source)"
                          @keyup="check_image_url(new_response.source)"
                        />
                        <p
                          v-show="!valid_image_url"
                          style="
                            color: red !important;
                            margin-bottom: 0px !important;
                            padding-top: 8px !important;
                          "
                        >
                          Please enter a valid image URL in png or jpg format only.
                        </p>
                      </div>
                    </div>
                    <div v-if="new_response.type == 'choices'">
                      <p class="sub_heading">
                        <!-- Choice Response : {{ new_response.id }} -->
                        Choice Response
                      </p>
                      <!-- <div>
                        <input
                          class="form-control input-tag"
                          placeholder="Enter response text"
                          style="width: 100%"
                          type="text"
                          v-model="new_response.title"
                        />
                      </div> -->
                      <div class="custom-button-box px-3 py-2 mt-3 mb-3">
                        <template>
                          <div style="display: block; margin-bottom: 1rem">
                            <div
                              v-for="(response, num) in new_response.choices"
                              :key="num"
                              class="custom-button-box px-3 py-3 mt-3 mb-3"
                              style=""
                            >
                              <label class="mt-0 choice-label" style=""
                                >Title:</label
                              >
                              <span
                                style="cursor: pointer; float: right"
                                class="close ml-auto mr-0"
                                title="Remove Choice Response"
                                v-if="new_response.choices.length > 1"
                                @click="
                                  manage_handlers_add_to_assistant_response_choice_list(
                                    'remove',
                                    new_response.id,
                                    ind,
                                    num
                                  )
                                "
                              >
                                &times;</span
                              >
                              <input
                                type="text"
                                v-model.trim="response.title"
                                class="form-control input-tag"
                                placeholder="title of the button"
                                style="width: 100% !important; padding: 0.375rem 0.5rem"
                              />
                              <div class="mt-2 mb-2">
                                <label class="choice-label" style="">Value:</label>
                              </div>
                              <input
                                type="text"
                                v-model.trim="response.payload"
                                class="form-control input-tag"
                                placeholder="value to be passed when clicked on button"
                                style="width: 100% !important; padding: 0.375rem 0.5rem"
                              />
                            </div>
                          </div>
                        </template>
                        <div class="d-flex">
                          <p style="margin-top: 6px; margin-bottom: 5px">
                            Add choice
                          </p>
                          <button
                            style="
                              cursor: pointer;
                              border: none;
                              background: transparent
                                url('@portal/assets/img/plus.png') 0% 0% no-repeat
                                padding-box;
                            "
                            @click="
                              manage_handlers_add_to_assistant_response_choice_list(
                                'add',
                                new_response.id,
                                ind
                              )
                            "
                          >
                            <img src="/img/black_plus.png" alt="" />
                          </button>
                        </div>
                      </div>
                    </div>
                    <hr style="margin: 10px 0px" />
                    <!-- <vue-editor
                      WHILE SAVING DETAILS ADD VALIDATION ADDNODE()
                        v-model="assistant_response[index]"
                        :editorToolbar="customToolbar"
                      ></vue-editor> -->
                  </div>
                  <div class="d-flex">
                    <p class="sub_heading">Select a response type first :</p>
                    <select
                      class="form-control input-tag"
                      v-model="selected_response_type"
                      style="
                        width: 100px;
                        height: 25px;
                        margin-left: 10px;
                        padding: 0px;
                      "
                      id="res_n_int_source"
                    >
                      <option
                        v-for="(option, index) in assistant_response_type"
                        :key="index"
                        :value="option"
                      >
                        {{ option }}
                      </option>
                    </select>
                    <!-- </div> -->
                    <!-- <div class="d-flex"> -->
                    <p class="sub_heading" style="margin-left: 20px">
                      Add response
                    </p>
                    <button
                      style="
                        margin-top: -14px;
                        cursor: pointer;
                        border: none;
                        background: transparent url('@portal/assets/img/plus.png')
                          0% 0% no-repeat padding-box;
                      "
                      @click="manage_handlers_add_to_assistant_response_list('add', ind)"
                      
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
                <div class="form-group">
                  <h5>Then assistant should</h5>
                  <div class="d-flex">
                    <select
                      class="form-control input-tag"
                      style="width: 120px; height: 30px; padding: 0px"
                      id="res_n_int_source"
                      disabled
                    >
                      <option value="skip_all_slots" disabled selected>Skip all slots</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
            <div class="d-flex" v-if="Boolean(manage_handlers.length === 0)">
              <p
                class="sub_heading"
                style="margin-top: 6px; margin-bottom: 5px"
              >
                Add handler
              </p>
              <button
                style="
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="add_remove_to_manage_handler_list('add')"
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>

        </div>
        <!-- <div class="modal-footer">
          <a href="#" data-dismiss="modal" class="btn">Close</a>
          <a href="#" class="btn btn-primary">Save changes</a>
        </div> -->
      </div>
    </div>
  </div>
  <div
    class="modal fade"
    id="notificationmodal"
    tabindex="-1"
    role="dialog"
    aria-labelledby="notificationmodal"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 style="font-style: regular" class="modal-title">
            Configure notification
          </h5>
          <button
            type="button"
            @click="on_close_notification_modal()"
            class="close"
            data-dismiss="modal"
            aria-hidden="true"
          >
            ×
          </button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              Assistant Response When Notification Successful
            </h5>
            <div
              v-for="(new_response, index) in notification_successful_assistant_response"
              :key="index"
              class="form-group"
            >
              <span
                style="float: right; cursor: pointer; font-size: 14px"
                @click="
                  remove_notification_to_assistant_response(
                    new_response.id,
                    new_response.recognizes,
                  )
                "
                class="close"
                title="Remove Response"
              >
                Remove
                <!-- <i style="font-size: 16px" class="fa">&#xf00d;</i> -->
              </span>
              <div v-if="new_response.type == 'text'">
                <p class="sub_heading">
                  Text Response : {{ new_response.id }}
                </p>
                <div class="custom-button-box px-3 pb-2 pt-3 mt-3 mb-3">
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',
                            new_response.id
                          )
                        "
                      />
                      <span style="margin-left: 12px; color: #0645AD;"
                        class="my-auto"
                        v-if="check_slot_value_use_in_response(new_response.values[num])"
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      Add value
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >Response variations are set to
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    Set to
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                    >
                      sequential
                    </a>
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                    >
                      multiline
                    </a>
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                    >
                      random
                    </a>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'">
                <p class="sub_heading">Image Response : {{ new_response.id }}</p>
                <!-- <p>Enter Name (Optional)</p>
                    <input class="form-control input-tag" type="text" v-model="new_response.image_name"> -->
                <!-- <p class="mb-0">Image source :</p> -->
                <div class="custom-button-box px-3 py-3 mt-3 mb-3">
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                    @focusout="check_image_url(new_response.source)"
                    @keydown="check_image_url(new_response.source)"
                    @keyup="check_image_url(new_response.source)"
                  />
                  <p
                    v-show="!valid_image_url"
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    Please enter a valid image URL in png or jpg format only.
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'">
                <p class="sub_heading">
                  Choice Response : {{ new_response.id }}
                </p>
                <!-- <div>
                  <input
                    class="form-control input-tag"
                    placeholder="Enter response text"
                    style="width: 100%"
                    type="text"
                    v-model="new_response.title"
                  />
                </div> -->
                <div class="custom-button-box px-3 py-2 mt-3 mb-3">
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="custom-button-box px-3 py-3 mt-3 mb-3"
                        style=""
                      >
                        <label class="mt-0 choice-label" style=""
                          >Title:</label
                        >
                        <span
                          style="cursor: pointer; float: right"
                          class="close ml-auto mr-0"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                        <input
                          type="text"
                          v-model.trim="response.title"
                          class="form-control input-tag"
                          placeholder="title of the button"
                          style="width: 100% !important; padding: 0.375rem 0.5rem"
                        />
                        <div class="mt-2 mb-2">
                          <label class="choice-label" style="">Value:</label>
                        </div>
                        <input
                          type="text"
                          v-model.trim="response.payload"
                          class="form-control input-tag"
                          placeholder="value to be passed when clicked on button"
                          style="width: 100% !important; padding: 0.375rem 0.5rem"
                        />
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      Add choice
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <hr style="margin: 10px 0px" />
              <!-- <vue-editor
                WHILE SAVING DETAILS ADD VALIDATION ADDNODE()
                  v-model="assistant_response[index]"
                  :editorToolbar="customToolbar"
                ></vue-editor> -->
            </div>
            <div class="d-flex">
              <p class="sub_heading">Select a response type first :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading" style="margin-left: 20px">
                Add response
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="add_notification_successful_to_assistant_response('successful')"
                
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
          <div class="form-group">
            <h5 style="margin-top: 6px; margin-bottom: 5px">
              Assistant Response When Notification Unsuccessful
            </h5>
            <div
              v-for="(new_response, index) in notification_unsuccessful_assistant_response"
              :key="index"
              class="form-group"
            >
              <span
                style="float: right; cursor: pointer; font-size: 14px"
                @click="
                  remove_notification_to_assistant_response(
                    new_response.id,
                    new_response.recognizes,
                  )
                "
                class="close"
                title="Remove Response"
              >
                Remove
                <!-- <i style="font-size: 16px" class="fa">&#xf00d;</i> -->
              </span>
              <div v-if="new_response.type == 'text'">
                <p class="sub_heading">
                  Text Response : {{ new_response.id }}
                </p>
                <div class="custom-button-box px-3 pb-2 pt-3 mt-3 mb-3">
                  <div
                    v-for="(response, num) in new_response.values"
                    :key="num"
                    class="form-group"
                  >
                    <div class="d-flex">
                      <input
                        class="form-control input-tag"
                        placeholder="Enter response text"
                        style="width: 100%; padding: 0.375rem 0.5rem"
                        type="text"
                        v-model="new_response.values[num]"
                        v-on:keyup.enter="
                          add_to_assistant_response_text_list(
                            'add',
                            new_response.id
                          )
                        "
                      />
                      <span style="margin-left: 12px; color: #0645AD;"
                        class="my-auto"
                        v-if="check_slot_value_use_in_response(new_response.values[num])"
                      >
                        <i
                          class="fa fa-info-circle"
                          aria-hidden="true"
                          style="font-size: 16px"
                          title="You have used {} in the response, which is used to access slot value, i.e it would add the value gathered by slot if enabled in previous or current node. (example: Email: {$email_id} would print Email: test@mail.com)."
                        >
                        </i>
                      </span>
                      <span
                        v-if="new_response.values.length > 1"
                        title="Remove Text Response"
                        class="close my-auto"
                        style="cursor: pointer; margin-left: 12px"
                        @click="
                          add_to_assistant_response_text_list(
                            'remove',
                            new_response.id,
                            num
                          )
                        "
                      >
                        &times;
                      </span>
                    </div>
                  </div>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      Add value
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_text_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                  <div class="response-variations">
                    <span
                      >Response variations are set to
                      <strong>{{ new_response.variation }}</strong
                      >.</span
                    >
                    Set to
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'sequential'
                        )
                      "
                      v-show="new_response.variation != 'sequential'"
                      href="javascript:void(0);"
                      class="response-variation"
                    >
                      sequential
                    </a>
                    <span v-show="new_response.variation != 'sequential'">
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(
                          new_response.id,
                          'multiline'
                        )
                      "
                      v-show="new_response.variation != 'multiline'"
                      href="javascript:void(0);"
                      class="variation-multiline"
                    >
                      multiline
                    </a>
                    <span
                      v-show="
                        new_response.variation != 'random' &&
                        new_response.variation != 'multiline'
                      "
                    >
                      |
                    </span>
                    <a
                      @click="
                        select_response_variation(new_response.id, 'random')
                      "
                      v-show="new_response.variation != 'random'"
                      href="javascript:void(0);"
                      class="variation-random"
                    >
                      random
                    </a>
                  </div>
                </div>
              </div>
              <div v-if="new_response.type == 'image'">
                <p class="sub_heading">Image Response :</p>
                <!-- <p>Enter Name (Optional)</p>
                    <input class="form-control input-tag" type="text" v-model="new_response.image_name"> -->
                <!-- <p class="mb-0">Image source :</p> -->
                <div class="custom-button-box px-3 py-3 mt-3 mb-3">
                  <input
                    class="form-control input-tag"
                    style="width: 100%; padding: 0.375rem 0.5rem"
                    placeholder="Add Image url"
                    type="text"
                    v-model="new_response.source"
                    @focusout="check_image_url(new_response.source)"
                    @keydown="check_image_url(new_response.source)"
                    @keyup="check_image_url(new_response.source)"
                  />
                  <p
                    v-show="!valid_image_url"
                    style="
                      color: red !important;
                      margin-bottom: 0px !important;
                      padding-top: 8px !important;
                    "
                  >
                    Please enter a valid image URL in png or jpg format only.
                  </p>
                </div>
              </div>
              <div v-if="new_response.type == 'choices'">
                <p class="sub_heading">
                  Choice Response : {{ new_response.id }}
                </p>
                <!-- <div>
                  <input
                    class="form-control input-tag"
                    placeholder="Enter response text"
                    style="width: 100%"
                    type="text"
                    v-model="new_response.title"
                  />
                </div> -->
                <div class="custom-button-box px-3 py-2 mt-3 mb-3">
                  <template>
                    <div style="display: block; margin-bottom: 1rem">
                      <div
                        v-for="(response, num) in new_response.choices"
                        :key="num"
                        class="custom-button-box px-3 py-3 mt-3 mb-3"
                        style=""
                      >
                        <label class="mt-0 choice-label" style=""
                          >Title:</label
                        >
                        <span
                          style="cursor: pointer; float: right"
                          class="close ml-auto mr-0"
                          title="Remove Choice Response"
                          v-if="new_response.choices.length > 1"
                          @click="
                            add_to_assistant_response_choice_list(
                              'remove',
                              new_response.id,
                              num
                            )
                          "
                        >
                          &times;</span
                        >
                        <input
                          type="text"
                          v-model.trim="response.title"
                          class="form-control input-tag"
                          placeholder="title of the button"
                          style="width: 100% !important; padding: 0.375rem 0.5rem"
                        />
                        <div class="mt-2 mb-2">
                          <label class="choice-label" style="">Value:</label>
                        </div>
                        <input
                          type="text"
                          v-model.trim="response.payload"
                          class="form-control input-tag"
                          placeholder="value to be passed when clicked on button"
                          style="width: 100% !important; padding: 0.375rem 0.5rem"
                        />
                      </div>
                    </div>
                  </template>
                  <div class="d-flex">
                    <p style="margin-top: 6px; margin-bottom: 5px">
                      Add choice
                    </p>
                    <button
                      style="
                        cursor: pointer;
                        border: none;
                        background: transparent
                          url('@portal/assets/img/plus.png') 0% 0% no-repeat
                          padding-box;
                      "
                      @click="
                        add_to_assistant_response_choice_list(
                          'add',
                          new_response.id
                        )
                      "
                    >
                      <img src="/img/black_plus.png" alt="" />
                    </button>
                  </div>
                </div>
              </div>
              <hr style="margin: 10px 0px" />
              <!-- <vue-editor
                WHILE SAVING DETAILS ADD VALIDATION ADDNODE()
                  v-model="assistant_response[index]"
                  :editorToolbar="customToolbar"
                ></vue-editor> -->
            </div>
            <div class="d-flex">
              <p class="sub_heading">Select a response type first :</p>
              <select
                class="form-control input-tag"
                v-model="selected_response_type"
                style="
                  width: 100px;
                  height: 25px;
                  margin-left: 10px;
                  padding: 0px;
                "
                id="res_n_int_source"
              >
                <option
                  v-for="(option, index) in assistant_response_type"
                  :key="index"
                  :value="option"
                >
                  {{ option }}
                </option>
              </select>
              <!-- </div> -->
              <!-- <div class="d-flex"> -->
              <p class="sub_heading" style="margin-left: 20px">
                Add response
              </p>
              <button
                style="
                  margin-top: -14px;
                  cursor: pointer;
                  border: none;
                  background: transparent url('@portal/assets/img/plus.png')
                    0% 0% no-repeat padding-box;
                "
                @click="add_notification_successful_to_assistant_response('unsuccessful')"
                
              >
                <img src="/img/black_plus.png" alt="" />
              </button>
            </div>
          </div>
        </div>
        <!-- <div class="modal-footer">
          <a href="#" data-dismiss="modal" class="btn">Close</a>
          <a href="#" class="btn btn-primary">Save changes</a>
        </div> -->
      </div>
    </div>
  </div>
</div>
"},null]}