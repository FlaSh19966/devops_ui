{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/User Management/Permissions.vue?vue&type=style&index=1&id=32ca4828&scoped=true&lang=css&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/User Management/Permissions.vue","mtime":1663910265482},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCnRkID4gLm11bHRpc2VsZWN0X190YWcgew0KICBwYWRkaW5nOiA0cHggOXB4IDRweCAxMHB4Ow0KfQ0KLm11bHRpc2VsZWN0X19vcHRpb25bZGF0YS1zZWxlY3Q9IlByZXNzIGVudGVyIHRvIHNlbGVjdCJdID4gc3BhbiB7DQogIG1hcmdpbi1sZWZ0OiAxMCU7DQp9DQovKiAjc2VsZWN0X3JvbGVfbmFtZXsNCiAgICB3aWR0aDogMTA1JTsNCiAgICBtYXJnaW4tbGVmdDogLTIlOw0KfSAqLw0KLnJhZGlvIGxhYmVsIHsNCiAgICBtYXJnaW4tdG9wOiAuM3JlbSAhaW1wb3J0YW50Ow0KICB9DQo="},{"version":3,"sources":["Permissions.vue"],"names":[],"mappingsskEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Permissions.vue","sourceRoot":"src/portal/Chatbot/Dashboard/User Management","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"spinner\" id=\"spinner\" v-show=\"spinnerOn\"></div>\r\n    <div class=\"dash-cont\">\r\n      <div class=\"container-fluid\">\r\n        <div class=\"card dash-card\">\r\n          <div\r\n            class=\"card-header d-block d-sm-flex flex-wrap justify-content-between\"\r\n          > \r\n            <div class=\"d-sm-flex justify-content-start\">\r\n              <h4 class=\"mb-sm-0 mr-3\">{{tlt('permission_page_title')}}</h4>\r\n              <div class=\"radio my-auto\">\r\n                <label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    v-model=\"filter_user_type\"\r\n                    value=\"Portal\"\r\n                    id=\"filter_portal_box\"\r\n                  />\r\n                  <span class=\"icn\" id=\"filter_portal_user_radio\"></span>\r\n                  {{tlt('permission_page_portal_label')}}\r\n                </label>\r\n                <label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    v-model=\"filter_user_type\"\r\n                    value=\"Bot\"\r\n                    id=\"filter_bot_box\"\r\n                  />\r\n                  <span class=\"icn\"></span> {{tlt('permission_page_bot_label')}}\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <div class=\"card-act d-flex flex-wrap justify-content-end\">\r\n              <!-- <a href=\"#\" class=\"red-btn\" @click=\"delete_selected\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\r\n                  <path\r\n                    id=\"trash-can-outline\"\r\n                    d=\"M8.375,3v.778H4V5.333h.875V15.444A1.661,1.661,0,0,0,6.625,17h8.75a1.661,1.661,0,0,0,1.75-1.556V5.333H18V3.778H13.625V3H8.375M6.625,5.333h8.75V15.444H6.625V5.333m1.75,1.556v7h1.75v-7H8.375m3.5,0v7h1.75v-7Z\"\r\n                    transform=\"translate(-4 -3)\"\r\n                    fill=\"#fff\"\r\n                  ></path>\r\n                </svg>\r\n                Delete\r\n              </a>-->\r\n\r\n              <!-- for search -harsh -->\r\n              <!-- <input\r\n                class=\"form-control search-bar\"\r\n                id=\"search_bar\"\r\n                placeholder=\"Search here\"\r\n                v-model=\"search_name\"\r\n                v-on:keyup=\"callsearch\"\r\n              />\r\n              <a type=\"button\" v-if=\"isVisibleSearchClear\" class=\"btn bg-transparent mt-auto mb-auto py-0\" \r\n                @click=\"clear_search_name\" style=\"margin-left: -40px; z-index: 10;\">\r\n                <img src=\"/img/close-icn.png\" alt />\r\n              </a>\r\n              <a\r\n                href=\"#\"\r\n                class=\"darkblue-btn\"\r\n                @click=\"search_product\"\r\n                id=\"search_btn\"\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n                  width=\"14\"\r\n                  height=\"14\"\r\n                >\r\n                  <path\r\n                    d=\"M13.809011327100071,12.965505435601472 L9.30910012117823,8.49330664854199 C10.007392079586584,7.596111589605521 10.38512817619458,6.499157170138106 10.38512817619458,5.345374656726532 c0,-1.3810948891881802 -0.5423458634784514,-2.676086605733705 -1.523073527148749,-3.6524965835014083 c-0.9807276636702976,-0.9764099777677033 -2.287209392305289,-1.5136937750578685 -3.6751296371814526,-1.5136937750578685 s-2.6944019735111544,0.5390058607430178 -3.6751296371814526,1.5136937750578685 C0.5293349766245179,2.667565987539975 -0.011278152465820316,3.9642797675383576 -0.011278152465820316,5.345374656726532 c0,1.3793728257353273 0.5423458634784514,2.6778086691865575 1.523073527148749,3.6524965835014083 C2.492523038353222,9.974281217995648 3.7972720326001044,10.51156501528581 5.18692501186438,10.51156501528581 c1.160932040033745,0 2.2629511108717475,-0.37540983272197437 3.165705727077092,-1.0676793407689171 l4.499911205921844,4.470476723606628 a0.1420842198250257,0.14120920313395363 0 0 0 0.20099718902076805,0 l0.7554721932159904,-0.7490976019910955 a0.1420842198250257,0.14120920313395363 0 0 0 0,-0.19975936053095905 zM7.931576282630728,8.073123166045836 C7.196896902072058,8.80155600660269 6.2231001759542055,9.20279679111746 5.18692501186438,9.20279679111746 s-2.0099718902076775,-0.4012407845147706 -2.744651270766347,-1.1296736250716286 C1.709327094927478,7.342968262036121 1.3055999824978375,6.37516860153268 1.3055999824978375,5.345374656726532 s0.4037271124296458,-1.99931566876244 1.1366737586002036,-2.727748509319298 C3.1769531216567026,1.8891933068503817 4.150749847774562,1.4879525223356067 5.18692501186438,1.4879525223356067 s2.0117046245957884,0.3995187210619175 2.744651270766347,1.1296736250716286 S9.06825004123093,4.315580711920385 9.06825004123093,5.345374656726532 s-0.4037271124296458,1.99931566876244 -1.1366737586002036,2.727748509319298 z\"\r\n                    fill=\"#fff\"\r\n                  />\r\n                </svg>\r\n              </a> -->\r\n\r\n              <a\r\n                href=\"#\"\r\n                class=\"darkblue-btn\"\r\n                data-toggle=\"modal\"\r\n                @click=\"role_modal('open')\"\r\n                id=\"add_permissions_btn\"\r\n                v-if = \"isShow_portal_roles == false\"\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"14\"\r\n                  height=\"13.997\"\r\n                  viewBox=\"0 0 14 13.997\"\r\n                >\r\n                  <path\r\n                    id=\"Union_13\"\r\n                    data-name=\"Union 13\"\r\n                    d=\"M-12684,2058v-5h-5a1,1,0,0,1-1-1,1,1,0,0,1,1-1h5v-5a1,1,0,0,1,1-1,1,1,0,0,1,1,1v5h5a1,1,0,0,1,1,1,1,1,0,0,1-1,1h-5v5a1,1,0,0,1-1,1A1,1,0,0,1-12684,2058Z\"\r\n                    transform=\"translate(12690.001 -2045.002)\"\r\n                    fill=\"#fff\"\r\n                  />\r\n                </svg>\r\n                {{tlt('add_permission_btn')}}\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"table-box\">\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <!-- <th scope=\"col\">\r\n                        <div class=\"form-check checkbox checkbox-success\">\r\n                          <label class=\"form-check-label\">\r\n                            <input\r\n                              id=\"selectall\"\r\n                              class=\"form-check-input\"\r\n                              @change=\"selected_roles('all')\"\r\n                              type=\"checkbox\"\r\n                              value\r\n                              required\r\n                            />\r\n                            <span class=\"icn\"></span>\r\n                          </label>\r\n                        </div>\r\n                      </th> -->\r\n                      <th scope=\"col\" style=\"width: 7%\">{{tlt('portal_user_action_header')}}</th>\r\n                      <th scope=\"col\">{{tlt('portal_user_role_name_header')}}</th>\r\n                      <th scope=\"col\">{{tlt('portal_user_user_type_header')}}</th>\r\n                      <th scope=\"col\" class=\"w-50\">{{tlt('portal_user_permissions_header')}}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-if=\"page_no == 1 && isShow_portal_roles == true\">\r\n                      <!-- <th scope=\"row\">\r\n                        <div class=\"form-check checkbox checkbox-success\">\r\n                          <label class=\"form-check-label\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" />\r\n                            <span class=\"icn\"></span>\r\n                          </label>\r\n                        </div>\r\n                      </th> -->\r\n                      <td class=\"action\"></td>\r\n                      <td>{{tlt('portal_user_admin_label')}}</td>\r\n                      <td>{{tlt('portal_user_type_label')}}</td>\r\n                      <td>{{tlt('portal_user_text')}}</td>\r\n                    </tr>\r\n\r\n                    <tr v-for=\"(role, index) in roles\" :key=\"index\">\r\n                      <!-- <th scope=\"row\">\r\n                        <div class=\"form-check checkbox checkbox-success\">\r\n                          <label class=\"form-check-label\">\r\n                            <input\r\n                              class=\"form-check-input\"\r\n                              @change=\"selected_roles(index)\"\r\n                              :id=\"'check_' + index\"\r\n                              type=\"checkbox\"\r\n                            />\r\n                            <span class=\"icn\"></span>\r\n                          </label>\r\n                        </div>\r\n                      </th> -->\r\n                      <td class=\"action\">\r\n                        <a\r\n                          class=\"#\"\r\n                          id=\"edit_btn\"\r\n                          style=\"cursor: pointer\"\r\n                          data-toggle=\"modal\"\r\n                          @click=\"edit_modal(index)\"\r\n                          data-target=\"#intentmodal\"\r\n                        >\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"15.392\"\r\n                            height=\"15.392\"\r\n                            viewBox=\"0 0 15.392 15.392\"\r\n                          >\r\n                            <path\r\n                              id=\"square-edit-outline\"\r\n                              d=\"M4.71,3A1.7,1.7,0,0,0,3,4.71V16.682a1.71,1.71,0,0,0,1.71,1.71H16.682a1.71,1.71,0,0,0,1.71-1.71V10.7h-1.71v5.986H4.71V4.71H10.7V3H4.71m10.928.855a.591.591,0,0,0-.41.171L14.185,5.061,16.322,7.2l1.043-1.035a.578.578,0,0,0,0-.812L16.04,4.026a.571.571,0,0,0-.4-.171M13.578,5.668l-6.3,6.311v2.138H9.413l6.3-6.311Z\"\r\n                              transform=\"translate(-3 -3)\"\r\n                              fill=\"#9499ae\"\r\n                            />\r\n                          </svg>\r\n                        </a>\r\n                        <!-- <a href=\"#\" class=\"trash\" @click=\"delete_role(index)\">\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"13.682\"\r\n                            height=\"15.392\"\r\n                            viewBox=\"0 0 13.682 15.392\"\r\n                          >\r\n                            <path\r\n                              id=\"trash-can-outline\"\r\n                              d=\"M8.276,3v.855H4v1.71h.855V16.682a1.71,1.71,0,0,0,1.71,1.71h8.551a1.71,1.71,0,0,0,1.71-1.71V5.565h.855V3.855H13.406V3H8.276M6.565,5.565h8.551V16.682H6.565V5.565m1.71,1.71v7.7h1.71v-7.7H8.276m3.42,0v7.7h1.71v-7.7Z\"\r\n                              transform=\"translate(-4 -3)\"\r\n                              fill=\"#f23d3d\"\r\n                            ></path>\r\n                          </svg>\r\n                        </a>-->\r\n                      </td>\r\n                      <td>{{ role.user_role }}</td>\r\n                      <td>{{ role.user }}</td>\r\n                      <td>\r\n                        <span\r\n                          class=\"multiselect__tag\"\r\n                          v-for=\"(permission, index) in role.permissions\"\r\n                          :key=\"index\"\r\n                          >{{ permission }} &nbsp;</span\r\n                        >\r\n                        <span\r\n                          v-show=\"\r\n                            role.permissions.length == 0 &&\r\n                            role.user == 'Portal User'\r\n                          \"\r\n                          >Please enable access of portal menu to this\r\n                          role.</span\r\n                        >\r\n                        <span\r\n                          v-show=\"\r\n                            role.permissions.length == 0 &&\r\n                            role.user == 'Bot User'\r\n                          \"\r\n                          >Please enable the task which will be accessible by\r\n                          this bot user.</span\r\n                        >\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div\r\n                class=\"modal fade dash-modal\"\r\n                id=\"intentmodal\"\r\n                tabindex=\"-1\"\r\n                role=\"dialog\"\r\n                aria-labelledby=\"intentmodeltitle\"\r\n                aria-hidden=\"true\"\r\n                data-keyboard=\"false\"\r\n                data-backdrop=\"static\"\r\n              >\r\n                <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                  <div class=\"modal-content\">\r\n                    <div class=\"modal-body\">\r\n                      <div class=\"modal-head d-flex align-items-center\">\r\n                        <div class=\"head-icn\">\r\n                          <img src=\"/img/msg-blue.png\" alt />\r\n                        </div>\r\n                        <h3>{{tlt('permission_model_header')}}</h3>\r\n                      </div>\r\n                      <!-- <button\r\n                        type=\"button\"\r\n                        class=\"close\"\r\n                        data-dismiss=\"modal\"\r\n                        @click=\"clear_fields\"\r\n                        aria-label=\"Close\"\r\n                      >\r\n                        <img src=\"/static/img/close-icn.png\" alt>\r\n                      </button>-->\r\n                      <button\r\n                        @click=\"clear_fields\"\r\n                        type=\"button\"\r\n                        class=\"close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                      >\r\n                        <img src=\"/img/close-icn.png\" alt />\r\n                      </button>\r\n                      <div class=\"radio\" style=\"margin-left: 25%\">\r\n                        <label\r\n                        :style=\"user_type === 'Portal'? \r\n                          '':'cursor: not-allowed'\">\r\n                          <input\r\n                            type=\"radio\"\r\n                            @change=\"role_modal('toggle')\"\r\n                            v-model=\"user_type\"\r\n                            value=\"Portal\"\r\n                            id=\"portal_box\"\r\n                            :disabled=\"this.user_type_change != true\"\r\n                          />\r\n                          <span class=\"icn\" id=\"portal_user_radio\"\r\n                          :style=\"user_type === 'Portal'? \r\n                          '':'background: rgb(244 244 244); cursor: not-allowed'\"></span>\r\n                          {{tlt('permission_model_portal_user_label')}}\r\n                        </label>\r\n                        <label\r\n                        :style=\"user_type === 'Bot'? \r\n                          '':'cursor: not-allowed'\">\r\n                          <input\r\n                            type=\"radio\"\r\n                            @change=\"role_modal('toggle')\"\r\n                            id=\"bot_box\"\r\n                            v-model=\"user_type\"\r\n                            value=\"Bot\"\r\n                            :disabled=\"this.user_type_change != true\"\r\n                          />\r\n                          <span class=\"icn\"\r\n                          :style=\"user_type === 'Bot'? \r\n                          '':'background: rgb(244 244 244); cursor: not-allowed'\"></span> {{tlt('permission_model_bot_user_label')}}\r\n                        </label>\r\n                      </div>\r\n                      <form  id=\"permissions_form\">\r\n                        <div\r\n                          class=\"form-group\"\r\n                          v-if=\"user_type == 'Bot' && bot_roles.length > 0\"\r\n                        >\r\n                          <label>{{tlt('permission_model_role_name_label')}}</label>\r\n                          <!-- <select\r\n                            v-model=\"selected_role\"\r\n                            class=\"form-control\"\r\n                            id=\"select_role_name\"\r\n                          >\r\n                            <option value disabled>Select Role Name</option>\r\n                            <option\r\n                              v-for=\"(role, index) in bot_roles\"\r\n                              :key=\"index\"\r\n                            >\r\n                              {{ role.role }}\r\n                            </option>\r\n                          </select> -->\r\n                          <multiselect\r\n                            v-model=\"selected_role\"\r\n                            :options=\"bot_roles\"\r\n                            id=\"select_role_name\"\r\n                            :searchable=\"true\"\r\n                            :close-on-select=\"true\"\r\n                            :taggable=\"false\"\r\n                            :multiple=\"false\"\r\n                            :placeholder=\"tlt('select_role_msg')\"\r\n                            :max-height=\"200\"\r\n                            :disabled=\"this.select_role_name_disable ==true\"\r\n                          >\r\n                          <!-- <span>{{ selected_role }}</span> -->\r\n                          </multiselect>\r\n                        </div>\r\n                        <div\r\n                          class=\"form-group\"\r\n                          v-if=\"\r\n                            user_type == 'Portal' && portal_roles.length > 0\r\n                          \"\r\n                        >\r\n                          <label>{{tlt('permission_model_portal_role_label')}}</label>\r\n                          <!-- <select\r\n                            v-model=\"selected_role\"\r\n                            class=\"form-control\"\r\n                            id=\"select_role_name\"\r\n                          >\r\n                            <option value disabled>Select Role Name</option>\r\n                            <option\r\n                              v-for=\"(role, index) in portal_roles\"\r\n                              :key=\"index\"\r\n                            >\r\n                              {{ role.role }}\r\n                            </option>\r\n                          </select> -->\r\n                          <multiselect\r\n                            v-model=\"selected_role\"\r\n                            :options=\"portal_roles\"\r\n                            id=\"select_role_name\"\r\n                            :searchable=\"true\"\r\n                            :close-on-select=\"true\"\r\n                            :taggable=\"false\"\r\n                            :multiple=\"false\"\r\n                            :placeholder=\"tlt('select_role_msg')\"\r\n                            :max-height=\"200\"\r\n                            :disabled=\"this.select_role_name_disable ==true\"\r\n                          >\r\n                          <!-- <span>{{ selected_role }}</span> -->\r\n                          </multiselect>\r\n                        </div>\r\n                        <div\r\n                          class=\"form-group\"\r\n                          v-if=\"check_portal_bot_role_length\"\r\n                        >\r\n                          <label>{{ permissions_title }}</label>\r\n                          <multiselect\r\n                            id=\"role_select\"\r\n                            :close-on-select=\"false\"\r\n                            v-if=\"user_type == 'Portal'\"\r\n                            :taggable=\"true\"\r\n                            :multiple=\"true\"\r\n                            :options=\"permissions_list\"\r\n                            :placeholder=\"tlt('select_permission')\"\r\n                            group-values=\"menu_list\"\r\n                            group-label=\"title\"\r\n                            :group-select=\"true\"\r\n                            track-by=\"sub_menu\"\r\n                            label=\"sub_menu\"\r\n                            v-model=\"selected_permissions\"\r\n                            @remove=\"remove_selected_permission\"\r\n                          >\r\n                            <template slot=\"option\" slot-scope=\"props\">\r\n                              <span\r\n                                v-show=\"props.option.$groupLabel === undefined\"\r\n                              >\r\n                                <!-- <svg\r\n                                  :style=\"svg_enable(props.option.sub_menu)\"\r\n                                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                                  style=\"fill:#fff;position: relative\"\r\n                                  width=\"24\"\r\n                                  height=\"24\"\r\n                                  viewBox=\"0 0 24 24\"\r\n                                >\r\n                                  <path d=\"M0 0h24v24H0z\" fill=\"#41b883\"></path>\r\n                                  <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"></path>\r\n                                </svg>-->\r\n                                {{ props.option.sub_menu }}\r\n                              </span>\r\n                              <span\r\n                                v-show=\"props.option.sub_menu === undefined\"\r\n                                >{{ props.option.$groupLabel }}</span\r\n                              >\r\n                            </template>\r\n                            <!-- <template\r\n                              slot=\"option\"\r\n                              slot-scope=\"props\"\r\n                            ></template>-->\r\n                          </multiselect>\r\n                          <multiselect\r\n                            :close-on-select=\"false\"\r\n                            v-if=\"user_type == 'Bot'\"\r\n                            :taggable=\"true\"\r\n                            :multiple=\"true\"\r\n                            :options=\"permissions_list\"\r\n                            :placeholder=\"tlt('select_permission')\"\r\n                            track-by=\"permissions\"\r\n                            label=\"to_be_displayed\"\r\n                            group-label=\"Type\"\r\n                            group-values=\"Details\"\r\n                            :group-select=\"true\"\r\n                            v-model=\"selected_permissions\"\r\n                          ></multiselect>\r\n                        </div>\r\n                        <div class=\"btn-wrap text-right\">\r\n                          <button\r\n                            type=\"button\"\r\n                            @click=\"clear_fields\"\r\n                            class=\"btn btn-link\"\r\n                            data-dismiss=\"modal\"\r\n                          >\r\n                            {{tlt('permission_page_edit_cancel_btn')}}\r\n                          </button>\r\n                          <button\r\n                            id=\"save_permissions\"\r\n                            type=\"submit\"\r\n                            class=\"darkblue-btn\"\r\n                            @click.prevent=\"save_role\"\r\n                          >\r\n                            {{tlt('save_btn')}}\r\n                          </button>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"pagin-table\" style=\"margin: 0\">\r\n                <nav aria-label=\"Page navigation example\">\r\n                  <ul class=\"pagination justify-content-center\">\r\n                    <li class=\"page-item\">\r\n                      <a\r\n                        class=\"page-link\"\r\n                        href=\"#\"\r\n                        @click=\"page_require(page_no - 1)\"\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"8.667\"\r\n                          height=\"15.204\"\r\n                          viewBox=\"0 0 8.667 15.204\"\r\n                        >\r\n                          <g\r\n                            id=\"arrow-point-to-left\"\r\n                            transform=\"translate(105.806 15.204) rotate(180)\"\r\n                          >\r\n                            <path\r\n                              id=\"Path_1136\"\r\n                              data-name=\"Path 1136\"\r\n                              d=\"M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z\"\r\n                              transform=\"translate(0 0)\"\r\n                              fill=\"#9499ae\"\r\n                            />\r\n                          </g>\r\n                        </svg>\r\n                      </a>\r\n                    </li>\r\n                    <li\r\n                      :class=\"'page-item ' + pagination_class(pageno)\"\r\n                      v-for=\"pageno in page_array\"\r\n                      :key=\"pageno\"\r\n                    >\r\n                      <a\r\n                        v-if=\"pageno == '...s' || pageno == '...l'\"\r\n                        class=\"page-link\"\r\n                        href=\"#\"\r\n                        @click=\"page_require(pageno)\"\r\n                        >...</a\r\n                      >\r\n                      <a\r\n                        v-if=\"pageno != '...s' && pageno != '...l'\"\r\n                        class=\"page-link\"\r\n                        href=\"#\"\r\n                        @click=\"page_require(pageno)\"\r\n                        >{{ pageno }}</a\r\n                      >\r\n                      <!-- <a class=\"page-link\" href=\"#\" @click=\"page_require(pageno)\">{{pageno}}</a> -->\r\n                    </li>\r\n                    <li class=\"page-item\">\r\n                      <a\r\n                        class=\"page-link\"\r\n                        href=\"#\"\r\n                        @click=\"page_require(page_no + 1)\"\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"8.667\"\r\n                          height=\"15.204\"\r\n                          viewBox=\"0 0 8.667 15.204\"\r\n                        >\r\n                          <g\r\n                            id=\"arrow-point-to-right\"\r\n                            transform=\"translate(-97.139 0)\"\r\n                          >\r\n                            <path\r\n                              id=\"Path_1136\"\r\n                              data-name=\"Path 1136\"\r\n                              d=\"M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z\"\r\n                              transform=\"translate(0 0)\"\r\n                              fill=\"#9499ae\"\r\n                            />\r\n                          </g>\r\n                        </svg>\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </nav>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Multiselect from \"vue-multiselect\";\r\nimport Swal from \"sweetalert2\";\r\nimport { setTimeout } from \"timers\";\r\nimport sidebaritems from \"../Layout/SideBarItem\";\r\nimport api_calls from \"@/portal/api_calls\";\r\nimport { close_modal } from \"@/portal/mixins\";\r\n\r\n\r\nexport default {\r\n  name: \"permissions\",\r\n  components: {\r\n    Multiselect,\r\n  },\r\n    mixins: [close_modal],\r\n\r\n  data() {\r\n    return {\r\n      user: [],\r\n      roles: [],\r\n      page_no: 1,\r\n      per_page: 10,\r\n      selected_role: \"\",\r\n      selected_permissions: [],\r\n      role_list: [],\r\n      complete_role_list: [],\r\n      permissions_list: [],\r\n      portal_permissions_list: [],\r\n      bot_permissions_list: [],\r\n      intentlist: [],\r\n      checked_list: [],\r\n      number_of_rows: null,\r\n      total_pages: null,\r\n      user_type: \"Portal\",\r\n      menu_list_from_api: null,\r\n      spinnerOn: false,\r\n      companyid:\r\n        this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\r\n          ? this.$session.get(\"CompanyId\")\r\n          : this.$session.get(\"UserInformation\").company_id,\r\n      companyname:\r\n        this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\r\n          ? this.$session.get(\"CompanyName\")\r\n          : this.$session.get(\"UserInformation\").company_name,\r\n      user_role: this.$session.get(\"UserInformation\").role,\r\n      //harsh\r\n      page_array: [],\r\n      search_name: \"\",\r\n      portal_roles: [],\r\n      bot_roles: [],\r\n      isShow_portal_roles: true,\r\n      isShow_bot_roles: false,\r\n      isVisibleSearchClear: false,\r\n      select_role_name_disable: false,\r\n      filter_user_type: \"Portal\",\r\n      user_type_change: true, \r\n    };\r\n  },\r\n  computed: {\r\n    permissions_title() {\r\n      if (this.user_type == \"Portal\") {\r\n        return this.tlt('portal_menu_label');\r\n      } else if (this.user_type == \"Bot\") {\r\n        return this.tlt('bot_intent_label');\r\n      }\r\n    },\r\n    check_portal_bot_role_length() {\r\n      if (this.user_type == \"Portal\" && this.portal_roles.length > 0) {\r\n        return true;\r\n      } else if (this.user_type == \"Portal\" && this.portal_roles.length == 0) {\r\n        return false;\r\n      } else if (this.user_type == \"Bot\" && this.bot_roles.length > 0) {\r\n        return true;\r\n      } else if (this.user_type == \"Bot\" && this.bot_roles.length == 0) {\r\n        //console.log(\"emplty bot\")\r\n        return false;\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.load_permission();\r\n  },\r\n  mounted() {\r\n    var vm = this;\r\n    // //console.log(this.page_no);\r\n    $(\"#selectall\").click(function () {\r\n      if ($(this).is(\":checked\")) {\r\n        // $('div:input').prop('checked',true);\r\n        $(\"input:checkbox\").prop(\"checked\", true);\r\n      } else {\r\n        vm.checked_list = [];\r\n        $(\"input:checkbox\").prop(\"checked\", false);\r\n      }\r\n    });\r\n    $(\"#intentmodal\").on(\"hidden.bs.modal\", function (e) {\r\n      vm.clear_fields();\r\n      // vm.user_type = \"Portal\";\r\n      vm.user_type_change = true\r\n      vm.select_role_name_disable = false\r\n    });\r\n    $(\"select .form-control\").on(\"click\", function () {});\r\n  },\r\n  watch:{\r\n        search_name(){\r\n          if (this.search_name === \"\"){\r\n          this.load_permission();\r\n          this.isVisibleSearchClear = false;\r\n          }\r\n          else if (this.search_name !== \"\"){\r\n            this.isVisibleSearchClear = true;\r\n          }\r\n        },\r\n        filter_user_type(){\r\n          if(this.filter_user_type == \"Portal\"){\r\n            this.isShow_portal_roles = true;\r\n            this.isShow_bot_roles = false;\r\n            this.user_type = \"Portal\"\r\n            this.load_permission()\r\n          }else if( this.filter_user_type == \"Bot\"){\r\n            this.isShow_bot_roles = true;\r\n            this.isShow_portal_roles = false;\r\n            this.user_type = \"Bot\"\r\n            this.load_permission();\r\n          }\r\n        },\r\n  },\r\n  methods: {\r\n    clear_search_name(){\r\n      this.search_name = \"\";\r\n    },\r\n    remove_selected_permission(removedOption, id){\r\n      if (removedOption.sub_menu == \"Dashboard\"){\r\n        toastr.warning(this.tlt('permission_cannot_remove_select_msg'));\r\n        this.add_selected_permission(removedOption.sub_menu);\r\n      }\r\n    },\r\n    add_selected_permission(removedOption){\r\n      this.selected_permissions.unshift({\r\n        sub_menu: removedOption,\r\n      })\r\n    },\r\n    load_permission(){\r\n      this.spinnerOn = true;\r\n      this.roles = [];\r\n      this.portal_roles = [];\r\n      this.bot_roles = [];\r\n      this.permissions_list =[];\r\n      this.selected_permissions = [];\r\n      this.intentlist = []\r\n      this.bot_permissions_list = [];\r\n      this.portal_permissions_list = [];\r\n      $(\"input:checkbox\").prop(\"checked\", false);\r\n      if (\r\n        !this.$session.has(\"CompanyId\") &&\r\n        this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\r\n      ) {\r\n        toastr.warning(this.tlt('permission_select_company_name_msg'));\r\n      } else {\r\n        this.companyid = this.$session.get(\"UserInformation\").company_id;\r\n        this.companyname = this.$session.get(\"UserInformation\").company_name;\r\n      }\r\n      if (this.companyname !== undefined) {\r\n        axios\r\n          .post(\r\n            api_calls.role_url(),\r\n            {\r\n              company_id: this.companyid,\r\n              company_name: this.companyname,\r\n              email: this.$session.get(\"UserInformation\").email,\r\n              license_key: this.$session.get(\"UserInformation\").license_key,\r\n              token: this.$session.get(\"UserInformation\").tokens,\r\n              isShow: true,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            // //console.log(response,\"-->load permissions\")\r\n            if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n            this.number_of_rows = response.data.pagination.total_data == undefined ? 0 : response.data.pagination.total_data;\r\n            this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n            this.update_list(response.data.data);\r\n            }\r\n            else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n          Swal({\r\n            type: \"error\",\r\n            text: this.tlt('add_role_internal_server_msg'),\r\n            timer:3000,     \r\n          });\r\n        }else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n          Swal({\r\n            type: \"info\",\r\n            text: this.tlt('no_data_text'),\r\n            timer:3000,  \r\n            toast:true,\r\n            position:\"top-end\",\r\n            showConfirmButton: false,   \r\n          });  \r\n        }else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n\r\n          })\r\n          .catch((e) => {\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n        axios\r\n          .post(\r\n            api_calls.portal_permissions_url(),\r\n            {\r\n              company_id: this.companyid,\r\n              company_name: this.companyname,\r\n              email: this.$session.get(\"UserInformation\").email,\r\n              license_key: this.$session.get(\"UserInformation\").license_key,\r\n              token: this.$session.get(\"UserInformation\").tokens,\r\n              isDropdown: true,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            //console.log(response.data.data[0].Bot.length,\"-->permission url\")\r\n            if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n              this.complete_role_list = response.data.data;\r\n              if (response.data.data[0].Portal.length > 0) {\r\n                for (let i = 0; i < response.data.data[0].Portal.length; i++) {\r\n                  this.portal_roles.push(\r\n                    response.data.data[0].Portal[i]\r\n                  );\r\n                }\r\n              }\r\n              if (response.data.data[0].Bot.length > 0) {\r\n                for (let i = 0; i < response.data.data[0].Bot.length; i++) {\r\n                  this.bot_roles.push(\r\n                    response.data.data[0].Bot[i]\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n            Swal({\r\n              type: \"error\",\r\n              text: this.tlt('add_role_internal_server_msg'),\r\n              timer:3000,     \r\n            });\r\n          }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n            Swal({\r\n              type: \"info\",\r\n              text: this.tlt('no_data_text'),\r\n              timer:3000, \r\n              toast:true,\r\n              position: \"top-end\",\r\n              showConfirmButton: false,\r\n            });  \r\n          }else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n\r\n           \r\n          })\r\n          .catch((e) => {\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n        axios\r\n          .post(\r\n            api_calls.portal_permissions_url(),\r\n            {\r\n              company_id: this.companyid,\r\n              company_name: this.companyname,\r\n              email: this.$session.get(\"UserInformation\").email,\r\n              license_key: this.$session.get(\"UserInformation\").license_key,\r\n              token: this.$session.get(\"UserInformation\").tokens,\r\n              isGetMenu: true,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n              this.menu_list_from_api = response.data.data.Menu;\r\n            let message = response.data.data.Menu;\r\n            // //console.log(message);\r\n            let menu = {};\r\n            let main_menu_list = message.filter((arr) => (arr.IsMasterMenu == true) && (arr.Enabled == true));\r\n            let main_menu_list_filtered = []\r\n            let sub_menu_list = message.filter((arr) => (arr.HasSubMenus == false) && (arr.Enabled == true) && (arr.IsSubMenu == true));\r\n\r\n            for (let i =0, n = main_menu_list.length; i < n; i += 1) {\r\n              let menuFilter = sidebaritems.filter((sidebar) => {\r\n                  return (\r\n                    sidebar.name === main_menu_list[i].MenuItem && Boolean(sidebar.svg_html)\r\n                  );\r\n                });\r\n              if (menuFilter.length > 0) {\r\n                  main_menu_list_filtered.push(menuFilter[0]);\r\n                  menu[menuFilter[0].name] = {\r\n                    title: menuFilter[0].name,\r\n                    menu_list: []\r\n                  }\r\n                  if (main_menu_list[i].HasSubMenus == false){\r\n                      menu[menuFilter[0].name].menu_list.push({\r\n                        sub_menu: menuFilter[0].name\r\n                      });\r\n                  }\r\n              }\r\n            }\r\n            try {\r\n              for(let i = 0, n = sub_menu_list.length; i < n; i += 1){\r\n                for (var j in sidebaritems) {\r\n                  if (\r\n                    (sidebaritems[j].name === sub_menu_list[i].MenuItem) &&\r\n                  (Boolean(sidebaritems[j].page_path && sidebaritems[j].master_menu === sub_menu_list[i].MasterMenu))\r\n                ) {\r\n                  // //console.log(sidebaritems[j].name)\r\n                  let temp_var = {\r\n                    sub_menu: sidebaritems[j].name\r\n                  }\r\n                  menu[sub_menu_list[i].MasterMenu].menu_list.push(temp_var)\r\n                }\r\n\r\n                }\r\n              }\r\n            } catch(e) {\r\n              // //console.log(e);\r\n              // debugger;\r\n            }\r\n            menu = Object.values(menu)\r\n            // //console.log(menu);\r\n            // menu = [];\r\n            // var title = [];\r\n            // var submenus = [];\r\n            // for (let i = 0, n = response.data.Menu.length; i < n; i += 1) {\r\n            //   if (\r\n            //     response.data.Menu[i].HasSubMenus == false &&\r\n            //     response.data.Menu[i].IsMasterMenu\r\n            //   ) {\r\n            //     for (var j in sidebaritems) {\r\n            //       if (sidebaritems[j].name === response.data.Menu[i].MenuItem) {\r\n            //         title = sidebaritems[j].name;\r\n            //         submenus.push({\r\n            //           sub_menu: sidebaritems[j].name,\r\n            //         });\r\n            //         if (response.data.Menu[i].Enabled) {\r\n            //           this.selected_permissions.push({\r\n            //             sub_menu: sidebaritems[j].name,\r\n            //           });\r\n            //         }\r\n            //       }\r\n            //     }\r\n            //   } else if (\r\n            //     response.data.Menu[i].HasSubMenus == true &&\r\n            //     response.data.Menu[i].IsMasterMenu\r\n            //   ) {\r\n            //     for (var j in sidebaritems) {\r\n            //       if (sidebaritems[j].name === response.data.Menu[i].MenuItem) {\r\n            //         title = sidebaritems[j].name;\r\n            //       }\r\n            //     }\r\n            //   } else if (\r\n            //     response.data.Menu[i].HasSubMenus == false &&\r\n            //     response.data.Menu[i].IsSubMenu\r\n            //   ) {\r\n            //     for (var j in sidebaritems) {\r\n            //       if (sidebaritems[j].name === response.data.Menu[i].MenuItem) {\r\n            //         if (response.data.Menu[i].Enabled) {\r\n            //           this.selected_permissions.push({\r\n            //             sub_menu: sidebaritems[j].name,\r\n            //           });\r\n            //         }\r\n            //         submenus.push({\r\n            //           sub_menu: sidebaritems[j].name,\r\n            //         });\r\n            //       }\r\n            //     }\r\n            //   }\r\n            //   if (i === n - 1) {\r\n            //     menu.push({\r\n            //       title: title,\r\n            //       menu_list: submenus,\r\n            //     });\r\n            //     title = [];\r\n            //     submenus = [];\r\n            //   } else if (\r\n            //     i < n - 1 &&\r\n            //     response.data.Menu[i + 1].HasSubMenus == true &&\r\n            //     response.data.Menu[i + 1].IsMasterMenu\r\n            //   ) {\r\n            //     menu.push({\r\n            //       title: title,\r\n            //       menu_list: submenus,\r\n            //     });\r\n            //     title = [];\r\n            //     submenus = [];\r\n            //   }\r\n            // }\r\n            // //console.log(menu);\r\n            this.portal_permissions_list = menu;\r\n            }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n            Swal({\r\n              type: \"error\",\r\n              text: this.tlt('add_role_internal_server_msg'),\r\n              timer:3000,     \r\n            });\r\n          }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n            Swal({\r\n              type: \"info\",\r\n              text: this.tlt('no_data_text'),\r\n              timer:3000, \r\n              toast:true,\r\n              position: \"top-end\",\r\n              showConfirmButton: false,    \r\n            });  \r\n          }\r\n          else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n            // //console.log(response,\"portal permissions url\")\r\n            \r\n          })\r\n          .catch((e) => {\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n      }\r\n      axios\r\n        .post(\r\n          api_calls.get_task_list(),\r\n          {\r\n            company_id: this.companyid,\r\n            company_name: this.companyname,\r\n            email: this.$session.get(\"UserInformation\").email,\r\n            license_key: this.$session.get(\"UserInformation\").license_key,\r\n            token: this.$session.get(\"UserInformation\").tokens,\r\n            isGetMenu: true,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n              // //console.log(response,\"get task list\")\r\n            for (var i in response.data.data) {\r\n              this.bot_permissions_list.push({\r\n                permissions: response.data.data[i],\r\n                to_be_displayed: response.data.data[i],\r\n              });\r\n            }\r\n            for (let i = 0; i < this.bot_permissions_list.length; i++) {\r\n              this.bot_permissions_list[\r\n                i\r\n              ].to_be_displayed = this.bot_permissions_list[i].to_be_displayed\r\n                .replace(/_/g, \" \")\r\n                .toLowerCase()\r\n                .split(\" \")\r\n                .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n                .join(\" \");\r\n              this.bot_permissions_list[\r\n                i\r\n              ].to_be_displayed = this.bot_permissions_list[\r\n                i\r\n              ].to_be_displayed.replace(/Form/g, \"\");\r\n            }\r\n            this.update_bot_roles();\r\n          }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n            Swal({\r\n              type: \"error\",\r\n              text: this.tlt('add_role_internal_server_msg'),\r\n              timer:3000,     \r\n            });\r\n          }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n            Swal({\r\n              type: \"info\",\r\n            text: this.tlt('no_data_text'),\r\n            timer:3000,  \r\n            toast:true,\r\n            position:\"top-end\",\r\n            showConfirmButton: false,   \r\n            });  \r\n          }\r\n          else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n          \r\n        })\r\n        .catch((e) => {\r\n          //console.log(e);\r\n          if (\r\n            e.response.status === 410 ||\r\n            e.response.status === 440 ||\r\n            e.response.status === 409\r\n          ) {\r\n            this.$root.$emit(\"Session_Expired\", e.response.data);\r\n          }\r\n        });\r\n      if(this.filter_user_type == \"Portal\"){\r\n        axios\r\n          .post(\r\n            api_calls.portal_permissions_url(),\r\n            {\r\n              company_id: this.companyid,\r\n              company_name: this.companyname,\r\n              email: this.$session.get(\"UserInformation\").email,\r\n              license_key: this.$session.get(\"UserInformation\").license_key,\r\n              token: this.$session.get(\"UserInformation\").tokens,\r\n              isShow: this.isShow_portal_roles,\r\n              per_page: this.per_page,\r\n              page_no: this.page_no,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            this.spinnerOn = false;\r\n            if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n              // //console.log(response , \"portal permissions url\")\r\n              \r\n              this.roles = [];\r\n              var list = response.data.data.RolePermissionData;\r\n              for (var i in list) {\r\n                var permissions = list[i].Menu.filter((menulist) => {\r\n                  if (menulist.Enabled && !menulist.HasSubMenus) {\r\n                    return menulist.MenuItem;\r\n                  }\r\n                });\r\n                var perm_list = [];\r\n                for (var j in permissions) {\r\n                  perm_list.push(permissions[j].MenuItem);\r\n                }\r\n                this.roles.push({\r\n                  user_role: list[i].Role,\r\n                  user: list[i].UserType,\r\n                  permissions: perm_list,\r\n                });\r\n              }\r\n              this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n              this.setpagination(1);\r\n            }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n            Swal({\r\n              type: \"error\",\r\n              text: this.tlt('add_role_internal_server_msg'),\r\n              timer:3000,     \r\n            });\r\n          }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n            Swal({\r\n              type: \"info\",\r\n              text: this.tlt('no_data_text'),\r\n              timer:3000, \r\n              toast:true,\r\n              position: \"top-end\",\r\n              showConfirmButton: false,   \r\n            });  \r\n          }\r\n          else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n\r\n            \r\n          })\r\n          .catch((e) => {\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n      }\r\n      axios\r\n        .post(\r\n          api_calls.show_intent_url(),\r\n          {\r\n            company_id: this.companyid,\r\n            company_name: this.companyname,\r\n            email: this.$session.get(\"UserInformation\").email,\r\n            license_key: this.$session.get(\"UserInformation\").license_key,\r\n            token: this.$session.get(\"UserInformation\").tokens,\r\n            get_intents: true,\r\n            showintent: \"True\",\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => \r\n          {\r\n              if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n                // //console.log(response , \"portal permissions url\")\r\n                // //console.log(response,\"show intent url\")\r\n                for (var i in response.data.data) {\r\n                  this.intentlist.push({\r\n                    // permissions: response.data[i].replace(this.companyid + \"_\", \"\"),\r\n                    // to_be_displayed: response.data[i].replace(this.companyid + \"_\", \"\"),\r\n                    permissions: response.data.data[i],\r\n                    to_be_displayed: response.data.data[i],\r\n                  });\r\n                }\r\n              }\r\n            else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n              Swal({\r\n                type: \"error\",\r\n                text: this.tlt('add_role_internal_server_msg'),\r\n                timer:3000,     \r\n              });\r\n            }\r\n            else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n              Swal({\r\n                type: \"info\",\r\n            text: this.tlt('no_data_text'),\r\n            timer:3000,  \r\n            toast:true,\r\n            position:\"top-end\",\r\n            showConfirmButton: false,   \r\n              });  \r\n            }  else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n          })\r\n          .catch((e) => {\r\n            console.log(e)\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n      },\r\n    svg_enable(value) {\r\n      for (var i in this.selected_role) {\r\n        if (this.selected_role[i].sub_menu == value) {\r\n          return;\r\n        } else {\r\n          return \"display:none\";\r\n        }\r\n      }\r\n    },\r\n    selected_roles(index) {\r\n      if (index == \"all\") {\r\n        if (event.target.checked) {\r\n          var temp = this.roles;\r\n          this.checked_list = temp;\r\n        } else if (!event.target.checked) {\r\n          this.checked_list = [];\r\n        }\r\n      } else {\r\n        if (event.target.checked == true) {\r\n          let val_index = this.checked_list.indexOf(this.roles[index]);\r\n          var temp = this.roles[index];\r\n          if (val_index == -1) {\r\n            this.checked_list.push(temp);\r\n          }\r\n        } else if (event.target.checked == false) {\r\n          var selectall = document.querySelector(\"#selectall\");\r\n          if (selectall.checked == true) {\r\n            selectall.checked = false;\r\n          }\r\n          var temp = this.checked_list.filter((roles) => {\r\n            return role.role !== index;\r\n          });\r\n          this.checked_list = temp;\r\n        }\r\n      }\r\n    },\r\n    role_modal(type) {\r\n      event.preventDefault();\r\n      // debugger;\r\n      // if(type == 'toggle'){\r\n      if (this.user_type === null) {\r\n        // toastr.error(\"Please select either of the User Types\");\r\n      } else {\r\n        this.role_list = this.complete_role_list[this.user_type];\r\n      }\r\n      if (this.user_type == \"Portal\") {\r\n        if (this.portal_roles.length > 0) {\r\n          this.role_list = this.complete_role_list[\"Portal\"];\r\n          this.permissions_list = this.portal_permissions_list;\r\n        } else {\r\n          toastr.error(this.tlt('permission_no_roles_portal_type_msg'));\r\n        }\r\n      } else if (this.user_type == \"Bot\") {\r\n        if (this.bot_roles.length > 0) {\r\n          this.role_list = this.complete_role_list[\"Bot\"];\r\n          this.permissions_list = [\r\n            {\r\n              Type: \"Actions\",\r\n              Details: this.bot_permissions_list,\r\n            },\r\n            {\r\n              Type: \"Intents\",\r\n              Details: this.intentlist,\r\n            },\r\n          ];\r\n          this.selected_permissions = \"\";\r\n        } else {\r\n          Swal.fire({\r\n            text: this.tlt('permission_no_roles_bot_type_msg'),\r\n            type: \"warning\",\r\n            showConfirmButton: true,\r\n            timer: 6000,\r\n          });\r\n          // toastr.warning(\"No Roles Added for Bot User Type. Please Add a Role from the 'Roles' Page to continue adding Permissions.\");\r\n        }\r\n      }\r\n      \r\n      if (type == \"open\") {\r\n        this.selected_role = \"\";\r\n        this.selected_permissions = [];\r\n        this.user_type_change = false;\r\n        // if (this.portal_roles.length > 0 || this.bot_roles.length > 0) {\r\n        if (this.bot_roles.length > 0) {\r\n          // this.clear_fields()\r\n          $(\"#intentmodal\").modal(\"show\");\r\n        } else {\r\n          // toastr.error(\r\n          //   \"Please Add a Role from the 'Roles' Page to continue adding Permissions\"\r\n          // );\r\n        }\r\n      }\r\n    },\r\n    delete_selected() {\r\n      event.preventDefault();\r\n      let rolelist = [],\r\n        restrictionlist = [];\r\n      for (var i in this.roles) {\r\n        rolelist.push(this.roles[index].role);\r\n        restrictionlist.push(this.roles[index].permissions);\r\n      }\r\n      this.delete_qns_api(rolelist, restrictionlist);\r\n    },\r\n    delete_role(index) {\r\n      event.preventDefault();\r\n    },\r\n    edit_modal(index) {\r\n      this.user_type_change = false;\r\n      this.select_role_name_disable = true;\r\n      document.querySelector(\"#portal_box\").disabled = true;\r\n      document.querySelector(\"#bot_box\").disabled = true;\r\n      this.selected_role = this.roles[index].user_role;\r\n      // //console.log(this.roles[index].user_role);\r\n      this.user_type = this.roles[index].user.replace(\" User\", \"\");\r\n      this.selected_permissions = [];\r\n      if (this.user_type == \"Bot\") {\r\n        // this.permissions_list = this.bot_permissions_list;\r\n        this.permissions_list = [\r\n          {\r\n            Type: \"Actions\",\r\n            Details: this.bot_permissions_list,\r\n          },\r\n          {\r\n            Type: \"Intents\",\r\n            Details: this.intentlist,\r\n          },\r\n        ];\r\n      } else if (this.user_type == \"Portal\") {\r\n        this.permissions_list = this.portal_permissions_list;\r\n      }\r\n      for (var j in this.roles[index].permissions) {\r\n        if (this.user_type == \"Bot\") {\r\n          this.selected_permissions.push({\r\n            permissions: this.roles[index].original_permissions[j],\r\n            to_be_displayed: this.roles[index].permissions[j],\r\n          });\r\n        } else if (this.user_type == \"Portal\") {\r\n          this.selected_permissions.push({\r\n            sub_menu: this.roles[index].permissions[j],\r\n          });\r\n        }\r\n      }\r\n      this.role_list = this.complete_role_list[this.user_type];\r\n    },\r\n    page_require(page) {\r\n      if (page == 0 || page == this.total_pages + 1) {\r\n        event.preventDefault();\r\n      } else {\r\n        if (this.search_name == \"\") {\r\n          if (this.filter_user_type == \"Portal\"){\r\n            if (page == \"...s\") {\r\n              this.page_no = Math.ceil((1 + this.page_no) / 2);\r\n            } else if (page == \"...l\") {\r\n              this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);\r\n            } else {\r\n              this.page_no = page;\r\n            }\r\n            $(\"input:checkbox\").prop(\"checked\", false);\r\n            // this.page_no = page;\r\n            this.spinnerOn = true;\r\n              axios\r\n                .post(\r\n                  api_calls.portal_permissions_url(),\r\n                  {\r\n                    role: this.user_role,\r\n                    company_name: this.companyname,\r\n                    email: this.$session.get(\"UserInformation\").email,\r\n                    company_id: this.companyid,\r\n                    license_key: this.$session.get(\"UserInformation\").license_key,\r\n                    token: this.$session.get(\"UserInformation\").tokens,\r\n                    isShow: this.isShow_portal_roles,\r\n                    page_no: this.page_no,\r\n                    per_page: this.per_page,\r\n                  },\r\n                  {\r\n                    headers: {\r\n                      Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n                    },\r\n                  }\r\n                )\r\n                .then((response) => {\r\n                   this.spinnerOn = false;\r\n                  if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n            // //console.log(response , \"portal perm\")\r\n                 \r\n                  this.number_of_rows = response.data.pagination.total_data == undefined ? 0 : response.data.pagination.total_data;\r\n                  this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n                  this.setpagination(this.page_no);\r\n                  var list = response.data.data.RolePermissionData;\r\n                  this.roles = [];\r\n                  for (var i in list) {\r\n                    var permissions = list[i].Menu.filter((menulist) => {\r\n                      if (menulist.Enabled && !menulist.HasSubMenus) {\r\n                        return menulist.MenuItem;\r\n                      }\r\n                    });\r\n                    var perm_list = [];\r\n                    for (var j in permissions) {\r\n                      perm_list.push(permissions[j].MenuItem);\r\n                    }\r\n                    this.roles.push({\r\n                      user_role: list[i].Role,\r\n                      user: list[i].UserType,\r\n                      permissions: perm_list,\r\n                    });\r\n                  }\r\n                  this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n                  this.setpagination(this.page_no);\r\n            }\r\n            else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n          Swal({\r\n            type: \"error\",\r\n            text: this.tlt('add_role_internal_server_msg'),\r\n            timer:3000,     \r\n          });\r\n        }else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n          Swal({\r\n            type: \"info\",\r\n              text: this.tlt('no_data_text'),\r\n              timer:3000, \r\n              toast:true,\r\n              position: \"top-end\",\r\n              showConfirmButton: false,    \r\n          });  \r\n        }else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n\r\n                  \r\n                })     \r\n              .catch((e) => {\r\n                if (\r\n                  e.response.status === 410 ||\r\n                  e.response.status === 440 ||\r\n                  e.response.status === 409\r\n                ) {\r\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\r\n                }\r\n              });\r\n          } else if (this.filter_user_type == \"Bot\") {\r\n            if (page == \"...s\") {\r\n              this.page_no = Math.ceil((1 + this.page_no) / 2);\r\n            } else if (page == \"...l\") {\r\n              this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);\r\n            } else {\r\n              this.page_no = page;\r\n            }\r\n            axios\r\n              .post(\r\n                api_calls.add_edit_bot_role(),\r\n                {\r\n                  company_id: this.companyid,\r\n                  company_name: this.companyname,\r\n                  email: this.$session.get(\"UserInformation\").email,\r\n                  license_key: this.$session.get(\"UserInformation\").license_key,\r\n                  token: this.$session.get(\"UserInformation\").tokens,\r\n                  isShow: this.isShow_bot_roles,\r\n                  per_page: this.per_page,\r\n                  page_no: this.page_no,\r\n                },\r\n                {\r\n                  headers: {\r\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n                  },\r\n                }\r\n              )\r\n              .then((response) => {\r\n                this.spinnerOn = false;\r\n                 if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n            \r\n                this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n                this.setpagination(this.page_no);\r\n                this.roles = [];\r\n                for (var i in response.data.data.BotRolePermissionData) {\r\n                  // let botRoles = this.bot_roles.map(({ role }) => {\r\n                  //   return role;\r\n                  // });\r\n                  // if (botRoles.includes(i)) {\r\n                  if (this.bot_roles.includes(i)) {\r\n                    this.roles.push({\r\n                      user: \"Bot User\",\r\n                      user_role: `${i}`,\r\n                      input_enable: true,\r\n                      permissions: response.data.data.BotRolePermissionData[i].map((res) => {\r\n                        return res\r\n                          .replace(/_/g, \" \")\r\n                          .toLowerCase()\r\n                          .split(\" \")\r\n                          .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n                          .join(\" \");\r\n                      }),\r\n                      original_permissions: response.data.data.BotRolePermissionData[i],\r\n                    });\r\n                  }\r\n                }\r\n                this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n                this.setpagination(this.page_no);\r\n            }\r\n            else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n          Swal({\r\n            type: \"error\",\r\n            text: this.tlt('add_role_internal_server_msg'),\r\n            timer:3000,     \r\n          });\r\n        }else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n          Swal({\r\n            type: \"info\",\r\n            text: this.tlt('no_data_text'),\r\n            timer:3000,  \r\n            toast:true,\r\n            position:\"top-end\",\r\n            showConfirmButton: false, \r\n          });  \r\n        }else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n           \r\n                \r\n              })\r\n              .catch((e) => {\r\n                if (\r\n                  e.response.status === 410 ||\r\n                  e.response.status === 440 ||\r\n                  e.response.status === 409\r\n                ) {\r\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\r\n                }\r\n              });\r\n          }\r\n        } else {\r\n          if (page == \"...s\") {\r\n            this.page_no = Math.ceil((1 + this.page_no) / 2);\r\n          } else if (page == \"...l\") {\r\n            this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);\r\n          } else {\r\n            this.page_no = page;\r\n          }\r\n          this.spinnerOn = true;\r\n          axios\r\n            .post(\r\n              api_calls.portal_permissions_url(),\r\n              {\r\n                company_id: this.$session.get(\"UserInformation\").company_id,\r\n                company_name: this.$session.get(\"UserInformation\").company_name,\r\n                license_key: this.$session.get(\"UserInformation\").license_key,\r\n                email: this.$session.get(\"UserInformation\").email,\r\n                token: this.$session.get(\"UserInformation\").tokens,\r\n                issearch: true,\r\n                key: this.search_name,\r\n                per_page: this.per_page,\r\n                page_no: this.page_no,\r\n              },\r\n              {\r\n                headers: {\r\n                  Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n                },\r\n              }\r\n            )\r\n            .then((response) => {\r\n              // //console.log(\"permission\" , response)\r\n              this.spinnerOn = false;\r\n              if (\r\n                response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE\r\n              ) {\r\n                var list = response.data.data.RolePermissionData;\r\n                this.number_of_rows = response.data.pagination.total_data == undefined ? 0 : response.data.pagination.total_data;\r\n                this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n                this.setpagination(this.page_no);\r\n                this.roles = [];\r\n                for (var i in list) {\r\n                  var permissions = list[i].Menu.filter((menulist) => {\r\n                    if (menulist.Enabled && !menulist.HasSubMenus) {\r\n                      return menulist.MenuItem;\r\n                    }\r\n                  });\r\n                  var perm_list = [];\r\n                  for (var j in permissions) {\r\n                    perm_list.push(permissions[j].MenuItem);\r\n                  }\r\n                  this.roles.push({\r\n                    user_role: list[i].Role,\r\n                    user: list[i].UserType,\r\n                    permissions: perm_list,\r\n                  });\r\n                }\r\n              }else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n          Swal({\r\n            type: \"error\",\r\n            text: this.tlt('add_role_internal_server_msg'),\r\n            timer:3000,     \r\n          });\r\n        }else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n          Swal({\r\n            type: \"info\",\r\n              text: this.tlt('no_data_text'),\r\n              timer:3000, \r\n              toast:true,\r\n              position: \"top-end\",\r\n              showConfirmButton: false,   \r\n          });  \r\n        }else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n              // else if(response.data.MSG=='No Results Found'){\r\n              //   toastr.error(\"No role found\");\r\n              //   setTimeout(() => {\r\n              //       this.$router.go();\r\n              //     }, 2500);\r\n              // }\r\n              // else if(response.data.MSG=='Intrnal Server Error'){\r\n              //   toastr.error(\"Intrnal Server Error\");\r\n              //   setTimeout(() => {\r\n              //       this.$router.go();\r\n              //     }, 2500);\r\n              // }\r\n            })\r\n            .catch((e) => {\r\n              if (\r\n                e.response.status === 410 ||\r\n                e.response.status === 440 ||\r\n                e.response.status === 409\r\n              ) {\r\n                this.$root.$emit(\"Session_Expired\", e.response.data);\r\n              }\r\n            });\r\n        }\r\n      }\r\n    },\r\n    save_role() {\r\n      if (this.selected_role == \"\" || this.selected_permissions.length == 0) {\r\n      } else if (this.selected_role == \"Admin\") {\r\n        this.clear_fields();\r\n      } else if (this.user_type == \"Portal\") {\r\n        var selected_menu = [];\r\n        for (var i in this.selected_permissions) {\r\n          selected_menu.push(this.selected_permissions[i].sub_menu);\r\n        }\r\n        for (var i in this.menu_list_from_api) {\r\n          if (selected_menu.includes(this.menu_list_from_api[i].MenuItem))\r\n            this.menu_list_from_api[i].Enabled = true;\r\n          else this.menu_list_from_api[i].Enabled = false;\r\n        }\r\n        axios\r\n          .post(\r\n            api_calls.portal_permissions_url(),\r\n            {\r\n              company_id: this.companyid,\r\n              company_name: this.companyname,\r\n              email: this.$session.get(\"UserInformation\").email,\r\n              license_key: this.$session.get(\"UserInformation\").license_key,\r\n              token: this.$session.get(\"UserInformation\").tokens,\r\n              isEdit: true,\r\n              role_name: this.selected_role,\r\n              user_type: this.user_type + \" User\",\r\n              menu: this.menu_list_from_api,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n          Swal({\r\n            type: \"error\",\r\n            text: this.tlt('add_role_internal_server_msg'),\r\n            timer:3000,     \r\n          });\r\n        }else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n          Swal({\r\n            type: \"info\",\r\n              text: this.tlt('no_data_text'),\r\n              timer:3000, \r\n              toast:true,\r\n              position: \"top-end\",\r\n              showConfirmButton: false,    \r\n          });  \r\n        }\r\n          else if (response.data.message.MSG_CODE == this.api_status_code.USER_ROLE_EDITED_SUCCESSFULLY_2002.MSG_CODE) {\r\n              toastr.success(this.tlt('permission_updated_for_login_msg1'));\r\n            }\r\n            else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n            $(\"#intentmodal\").modal(\"hide\");\r\n            this.load_permission();\r\n          })\r\n          .catch((e) => {\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n          this.close_modal('save_permissions')\r\n      } else if (this.user_type == \"Bot\") {\r\n        var selected_menu = [];\r\n        for (var i in this.selected_permissions) {\r\n          selected_menu.push(this.selected_permissions[i].permissions);\r\n        }\r\n        axios\r\n          .post(\r\n            api_calls.add_edit_bot_role(),\r\n            {\r\n              company_id: this.companyid,\r\n              company_name: this.companyname,\r\n              email: this.$session.get(\"UserInformation\").email,\r\n              license_key: this.$session.get(\"UserInformation\").license_key,\r\n              token: this.$session.get(\"UserInformation\").tokens,\r\n              bot_role_name: this.selected_role,\r\n              permission_list: selected_menu,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            if (response.data.message.MSG_CODE == this.api_status_code.SUCCESSFUL_DB_QUERY.MSG_CODE) {\r\n              toastr.success(this.tlt('permission_updated_for_login_msg2'));\r\n              this.load_permission();\r\n            } else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n              toastr.error(this.tlt('permission_internal_server_msg'));\r\n            }\r\n            else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n          Swal({\r\n            type: \"info\",\r\n            text: this.tlt('no_data_text'),\r\n            timer:3000,  \r\n            toast:true,\r\n            position:\"top-end\",\r\n            showConfirmButton: false,   \r\n          });  \r\n        }\r\n        else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n            $(\"#intentmodal\").modal(\"hide\");\r\n          })\r\n          .catch((e) => {\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n          this.close_modal('save_permissions')\r\n      }\r\n    },\r\n    edit_restrictions(index) {\r\n      if (this.roles[index].user != \"\") {\r\n        this.roles[index].input_enable = !this.roles[index].input_enable;\r\n      }\r\n      this.edit = true;\r\n    },\r\n    update_list(response) {\r\n      // this.roles = [];\r\n      var input;\r\n      // //console.log(response,'responses');\r\n      // console.log(response)\r\n      if (response.restrictionlist[0] != null) {\r\n      for (var i in response.restrictionlist) {\r\n        if (response.restrictionlist[i] == \"\") {\r\n          input = true;\r\n        } else {\r\n          input = false;\r\n        }\r\n        this.roles.push({\r\n          user: response.restrictionlist[i],\r\n          role: response.rolelist[i],\r\n          input_enable: input,\r\n        });\r\n      }\r\n      }\r\n    },\r\n    update_bot_roles() {\r\n      if (this.filter_user_type == \"Bot\"){\r\n        axios\r\n          .post(\r\n            api_calls.add_edit_bot_role(),\r\n            {\r\n              company_id: this.companyid,\r\n              company_name: this.companyname,\r\n              email: this.$session.get(\"UserInformation\").email,\r\n              license_key: this.$session.get(\"UserInformation\").license_key,\r\n              token: this.$session.get(\"UserInformation\").tokens,\r\n              isShow: this.isShow_bot_roles,\r\n              per_page: this.per_page,\r\n              page_no: this.page_no,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){\r\n             \r\n            this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n            this.setpagination(this.page_no);\r\n            for (var i in response.data.data.BotRolePermissionData) {\r\n              // let botRoles = this.bot_roles.map(({ role }) => {\r\n              //   return role;\r\n              // });\r\n              // if (botRoles.includes(i)) {\r\n              if (this.bot_roles.includes(i)) {\r\n                this.roles.push({\r\n                  user: \"Bot User\",\r\n                  user_role: `${i}`,\r\n                  input_enable: true,\r\n                  permissions: response.data.data.BotRolePermissionData[i].map((res) => {\r\n                    return res\r\n                      .replace(/_/g, \" \")\r\n                      .toLowerCase()\r\n                      .split(\" \")\r\n                      .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n                      .join(\" \");\r\n                  }),\r\n                  original_permissions: response.data.data.BotRolePermissionData[i],\r\n                });\r\n              }\r\n            }\r\n            this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n            this.setpagination(this.page_no);\r\n            }\r\n            else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n          Swal({\r\n            type: \"error\",\r\n            text: this.tlt('add_role_internal_server_msg'),\r\n            timer:3000,     \r\n          });\r\n        }else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n          Swal({\r\n            type: \"info\",\r\n            text: this.tlt('no_data_text'),\r\n            timer:3000,  \r\n            toast:true,\r\n            position:\"top-end\",\r\n            showConfirmButton: false,\r\n          });  \r\n\r\n        }else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n          }\r\n          this.spinnerOn = false;\r\n            this.number_of_rows = response.data.pagination.total_data == undefined ? 0 : response.data.pagination.total_data;\r\n            this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n            this.setpagination(this.page_no);\r\n          })\r\n          .catch((e) => {\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n      }\r\n    },\r\n    pagination_class(index) {\r\n      if (index == this.page_no) {\r\n        return \" active\";\r\n      } else {\r\n        return \"\";\r\n      }\r\n    },\r\n    clear_fields() {\r\n      document.querySelector(\"#portal_box\").disabled = false;\r\n      document.querySelector(\"#bot_box\").disabled = false;\r\n      this.selected_role = \"\";\r\n      this.selected_permissions = [];\r\n      $(\"#intentmodal\").modal(\"hide\");\r\n    },\r\n    callsearch() {\r\n      if (event.keyCode === 13) {\r\n        this.search_product();\r\n      }\r\n    },\r\n    search_product() {\r\n      if (this.search_name != \"\") {\r\n        this.spinnerOn = true;\r\n        axios\r\n          .post(\r\n            api_calls.portal_permissions_url(),\r\n            {\r\n              company_id: this.$session.get(\"UserInformation\").company_id,\r\n              company_name: this.$session.get(\"UserInformation\").company_name,\r\n              license_key: this.$session.get(\"UserInformation\").license_key,\r\n              email: this.$session.get(\"UserInformation\").email,\r\n              token: this.$session.get(\"UserInformation\").tokens,\r\n              issearch: true,\r\n              key: this.search_name,\r\n              per_page: this.per_page,\r\n              page_no: 1,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            this.spinnerOn = false;\r\n            if (\r\n              response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE\r\n            ) {\r\n              var list = response.data.data.RolePermissionData;\r\n              this.number_of_rows = response.data.pagination.total_data == undefined ? 0 : response.data.pagination.total_data;\r\n              this.total_pages = response.data.pagination.total_page == undefined ? 0 : response.data.pagination.total_page;\r\n              this.page_no = 1;\r\n              this.setpagination(this.page_no);\r\n              this.roles = [];\r\n              for (var i in list) {\r\n                var permissions = list[i].Menu.filter((menulist) => {\r\n                  if (menulist.Enabled && !menulist.HasSubMenus) {\r\n                    return menulist.MenuItem;\r\n                  }\r\n                });\r\n                var perm_list = [];\r\n                for (var j in permissions) {\r\n                  perm_list.push(permissions[j].MenuItem);\r\n                }\r\n                this.roles.push({\r\n                  user_role: list[i].Role,\r\n                  user: list[i].UserType,\r\n                  permissions: perm_list,\r\n                });\r\n              }\r\n            } else if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA.MSG_CODE) {\r\n              Swal({\r\n              text: this.tlt(\"permission_no_role_found_msg\"),\r\n              toast: true,\r\n              position: \"top-end\",\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n              \r\n              this.load_permission();\r\n            } else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\r\n              Swal({\r\n              text: this.tlt(\"permission_internal_server_msg2\"),\r\n              toast: true,\r\n              position: \"top-end\",\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            }\r\n            \r\n            )\r\n            \r\n         \r\n              this.load_permission();\r\n            }\r\n            else {\r\n            Swal({\r\n              title: response.data.message.MSG_CODE,\r\n              text: response.data.message.MSG,\r\n              showCancelButton: false,\r\n              showConfirmButton: false,\r\n              type: \"error\"\r\n            })\r\n            this.load_permission();\r\n          }\r\n          })\r\n          .catch((e) => {\r\n            if (\r\n              e.response.status === 410 ||\r\n              e.response.status === 440 ||\r\n              e.response.status === 409\r\n            ) {\r\n              this.$root.$emit(\"Session_Expired\", e.response.data);\r\n            }\r\n          });\r\n      } else {\r\n        toastr.error(this.tlt('permission_data_for_search_msg'));\r\n      }\r\n    },\r\n    setpagination(page_no) {\r\n      this.page_array = [];\r\n      if (this.total_pages <= 7) {\r\n        for (let i = 0; i < this.total_pages; i++) {\r\n          this.page_array.push(i + 1);\r\n        }\r\n      } else if (page_no == 1) {\r\n        for (let i = 0; i < 4; i++) {\r\n          this.page_array.push(i + 1);\r\n        }\r\n        this.page_array.push(\"...l\");\r\n        this.page_array.push(this.total_pages);\r\n      } else if (page_no == this.total_pages) {\r\n        this.page_array.push(1);\r\n        this.page_array.push(\"...s\");\r\n        for (let i = this.total_pages - 4; i < this.total_pages; i++) {\r\n          this.page_array.push(i + 1);\r\n        }\r\n      } else if (page_no <= 4) {\r\n        for (let i = 0; i < page_no + 3; i++) {\r\n          this.page_array.push(i + 1);\r\n        }\r\n        this.page_array.push(\"...l\");\r\n        this.page_array.push(this.total_pages);\r\n      } else if (page_no >= this.total_pages - 4) {\r\n        this.page_array.push(1);\r\n        this.page_array.push(\"...s\");\r\n        for (let i = page_no - 4; i < this.total_pages; i++) {\r\n          this.page_array.push(i + 1);\r\n        }\r\n      } else {\r\n        this.page_array.push(1);\r\n        this.page_array.push(\"...s\");\r\n        for (let i = page_no - 3; i <= page_no + 3; i++) {\r\n          this.page_array.push(i);\r\n        }\r\n        this.page_array.push(\"...l\");\r\n        this.page_array.push(this.total_pages);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style src=\"vue-multiselect/dist/vue-multiselect.min.css\">\r\n</style>\r\n<style scoped>\r\ntd > .multiselect__tag {\r\n  padding: 4px 9px 4px 10px;\r\n}\r\n.multiselect__option[data-select=\"Press enter to select\"] > span {\r\n  margin-left: 10%;\r\n}\r\n/* #select_role_name{\r\n    width: 105%;\r\n    margin-left: -2%;\r\n} */\r\n.radio label {\r\n    margin-top: .3rem !important;\r\n  }\r\n</style>\r\n<style>\r\n.multiselect__option--group {\r\n  background: #273679 !important;\r\n  color: #e7eaec !important;\r\n  text-align: center;\r\n  font-weight: bold;\r\n\r\n}\r\n</style>\r\n\r\n"]}]}