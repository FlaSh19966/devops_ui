{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Account/Billing.vue?vue&type=style&index=0&id=6c0f6b18&scoped=true&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Account/Billing.vue","mtime":1663910265446},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnJlZC1idG57CiAgICBmb250LXNpemU6IDE0cHg7CiAgICBjb2xvcjogI2ZmZjsKICAgIGJhY2tncm91bmQ6ICNGMjNEM0Q7OwogICAgYm9yZGVyOiBzb2xpZCAxcHggI0YyM0QzRDs7CiAgICBwYWRkaW5nOiA2cHggMTVweDsKICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICBsaW5lLWhlaWdodDogMjBweDsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIGJvcmRlci1yYWRpdXM6IDRweDsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIG1hcmdpbi1sZWZ0OiAxOHB4Cgp9Ci5yZWQtYnRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiBub25lOwogIGNvbG9yOiAjMjczNjc5Owp9CgouZGFzaC1jYXJkIC5jYXJkLWJvZHkgewogIG1pbi1oZWlnaHQ6IGZpdC1jb250ZW50Owp9Ci5jb2wtbGctMiB7CiAgd2lkdGg6IDEwMCU7CiAgbWFyZ2luLWJvdHRvbTogMSU7Cn0KI3llYXJfc2VsZWN0X2lkIHsKICBwYWRkaW5nOiA1cHggNXB4IDVweCA1cHg7Cn0KI3BheW1lbnRfYnRuIHsKICBtYXJnaW4tbGVmdDogYXV0bzsKICB3aWR0aDogYXV0bzsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgcGFkZGluZzogNnB4IDE1cHg7Cn0KLnRhYmxlIHRkLAoudGFibGUgdGggewogIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsKfQo="},{"version":3,"sources":["Billing.vue"],"names":[],"mappingsq5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Billing.vue","sourceRoot":"src/portal/Chatbot/Dashboard/Account","sourcesContent":["<template>\n  <div>\n    <div class=\"spinner\" id=\"spinner\" v-show=\"spinnerOn\"></div>\n    <!-- <div class=\"dash-cont\"> -->\n    <div class=\"card dash-card\">\n      <div v-if=\"!show_subscription \"  >\n        <div class=\"card-header flex-wrap justify-content-between\">\n          <h4 class=\"mb-0\">{{tlt('subscribe_plan_header')}}</h4>\n          <p v-if=\"stripe_subscription_plans_details.subscription_type === 'Free'\">\n            {{tlt('subscribe_plan_help_text')}}\n          </p> \n        </div>\n        <div style=\"padding-left: 25px\"  v-if=\"retail_shopify_company\">\n          <div class=\"row mb-2\">\n            <div class=\"col-sm-4\">\n              <span> {{tlt('select_plan_label')}} </span>\n              <multiselect\n                track-by=\"name\"\n                label=\"label\"\n                :options=\"retail_shopify_subscription_plans_custom_currency\"\n                v-model=\"retail_plan_current\"\n                :searchable=\"false\"\n                :allow-empty=\"false\"\n                @input=\"check_retail_plan\"\n                :placeholder=\"tlt('select_plan')\"\n                :show-labels=\"false\"\n              ></multiselect>\n              <span>\n                <!-- {{ current_retail_plan_charges }} -->\n              </span>\n            </div>\n            <div class=\"col-sm-4\">\n              <span> {{tlt('select_billing_cycle_label')}} </span> \n              <multiselect\n                :options=\"retail_payment_types\"\n                v-model=\"retail_payment_type\"\n                :searchable=\"false\"\n                :allow-empty=\"false\"\n                :show-labels=\"false\"\n                :disabled=\"check_retail_payment_type_disabled\"\n                :placeholder=\"retail_payment_placeholder\"\n              >\n              </multiselect>\n            </div>\n          </div>\n          <div class=\"row mb-2\">\n            <div class=\"col-sm-12\" style=\"margin:4px 0px;\">\n              <button\n                type=\"button\"\n                class=\"darkblue-btn\"\n                style=\"padding: 6px 15px\"\n                @click=\"subscribe_retail_plan()\"\n              >\n                {{tlt('subscribe_btn_label')}}\n              </button>\n               <button\n                  @click=\"show_subscription=!show_subscription\"       \n                  type=\"button\"\n                  class=\"red-btn\"                  \n                  style=\"padding: 6px 15px\"\n                >\n                  {{tlt('go_back_btn_label')}}\n            </button>\n            </div>\n          </div>\n        </div>\n        <div style=\"padding-left: 25px\" v-else>\n            <div class=\"row mb-2\">\n            <div class=\"col-sm-4\">\n              <span> {{tlt('select_plan1_label')}} </span>\n              <multiselect\n                :options=\"first_step\"\n                v-model=\"retail_plan_current\"\n                :searchable=\"false\"\n                :allow-empty=\"false\"\n                @input=\"check_retail_plan\"\n                :placeholder=\"tlt('select_plan')\"\n                :show-labels=\"false\"\n              ></multiselect>\n              <span>\n                <!-- {{ current_retail_plan_charges }} -->\n              </span>\n            </div>\n            <div class=\"col-sm-4\">\n              <span> {{tlt('select_billing_cycle1_label')}} </span>\n              <multiselect\n                label=\"label\"\n                :options=\"second_step\"\n                v-model=\"retail_payment_type\"\n                :searchable=\"false\"\n                :allow-empty=\"false\"\n                :disabled=\"check_retail_payment_type_disabled\"\n                :placeholder=\"retail_payment_placeholder\"\n              >\n              </multiselect>\n            </div>\n          </div>\n            <div class=\"row mb-2\">\n              <div class=\"col-sm-12\" style=\"margin:4px 0px;\">\n                <button\n                  type=\"button\"\n                  class=\"darkblue-btn\"\n                  style=\"padding: 6px 15px\"\n                  @click=\"submit_stripe_checkout\"\n                >\n                  {{tlt('subscribe_btn1_label')}}\n                </button>\n                <button\n                  @click=\"show_subscription=!show_subscription\"       \n                  type=\"button\"\n                  class=\"red-btn\"                  \n                  style=\"padding: 6px 15px\"\n                >\n                  {{tlt('go_back_btn1_label')}}\n                </button>\n              </div>\n          </div>\n        </div>\n      </div>\n      <div v-show=\"show_subscription\" style=\"margin:10px\">\n        <div style=\"margin:10px;margin-left: 27\">\n          <h4 class=\"mb-0\">{{tlt('subscription_plan_header')}}</h4>\n          <br>\n          <p> {{tlt('current_subscribe_plan_text')}} <strong>{{stripe_subscription_plans_details.subscription_type}}</strong> &nbsp; &nbsp;\n             <span v-if=\"hide_button !=='Free'\">{{tlt('current_subscribe_plan_text2')}} <strong>{{get_subscription_valid_till(stripe_subscription_plans_details.subscription_valid_till)}}.</strong></span>\n             <span v-else>{{tlt('current_subscribe_plan_text3')}} <strong>{{get_subscription_valid_till(stripe_subscription_plans_details.subscription_valid_till)}}.</strong></span>\n          </p>\n          <button\n            type=\"button\"\n            class=\"darkblue-btn\"\n            style=\"padding: 6px 15px\"\n            @click=\"show_subscription = !show_subscription\"\n            v-if=\"stripe_subscription_plans_details.subscription_type !== 'Premium'\"\n          >\n             {{tlt('upgrade_btn_label')}}\n          </button>\n          <button\n            type=\"button\"\n            class=\"darkblue-btn\"\n            style=\"padding: 6px 15px\"\n            @click=\"show_subscription = !show_subscription\"\n            v-else\n          >\n            {{tlt('downgrade_btn_label')}}\n          </button>\n          <button\n            v-if=\"hide_button !=='Free'\"\n            type=\"button\"\n            class=\"red-btn\"\n            style=\"padding: 6px 15px\"\n            @click=\"show_swal_notification\"\n          >\n            {{tlt('cancel_btn_label')}}\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"card dash-card\" v-if=\"stripe_addon_plans.length > 0 \">\n      <div style=\"margin:10px\">\n        <div style=\"margin:10px;margin-left: 27\">\n          <h4 class=\"mb-0\">{{tlt('purchase_addons_header')}}</h4>\n          <br>\n\n          <p v-if=\"credits_balance != null\">\n\n            {{tlt('current_sms_credit_text')}} <strong> {{tlt('current_sms_credit_text2')}} : {{credits_balance[\"us\"]}} | {{tlt('current_sms_credit_text3')}}\n              : {{credits_balance.non_us}}\n            </strong>\n          </p>\n            <div class=\"row mb-2\">\n            <div class=\"col-sm-4\">\n              <span> {{tlt('select_addon_label')}} </span>\n              <multiselect\n                label=\"Type\"\n                :options=\"stripe_addon_plans\"\n                 v-model=\"selected_addon_plan\"\n                :placeholder=\"tlt('select_one')\"\n              ></multiselect>\n              <!-- <span>\n                {{ current_retail_plan_charges }}\n              </span> -->\n            </div>\n            <div class=\"col-sm-4\">\n              <span> {{tlt('select_option_label')}} </span>\n              <multiselect\n                label=\"label\"\n                :options=\"second_step_addon_plans\"\n                v-model=\"selected_addon_type\"\n                :placeholder=\"tlt('select_one')\"\n              ></multiselect>\n              <!-- <span>\n                {{ current_retail_plan_charges }}\n              </span> -->\n            </div>\n          </div>\n          <button\n            type=\"button\"\n            class=\"darkblue-btn\"\n            style=\"padding: 6px 15px\"\n            @click=\"submit_stripe_addon_checkout\"\n          >\n            {{tlt('purchase_btn_label')}}\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"container-fluid\" id=\"dashboard-chart\" style=\"padding: 0\">\n      <div class=\"card dash-card\">\n        <div class=\"card-header d-flex flex-wrap justify-content-between\">\n          <h4>{{tlt('cost_for_month_header')}} {{ concurrent_users_month }}</h4>\n          <div class=\"card-act\"></div>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"chart-box\">\n            <area-chart\n              :labels=\"Concurrent_Users_Data.labels\"\n              :data=\"Concurrent_Users_Data.data\"\n            ></area-chart>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal fade dash-modal\"\n      id=\"countrymodal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"countrymodaltitle\"\n      aria-hidden=\"true\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-body\">\n            <div class=\"modal-head d-flex align-items-center\">\n              <div class=\"head-icn\">\n                <img src=\"/img/msg-blue.png\" alt style=\"width: auto\" />\n              </div>\n              <h6>\n                {{tlt('company_registered_msg')}}\n              </h6>\n            </div>\n            <button\n              type=\"button\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n            >\n              <img src=\"/img/close-icn.png\" alt />\n            </button>\n            <form @submit.prevent=\"call_payment('country_selected')\">\n              <div class=\"form-group\">\n                <!-- <select class=\"form-control\" v-model=\"country_name\">\n                  <option\n                    :value=\"country.code\"\n                    v-for=\"(country, index) in country_list\"\n                    :key=\"index\"\n                  >\n                    {{ country.name }}\n                  </option>\n                </select>{{this.country_name}} -->\n                <multiselect\n                  v-model=\"country_name\"\n                  :options=\"country_list\"\n                  :searchable=\"true\"\n                  :close-on-select=\"true\"\n                  :taggable=\"false\"\n                  :multiple=\"false\"\n                  :placeholder=\"tlt('country_name_label')\"\n                  :max-height=\"200\"\n                  track-by=\"code\"\n                  label=\"name\"\n                >\n                  <!-- <span>{{ country_name }}</span> -->\n                </multiselect>\n              </div>\n              <div class=\"btn-wrap text-right\">\n                <button\n                  type=\"button\"\n                  @click=\"country_name = ''\"\n                  class=\"btn btn-link\"\n                  data-dismiss=\"modal\"\n                >\n                  {{tlt('cancel_btn')}}\n                </button>\n                <button type=\"submit\" class=\"darkblue-btn\">{{tlt('save_btn')}}</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport Swal from \"sweetalert2\";\nimport countries from \"@/portal/components/Countries\";\nimport axios from \"axios\";\nimport { bus } from \"@/portal/main\";\nimport api_calls from \"@/portal/api_calls\";\nimport AreaChart from \"@/portal/components/AreaChart.vue\";\nimport Multiselect from \"vue-multiselect\";\n// import { StripeCheckout } from \"@vue-stripe/vue-stripe\";\nimport moment from \"moment\";\nimport { update_sidebar_menu, update_restriction_list} from \"@/portal/mixins\";\n\nexport default {\n  name: \"Billing\",\n  components: {\n    AreaChart,\n    Multiselect,\n    // StripeCheckout,\n  },\n  mixins: [\n    update_sidebar_menu,\n    update_restriction_list\n  ],\n  data() {\n    return {\n      select_subscription_plan: [\"Silver\", \"Gold\", \"Plantinum\", \"Enterprise\"],\n      selected_subscription: \"\",\n      subscription_id: \"\",\n      plan_id: \"\",\n      customer_id: \"\",\n      plan_period: [\"Monthly\", \"Yearly\"],\n      selected_period: \"\",\n      order_id: \"\",\n      amount: \"\",\n      pay_success_data: {},\n      subscription_btn_disable: false,\n      country_list: countries,\n      paymentid: \"\",\n      barChart: \"\",\n      backgroundColor: [\"#e67e22\", \"#16a085\", \"#2980b9\"],\n      labels: [\n        \"Exchange of Messages\",\n        \"Execution of Tasks\",\n        \"Audio/Video Interaction\",\n        \"Storage\",\n      ],\n      companyid: null,\n      companyname: null,\n      country_name: \"\",\n      payment_currency: \"\",\n      value_currency_top_up: \"\",\n      value_currency_subscription: \"\",\n      INR: [3500, 7000, 14000, 35000],\n      USD: [50, 100, 200, 500],\n      common_currency: [],\n      currency_amount: null,\n      top_up_amount: null,\n      piechart_data: [],\n      user_role: this.$session.get(\"UserInformation\").role,\n      concurrent_users_month: \"\",\n      Concurrent_Users_Data: {\n        labels: [],\n        data: [],\n      },\n      months: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"Aug\",\n        \"Sept\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\",\n      ],\n      invoice_details: [],\n      invoice_details_copy: [],\n      total_year: [],\n      year_selected: \"\",\n      spinnerOn: false,\n      //harsh\n      common_currency2: [],\n      INR2: [3500, 7000, 14000, 35000],\n      USD2: [100, 300, 500],\n      retail_shopify_company: false,\n      // addon_plans: [\n      //   {\n      //       \"Type\": \"SmsAddOn\",\n      //       \"Price\": 15.0,\n      //       \"Service\": \"SMS\",\n      //       \"PriceOptions\": [\n      //           {\n      //               \"price\": 15.0,\n      //               \"currency\": \"usd\",\n      //               \"id\": \"12425648325414353413235234134\",\n      //               \"type\": \"us\",\n      //               \"count\": 1000,\n      //               \"key\": \"sms_count.add_on.us\",\n      //               \"label\": \"$15 (1000 sms for US region)\"\n      //           },\n      //           {\n      //               \"price\": 15.0,\n      //               \"currency\": \"usd\",\n      //               \"id\": \"12425648325414353413235234134\",\n      //               \"type\": \"non_us\",\n      //               \"count\": 500,\n      //               \"key\": \"sms_count.add_on.non_us\",\n      //               \"label\": \"$15 (500 sms for Non-US region)\"\n      //           }\n      //       ],\n      //       \"Options\": [\n      //           {\n      //               \"type\": \"us\",\n      //               \"count\": 1000\n      //           },\n      //           {\n      //               \"type\": \"non_us\",\n      //               \"count\": 500\n      //           }\n      //       ],\n      //       \"IsActive\": true,\n      //       \"IsAddOn\": true\n      //   },\n      //   {\n      //       \"Type\": \"ConversationAddOn\",\n      //       \"Service\": \"WhatsappConversation\",\n      //       \"PriceOptions\": [\n      //           {\n      //               \"price\": 29.0,\n      //               \"currency\": \"usd\",\n      //               \"id\": \"12425648325414353413235234134\",\n      //               \"type\": \"conversations\",\n      //               \"count\": 2000,\n      //               \"key\": \"whatsapp_conversations_count.add_on\",\n      //               \"label\": \"$29 (2000 conversations)\"\n      //           },\n      //           {\n      //               \"price\": 2000.0,\n      //               \"currency\": \"inr\",\n      //               \"id\": \"12425648325414363452920845234\",\n      //               \"type\": \"conversations\",\n      //               \"count\": 2000,\n      //               \"key\": \"whatsapp_conversations_count.add_on\",\n      //               \"label\": \"₹2000 (2000 conversations)\"\n      //           }\n      //       ],\n      //       \"IsActive\": true,\n      //       \"IsAddOn\": true\n      //   }\n      // ],\n\n      // plans: [\n      // {\n      //     \"Type\" : \"Starter\",\n      //     \"IsActive\" : true,\n      //     \"PriceOptions\" : [ \n      //         {\n      //             \"price\" : 29.0,\n      //             \"currency\" : \"usd\",\n      //             \"price_id\" : \"price_1JzZy2GTZ7JdmVusyUqjOtj7\",\n      //             \"nickname\" : \"Starter-Test\",\n      //             \"label\" : \"$29/month\",\n      //             \"type\" : \"monthly\"\n      //         }, \n      //         {\n      //             \"price\" : 2000.0,\n      //             \"currency\" : \"inr\",\n      //             \"price_id\" : \"price_1KdYOPGTZ7JdmVusDYtT3ry8\",\n      //             \"nickname\" : \"Starter-Test-INR\",\n      //             \"label\" : \"₹2000/month\",\n      //             \"type\" : \"monthly\"\n      //         }, \n      //         {\n      //             \"price\" : 290.0,\n      //             \"currency\" : \"usd\",\n      //             \"price_id\" : \"price_1K28jJGTZ7JdmVusaHhK4tOF\",\n      //             \"nickname\" : \"Starter-Test-Yearly\",\n      //             \"label\" : \"$290/yearly\",\n      //             \"type\" : \"yearly\"\n      //         }, \n      //         {\n      //             \"price\" : 20000.0,\n      //             \"currency\" : \"inr\",\n      //             \"price_id\" : \"price_1KdYT4GTZ7JdmVusY4nETGHH\",\n      //             \"nickname\" : \"Starter-Test-Yearly-INR\",\n      //             \"label\" : \"₹20000/yearly\",\n      //             \"type\" : \"yearly\"\n      //         }\n      //     ],    \n      // },\n      // {\n      //     \"Type\" : \"Premium\",\n      //     \"PriceOptions\" : [ \n      //         {\n      //             \"price\" : 99.0,\n      //             \"currency\" : \"usd\",\n      //             \"price_id\" : \"price_1JzZyjGTZ7JdmVus2KHdL8XE\",\n      //             \"nickname\" : \"Premium-Test\",\n      //             \"label\" : \"$99/month\",\n      //             \"type\" : \"monthly\"\n      //         }, \n      //         {\n      //             \"price\" : 7000.0,\n      //             \"currency\" : \"inr\",\n      //             \"price_id\" : \"price_1KdYSEGTZ7JdmVusZwKTAUV6\",\n      //             \"nickname\" : \"Premium-Test-INR\",\n      //             \"label\" : \"₹7000/month\",\n      //             \"type\" : \"monthly\"\n      //         }, \n      //         {\n      //             \"price\" : 990.0,\n      //             \"currency\" : \"usd\",\n      //             \"price_id\" : \"price_1K28hTGTZ7JdmVus1wWct9PT\",\n      //             \"nickname\" : \"Premium-Test-Yearly\",\n      //             \"label\" : \"$990/year\",\n      //             \"type\" : \"yearly\"\n      //         }, \n      //         {\n      //             \"price\" : 70000.0,\n      //             \"currency\" : \"inr\",\n      //             \"price_id\" : \"price_1KdYTZGTZ7JdmVusSJIcEGnz\",\n      //             \"nickname\" : \"Premium-Test-Yearly-INR\",\n      //             \"label\" : \"₹70000/year\",\n      //             \"type\" : \"yearly\"\n      //         }\n      //     ],\n      // }],\n      retail_shopify_subscription_plans: [\n        // {\n        //   name: \"Free\",\n        //   is_chargeable: false,\n        // },\n        {\n          name: \"Starter\",\n          label:\"Starter ($29/month or $290/year)\",\n          is_chargeable: true,\n          monthly_charge: 29,\n          annual_charge: {\n            per_month_effective: 24.17,\n            actual_charge: 290,\n          },\n          currency: \"usd\"\n        },\n        {\n          name: \"Premium\",\n          label: \"Premium ($99/month or $990/year)\", \n          is_chargeable: true,\n          monthly_charge: 99,\n          annual_charge: {\n            per_month_effective: 82.5,\n            actual_charge: 990,\n          },\n          currency: \"usd\"\n        },\n        {\n          name: \"Starter\",\n          label:\"Starter (₹2000/month or ₹20000/year)\",\n          is_chargeable: true,\n          monthly_charge: 2000,\n          annual_charge: {\n            per_month_effective: 24.17,\n            actual_charge: 20000,\n          },\n           currency: \"inr\"\n        },\n        {\n          name: \"Premium\",\n          label: \"Premium (₹7000/month or ₹70000/year)\", \n          is_chargeable: true,\n          monthly_charge: 7000,\n          annual_charge: {\n            per_month_effective: 82.5,\n            actual_charge: 70000,\n          },\n          currency: \"inr\"\n        },\n        {\n          name: \"WhatsApp\",\n          label: \"WhatsApp ($29/month)\", \n          is_chargeable: true,\n          monthly_charge: 29,\n          currency: \"usd\"\n        },\n        {\n          name: \"WhatsApp\",\n          label: \"WhatsApp (₹2000/month)\", \n          is_chargeable: true,\n          monthly_charge: 2000,\n          currency: \"inr\"\n        },\n      ],\n      retail_plan_current: null,\n      payment_types: [\"Annual\", \"Monthly\"],\n      retail_payment_type: null,\n      stripe_subscription_plans: null,\n      stripe_subscription_plans_details: {},\n      stripe_addon_plans: [],\n      show_subscription:false,\n      selected_addon_plan: null,\n      hide_button:'Free',\n      credits_balance: null,\n      retail_web_framework: this.$session.get(\"retail_web_framework\"),\n      shop_base_currency: 'usd',\n      acceptable_shop_base_currencies: ['INR', 'USD', 'inr', 'usd'],\n      stripe_addon_type: [],\n      selected_addon_type: null,\n    };\n  },\n  created() { \n    this.retail_web_framework = this.$session.get(\"retail_web_framework\");\n    this.country_list = countries;\n    if (\n      !this.$session.has(\"CompanyId\") &&\n      this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\n    ) {\n      toastr.warning(tlt('billing_select_company_name_msg'));\n    }\n    if (this.user_role == \"SuperAdmin\") {\n      if (this.$session.has(\"CompanyId\")) {\n        this.companyid = this.$session.get(\"CompanyId\");\n        this.companyname = this.$session.get(\"CompanyName\");\n      } else {\n        this.companyid = this.$session.get(\"UserInformation\").company_id;\n        this.companyname = this.$session.get(\"UserInformation\").company_name;\n      }\n    } else {\n      this.companyid = this.$session.get(\"UserInformation\").company_id;\n      this.companyname = this.$session.get(\"UserInformation\").company_name;\n    }\n    if (\n      this.$session.get(\"UserInformation\").country_name == \"\" &&\n      !this.$session.has(\"country_name\")\n    ) {\n    } else {\n      axios\n        .get(api_calls.billing_invoice(), {\n          headers: {\n            Authorization: `Bearer ${this.$session.get(\"at\")}`,\n          },\n        })\n        .then((response) => {\n          if (response.data.message.MSG_CODE === this.api_status_code.DATA_AVAILABLE.MSG_CODE) {\n              this.total_year = response.data.data.YearList;\n              this.year_selected = this.total_year[0];         \n          }else {\n            Swal({\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              timer: 2500,\n              type: \"error\"\n            })\n          }\n\n        })\n        .catch((e) => {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n      axios\n        .post(\n          api_calls.billing_invoice(),\n          {\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            company_name: this.$session.get(\"UserInformation\").company_name,\n            email: this.$session.get(\"UserInformation\").email,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.$session.get(\"UserInformation\").tokens,\n            download_file: false,\n            year: this.year_selected,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          if (response.data.message.MSG_CODE === this.api_status_code.DATA_AVAILABLE.MSG_CODE) {\n              this.invoice_details = response.data.data.Bucket_list;\n              for (var i = 0; i < this.invoice_details.length; i++) {\n                this.invoice_details_copy[i] = this.invoice_details[i].slice(8);\n              }\n          }else {\n            Swal({\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              timer: 2500,\n              type: \"error\"\n            })\n          }\n          // console.log(this.invoice_details_copy);\n        })\n        .catch((e) => {\n          console.log(e,'rr');\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    }\n    let is_shopify = this.retail_web_framework;\n    if (Boolean(is_shopify) && is_shopify === \"shopify\") {\n      this.retail_shopify_company = true;\n    }\n    this.get_shop_base_currency();\n    this.check_addons_balance();\n  },\n   watch: {\n    selected_addon_plan(){\n      this.stripe_addon_type = [];\n      this.selected_addon_type= null;\n      if(this.selected_addon_plan !== null){\n        this.stripe_addon_type = this.selected_addon_plan.Options;\n      }\n    }\n  },\n  mounted() { \n\n    this.get_plans_from_db(); // Get plans from db\n    this.get_addon_details(); // Get Add Ons from cense db\n    this.get_current_subscription_details(); // get subscription details from cense_db\n    if (\n      this.$session.get(\"UserInformation\").country_name == \"\" &&\n      !this.$session.has(\"country_name\")\n    ) {\n      $(\"#countrymodal\")\n        .modal({\n          backdrop: \"static\",\n        })\n        .on(\"hidden.bs.modal\", (e) => {\n          if (!this.$session.has(\"country_name\")) {\n            $(\"#countrymodal\").modal(\"hide\");\n            this.$router.push(\"/bot/dashboard\");\n            this.$root.$emit(\"change_sidebar_main_menu\", \"Dashboard\");\n          }\n        });\n    }\n  },\n  computed: {\n    check_retail_payment_type_disabled() {\n      if (\n        Boolean(this.retail_plan_current) &&\n        this.retail_plan_current.is_chargeable === false\n      ) {\n        return true;\n      }\n      return false;\n    },\n    retail_payment_placeholder() {\n      if (this.check_retail_payment_type_disabled) {\n        return this.tlt('no_billing_cycle_msg');\n      }\n      return this.tlt('pick_one_msg');\n    },\n    current_retail_plan_charges() {\n      // if(this.retail_shopify_company) {\n      return Boolean(this.retail_plan_current)\n        ? this.retail_plan_current.is_chargeable\n          ? `$${this.retail_plan_current.monthly_charge}/month  or $${this.retail_plan_current.annual_charge.per_month_effective}/month billed at $${this.retail_plan_current.annual_charge.actual_charge} once per year`\n          : null\n        : null;\n      // } else {\n      //   return Boolean(this.retail_plan_current)\n      //   ? this.retail_plan_current.is_chargeable\n      //     ? `$${this.retail_plan_current.monthly_charge}/month`\n      //     : null\n      //   : null;\n      // }\n    },\n    check_retail_shopify_form_validations() {\n      if (\n        this.retail_plan_current !== null &&\n        this.retail_payment_type !== null\n      ) {\n        return true;\n      } else if (\n        this.retail_plan_current !== null &&\n        this.retail_payment_type == null &&\n        this.retail_plan_current.is_chargeable === false\n      ) {\n        return true;\n      }\n      return false;\n    },\n    first_step() {\n      if(this.stripe_subscription_plans) {\n        return this.stripe_subscription_plans.filter(plans => plans.Type !== 'Free').map(plans => plans.Type);\n      }else {\n        return [];\n      }\n    },\n    retail_shopify_subscription_plans_custom_currency(){\n      if(this.stripe_subscription_plans_details.subscription_type !== 'Premium'){\n        return this.retail_shopify_subscription_plans.filter((item) => item.currency === this.shop_base_currency)\n      }else {\n        return this.retail_shopify_subscription_plans.filter((item) => (item.currency === this.shop_base_currency && (item.name === \"Starter\" || item.name === \"WhatsApp\") ) )\n      }\n    },\n    // retail_shopify_subscription_plans_check_currentplan(){\n    //   if(this.stripe_subscription_plans_details.subscription_type !== 'Premium'){\n    //     return this.retail_shopify_subscription_plans\n    //   }else{\n    //     return this.retail_shopify_subscription_plans.filter((item) =>  item.name === \"Starter\")\n    //   }\n    // },\n    second_step(){\n      var temp = []\n      if(this.stripe_subscription_plans && this.retail_plan_current) {\n        temp = this.stripe_subscription_plans.filter(plans => plans.Type == this.retail_plan_current);\n        var sorted =  (temp[0].PriceOptions).filter(abc =>  abc.currency === this.shop_base_currency);\n        return sorted;\n      }\n      return temp;\n    },\n    first_step_addon_plans(){\n      if(this.stripe_addon_plans) {\n        return this.stripe_addon_plans.map(plans => plans.Type);\n      }\n    },\n    second_step_addon_plans(){\n      // console.log(\"selected_addon_plan\",this.selected_addon_plan);\n      if(this.selected_addon_plan) {\n        var check = this.selected_addon_plan['PriceOptions'].filter(plan => plan.currency == this.shop_base_currency);\n        return check;\n      }\n      return [];\n    },\n    retail_payment_types(){\n     \n      if (this.retail_plan_current == null) {\n        return this.payment_types;\n      }else if (this.retail_plan_current.name == this.stripe_subscription_plans_details.subscription_type) {\n         let sub_type = this.stripe_subscription_plans_details.subscription_period == 'Yearly'?'Annual': 'Monthly'\n        return this.payment_types.filter((item)=> item != sub_type); \n      }else if (this.retail_plan_current.name == 'WhatsApp'){\n        return this.payment_types.filter((item)=> item != 'Annual');\n      } else {\n        return this.payment_types;\n      }\n    }\n  },\n  methods: {\n  // nameWithLang ({ type, count }) {\n  //   return `${type} ${this.selected_addon_plan.Service}[${count}]`\n  // },\n  // namewithPrice({name,Price}){\n  //   return `${name} ($${Price})`\n  // },\n  show_swal_notification(){\n      Swal.fire({\n          title: this.tlt('billing_swal_alert_msg'),\n          text: this.tlt('billing_unsubscribe_plan_msg'),\n          icon: 'warning',\n          showCancelButton: true,\n          confirmButtonColor: '#3085d6',\n          cancelButtonColor: '#d33',\n          confirmButtonText: this.tlt('billing_swal_yes_btn')\n      }).then((result) => {\n        if (result.value == true) {\n          this.update_subscription_plan_free()\n          Swal.fire(\n           this.tlt('billing_swal_unsubscribed_msg'),\n           this.tlt('billing_subscribe_cancel_msg'),\n            'success'\n          )\n        }\n      })\n  },\n  get_subscription_valid_till(sub_date){\n      return moment.utc(sub_date).format(\"Do MMMM YYYY\");\n  },\n  update_subscription_plan_free(){\n       axios\n        .post(\n          api_calls.stripe_payment_gateway(),\n          {\n            company_id: this.companyid,\n            company_name: this.companyname,\n            unsubscribe_plan: true,    \n            email: this.$session.get(\"UserInformation\").email\n          }\n        )\n        .then((response) => {\n          if (response.data.message.MSG_CODE === this.api_status_code.DATA_AVAILABLE.MSG_CODE)\n          {\n            let message = response.data.data.UserMenu;\n            this.update_sidebar_menu(message);\n            this.$root.$emit(\"SideBarMenuUpdated\", true);\n            //  console.log(\"update successfully\")\n            this.update_restriction_list(response.data.data.RestrictionList, response.data.data.SubscribedPlan)\n            this.get_current_subscription_details()\n            this.$router.push(\"/bot/subscription-renewal\");\n          } else {\n            Swal({\n              // title: this.tlt('billing_error_occurred_msg9'),\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              timer: 2500,\n              type: \"error\"\n          });\n          }\n        })\n        .catch((e) => {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n  },\n  get_plans_from_db() {\n    this.spinnerOn = true;\n      axios\n        .post(api_calls.stripe_payment_gateway(), {\n          company_id: this.companyid,\n          company_name: this.companyname,\n          get_plans_from_db: true,\n        })\n        .then((response) => {\n          if (response.data.message.MSG_CODE === this.api_status_code.DATA_AVAILABLE.MSG_CODE)\n          {\n            this.spinnerOn = false;\n            this.stripe_subscription_plans = response.data.data;\n            this.show_subscription = true;\n          } else {\n            this.stripe_subscription_plans_details = [];\n          }\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          Swal.fire({\n            title: this.tlt('billing_error_occurred_msg2'),\n            type: \"error\",\n          });\n        });\n  },\n  get_current_subscription_details() {\n    this.spinnerOn = true;\n      axios\n        .post(api_calls.stripe_payment_gateway(), {\n          company_id: this.companyid,\n          company_name: this.companyname,\n          get_active_plan: true,\n        })\n        .then((response) => {\n          if (response.data.message.MSG_CODE === this.api_status_code.DATA_AVAILABLE.MSG_CODE)\n          {\n            this.spinnerOn = false;\n            this.stripe_subscription_plans_details = response.data.data.Data.current_subscription;\n            this.hide_button = response.data.data.Data.current_subscription.subscription_type;\n            this.show_subscription = true;\n          } else {\n            this.stripe_subscription_plans_details = [];\n              Swal({\n              title:response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              timer: 2500,\n              type: \"error\"\n            });\n          }\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          console.log(e ,'eee');\n          Swal.fire({\n            title: this.tlt('billing_error_occurred_msg2'),\n            type: \"error\",\n          });\n        });\n  },\n  // get_current_subscription() {\n  //   axios\n  //     .post(api_calls.razorpay_communcation(), {\n  //       company_id: this.companyid,\n  //       company_name: this.companyname,\n  //       is_get: true,\n  //     })\n  //     .then((response) => {\n  //       // console.log(\"CURRENT PLAN DETAILS\",response);\n  //       if (response.data == null) {\n  //         this.subscription_btn_disable = true;\n  //         Swal({\n  //           title: this.tlt('billing_no_active_subscription_msg1'),\n  //           type: \"error\",\n  //           toast: true,\n  //           showConfirmButton: false,\n  //           timer: 2000,\n  //         });\n  //       } else if (response.data.MSG == \"Current Subscription Plan\") {\n  //         this.selected_subscription =\n  //           response.data.subscription.subscription_type;\n  //         this.selected_period = response.data.subscription.period;\n  //         this.customer_id = response.data.customer_id;\n  //         this.subscription_btn_disable = false;\n  //       } else if (response.data.MSG == \"No Active Subscription plan found\") {\n  //         this.customer_id = response.data.customer_id;\n  //         Swal({\n  //           title: this.tlt('billing_no_active_subscription_msg2'),\n  //           type: \"warning\",\n  //           toast: true,\n  //           showConfirmButton: false,\n  //           timer: 2000,\n  //         });\n  //         this.subscription_btn_disable = true;\n  //       }\n  //     })\n  //     .catch((e) => {\n  //       this.spinnerOn = false;\n  //       if (\n  //         e.response.status === 410 ||\n  //         e.response.status === 440 ||\n  //         e.response.status === 409\n  //       ) {\n  //         this.$root.$emit(\"Session_Expired\", e.response.data);\n  //       }\n  //     });\n  // },\n  check_addons_balance() {\n    this.spinnerOn = true;\n    axios.post(\n      api_calls.check_addons_balance(),\n      {\n        company_name: this.companyname,\n        company_id: this.companyid,\n        check_balance: true\n      },\n      {\n          headers: {\n            Authorization: `Bearer ${this.$session.get(\"at\")}`,\n          },\n        }\n    )\n    .then((response) =>{\n      // console.log(response);\n      this.spinnerOn = false;\n      if(response.data.message.MSG_CODE === this.api_status_code.CHECK_BALANCE.MSG_CODE){\n        if(Boolean(response.data.data.credits.sms_count) == true) {\n          var sms_count = response.data.data.credits.sms_count;\n          this.credits_balance = sms_count;\n          // this.credits_balance = this.tlt('current_sms_credit_text') + \"<strong> \"+ this.tlt('current_sms_credit_text2') + \": \" + sms_count.us + \" | \" + this.tlt('current_sms_credit_text3') + \": \" + sms_count.non_us + \"</strong>\"\n        }else {\n          Swal.fire({\n            title: response.data.message.MSG_CODE,\n            text: response.data.message.MSG,\n            showCancelButton: false,\n            showConfirmButton: false,\n            type: \"error\"\n          });\n        }\n      }\n      })\n      .catch((e) => {\n        this.spinnerOn = false;\n        if (\n          e.response.status === 410 ||\n          e.response.status === 440 ||\n          e.response.status === 409\n        ) {\n          this.$root.$emit(\"Session_Expired\", e.response.data);\n        }\n      });\n  },\n  get_addon_details() {\n    axios\n      .post(api_calls.stripe_payment_gateway(), {\n        get_add_ons: true,\n      })\n      .then((response) => {\n        if (response.data.message.MSG_CODE === this.api_status_code.NO_ADD_ONS_FOUND.MSG_CODE) {\n          this.stripe_addon_plans = [];\n          return;\n        }else if (response.data.message.MSG_CODE === this.api_status_code.DATA_AVAILABLE.MSG_CODE){ \n          if (Boolean(response.data.data) != false ) {\n            this.stripe_addon_plans = response.data.data;\n          }\n      }  else {\n          Swal({\n            title:response.data.message.MSG_CODE,\n            text:response.data.message.MSG,\n            showCancelButton: false,\n            showConfirmButton: false,\n            timer: 2500,\n            type: \"error\"\n          })\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n        Swal.fire({\n          title: this.tlt('billing_error_occurred_msg3'),\n          type: \"error\",\n        });\n      });\n  },\n  // get_subscription_details() {\n  //   axios\n  //     .post(api_calls.stripe_payment_gateway(), {\n  //       company_id: this.companyid,\n  //       company_name: this.companyname,\n  //       get_plans: true,\n  //     })\n  //     .then((response) => {\n  //       // console.log(response.data);\n  //       if (\n  //         response.data.Status === \"Success\" &&\n  //         response.data.Data.data.length > 0\n  //       ) {\n  //         this.stripe_subscription_plans = response.data.Data.data;\n  //       } else {\n  //         this.stripe_subscription_plans = [];\n  //       }\n  //     })\n  //     .catch((e) => {\n  //       console.log(e);\n  //       Swal.fire({\n  //         title: this.tlt('billing_error_occurred_msg4'),\n  //         type: \"error\",\n  //       });\n  //     });\n  // },\n  cancel_subscription() {\n    axios\n      .post(api_calls.razorpay_communcation(), {\n        is_cancel: true,\n        subscription_id: this.subscription_id,\n      })\n      .then((response) => {\n        if (response.data.message.MSG_CODE === this.api_status_code.SUBSCRIPTION_CANCEL_SUCCESS.MSG_CODE) {\n          this.subscription_btn_disable = true;\n        } else {\n          Swal({\n            title: this.tlt('billing_internal_server_msg1'),\n            type: \"error\",\n            showConfirmButton: false,\n            timer: 2000,\n          });\n        }\n      })\n      .catch((e) => {\n        this.spinnerOn = false;\n        if (\n          e.response.status === 410 ||\n          e.response.status === 440 ||\n          e.response.status === 409\n        ) {\n          this.$root.$emit(\"Session_Expired\", e.response.data);\n        }\n      });\n  },\n  create_customer() {\n    if (this.selected_subscription == \"\" || this.selected_period == \"\") {\n      Swal({\n        type: \"info\",\n        text: this.tlt('billing_subscribe_plan_period_msg'),\n        toast: true,\n        position: \"top-right\",\n        showConfirmButton: false,\n        timer: 2000,\n      });\n      return;\n    }\n    var period = this.selected_period.toLowerCase();\n    for (var i in this.subscription_plans) {\n      if (period == this.subscription_plans[i].period) {\n        if (\n          this.selected_subscription == this.subscription_plans[i].item.name\n        ) {\n          this.plan_id = this.subscription_plans[i].id;\n          // console.log(\"PLAN NAME:\", this.subscription_plans[i].item.name);\n          // console.log(\"PLAN ID:\", this.subscription_plans[i].id);\n        }\n      }\n    }\n    if (this.plan_id == \"\") {\n      Swal({\n        title: this.tlt('billing_plan_not_found_msg'),\n        type: \"error\",\n        text: this.tlt('billing_contact_cense_admin_msg'),\n        showConfirmButton: false,\n        timer: 2000,\n      });\n      return;\n    }\n    if (this.customer_id == \"\") {\n      var cust_data = {\n        name: this.companyname,\n        contact: \"\",\n        email: this.$session.get(\"UserInformation\").email,\n        notes: { Extra: \"Details related to customer\" },\n      };\n      axios\n        .post(api_calls.razorpay_communcation(), {\n          company_id: this.companyid,\n          company_name: this.companyname,\n          create_customer_id: true,\n          data: cust_data,\n        })\n        .then((response) => {\n          if (data.message.MSG_CODE === this.api_status_code.STATUS_SUCCESS.MSG_CODE) {\n            var customer_detail = response.data.data.Customer_Detail;\n            this.customer_id = response.data.data.Customer_Detail.id;\n            // console.log(\"customer id\",this.customer_id);\n            this.create_subscription(this.plan_id, this.customer_id);\n          } else {\n            Swal({\n              title: this.tlt('billing_internal_server_msg2'),\n              type: \"error\",\n              text: this.tlt('billing_error_creating_cust_id_msg'),\n              timer: 2000,\n            });\n          }\n        })\n        .catch((e) => {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    } else {\n      this.create_subscription(this.plan_id, this.customer_id);\n    }\n  },\n  create_subscription(plan_id, customer_id) {\n    var sub_data = {\n      plan_id: plan_id,\n      customer_id: customer_id,\n    };\n    axios\n      .post(api_calls.razorpay_communcation(), {\n        create_subscription: true,\n        data: sub_data,\n      })\n      .then((response) => {\n        if (response.data.message.MSG_CODE === this.api_status_code.STATUS_SUCCESS.MSG_CODE ) {\n          this.subscription_id = response.data.data.Subscription_Detail.id;\n          // console.log(\"Subscription id\", response);\n          this.start_payment(this.subscription_id);\n        } else {\n          Swal({\n            title: this.tlt('billing_internal_server_msg3'),\n            type: \"error\",\n            text: this.tlt('billing_error_creating_subscription_msg'),\n            timer: 2000,\n          });\n        }\n      })\n      .catch((e) => {\n        if (\n          e.response.status === 410 ||\n          e.response.status === 440 ||\n          e.response.status === 409\n        ) {\n          this.$root.$emit(\"Session_Expired\", e.response.data);\n        }\n      });\n  },\n  start_payment(subscription_id) {\n    var vm = this;\n    // start_payment(){\n    //   var vm = this;\n    //   var data = {\n    //     order_amount: 50000,\n    //     order_currency: 'INR',\n    //     order_receipt: 'order_rcptid_11',\n    //     payment_capture: 1,\n    //     notes: {'Shipping address': 'Bommanahalli, Bangalore'}\n    //   }\n    //   axios.\n    //     post(\n    //       api_calls.razorpay_communcation(),\n    //       {\n    //         generate_order_id: true,\n    //         data: data\n    //       }).then((response) => {\n    //       if(response.data.MSG == \"Order ID created\"){\n    //         console.log(response.data.Order_Detail);\n    //         vm.order_id = response.data.Order_Detail.id;\n    //         vm.amount = response.data.Order_Detail.amount;\n    //         console.log(\"reached\");\n    var options = {\n      key: process.env.VUE_APP_RAZORPAY_KEY, // Enter the Key ID generated from the Dashboard\n      subscription_id: subscription_id, // You dont need amount/currency/order_id when submitting subscription id\n      // \"amount\": this.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\n      // \"currency\": \"INR\",\n      name: \"Cense AI\",\n      description: \"Test Transaction\",\n      image: require(\"@/portal/assets/img/cense_logo.png\"),\n      // \"order_id\": this.order_id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\n      handler: function (response) {\n        // console.log(\"FINAL PAY\", response);\n        var razorpay_payment_id = response.razorpay_payment_id;\n        // var razorpay_order_id = response.razorpay_order_id;\n        var razorpay_subscription_id = response.razorpay_subscription_id;\n        var razorpay_signature = response.razorpay_signature;\n        vm.pay_success_data = {};\n        vm.pay_success_data = {\n          razorpay_payment_id: razorpay_payment_id,\n          // razorpay_order_id: razorpay_order_id,\n          razorpay_subscription_id: razorpay_subscription_id,\n          razorpay_signature: razorpay_signature,\n          razorpay_customer_id: vm.customer_id,\n          // order_id: this.order_id,\n          subscription_status: \"active\",\n          subscription_id: vm.subscription_id,\n          plan_id: vm.plan_id,\n          subscription_type: vm.selected_subscription,\n          subscription_period: vm.selected_period,\n        };\n        // console.log(\"PAYMENT SUCCESS DATA\",vm.pay_success_data);\n        if (Object.keys(vm.pay_success_data).length != 0) {\n          vm.add_details_to_server(vm.pay_success_data);\n        } else {\n          // console.log(\"Transaction did not succeed\");\n        }\n      },\n      // \"prefill\": {\n      //     \"name\": \"Gaurav Kumar\",\n      //     \"email\": \"gaurav.kumar@example.com\",\n      //     \"contact\": \"+919876543210\"\n      // },\n      notes: {\n        address: \"Razorpay Corporate Office\",\n      },\n      theme: {\n        color: \"#3399cc\",\n      },\n    };\n    var rzp1 = new Razorpay(options);\n    rzp1.on(\"payment.failed\", function (response) {\n      // console.log(\"error\", response);\n      alert(response.error.code);\n      alert(response.error.description);\n      alert(response.error.source);\n      alert(response.error.step);\n      alert(response.error.reason);\n      alert(response.error.metadata.order_id);\n      alert(response.error.metadata.payment_id);\n    });\n    rzp1.open();\n    // }\n    // })\n    // .catch((e) => {\n    //   this.spinnerOn = false;\n    //     if (\n    //       e.response.status === 410 ||\n    //       e.response.status === 440 ||\n    //       e.response.status === 409\n    //     ) {\n    //       this.$root.$emit(\"Session_Expired\", e.response.data);\n    //     }\n    //   });\n  },\n  add_details_to_server(data) {\n    if (data != null) {\n      axios\n        .post(api_calls.razorpay_communcation(), {\n          company_id: this.companyid,\n          company_name: this.companyname,\n          verify_subscription: true,\n          data: data,\n        })\n        .then((response) => {\n          if (response.data.message.MSG_CODE === this.api_status_code.SUBSCRIPTION_VERIFICATION_SUCCESS.MSG_CODE) {\n            Swal({\n              title: this.tlt('billing_subscription_register_msg'),\n              type: \"success\",\n              timer: 2000,\n            });\n            this.pay_success_data = {};\n            this.subscription_btn_disable = false;\n          } else {\n            Swal({\n              title: this.tlt('billing_internal_server_msg4'),\n              type: \"error\",\n              text: this.tlt('billing_error_occur_subscription_msg'),\n              toast: true,\n              timer: 2000,\n            });\n            this.pay_success_data = {};\n          }\n        })\n        .catch((e) => {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    }\n  },\n  // toggle_change(value) {\n  //   if (value == \"INR\") {\n  //     this.common_currency = this.INR;\n  //   } else {\n  //     this.common_currency = this.USD;\n  //   }\n  //   if (value == \"INR\") {\n  //     this.common_currency2 = this.INR2;\n  //   } else {\n  //     this.common_currency2 = this.USD2;\n  //   }\n  // },\n  download_invoice(num) {\n    this.spinnerOn = true;\n    axios({\n      method: \"post\",\n      url: api_calls.billing_invoice(),\n      responseType: \"blob\",\n      data: {\n        company_id: this.$session.get(\"UserInformation\").company_id,\n        company_name: this.$session.get(\"UserInformation\").company_name,\n        email: this.$session.get(\"UserInformation\").email,\n        license_key: this.$session.get(\"UserInformation\").license_key,\n        token: this.$session.get(\"UserInformation\").tokens,\n        download_file: true,\n        file_name: this.invoice_details[num],\n      },\n      headers: {\n        Authorization: `Bearer ${this.$session.get(\"at\")}`,\n      },\n    })\n      .then((response) => {\n        this.spinnerOn = false;\n        if (response.data.message.MSG_CODE === this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE) {\n          this.spinnerOn = false;\n          toastr.error(\n            this.tlt('billing_download_invoice_msg')\n          );\n        } else {\n          this.spinnerOn = false;\n          var url = window.URL.createObjectURL(new Blob([response.data.data]));\n          var link = document.createElement(\"a\");\n          link.href = url;\n          link.setAttribute(\"download\", \"Ashish\" + \".pdf\");\n          document.body.appendChild(link);\n          link.click();\n        }\n      })\n      .catch((e) => {\n        if (\n          e.response.status === 410 ||\n          e.response.status === 440 ||\n          e.response.status === 409\n        ) {\n          this.$root.$emit(\"Session_Expired\", e.response.data);\n        }\n      });\n  },\n  call_payment(type) {\n    var d = new Date();\n    // console.log(d);\n    var vm = this;\n    var options = {};\n    if (type == \"country_selected\") {\n      if (this.country_name.code == \"\") {\n        alert(this.tlt('billing_select_country_msg'));\n      } else {\n        this.spinnerOn = true;\n        axios\n          .post(\n            api_calls.edit_profile_url(),\n            {\n              company_id: this.$session.get(\"UserInformation\").company_id,\n              company_name: this.$session.get(\"UserInformation\").company_name,\n              email: this.$session.get(\"UserInformation\").email,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              token: this.$session.get(\"UserInformation\").tokens,\n              first_name: this.$session.get(\"UserInformation\").first_name,\n              last_name: this.$session.get(\"UserInformation\").last_name,\n              country_name: this.country_name.code,\n              phone_number: this.$session.get(\"UserInformation\").phone_no,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            this.spinnerOn = false;\n            if (response.data.message.MSG_CODE === this.api_status_code.PROFILE_UPDATED.MSG_CODE ) {\n              //   Swal({\n              //   title: \"Updated Successfully!!\",\n              //   type: \"success\",\n              //   text: \"Your profile has been updated successfully.\",\n              //   timer:2000,\n              // });\n              toastr.success(this.tlt('billing_profile_updated_msg'));\n              this.$session.set(\"country_name\", this.country_name.code);\n              setTimeout(() => {\n                this.$router.go();\n              }, 2500);\n            }\n            $(\"#countrymodal\").modal(\"hide\");\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      }\n    } else if (event.target.innerText == \"Pay\") {\n      if (this.value_currency_top_up == \"\") {\n        toastr.error(this.tlt('billing_select_amount_msg1'));\n      } else if (this.payment_currency == \"INR\") {\n        this.value_currency_top_up = this.value_currency_top_up.slice(2, -10);\n        this.currency_amount = this.value_currency_top_up * 118;\n        this.top_up_amount = this.value_currency_top_up;\n        if (this.payment_currency == \"INR\") {\n          this.top_up_amount /= 70;\n        }\n        pay_amount(this.currency_amount, this.payment_currency, \"Top Up\");\n      } else {\n        this.value_currency_top_up = this.value_currency_top_up.slice(2);\n        this.currency_amount = this.value_currency_top_up * 100;\n        this.top_up_amount = this.value_currency_top_up;\n\n        pay_amount(this.currency_amount, this.payment_currency, \"Top Up\");\n      }\n    } else if (event.target.innerText == \"Subscribe\") {\n      this.spinnerOn = true;\n      if (this.value_currency_subscription == \"\") {\n        toastr.error(this.tlt('billing_select_amount_msg2'));\n      } else if (this.payment_currency == \"INR\") {\n        this.value_currency_subscription =\n          this.value_currency_subscription.slice(2, -10);\n        this.currency_amount = this.value_currency_subscription * 118;\n        this.top_up_amount = this.value_currency_subscription;\n        if (this.payment_currency == \"INR\") {\n          this.top_up_amount /= 70;\n        }\n        axios\n          .post(\n            api_calls.billing_subscription_url(),\n            {\n              company_id: this.$session.get(\"UserInformation\").company_id,\n              company_name: this.$session.get(\"UserInformation\").company_name,\n              email: this.$session.get(\"UserInformation\").email,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              token: this.$session.get(\"UserInformation\").tokens,\n              PlanAmount: this.top_up_amount,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            if (response.data.SubscriptionId) {\n              pay_amount(response.data.SubscriptionId, \"\", \"Subscribe\");\n            } else if (response.data.Error) {\n              toastr.error(response.data.Error);\n            }\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      } else {\n        this.value_currency_subscription =\n          this.value_currency_subscription.slice(2);\n        this.currency_amount = this.value_currency_subscription * 100;\n        this.top_up_amount = this.value_currency_subscription;\n        this.spinnerOn = true;\n        axios\n          .post(\n            api_calls.billing_subscription_url(),\n            {\n              company_id: this.$session.get(\"UserInformation\").company_id,\n              company_botname: this.$session.get(\"UserInformation\").company_name,\n              email: this.$session.get(\"UserInformation\").email,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              token: this.$session.get(\"UserInformation\").tokens,\n              PlanAmount: this.currency_amount,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            this.spinnerOn = false;\n            if (response.data.SubscriptionId) {\n              pay_amount(response.data.SubscriptionId, \"\", \"Subscribe\");\n            } else if (response.data.Error) {\n              toastr.error(response.data.Error);\n            }\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      }\n    }\n    function pay_amount(amount, currency_type, payment_type) {\n      if (payment_type == \"Subscribe\") {\n        options = {\n          key: \"rzp_test_SnDTaPnncfliDt\",\n          subscription_id: amount, //This is actually subscription ID\n          // subscription_card_change: 1,\n          name: \"Cense AI\",\n          description: \"Instill Intelligence\",\n          image: \"/img/cense_image.png\", // COMPANY LOGO\n          handler: function (response) {\n            // console.log(response.razorpay_payment_id);\n            // var contact = $('#contact[type=\"tel\"]').value;\n            // var email = $('#email[type=\"email\"]').value;\n            vm.paymentid = response.razorpay_payment_id;\n            vm.value_currency_subscription = \"\";\n          },\n          prefill: {\n            name: \"\", // pass customer name\n            email: \"\", // customer email\n            contact: \"\", //customer phone no.\n          },\n          notes: {\n            address: \"address\", //customer address\n          },\n          theme: {\n            color: \"#283777\", // screen color\n          },\n        };\n        load_checkout();\n      } else if (payment_type == \"Pay\") {\n        options = {\n          key: \"rzp_test_SnDTaPnncfliDt\",\n          amount: amount, // Example: 2000 paise = INR 20\n          currency: currency_type,\n          name: \"Cense AI\",\n          description: \"Instill Intelligence\",\n          image: \"/img/cense_image.png\", // COMPANY LOGO\n\n          handler: function (response) {\n            // console.log(response.razorpay_payment_id);\n            var contact = $('#contact[type=\"tel\"]').value;\n            var email = $('#email[type=\"email\"]').value;\n            vm.paymentid = response.razorpay_payment_id;\n            vm.value_currency_top_up = \"\";\n          },\n          prefill: {\n            name: \"\", // pass customer name\n            email: \"\", // customer email\n            contact: \"\", //customer phone no.\n          },\n          notes: {\n            address: \"address\", //customer address\n          },\n          theme: {\n            color: \"#283777\", // screen color\n          },\n        };\n        load_checkout();\n      }\n    }\n    function load_checkout() {\n      var rzp1 = new Razorpay(options);\n      rzp1.open();\n      event.preventDefault();\n    }\n  },\n  check_retail_plan(value, id) {\n    this.retail_payment_type = null;\n  },\n  subscribe_retail_plan() {\n    // let subscription_data = {\n    //   subscription_plan: this.retail_plan_current,\n    //   billing_cycle: this.retail_payment_type,\n    // };\n    if (this.check_retail_shopify_form_validations) {\n      this.spinnerOn = true;\n      axios\n        .post(api_calls.subscribe_shopify_billing(), {\n          subscription_plan: this.retail_plan_current,\n          billing_cycle: this.retail_payment_type,\n          company_id: this.companyid,\n          company_name: this.companyname,\n          is_paid_plan: this.retail_plan_current.is_chargeable,\n          email: this.$session.get(\"UserInformation\").email,\n        })\n        .then((response) => {\n          this.spinnerOn = false;\n          if (response.data.message.MSG_CODE === this.api_status_code.STATUS_SUCCESS_MODELS.MSG_CODE) {\n            if (this.retail_payment_type == \"Annual\") {\n              if (\n                Boolean(response.data.data) &&\n                Boolean(response.data.data.data.appSubscriptionCreate)\n              ) {\n                Swal({\n                  title:\n                    this.tlt('billing_redirect_shopify_merchant_msg'),\n                  toast: true,\n                  showCancelButton: false,\n                  type: \"info\",\n                  showConfirmButton: false,\n                });\n                setTimeout(() => {\n                  window.location =\n                    response.data.data.data.appSubscriptionCreate.confirmationUrl;\n                }, 1000);\n                this.$root.$emit(\"DashboardSidebarDisable\",false);\n                this.$session.set(\"SettingTopnavbarDisable\",false);\n              }\n            } else if (this.retail_payment_type == \"Monthly\") {\n              if (Boolean(response.data.data.confirmation_url)) {\n                // Swal({\n                //   title: \"Please wait while we redirect You to the Shopify Merchant UI!\",\n                //   toast: true,\n                //   type: \"info\",\n                //   showCancelButton: false,\n                //   showConfirmButton: false\n                // })\n                this.$root.$emit(\"DashboardSidebarDisable\",false);\n                this.$session.set(\"SettingTopnavbarDisable\",false);\n                setTimeout(() => {\n                  window.location = response.data.data.confirmation_url;\n                }, 1000);\n              } else {\n                Swal({\n                  title: this.tlt('billing_error_occurred_msg5'),\n                  text: this.tlt('billing_swal_try_again_msg1'),\n                  type: \"error\",\n                  showCancelButton: false,\n                });\n              }\n            } else if (this.retail_plan_current.is_chargeable === false) {\n              Swal({\n                title: this.tlt('billing_swal_success_msg'),\n                type: \"success\",\n                text: this.tlt('billing_subscribe_free_plan_msg'),\n              });\n            }\n          }else {\n            Swal.fire({\n              title:response.data.message.MSG_CODE,\n              text:response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              timer: 2500,\n              type: \"error\"\n            });\n          }\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          console.log(e);\n          Swal({\n            title: this.tlt('billing_error_occurred_msg6'),\n            text: this.tlt('billing_swal_try_again_msg2'),\n            type: \"error\",\n            showCancelButton: false,\n          });\n        });\n    } else {\n      Swal({\n        title: this.tlt('billing_select_all_required_value_msg'),\n        type: \"error\",\n        toast: true,\n        showCancelButton: false,\n        showConfirmButton: false,\n        timer:3000\n      });\n    }\n  },\n  submit_stripe_checkout() {\n    if(this.retail_plan_current !== null && this.retail_payment_type !== null){\n      // let chosen_plan_data = this.retail_payment_type===\"Monthly\" || this.retail_plan_current.name===\"WhatsApp\" ? this.stripe_subscription_plans.find((item => (item.amount/100 === this.retail_plan_current.monthly_charge) && (item.currency === this.shop_base_currency)))  : this.stripe_subscription_plans.find((item => (item.amount/100 === this.retail_plan_current.annual_charge.actual_charge) &&  (item.currency === this.shop_base_currency))) \n      // console.log(\"retail_payment_type\",this.retail_payment_type);\n      \n      var chosen_plan_data = {\n        \"plan_name\" : this.retail_plan_current,\n        \"type\": this.retail_payment_type.type,\n        \"nickname\" : this.retail_payment_type.nickname,\n        \"price\" : this.retail_payment_type.price,\n        \"currency\": this.retail_payment_type.currency,\n        \"id\": this.retail_payment_type.price_id\n      }\n      this.spinnerOn = true;\n      axios\n        .post(api_calls.stripe_payment_gateway(), {\n          generate_new_request: true,\n          chosen_plan_data: chosen_plan_data,\n          company_id: this.companyid,\n          company_name: this.companyname,\n          request_type: \"Plan\",\n          email: this.$session.get(\"UserInformation\").email,\n        })\n        .then((response) => {\n          this.spinnerOn = false;\n          if (response.data.message.MSG_CODE === this.api_status_code.DATA_AVAILABLE.MSG_CODE) {\n            window.location = response.data.data;\n             this.$root.$emit(\"DashboardSidebarDisable\",false);\n             this.$session.set(\"SettingTopnavbarDisable\",false);\n          } else {\n            Swal({\n              // title: this.tlt('billing_error_occurred_msg7'),\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              timer: 2500,\n              type: \"error\"\n            });\n          }\n          // console.log(response.data);\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          console.log(e);\n          Swal({\n            title: this.tlt('billing_error_occurred_msg8'),\n            type: \"error\",\n          });\n        });\n    }else {\n      Swal({\n        title: this.tlt('billing_select_all_field_msg'),\n        type: \"error\",\n        showCancelButton: false\n      });\n    }\n  },\n  submit_stripe_addon_checkout() {\n    if(this.selected_addon_type === null ||this.selected_addon_plan === null ){\n    Swal({\n        title: this.tlt('billing_select_all_field_msg1'),\n        type: \"error\",\n      });\n      return;\n    }\n\n    var chosen_plan_data = {\n      \"plan_name\" : this.selected_addon_plan.Type ,\n      \"price\" : this.selected_addon_type.price,\n      \"currency\": this.selected_addon_type.currency,\n      \"id\": this.selected_addon_type.price_id\n    }\n\n    this.spinnerOn = true;\n      axios\n        .post(api_calls.stripe_payment_gateway(), {\n          generate_new_request: true,\n          chosen_plan_data: chosen_plan_data,\n          company_id: this.companyid,\n          company_name: this.companyname,\n          request_type: \"AddOn\"\n        })\n        .then((response) => {\n          this.spinnerOn = false;\n          if (response.data.message.MSG_CODE === this.api_status_code.DATA_AVAILABLE.MSG_CODE) {\n            window.location = response.data.data;\n          } else {\n            Swal({\n              // title: this.tlt('billing_error_occurred_msg9'),\n              title: response.data.message.MSG_CODE,\n              text: response.data.message.MSG,\n              showCancelButton: false,\n              showConfirmButton: false,\n              timer: 2500,\n              type: \"error\"\n            });\n          }\n          // console.log(response.data);\n        })\n        .catch((e) => {\n          this.spinnerOn = false;\n          console.log(e);\n          Swal({\n            title: this.tlt('billing_error_occurred_msg10'),\n            type: \"error\",\n          });\n        });\n  },\n  get_shop_base_currency(){\n    axios\n      .post(\n        api_calls.product_settings(),\n        {\n          company_name: this.companyname,\n          company_id: this.companyid,\n          email: this.$session.get(\"UserInformation\").email,\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          token: this.$session.get(\"UserInformation\").tokens,\n          is_get: true\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${this.$session.get(\"at\")}`\n          }\n        }\n      ).then((response) => {\n        let web_framework = this.retail_web_framework;\n        if (\n            response.data.message.MSG_CODE != this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE &&\n            response.data.message.MSG_CODE != this.api_status_code.NO_DATA_AVAILABLE.MSG_CODE\n        ) {\n          this.shop_base_currency = response.data.data[web_framework + '_details'].base_currency.value;\n          this.shop_base_currency = this.acceptable_shop_base_currencies.includes(this.shop_base_currency) ?  this.shop_base_currency.toLowerCase() : 'usd'\n        }\n      }).catch((e) => {\n        this.shop_base_currency = 'usd';\n      })\n  },\n  },\n};\n</script>\n<style scoped>\n.red-btn{\n    font-size: 14px;\n    color: #fff;\n    background: #F23D3D;;\n    border: solid 1px #F23D3D;;\n    padding: 6px 15px;\n    font-weight: 400;\n    line-height: 20px;\n    display: inline-block;\n    border-radius: 4px;\n    cursor: pointer;\n    margin-left: 18px\n\n}\n.red-btn:hover {\n  background: none;\n  color: #273679;\n}\n\n.dash-card .card-body {\n  min-height: fit-content;\n}\n.col-lg-2 {\n  width: 100%;\n  margin-bottom: 1%;\n}\n#year_select_id {\n  padding: 5px 5px 5px 5px;\n}\n#payment_btn {\n  margin-left: auto;\n  width: auto;\n  text-align: center;\n  padding: 6px 15px;\n}\n.table td,\n.table th {\n  vertical-align: baseline;\n}\n</style>\n\n<style>\n/* .multiselect__tags {\n  min-height: 38px !important;\n  max-height: 42px !important;\n  height: 42px;\n} */\n</style>"]}]}