{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/TrainTestBot.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/TrainTestBot.vue","mtime":1643027096168},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBhcGlfY2FsbHMgZnJvbSAiQC9wb3J0YWwvYXBpX2NhbGxzIjsKaW1wb3J0IFN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwppbXBvcnQgc3dhbCBmcm9tICJzd2VldGFsZXJ0MiI7CmltcG9ydCBNdWx0aXNlbGVjdCBmcm9tICJ2dWUtbXVsdGlzZWxlY3QiOwppbXBvcnQgeyBmcmVlemVfcG9ydGFsLHNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbCB9IGZyb20gIkAvcG9ydGFsL21peGlucyI7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlRyYWluVGVzdEJvdFBhZ2UiLAogIG1peGluczogWwogICAgZnJlZXplX3BvcnRhbCwKICAgIHNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbAogIF0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGZpbHRlcl9zdGF0dXM6IkZhaWx1cmUiLAogICAgICBzcGlubmVyT246IGZhbHNlLAogICAgICBxdWVzdGlvbnNfbGlzdDogW10sCiAgICAgIGludGVudF9saXN0OiBbXSwKICAgICAgY3VycmVudF9zZWxlY3RlZF9pbnRlbnQ6IG51bGwsCiAgICAgIHNlbGVjdGVkX3F1ZXN0aW9uX2luZGV4OiBudWxsLAogICAgICBjdXJyZW50X3NlbGVjdGVkX2ludGVudF9xdWVzdGlvbnM6IFtdLAogICAgICBzdGF0dXNfbGlzdDogWyJTdWNjZXNzIiwgIkZhaWx1cmUiXSwKICAgICAgc2VsZWN0ZWRfc3RhdHVzbGlzdDogWyJGYWlsdXJlIl0sCiAgICAgIGNvbXBhbnlfaWQ6IG51bGwsCiAgICAgIGNvbXBhbnlfbmFtZTogbnVsbCwKICAgICAgZmlsZV9sYWJlbDogIkNob29zZSBmaWxlIiwKICAgICAgZmlsZV9jb250ZW50OiAiIiwKICAgICAgcGFnZV9ubzogMSwKICAgICAgbnVtYmVyX29mX3Jvd3M6IDAsCiAgICAgIHRvdGFsX3BhZ2VzOiAxLAogICAgICBwZXJfcGFnZTogMjAsCiAgICAgIHBhZ2VfYXJyYXk6IFtdLAogICAgICBzaG93X25vX3F1ZXN0aW9uc19tZXNzYWdlOiBmYWxzZSwKICAgICAgaW50ZW50X21vZGVsX2lucHJvZ3Jlc3M6IGZhbHNlLAogICAgICB3YW50X3N0YXR1czogdHJ1ZSwKICAgICAgZnVsbHNjcmVlbjogZmFsc2UsCiAgICAgIGRpc2FibGVfYnRuX2V4cGlyZWQ6IGZhbHNlLAogICAgfTsKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIE11bHRpc2VsZWN0LAogIH0sCiAgbW91bnRlZCgpIHsKICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICB0aGlzLmZyZWV6ZV9wb3J0YWwoKTsKICAgIH0sIDEwMDApOwogICAgCiAgICB0aGlzLiRyb290LiRvbigiVHJhaW5UZXN0Qm90UGFnZURpc2FibGVkIiwgKGRhdGEpID0+ewogICAgICBpZihkYXRhPT09dHJ1ZSl7CiAgICAgICAgdGhpcy5kaXNhYmxlX2J0bl9leHBpcmVkID0gdHJ1ZTsKICAgICAgfQogICAgfSkKCiAgICAvLyB0aGlzLmNvbXBhbnlfaWQgPSB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZDsKICAgIGlmICgKICAgICAgIXRoaXMuJHNlc3Npb24uaGFzKCJDb21wYW55SWQiKSAmJgogICAgICB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSA9PSAiU3VwZXJBZG1pbiIKICAgICkgewogICAgICB0b2FzdHIud2FybmluZygiUGxlYXNlIHNlbGVjdCBhIGNvbXBhbnkgbmFtZSBmcm9tIHRoZSBkcm9wZG93biIpOwogICAgfSBlbHNlIGlmICh0aGlzLnVzZXJfcm9sZSA9PSAiU3VwZXJBZG1pbiIpIHsKICAgICAgaWYgKHRoaXMuJHNlc3Npb24uaGFzKCJDb21wYW55SWQiKSkgewogICAgICAgIHRoaXMuY29tcGFueV9pZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJDb21wYW55SWQiKTsKICAgICAgICB0aGlzLmNvbXBhbnlfbmFtZSA9IHRoaXMuJHNlc3Npb24uZ2V0KCJDb21wYW55TmFtZSIpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY29tcGFueV9pZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICAgIHRoaXMuY29tcGFueV9uYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdGhpcy5jb21wYW55X2lkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQ7CiAgICAgIHRoaXMuY29tcGFueV9uYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgIH0KICAgIHZhciB2bSA9IHRoaXM7CiAgICAkKCIuZHJvcGRvd24iKS5vbigiaGlkZS5icy5kcm9wZG93biIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAvLyB2YXIgeCA9ICQoZXZlbnQucmVsYXRlZFRhcmdldCkudGV4dCgpOyAvLyBHZXQgdGhlIHRleHQgb2YgdGhlIGVsZW1lbnQKICAgICAgLy8gYWxlcnQoeCk7CiAgICAgIC8vIGNvbnNvbGUubG9nKHZtLnNlbGVjdGVkX3N0YXR1c2xpc3QpOwogICAgfSk7CiAgICAkKCIjbXlNb2RhbCIpLm9uKCJoaWRkZW4uYnMubW9kYWwiLCAoKSA9PiB7CiAgICAgIHZtLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50ID0gbnVsbDsKICAgIH0pOwogICAgdGhpcy4kcm9vdC4kb24oInNlbmRfbW9kZWxfc3RhdHVzIiwgZGF0YSA9PnsKICAgICAgaWYgKGRhdGEgPT0gdHJ1ZSl7CiAgICAgICAgdGhpcy5jaGVja19pbnRlbnRfbW9kZWxfc3RhdHVzKCk7CiAgICAgIH0KICAgIH0pCiAgICB0aGlzLmdldF9pbnRlbnRzX2xpc3QoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZV9xdWVzdGlvbnNfZm9yX2ludGVudCgpOwogICAgdGhpcy5nZXRfcXVlc3Rpb25zX2xpc3QoKTsKICAgIHRoaXMuY2hlY2tfaW50ZW50X21vZGVsX3N0YXR1cygpOwogIH0sCiAgbWV0aG9kczogewogICAgY2hrX2NieF9jcnNyKGluZGV4KXsKICAgICAgaWYodGhpcy5zaG93X25vX3F1ZXN0aW9uc19tZXNzYWdlKXsKICAgICAgICBpZihpbmRleCA9PSAnc3R5bGUnKXsKICAgICAgICAgIHJldHVybiAiY3Vyc29yOiBub3QtYWxsb3dlZCI7CiAgICAgICAgfWVsc2UgaWYoaW5kZXggPT0gJ3RpdGxlJyl7CiAgICAgICAgICByZXR1cm4gIlRoZXJlIGFyZSBubyBmYWlsdXJlIGRhdGEgdG8gYmUgdHJhaW5lZC4iOwogICAgICAgIH0KICAgICAgfWVsc2V7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0sCiAgICBjaGVja19pbnRlbnRfbW9kZWxfc3RhdHVzKCl7CiAgICB0aGlzLm1vZGVsX3N0YXR1cyA9IHRoaXMuJHNlc3Npb24uZ2V0KCJNb2RlbFN0YXR1cyIpOwogICAgaWYgKHRoaXMubW9kZWxfc3RhdHVzID09ICJObyBGYWlsdXJlIil7CiAgICB0aGlzLmludGVudF9tb2RlbF9pbnByb2dyZXNzID0gZmFsc2U7CiAgICB9CiAgICBlbHNlIGlmIChCb29sZWFuKHRoaXMubW9kZWxfc3RhdHVzLmludGVudF9tb2RlbCkgPT09IHRydWUpewogICAgIGlmKHRoaXMubW9kZWxfc3RhdHVzLmludGVudF9tb2RlbCA9PSAiSW5Qcm9ncmVzcyIpewogICAgICAgdGhpcy5pbnRlbnRfbW9kZWxfaW5wcm9ncmVzcyA9IHRydWU7CiAgICAgfQogICAgIGVsc2V7CiAgICAgICB0aGlzLmludGVudF9tb2RlbF9pbnByb2dyZXNzID0gZmFsc2U7CiAgICAgfQogICAgfQogICAgZWxzZXsKICAgICAgdGhpcy5pbnRlbnRfbW9kZWxfaW5wcm9ncmVzcyA9IGZhbHNlOyAKICAgIH0KICAgIH0sCiAgICBzaG93X21vZGVsX3Byb2dyZXNzKGluZGV4KXsKICAgICAgaWYodGhpcy5pbnRlbnRfbW9kZWxfaW5wcm9ncmVzcyA9PSB0cnVlKXsKICAgICAgICAgaWYgKGluZGV4ID09ICdzdHlsZScpewogICAgICAgICAgICByZXR1cm4gImN1cnNvcjogbm90LWFsbG93ZWQiOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSBpZihpbmRleCA9PSAndGl0bGUnKXsKICAgICAgICAgICAgICByZXR1cm4gIlRyYWluaW5nIGluIFByb2dyZXNzKFRoaXMgcHJvY2VzcyBtaWdodCB0YWtlIGFyb3VuZCA0NSBtaW5zIHRvIGZpbmlzaCkgIjsKICAgICAgICAgIH0KICAgICAgfQogICAgICBlbHNlewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICB9LAogICAgZ2V0X3F1ZXN0aW9uc19saXN0KCkgewogICAgICB0aGlzLnNob3dfbm9fcXVlc3Rpb25zX21lc3NhZ2UgPSBmYWxzZTsKICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICB0aGlzLnF1ZXN0aW9uc19saXN0ID0gW107CiAgICAgIGF4aW9zCiAgICAgICAgLmdldChhcGlfY2FsbHMudGVzdF9pbnRlbnRfbW9kZWwoKSwgewogICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55X25hbWUsCiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueV9pZCwKICAgICAgICAgICAgbmV3X3F1ZXN0aW9uX2RhdGE6IHRoaXMubmV3X3F1ZXN0aW9uX2RhdGEsCiAgICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICBzdGF0dXM6IHRoaXMuc2VsZWN0ZWRfc3RhdHVzbGlzdCwKICAgICAgICAgICAgcGFnZW5vOiB0aGlzLnBhZ2Vfbm8sCiAgICAgICAgICAgIHBlcnBhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgICB9LAogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgIH0sCiAgICAgICAgfSkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT09ICJRdWVyeSBFeGVjdXRlZCBTdWNjZXNzZnVsbHkiKSB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnJlc3VsdHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgdGhpcy5zaG93X25vX3F1ZXN0aW9uc19tZXNzYWdlID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnRvdGFsX3BhZ2VzID0gcmVzcG9uc2UuZGF0YS5wYWdlY291bnQ7CiAgICAgICAgICAgIHRoaXMucXVlc3Rpb25zX2xpc3QgPSByZXNwb25zZS5kYXRhLnJlc3VsdHM7CiAgICAgICAgICAgIHRoaXMuc2V0cGFnaW5hdGlvbih0aGlzLnBhZ2Vfbm8pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICB0ZXh0OiAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgLy8gY29uc29sZS5sb2coZSk7CiAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgaWYgKAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLiIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIG9wZW5fbW9kYWxfZm9yX2ludGVudChpbmRleCkgewogICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50ID0gdGhpcy5xdWVzdGlvbnNfbGlzdFtpbmRleF0uRXhwZWN0ZWRJbnRlbnQ7CiAgICAgIHRoaXMuc2VsZWN0ZWRfcXVlc3Rpb25faW5kZXggPSBpbmRleDsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50X3F1ZXN0aW9ucy5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF9pbnRlbnRfcXVlc3Rpb25zWwogICAgICAgICAgaQogICAgICAgIF0uaW50ZW50ID0gYCR7dGhpcy5jb21wYW55X2lkfV8ke3RoaXMuY3VycmVudF9zZWxlY3RlZF9pbnRlbnR9YDsKICAgICAgfQogICAgICAvLyAkKCIjbXlNb2RhbCIpLm1vZGFsKCJzaG93Iik7CiAgICB9LAogICAgYWRkX3F1ZXN0aW9uKCkgewogICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50X3F1ZXN0aW9ucy51bnNoaWZ0KHsKICAgICAgICBxdWVzdGlvbjogbnVsbCwKICAgICAgICBpbnRlbnQ6IGAke3RoaXMuY29tcGFueV9pZH1fJHt0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50fWAsCiAgICAgIH0pOwogICAgfSwKICAgIGRlbGV0ZV9xdWVzdGlvbihpbmRleCkgewogICAgICBpZiAodGhpcy5jdXJyZW50X3NlbGVjdGVkX2ludGVudF9xdWVzdGlvbnMubGVuZ3RoID4gMSkgewogICAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF9pbnRlbnRfcXVlc3Rpb25zLnNwbGljZShpbmRleCwgMSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3dhbCh7CiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICB0ZXh0OiAiQXRsZWFzdCBPbmUgUXVlc2l0b24gaGFzIHRvIGJlIEFkZGVkIiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtcmlnaHQiLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBnZXRfaW50ZW50c19saXN0KCkgewogICAgICBheGlvcwogICAgICAgIC5wb3N0KAogICAgICAgICAgYXBpX2NhbGxzLmdldF91bmFuc3dlcmVkX3VybCgpLAogICAgICAgICAgewogICAgICAgICAgICBjb21wYW55aWQ6IHRoaXMuY29tcGFueV9pZCwKICAgICAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueV9uYW1lLAogICAgICAgICAgICBpc0Ryb3Bkb3duOiAiVHJ1ZSIsCiAgICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgICkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVzcG9uc2UuZGF0YVswXSkgewogICAgICAgICAgICB0aGlzLmludGVudF9saXN0LnB1c2goCiAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YVswXVtpXS5yZXBsYWNlKHRoaXMuY29tcGFueV9pZCArICJfIiwgIiIpCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgIGlmICgKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICkgewogICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIHNhdmVfcXVlc3Rpb25zX2Zvcl9pbnRlbnQoKSB7CiAgICAgIGlmIChCb29sZWFuKHRoaXMuc2VsZWN0ZWRfcXVlc3Rpb25faW5kZXgpKSB7CiAgICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX2ludGVudF9xdWVzdGlvbnMucHVzaCh7CiAgICAgICAgICBxdWVzdGlvbjogdGhpcy5xdWVzdGlvbnNfbGlzdFt0aGlzLnNlbGVjdGVkX3F1ZXN0aW9uX2luZGV4XS5RdWVzdGlvbiwKICAgICAgICAgIGludGVudDogYCR7dGhpcy5jb21wYW55X2lkfV8ke3RoaXMuY3VycmVudF9zZWxlY3RlZF9pbnRlbnR9YCwKICAgICAgICB9KTsKICAgICAgfQogICAgICBsZXQgcXVlc3Rpb25zX2xpc3QgPSB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50X3F1ZXN0aW9ucy5maWx0ZXIoCiAgICAgICAgKHF1ZXN0aW9uKSA9PiB7CiAgICAgICAgICByZXR1cm4gQm9vbGVhbihxdWVzdGlvbi5xdWVzdGlvbik7CiAgICAgICAgfQogICAgICApOwogICAgICAkKCIjbXlNb2RhbCIpLm1vZGFsKCJoaWRlIik7CiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgYXhpb3MKICAgICAgICAucG9zdCgKICAgICAgICAgIGFwaV9jYWxscy5hZGRfcXVlc3Rpb25fdXJsKCksCiAgICAgICAgICB7CiAgICAgICAgICAgIGVkaXRfaW50ZW50OiBmYWxzZSwKICAgICAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueV9uYW1lLAogICAgICAgICAgICBjb21wYW55aWQ6IHRoaXMuY29tcGFueV9pZCwKICAgICAgICAgICAgbmV3X3F1ZXN0aW9uX2RhdGE6IHF1ZXN0aW9uc19saXN0LAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgICkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICB0aGlzLmluaXRpYWxpemVfcXVlc3Rpb25zX2Zvcl9pbnRlbnQoKTsKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhID09ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiKSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgdGV4dDogIlRoZXJlIHdhcyBhbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uIiwKICAgICAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09ICJTdWNjZXNzIikgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgdGV4dDogIllvdXIgcXVlc3Rpb24gaGFzIGJlZW4gYWRkZWQgc3VjY2Vzc2Z1bGx5IiwKICAgICAgICAgICAgICBhbGxvd091dHNpZGVDbGljazogZmFsc2UsCiAgICAgICAgICAgICAgYWxsb3dFc2NhcGVLZXk6IGZhbHNlLAogICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmdldF9xdWVzdGlvbnNfbGlzdCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09ICJGYWlsdXJlIikgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgdGV4dDogIlRoZSBxdWVzdGlvbnMgYWxyZWFkeSBleGlzdC4iLAogICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT0gIkVycm9yIikgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gSW50ZXJuYWwgU2VydmVyIEVycm9yLiBQbGVhc2UgVHJ5IEFnYWluLiIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgaWYgKAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRleHQ6ICJUaGVyZSB3YXMgYW4gSW50ZXJuYWwgU2VydmVyIEVycm9yLiBQbGVhc2UgVHJ5IEFnYWluLiIsCiAgICAgICAgICAgICAgdGltZXI6IDI1MDAsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIGluaXRpYWxpemVfcXVlc3Rpb25zX2Zvcl9pbnRlbnQoKSB7CiAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF9pbnRlbnRfcXVlc3Rpb25zID0gWwogICAgICAgIHsKICAgICAgICAgIHF1ZXN0aW9uOiBudWxsLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgcXVlc3Rpb246IG51bGwsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBxdWVzdGlvbjogbnVsbCwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHF1ZXN0aW9uOiBudWxsLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgcXVlc3Rpb246IG51bGwsCiAgICAgICAgfSwKICAgICAgXTsKICAgIH0sCiAgICBkb3dubG9hZF9zYW1wbGUoKSB7CiAgICAgIGF4aW9zCiAgICAgICAgLnBvc3QoCiAgICAgICAgICBhcGlfY2FsbHMucXVlc3Rpb25faW50ZW50X2NzdigpLAogICAgICAgICAgewogICAgICAgICAgICBjb21wYW55bmFtZTogdGhpcy5jb21wYW55X25hbWUsCiAgICAgICAgICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55X2lkLAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0KICAgICAgICApCiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAvLyB3aW5kb3cub3BlbihyZXNwb25zZS5kYXRhLkNTVl9VUkwsICJfYmxhbmsiKTsKICAgICAgICAgIHZhciBhID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgICAgIGEuaHJlZiA9IHJlc3BvbnNlLmRhdGEuQ1NWX1VSTDsKICAgICAgICAgIGEuZG93bmxvYWQgLSB0cnVlOwogICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTsKICAgICAgICAgIGEuY2xpY2soKTsKICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSk7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgIGlmICgKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICkgewogICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIGNsZWFyX2ZpbGVfZGV0YWlscygpIHsKICAgICAgdGhpcy5maWxlX2xhYmVsID0gIkNob29zZSBmaWxlIjsKICAgICAgdGhpcy5maWxlX2NvbnRlbnQgPSAiIjsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImlucHV0R3JvdXBGaWxlMDEiKS52YWx1ZSA9ICIiOwogICAgfSwKICAgIGZpbGVpbnB1dCgpIHsKICAgICAgdGhpcy5maWxlX2xhYmVsID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdLm5hbWU7CiAgICAgIC8vIHZhciBmaWxlX25hbWUgPSB0aGlzLmNvbXBhbnluYW1lICsgIkludGVudEZpbGUuY3N2IjsKICAgICAgLy8gaWYgKHRoaXMuZmlsZV9sYWJlbCAhPSBmaWxlX25hbWUpIHsKICAgICAgLy8gICBTd2FsKHsKICAgICAgLy8gICAgIHR5cGU6ICJlcnJvciIsCiAgICAgIC8vICAgICB0ZXh0OgogICAgICAvLyAgICAgICAiVXNlcnMgbmVlZCB0byBkb3dubG9hZCB0aGUgSW50ZW50IEZpbGUgZnJvbSAnVXBsb2FkIENTViBGaWxlcycgcG9wLXVwLiBDaGFuZ2VzIHRvIHRoaXMgZmlsZSB3aWxsIGJlIGFjY2VwdGVkIGJ5IHRoZSBzeXN0ZW0uIiwKICAgICAgLy8gICB9KTsKICAgICAgLy8gICB0aGlzLmZpbGVfbGFiZWwgPSAiQ2hvb3NlIGZpbGUiOwogICAgICAvLyB9IGVsc2UgewogICAgICB0aGlzLmZpbGVfY29udGVudCA9IGV2ZW50LnRhcmdldC5maWxlc1swXTsKICAgICAgLy8gfQogICAgfSwKICAgIGZpbGVfc3VibWl0KCkgewogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB2YXIgdXNlcl9kZXRhaWxzID0gewogICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgY29tcGFueW5hbWU6IHRoaXMuY29tcGFueV9uYW1lLAogICAgICAgIGNvbXBhbnlpZDogdGhpcy5jb21wYW55X2lkLAogICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgIH07CiAgICAgIHZhciBqc29uID0gSlNPTi5zdHJpbmdpZnkodXNlcl9kZXRhaWxzKTsKICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbanNvbl0sIHsKICAgICAgICB0eXBlOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgIH0pOwogICAgICBpZiAodGhpcy5maWxlX2xhYmVsID09ICJDaG9vc2UgZmlsZSIpIHsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBmZCA9IG5ldyBGb3JtRGF0YSgpOwogICAgICAgIGZkLmFwcGVuZCgKICAgICAgICAgICJmaWxlIiwKICAgICAgICAgIHRoaXMuZmlsZV9jb250ZW50LAogICAgICAgICAgdGhpcy5jb21wYW55X25hbWUgKyAiUXVlc3Rpb25zRmlsZS5jc3YiCiAgICAgICAgKTsKICAgICAgICBmZC5hcHBlbmQoImpzb24iLCBibG9iKTsKICAgICAgICAkKCIjZmlsZV91cGxvYWQiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcwogICAgICAgICAgLnBvc3QoYXBpX2NhbGxzLnRlc3RfaW50ZW50X21vZGVsKCksIGZkLCB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0pCiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTXNnID09ICJSZXN1bHRzIHdvdWxkIGJlIGF2YWlsYWJsZSBzb29uIikgewogICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgdGl0bGU6ICJSZXN1bHRzIHdvdWxkIGJlIGF2YWlsYWJsZSBzb29uIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAyNTAwLAogICAgICAgICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4gewogICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgICAgICAgICAvLyAkKCcjZmlsZV91cGxvYWQnKS5tb2RhbCgnaGlkZScpOwogICAgICAgICAgICAgICAgICAvLyB0aGlzLiRyb3V0ZXIuZ28oKTsKICAgICAgICAgICAgICAgICAgLy8gdGhpcy5sb2FkX3F1ZXN0aW9uc19yZXNwb25zZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgdGl0bGU6ICJTb21lIEVycm9yIE9jY3VycmVkIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0aW1lcjogMjAwMCwKICAgICAgICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICAgICAgICAgIC8vICQoJyNmaWxlX3VwbG9hZCcpLm1vZGFsKCdoaWRlJyk7CiAgICAgICAgICAgICAgICB0aGlzLmZpbGVfbGFiZWwgPSAiQ2hvb3NlIGZpbGUiOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImlucHV0R3JvdXBGaWxlMDEiKS52YWx1ZSA9ICIiOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkX3F1ZXN0aW9uc19yZXNwb25zZSgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vICQoIiNmaWxlX3VwbG9hZCIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICkgewogICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0aXRsZTogIlNvbWUgRXJyb3IgT2NjdXJyZWQiLAogICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4gewogICAgICAgICAgICAgICAgLy8gJCgnI2ZpbGVfdXBsb2FkJykubW9kYWwoJ2hpZGUnKTsKICAgICAgICAgICAgICAgIHRoaXMuZmlsZV9sYWJlbCA9ICJDaG9vc2UgZmlsZSI7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRHcm91cEZpbGUwMSIpLnZhbHVlID0gIiI7CiAgICAgICAgICAgICAgICB0aGlzLmxvYWRfcXVlc3Rpb25zX3Jlc3BvbnNlKCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgcGFnZV9yZXF1aXJlKHBhZ2UpIHsKICAgICAgaWYgKHBhZ2UgPT0gMCB8fCBwYWdlID09IHRoaXMudG90YWxfcGFnZXMgKyAxKSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAocGFnZSA9PSAiLi4ucyIpIHsKICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgoMSArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICB9IGVsc2UgaWYgKHBhZ2UgPT0gIi4uLmwiKSB7CiAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKHRoaXMudG90YWxfcGFnZXMgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMucGFnZV9ubyA9IHBhZ2U7CiAgICAgICAgfQogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICB0aGlzLmdldF9xdWVzdGlvbnNfbGlzdCgpOwogICAgICB9CiAgICB9LAogICAgc2V0cGFnaW5hdGlvbihwYWdlX25vKSB7CiAgICAgIHRoaXMucGFnZV9hcnJheSA9IFtdOwogICAgICBpZiAodGhpcy50b3RhbF9wYWdlcyA8PSA3KSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRvdGFsX3BhZ2VzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSAxKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCh0aGlzLnRvdGFsX3BhZ2VzKTsKICAgICAgfSBlbHNlIGlmIChwYWdlX25vID09IHRoaXMudG90YWxfcGFnZXMpIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwogICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnRvdGFsX3BhZ2VzIC0gNDsgaSA8IHRoaXMudG90YWxfcGFnZXM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChwYWdlX25vIDw9IDQpIHsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2Vfbm8gKyAzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCh0aGlzLnRvdGFsX3BhZ2VzKTsKICAgICAgfSBlbHNlIGlmIChwYWdlX25vID49IHRoaXMudG90YWxfcGFnZXMgLSA0KSB7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLnMiKTsKICAgICAgICBmb3IgKGxldCBpID0gcGFnZV9ubyAtIDQ7IGkgPCB0aGlzLnRvdGFsX3BhZ2VzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLnMiKTsKICAgICAgICBmb3IgKGxldCBpID0gcGFnZV9ubyAtIDM7IGkgPD0gcGFnZV9ubyArIDM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSk7CiAgICAgICAgfQogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0KICAgIH0sCiAgICB0b2dnbGUoKSB7CiAgICAgIC8vIHRoaXMuJGZ1bGxzY3JlZW4udG9nZ2xlKChkb2N1bWVudC5ib2R5KSwgewogICAgICB0aGlzLiRmdWxsc2NyZWVuLnRvZ2dsZSh0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCIuZGFzaC1jb250IiksIHsKICAgICAgICB3cmFwOiBmYWxzZSwKICAgICAgICBjYWxsYmFjazogdGhpcy5mdWxsc2NyZWVuQ2hhbmdlLAogICAgICB9KTsKICAgIH0sCiAgICBmdWxsc2NyZWVuQ2hhbmdlKGZ1bGxzY3JlZW4pIHsKICAgICAgdGhpcy5mdWxsc2NyZWVuID0gZnVsbHNjcmVlbjsKICAgIH0sCiAgICB0cmFpbl9hbmRfdGVzdF9tb2RlbCgpIHsKICAgICAgaWYoIXRoaXMuZGlzYWJsZV9idG5fZXhwaXJlZCl7CiAgICAgIFN3YWwoewogICAgICAgIHRpdGxlOiAiQXJlIFlvdSBTdXJlPyIsCiAgICAgICAgdGV4dDogIllvdSB3YW50IHRvIFRyYWluICYgVGVzdCBUaGUgTW9kZWw/IiwKICAgICAgICB0eXBlOiAicXVlc3Rpb24iLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlllcywgQ29uZmlybSEiLAogICAgICAgIGFsbG93T3V0c2lkZUNsaWNrOiBmYWxzZSwKICAgICAgICBhbGxvd0VzY2FwZUtleTogZmFsc2UsCiAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4gewogICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICAgIGF4aW9zCiAgICAgICAgICAgIC5wb3N0KAogICAgICAgICAgICAgIGFwaV9jYWxscy50cmFpbl9pbnRlbnRfbW9kZWwoKSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueV9uYW1lLAogICAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55X2lkLAogICAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICAgIHRlc3RfbW9kZWw6IHRydWUsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICkKICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgICB0aGlzLndhbnRfc3RhdHVzID0gdHJ1ZTsKICAgICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJ3YW50X21vZGVsX3N0YXR1cyIsdGhpcy53YW50X3N0YXR1cyk7CiAgICAgICAgICAgICAgdGhpcy5jaGVja19pbnRlbnRfbW9kZWxfc3RhdHVzKCk7CiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHX0NPREUgPT0gNDA0NikgewogICAgICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgICAgIHRpdGxlOiAiUmVzdWx0cyB3b3VsZCBiZSBhdmFpbGFibGUgc29vbiIsCiAgICAgICAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEuTVNHLAogICAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAzNTAwLAogICAgICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAvLyAkKCcjZmlsZV91cGxvYWQnKS5tb2RhbCgnaGlkZScpOwogICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuJHJvdXRlci5nbygpOwogICAgICAgICAgICAgICAgICAgIC8vIHRoaXMubG9hZF9xdWVzdGlvbnNfcmVzcG9uc2UoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TR19DT0RFID09PSAxMDM0KSB7CiAgICAgICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICAgICAgdGl0bGU6ICJTb21lIEVycm9yIE9jY3VycmVkIiwKICAgICAgICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5NU0csCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAzMDAwLAogICAgICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAvLyAkKCcjZmlsZV91cGxvYWQnKS5tb2RhbCgnaGlkZScpOwogICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuJHJvdXRlci5nbygpOwogICAgICAgICAgICAgICAgICAgIC8vIHRoaXMubG9hZF9xdWVzdGlvbnNfcmVzcG9uc2UoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgICB0aXRsZTogIlNvbWUgRXJyb3IgT2NjdXJyZWQiLAogICAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjAwMCwKICAgICAgICAgICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4gewogICAgICAgICAgICAgICAgICAvLyAkKCcjZmlsZV91cGxvYWQnKS5tb2RhbCgnaGlkZScpOwogICAgICAgICAgICAgICAgICB0aGlzLmZpbGVfbGFiZWwgPSAiQ2hvb3NlIGZpbGUiOwogICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRHcm91cEZpbGUwMSIpLnZhbHVlID0gIiI7CiAgICAgICAgICAgICAgICAgIHRoaXMubG9hZF9xdWVzdGlvbnNfcmVzcG9uc2UoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvLyAkKCIjZmlsZV91cGxvYWQiKS5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdGl0bGU6ICJTb21lIEVycm9yIE9jY3VycmVkIiwKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgICAgdGltZXI6IDIwMDAsCiAgICAgICAgICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICAgICAgICAgICAgLy8gJCgnI2ZpbGVfdXBsb2FkJykubW9kYWwoJ2hpZGUnKTsKICAgICAgICAgICAgICAgICAgdGhpcy5maWxlX2xhYmVsID0gIkNob29zZSBmaWxlIjsKICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImlucHV0R3JvdXBGaWxlMDEiKS52YWx1ZSA9ICIiOwogICAgICAgICAgICAgICAgICB0aGlzLmxvYWRfcXVlc3Rpb25zX3Jlc3BvbnNlKCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7fWVsc2V7CiAgICAgICAgdGhpcy5zaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWwoKQogICAgICB9CiAgICB9LAogIH0sCiAgd2F0Y2g6IHsKICAgIGZpbHRlcl9zdGF0dXMoKXsKICAgICAgaWYodGhpcy5maWx0ZXJfc3RhdHVzID09PSAgJ0ZhaWx1cmUnKXsKICAgICAgICB0aGlzLnNlbGVjdGVkX3N0YXR1c2xpc3QgPSBbIkZhaWx1cmUiXTsKICAgICAgfWVsc2V7CiAgICAgICAgdGhpcy5zZWxlY3RlZF9zdGF0dXNsaXN0ID0gWyJTdWNjZXNzIl07CiAgICAgIH0KICAKICAgIH0sCiAgICBzZWxlY3RlZF9zdGF0dXNsaXN0KG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIGlmIChuZXdWYWwubGVuZ3RoID09PSAwKSB7CiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICB0aGlzLnNlbGVjdGVkX3N0YXR1c2xpc3QgPSBbIlN1Y2Nlc3MiLCAiRmFpbHVyZSJdOwogICAgICAgICAgdGhpcy5nZXRfcXVlc3Rpb25zX2xpc3QoKTsKICAgICAgICB9LCAyMDApOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZ2V0X3F1ZXN0aW9uc19saXN0KCk7CiAgICAgIH0KICAgIH0sCiAgICBjdXJyZW50X3NlbGVjdGVkX2ludGVudChuZXdWYWwsIG9sZFZhbCkgewogICAgICBpZiAoQm9vbGVhbihvbGRWYWwpICYmIEJvb2xlYW4obmV3VmFsKSkgewogICAgICAgIGZvciAoCiAgICAgICAgICBsZXQgaSA9IDAsIG4gPSB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfaW50ZW50X3F1ZXN0aW9ucy5sZW5ndGg7CiAgICAgICAgICBpIDwgbjsKICAgICAgICAgIGkrKwogICAgICAgICkgewogICAgICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX2ludGVudF9xdWVzdGlvbnNbCiAgICAgICAgICAgIGkKICAgICAgICAgIF0uaW50ZW50ID0gYCR7dGhpcy5jb21wYW55X2lkfV8ke3RoaXMuY3VycmVudF9zZWxlY3RlZF9pbnRlbnR9YDsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgfSwKfTsK"},null]}