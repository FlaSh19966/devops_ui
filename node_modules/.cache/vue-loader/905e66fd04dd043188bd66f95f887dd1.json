{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/ConversationalFlow/Entities.vue?vue&type=template&id=0b7b5b62&scoped=true&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/ConversationalFlow/Entities.vue","mtime":1660042032559},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiBjbGFzcz0ic3Bpbm5lciIgaWQ9InNwaW5uZXIiIHYtc2hvdz0ic3Bpbm5lck9uIj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgcC0wIiBpZD0iZW50aXRpZXNfcGFnZSI+CiAgICA8ZGl2IGNsYXNzPSJjYXJkIGRhc2gtY2FyZCI+CiAgICAgIDxkaXYKICAgICAgICBjbGFzcz0iY2FyZC1oZWFkZXIgZC1ibG9jayBkLXNtLWZsZXggZmxleC13cmFwIGp1c3RpZnktY29udGVudC1iZXR3ZWVuIgogICAgICA+CiAgICAgICAgPGg0IGNsYXNzPSJtYi1zbS0wIj57e3RsdCgnZW50aXRpZXNfcGFnZV90aXRsZScpfX08L2g0PgogICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYWN0IGQtZmxleCBmbGV4LXdyYXAiPgogICAgICAgICAgPGlucHV0CiAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VhcmNoLWJhciIKICAgICAgICAgICAgaWQ9InNlYXJjaF9iYXJfaWQiCiAgICAgICAgICAgIDpwbGFjZWhvbGRlcj0idGx0KCdzZWFyY2hfaGVyZScpIgogICAgICAgICAgICB2LW1vZGVsLnRyaW09InNlYXJjaF9uYW1lIgogICAgICAgICAgICB2LW9uOmtleXVwPSJjYWxsc2VhcmNoIgogICAgICAgICAgLz4KICAgICAgICAgIDxhCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgdi1pZj0iaXNWaXNpYmxlU2VhcmNoQ2xlYXIiCiAgICAgICAgICAgIGNsYXNzPSJidG4gYmctdHJhbnNwYXJlbnQgbXQtYXV0byBtYi1hdXRvIHB5LTAiCiAgICAgICAgICAgIEBjbGljaz0iY2xlYXJfc2VhcmNoX25hbWUiCiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTQwcHg7IHotaW5kZXg6IDEwIgogICAgICAgICAgPgogICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICAgIDwvYT4KICAgICAgICAgIDxhCiAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgQGNsaWNrPSJpc0VkaXRFbnRpdHkgPyB2ZXJpZnlfY2hhbmdlcygpIDogc2VhcmNoX2VudGl0eSgpIgogICAgICAgICAgICBpZD0ic2VhcmNoX2J0bl9pZCIKICAgICAgICAgID4KICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgICAgICAgICAgICB3aWR0aD0iMTQiCiAgICAgICAgICAgICAgaGVpZ2h0PSIxNCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICBkPSJNMTMuODA5MDExMzI3MTAwMDcxLDEyLjk2NTUwNTQzNTYwMTQ3MiBMOS4zMDkxMDAxMjExNzgyMyw4LjQ5MzMwNjY0ODU0MTk5IEMxMC4wMDczOTIwNzk1ODY1ODQsNy41OTYxMTE1ODk2MDU1MjEgMTAuMzg1MTI4MTc2MTk0NTgsNi40OTkxNTcxNzAxMzgxMDYgMTAuMzg1MTI4MTc2MTk0NTgsNS4zNDUzNzQ2NTY3MjY1MzIgYzAsLTEuMzgxMDk0ODg5MTg4MTgwMiAtMC41NDIzNDU4NjM0Nzg0NTE0LC0yLjY3NjA4NjYwNTczMzcwNSAtMS41MjMwNzM1MjcxNDg3NDksLTMuNjUyNDk2NTgzNTAxNDA4MyBjLTAuOTgwNzI3NjYzNjcwMjk3NiwtMC45NzY0MDk5Nzc3Njc3MDMzIC0yLjI4NzIwOTM5MjMwNTI4OSwtMS41MTM2OTM3NzUwNTc4Njg1IC0zLjY3NTEyOTYzNzE4MTQ1MjYsLTEuNTEzNjkzNzc1MDU3ODY4NSBzLTIuNjk0NDAxOTczNTExMTU0NCwwLjUzOTAwNTg2MDc0MzAxNzggLTMuNjc1MTI5NjM3MTgxNDUyNiwxLjUxMzY5Mzc3NTA1Nzg2ODUgQzAuNTI5MzM0OTc2NjI0NTE3OSwyLjY2NzU2NTk4NzUzOTk3NSAtMC4wMTEyNzgxNTI0NjU4MjAzMTYsMy45NjQyNzk3Njc1MzgzNTc2IC0wLjAxMTI3ODE1MjQ2NTgyMDMxNiw1LjM0NTM3NDY1NjcyNjUzMiBjMCwxLjM3OTM3MjgyNTczNTMyNzMgMC41NDIzNDU4NjM0Nzg0NTE0LDIuNjc3ODA4NjY5MTg2NTU3NSAxLjUyMzA3MzUyNzE0ODc0OSwzLjY1MjQ5NjU4MzUwMTQwODMgQzIuNDkyNTIzMDM4MzUzMjIyLDkuOTc0MjgxMjE3OTk1NjQ4IDMuNzk3MjcyMDMyNjAwMTA0NCwxMC41MTE1NjUwMTUyODU4MSA1LjE4NjkyNTAxMTg2NDM4LDEwLjUxMTU2NTAxNTI4NTgxIGMxLjE2MDkzMjA0MDAzMzc0NSwwIDIuMjYyOTUxMTEwODcxNzQ3NSwtMC4zNzU0MDk4MzI3MjE5NzQzNyAzLjE2NTcwNTcyNzA3NzA5MiwtMS4wNjc2NzkzNDA3Njg5MTcxIGw0LjQ5OTkxMTIwNTkyMTg0NCw0LjQ3MDQ3NjcyMzYwNjYyOCBhMC4xNDIwODQyMTk4MjUwMjU3LDAuMTQxMjA5MjAzMTMzOTUzNjMgMCAwIDAgMC4yMDA5OTcxODkwMjA3NjgwNSwwIGwwLjc1NTQ3MjE5MzIxNTk5MDQsLTAuNzQ5MDk3NjAxOTkxMDk1NSBhMC4xNDIwODQyMTk4MjUwMjU3LDAuMTQxMjA5MjAzMTMzOTUzNjMgMCAwIDAgMCwtMC4xOTk3NTkzNjA1MzA5NTkwNSB6TTcuOTMxNTc2MjgyNjMwNzI4LDguMDczMTIzMTY2MDQ1ODM2IEM3LjE5Njg5NjkwMjA3MjA1OCw4LjgwMTU1NjAwNjYwMjY5IDYuMjIzMTAwMTc1OTU0MjA1NSw5LjIwMjc5Njc5MTExNzQ2IDUuMTg2OTI1MDExODY0MzgsOS4yMDI3OTY3OTExMTc0NiBzLTIuMDA5OTcxODkwMjA3Njc3NSwtMC40MDEyNDA3ODQ1MTQ3NzA2IC0yLjc0NDY1MTI3MDc2NjM0NywtMS4xMjk2NzM2MjUwNzE2Mjg2IEMxLjcwOTMyNzA5NDkyNzQ3OCw3LjM0Mjk2ODI2MjAzNjEyMSAxLjMwNTU5OTk4MjQ5NzgzNzUsNi4zNzUxNjg2MDE1MzI2OCAxLjMwNTU5OTk4MjQ5NzgzNzUsNS4zNDUzNzQ2NTY3MjY1MzIgczAuNDAzNzI3MTEyNDI5NjQ1OCwtMS45OTkzMTU2Njg3NjI0NCAxLjEzNjY3Mzc1ODYwMDIwMzYsLTIuNzI3NzQ4NTA5MzE5Mjk4IEMzLjE3Njk1MzEyMTY1NjcwMjYsMS44ODkxOTMzMDY4NTAzODE3IDQuMTUwNzQ5ODQ3Nzc0NTYyLDEuNDg3OTUyNTIyMzM1NjA2NyA1LjE4NjkyNTAxMTg2NDM4LDEuNDg3OTUyNTIyMzM1NjA2NyBzMi4wMTE3MDQ2MjQ1OTU3ODg0LDAuMzk5NTE4NzIxMDYxOTE3NSAyLjc0NDY1MTI3MDc2NjM0NywxLjEyOTY3MzYyNTA3MTYyODYgUzkuMDY4MjUwMDQxMjMwOTMsNC4zMTU1ODA3MTE5MjAzODUgOS4wNjgyNTAwNDEyMzA5Myw1LjM0NTM3NDY1NjcyNjUzMiBzLTAuNDAzNzI3MTEyNDI5NjQ1OCwxLjk5OTMxNTY2ODc2MjQ0IC0xLjEzNjY3Mzc1ODYwMDIwMzYsMi43Mjc3NDg1MDkzMTkyOTggeiIKICAgICAgICAgICAgICAgIGZpbGw9IiNmZmYiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8L2E+IAogICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNlbnRpdHltb2RlbCIKICAgICAgICAgICAgaWQ9ImFkZF9lbnRpdHlfYnRuIgogICAgICAgICAgICB0aXRsZT0iQWRkIG5ldyBFbnRpdHkiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgd2lkdGg9IjE0IgogICAgICAgICAgICAgIGhlaWdodD0iMTMuOTk3IgogICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxMy45OTciCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgaWQ9IlVuaW9uXzEzIgogICAgICAgICAgICAgICAgZGF0YS1uYW1lPSJVbmlvbiAxMyIKICAgICAgICAgICAgICAgIGQ9Ik0tMTI2ODQsMjA1OHYtNWgtNWExLDEsMCwwLDEtMS0xLDEsMSwwLDAsMSwxLTFoNXYtNWExLDEsMCwwLDEsMS0xLDEsMSwwLDAsMSwxLDF2NWg1YTEsMSwwLDAsMSwxLDEsMSwxLDAsMCwxLTEsMWgtNXY1YTEsMSwwLDAsMS0xLDFBMSwxLDAsMCwxLTEyNjg0LDIwNThaIgogICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTI2OTAuMDAxIC0yMDQ1LjAwMikiCiAgICAgICAgICAgICAgICBmaWxsPSIjZmZmIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICB7e3RsdCgnZW50aXRpZXNfYWRkX2VudGl0eV9idG5fbGFiZWwnKX19CiAgICAgICAgICA8L2E+CiAgICAgICAgICA8IS0tIDxhCiAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgIHRpdGxlPSJVcGxvYWQgRmlsZSIKICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICBkYXRhLXRhcmdldD0iI2ZpbGVfdXBsb2FkIgogICAgICAgICAgPgogICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgIHdpZHRoPSIxNCIKICAgICAgICAgICAgICBoZWlnaHQ9IjE0IgogICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxMy45OTciCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgZD0iTTguNjkzOTk0NjU5NTQyOCwtMC4wMTQwNzQ2NDc2ODU1ODk1MjkgSDEuODMwNzUzNDE5Mzc4NjU3NyBhMS43MTU4MTAzMTAwNDEwMzU4LDEuMzg3MzMyODczODM5NTQgMCAwIDAgLTEuNzE1ODEwMzEwMDQxMDM1OCwxLjM4NzMzMjg3MzgzOTU0IHYxMS4wOTg2NjI5OTA3MTYzMiBhMS43MTU4MTAzMTAwNDEwMzU4LDEuMzg3MzMyODczODM5NTQgMCAwIDAgMS43MTU4MTAzMTAwNDEwMzU4LDEuMzg3MzMyODczODM5NTQgaDEwLjI5NDg2MTg2MDI0NjIxNSBhMS43MTU4MTAzMTAwNDEwMzU4LDEuMzg3MzMyODczODM5NTQgMCAwIDAgMS43MTU4MTAzMTAwNDEwMzU4LC0xLjM4NzMzMjg3MzgzOTU0IFY0LjE0NzkyMzk3MzgzMzAzMSBsLTUuMTQ3NDMwOTMwMTIzMTA3LC00LjE2MTk5ODYyMTUxODYyIHptLTAuNDI4OTUyNTc3NTEwMjU5NTYsOS43MTEzMzAxMTY4NzY3OCB2Mi4wODA5OTkzMTA3NTkzMSBoLTIuNTczNzE1NDY1MDYxNTUzNyB2LTIuMDgwOTk5MzEwNzU5MzEgSDMuNTQ2NTYzNzI5NDE5NjkzNCBsMy40MzE2MjA2MjAwODIwNzE2LC0yLjc3NDY2NTc0NzY3OTA4IGwzLjQzMTYyMDYyMDA4MjA3MTYsMi43NzQ2NjU3NDc2NzkwOCBoLTIuMTQ0NzYyODg3NTUxMjk0NyB6TTcuODM2MDg5NTA0NTIyMjgzLDQuODQxNTkwNDEwNzUyODAxIFYxLjAyNjQyNTAwNzY5NDA2NTcgTDEyLjU1NDU2Nzg1NzEzNTEzMSw0Ljg0MTU5MDQxMDc1MjgwMSBINy44MzYwODk1MDQ1MjIyODMgeiIKICAgICAgICAgICAgICAgIGlkPSJzdmdfMSIKICAgICAgICAgICAgICAgIGNsYXNzCiAgICAgICAgICAgICAgICBmaWxsPSIjZmZmIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgPC9hPgogICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgQGNsaWNrPSJkb3dubG9hZF9jc3YiCiAgICAgICAgICAgIHRpdGxlPSJEb3dubG9hZCBDU1YgRmlsZSIKICAgICAgICAgID4KICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgICAgICAgICAgICB3aWR0aD0iMTQiCiAgICAgICAgICAgICAgaGVpZ2h0PSIxNCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICBkPSJNOC4xMjQwNDY1Njk3OTY0NDgsMy43MDQ4ODg4NDIzODExNTYzIFYtMC4wMDA0NzI1MDg1NjkyNTkwMzE5IEgwLjg2ODQ0ODAyNzUzMjM3NTggQzAuMzg1OTUwNzI0NDcxODE2LC0wLjAwMDQ3MjUwODU2OTI1OTAzMTkgLTAuMDAyMjIzNzk3NTM5MzA5NDY2NSwwLjI5MTA1MjI0NDc3NzU3NjEzIC0wLjAwMjIyMzc5NzUzOTMwOTQ2NjUsMC42NTM0MTQ3ODg2NTcyODI5IHYxMi42NDE4MjEwNzk3MTMxNzMgYzAsMC4zNjIzNjI1NDM4Nzk3MTAzIDAuMzg4MTc0NTIyMDExMTI4OSwwLjY1Mzg4NzI5NzIyNjU0NDIgMC44NzA2NzE4MjUwNzE2ODg2LDAuNjUzODg3Mjk3MjI2NTQ0MiBoMTIuMTg5NDA1NTUxMDAzNjQgYzAuNDgyNDk3MzAzMDYwNTYxOSwwIDAuODcwNjcxODI1MDcxNjg4NiwtMC4yOTE1MjQ3NTMzNDY4MzQ2IDAuODcwNjcxODI1MDcxNjg4NiwtMC42NTM4ODcyOTcyMjY1NDQyIFY0LjM1ODc3NjEzOTYwNzY5NyBIOC45OTQ3MTgzOTQ4NjgxMzcgYy0wLjQ3ODg2OTUwMzc4OTQyODgzLDAgLTAuODcwNjcxODI1MDcxNjg4NiwtMC4yOTQyNDkyODM3NTE5NDQ5IC0wLjg3MDY3MTgyNTA3MTY4ODYsLTAuNjUzODg3Mjk3MjI2NTQ0MiB6bTIuNzczNDUyNTQyNzgwNDQyLDUuNzU4NTY3NDY0MjQxNzYxIGwtMy40OTc5MjQwNTcyMjU1MDgsMi42MDczNzU1OTc2OTA4NDE1IGMtMC4yNDEyNDg2NTE1MzAyODA2MywwLjE4MDA5MTQ1OTc3NzgxMDcxIC0wLjYzMDg3NDI5MzI0OTg2MTQsMC4xODAwOTE0NTk3Nzc4MTA3MSAtMC44NzIxMjI5NDQ3ODAxNDIsMCBsLTMuNDk3OTI0MDU3MjI1NTA4LC0yLjYwNzM3NTU5NzY5MDg0MTUgQzIuNjYxMzA2NDI3MzI1ODI5LDkuMTg5MDk2MDk0ODI4Mjc4IDIuOTE5NjA1NzM1NDMwNDMzNyw4LjcxODAyNDc4Nzc4NDY1NSAzLjQzNzY1NTQ3MTM0ODA4NCw4LjcxODAyNDc4Nzc4NDY1NSBINS44MDIyNTUwMzYyNzE5NDcgdi0yLjE3OTYyNDMyNDA4ODQ3ODMgYzAsLTAuMjQwODQ4NDg3ODExNzc3MzQgMC4yNTk3NTA0Mjc4MTMwNTQzLC0wLjQzNTkyNDg2NDgxNzY5NjYgMC41ODA0NDc4ODMzODExMjY5LC0wLjQzNTkyNDg2NDgxNzY5NjYgaDEuMTYwODk1NzY2NzYyMjUyMSBjMC4zMjA2OTc0NTU1NjgwNzI1LDAgMC41ODA0NDc4ODMzODExMjY5LDAuMTk1MDc2Mzc3MDA1OTE5NiAwLjU4MDQ0Nzg4MzM4MTEyNjksMC40MzU5MjQ4NjQ4MTc2OTY2IHYyLjE3OTYyNDMyNDA4ODQ3ODMgaDIuMzY0NTk5NTY0OTIzODYyNSBjMC41MTgwNDk3MzU5MTc2NTUxLDAgMC43NzYzNDkwNDQwMjIyNTU0LDAuNDcxMDcxMzA3MDQzNjIyOTMgMC40MDg4NTI5Nzc4NTY1ODE2LDAuNzQ1NDMxNTE4ODM4MjYxMSB6TTEzLjY3NDU3OTQ1NDYyODQ2MiwyLjg2MDI4NDQxNjc5Njg3IEwxMC4xMjI5NjM5NjgxOTAxOTksMC4xOTAyNDQ2MTk3ODg0ODUyIGMtMC4xNjMyNTA5NjcyMDA5NDE5NSwtMC4xMjI2MDM4NjgyMjk5NzcxOCAtMC4zODQ1NDY3MjI3Mzk5OTY0NiwtMC4xOTA3MTcxMjgzNTc3NDIzIC0wLjYxNjcyNTg3NjA5MjQ0NjMsLTAuMTkwNzE3MTI4MzU3NzQyMyBIOS4yODQ5NDIzMzY1NTg3MDIgdjMuNDg3Mzk4OTE4NTQxNTY0NCBoNC42NDM1ODMwNjcwNDkwMDcgdi0wLjE2NjE5NjM1NDcxMTc0Njg1IGMwLC0wLjE3MTY0NTQxNTUyMTk2ODEgLTAuMDkwNjk0OTgxNzc4MzAwOTYsLTAuMzM3ODQxNzcwMjMzNzE0ODcgLTAuMjUzOTQ1OTQ4OTc5MjQzMSwtMC40NjA0NDU2Mzg0NjM2OTEzNSB6IgogICAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDwvYT4KICAgICAgICAgIDxidXR0b24gaWQ9InRyYWluX21vZGVsX2J0biIgY2xhc3M9ImRhcmtibHVlLWJ0biIgQGNsaWNrPSJ0cmFpbl9tb2RlbCI+CiAgICAgICAgICAgIFRyYWluIE1vZGVsCiAgICAgICAgICA8L2J1dHRvbj4gLS0+CiAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgIGNsYXNzPSJyZWQtYnRuIgogICAgICAgICAgICBAY2xpY2s9ImlzRWRpdEVudGl0eSA/IHZlcmlmeV9jaGFuZ2VzKCkgOiBkZWxldGVfc2VsZWN0ZWQoKSIKICAgICAgICAgICAgaWQ9ImRlbGV0ZV9lbnRpdHlfaWQiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgd2lkdGg9IjE0IgogICAgICAgICAgICAgIGhlaWdodD0iMTQiCiAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDE0IDE0IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgIGQ9Ik04LjM3NSwzdi43NzhINFY1LjMzM2guODc1VjE1LjQ0NEExLjY2MSwxLjY2MSwwLDAsMCw2LjYyNSwxN2g4Ljc1YTEuNjYxLDEuNjYxLDAsMCwwLDEuNzUtMS41NTZWNS4zMzNIMThWMy43NzhIMTMuNjI1VjNIOC4zNzVNNi42MjUsNS4zMzNoOC43NVYxNS40NDRINi42MjVWNS4zMzNtMS43NSwxLjU1NnY3aDEuNzV2LTdIOC4zNzVtMy41LDB2N2gxLjc1di03WiIKICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKC00IC0zKSIKICAgICAgICAgICAgICAgIGZpbGw9IiNmZmYiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgIHt7dGx0KCdlbnRpdGllc19kZWxldGVfYnRuJyl9fQogICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IiBpZD0icGFnZSI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGQtZmxleCBweC0wIiB2LXNob3c9IkJvb2xlYW4oZW50aXR5X2xpc3QubGVuZ3RoID4gMCkiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgcGwtMCIgdi1zaG93PSJCb29sZWFuKGVudGl0eV9saXN0Lmxlbmd0aCA+IDApIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtYm94Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1yZXNwb25zaXZlIj4KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWNoZWNrIGNoZWNrYm94IGNoZWNrYm94LXN1Y2Nlc3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1jaGVjay1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY2hlY2staW5wdXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJzZWxlY3RhbGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSJzZWxlY3RlZF9lbnRpdGllcygnYWxsJykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0idGV4dC1sZWZ0Ij57e3RsdCgnZW50aXRpZXNfZW50aXR5X2hlYWRlcicpfX08L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoZW50aXRlcywgaW5kZXgpIGluIGVudGl0eV9saXN0IgogICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9ImNoZWNrX2N1cnJlbnRfZW50aXR5KGluZGV4KSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tY2hlY2sgY2hlY2tib3gtc3VjY2VzcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jaGVjay1sYWJlbCBjaGVja2JveCBjaGVja2JveC1zdWNjZXNzIiA6c3R5bGU9ImVudGl0ZXMudHlwZSA9PT0gJ3N5c3RlbSc/J2N1cnNvcjogbm90LWFsbG93ZWQnOm51bGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNoZWNrLWlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSInZW50aXR5X2NoZWNrYm94XycraW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9InNlbGVjdGVkX2VudGl0aWVzKGVudGl0ZXMuZW50aXR5KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJlbnRpdGVzLnR5cGUgPT09ICdzeXN0ZW0nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIHYtaWY9ImVudGl0ZXMudHlwZSA9PT0gJ3N5c3RlbSciIHN0eWxlPSJiYWNrZ3JvdW5kOiNiYmI7IGJvcmRlcjpzb2xpZCAxcHggI2U1ZTVlNTsiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iIHYtZWxzZT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iaXNFZGl0RW50aXR5ID8gdmVyaWZ5X2NoYW5nZXMoKSA6IHNob3dfZW50aXRpZXMoaW5kZXgpIgogICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9ImVudGl0ZXMuZW50aXR5IgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgZW50aXRlcy5lbnRpdHkgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTggcHItMCIgdi1zaG93PSJCb29sZWFuKGVudGl0eV9saXN0Lmxlbmd0aCA+IDApIj4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgI2RiZTJlOCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPGg1PjxwIGNsYXNzPSJtdC0yIG1iLTAiPnt7dGx0KCdlbnRpdGllc19lbnRpdHlfZGV0YWlsc19oZWFkZXInKX19PC9wPjwvaDU+CiAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJjdXJyZW50X3NlbGVjdGVkX3R5cGUgPT09ICdzeXN0ZW0nPyBudWxsOmVkaXRfZW50aXR5X2RldGFpbHMoKSIKICAgICAgICAgICAgICAgICAgICB2LWh0bWw9InBlbmNpbF9zdmciCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1sLWF1dG8gbXItMCBtdC0yIgogICAgICAgICAgICAgICAgICAgIDp0aXRsZT0iKGN1cnJlbnRfc2VsZWN0ZWRfdHlwZSA9PT0gJ3N5c3RlbScpPydTeXN0ZW0gZW50aXR5IGNhbiBub3QgYmUgZWRpdGVkJzpudWxsIgogICAgICAgICAgICAgICAgICAgIDpzdHlsZT0iIShjdXJyZW50X3NlbGVjdGVkX3R5cGUgPT09ICdzeXN0ZW0nKT8nY3Vyc29yOiBwb2ludGVyJzonY3Vyc29yOiBub3QtYWxsb3dlZCciCiAgICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIj4KICAgICAgICAgICAgICAgICAgICB7e3RsdCgnZW50aXRpZXNfZW50aXR5X25hbWVfbGFiZWwnKX19IAogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJwbC0xIGZvcm0tdGV4dCB0ZXh0LW11dGVkIiB2LWlmPSJpc0VkaXRFbnRpdHkiPnt7dGx0KCdlbnRpdGllc19lbnRpdHlfbmFtZV9oZWxwX3RleHQnKX19PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0iIWlzRWRpdEVudGl0eSIgY2xhc3M9Im1sLTMiPgogICAgICAgICAgICAgICAgICA8cD5Ae3sgY3VycmVudF9zZWxlY3RlZF9lbnRpdHkgfX08L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2UtaWY9ImlzRWRpdEVudGl0eSI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZy1sZWZ0OjE5cHggIWltcG9ydGFudDsiCiAgICAgICAgICAgICAgICAgICAgICBhbGlnbj0icmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGVkaXQiCiAgICAgICAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9InRsdCgnZW50aXR5X25hbWVfaGVyZScpIgogICAgICAgICAgICAgICAgICAgICAgaWQ9ImVudGVyX2VudGl0eV9lZGl0X2lkIgogICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoPSIyNSIKICAgICAgICAgICAgICAgICAgICAgIHYtb246a2V5dXA9ImVudGVyX2VudGl0eV9lZGl0IgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJjdXJyZW50X3NlbGVjdGVkX2VudGl0eSIKICAgICAgICAgICAgICAgICAgICAgIEBrZXlkb3duPSJlbnRpdHlfbmFtZV9jaGVja19zcGVjaWFsX2NoYXJhY3RlcnMoJGV2ZW50KSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1bml0Ij5APC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImVudGl0eV9hbHJlYWR5X2V4aXN0c19lZGl0IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogcmVkOyIKICAgICAgICAgICAgICAgICAgICA+e3t0bHQoJ2VudGl0aWVzX2VudGl0eV9uYW1lX2NvbmRpdGlvbl90ZXh0Jyl9fS48L3NwYW4+CiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgIDxkaXYgdi1pZj0iIWlzRWRpdEVudGl0eSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImhlYWRpbmciPnt7dGx0KCdlbnRpdGllc192YWxpZGF0ZV90eXBlX2hlYWRlcicpfX08L2g1PgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1sLTMiPnt7Y3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX3R5cGV9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBwLTAiIHYtaWY9InRoaXMuY3VycmVudF9zZWxlY3RlZF90eXBlID09PSAnc3lzdGVtJyI+CiAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPkRlc2NyaXB0aW9uPC9wPgogICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iU2Nyb2xsU3R5bGUgbWwtMyIgc3R5bGU9InBhZGRpbmctcmlnaHQ6OHB4ICFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxOyI+e3tjdXJyZW50X3NlbGVjdGVkX2Rlc2NyaXB0aW9ufX08L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBwci0wIiB2LWlmPSJ0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdHlwZSA9PT0gJ3BhdHRlcm4nIj4KICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+UGF0dGVybjwvcD4KICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlNjcm9sbFN0eWxlIG1sLTMiIHN0eWxlPSJwYWRkaW5nLXJpZ2h0OjhweCAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IigKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfcGF0dGVybiwgaW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgKSBpbiBjdXJyZW50X3NlbGVjdGVkX3BhdHRlcm4iCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDByZW07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LXN0eWxlLXBvc2l0aW9uOiBpbnNpZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgY3VycmVudF9zZWxlY3RlZF9wYXR0ZXJuW2luZGV4XVsncGF0dGVybiddIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIHByLTAiIHYtZWxzZS1pZj0idGhpcy5jdXJyZW50X3NlbGVjdGVkX3R5cGUgPT09ICdzeW5vbnltcyciPgogICAgICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIj57e3RsdCgnZW50aXRpZXNfdmFsdWVfbGFiZWwnKX19PC9wPgogICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iU2Nyb2xsU3R5bGUgbWwtMyIgc3R5bGU9InBhZGRpbmctcmlnaHQ6OHB4ICFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld192YWx1ZSwgaW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgKSBpbiBjdXJyZW50X3NlbGVjdGVkX3ZhbHVlcyIKICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMHJlbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Qtc3R5bGUtcG9zaXRpb246IGluc2lkZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjdXJyZW50X3NlbGVjdGVkX3ZhbHVlc1tpbmRleF1bJ3ZhbHVlJ10gfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aDY+IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0wIG1iLTAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDEuMzhyZW07Ij57e3RsdCgnZW50aXRpZXNfcGFnZV90aXRsZScpfX06PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDwvaDY+IC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19zdW5vbnltcywgaW5kZXgxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgaW4gY3VycmVudF9zZWxlY3RlZF92YWx1ZXNbaW5kZXhdWydzeW5vbnltcyddIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMHJlbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Qtc3R5bGUtcG9zaXRpb246IGluc2lkZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBuZXdfc3Vub255bXMgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1lbHNlLWlmPSJpc0VkaXRFbnRpdHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJkLWZsZXggaGVhZGluZyI+e3t0bHQoJ2VudGl0aWVzX3ZhbGlkYXRpb25fb25fZWRpdF9sYWJlbCcpfX08L2g1PgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic3dpdGNoIGZsb2F0LXJpZ2h0IiBzdHlsZT0ibWFyZ2luLXRvcDogLTI3cHggIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjdXJyZW50X3NlbGVjdGVkX3ZhbGlkYXRpb25fbmVlZGVkIgogICAgICAgICAgICAgICAgICAgICAgICBpZD0iY3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX25lZWRlZF9pZCIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2xpZGVyIHJvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyLXJhZGl1czogNTBweDsiCiAgICAgICAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICB7e3RsdCgnZW50aXRpZXNfdmFsaWRhdGlvbl9vbl9lZGl0X2hlbHBfdGV4dCcpfX0KICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJjdXJyZW50X3NlbGVjdGVkX3ZhbGlkYXRpb25fbmVlZGVkIiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmFkaW8gbXktYXV0byI+CiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImN1cnJlbnRfc2VsZWN0ZWRfdmFsaWRhdGlvbl90eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJudW1lcmljIgogICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJjdXJyZW50X3NlbGVjdGVkX3ZhbGlkYXRpb25fdHlwZV9udW1lcmljX2lkIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7dGx0KCdlbnRpdGllc192YWxpZGF0aW9uX29uX2VkaXRfbnVtZXJpY19sYWJlbCcpfX0KICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImN1cnJlbnRfc2VsZWN0ZWRfdmFsaWRhdGlvbl90eXBlIgogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJhbHBoYWJldGljYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImN1cnJlbnRfc2VsZWN0ZWRfdmFsaWRhdGlvbl90eXBlX2FscGhhYmV0aWNhbF9pZCIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICB7e3RsdCgnZW50aXRpZXNfdmFsaWRhdGlvbl9vbl9lZGl0X2FscGhhYmV0X2xhYmVsJyl9fQogICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX3R5cGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImFscGhhbnVtZXJpYyIKICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iY3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX3R5cGVfYWxwaGFudW1lcmljX2lkIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7dGx0KCdlbnRpdGllc192YWxpZGF0aW9uX29uX2VkaXRfYWxwaGFudW1lcmljX2xhYmVsJyl9fQogICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0gPGhyIC8+IC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIiB2LWlmPSJ0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdHlwZSA9PT0gJ3BhdHRlcm4nIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgaWQ9ImFkZF9wYXR0ZXJuX2J1dHRvbl9pZCIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4gbWItMCIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOiA1cHggMTBweDsgZmxvYXQ6IHJpZ2h0ICFpbXBvcnRhbnQ7IgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fcGF0dGVybl9saXN0X2VkaXQoJ2FkZCcpIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTQiCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTMuOTk3IgogICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgMTQgMTMuOTk3IgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJVbmlvbl8xMyIKICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9IlVuaW9uIDEzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik0tMTI2ODQsMjA1OHYtNWgtNWExLDEsMCwwLDEtMS0xLDEsMSwwLDAsMSwxLTFoNXYtNWExLDEsMCwwLDEsMS0xLDEsMSwwLDAsMSwxLDF2NWg1YTEsMSwwLDAsMSwxLDEsMSwxLDAsMCwxLTEsMWgtNXY1YTEsMSwwLDAsMS0xLDFBMSwxLDAsMCwxLTEyNjg0LDIwNThaIgogICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDEyNjkwLjAwMSAtMjA0NS4wMDIpIgogICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiNmZmYiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlBhdHRlcm48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJTY3JvbGxTdHlsZSIgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxcmVtOyI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3BhdHRlcm4sIGluZGV4CiAgICAgICAgICAgICAgICAgICAgICAgICkgaW4gY3VycmVudF9zZWxlY3RlZF9wYXR0ZXJuIgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tZ3JvdXAiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OmZsZXg7IgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0iY3VycmVudF9zZWxlY3RlZF9wYXR0ZXJuW2luZGV4XVsncGF0dGVybiddIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9InRsdCgnZW50ZXJfcGF0dGVybicpIgogICAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iYGVudGVyX3BhdHRlcm5faWRfJHtpbmRleH1gIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImN1cnJlbnRfc2VsZWN0ZWRfcGF0dGVybi5sZW5ndGggPiAxIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im15LWF1dG8gbWwtMiBtci0wIgogICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3BhdHRlcm5fbGlzdF9lZGl0KCdyZW1vdmUnLCBpbmRleCkiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBzdHlsZT0iZm9udC1zaXplOiAxNnB4IiBjbGFzcz0iZmEiPiYjeGYwMGQ7PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIiB2LWVsc2UtaWY9InRoaXMuY3VycmVudF9zZWxlY3RlZF90eXBlID09PSAnc3lub255bXMnIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1hY3QiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgIGlkPSJhZGRfdmFsdWVzX2J1dHRvbl9pZF9pZCIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4gbXItMCIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOiA1cHggMTBweDsgZmxvYXQ6cmlnaHQ7IgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fdmFsdWVzX2xpc3RfZWRpdCgnYWRkJykiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9IlVuaW9uXzEzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iVW5pb24gMTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTS0xMjY4NCwyMDU4di01aC01YTEsMSwwLDAsMS0xLTEsMSwxLDAsMCwxLDEtMWg1di01YTEsMSwwLDAsMSwxLTEsMSwxLDAsMCwxLDEsMXY1aDVhMSwxLDAsMCwxLDEsMSwxLDEsMCwwLDEtMSwxaC01djVhMSwxLDAsMCwxLTEsMUExLDEsMCwwLDEtMTI2ODQsMjA1OFoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTI2OTAuMDAxIC0yMDQ1LjAwMikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+e3t0bHQoJ2VudGl0aWVzX3ZhbHVlc19vbl9lZGl0X2xhYmVsJyl9fTwvcD4KICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTMgU2Nyb2xsU3R5bGUiIHN0eWxlPSJkaXNwbGF5OiBibG9jazsgbWFyZ2luLWJvdHRvbTogMXJlbTsiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19zeW5vbnltcywgaW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgKSBpbiBjdXJyZW50X3NlbGVjdGVkX3ZhbHVlcyIKICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjdXN0b20tYnV0dG9uLWJveCBwbC0zIHB0LTMgcHItMSBtdC0wIG1iLTMiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibXQtMCIgc3R5bGU9IiI+e3t0bHQoJ3ZhbHVlc19vbl9lZGl0X3ZhbHVlX2xhYmVsJyl9fTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzLmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0OyIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgbWwtYXV0byBtci0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3ZhbHVlc19saXN0X2VkaXQoJ3JlbW92ZScsIGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICYjeGYxZjg7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09ImN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzW2luZGV4XVsndmFsdWUnXSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGVkaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPSJ0bHQoJ2VudGVyX3ZhbHVlJykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSJgZW50ZXJfdmFsdWVfaWRfJHtpbmRleH1gIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDo5OS41JSAhaW1wb3J0YW50OyIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMiBtYi0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgc3R5bGU9IiI+e3t0bHQoJ3ZhbHVlc19vbl9lZGl0X3N5bm9ueW1zX2xhYmVsJyl9fTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIG1yLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogNXB4IDEwcHg7IGZsb2F0OnJpZ2h0OyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3N5bm9ueW1zX2xpc3RfZWRpdCgnYWRkJywgaW5kZXgpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFkZF9zeW5vbnltc19idXR0b25faWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9IlVuaW9uXzEzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iVW5pb24gMTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTS0xMjY4NCwyMDU4di01aC01YTEsMSwwLDAsMS0xLTEsMSwxLDAsMCwxLDEtMWg1di01YTEsMSwwLDAsMSwxLTEsMSwxLDAsMCwxLDEsMXY1aDVhMSwxLDAsMCwxLDEsMSwxLDEsMCwwLDEtMSwxaC01djVhMSwxLDAsMCwxLTEsMUExLDEsMCwwLDEtMTI2ODQsMjA1OFoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTI2OTAuMDAxIC0yMDQ1LjAwMikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3N1bm9ueW1zLCBpbmRleDEKICAgICAgICAgICAgICAgICAgICAgICAgICApIGluIGN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzW2luZGV4XVsnc3lub255bXMnXSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tZ3JvdXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6ZmxleDsiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09ImN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzW2luZGV4XVsnc3lub255bXMnXVtpbmRleDFdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBlZGl0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPSJ0bHQoJ2VudGVyX3N5bm9ueW0nKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iYGVudGVyX3N5bm9ueW1zX2lkXyR7aW5kZXh9YCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDo5OS41JSAhaW1wb3J0YW50OyIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJjdXJyZW50X3NlbGVjdGVkX3ZhbHVlc1tpbmRleF1bJ3N5bm9ueW1zJ10ubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im15LWF1dG8gbWwtMiBtci0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fc3lub255bXNfbGlzdF9lZGl0KCdyZW1vdmUnLGluZGV4LCBpbmRleDEpIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIHN0eWxlPSJmb250LXNpemU6IDE2cHgiIGNsYXNzPSJmYSI+JiN4ZjAwZDs8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXNoLW1vZGFsIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXdyYXAgdGV4dC1yaWdodCBtdC0wIHB5LTAgYm9yZGVyLXRvcC0wIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1saW5rIgogICAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZWRpdF9lbnRpdHlfZGV0YWlscyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICB7e3RsdCgnZW50aXRpZXNfY2FuY2VsX2J0bicpfX0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zYXZlIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlZGl0X2VudGl0eSgpIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIHt7dGx0KCdlbnRpdGllc19zYXZlX2J0bicpfX0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiB2LXNob3c9IkJvb2xlYW4oZW50aXR5X2xpc3QubGVuZ3RoID09PSAwKSAmJiAhc3Bpbm5lck9uIj4KICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxzdHJvbmc+CiAgICAgICAgICAgICAge3t0bHQoJ2VudGl0aWVzX25vX2VudGl0eV9hZGRlZF90ZXh0Jyl9fS48L3N0cm9uZwogICAgICAgICAgICA+CiAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icGFnaW4tdGFibGUiIHN0eWxlPSJtYXJnaW4tdG9wOiAyJSIgdi1zaG93PSJCb29sZWFuKGVudGl0eV9saXN0Lmxlbmd0aCA+IDApIj4KICAgICAgICAgIDxuYXYgYXJpYS1sYWJlbD0iUGFnZSBuYXZpZ2F0aW9uIGV4YW1wbGUiPgogICAgICAgICAgICA8dWwgY2xhc3M9InBhZ2luYXRpb24ganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJpc0VkaXRFbnRpdHkgPyB2ZXJpZnlfY2hhbmdlcygpIDogcGFnZV9yZXF1aXJlKHBhZ2Vfbm8gLSAxKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgICB3aWR0aD0iOC42NjciCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNS4yMDQiCiAgICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDguNjY3IDE1LjIwNCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxnCiAgICAgICAgICAgICAgICAgICAgICBpZD0iYXJyb3ctcG9pbnQtdG8tbGVmdCIKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDEwNS44MDYgMTUuMjA0KSByb3RhdGUoMTgwKSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICBpZD0iUGF0aF8xMTM2IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9IlBhdGggMTEzNiIKICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTEwNS40OTMsOC4zNTRsLTYuNTM3LDYuNTM3YTEuMDY1LDEuMDY1LDAsMSwxLTEuNTA2LTEuNTA2TDEwMy4yMzUsNy42LDk3LjQ1LDEuODE3QTEuMDY1LDEuMDY1LDAsMCwxLDk4Ljk1Ni4zMTJsNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwwLDEsMCwxLjUwNVoiCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiM5NDk5YWUiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8bGkKICAgICAgICAgICAgICAgIDpjbGFzcz0iJ3BhZ2UtaXRlbSAnICsgcGFnaW5hdGlvbl9jbGFzcyhwYWdlbm8pIgogICAgICAgICAgICAgICAgdi1mb3I9InBhZ2VubyBpbiBwYWdlX2FycmF5IgogICAgICAgICAgICAgICAgOmtleT0icGFnZW5vIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIHYtaWY9InBhZ2VubyA9PSAnLi4ucycgfHwgcGFnZW5vID09ICcuLi5sJyIKICAgICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJpc0VkaXRFbnRpdHkgPyB2ZXJpZnlfY2hhbmdlcygpIDogcGFnZV9yZXF1aXJlKHBhZ2VubykiCiAgICAgICAgICAgICAgICAgID4uLi48L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIHYtaWY9InBhZ2VubyAhPSAnLi4ucycgJiYgcGFnZW5vICE9ICcuLi5sJyIKICAgICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJpc0VkaXRFbnRpdHkgPyB2ZXJpZnlfY2hhbmdlcygpIDogcGFnZV9yZXF1aXJlKHBhZ2VubykiCiAgICAgICAgICAgICAgICAgID57eyBwYWdlbm8gfX08L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFnZS1pdGVtIj4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJwYWdlLWxpbmsiCiAgICAgICAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgICAgICAgIEBjbGljaz0iaXNFZGl0RW50aXR5ID8gdmVyaWZ5X2NoYW5nZXMoKSA6IHBhZ2VfcmVxdWlyZShwYWdlX25vICsgMSkiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjguNjY3IgogICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUuMjA0IgogICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA4LjY2NyAxNS4yMDQiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZwogICAgICAgICAgICAgICAgICAgICAgaWQ9ImFycm93LXBvaW50LXRvLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTk3LjEzOSAwKSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICBpZD0iUGF0aF8xMTM2IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9IlBhdGggMTEzNiIKICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTEwNS40OTMsOC4zNTRsLTYuNTM3LDYuNTM3YTEuMDY1LDEuMDY1LDAsMSwxLTEuNTA2LTEuNTA2TDEwMy4yMzUsNy42LDk3LjQ1LDEuODE3QTEuMDY1LDEuMDY1LDAsMCwxLDk4Ljk1Ni4zMTJsNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwwLDEsMCwxLjUwNVoiCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiM5NDk5YWUiCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvbmF2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYKICAgIGlkPSJlbnRpdHltb2RlbCIKICAgIGNsYXNzPSJtb2RhbCBmYWRlIGRhc2gtbW9kYWwiCiAgICByb2xlPSJkaWFsb2ciCiAgICBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiCiAgICBkYXRhLWtleWJvYXJkPSJmYWxzZSIKICA+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGgzPnt7dGx0KCdlbnRpdHlfbW9kZWxfYWRkX2VudGl0eV9oZWFkZXInKX19PC9oMz4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvY2xvc2UtaWNuLnBuZyIgYWx0IC8+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1IGNsYXNzPSJoZWFkaW5nIj57e3RsdCgnZW50aXR5X21vZGVsX2VudGl0eV9uYW1lX2xhYmVsJyl9fTwvaDU+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgIHt7dGx0KCdlbnRpdHlfbW9kZWxfZW50aXR5X25hbWVfdGV4dCcpfX0KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtYm94Ij4KICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0ic2F2ZV9uZXdfZW50aXRpZXMiCiAgICAgICAgICAgICAgICBpZD0iZW50ZXJfZW50aXRpZXNfbmFtZV9pZCIKICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPSJ0bHQoJ2VudGl0eV9uYW1lX2hlcmUnKSIKICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjI1IgogICAgICAgICAgICAgICAgQGtleXVwPSJzZWFyY2hfZW50aXRpZXNfbmFtZSgpIgogICAgICAgICAgICAgICAgQGtleWRvd249ImVudGl0eV9uYW1lX2NoZWNrX3NwZWNpYWxfY2hhcmFjdGVycygkZXZlbnQpIgogICAgICAgICAgICAgICAgOnN0eWxlPSIoc2F2ZV9uZXdfZW50aXRpZXMubGVuZ3RoID4gMCkgPyAncGFkZGluZy1sZWZ0OjE5cHggIWltcG9ydGFudDsnOiBudWxsIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJzYXZlX25ld19lbnRpdGllcy5sZW5ndGggPiAwIiBjbGFzcz0idW5pdCI+QDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxwIHYtc2hvdz0iZW50aXR5X2FscmVhZHlfZXhpc3RzIiAKICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICBjb2xvcjogcmVkICFpbXBvcnRhbnQ7IAogICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTowcHggIWltcG9ydGFudDsgCiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDo4cHggIWltcG9ydGFudCI+CiAgICAgICAgICAgICB7e3RsdCgnZW50aXRpZXNfbmFtZV9hbHJlYWR5X2V4aXN0X3RleHQnKX19CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNSBjbGFzcz0iZC1mbGV4IGhlYWRpbmciPnt7dGx0KCdlbnRpdHlfbW9kZWxfdmFsaWRhdGlvbl9sYWJlbCcpfX08L2g1PgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9InN3aXRjaCBmbG9hdC1yaWdodCIgc3R5bGU9Im1hcmdpbi10b3A6IC0yN3B4ICFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgdi1tb2RlbD0idmFsaWRhdGlvbl9uZWVkZWQiCiAgICAgICAgICAgICAgICBpZD0idmFsaWRhdGlvbl9uZWVkZWRfaWQiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgY2xhc3M9InNsaWRlciByb3VuZCIKICAgICAgICAgICAgICAgIHN0eWxlPSJib3JkZXItcmFkaXVzOiA1MHB4OyIKICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICB7e3RsdCgnZW50aXR5X21vZGVsX3ZhbGlkYXRpb25fdGV4dCcpfX0KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiB2LWlmPSJ2YWxpZGF0aW9uX25lZWRlZCIgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBteS1hdXRvIj4KICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZhbGlkYXRpb25fdHlwZSIKICAgICAgICAgICAgICAgICAgdmFsdWU9Im51bWVyaWMiCiAgICAgICAgICAgICAgICAgIGlkPSJ2YWxpZGF0aW9uX3R5cGVfbnVtZXJpY19pZCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICB7e3RsdCgnZW50aXR5X21vZGVsX3ZhbGlkYXRpb25fb3B0aW9uX251bWVyaWNfbGFiZWwnKX19CiAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZhbGlkYXRpb25fdHlwZSIKICAgICAgICAgICAgICAgICAgdmFsdWU9ImFscGhhYmV0aWNhbCIKICAgICAgICAgICAgICAgICAgaWQ9InZhbGlkYXRpb25fdHlwZV9hbHBoYWJldGljYWxfaWQiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAge3t0bHQoJ2VudGl0eV9tb2RlbF92YWxpZGF0aW9uX29wdGlvbl9hbHBoYWJldF9sYWJlbCcpfX0KICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idmFsaWRhdGlvbl90eXBlIgogICAgICAgICAgICAgICAgICB2YWx1ZT0iYWxwaGFudW1lcmljIgogICAgICAgICAgICAgICAgICBpZD0idmFsaWRhdGlvbl90eXBlX2FscGhhbnVtZXJpY19pZCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICB7e3RsdCgnZW50aXR5X21vZGVsX3ZhbGlkYXRpb25fb3B0aW9uX2FscGhhbnVtZXJpY19sYWJlbCcpfX0KICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNSBjbGFzcz0iaGVhZGluZyIgPnt7dGx0KCdlbnRpdHlfbW9kZWxfdmFsdWVfdHlwZV9sYWJlbCcpfX08L2g1PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBteS1hdXRvIj4KICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImVudGl0aWVzX3ZhbHVlX3R5cGUiCiAgICAgICAgICAgICAgICAgIHZhbHVlPSJzeW5vbnltcyIKICAgICAgICAgICAgICAgICAgaWQ9ImVudGl0aWVzX3ZhbHVlX3R5cGVfc3lub255bXNfaWQiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAge3t0bHQoJ2VudGl0eV9tb2RlbF9zeW5vbnltX29wdGlvbl9sYWJlbCcpfX0KICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZW50aXRpZXNfdmFsdWVfdHlwZSIKICAgICAgICAgICAgICAgICAgdmFsdWU9InBhdHRlcm4iCiAgICAgICAgICAgICAgICAgIGlkPSJlbnRpdGllc192YWx1ZV90eXBlX3BhdHRlcm5faWQiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAge3t0bHQoJ2VudGl0eV9tb2RlbF9wYXR0ZXJuX29wdGlvbl9sYWJlbCcpfX0KICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCIgdi1pZj0iZW50aXRpZXNfdmFsdWVfdHlwZSA9PSAnc3lub255bXMnIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1hY3QiPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGlkPSJhZGRfdmFsdWVzX2J1dHRvbl9pZF9pZCIKICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogNXB4IDEwcHg7IGZsb2F0OnJpZ2h0OyIKICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3ZhbHVlc19saXN0KCdhZGQnKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjE0IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjEzLjk5NyIKICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDE0IDEzLjk5NyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICBpZD0iVW5pb25fMTMiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1uYW1lPSJVbmlvbiAxMyIKICAgICAgICAgICAgICAgICAgICBkPSJNLTEyNjg0LDIwNTh2LTVoLTVhMSwxLDAsMCwxLTEtMSwxLDEsMCwwLDEsMS0xaDV2LTVhMSwxLDAsMCwxLDEtMSwxLDEsMCwwLDEsMSwxdjVoNWExLDEsMCwwLDEsMSwxLDEsMSwwLDAsMS0xLDFoLTV2NWExLDEsMCwwLDEtMSwxQTEsMSwwLDAsMS0xMjY4NCwyMDU4WiIKICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMjY5MC4wMDEgLTIwNDUuMDAyKSIKICAgICAgICAgICAgICAgICAgICBmaWxsPSIjZmZmIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIj57e3RsdCgnZW50aXR5X21vZGVsX3ZhbHVlc19vcHRpb25fbGFiZWwnKX19PC9wPgogICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMyBTY3JvbGxTdHlsZSIgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxcmVtOyI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIHYtZm9yPSIoCiAgICAgICAgICAgICAgICAgICAgbmV3X3N5bm9ueW1zLCBpbmRleAogICAgICAgICAgICAgICAgICApIGluIHN5bm9ueW1zX3ZhbHVlX2xpc3QiCiAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWJ1dHRvbi1ib3ggcGwtMyBwdC0zIHByLTEgbXQtMCBtYi0zIgogICAgICAgICAgICAgICAgICBzdHlsZT0iIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im10LTAiIHN0eWxlPSIiPnt7dGx0KCdlbnRpdHlfbW9kZWxfdmFsdWVfdGV4dCcpfX06PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgICAgICB2LWlmPSJzeW5vbnltc192YWx1ZV9saXN0Lmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0OyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgbWwtYXV0byBtci0xIgogICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX3ZhbHVlc19saXN0KCdyZW1vdmUnLCBpbmRleCkiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAmI3hmMWY4OwogICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJzeW5vbnltc192YWx1ZV9saXN0W2luZGV4XVsndmFsdWUnXSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGVkaXQiCiAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPSJ0bHQoJ2VudGVyX3ZhbHVlJykiCiAgICAgICAgICAgICAgICAgICAgOmlkPSJgZW50ZXJfdmFsdWVfaWRfJHtpbmRleH1gIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDo5OS41JSAhaW1wb3J0YW50OyIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMiBtYi0yIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgc3R5bGU9IiI+e3t0bHQoJ2VudGl0eV9tb2RlbF9zeW5vbnltX3RleHQnKX19OjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4gbXItMSIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOiA1cHggMTBweDsgZmxvYXQ6cmlnaHQ7IgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fc3lub255bXNfbGlzdCgnYWRkJywgaW5kZXgpIgogICAgICAgICAgICAgICAgICAgICAgaWQ9ImFkZF9zeW5vbnltc19idXR0b25faWQiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNCIKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxMy45OTciCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9IlVuaW9uXzEzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iVW5pb24gMTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTS0xMjY4NCwyMDU4di01aC01YTEsMSwwLDAsMS0xLTEsMSwxLDAsMCwxLDEtMWg1di01YTEsMSwwLDAsMSwxLTEsMSwxLDAsMCwxLDEsMXY1aDVhMSwxLDAsMCwxLDEsMSwxLDEsMCwwLDEtMSwxaC01djVhMSwxLDAsMCwxLTEsMUExLDEsMCwwLDEtMTI2ODQsMjA1OFoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTI2OTAuMDAxIC0yMDQ1LjAwMikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKAogICAgICAgICAgICAgICAgICAgICAgbmV3X3N1bm9ueW1zLCBpbmRleDEKICAgICAgICAgICAgICAgICAgICApIGluIHN5bm9ueW1zX3ZhbHVlX2xpc3RbaW5kZXhdWydzeW5vbnltcyddIgogICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4MSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTpmbGV4OyIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWwudHJpbT0ic3lub255bXNfdmFsdWVfbGlzdFtpbmRleF1bJ3N5bm9ueW1zJ11baW5kZXgxXSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgZWRpdCIKICAgICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj0idGx0KCdlbnRlcl9zeW5vbnltJykiCiAgICAgICAgICAgICAgICAgICAgICA6aWQ9ImBlbnRlcl9zeW5vbnltc19pZF8ke2luZGV4fWAiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6OTkuNSUgIWltcG9ydGFudDsiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgdi1pZj0ic3lub255bXNfdmFsdWVfbGlzdFtpbmRleF1bJ3N5bm9ueW1zJ10ubGVuZ3RoID4gMSIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im15LWF1dG8gbWwtMiBtci0xIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fc3lub255bXNfbGlzdCgncmVtb3ZlJyxpbmRleCwgaW5kZXgxKSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8aSBzdHlsZT0iZm9udC1zaXplOiAxNnB4IiBjbGFzcz0iZmEiPiYjeGYwMGQ7PC9pPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCIgdi1pZj0iZW50aXRpZXNfdmFsdWVfdHlwZSA9PSAncGF0dGVybiciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBpZD0iYWRkX3BhdHRlcm5fYnV0dG9uX2lkIgogICAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biBtYi0wIgogICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDVweCAxMHB4OyBmbG9hdDogcmlnaHQgIWltcG9ydGFudDsiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF90b19wYXR0ZXJuX2xpc3QoJ2FkZCcpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgICAgICB3aWR0aD0iMTQiCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTMuOTk3IgogICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgMTQgMTMuOTk3IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgIGlkPSJVbmlvbl8xMyIKICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9IlVuaW9uIDEzIgogICAgICAgICAgICAgICAgICAgIGQ9Ik0tMTI2ODQsMjA1OHYtNWgtNWExLDEsMCwwLDEtMS0xLDEsMSwwLDAsMSwxLTFoNXYtNWExLDEsMCwwLDEsMS0xLDEsMSwwLDAsMSwxLDF2NWg1YTEsMSwwLDAsMSwxLDEsMSwxLDAsMCwxLTEsMWgtNXY1YTEsMSwwLDAsMS0xLDFBMSwxLDAsMCwxLTEyNjg0LDIwNThaIgogICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDEyNjkwLjAwMSAtMjA0NS4wMDIpIgogICAgICAgICAgICAgICAgICAgIGZpbGw9IiNmZmYiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPnt7dGx0KCdlbnRpdHlfbW9kZWxfcGF0dGVybl90ZXh0Jyl9fTwvcD4KICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlNjcm9sbFN0eWxlIiBzdHlsZT0iZGlzcGxheTogYmxvY2s7IG1hcmdpbi1ib3R0b206IDFyZW07Ij4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgdi1mb3I9IigKICAgICAgICAgICAgICAgICAgICBuZXdfcGF0dGVybiwgaW5kZXgKICAgICAgICAgICAgICAgICAgKSBpbiBwYXR0ZXJuX2xpc3QiCiAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1ncm91cCIKICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6ZmxleDsiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJwYXR0ZXJuX2xpc3RbaW5kZXhdWydwYXR0ZXJuJ10iCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBlZGl0IgogICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj0idGx0KCdlbnRlcl9wYXR0ZXJuJykiCiAgICAgICAgICAgICAgICAgICAgOmlkPSJgZW50ZXJfcGF0dGVybl9pZF8ke2luZGV4fWAiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgdi1pZj0icGF0dGVybl9saXN0Lmxlbmd0aCA+IDEiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlciIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXktYXV0byBtbC0yIG1yLTAiCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9fcGF0dGVybl9saXN0KCdyZW1vdmUnLCBpbmRleCkiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aSBzdHlsZT0iZm9udC1zaXplOiAxNnB4IiBjbGFzcz0iZmEiPiYjeGYwMGQ7PC9pPgogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCB0ZXh0LXJpZ2h0IG10LTAgcHktMCBib3JkZXItdG9wLTAiPgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICBAY2xpY2s9ImVtcHR5X3ZhcmlhYmxlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAge3t0bHQoJ2VudGl0aWVzX2NhbmNlbF9idG4nKX19CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdHlwZT0ic3VibWl0IgogICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zYXZlIgogICAgICAgICAgICAgIEBjbGljaz0ic2F2ZV9lbnRpdHkoKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIHt7dGx0KCdlbnRpdGllc19zYXZlX2J0bicpfX0KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBjbGFzcz0ibW9kYWwgZmFkZSBkYXNoLW1vZGFsIgogICAgaWQ9ImZpbGVfdXBsb2FkX2lkIgogICAgdGFiaW5kZXg9Ii0xIgogICAgcm9sZT0iZGlhbG9nIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJleGFtcGxlTW9kYWxDZW50ZXJUaXRsZSIKICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgZGF0YS1iYWNrZHJvcD0ic3RhdGljIgogICAgZGF0YS1rZXlib2FyZD0iZmFsc2UiCiAgPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCIgcm9sZT0iZG9jdW1lbnQiPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGgzPlVwbG9hZCBDU1YgRmlsZTwvaDM+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICBjbGFzcz0iY2xvc2UiCgogICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSIKICAgICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSIKICAgICAgICAgID4KICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvY2xvc2UtaWNuLnBuZyIgYWx0IC8+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxmb3JtIEBzdWJtaXQucHJldmVudD0iZmlsZV9zdWJtaXQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b20tZmlsZSI+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0iZmlsZSIKICAgICAgICAgICAgICAgICAgYWNjZXB0PSIuY3N2IgogICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWZpbGUtaW5wdXQiCiAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9ImZpbGVpbnB1dF9jc3YiCiAgICAgICAgICAgICAgICAgIGlkPSJpbnB1dEdyb3VwRmlsZWNzdl9pZCIKICAgICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT0iaW5wdXRHcm91cEZpbGVBZGRvbmNzdiIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7IGxpbmUtaGVpZ2h0OiAxNXB4IgogICAgICAgICAgICAgICAgICBjbGFzcz0iY3VzdG9tLWZpbGUtbGFiZWwgZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICBmb3I9ImZpbGUiCiAgICAgICAgICAgICAgICAgID57eyBmaWxlX2xhYmVsX2NzdiB9fTwvbGFiZWwKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiIgc3R5bGU9ImNvbG9yOiAjZmEwMDAwOyBmb250LXNpemU6IDAuODVyZW0iPgogICAgICAgICAgICAgICAgKiBQbGVhc2UgTm90ZSB0aGF0IG9ubHkgUmVzcG9uc2VzIHdpdGggb25seSBUZXh0IFJlc3BvbnNlIGNhbgogICAgICAgICAgICAgICAgYmUgYWRkZWQgdmlhIENTViwgQVBJIEVuZHBvaW50cyBhbmQgUmVzcG9uc2VzIHdpdGggSW1hZ2UgbmVlZAogICAgICAgICAgICAgICAgdG8gYmUgYWRkZWQgZnJvbSB0aGUgcG9ydGFsLgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi13cmFwIHRleHQtcmlnaHQiPgogICAgICAgICAgICAgIDxhIGhyZWY9IiMiIEBjbGljay5wcmV2ZW50PSJkb3dubG9hZF9zYW1wbGVfZmlsZSI+CiAgICAgICAgICAgICAgICBEb3dubG9hZCBTYW1wbGUgQ1NWIEZpbGUKICAgICAgICAgICAgICAgIDxpCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zcGlubmVyIGZhLXNwaW4iCiAgICAgICAgICAgICAgICAgIHYtc2hvdz0ic3Bpbm5lck9uRmlsZURvd25sb2FkIgogICAgICAgICAgICAgICAgPjwvaT4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tbGluayIKICAgICAgICAgICAgICAgIEBjbGljaz0iZW1wdHlfdmFyaWFibGUiCiAgICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIENhbmNlbAogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iZGFya2JsdWUtYnRuIj5TdWJtaXQ8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2Pgo="},null]}