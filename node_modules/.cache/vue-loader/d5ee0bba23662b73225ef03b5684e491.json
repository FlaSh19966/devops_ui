{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NewIntentPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NewIntentPage.vue","mtime":1663910265466},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64://
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

import axios from "axios";
import Swal from "sweetalert2";
import api_calls from "@/portal/api_calls";
import { setTimeout } from "timers";
import Template from "../Template.vue";
import { VueEditor } from "vue2-editor";
import { freeze_portal,show_subscription_expired_swal } from "@/portal/mixins";
import { bus } from "@/portal/main";
import page_guide from "@/portal/mixins/page_guide.js";

export default {
  components: { Template, VueEditor },
  name: "NewIntentsPage",
  mixins: [
    freeze_portal,
    page_guide,
    show_subscription_expired_swal
  ],
  data() {
    return {
      pencil_svg:
        ' <svg xmlns="http://www.w3.org/2000/svg" width="15.546" height="15.461" viewBox="0 0 15.546 15.461"><defs><style>.a{fill:#9e9e9e;}</style></defs><g transform="translate(-747.888 -356.769)"><path class="a" d="M759.416,356.769a2.358,2.358,0,0,1,1.777.662c.534.513,1.072,1.025,1.567,1.575a2.3,2.3,0,0,1-.071,3.325c-2.736,2.76-5.494,5.5-8.238,8.251a1.381,1.381,0,0,1-.758.288c-.719.174-1.429.379-2.144.572-.932.251-1.862.5-2.795.751-.6.158-.989-.213-.832-.807q.689-2.595,1.406-5.182a1.164,1.164,0,0,1,.289-.487q4.091-4.107,8.2-8.2A2.265,2.265,0,0,1,759.416,356.769Zm-1.989,2.956-6.54,6.538,3.025,3.024,6.538-6.537Zm4.023,2.165c.118-.135.225-.269.343-.392a1.134,1.134,0,0,0,0-1.734c-.46-.466-.926-.925-1.388-1.39a1.166,1.166,0,0,0-.861-.368c-.578,0-.881.4-1.214.76Zm-12.084,8.863,3.2-.863-2.337-2.331Z" transform="translate(0)"/><path class="a" d="M813.942,422.6l-.789-.8,3.821-3.819.784.8Z" transform="translate(-59.648 -55.947)"/></g></svg>',
      point_circle_svg:
        '<svg data-v-8cb8d9fe="" data-tooltip="tooltip" data-placement="bottom" title="" data-toggle="modal" data-target="#configapimodal4" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" height="24" width="24" version="1.1" data-original-title="Help"><g data-v-8cb8d9fe="" transform="translate(0 -1028.4)"><path data-v-8cb8d9fe="" d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z" transform="translate(0 1029.4)" fill="#2980b9"></path><path data-v-8cb8d9fe="" d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z" transform="translate(0 1028.4)" fill="#273679"></path></g></svg>',
      spinnerOn: false,
      total_pages: null,
      page_no: 1,
      per_page: 15,
      new_intent_list: [],
      old_intent_name: "",
      old_questions_list: [],
      old_image_name: "",
      old_video_url: "",
      intentlist: [],
      companyname: "",
      companyid: "",
      number_of_rows: null,
      edit: "False",
      add_edit: "false",
      // edit_response: "",
      old_intent_data: [],
      new_intent_data: [],
      is_response: false,
      is_endpoint: false,
      search_name: "",
      show_task_values: false,
      save_show_task_values: false,
      page_array: [],
      pageno: "",
      view_define_api_endpoints: false,
      define_api_endpoints: false,
      view_response_modal: true,
      edit_view_response_modal: true,
      image_response: "No",
      video_response: "No",
      video_link: "",
      embd_link: "",
      embd_link_edit: "",
      file_label: "Choose file",
      file_label2: "Choose file",
      file_label3: "Choose file",
      options: [],
      checked_list: [],
      current_selected_intent: "",
      current_selected_intent_index: 0,
      //this is also used to edit intent response
      selected_intent_response: [""],
      current_selected_intent_highlight:"",
      selected_intent_response_image: "",
      name_file: "",
      temp_file_name: "",
      selected_intent_response_video: "",
      selected_intent_response_source: "",
      selected_intent_questions: [""],
      isEditIntent: false,
      url: "",
      // This Variables are for NEW INTENT
      new_intents: "",
      add_questions_list: [""],
      source: "Web",
      // response: [""],
      multiple_response: [""],
      customToolbar: [
        ["bold", "italic", "underline"],
        [{ color: [] }, { background: [] }],
        [{ list: "ordered" }, { list: "bullet" }],
        ["link"]
      ],
      save_url: "",
      save_api_method: null,
      save_json_request_data: "",
      save_request_json_editable: null,
      save_editable_values: "",
      save_task_input_values: [],
      save_enduser_msg_type: "Custom",
      save_json_response_data: "",
      save_response_key_to_enduser: "",
      save_end_user_message: "",
      save_response_json_editable: null,
      save_response_key_edit_message: "",
      save_unsuccessful_message: null,

      isVisibleSearchClear: false,
      api_method: null,
      post_method_request_list: [],
      show_json_request_data: "",
      show_json_response_data: "",
      request_json_editable: null,
      editable_values: "",
      isEdit: false,
      utterances: [],
      enduser_msg_type: null,
      response_key_to_enduser: "",
      end_user_message: null,
      response_json_editable: null,
      response_key_edit_message: "",
      unsuccessful_message: null,
      finalstep: false,
      api_list: [],
      request_json_case_1: `{
          "companyid":"CompanyId",
          "email":"email",
          "role":"role",
          "subject":" ",
          "description":" ",
        }`,

      input_from_user_case_1: "subject;description",
      request_json_case_2: `{
	        "user": {
		      "companyid": 'companyId',
		      "email": 'email',
		      "role": 'role',
		      "info": {
		      	"nickname": ""
		      }
	      },
	      "searchparameter": {
		      "status": "",
		      "orderby": "",
		      "fromdate": "01/01/2018",
		      "count": 10,
		      "searchtext": "",
		      "typeofvisit": "ALL",
		      "sortorder": "appointment",
		      "startindex": "1",
		      "endindex": "10",
		      "todate": "08/06/2018"
	      }

      }`,
      input_from_user_case_2:
        "user,info,nickname;searchparameter,fromdate;searchparameter,todate",
      request_json_case_3: `{ 
          "companyid":"companyid",
          "email":"email",
          "role":"role" 
      }`,
      response_json_case_1: `{
          'message':'Your appointment has been scheduled',
          'username':'Cense',
          'email':'user@cense.ai'
      }`,
      response_json_case_11: `{
          'message':'API executed successfully',
          'count':'8'
          'username':'Cense',
          'email':'user@cense.ai'
      }`,
      task_input_values: [],
      intent_already_exists: false,
      intent_already_exists_edit: false,
      edit_video_response: "No",
      edit_image_response: "No",
      file_content2: "",
      file_content3: "",
      spinnerOnFileDownload: false,
      file_label_csv: "Choose file",
      file_content_csv: "",
      default_retail_intents: [],
      want_status: true,
      intent_core_model_inprogress: false,
      selected_intent_description:'',
      is_search_active: false,
      data_is_emit: "",
      disable_btn_expired: false,
      reg_url: /https:\/\/[(www\.)?a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/i,
      new_intent_question_list : ['']
    };
  },
  created() {
    if (this.$session.get("UserInformation").role == "SuperAdmin") {
      if (this.$session.has("CompanyId")) {
        this.companyid = this.$session.get("CompanyId");
        this.companyname = this.$session.get("CompanyName");
      } else {
        this.companyid = this.$session.get("UserInformation").company_id;
        this.companyname = this.$session.get("UserInformation").company_name;
        toastr.warning(this.tlt('intent_page_select_company_msg'));
      }
    } else {
      this.companyid = this.$session.get("UserInformation").company_id;
      this.companyname = this.$session.get("UserInformation").company_name;
    }
    axios
      .get(api_calls.source_list_url(), {
        headers: {
          Authorization: `Bearer ${this.$session.get("at")}`,
        },
      })
      .then((response) => {
        if(this.api_status_code.DATA_AVAILABLE.MSG_CODE == response.data.message.MSG_CODE){
          this.options = response.data.data;
        }
        else if(this.api_status_code.INTERNAL_SERVER_ERROR.MSG_CODE == response.data.message.MSG_CODE){
          swal({
              text: "Internal server error",
              type: "error",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 3000
            });
        } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error",
              timer: 2500
            })
        }
      })
      .catch((e) => {
        if (
          e.response.status === 410 ||
          e.response.status === 440 ||
          e.response.status === 409
        ) {
          this.$root.$emit("Session_Expired", e.response.data);
        }
      });
    axios
      .get(api_calls.get_ner_tags(), {
        params: {
          company_name: this.companyname,
          company_id: this.companyid,
          email: this.$session.get("UserInformation").email,
          license_key: this.$session.get("UserInformation").license_key,
          token: this.$session.get("UserInformation").tokens,
        },
        headers: {
          Authorization: `Bearer ${this.$session.get("at")}`,
        },
      })
      .then((response) => {
        this.entity_list = response.data.data;
        this.post_method_request_list = response.data.data;
      })
      .catch((e) => {
        if (
          e.response.status === 410 ||
          e.response.status === 440 ||
          e.response.status === 409
        ) {
          this.$root.$emit("Session_Expired", e.response.data);
        }
      });
    this.load_intent();
    this.check_intent_core_model_status();

    // console.log("Utterances", this.utterances);
  },
  watch: {
    editable_values() {
      if (this.editable_values != "") {
        this.show_task_values = true;
        //  console.log("Here");
      } else {
        this.show_task_values = false;
        //  console.log("Not Here");
      }
    },
    save_editable_values() {
      if (this.save_editable_values != "") {
        this.save_show_task_values = true;
        //  console.log("Here");
      } else {
        this.save_show_task_values = false;
        //  console.log("Not Here");
      }
    },
    search_name() {
      if (this.search_name === "") {
        this.load_intent();
        this.isVisibleSearchClear = false;
      } else if (this.search_name !== "") {
        this.isVisibleSearchClear = true;
      }
    },
    new_intents(val){
      this.new_intents = val.replace(/[^a-zA-Z0-9_ ]/g, "");
    },
    current_selected_intent(val){
      this.current_selected_intent = val.replace(/[^a-zA-Z0-9_ ]/g, "");
    }

  },
  computed:{
    check_select_all_intents_cbx_disabled(){
      if(this.intentlist.length >0){
        var temp = true;
        for(var i=0;i<this.intentlist.length;i++){
          if(!this.default_retail_intents.includes(this.intentlist[i].Intent)){
            temp = false;
          }
        }
        return temp;
      }
    },
  },
  mounted() {
    this.page_guide();
    setTimeout(() => {
      this.freeze_portal();
    }, 1000);
    this.$root.$on("NewIntentsPageDisabled", (data) => {
      if(data===true){
        this.disable_btn_expired = true;
      }
    });
    let bot_templates_data = this.$session.get("BotTemplates");
    for(let i =0; i< bot_templates_data.length; i++) {
      if((bot_templates_data[i].domain === "Retail") && (bot_templates_data[i].intent_data.length > 0)){
        this.default_retail_intents = bot_templates_data[i].intent_data.map((arr) => arr.Intent);
        break;
      }
    }
    var vm = this;
    $("#selectall").click(function () {
      if ($(this).is(":checked")) {
        // $('div:input').prop('checked',true);
        $("input:checkbox").prop("checked", true);
      } else {
        vm.checked_list = [];
        $("input:checkbox").prop("checked", false);
      }
    });
    var vm = this;
    $("#configapimodal4").on("shown.bs.modal", function (e) {
      $("#configapimodal").css("opacity", "-0.5");
    });
    $("#configapimodal4").on("hidden.bs.modal", function (e) {
      $("#configapimodal").css("opacity", "1");
    });
    $('[data-toggle="tooltip"]').tooltip();
    $("#intentmodel").on("hidden.bs.modal", function (e) {
        vm.empty_variable();
    });
    $("#configapimodal2").on("shown.bs.modal", function (e) {
      $("#configapimodal").css("opacity", "-0.5");
    });
    $("#configapimodal2").on("hidden.bs.modal", function (e) {
      $("#configapimodal").css("opacity", "1");
    });
    $("#configapimodal_json_editable").on("shown.bs.modal", function (e) {
      $("#configapimodal").css("opacity", "-0.5");
    });
    $("#configapimodal_json_editable").on("hidden.bs.modal", function (e) {
      $("#configapimodal").css("opacity", "1");
    });
    $('a[data-target="#intentmodel"]').on('click' , function () {
      if(vm.isEditIntent == true){
        vm.verify_changes();
      }else{
        vm.empty_variable();
        $("#intentmodel").modal('show');
      }
    });
    
    this.$root.$on("send_model_status", data =>{
      if (data == true){
        this.check_intent_core_model_status();
      }
    })
    if (this.$route.params.modal_open_switch_tab) {
      $("#intentmodel").modal("show");
      this.$root.$emit("change_sidebar_main_menu", "Training Hub");
    }
  },
  beforeRouteLeave(to, from, next) {
    if (this.isEditIntent) {
      this.verify_changes();
    } else {
      next();
    }
  },
  methods: {
     add_variant_open_modal(){
      if(!this.disable_btn_expired){
        $("#intentmodel").modal('show')
      } else {
        this.show_subscription_expired_swal();
      }
    },    
    verify_changes() {
      if(!this.disable_btn_expired){
      Swal({
        title: this.tlt('intent_page_verify_changes_msg'),
        text: this.tlt('verify_changes_alert_msg'),
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: this.tlt('intent_page_verify_changes_save_msg'),
        cancelButtonText: this.tlt('intent_page_verify_changes_cancel_msg'),
      }).then((result) => {
        if (result.value) {
          this.edit_intent();
        }else{
          this.show_intents(this.current_selected_intent_index);
          this.isEditIntent = false;
        }
      });}else{
        this.show_subscription_expired_swal();
      }
    },
    chk_cbx_crsr(intent){
      if (intent == 'all'){
        var temp = "cursor: pointer;";
        if(this.intentlist.length >0){
          temp = "cursor: not-allowed;";
          for(var i=0;i<this.intentlist.length;i++){
            if(!this.default_retail_intents.includes(this.intentlist[i].Intent)){
              temp = "cursor: pointer;"; 
            }
          }
        }
        return temp;
      } else{
        if(this.default_retail_intents.includes(intent)){
          return "cursor: not-allowed";
        }
      }
    },
    switching(element) {
      if (this.view_response_modal == true) {
        this.check();
      } else {
        this.uncheck();
      }
    },
    check() {
      document.getElementById("radioBtnn").checked = true;
      this.view_response_modal = false;
      // console.log(this.view_response_modal);
    },
    uncheck() {
      document.getElementById("radioBtnn").checked = false;
      this.view_response_modal = true;
      // console.log(this.view_response_modal);
    },
    check_intent_core_model_status(){
    this.model_status = this.$session.get("ModelStatus");
    if (this.model_status == "No Failure"){
    this.intent_core_model_inprogress = false;
    }
    else if(Boolean(this.model_status.intent_model) === true
     || Boolean(this.model_status.dialogue_model) === true)
     {
     if(this.model_status.intent_model == "InProgress" || this.model_status.dialogue_model == "InProgress"){
       this.intent_core_model_inprogress = true;
     }
     else{
       this.intent_core_model_inprogress = false;
     }
    }
    else{
      this.intent_core_model_inprogress = false; 
    }
    },

    show_model_progress(index){
      if(this.intent_core_model_inprogress == true){
         if (index == 'style'){
            return "cursor: not-allowed";
          }
          else if(index == 'title'){
            return this.tlt('train_model_progress_msg');
          }
      }
      else{
        return null;
      }
    },

    // editswitching(element) {
    //   // if (this.edit_view_response_modal == true) {
    //   //   this.echeck();
    //   // } else {
    //   //   this.euncheck();
    //   // }
    // },
    // echeck() {
    //   document.getElementById("radioBtn").checked = true;
    //   this.edit_view_response_modal = false;
    //   //then making null values to set fresh new values
    //   this.url = "";
    //   this.api_method = "";
    //   this.show_json_request_data = "";
    //   this.request_json_editable = "";
    //   this.task_input_values = "";
    //   this.editable_values = "";
    //   this.enduser_msg_type = "";
    //   this.end_user_message = "";
    //   this.response_json_editable = "";
    //   this.show_json_response_data = "";
    //   this.response_key_edit_message = "";
    //   this.response_key_to_enduser = "";
    //   this.unsuccessful_message = "";
    //   // console.log(this.edit_view_response_modal);
    // },
    // euncheck() {
    //   document.getElementById("radioBtn").checked = false;
    //   this.edit_view_response_modal = true;
    //   // making values null
    //   this.quill2.setText("");
    //   this.source = "Web";
    //   this.file_label = "Choose file";
    //   this.image_url = "";
    //   (this.edit_video_response = "No"),video_response
    //   this.file_label2 = "Choose file";
    //   this.file_label3 = "Choose file";
    //   this.file_content = "";
    //   // console.log(this.edit_view_response_modal);
    // },
    train_model() {
      if(!this.disable_btn_expired){
      Swal({
        title: this.tlt('train_model_swal_msg'),
        text: this.tlt('train_model_swal_alert_msg'),
        type: "question",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: this.tlt('train_model_swal_confirm_msg'),
        allowOutsideClick: false,
        allowEscapeKey: false,
      }).then((result) => {
        if (result.value) {
          this.spinnerOn = true;
          axios
            .post(
              api_calls.train_model(),
              {
                email: this.$session.get("UserInformation").email,
                license_key: this.$session.get("UserInformation").license_key,
                token: this.$session.get("UserInformation").tokens,
                subscription: this.$session.get("UserInformation").subscription,
                company_name: this.companyname,
                company_id: this.companyid,
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`,
                },
              }
            )
            .then((response) => {
              this.spinnerOn = false;
              this.want_status = true;
              this.$root.$emit("want_model_status",this.want_status);
              this.check_intent_core_model_status();
              if (response.data.message.MSG_CODE === 20000151) {
                toastr.success(response.data.message.MSG);
              } else if (response.data.message.MSG_CODE === 20000141) {
                toastr.error(response.data.message.MSG);
              } else {
                // toastr.error(this.tlt('train_model_internal_server_msg'));
                Swal({
                  title: response.data.message.MSG_CODE,
                  text: response.data.message.MSG,
                  showCancelButton: false,
                  showConfirmButton: false,
                  type: "error",
                  timer: 2500
                })
              }
            })
            .catch((e) => {
              this.spinnerOn = false;
              if (
                e.response.status === 410 ||
                e.response.status === 440 ||
                e.response.status === 409
              ) {
                this.$root.$emit("Session_Expired", e.response.data);
              }
            });
        }
      });}else{
        this.show_subscription_expired_swal();

      }
    },
    // train_and_test_model() {
    //   Swal({
    //     title: "Are You Sure?",
    //     text: "You want to Train & Test The Model?",
    //     type: "question",
    //     showCancelButton: true,
    //     confirmButtonColor: "#3085d6",
    //     cancelButtonColor: "#d33",
    //     confirmButtonText: "Yes, Confirm!",
    //     allowOutsideClick: false,
    //     allowEscapeKey: false,
    //   }).then((result) => {
    //     if (result.value) {
    //       this.spinnerOn = true;
    //       axios
    //         .post(
    //           api_calls.train_intent_model(),
    //           {
    //             email: this.$session.get("UserInformation").email,
    //             token: this.$session.get("UserInformation").tokens,
    //             company_name: this.company_name,
    //             company_id: this.company_id,
    //             license_key: this.$session.get("UserInformation").license_key,
    //             test_model: true,
    //           },
    //           {
    //             headers: {
    //               Authorization: `Bearer ${this.$session.get("at")}`,
    //             },
    //           }
    //         )
    //         .then((response) => {
    //           this.spinnerOn = false;
    //           if (response.data.MSG_CODE == 4046) {
    //             swal({
    //               title: "Results would be available soon",
    //               text: response.data.MSG,
    //               type: "success",
    //             }).then((result) => {
    //               if (result.value) {
    //                 // $('#file_upload').modal('hide');
    //                 // this.$router.go();
    //                 // this.load_questions_response();
    //               }
    //             });
    //           } else if (response.data.MSG_CODE === 1034) {
    //             swal({
    //               title: "Some Error Occurred",
    //               text: response.data.MSG,
    //               type: "error",
    //             }).then((result) => {
    //               if (result.value) {
    //                 // $('#file_upload').modal('hide');
    //                 // this.$router.go();
    //                 // this.load_questions_response();
    //               }
    //             });
    //           } else {
    //             swal({
    //               title: "Some Error Occurred",
    //               type: "error",
    //             }).then((result) => {
    //               // $('#file_upload').modal('hide');
    //               this.file_label = "Choose file";
    //               document.getElementById("inputGroupFile01").value = "";
    //               this.load_questions_response();
    //             });
    //           }
    //           // $("#file_upload").modal("hide");
    //         })
    //         .catch((e) => {
    //           // console.log(e);
    //           if (
    //             e.response.status === 410 ||
    //             e.response.status === 440 ||
    //             e.response.status === 409
    //           ) {
    //             this.$root.$emit("Session_Expired", e.response.data);
    //           } else {
    //             Swal({
    //               title: "Some Error Occurred",
    //               type: "error",
    //             }).then((result) => {
    //               // $('#file_upload').modal('hide');
    //               this.file_label = "Choose file";
    //               document.getElementById("inputGroupFile01").value = "";
    //               this.load_questions_response();
    //             });
    //           }
    //         });
    //     }
    //   });
    // },

    check_current_intent(index) {
      var return_var = "";
      if (this.intentlist[index].Intent == this.current_selected_intent_highlight) {
        return_var += "current-active-intent";
      }
      if (this.default_retail_intents.includes(this.intentlist[index].Intent)) {
        return_var += " disabled-intent";
      }
      return return_var;
    },
    clear_search_name() {
      this.search_name = "";
    },
    load_intent(current_selected_intent_index) {
      // this.intentlist = [];
      this.is_search_active = false;
      this.search_name = '';
      $("input:checkbox").prop("checked", false);
      this.new_intent_list = [];
      this.checked_list = [];
      this.spinnerOn = true;
      axios
        .post(
          api_calls.intent_question_response(),
          {
            is_get: true,
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            page_no: this.page_no,
            per_page: this.per_page,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          this.spinnerOn = false;
          if (this.api_status_code.DATA_AVAILABLE_MODELS.MSG_CODE == response.data.message.MSG_CODE) {
            this.number_of_rows = response.data.pagination.total_data;
            this.total_pages = response.data.pagination.total_page;
            this.intentlist = response.data.data;
            if (this.intentlist.length > 0) {
              if (Boolean(current_selected_intent_index)){
                this.show_intents(current_selected_intent_index);
              }else{
                this.show_intents(0);
              }
            }
          } else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error",
              timer: 2500
            })
          }
          this.setpagination(this.page_no);
        })
        .catch((e) => {
          this.spinnerOn = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    show_intents(index) {
      this.isEditIntent = false;
      var clone_selected_intent = JSON.parse(JSON.stringify(this.intentlist[index]));
      this.current_selected_intent_index = index;
      this.current_selected_intent = clone_selected_intent.Intent;
      this.current_selected_intent_highlight = clone_selected_intent.Intent;
      this.selected_intent_questions = clone_selected_intent.Questions;
      this.new_intent_question_list = [...new Set(clone_selected_intent.Questions)];
      this.selected_intent_description = clone_selected_intent.IntentDescription;
      this.old_intent_name = this.current_selected_intent;
      this.old_questions_list = this.intentlist[index].Questions;
      this.is_response = false;
      this.is_endpoint = false;
      if (clone_selected_intent.Response != null && clone_selected_intent.Response != "") {
        this.edit_view_response_modal = true;
        this.old_video_url = clone_selected_intent.Response.VideoUrl;
        this.is_response = true;
        this.is_endpoint = false;
        this.selected_intent_response = clone_selected_intent.Response.Response;
        // this.quill2.root.innerHTML = this.intentlist[index].Response.Response;
        this.selected_intent_response_source = clone_selected_intent.Response.Source;
        this.selected_intent_response_image = clone_selected_intent.Response.ImageUrl;
        if (this.selected_intent_response_image != null) {
          this.name_file = this.selected_intent_response_image.split("/");
          this.temp_file_name = this.name_file[this.name_file.length - 1];
          // console.log("splitted");
          this.file_label3 = this.temp_file_name;
          this.old_image_name = this.file_label3;
          this.edit_image_response = "Yes";
        } else {
          this.old_image_name = "";
          this.edit_image_response = "No";
          this.file_label3 = "Choose file";
        }
        this.selected_intent_response_video = clone_selected_intent.Response.VideoUrl;
        if (
          this.selected_intent_response_video != "" ||
          this.selected_intent_response_video.length != 0
        ) {
          this.edit_video_response = "Yes";
        } else {
          this.edit_video_response = "No";
        }
      } else if (clone_selected_intent.APIEndpoint != null && clone_selected_intent.APIEndpoint != "") {
        this.is_response = false;
        this.is_endpoint = true;
        this.edit_view_response_modal = false;
        this.utterances = clone_selected_intent.APIEndpoint.Tasks.Utterances;

        this.api_method = clone_selected_intent.APIEndpoint.METHOD;
        this.editable_values = clone_selected_intent.APIEndpoint.ValuesToEdit;
        this.request_json_editable = clone_selected_intent.APIEndpoint.isEdit;
        this.url = clone_selected_intent.APIEndpoint.URL;
        this.show_json_request_data = clone_selected_intent.APIEndpoint.RequestJson;
        this.show_json_response_data = clone_selected_intent.APIEndpoint.ResponseJson;
        this.enduser_msg_type = clone_selected_intent.APIEndpoint.Msg_type;
        this.end_user_message = clone_selected_intent.APIEndpoint.MessageToEndUser;
        this.response_key_to_enduser = clone_selected_intent.APIEndpoint.ResponseKeyToEndUser;
        this.response_json_editable = clone_selected_intent.APIEndpoint.ResponseKeyEditable;
        this.show_json_response_data = clone_selected_intent.APIEndpoint.ResponseJson;
        this.response_key_edit_message = clone_selected_intent.APIEndpoint.ResponseKeyMessageToEndUser;
        this.unsuccessful_message = clone_selected_intent.APIEndpoint.UnSuccessfulMessage;

        this.task_input_values = [];

        for (var i in this.utterances) {
          this.task_input_values.push({
            key_name: this.utterances[i].RawSlotName,
            input_text: this.utterances[i].Text,
          });
        }
      }
    },
    save_req_json() {
      try {
        JSON.parse(this.save_json_request_data);
      } catch (e) {
        return false;
      }
      return true;
    },
    req_json() {
      try {
        JSON.parse(this.show_json_request_data);
      } catch (e) {
        return false;
      }
      return true;
    },
    save_resp_json() {
      try {
        JSON.parse(this.save_json_response_data);
      } catch (e) {
        return false;
      }
      return true;
    },
    resp_json() {
      try {
        JSON.parse(this.show_json_response_data);
      } catch (e) {
        return false;
      }
      return true;
    },
    save_pushing(){
      if (this.save_api_method === null){
        Swal({
            text: "Please select Method",
            toast: true,
            position: "top-end",
            type: "warning",
            showConfirmButton: false,
            timer: 2500,
          });
        }
      try {
        if (this.save_editable_values != "") {
          let empty_vars = [];
          var csv = this.save_editable_values.split(";");
          //  console.log("this is csv",csv);
          var input_value;
          // this.save_task_input_values = [];

          for (var i in csv) {
            let temp_list = csv[i].split(",");
            //  console.log("this is temp",temp_list);
            if (temp_list[temp_list.length - 1] != "") {
              //  console.log("hereee");

              input_value = temp_list[temp_list.length - 1];
              if (!(this.save_task_input_values.map(key=>{return key.key_name}).includes(input_value))){
                this.save_task_input_values.push({
                key_name: input_value,
                input_text: "",
              });
              }
            }
          }
          var temp = [];
          for (let index = 0; index < this.save_task_input_values.length; index++) {
            if(csv.includes(this.save_task_input_values[index]['key_name'])){
              temp.push(this.save_task_input_values[index]);
            }
          }
          this.save_task_input_values =  temp;
          // for (var i in this.save_task_input_values) {
          //   if (this.save_task_input_values[i].input_text == "") {
          //     empty_vars.push(this.save_task_input_values[i]);
          //   }
          // }
        } else {
          this.save_task_input_values = [];
        }
      } catch (e) {
        // console.log(e);
      }
    },
    edit_pushing() {
      try {
        if (this.editable_values != "") {
          let empty_vars = [];
          var csv = this.editable_values.split(";");
          var input_value;
          // this.task_input_values = [];
          for (var i in csv) {
            let temp_list = csv[i].split(",");
            if (temp_list[temp_list.length - 1] != "") {
              input_value = temp_list[temp_list.length - 1];
              if(!(this.task_input_values.map(key=>{return key.key_name}).includes(input_value))){
                this.task_input_values.push({
                key_name: input_value,
                input_text: "",
              });
              }
            }
          }
          var temp = [];
          for (let index = 0; index < this.task_input_values.length; index++) {
            if(csv.includes(this.task_input_values[index]['key_name'])){
              temp.push(this.task_input_values[index]);
            }
          }
          this.task_input_values =  temp;
          // for (var i in this.task_input_values) {
          //   if (this.task_input_values[i].input_text == "") {
          //     empty_vars.push(this.task_input_values[i]);
          //   }
          // }
        } else {
          this.task_input_values = [];
        }
      } catch (e) {
        // console.log(e);
      }
    },
    // This is for checking while entering a intent name if it already exists or not
    enterintentid() {
      let intent_search_key = this.new_intents;
      axios
        .post(
          api_calls.intent_question_response(),
          {
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            subscription: this.$session.get("UserInformation").subscription,
            is_intent_search: true,
            intent_search_key: this.new_intents,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          if ((response.data.message.MSG_CODE == this.api_status_code.INTENT_NAME_NOT_EXISTS_MODELS.MSG_CODE) && (this.new_intents === intent_search_key)) {
            this.intent_already_exists = false;
            document.getElementById("enter_intent_id").style.border =null;
            if(this.new_intents != ""){
              document.getElementById("enter_intent_id").style.border =
              "1px solid #00f000";
            }
          } else if ((response.data.message.MSG_CODE == this.api_status_code.DUPLICATE_INTENT_4011_MODELS.MSG_CODE) && (this.new_intents === intent_search_key)) {
            this.intent_already_exists = true;
            document.getElementById("enter_intent_id").style.border =
            "1px solid red";
          }
        })
        .catch((e) => {
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409 || 
            e.response.status === 401 
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    // This is for checking while editing and entering a intent name if it already exists or not
    enterintentid_edit() {
      axios
        .post(
          api_calls.intent_question_response(),
          {
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            subscription: this.$session.get("UserInformation").subscription,
            is_intent_search: true,
            intent_search_key: this.current_selected_intent,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          // console.log(this.current_selected_intent);
          if (response.data.message.MSG_CODE == this.api_status_code.INTENT_NAME_NOT_EXISTS_MODELS.MSG_CODE) {
            this.intent_already_exists_edit = false;
            document.getElementById("enter_intent_id_edit").style.border =null;
            if(this.current_selected_intent != ""){
              document.getElementById("enter_intent_id_edit").style.border =
                "1px solid #00f000";
              }
          } else if (response.data.message.MSG_CODE == this.api_status_code.DUPLICATE_INTENT_4011_MODELS.MSG_CODE) {
            if (this.old_intent_name == this.current_selected_intent){
              this.intent_already_exists_edit = false;
              document.getElementById("enter_intent_id_edit").style.border =null;  
              //  console.log("you old only");
            } else {
              //  console.log("you here");
              this.intent_already_exists_edit = true;
              document.getElementById("enter_intent_id_edit").style.border =
                "1px solid red";
            }
          }
        })
        .catch((e) => {
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    intent_name_check_special_characters(e){
      if (/^[^a-zA-Z0-9_ ]*$/.test(e.key)) {
        e.preventDefault();
      }
    },
    edit_intent() {
      if (this.old_intent_name == this.current_selected_intent) {
        var intent_to_send = null;
      } else {
        // var intent_to_send = this.companyid + "_" + this.old_intent_name;
        var intent_to_send = this.old_intent_name;

      }
      if (this.intent_already_exists_edit) {
        toastr.error(this.tlt('edit_intent_name_exist_msg'));
        window.scrollTo(0, 0);
        return;
      }
      if (this.current_selected_intent == "") {
        // toastr.error("Please enter an Intent name");
        Swal({
          text: this.tlt('edit_intent_enter_name_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      }
      if (this.selected_intent_questions.length > 0) {
        for (let i = 0; i < this.selected_intent_questions.length; i++) {
          if (
            this.selected_intent_questions[i] === "" ||
            this.selected_intent_questions[i] === null
          ) {
            // toastr.error("Questions cannot be blank");
            Swal({
              text: this.tlt('edit_intent_question_alert_msg'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2500,
            });
            return;
          }
        }
      }
      if((this.current_selected_intent != 'shipping' && 
        this.current_selected_intent != 'messaging_platform' &&
        this.current_selected_intent != 'contact_us') && 
        (this.default_retail_intents.includes(this.current_selected_intent)))
      {
        this.spinnerOn = true;
        axios
          .post(
            api_calls.intent_question_response(),
            {
              company_name: this.companyname,
              company_id: this.companyid,
              email: this.$session.get("UserInformation").email,
              license_key: this.$session.get("UserInformation").license_key,
              token: this.$session.get("UserInformation").tokens,
              is_edit: true,
              is_default_intent: true,
              // old_intent_name: intent_to_send,
              intent: this.current_selected_intent,
              subscription: "Platinum",
              question_list: this.selected_intent_questions,
              old_question_list: this.old_questions_list,
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`,
              },
            }
          )
          .then((response) => {
            this.spinnerOn = false;
            // this.intents = "";
            // this.question_list = [0];
            if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
              Swal({
                type: "error",
                text: this.tlt('edit_intent_enter_name_msg'),
                timer: 2500,
              });
              if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
            } else if (response.data.message.MSG_CODE == this.api_status_code.SUCCESSFUL_DB_QUERY_MODELS.MSG_CODE) {
              Swal({
                type: "success",
                text: this.tlt('edit_intent_enter_name_msg'),
                allowOutsideClick: false,
                allowEscapeKey: false,
                timer: 2500,
              }).then((result) => {
                if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
              });
            } else if (response.data.message.MSG_CODE == this.api_status_code.INTENT_IN_DIALOG_EDITED_SUCCESSFULLY_MODELS.MSG_CODE) {
              Swal({
                type: "info",
                text: this.tlt('edit_intent_enter_name_msg1'),
                allowOutsideClick: false,
                allowEscapeKey: false,
                timer: 7500,
              }).then((result) => {
                if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
              });
            } else if (response.data.message.MSG_CODE == this.api_status_code.STATUS_FAILURE_MODELS.MSG_CODE) {
              Swal({
                type: "warning",
                text: this.tlt('edit_intent_some_error_msg1'),
                timer: 2500,
              });
            } 
            // else if (response.data.status == "Error") {
            //   Swal({
            //     type: "error",
            //     text: this.tlt('edit_intent_some_error_msg2'),
            //     timer: 2500,
            //   });
            //   if(this.is_search_active === true){
            //       this.search_intent(this.current_selected_intent_index);
            //   }else{
            //     this.load_intent(this.current_selected_intent_index);
            //   }
            // } 
            else if (
              response.data.message.MSG_CODE === this.api_status_code.UNSUCCESSFUL_DB_QUERY_MODELS.MSG_CODE
            ) {
              Swal({
                type: "error",
                text: this.tlt('edit_intent_some_error_msg3'),
                timer: 2500,
              });
              if(this.is_search_active === true){
                this.search_intent(this.current_selected_intent_index);
              }else{
                this.load_intent(this.current_selected_intent_index);
              }
            } else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error",
                timer: 2500
              })
            }
          })
          .catch((e) => {
            this.spinnerOn = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            } else {
              Swal({
                type: "error",
                text: this.tlt('edit_intent_internal_server_msg'),
                timer: 2500,
              });
              if(this.is_search_active === true){
                this.search_intent(this.current_selected_intent_index);
              }else{
                this.load_intent(this.current_selected_intent_index);
              }
              // toastr.error("Internal Server Error");
            }
          });
      }else if(this.is_response === false && this.is_endpoint === false){
        axios
        .post(
          api_calls.form_automation_save_intent_example(),
          {
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            edit_intent: true,
            old_intent_name:intent_to_send,
            intent: this.current_selected_intent,
            intent_description:this.selected_intent_description,
            question_list: this.selected_intent_questions,
            old_question_list: this.old_questions_list,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          this.spinnerOn = false;
          if (response.data.MSG == "Intent Question Edited Successfully") {
            Swal({
              text: this.tlt('edit_intent_edit_success_msg'),
              type: "success",
              timer: 3500,
              title: this.tlt('edit_intent_success_alert_msg'),
              toast: true,
              position: "top-right"
            });
            if(this.is_search_active === true){
                this.search_intent(this.current_selected_intent_index);
              }else{
                this.load_intent(this.current_selected_intent_index);
              }
          } else if (response.data.Msg == "Used Intent Name Edited Successfully") {
              Swal({
                type: "info",
                text: this.tlt('edit_intent_edited_alert_msg'),
                allowOutsideClick: false,
                allowEscapeKey: false,
                timer: 7500,
              }).then((result) => {
                if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
              });
            } else if (response.data.MSG == "Intent Question Not Edited Successfully") {
            Swal({
              type: "error",
              text:
                this.tlt('edit_intent_internal_server_msg1'),
              timer: 2500,
            });
          } else {
            Swal({
              type: "error",
              text:
                this.tlt('edit_intent_internal_server_msg2'),
              timer: 2500,
            });
          }
        })
        .catch((e) => {
          this.spinnerOn = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          } else {
            Swal({
              type: "error",
              text:
                this.tlt('edit_intent_internal_server_msg3'),
              timer: 2500,
            });
          }
        });
      }
      else if (this.edit_view_response_modal) {
        if (this.old_image_name == this.file_label3) {
          this.file_label3 = "Choose file";
        }
        for (let i = 0; i < this.selected_intent_response.length; i++) {
          if (
            this.selected_intent_response[i] == "" ||
            this.selected_intent_response[i] == "<p><br></p>"
          ) {
            Swal({
              text: this.tlt('edit_intent_response_alert_msg'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2500,
            });
            return;
          }
        }
        if (this.file_label3 == "Choose file") {
          if (
            this.file_label3 === "Choose file" &&
            this.edit_image_response == "No"
          ) {
            var delete_image;
          }
          // console.log("api call");
          this.spinnerOn = true;
          axios
            .post(
              api_calls.intent_question_response(),
              {
                company_name: this.companyname,
                company_id: this.companyid,
                email: this.$session.get("UserInformation").email,
                license_key: this.$session.get("UserInformation").license_key,
                token: this.$session.get("UserInformation").tokens,
                is_edit: true,
                is_response: true,
                old_intent_name: intent_to_send,
                intent: this.current_selected_intent,
                subscription: "Platinum",
                question_list: this.selected_intent_questions,
                intent_description:this.selected_intent_description,
                old_question_list: this.old_questions_list,
                response: {
                  file_name: null,
                  video_link:
                    this.edit_video_response == "Yes"
                      ? this.embd_link_edit
                      : [],
                  source: this.selected_intent_response_source,
                  response: this.selected_intent_response,
                },
                old_image_delete:
                  this.file_label3 === "Choose file" &&
                  this.edit_image_response == "No"
                    ? true
                    : false,
                old_image_name: this.old_image_name,
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`,
                },
              }
            )
            .then((response) => {
              this.spinnerOn = false;
              // this.response = "";
              // this.intents = "";
              // this.question_list = [0];
              // var response_api = response.data;
              if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
                Swal({
                  type: "error",
                  text: this.tlt('edit_intent_some_error_msg4'),
                  timer: 2500,
                });
                if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
              } else if (response.data.message.MSG_CODE == this.api_status_code.SUCCESSFUL_DB_QUERY_MODELS.MSG_CODE) {
                Swal({
                  type: "success",
                  text: this.tlt('edit_intent_edit_success_msg1'),
                  allowOutsideClick: false,
                  allowEscapeKey: false,
                  timer: 2500,
                }).then((result) => {
                  if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
                });
              } else if (response.data.message.MSG_CODE == this.api_status_code.INTENT_IN_DIALOG_EDITED_SUCCESSFULLY_MODELS.MSG_CODE) {
                Swal({
                  type: "info",
                  text: this.tlt('edit_intent_edited_alert_msg1'),
                  allowOutsideClick: false,
                  allowEscapeKey: false,
                  timer: 7500,
                }).then((result) => {
                  if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
                });
            } else if (response.data.message.MSG_CODE == this.api_status_code.STATUS_FAILURE_MODELS.MSG_CODE) {
                Swal({
                  type: "warning",
                  text: this.tlt('edit_intent_some_error_msg5'),
                  timer: 2500,
                });
              } 
              // else if (response.data.status == "Error") {
              //   Swal({
              //     type: "error",
              //     text: this.tlt('edit_intent_some_error_msg6'),
              //     timer: 2500,
              //   });
              //   if(this.is_search_active === true){
              //     this.search_intent(this.current_selected_intent_index);
              //   }else{
              //     this.load_intent(this.current_selected_intent_index);
              //   }
              // }
               else if (response.data.message.MSG_CODE === this.api_status_code.IMG_DUPLICATE_MODELS.MSG_CODE) {
                Swal({
                  type: "error",
                  text: this.tlt('edit_intent_img_exist_msg2'),
                  timer: 2500,
                });
                if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
              } else if (
                response.data.message.MSG_CODE === this.api_status_code.UNSUCCESSFUL_DB_QUERY_MODELS.MSG_CODE
              ) {
                Swal({
                  type: "error",
                  text: this.tlt('edit_intent_some_error_msg7'),
                  timer: 2500,
                });
                if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
              } else {
                  Swal({
                    title: response.data.message.MSG_CODE,
                    text: response.data.message.MSG,
                    showCancelButton: false,
                    showConfirmButton: false,
                    type: "error",
                    timer: 2500
                  })
              }
            })
            .catch((e) => {
              this.spinnerOn = false;
              if (
                e.response.status === 410 ||
                e.response.status === 440 ||
                e.response.status === 409
              ) {
                this.$root.$emit("Session_Expired", e.response.data);
              } else {
                Swal({
                  type: "error",
                  text: this.tlt('edit_intent_internal_server_msg4'),
                  timer: 2500,
                });
                if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
                // toastr.error("Internal Server Error");
              }
            });
        } else {
          this.spinnerOn = true;
          axios
            .post(
              api_calls.intent_question_response(),
              {
                company_name: this.companyname,
                company_id: this.companyid,
                email: this.$session.get("UserInformation").email,
                license_key: this.$session.get("UserInformation").license_key,
                token: this.$session.get("UserInformation").tokens,
                is_edit: true,
                is_response: true,
                image_edit: true,
                old_intent_name: intent_to_send,
                intent: this.current_selected_intent,
                question_list: this.selected_intent_questions,
                intent_description:this.selected_intent_description,
                subscription: "Platinum",
                old_image_name: this.old_image_name,
                new_image_name: this.file_label3,
                image_blob: this.file_content3,
                old_question_list: this.old_questions_list,
                response: {
                  file_name: this.file_label3,
                  video_link:
                    this.edit_video_response == "Yes"
                      ? this.embd_link_edit
                      : [],
                  source: this.selected_intent_response_source,
                  response: this.selected_intent_response,
                },
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`,
                },
              }
            )
            .then((response) => {
              this.spinnerOn = false;
              if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
              if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
                Swal({
                  type: "error",
                  text: this.tlt('edit_intent_some_error_msg7'),
                  timer: 2500,
                });
              } else if (response.data.message.MSG_CODE == this.api_status_code.SUCCESSFUL_DB_QUERY_MODELS.MSG_CODE) {
                Swal({
                  type: "success",
                  text: this.tlt('intent_edited_alert_msg'),
                  allowOutsideClick: false,
                  allowEscapeKey: false,
                  timer: 2000,
                }).then((result) => {
                  if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
                });
              } else if (response.data.message.MSG_CODE == this.api_status_code.INTENT_IN_DIALOG_EDITED_SUCCESSFULLY_MODELS.MSG_CODE) {
                Swal({
                  type: "info",
                  text: this.tlt('intent_edited_alert_msg1'),
                  allowOutsideClick: false,
                  allowEscapeKey: false,
                  timer: 7500,
                }).then((result) => {
                  if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
                });
            } else if (response.data.message.MSG_CODE == this.api_status_code.STATUS_FAILURE_MODELS.MSG_CODE) {
                Swal({
                  type: "warning",
                  text: this.tlt('edit_intent_some_error_msg9'),
                  timer: 2500,
                });
              } 
              // else if (response.data.status == "Error") {
              //   Swal({
              //     type: "error",
              //     text: this.tlt('edit_intent_some_error_msg10'),
              //     timer: 2500,
              //   });
              // } 
              else if (response.data.message.MSG_CODE === this.api_status_code.IMG_DUPLICATE_MODELS.MSG_CODE) {
                Swal({
                  type: "error",
                  text: this.tlt('edit_intent_img_exist_alert_msg'),
                  timer: 2500,
                });
              } else if (
                response.data.message.MSG_CODE === this.api_status_code.UNSUCCESSFUL_DB_QUERY_MODELS.MSG_CODE
              ) {
                Swal({
                  type: "error",
                  text: this.tlt('edit_intent_some_error_alert_msg'),
                  timer: 2500,
                });
              } else {
                  Swal({
                    title: response.data.message.MSG_CODE,
                    text: response.data.message.MSG,
                    showCancelButton: false,
                    showConfirmButton: false,
                    type: "error",
                    timer: 2500
                  })
              }
            })
            .catch((e) => {
              this.spinnerOn = false;
              if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
              if (
                e.response.status === 410 ||
                e.response.status === 440 ||
                e.response.status === 409
              ) {
                this.$root.$emit("Session_Expired", e.response.data);
              } else {
                Swal({
                  type: "error",
                  text: this.tlt('edit_intent_internal_server_msg5'),
                  timer: 2500,
                });
                // toastr.error("Internal Server Error");
              }
            });
          // this.response = "";
          // this.source = "";
          // this.intents = "";
          // this.file_label2 = "Choose file";
          // this.file_content2 = "";
          // this.video_link = "";
        }
      } else if (!this.edit_view_response_modal) {
        if (
          this.request_json_editable == "True" &&
          this.editable_values != ""
        ) {
          for (var i = 0; i < this.task_input_values.length; i++) {
            //  console.log(this.task_input_values[i]);
            if (this.task_input_values[i].input_text == "") {
              Swal({
                text: this.tlt('all_required_values_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
              return;
            }
          }
        }
        if (
          this.url == "" ||
          this.api_method == null ||
          this.request_json_editable == null ||
          (this.request_json_editable == "True" && this.editable_values == "")
        ) {
            if (this.api_method == null){
              Swal({
                text: this.tlt('select_method_alert_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            }else if (this.request_json_editable == null){
              Swal({
                text: this.tlt('select_request_json_alert_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            }else{
              Swal({
                text: this.tlt('all_required_values_msg1'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            return;
          }
        } else if (this.req_json() == false) {
          Swal({
            text: this.tlt('request_json_invalid_msg'),
            toast: true,
            position: "top-end",
            type: "warning",
            showConfirmButton: false,
            timer: 2500,
          });
          return;
        } else {
          if (this.request_json_editable == "True" && !this.isEdit) {
            // var csv = this.editable_values.split(";");
            // var input_value;
            // this.task_input_values = [];
            // for (var i in csv) {
            //   let temp_list = csv[i].split(",");
            //   input_value = temp_list[temp_list.length - 1];
            //   this.task_input_values.push({
            //     key_name: input_value,
            //     input_text: "",
            //   });
            // }
          }
          if (this.request_json_editable == "True") {
            // let empty_vars = [];
            // for (var i in this.task_input_values) {
            //   if (this.task_input_values[i].input_text == "") {
            //     empty_vars.push(this.task_input_values[i].input_text);
            //   }
            //   //  console.log(this.task_input_values);
            // }
            // if(empty_vars.length != null) {
            this.finalstep = true;
            // } else {
            //   toastr.error("Please enter all the values.");
            // }
          } else {
            this.finalstep = true;
          }
        }
        if (this.finalstep == true) {
          var existing_intent_list = this.api_list.filter((api) => {
            return api.intent == this.intents;
          });
          var post_method_data, get_method_data;
          post_method_data = {};
          get_method_data = {};
          // if (this.api_method == "POST" && this.task_from == "from_entity") {
          if (this.api_method == "POST") {
            for (var i in this.task_input_values) {
              post_method_data[this.task_input_values[i].key_name] = {
                from_text: true,
                from_entity:
                  this.task_input_values[i].input_text != "" ? true : false,
                entity: this.task_input_values[i].input_text,
                intent: this.current_selected_intent,
                not_intent: null,
              };
            }
          }
          if (this.api_method == "GET") {
            for (var i in this.task_input_values) {
              get_method_data[this.task_input_values[i].key_name] = {
                Entity: this.task_input_values[i].input_text,
                Slot: null,
              };
            }
          }
          if (existing_intent_list.length > 0 && !this.isEdit) {
            Swal({
              text: this.tlt('intent_already_exist_msg'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2500,
            });
          }
          if (this.enduser_msg_type == null) {
            Swal({
              text: this.tlt('end_msg_type_alert_msg'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 5000,
            });
          }
          if (this.enduser_msg_type == "Through_API") {
            if (this.resp_json() == false) {
              Swal({
                text: this.tlt('request_json_invalid_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2000,
              });
              return;
            }
            if (this.response_key_to_enduser == "") {
              Swal({
                text: this.tlt('all_required_values_msg2'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
              return;
            }
            if (this.response_json_editable == "True") {
              if (this.response_key_edit_message == "") {
                Swal({
                  text: this.tlt('all_required_values_msg3'),
                  toast: true,
                  position: "top-end",
                  type: "warning",
                  showConfirmButton: false,
                  timer: 2500,
                });
                return;
              }
            }
            this.end_user_message = "";
            // console.log("end_user message null",this.end_user_message);
          }
          if (this.enduser_msg_type == "Custom") {
            this.response_key_to_enduser = "";
            this.response_key_edit_message = "";
            // console.log("response key to end user null",this.response_key_to_enduser);
          }
          if (this.unsuccessful_message == "") {
            Swal({
              text: this.tlt('all_required_values_msg4'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2500,
            });
            return;
          }
          if (
            (this.end_user_message != "" ||
              this.enduser_msg_type == "Through_API") &&
            (this.response_json_editable != null ||
              this.enduser_msg_type == "Custom") &&
            this.enduser_msg_type != null &&
            (this.response_key_to_enduser != "" || 
              this.enduser_msg_type == "Custom") &&
            (this.show_json_response_data != "" ||
              this.enduser_msg_type == "Custom")
          ) {
            if (this.$session.get("UserInformation").subscription == "Silver") {
              Swal({
                type: "error",
                text:
                  this.tlt('upgrade_plan_alert_msg'),
                timer: 3000,
              }).then((result) => {
                if (result.value) {
                  if(this.is_search_active === true){
                  this.search_intent(this.current_selected_intent_index);
                }else{
                  this.load_intent(this.current_selected_intent_index);
                }
                }
              });
            } else {
              this.spinnerOn = true;
              let tasks = {};
              if (
                (this.request_json_editable == "True" &&
                  this.task_input_values.length > 0) ||
                this.request_json_editable == "False"
              ) {
                for (var i in this.task_input_values) {
                  var temp = [];
                  temp.push({
                    Type: "Ask",
                    Text: this.task_input_values[i].input_text,
                  });
                  tasks[this.task_input_values[i].key_name] = temp;
                }
                // console.log("reached here finally");
                axios
                  .post(
                    api_calls.intent_question_response(),
                    {
                      company_name: this.companyname,
                      company_id: this.companyid,
                      email: this.$session.get("UserInformation").email,
                      license_key: this.$session.get("UserInformation")
                        .license_key,
                      token: this.$session.get("UserInformation").tokens,
                      is_edit: true,
                      is_endpoint: true,
                      old_intent_name: intent_to_send,
                      old_question_list: this.old_questions_list,
                      intent:
                        this.current_selected_intent,  
                      question_list: this.selected_intent_questions,
                      intent_description:this.selected_intent_description,
                      url: this.url,
                      requestjson: this.show_json_request_data,
                      api_method: this.api_method,
                      end_user_message: this.end_user_message,
                      msg_type: this.enduser_msg_type,
                      responsekey: this.response_key_to_enduser,
                      api_edit: this.request_json_editable,
                      api_editable_value:
                        this.request_json_editable == "True"
                          ? this.editable_values
                          : "",
                      responsejson:
                        this.enduser_msg_type == "Through_API"
                          ? this.show_json_response_data
                          : "",
                      response_msg_editable: this.response_json_editable,
                      response_msg_editable_value:
                        this.response_json_editable == "True"
                          ? this.response_key_edit_message
                          : "",
                      request_json_key_mapping: get_method_data,
                      slot_mapping_data: post_method_data,
                      unsuccessful_msg: this.unsuccessful_message,
                      license_key: this.$session.get("UserInformation")
                        .license_key,
                      email: this.$session.get("UserInformation").email,
                      token: this.$session.get("UserInformation").tokens,
                      task_details: tasks,
                      subscription: "Platinum",
                    },
                    {
                      headers: {
                        Authorization: `Bearer ${this.$session.get("at")}`,
                      },
                    }
                  )
                  .then((response) => {
                    this.spinnerOn = false;
                    if(this.is_search_active === true){
                      this.search_intent(this.current_selected_intent_index);
                    }else{
                      this.load_intent(this.current_selected_intent_index);
                    }
                    if (response.data.message.MSG_CODE == this.api_status_code.ADD_CONFIGURING_API_URL_SUCCESS_2008_MODELS.MSG_CODE) {
                      Swal({
                        type: "Success",
                        text: this.tlt('intent_added_alert_msg'),
                        timer: 2000,
                      });
                    } else if (response.data.message.MSG_CODE == this.api_status_code.ADD_CONFIGURING_API_JSON_SUCCESS_2006_MODELS.MSG_CODE) {
                      // setTimeout(() => {
                      //   this.$router.go();
                      // }, 2500);
                      Swal({
                        type: "success",
                        text: this.tlt('added_success_alert_msg'),
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        timer: 2500,
                      }).then((result) => {
                        // this.load_intent();
                      });
                    } else if (response.data.message.MSG_CODE == this.api_status_code.INTENT_IN_DIALOG_EDITED_SUCCESSFULLY_MODELS.MSG_CODE) {
                        Swal({
                          type: "info",
                          text: this.tlt('intent_edited_alert_msg'),
                          allowOutsideClick: false,
                          allowEscapeKey: false,
                          timer: 7500,
                        }).then((result) => {
                          // this.load_intent(this.current_selected_intent_index);
                        });
                    } else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
                      Swal({
                        type: "error",
                        text: this.tlt('some_error_alert_msg'),
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        timer: 2500,
                      }).then((result) => {});
                      // this.load_intent();
                    } else if (response.data.message.MSG_CODE == this.api_status_code.ENDPOINT_LIMIT_MODELS.MSG_CODE) {
                      Swal({
                        type: "error",
                        text:
                          this.tlt('upgrade_plan_alert_msg2'),
                        timer: 2500,
                      }).then((result) => {
                        // if (result.value) {
                        //   this.$router.go();
                        // }
                      });
                      // this.load_intent();
                    } else {
                      Swal({
                        type: "error",
                        text: this.tlt('some_error_alert_msg2'),
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        timer: 2500,
                      }).then((result) => {});
                      // this.load_intent();
                    }
                  })
                  .catch((e) => {
                    if(this.is_search_active === true){
                      this.search_intent(this.current_selected_intent_index);
                    }else{
                      this.load_intent(this.current_selected_intent_index);
                    }
                    if (
                      e.response.status === 410 ||
                      e.response.status === 440 ||
                      e.response.status === 409
                    ) {
                      this.$root.$emit("Session_Expired", e.response.data);
                    }
                  });
              }
              // else if (
              //     this.request_json_editable == "False" &&
              //     this.task_input_values.length > 0
              //   )
            }
          } else {
            // toastr.error("Please enter all the required values");
            if (this.response_json_editable == null &&
                this.enduser_msg_type == "Through_API" &&
                this.response_key_to_enduser != "" &&
                this.show_json_response_data != ""){
              Swal({
                text: this.tlt('select_response_alert_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            } else {
              Swal({
                text: this.tlt('all_required_values_alert_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            }
          }
        }
      }
    },
    save_intent() {
      // event.preventDefault();
      this.add_edit = "true";
      if (this.intent_already_exists) {
        Swal({
          text: this.tlt('intent_page_name_alert_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      }
      if (this.new_intents == "") {
        Swal({
          text: this.tlt('intent_page_add_name_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      }
      if (this.add_questions_list.length > 0) {
        for (let i = 0; i < this.add_questions_list.length; i++) {
          if (
            this.add_questions_list[i] === "" ||
            this.add_questions_list[i] === null
          ) {
            Swal({
              text: this.tlt('intent_page_qs_alert_msg'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2000,
            });
            return;
          }
        }
      }
      if (this.add_edit == "true") {
        if (this.view_response_modal) {
          if (this.image_response == "Yes" && this.file_content2 == "") {
            Swal({
              text: this.tlt('intent_page_img_alert_msg'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2000,
            });
            //  console.log("csdcsdfge image");
          } else if (this.video_response == "Yes" && this.embd_link == "") {
            // toastr.error("Upload a Video link");
            Swal({
              text: this.tlt('intent_page_video_alert_msg'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2000,
            });
            //  console.log("csdcsdfge video");
          }
          for (let i = 0; i < this.multiple_response.length; i++) {
            if (this.multiple_response[i] == "") {
              Swal({
                text: this.tlt('intent_page_response_alert_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
              return;
            }
          }
          if (this.file_label2 == "Choose file") {
            // console.log("api call");
            // this.spinnerOn = true;
            // $("#intentmodel").modal("hide");
            Swal({
              text: this.tlt('intent_page_submit_details_msg'),
              type: "info",
              toast: true,
              showConfirmButton: false,
            });
            axios
              .post(
                api_calls.intent_question_response(),
                {
                  company_name: this.companyname,
                  company_id: this.companyid,
                  email: this.$session.get("UserInformation").email,
                  license_key: this.$session.get("UserInformation").license_key,
                  token: this.$session.get("UserInformation").tokens,
                  is_save: true,
                  is_response: true,
                  // intent: this.companyid + "_" + this.new_intents,
                  intent: this.new_intents,
                  subscription: "Platinum",
                  question_list: this.add_questions_list,
                  response: {
                    file_name: null,
                    video_link:
                      this.video_response == "Yes" ? this.embd_link : [],
                    source: this.source,
                    response: this.multiple_response,
                  },
                },
                {
                  headers: {
                    Authorization: `Bearer ${this.$session.get("at")}`,
                  },
                }
              )
              .then((response) => {
                // this.spinnerOn = false;
                if (response.data.message.MSG_CODE == this.api_status_code.ADDED_SUCCESSFULLY_0002_MODELS.MSG_CODE) {
                  Swal({
                    type: "success",
                    text: this.tlt('intent_page_add_success_msg'),
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    timer: 2500,
                  }).then((result) => {});
                  $("#intentmodel").modal("hide");
                  this.load_intent();
                } else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
                  Swal({
                    type: "error",
                    text:
                      this.tlt('intent_page_internal_server_msg1'),
                    timer: 2500,
                  });
                  $("#intentmodel").modal("hide");
                  this.load_intent();
                } else {
                  Swal({
                    title: response.data.message.MSG_CODE,
                    text: response.data.message.MSG,
                    showCancelButton: false,
                    showConfirmButton: false,
                    type: "error",
                    timer: 2500
                  });
                  $("#intentmodel").modal("hide");
                  this.load_intent();
                }
              })
              .catch((e) => {
                this.spinnerOn = false;
                if (
                  e.response.status === 410 ||
                  e.response.status === 440 ||
                  e.response.status === 409
                ) {
                  this.$root.$emit("Session_Expired", e.response.data);
                } else {
                  $("#intentmodel").modal("hide");
                  Swal({
                    type: "error",
                    text:
                      this.tlt('intent_page_internal_server_msg3'),
                    timer: 2500,
                  });
                  this.load_intent();
                }
              });
          } else {
            // console.log("api call with image ");
            // this.spinnerOn = true;
            // $("#intentmodel").modal("hide");
            Swal({
              text: this.tlt('intent_page_submit_details_msg'),
              type: "info",
              toast: true,
              showConfirmButton: false,
            });
            axios
              .post(
                api_calls.intent_question_response(),
                {
                  company_name: this.companyname,
                  company_id: this.companyid,
                  email: this.$session.get("UserInformation").email,
                  license_key: this.$session.get("UserInformation").license_key,
                  token: this.$session.get("UserInformation").tokens,
                  is_save: true,
                  is_response: true,
                  intent: this.new_intents,
                  question_list: this.add_questions_list,
                  subscription: "Platinum",
                  response: {
                    file_name: this.file_label2,
                    file_data: this.file_content2,
                    video_link:
                      this.video_response == "Yes" ? this.embd_link : [],
                    source: this.source,
                    response: this.multiple_response,
                  },
                },
                {
                  headers: {
                    Authorization: `Bearer ${this.$session.get("at")}`,
                  },
                }
              )
              .then((response) => {
                // this.spinnerOn = false;
                if (response.data.message.MSG_CODE == this.api_status_code.ADDED_SUCCESSFULLY_0002_MODELS.MSG_CODE) {
                  Swal({
                    type: "success",
                    text: this.tlt('intent_page_added_success_msg2'),
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    timer: 2500,
                  }).then((result) => {
                    $("#intentmodel").modal("hide");
                    this.load_intent();
                  });
                } else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
                  Swal({
                    type: "error",
                    text:
                      this.tlt('intent_page_internal_server_mag1'),
                    timer: 2500,
                  });
                  $("#intentmodel").modal("hide");
                  this.load_intent();
                } else if (response.data.message.MSG_CODE == this.api_status_code.IMG_DUPLICATE.MSG_CODE) {
                  Swal({
                    type: "error",
                    text:
                      this.tlt('intent_page_image_exist_alert_msg'),
                    timer: 2500,
                  });
                  this.load_intent();
                } else {
                  Swal({
                    title: response.data.message.MSG_CODE,
                    text: response.data.message.MSG,
                    showCancelButton: false,
                    showConfirmButton: false,
                    type: "error",
                    timer: 2500
                  });
                  $("#intentmodel").modal("hide");
                  this.load_intent();
                }
              })
              .catch((e) => {
                // this.spinnerOn = false;
                if (
                  e.response.status === 410 ||
                  e.response.status === 440 ||
                  e.response.status === 409
                ) {
                  this.$root.$emit("Session_Expired", e.response.data);
                } else {
                  $("#intentmodel").modal("hide");
                  Swal({
                    type: "error",
                    text:
                      this.tlt('intent_page_internal_server_mag3'),
                    timer: 2500,
                  });
                  this.load_intent();
                }
              });
          }
        } else if (!this.view_response_modal) {
          if (
            this.save_request_json_editable == "True" &&
            this.save_editable_values != ""
          ) {
            for (var i = 0; i < this.save_task_input_values.length; i++) {
              //  console.log(this.save_task_input_values[i]);
              if (this.save_task_input_values[i].input_text == "") {
                Swal({
                  text: this.tlt('intent_page_all_values_alert_msg'),
                  toast: true,
                  position: "top-end",
                  type: "warning",
                  showConfirmButton: false,
                  timer: 2500,
                });
                return;
              }
            }
          }
          // if (this.intent_already_exists) {
          //   toastr.error("An Intent with this name already exists.");
          // }
          if (
            this.save_url == "" ||
            this.save_api_method == null ||
            this.save_request_json_editable == null ||
            (this.save_request_json_editable == "True" &&
              this.save_editable_values == "")
          ) {
            // toastr.error("Please enter all the required values");
            if (this.save_api_method == null){
              Swal({
                text: this.tlt('intent_page_select_method_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            }else if (this.save_request_json_editable == null){
              Swal({
                text: this.tlt('intent_page_request_json_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            }else {
              Swal({
                text: this.tlt('intent_page_all_values_alert_msg1'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            }
          }
          else if (this.save_req_json() == false) {
            Swal({
              text: this.tlt('intent_page_request_json_msg1'),
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 2500,
            });
          } else {
            if (this.save_request_json_editable == "True" && !this.isEdit) {
              // var csv = this.editable_values.split(";");
              // var input_value;
              // this.task_input_values = [];
              // for (var i in csv) {
              //   let temp_list = csv[i].split(",");
              //   input_value = temp_list[temp_list.length - 1];
              //   this.task_input_values.push({
              //     key_name: input_value,
              //     input_text: "",
              //   });
              // }
            }
            if (this.save_request_json_editable == "True") {
              // let empty_vars = [];
              // for (var i in this.task_input_values) {
              //   if (this.task_input_values[i].input_text == "") {
              //     empty_vars.push(this.task_input_values[i]);
              //   }
              //   //  console.log(this.task_input_values);
              // }
              // if (empty_vars.length == 0) {
              this.finalstep = true;
              // } else {
              //   toastr.error("Please enter all the values.");
              // }
            } else {
              this.finalstep = true;
            }
          }
          if (this.finalstep == true) {
            var existing_intent_list = this.api_list.filter((api) => {
              return api.intent == this.intents;
            });
            var post_method_data, get_method_data;
            post_method_data = {};
            get_method_data = {};
            // if (this.api_method == "POST" && this.task_from == "from_entity") {
            if (this.save_api_method == "POST") {
              for (var i in this.save_task_input_values) {
                post_method_data[this.save_task_input_values[i].key_name] = {
                  from_text: true,
                  from_entity:
                    this.save_task_input_values[i].input_text != ""
                      ? true
                      : false,
                  entity: this.save_task_input_values[i].input_text,
                  // intent: this.companyid + "_" + this.new_intents,
                  intent: this.new_intents,
                  not_intent: null,
                };
                //  console.log("post method",post_method_data);
              }
              //  console.log("post method",post_method_data);
            }
            if (this.save_api_method == "GET") {
              for (var i in this.save_task_input_values) {
                get_method_data[this.save_task_input_values[i].key_name] = {
                  Entity: this.save_task_input_values[i].input_text,
                  Slot: null,
                };
                //  console.log("get method",get_method_data);
              }
            }
            if (existing_intent_list.length > 0 && !this.isEdit) {
              Swal({
                text:
                  this.tlt('intent_page_name_exist_alert_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            }
            if (this.save_enduser_msg_type == null) {
              Swal({
                text: this.tlt('intent_page_msg_type_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2500,
              });
            } else if (
              (this.save_end_user_message != "" ||
                this.save_enduser_msg_type == "Through_API") &&
              (this.save_response_json_editable != null ||
                this.save_enduser_msg_type == "Custom") &&
              this.save_enduser_msg_type != null &&
              (this.save_response_key_to_enduser != "" || 
              this.save_enduser_msg_type == "Custom")&&
              (this.save_json_response_data != "" ||
                this.save_enduser_msg_type == "Custom")
            ) {
              if (this.save_enduser_msg_type == "Through_API") {
                if (this.save_resp_json() == false) {
                  Swal({
                    text: this.tlt('intent_page_request_json_alert_msg'),
                    toast: true,
                    position: "top-end",
                    type: "warning",
                    showConfirmButton: false,
                    timer: 2000,
                  });
                  return;
                }
                if (this.save_response_key_to_enduser == "") {
                  Swal({
                    text: this.tlt('intent_page_all_values_alert_msg1'),
                    toast: true,
                    position: "top-end",
                    type: "warning",
                    showConfirmButton: false,
                    timer: 2500,
                  });
                  return;
                }
                if (this.save_response_json_editable == "True") {
                  if (this.save_response_key_edit_message == "") {
                    Swal({
                      text: this.tlt('intent_page_all_values_alert_msg2'),
                      toast: true,
                      position: "top-end",
                      type: "warning",
                      showConfirmButton: false,
                      timer: 2500,
                    });
                    return;
                  }
                }
                this.save_end_user_message = "";
                // console.log("end_user message null",this.save_end_user_message);
              }
              if (this.save_enduser_msg_type == "Custom") {
                this.save_response_key_to_enduser = "";
                this.save_response_key_edit_message = "";
                // console.log("response key to end user null",this.save_response_key_to_enduser);
              }
              if (this.save_unsuccessful_message == "") {
                Swal({
                  text: this.tlt('intent_page_all_values_alert_msg3'),
                  toast: true,
                  position: "top-end",
                  type: "warning",
                  showConfirmButton: false,
                  timer: 2500,
                });
                return;
              }
              if (
                this.$session.get("UserInformation").subscription == "Silver"
              ) {
                Swal({
                  type: "error",
                  text:
                    this.tlt('intent_page_upgrade_plan_msg'),
                  timer: 3000,
                }).then((result) => {
                  if (result.value) {
                    this.$router.go();
                  }
                });
              } else {
                this.spinnerOn = true;
                let tasks = {};
                if (
                  (this.save_request_json_editable == "True" &&
                    this.save_task_input_values.length > 0) ||
                  this.save_request_json_editable == "False"
                ) {
                  for (var i in this.save_task_input_values) {
                    var temp = [];
                    temp.push({
                      Type: "Ask",
                      Text: this.save_task_input_values[i].input_text,
                    });
                    tasks[this.save_task_input_values[i].key_name] = temp;
                  }
                  // console.log("reached here finally");
                  // console.log(this.new_intents);
                  Swal({
                    text: this.tlt('intent_page_submit_details_msg1'),
                    type: "info",
                    toast: true,
                    showConfirmButton: false,
                  });
                  axios
                    .post(
                      api_calls.intent_question_response(),
                      {
                        company_name: this.companyname,
                        company_id: this.companyid,
                        email: this.$session.get("UserInformation").email,
                        license_key: this.$session.get("UserInformation")
                          .license_key,
                        token: this.$session.get("UserInformation").tokens,
                        is_save: true,
                        is_endpoint: true,
                        // intent: this.companyid + "_" + this.new_intents,
                        intent: this.new_intents,
                        question_list: this.add_questions_list,
                        url: this.save_url,
                        requestjson: this.save_json_request_data,
                        api_method: this.save_api_method,
                        end_user_message: this.save_end_user_message,
                        msg_type: this.save_enduser_msg_type,
                        responsekey: this.save_response_key_to_enduser,
                        api_edit: this.save_request_json_editable,
                        api_editable_value:
                          this.save_request_json_editable == "True"
                            ? this.save_editable_values
                            : "",
                        responsejson:
                          this.save_enduser_msg_type == "Through_API"
                            ? this.save_json_response_data
                            : "",
                        response_msg_editable: this.save_response_json_editable,
                        response_msg_editable_value:
                          this.save_response_json_editable == "True"
                            ? this.save_response_key_edit_message
                            : "",
                        request_json_key_mapping: get_method_data,
                        slot_mapping_data: post_method_data,
                        unsuccessful_msg: this.save_unsuccessful_message,
                        license_key: this.$session.get("UserInformation")
                          .license_key,
                        email: this.$session.get("UserInformation").email,
                        token: this.$session.get("UserInformation").tokens,
                        task_details: tasks,
                        subscription: "Platinum",
                      },
                      {
                        headers: {
                          Authorization: `Bearer ${this.$session.get("at")}`,
                        },
                      }
                    )
                    .then((response) => {
                      this.spinnerOn = false;
                      if (response.data.message.MSG_CODE == this.api_status_code.ADD_CONFIGURING_API_URL_SUCCESS_2008.MSG_CODE) {
                        Swal({
                          type: "success",
                          text: this.tlt('intent_page_intent_added_msg'),
                          allowOutsideClick: false,
                          allowEscapeKey: false,
                          timer: 2500,
                        }).then((result) => {
                          $("#intentmodel").modal("hide");
                          this.load_intent();
                        });
                      } else if (
                        response.data.message.MSG_CODE ==
                        this.api_status_code.ADD_CONFIGURING_API_POST_METHOD_MODELS.MSG_CODE
                      ) {
                        Swal({
                          type: "success",
                          text:
                            this.tlt('intent_page_post_request_msg'),
                          allowOutsideClick: false,
                          allowEscapeKey: false,
                          timer: 2500,
                        }).then((result) => {
                          $("#intentmodel").modal("hide");
                          this.load_intent();
                        });
                      } else if (response.data.message.MSG_CODE == this.api_status_code.ADD_CONFIGURING_API_JSON_SUCCESS_2006_MODELS.MSG_CODE) {
                        Swal({
                          type: "success",
                          text: this.tlt('intent_page_intent_added_msg1'),
                          allowOutsideClick: false,
                          allowEscapeKey: false,
                          timer: 2500,
                        }).then((result) => {
                          this.load_intent();
                          $("#intentmodel").modal("hide");
                        });
                      } else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
                        Swal({
                          type: "error",
                          text:
                            this.tlt('intent_page_internal_server_mag4'),
                          timer: 2500,
                        });
                        this.load_intent();
                        $("#intentmodel").modal("hide");
                      } else if (response.data.message.MSG_CODE == this.api_status_code.ENDPOINT_LIMIT_MODELS.MSG_CODE) {
                        Swal({
                          type: "error",
                          text:
                            this.tlt('intent_page_upgrade_plan_msg1'),
                          timer: 2500,
                        }).then((result) => {
                          this.load_intent();
                          $("#intentmodel").modal("hide");
                        });
                      } else {
                        Swal({
                          title: response.data.message.MSG_CODE,
                          text: response.data.message.MSG,
                          showCancelButton: false,
                          showConfirmButton: false,
                          type: "error",
                          timer: 2500
                        })
                      }
                    })
                    .catch((e) => {
                      if (
                        e.response.status === 410 ||
                        e.response.status === 440 ||
                        e.response.status === 409
                      ) {
                        this.$root.$emit("Session_Expired", e.response.data);
                      }
                    });
                }
                // else if (
                //     this.save_request_json_editable == "False" &&
                //     this.save_task_input_values.length > 0
                //   )
              }
            } else {
              if (this.save_response_json_editable == null &&
                  this.save_enduser_msg_type == "Through_API" &&
                  this.save_response_key_to_enduser != "" &&
                  this.save_json_response_data != ""){
                Swal({
                  text: this.tlt('intent_page_response_json_alert_msg'),
                  toast: true,
                  position: "top-end",
                  type: "warning",
                  showConfirmButton: false,
                  timer: 2500,
                });
              }else {
                Swal({
                  text: this.tlt('intent_page_all_values_alert_msg4'),
                  toast: true,
                  position: "top-end",
                  type: "warning",
                  showConfirmButton: false,
                  timer: 2500,
                });
              }
            }
          }
        }
      }
    },
    callsearch() {
      if (event.keyCode === 13) {
        if(this.isEditIntent){
          this.verify_changes()
        }else{
          this.search_intent();
        }
      }
    },
    search_intent(current_selected_intent_index) {
      if (this.search_name != "") {
        $("input:checkbox").prop("checked", false);
        this.new_intent_list = [];
        this.checked_list = [];
        this.spinnerOn = true;
        axios
          .post(
            api_calls.intent_question_response(),
            {
              company_id: this.companyid,
              company_name: this.companyname,
              license_key: this.$session.get("UserInformation").license_key,
              email: this.$session.get("UserInformation").email,
              token: this.$session.get("UserInformation").tokens,
              subscription: "Platinum",
              is_search: true,
              search_key: this.search_name,
              per_page: this.per_page,
              page_no: 1,
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`,
              },
            }
          )
          .then((response) => {
            this.spinnerOn = false;
            if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA_MODELS.MSG_CODE) {
              Swal({
                text: this.tlt('intent_page_no_result_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2000,
              });
            } else if (
              response.data.message.MSG_CODE != this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE &&
              response.data.message.MSG_CODE != this.api_status_code.EMPTY_DATA_MODELS.MSG_CODE
            ) {
              this.intentlist = [];
              this.page_no = 1;
              if (response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE_MODELS.MSG_CODE) {
                this.number_of_rows = response.data.pagination.total_data;
                this.total_pages = response.data.pagination.total_page;
                this.intentlist = response.data.data.ResponseList;
                for (var i = 0; i < this.intentlist.length; i++) {
                  this.intentlist[i].Intent = this.intentlist[i].Intent;
                }
              if (this.intentlist.length > 0) {
                this.is_search_active = true;
                if (Boolean(current_selected_intent_index)){
                  this.show_intents(current_selected_intent_index);
                }else{
                  this.show_intents(0);
                }
              }
                this.setpagination(this.page_no);
              }
            } else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
              Swal({
                text: this.tlt('intent_page_internal_server_msg5'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2000,
              });
              this.load_intent();
            } else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              });
              this.load_intent();
            }
          })
          .catch((e) => {
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      } else {
        Swal({
          text: this.tlt('intent_page_search_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
      }
    },
    delete_selected() {
      if (this.checked_list.length == 0) {
        Swal({
          type: "warning",
          text: this.tlt('intent_page_no_intent_msg'),
          timer: 2000,
        });
      } else if (this.checked_list.length > 0) {
        this.new_intent_list = [];
        for (var i in this.checked_list) {
          this.new_intent_list.push(
            this.checked_list[i]
          );
        }
        // console.log(this.new_intent_list);
        Swal.fire({
          title: this.tlt('intent_page_swal_alert_msg'),
          text: this.tlt('intent_page_revert_alert_msg'),
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: this.tlt('intent_page_swal_alert_delete_msg'),
        }).then((result) => {
          if (result.value) {
            this.spinnerOn = true;
            axios
              .post(
                api_calls.intent_question_response(),
                {
                  intent_list: this.new_intent_list,
                  is_delete: true,
                  company_name: this.companyname,
                  company_id: this.companyid,
                  email: this.$session.get("UserInformation").email,
                  license_key: this.$session.get("UserInformation").license_key,
                  token: this.$session.get("UserInformation").tokens,
                  subscription: "Platinum",
                },
                {
                  headers: {
                    Authorization: `Bearer ${this.$session.get("at")}`,
                  },
                }
              )
              .then((response) => {
                this.new_intent_list = [];
                this.spinnerOn = false;
                if (response.data.message.MSG_CODE == this.api_status_code.INTENTS_DELETED_SUCCESS_MODELS.MSG_CODE) {
                  Swal({
                    type: "success",
                    text: this.tlt('intent_page_swal_alert_delete_msg1'),
                    timer: 2000,
                  }).then((result) => {
                    // if (result.value) {
                    // }
                    // this.checked_list = [];
                    // this.load_intent();
                  });
                  // this.load_intent();
                  if(this.checked_list.length === this.intentlist.length && 
                    this.page_no >1){
                      this.page_no = this.page_no - 1;
                  }
                }else if (response.data.message.MSG_CODE == this.api_status_code.INTENT_USED_IN_DIALOG_DELETED_SUCCESSFULLY_MODELS.MSG_CODE) {
                  Swal({
                    type: "info",
                    text: this.tlt('intent_page_swal_alert_delete_msg2'),
                    timer: 8000,
                  });
                  if(this.checked_list.length === this.intentlist.length && 
                    this.page_no >1){
                      this.page_no = this.page_no - 1;
                  }
                } else if (response.data.message.MSG_CODE == this.api_status_code.NOTHING_TO_DELETE_MODELS.MSG_CODE) {
                  Swal({
                    type: "warning",
                    text: this.tlt('intent_page_any_intent_alert_msg'),
                    timer: 2500,
                  });
                  // this.load_intent();
                } else if (
                  response.data.message.MSG_CODE ==
                  this.api_status_code.INTENT_DELETED_TRAIN_MODEL_MODELS.MSG_CODE
                ) {
                  Swal({
                    type: "info",
                    text:
                      this.tlt('intent_page_trained_imtent_msg'),
                    timer: 3000,
                  });
                  this.new_intent_list = [];
                  if(this.checked_list.length === this.intentlist.length && 
                    this.page_no >1){
                      this.page_no = this.page_no - 1;
                  }
                } else if (
                  response.data.message.MSG_CODE == this.api_status_code.TRAINED_INTENT_AND_INTENT_USED_IN_DIALOG_DELETED_SUCCESSFULLY_MODELS.MSG_CODE
                ) {
                  Swal({
                    type: "info",
                    text:
                      this.tlt('intent_page_trained_intent_msg1'),
                    timer: 10000,
                  });
                  this.new_intent_list = [];
                  if(this.checked_list.length === this.intentlist.length && 
                    this.page_no >1){
                      this.page_no = this.page_no - 1;
                  }
                } else{
                  Swal({
                    title: response.data.message.MSG_CODE,
                    text: response.data.message.MSG,
                    showCancelButton: false,
                    showConfirmButton: false,
                    type: "error",
                    timer: 2500
                  });
                  // this.load_intent();
                }
                this.checked_list = [];
                $("input:checkbox").prop("checked", false);
                this.load_intent();
              })
              .catch((e) => {
                if (
                  e.response.status === 410 ||
                  e.response.status === 440 ||
                  e.response.status === 409
                ) {
                  this.$root.$emit("Session_Expired", e.response.data);
                }
                this.load_intent();
              });
          }
        });
      }
    },
    page_require(page) {
      $("input:checkbox").prop("checked", false);
      this.new_intent_list = [];
      this.checked_list = [];
      if (page == 0 || page == this.total_pages + 1) {
      } else {
        if (this.search_name == "") {
          if (page == "...s") {
            this.page_no = Math.ceil((1 + this.page_no) / 2);
          } else if (page == "...l") {
            this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);
          } else {
            this.page_no = page;
          }
          $("input:checkbox").prop("checked", false);
          this.spinnerOn = true;
          axios
            .post(
              api_calls.intent_question_response(),
              {
                intent: this.new_intents,
                company_name: this.companyname,
                company_id: this.companyid,
                email: this.$session.get("UserInformation").email,
                license_key: this.$session.get("UserInformation").license_key,
                token: this.$session.get("UserInformation").tokens,
                subscription: "Platinum",
                is_get: true,
                page_no: this.page_no,
                per_page: this.per_page,
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`,
                },
              }
            )
            .then((response) => {
              this.spinnerOn = false;
              this.intentlist = [];
              if(response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE_MODELS.MSG_CODE){
                // for (var i in response.data[0]) {
              //   this.intentlist.push({
              //     intent: response.data[0][i].replace(this.companyid + "_", ""),
              //     email: response.data[1][i],
              //     created: response.data[2][i],
              //   });
              // }
              this.intentlist = response.data.data;
              // for (var i = 0; i < this.intentlist.length; i++) {
              //   this.intentlist[i].Intent = this.intentlist[i].Intent.replace(
              //     `${this.companyid}_`,
              //     ""
              //   );
              // }
              if (this.intentlist.length > 0) {
                this.show_intents(0);
              }
              this.setpagination(this.page_no);
              // console.log("page require is here");
            } else {
               Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error"
              })
            }
            })
            .catch((e) => {
              if (
                e.response.status === 410 ||
                e.response.status === 440 ||
                e.response.status === 409
              ) {
                this.$root.$emit("Session_Expired", e.response.data);
              }
            });
        } else {
          // if(this.search_by=='Email Address'){
          //   this.searchby='CreatedBy';
          // }
          // else{
          //   this.searchby=this.search_by;
          // }
          $("input:checkbox").prop("checked", false);
          if (page == "...s") {
            page = Math.ceil((1 + page) / 2);
          } else if (page == "...l") {
            page = Math.ceil((this.total_pages + page) / 2);
          } else {
            this.page_no = page;
          }
          this.spinnerOn = true;
          axios
            .post(
              api_calls.intent_question_response(),
              {
                company_id: this.$session.get("UserInformation").company_id,
                company_name: this.$session.get("UserInformation").company_name,
                license_key: this.$session.get("UserInformation").license_key,
                email: this.$session.get("UserInformation").email,
                token: this.$session.get("UserInformation").tokens,
                subscription: "Platinum",
                is_search: true,
                search_key: this.search_name,
                per_page: this.per_page,
                page_no: this.page_no,
              },
              {
                headers: {
                  Authorization: `Bearer ${this.$session.get("at")}`,
                },
              }
            )
          .then((response) => {
            this.spinnerOn = false;
            if (response.data.message.MSG_CODE == this.api_status_code.EMPTY_DATA_MODELS.MSG_CODE) {
              Swal({
                text: this.tlt('intent_page_no_result_alert_msg'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2000,
              });
            } else if (
              response.data.message.MSG_CODE != this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE &&
              response.data.message.MSG_CODE != this.api_status_code.EMPTY_DATA_MODELS.MSG_CODE
            ) {
              this.intentlist = [];
                this.number_of_rows = response.data.pagination.total_data;
                this.total_pages = response.data.pagination.total_page;
                this.intentlist = response.data.data.ResponseList;
                for (var i = 0; i < this.intentlist.length; i++) {
                  this.intentlist[i].Intent = this.intentlist[i].Intent;
                }
                if (this.intentlist.length > 0) {
                  this.is_search_active = true;
                  this.show_intents(0);
                }
                this.setpagination(this.page_no);
            } else if (response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE) {
              Swal({
                text: this.tlt('intent_page_internal_server_msg8'),
                toast: true,
                position: "top-end",
                type: "warning",
                showConfirmButton: false,
                timer: 2000,
              });
              this.load_intent();
            } else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                type: "error",
                timer: 2500,
              });
              this.load_intent();
            }
          })
          .catch((e) => {
            this.spinnerOn = false;
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
        }
      }
    },
    setpagination(page_no) {
      this.page_array = [];
      if (this.total_pages <= 7) {
        for (let i = 0; i < this.total_pages; i++) {
          this.page_array.push(i + 1);
        }
      } else if (page_no == 1) {
        for (let i = 0; i < 4; i++) {
          this.page_array.push(i + 1);
        }
        this.page_array.push("...l");
        this.page_array.push(this.total_pages);
      } else if (page_no == this.total_pages) {
        this.page_array.push(1);
        this.page_array.push("...s");
        for (let i = this.total_pages - 4; i < this.total_pages; i++) {
          this.page_array.push(i + 1);
        }
      } else if (page_no <= 4) {
        for (let i = 0; i < page_no + 3; i++) {
          this.page_array.push(i + 1);
        }
        this.page_array.push("...l");
        this.page_array.push(this.total_pages);
      } else if (page_no >= this.total_pages - 4) {
        this.page_array.push(1);
        this.page_array.push("...s");
        for (let i = page_no - 4; i < this.total_pages; i++) {
          this.page_array.push(i + 1);
        }
      } else {
        this.page_array.push(1);
        this.page_array.push("...s");
        for (let i = page_no - 3; i <= page_no + 3; i++) {
          this.page_array.push(i);
        }
        this.page_array.push("...l");
        this.page_array.push(this.total_pages);
      }
    },
    pagination_class(index) {
      if (index == this.page_no) {
        return " active";
      } else {
        return "";
      }
    },
    selected_intents(Intent) {
      if (Intent == "all") {
        if (event.target.checked) {
          var temp = this.intentlist;
          this.checked_list = temp;
          // console.log(this.checked_list);
          temp = [];
          // temp = this.checked_list.map((arr) => arr.Intent);
          // console.log(temp);
          // console.log()
          temp = this.checked_list.filter((item) => !(this.default_retail_intents.includes(item.Intent)))
          // console.log(this.checked_list.map((arr) => arr.Intent).filter((item) => !(this.default_retail_intents.includes(item.Intent))))
          // console.log(this.checked_list.map((arr) => arr.Intent))
          // console.log(temp);
          this.checked_list = temp.map((item)=>{return item.Intent});
          $("input:checkbox").prop("checked", false);
          for(let i = 0; i < this.checked_list.length; i++){
            $("#intent_checkbox_"+this.checked_list[i]).prop("checked", true);
            $("#selectall").prop("checked", true);
          }
        } else if (!event.target.checked) {
          this.checked_list = [];
        }
      } else {
        if (event.target.checked == true) {
          let val_index = this.checked_list.filter((intents) => {
            return intents.Intent == Intent;
          });
          if (val_index.length == 0) {
            this.checked_list.push(Intent);
          }
        } else if (event.target.checked == false) {
          var selectall = document.querySelector("#selectall");
          if (selectall.checked == true) {
            selectall.checked = false;
          }
          let temp = this.checked_list.filter((intents) => {
            return intents != Intent;
          });
          this.checked_list = temp;
        }
      }
    },
    add_to_response_list(type, index) {
      // console.log(this.selected_intent_response.length);
      if ((type == "add") && (this.multiple_response.length == 10 || this.selected_intent_response.length == 10)){
        Swal({
          text: this.tlt('ten_responses_added_alert_msg'),
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      }
      if (!this.isEditIntent) {
        if (type == "add") {
          this.multiple_response.unshift("");
        } else if (type == "remove") {
          this.multiple_response.splice(index, 1);
        }
      } else {
        if (type == "add") {
          this.selected_intent_response.unshift("");
        } else if (type == "remove") {
          this.selected_intent_response.splice(index, 1);
        }
      }
    },
    add_to_questions_list(type, index) {
      if (!this.isEditIntent) {
        if (type == "add") {
          this.add_questions_list.unshift("");
        } else if (type == "remove") {
          this.add_questions_list.splice(index, 1);
        }
      } else {
        if (type == "add") {
          this.selected_intent_questions.unshift("");
        } else if (type == "remove") {
          this.selected_intent_questions.splice(index, 1);
        }
      }
    },
    change_response_type() {
      if (this.define_api_endpoints == true) {
        this.define_api_endpoints = false;
      }
    },
    fileinput() {
      this.file_label = event.target.files[0].name;
      var file_name = this.companyname + "IntentFile.csv";
      if (this.file_label != file_name) {
        Swal({
          type: "error",
          text:
            this.tlt('intent_download_intent_files_msg'),
          timer: 3000,
        });
        this.file_label = "Choose file";
      } else {
        this.file_content = event.target.files[0];
      }
    },
    fileinput2(event) {
      let files = event.target.files[0];
      this.file_label2 = event.target.files[0].name;
      this.file_type = event.target.files[0].type;
      // console.log(files)
      // console.log(event.target.files[0])
      if (this.file_label2 != this.temp_file_name) {
        this.image_edit = true;
      }
      if (this.file_type == "image/png") {
        this.createImage(files, this.file_type);
      } else if (this.file_type == "image/jpeg") {
        this.createImage(files, this.file_type);
      } else {
        Swal({
          type: "error",
          text: this.tlt('intent_upload_files_msg'),
          timer: 2500,
        });
        this.file_label2 = "Choose file";
      }
    },
    createImage(file, type) {
      let reader = new FileReader();
      reader.onload = (e) => {
        this.file_content2 = e.target.result.split("base64,")[1];
      };
      reader.readAsDataURL(file);
    },
    fileinput3(event) {
      let files = event.target.files[0];
      this.file_label3 = event.target.files[0].name;
      this.file_type3 = event.target.files[0].type;
      // console.log(files)
      // console.log(event.target.files[0])
      if (this.file_label3 != this.temp_file_name) {
        this.image_edit = true;
      }
      if (this.file_type3 == "image/png") {
        this.createImage3(files, this.file_type);
      } else if (this.file_type3 == "image/jpeg") {
        this.createImage3(files, this.file_type);
      } else {
        Swal({
          type: "error",
          text: this.tlt('intent_upload_files_msg1'),
          timer: 2500,
        });
        this.file_label2 = "Choose file";
      }
    },
    createImage3(file, type) {
      let reader = new FileReader();
      reader.onload = (e) => {
        this.file_content3 = e.target.result.split("base64,")[1];
      };
      reader.readAsDataURL(file);
    },
    embedded_change() {
      var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
      var match = this.video_link.match(regExp);

      if (match && match[2].length == 11) {
        // console.log(match[2]);
      } else {
        return "error";
      }
      this.embd_link = "https://www.youtube.com/embed/" + match[2];
      // console.log(this.embd_link);
    },
    embedded_change_edit() {
      var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
      var match = this.selected_intent_response_video.match(regExp);

      if (match && match[2].length == 11) {
        // console.log(match[2]);
      } else {
        return "error";
      }
      this.embd_link_edit = "https://www.youtube.com/embed/" + match[2];
      // console.log(this.embd_link);
    },
    empty_variable() {
      // event.preventDefault();
      // this.response = "";
      this.multiple_response = [""];
      // this.edit_response = "";
      // this.$emit(
      //   "input",
      //    ""
      // );
      this.isEditIntent = false;
      this.save_url = "";
      this.save_api_method = null;
      this.save_json_request_data = "";
      this.save_request_json_editable = null;
      this.save_editable_values = "";
      this.save_task_input_values = [];
      this.save_enduser_msg_type = "Custom";
      this.save_json_response_data = "";
      this.save_response_key_to_enduser = "";
      this.save_end_user_message = "";
      this.save_response_json_editable = null;
      this.save_response_key_edit_message = "";
      this.save_unsuccessful_message = "";

      this.source = "Web";
      this.intents = this.intentlist[0];
      this.new_intents = "";
      this.add_questions_list = [""];

      this.file_label = "Choose file";
      this.image_url = "";
      this.image_response = "No";
      this.video_response = "No";
      (this.video_link = ""), (this.embd_link = "");
      this.file_label2 = "Choose file";
      this.file_label3 = "Choose file";
      this.file_content = "";
      document.getElementById("enter_intent_id").style.border = "";
      document.getElementById("inputGroupFileAddon01").value = "";
      document.getElementById("inputGroupFileAddon02").value = "";
      document.getElementById("radioBtnn").checked = false;
      this.uncheck();
      this.intent_already_exists = false;
      this.intent_already_exists_edit = false;
      // this.current_selected_intent_highlight ="";
    },
    json_request_class() {
      try {
        JSON.parse(this.json_request_data[this.index]);
      } catch (e) {
        return "is-invalid";
      }
      return "is-valid";
    },
    json_response_class() {
      try {
        JSON.parse(this.json_response_data[this.index]);
      } catch (e) {
        return "is-invalid";
      }
      return "is-valid";
    },
    edit_intent_details() {
      // if (this.default_retail_intents.includes(this.current_selected_intent)) {
      //   Swal({
      //     title: "Oops",
      //     text: "This is a Default Intent! It cannot be edited",
      //     type: "warning",
      //     timer: 2000,
      //   });
      //   return false;
      // }
      if (!this.isEditIntent) {
        this.isEditIntent = true;
      } else {
        this.isEditIntent = false;
        // this.load_intent();
      }
      return;
    },
    show_block(value) {
      if (value == "up") {
        this.show_or_block = false;
      } else if (value == "down") {
        this.show_or_block = true;
      }
    },
    file_submit() {
      event.preventDefault();
      if ($("#inputGroupFilecsv").val() == '') {
        Swal.fire({
          title: this.tlt('intent_input_field_msg'),
          text: this.tlt('intent_upload_csv_files_msg'),
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
      }
      var user_details = {
        email: this.$session.get("UserInformation").email,
        token: this.$session.get("UserInformation").tokens,
        company_name: this.companyname,
        company_id: this.companyid,
        license_key: this.$session.get("UserInformation").license_key,
        is_form_intents: false,
      };
      var json = JSON.stringify(user_details);
      var blob = new Blob([json], {
        type: "application/json",
      });
      if (this.file_label_csv == "Choose file") {
      } else {
        const fd = new FormData();
        fd.append(
          "file",
          this.file_content_csv,
          this.companyname + "IntentFile.csv"
        );
        fd.append("json", blob);
        $("#file_upload").modal("hide");
        this.spinnerOn = true;
        axios
          .post(api_calls.upload_file_url(), fd, {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          })
          .then((response) => {
            this.spinnerOn = false;
            if (response.data.message.MSG_CODE == this.api_status_code.FILE_UPLOAD_MODELS.MSG_CODE) {
              Swal({
                title: this.tlt('intent_upload_files_success_msg'),
                type: "success",
                showConfirmButton: false,
                timer: 2000,
              });
            } else if (response.data.message.MSG_CODE == this.api_status_code.INCORRECT_FILE_FORMAT_MODELS.MSG_CODE) {
            //   Swal({
            //     title: this.tlt('intent_incorrect_file_alert_msg'),
            //     type: "warning",
            //     text:
            // tlt('sample_intent_file_msg'),
            //     // timer: 4000,
            //   });
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "warning",
                timer: 2500
              });
            } else if (response.data.message.MSG_CODE == this.api_status_code.INVALID_FILE_TYPE_MODELS.MSG_CODE) {
              Swal({
                title: this.tlt('intent_file_type_alert_msg'),
                type: "warning",
                text:
            this.tlt('intent_download_files_msg'),
                // timer: 4000,
              });
            } else if(response.data.message.MSG_CODE == this.api_status_code.INTERNAL_SERVER_ERROR_MODELS.MSG_CODE){
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error",
                timer: 2500
              })
            }
            else {
              Swal({
                title: response.data.message.MSG_CODE,
                text: response.data.message.MSG,
                showCancelButton: false,
                showConfirmButton: false,
                type: "warning",
                timer: 2500
              });
            }
            this.file_label_csv = "Choose file";
            document.getElementById("inputGroupFilecsv").value = "";
            this.load_intent();
          })
          .catch((e) => {
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          });
      }
    },
    download_sample_file() {
      event.preventDefault();
      this.spinnerOnFileDownload = true;
      axios({
        method: "post",
        url: api_calls.file_download(),
        responseType: "blob",
        data: {
          sample_file: "intent",
          company_id: this.$session.get("UserInformation").company_id,
          company_name: this.$session.get("UserInformation").company_name,
          license_key: this.$session.get("UserInformation").license_key,
          token: this.$session.get("UserInformation").tokens,
          email: this.$session.get("UserInformation").email,
        },
        headers: {
          Authorization: `Bearer ${this.$session.get("at")}`,
        },
      })
        .then((response) => {
          $("#file_upload").modal("hide");
          this.spinnerOnFileDownload = false;
          if (response.data.message === "Not able to download file") {
            Swal({
              title: this.tlt('intent_some_error_occur_msg'),
              type: "error",
              timer: 2500,
            });
          } else {
            var url = window.URL.createObjectURL(new Blob([response.data]));
            var link = document.createElement("a");
            link.href = url;
            // console.log(this.companyname)
            link.setAttribute("download", this.companyname + "IntentFile.csv");
            document.body.appendChild(link);
            link.click();
          }
        })
        .catch((e) => {
          $("#file_upload").modal("hide");
          this.spinnerOnFileDownload = false;
          Swal({
            title: this.tlt('intent_some_error_occur_msg1'),
            type: "error",
            timer: 2500,
          });
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    fileinput_csv() {
      this.file_label_csv = event.target.files[0].name;
      // var file_name = this.companyname + "IntentFile.csv";
      this.file_content_csv = event.target.files[0];
      // if (this.file_label_csv != file_name) {
      //   Swal({
      //     type: "info",
      //     text:
      //       "Users need to download the Sample Intent CSV File from 'Upload CSV File' model. Changes to this file will be accepted by the system.",
      //     timer: 10000,
      //   });
      //   this.file_label_csv = "Choose file";
      //   document.getElementById("inputGroupFilecsv").value = "";
      // } else {
      //   this.file_content_csv = event.target.files[0];
      // }
    },
    download_csv() {
      axios
        .post(
          api_calls.question_intent_csv(),
          {
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            is_form_intents: false,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          if(response.data.message.MSG_CODE == this.api_status_code.DATA_AVAILABLE.MSG_CODE){
            var a = window.document.createElement("a");
            a.href = response.data.data.CSV_URL;
            a.download = true;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
          }
          else {
            Swal({
              title: response.data.message.MSG_CODE,
              text: response.data.message.MSG,
              showCancelButton: false,
              showConfirmButton: false,
              type: "error",
              timer: 3000
            })
          }
        })
        .catch((e) => {
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    upload_file_open_modal(){
      if(!this.disable_btn_expired){
        $("#file_upload").modal('show')
      } else {
        this.show_subscription_expired_swal();
      }
    },
  },
};
"},null]}