{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NewIntentPage.vue?vue&type=template&id=294d3e23&scoped=true&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/NewIntentPage.vue","mtime":1663910265466},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
  <div>
    <div class="dash-cont">
      <div class="spinner" id="spinner" v-show="spinnerOn"></div>
      <div class="container-fluid">
        <div class="card dash-card">
          <div
            class="card-header d-block d-sm-flex flex-wrap justify-content-between"
          >
            <h4 class="mb-sm-0">{{tlt('intent_page_title')}}</h4>
            <div class="card-act d-flex flex-wrap">
              <!-- for search -harsh -->
              <input
                class="form-control search-bar"
                id="search_bar"
                :placeholder="tlt('search_here')"
                v-model.trim="search_name"
                v-on:keyup="callsearch"
              />
              <a
                type="button"
                v-if="isVisibleSearchClear"
                class="btn bg-transparent mt-auto mb-auto py-0"
                @click="clear_search_name"
                style="margin-left: -40px; z-index: 10"
              >
                <img src="/img/close-icn.png" alt />
              </a>
              <a
                href="javascript:void(0)"
                class="darkblue-btn"
                @click="isEditIntent ? verify_changes() : search_intent()"
                id="search_btn"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  width="14"
                  height="14"
                >
                  <path
                    d="M13.809011327100071,12.965505435601472 L9.30910012117823,8.49330664854199 C10.007392079586584,7.596111589605521 10.38512817619458,6.499157170138106 10.38512817619458,5.345374656726532 c0,-1.3810948891881802 -0.5423458634784514,-2.676086605733705 -1.523073527148749,-3.6524965835014083 c-0.9807276636702976,-0.9764099777677033 -2.287209392305289,-1.5136937750578685 -3.6751296371814526,-1.5136937750578685 s-2.6944019735111544,0.5390058607430178 -3.6751296371814526,1.5136937750578685 C0.5293349766245179,2.667565987539975 -0.011278152465820316,3.9642797675383576 -0.011278152465820316,5.345374656726532 c0,1.3793728257353273 0.5423458634784514,2.6778086691865575 1.523073527148749,3.6524965835014083 C2.492523038353222,9.974281217995648 3.7972720326001044,10.51156501528581 5.18692501186438,10.51156501528581 c1.160932040033745,0 2.2629511108717475,-0.37540983272197437 3.165705727077092,-1.0676793407689171 l4.499911205921844,4.470476723606628 a0.1420842198250257,0.14120920313395363 0 0 0 0.20099718902076805,0 l0.7554721932159904,-0.7490976019910955 a0.1420842198250257,0.14120920313395363 0 0 0 0,-0.19975936053095905 zM7.931576282630728,8.073123166045836 C7.196896902072058,8.80155600660269 6.2231001759542055,9.20279679111746 5.18692501186438,9.20279679111746 s-2.0099718902076775,-0.4012407845147706 -2.744651270766347,-1.1296736250716286 C1.709327094927478,7.342968262036121 1.3055999824978375,6.37516860153268 1.3055999824978375,5.345374656726532 s0.4037271124296458,-1.99931566876244 1.1366737586002036,-2.727748509319298 C3.1769531216567026,1.8891933068503817 4.150749847774562,1.4879525223356067 5.18692501186438,1.4879525223356067 s2.0117046245957884,0.3995187210619175 2.744651270766347,1.1296736250716286 S9.06825004123093,4.315580711920385 9.06825004123093,5.345374656726532 s-0.4037271124296458,1.99931566876244 -1.1366737586002036,2.727748509319298 z"
                    fill="#fff"
                  />
                </svg>
              </a>
              <a
                href="#"
                class="darkblue-btn"
                :class="intent_core_model_inprogress === true ? 'disabled_btn' : ''"
                id="add_intent_btn"
                title="Add new Intent"
                @click="add_variant_open_modal()"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="13.997"
                  viewBox="0 0 14 13.997"
                >
                  <path
                    id="Union_13"
                    data-name="Union 13"
                    d="M-12684,2058v-5h-5a1,1,0,0,1-1-1,1,1,0,0,1,1-1h5v-5a1,1,0,0,1,1-1,1,1,0,0,1,1,1v5h5a1,1,0,0,1,1,1,1,1,0,0,1-1,1h-5v5a1,1,0,0,1-1,1A1,1,0,0,1-12684,2058Z"
                    transform="translate(12690.001 -2045.002)"
                    fill="#fff"
                  />
                </svg>
                {{tlt('intent_page_add_intent_btn')}}
              </a>
              <a
                href="#"
                class="darkblue-btn"
                 :class="intent_core_model_inprogress === true ? 'disabled_btn' : ''"
                title="Upload File"
                data-toggle="modal"
                @click="upload_file_open_modal"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 14 13.997"
                >
                  <path
                    d="M8.6939946595428,-0.014074647685589529 H1.8307534193786577 a1.7158103100410358,1.38733287383954 0 0 0 -1.7158103100410358,1.38733287383954 v11.09866299071632 a1.7158103100410358,1.38733287383954 0 0 0 1.7158103100410358,1.38733287383954 h10.294861860246215 a1.7158103100410358,1.38733287383954 0 0 0 1.7158103100410358,-1.38733287383954 V4.147923973833031 l-5.147430930123107,-4.16199862151862 zm-0.42895257751025956,9.71133011687678 v2.08099931075931 h-2.5737154650615537 v-2.08099931075931 H3.5465637294196934 l3.4316206200820716,-2.77466574767908 l3.4316206200820716,2.77466574767908 h-2.1447628875512947 zM7.836089504522283,4.841590410752801 V1.0264250076940657 L12.554567857135131,4.841590410752801 H7.836089504522283 z"
                    id="svg_1"
                    class
                    fill="#fff"
                  />
                </svg>
              </a>
              <a
                href="#"
                class="darkblue-btn"
                @click="download_csv"
                title="Download CSV File"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  width="14"
                  height="14"
                >
                  <path
                    d="M8.124046569796448,3.7048888423811563 V-0.0004725085692590319 H0.8684480275323758 C0.385950724471816,-0.0004725085692590319 -0.0022237975393094665,0.29105224477757613 -0.0022237975393094665,0.6534147886572829 v12.641821079713173 c0,0.3623625438797103 0.3881745220111289,0.6538872972265442 0.8706718250716886,0.6538872972265442 h12.18940555100364 c0.4824973030605619,0 0.8706718250716886,-0.2915247533468346 0.8706718250716886,-0.6538872972265442 V4.358776139607697 H8.994718394868137 c-0.47886950378942883,0 -0.8706718250716886,-0.2942492837519449 -0.8706718250716886,-0.6538872972265442 zm2.773452542780442,5.758567464241761 l-3.497924057225508,2.6073755976908415 c-0.24124865153028063,0.18009145977781071 -0.6308742932498614,0.18009145977781071 -0.872122944780142,0 l-3.497924057225508,-2.6073755976908415 C2.661306427325829,9.189096094828278 2.9196057354304337,8.718024787784655 3.437655471348084,8.718024787784655 H5.802255036271947 v-2.1796243240884783 c0,-0.24084848781177734 0.2597504278130543,-0.4359248648176966 0.5804478833811269,-0.4359248648176966 h1.1608957667622521 c0.3206974555680725,0 0.5804478833811269,0.1950763770059196 0.5804478833811269,0.4359248648176966 v2.1796243240884783 h2.3645995649238625 c0.5180497359176551,0 0.7763490440222554,0.47107130704362293 0.4088529778565816,0.7454315188382611 zM13.674579454628462,2.86028441679687 L10.122963968190199,0.1902446197884852 c-0.16325096720094195,-0.12260386822997718 -0.38454672273999646,-0.1907171283577423 -0.6167258760924463,-0.1907171283577423 H9.284942336558702 v3.4873989185415644 h4.643583067049007 v-0.16619635471174685 c0,-0.1716454155219681 -0.09069498177830096,-0.33784177023371487 -0.2539459489792431,-0.46044563846369135 z"
                    fill="#fff"
                  />
                </svg>
              </a>
              <button id="train_model_btn" class="darkblue-btn"
               @click="isEditIntent ? verify_changes() : train_model()"
               :disabled="intent_core_model_inprogress == true"
               :style="show_model_progress('style')"
               :title="show_model_progress('title')">
               <i class="fa fa-spinner fa-spin" v-show="intent_core_model_inprogress"></i>
                {{tlt('intent_page_train_model_btn')}}
              </button>
              <a
                href="javascript:void(0)"
                class="red-btn"
                :class="intent_core_model_inprogress === true ? 'disabled_btn' : ''"
                @click="delete_selected"
                id="delete_intent"       
              >
              
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 14 14"
                >
                  <path
                    d="M8.375,3v.778H4V5.333h.875V15.444A1.661,1.661,0,0,0,6.625,17h8.75a1.661,1.661,0,0,0,1.75-1.556V5.333H18V3.778H13.625V3H8.375M6.625,5.333h8.75V15.444H6.625V5.333m1.75,1.556v7h1.75v-7H8.375m3.5,0v7h1.75v-7Z"
                    transform="translate(-4 -3)"
                    fill="#fff"
                  />
                </svg>
                {{tlt('intent_page_delete_btn')}}
              </a>
            </div>
          </div>
          <div class="card-body" id="page">
            <div class="col-sm-12 d-flex px-0" v-show="intentlist.length > 0">
              <div class="col-sm-4 pl-0" v-show="intentlist.length > 0">
                <div class="table-box">
                  <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th scope="col">
                            <div class="form-check checkbox checkbox-success">
                              <label class="form-check-label" :style="chk_cbx_crsr('all')">
                                <input
                                  class="form-check-input"
                                  id="selectall"
                                  type="checkbox"
                                  @change="selected_intents('all')"
                                  :disabled="check_select_all_intents_cbx_disabled"
                                />
                                <span class="icn" v-if="check_select_all_intents_cbx_disabled" style="background:#bbb; border:solid 1px #e5e5e5;"></span>
                                <span class="icn" v-else></span>
                              </label>
                            </div>
                          </th>
                          <th scope="col" class="text-left">{{tlt('intent_table_header')}}</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr
                          v-for="(intents, index) in intentlist"
                          :key="index"
                          :class="check_current_intent(index)"
                        >
                          <th scope="col">
                            <div class="form-check checkbox-success">
                              <label
                                class="form-check-label checkbox checkbox-success" :style="chk_cbx_crsr(intents.Intent)"
                              >
                                <input
                                  class="form-check-input"
                                  type="checkbox"
                                  :id="'intent_checkbox_'+intents.Intent"
                                  @change="selected_intents(intents.Intent)"
                                  :disabled="
                                    default_retail_intents.includes(
                                      intents.Intent
                                    )
                                  "
                                />
                                <span class="icn" v-if="default_retail_intents.includes(intents.Intent)" style="background:#bbb; border:solid 1px #e5e5e5;"></span>
                                <span class="icn" v-else></span>
                              </label>
                            </div>
                          </th>
                          <td
                            style="cursor: pointer"
                            @click="isEditIntent ? verify_changes() : show_intents(index)"
                            :title="intents.Intent"
                          >
                            <template>
                              <p style="margin-bottom: 0">
                                {{ intents.Intent }}
                              </p>
                            </template>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
              <div class="col-sm-8 pr-0" id="edit-intent-box" v-show="intentlist.length > 0">
                <div style="border: 1px solid #dbe2e8">
                  <div class="col-sm-12">
                    <div style="color: #414141" class="d-flex">
                      <h5><p class="mt-2 mb-0">{{tlt('intent_page_detail_header')}}</p></h5>
                      <span
                        @click="edit_intent_details"
                        v-html="pencil_svg"
                        class="ml-auto mr-2 mt-2"
                        id="edit-intent-cursor"
                        style="cursor: pointer"
                      ></span>
                    </div>
                  </div>
                  <hr />
                  <!-- <EDIT INTENT/SHOW INTENT> -->
                  <div class="col-sm-12" style="margin-bottom: 1rem">
                    <h5>
                      <p class="mt-2 mb-0" style="color: #414141">
                        {{tlt('intent_page_name_label')}} 
                      </p>
                    </h5>
                    <h6 class="pl-1" style="font-weight: 400;" v-if="isEditIntent">{{tlt('intent_page_name_desc_label')}}</h6>
                    <div v-if="!isEditIntent" style="padding-left: 20px">
                      <p>{{ current_selected_intent }}</p>
                      <!-- <span v-html="current_intent_response"></span> -->
                    </div>
                    <template v-else-if="isEditIntent">
                      <input
                        align="right"
                        class="form-control edit"
                        autocomplete="off"
                        :placeholder="tlt('enter_intent')"
                        id="enter_intent_id_edit"
                        v-on:keyup="enterintentid_edit"
                        v-model="current_selected_intent"
                        @keydown="intent_name_check_special_characters($event)"
                        :disabled="(default_retail_intents.includes(current_selected_intent))   && (current_selected_intent === current_selected_intent_highlight) "
                      />
                      <span
                        v-show="intent_already_exists_edit"
                        style="color: red"
                        >{{tlt('intent_page_name_exist_condition')}}.</span>
                    </template>
                    <div v-if="selected_intent_description">
                      <h5>
                        <p class="mt-2 mb-0" style="color: #414141">
                          {{tlt('intent_page_description_label')}}
                        </p>
                      </h5>
                      <div v-if="!isEditIntent" style="padding-left: 20px">
                        <p>{{ selected_intent_description }}</p>
                      </div>
                      <template v-else>
                        <input
                          align="right"
                          class="form-control edit"
                          :placeholder="tlt('add_desc')"
                          id="enter_intent_description_id_edit"
                          v-model="selected_intent_description"
                        />
                      </template>
                    </div>
                  </div>
                  <hr />
                  <div class="col-sm-12 p-0" style="padding-left:15px !important;">
                    <h5>
                      <p class="mt-2 mb-0" style="color: #414141">{{tlt('intent_page_question_label')}}</p>
                    </h5>
                    <!-- <p class="">{{ current_selected_intent }}</p> -->
                    <template v-if="!isEditIntent">
                      <div class="ScrollStyle" style="padding-right:8px !important">
                        <div
                          v-for="(
                            new_question, index
                          ) in new_intent_question_list"
                          :key="index"
                        >
                          <li
                            style="
                              padding-left: 0rem;
                              list-style-position: inside;
                            "
                          >
                            {{ new_intent_question_list[index] }}
                          </li>
                          <!-- <p>{{ selected_intent_questions }}</p> -->
                        </div>
                      </div>
                    </template>

                    <template v-else>
                      <div style="display: block; margin-bottom: 1rem">
                        <label style="float: left !important;margin-top: 5px !important;"
                        >{{tlt('intent_page_question_desc_label')}}</label
                        >
                        <div class="dash-modal card-act"
                          style="text-align: end !important;
                            margin-top: -10px !important;
                            margin-bottom: 6px !important;">
                          <div class="btn-wrap mt-0 py-0 border-top-0" style="padding-right: 15px;">
                            <button
                              id="add_question_button"
                              class="darkblue-btn"
                              style="padding: 5px 10px;"
                              @click="add_to_questions_list('add')"
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="14"
                                height="13.997"
                                viewBox="0 0 14 13.997"
                              >
                                <path
                                  id="Union_13"
                                  data-name="Union 13"
                                  d="M-12684,2058v-5h-5a1,1,0,0,1-1-1,1,1,0,0,1,1-1h5v-5a1,1,0,0,1,1-1,1,1,0,0,1,1,1v5h5a1,1,0,0,1,1,1,1,1,0,0,1-1,1h-5v5a1,1,0,0,1-1,1A1,1,0,0,1-12684,2058Z"
                                  transform="translate(12690.001 -2045.002)"
                                  fill="#fff"
                                />
                              </svg>
                            </button>
                            <button
                              type="submit"
                              class="darkblue-btn"
                              id="res_n_int_save"
                              @click="edit_intent()"
                            >
                              {{tlt('save_btn')}}
                            </button>
                          </div>
                        </div>
                        <div class="ScrollStyle" style="padding-right:8px !important">
                          <div
                            v-for="(
                              new_question, index
                            ) in selected_intent_questions"
                            :key="index"
                            class="form-group"
                            style="display:flex;"
                          >
                            <input
                              type="text"
                              v-model.trim="selected_intent_questions[index]"
                              class="form-control edit"
                              :placeholder="tlt('enter_question')"
                              :id="`enter_question_id_${index}`"
                            />
                            <span
                              v-if="selected_intent_questions.length > 1"
                              style="cursor: pointer"
                              class="my-auto ml-2 mr-0"
                              @click="add_to_questions_list('remove', index)"
                            >
                              <i style="font-size: 16px" class="fa">&#xf00d;</i>
                            </span>
                          </div>
                        </div>
                      </div>
                    </template>
                    <hr v-show="!default_retail_intents.includes(this.current_selected_intent)">
                  </div>
                  <div v-show="is_response || is_endpoint">
                    <div v-show="!isEditIntent">
                      <div class="col-sm-12" v-show="is_response">
                        <h5>
                          <p class="mt-2 mb-0" style="color: #414141">{{tlt('intent_page_save_resp_label')}}</p>
                        </h5>
                        <!-- <div class="row">
                            <div class="col-md-3">Response :</div>
                            <div class="col-md-9">
                              <span v-html="selected_intent_response"></span>
                            </div>
                          </div> -->

                        <strong> {{tlt('intent_page_save_responses_label')}} </strong>:
                        <div>
                          <div class="ScrollStyle" style="padding-right:8px !important">
                            <!-- <span v-html="selected_intent_response"></span> -->
                            <div
                              v-for="(
                                new_response, index
                              ) in selected_intent_response"
                              :key="index"
                              style="display: flex;"
                            >
                              <p>{{index+1}}. </p>
                              <li
                                style="
                                padding-left: 0.5rem;
                                list-style-position: inside;
                                list-style-type: none;
                                "
                                v-html="selected_intent_response[index]"
                              >
                                <!-- {{ selected_intent_response[index] }} -->
                              </li>
                            </div>
                          </div>
                        </div>

                        <p style="margin-top: 16px">
                          <strong> {{tlt('intent_page_source_label')}} </strong>:
                          {{ selected_intent_response_source }}
                        </p>
                        <!-- <br /> -->
                        <p v-if="file_label3 == 'Choose file'">
                          <strong>{{tlt('intent_page_img_url_label')}}</strong> : None
                        </p>
                        <p v-else>
                          <strong>{{tlt('intent_page_img_url_label')}}</strong> : {{ file_label3 }}
                        </p>
                        <!-- <br /> -->
                        <p
                          v-if="
                            selected_intent_response_video == '' ||
                            selected_intent_response_video == []
                          "
                        >
                          <strong>{{tlt('intent_page_video_url_label')}}</strong> : None
                        </p>
                        <div v-else>
                          <strong>{{tlt('intent_page_video_url_label')}}</strong> :{{
                            selected_intent_response_video
                          }}
                        </div>
                      </div>
                      <div class="col-sm-12" v-show="is_endpoint">
                        <h5>
                          <p class="mt-2 mb-0" style="color: #414141">
                            API Endpoints
                          </p>
                        </h5>
                        <p><strong>URL</strong> : {{ url }}</p>
                        <p><strong>API Method</strong> : {{ api_method }}</p>
                        <p>
                          <strong>Request JSON</strong> :
                          {{ show_json_request_data }}
                        </p>
                        <div v-if="editable_values != ''">
                          <strong>Request JSON Parameters</strong> :
                          {{ editable_values }}

                          <div v-if="task_input_values == ''"></div>
                          <div v-else>
                            <strong>Task Input Values</strong> :
                            <table class="table" style="border: 1px solid black">
                              <thead>
                                <tr style="border: 1px">
                                  <td
                                    scope="col"
                                    style="
                                      width: 150px;
                                      text-align: center;
                                      border: 1px solid black;
                                    "
                                  >
                                    Input Value
                                  </td>
                                  <td
                                    v-show="api_method == 'POST'"
                                    scope="col"
                                    style="
                                      text-align: center;
                                      border: 1px solid black;
                                    "
                                  >
                                    Question to be asked by the chatbot
                                  </td>
                                  <td
                                    v-show="api_method == 'GET'"
                                    scope="col"
                                    style="
                                      text-align: center;
                                      border: 1px solid black;
                                    "
                                  >
                                    Selected tags
                                  </td>
                                </tr>
                              </thead>
                              <tbody>
                                <tr
                                  v-for="(row, index) in utterances"
                                  :key="index"
                                  id="list-group"
                                  style="border: 1px"
                                >
                                  <td
                                    scope="row"
                                    style="
                                      text-align: center;
                                      border: 1px solid black;
                                    "
                                  >
                                    {{ row.RawSlotName }}
                                  </td>
                                  <td
                                    style="
                                      text-align: center;
                                      border: 1px solid black;
                                    "
                                  >
                                    {{ row.Text }}
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </div>
                        </div>
                        <div v-if="response_json_editable != ''">
                          <p>
                            <strong>Response Json Editable</strong> :
                            {{ response_json_editable }}
                          </p>
                        </div>
                        <div v-if="enduser_msg_type != null">
                          <p>
                            <strong>End User Message Type</strong> :
                            {{ enduser_msg_type }}
                          </p>
                        </div>
                        <div v-if="show_json_response_data != ''">
                          <p>
                            <strong>Response JSON</strong> :
                            {{ show_json_response_data }}
                          </p>
                        </div>
                        <div v-if="response_key_to_enduser != ''">
                          <p>
                            <strong
                              >Response JSON parameter sent to end user</strong
                            >
                            :
                            {{ response_key_to_enduser }}
                          </p>
                        </div>
                        <div v-if="response_key_edit_message != ''">
                          <p>
                            <strong>Message With Response JSON Parameter</strong>
                            : {{ response_key_edit_message }}
                          </p>
                        </div>
                        <div v-if="end_user_message != ''">
                          <p>
                            <strong>End User Message</strong> :
                            {{ end_user_message }}
                          </p>
                        </div>
                        <div v-if="unsuccessful_message != ''">
                          <p>
                            <strong>Message to user upon failure</strong> :
                            {{ unsuccessful_message }}
                          </p>
                        </div>
                      </div>
                    </div>
                    <div class="col-sm-12" v-show="isEditIntent && (!default_retail_intents.includes(this.current_selected_intent) || (this.current_selected_intent === 'shipping' || 'messaging_platform' || 'contact_us'))">
                      <div class="modal-head d-flex align-items-center">
                        <!-- <div style="width: 30%"> -->
                        <div v-show="is_response" style="width: 30%">
                          <h5>
                            <p class="mt-2 mb-0" style="color: #414141">
                              {{tlt('intent_page_edit_resp_label')}}
                            </p>
                          </h5>
                        </div>
                        <div v-show="!is_response" style="width: 30%">
                          <h5>
                            <p class="mt-2 mb-0" style="color: #414141">
                              API Endpoint
                            </p>
                          </h5>
                        </div>
                        <!-- </div> -->
                        <!-- <div class="radio" style="margin-left: 40%">
                        <label>
                          <input
                            type="radio"
                            id="radioBtn"
                            @click="editswitching(this)"
                          />
                          <span class="icn"></span>
                          Define Endpoints Here</label
                        >
                      </div> -->
                      </div>
                      <hr />
                      <div v-show="is_response">
                        <div class="form-group">
                          <div class="d-flex">
                            <p>{{tlt('intent_page_edit_resp_with_image')}}:</p>
                            <div class="ml-2">
                              <center>
                                <div class="radio" style="margin-bottom: 3%">
                                  <label>
                                    <input
                                      type="radio"
                                      v-model="edit_image_response"
                                      value="Yes"
                                    />
                                    <span class="icn"></span> {{tlt('intent_edit_img_yes')}}
                                  </label>
                                  <label>
                                    <input
                                      type="radio"
                                      v-model="edit_image_response"
                                      value="No"
                                    />
                                    <span class="icn"></span> {{tlt('intent_edit_img_no')}}
                                  </label>
                                </div>
                              </center>
                            </div>
                          </div>

                          <div
                            class="custom-file"
                            v-show="edit_image_response == 'Yes'"
                          >
                            <input
                              type="file"
                              accept="image/x-png, image/gif, image/jpeg"
                              class="custom-file-input"
                              @change="fileinput3"
                              id="inputGroupFileAddon01"
                            />
                            <label
                              style="font-weight: 400; line-height: 15px"
                              class="custom-file-label form-control edit"
                              for="file"
                              >{{ file_label3 }}</label
                            >
                          </div>
                        </div>
                        <div class="form-group">
                          <div class="d-flex">
                            <p>{{tlt('intent_page_edit_resp_with_video')}}:</p>
                            <div class="ml-2">
                              <center>
                                <div class="radio" style="margin-bottom: 3%">
                                  <label>
                                    <input
                                      type="radio"
                                      id="res_video_type"
                                      v-model="edit_video_response"
                                      value="Yes"
                                    />
                                    <span class="icn" id="res_video_icn"></span>
                                    {{tlt('intent_page_edit_video_yes_option')}}
                                  </label>
                                  <label>
                                    <input
                                      type="radio"
                                      v-model="edit_video_response"
                                      value="No"
                                    />
                                    <span class="icn"></span> {{tlt('intent_edit_video_no')}}
                                  </label>
                                </div>
                              </center>
                            </div>
                          </div>
                          <div
                            v-show="edit_video_response == 'Yes'"
                            style="margin-bottom: 5%"
                          >
                            <input
                              id="res_video_url"
                              type="url"
                              class="form-control edit"
                              :placeholder="tlt('enter_url')"
                              v-model="selected_intent_response_video"
                              @change="embedded_change_edit"
                            />
                          </div>
                        </div>
                        <div style="display: block; margin-bottom: 1rem">
                            <label style="float: left !important;margin-top: 5px !important;"
                              >{{tlt('intent_page_edit_resp_user_by_bot_text')}}</label
                            >
                            <div class="dash-modal card-act" 
                              style="text-align: end !important; 
                                margin-top: -10px !important;
                                margin-bottom: 6px !important;">
                              <div class="btn-wrap mt-0 py-0 border-top-0">
                                <button
                                  id="add_question_button"
                                  class="darkblue-btn"
                                  style="padding: 5px 10px;"
                                  @click="add_to_response_list('add')"
                                >
                                  <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="14"
                                    height="13.997"
                                    viewBox="0 0 14 13.997"
                                  >
                                    <path
                                      id="Union_13"
                                      data-name="Union 13"
                                      d="M-12684,2058v-5h-5a1,1,0,0,1-1-1,1,1,0,0,1,1-1h5v-5a1,1,0,0,1,1-1,1,1,0,0,1,1,1v5h5a1,1,0,0,1,1,1,1,1,0,0,1-1,1h-5v5a1,1,0,0,1-1,1A1,1,0,0,1-12684,2058Z"
                                      transform="translate(12690.001 -2045.002)"
                                      fill="#fff"
                                    />
                                  </svg>
                                </button>
                                <button
                                  type="submit"
                                  class="darkblue-btn"
                                  id="res_n_int_save"
                                  @click="edit_intent()"
                                >
                                 {{tlt('save_btn')}}
                                </button>
                              </div>
                            </div>
                            <div class="mt-2 mb-2" style="color: #df7474;"> 
                               <span>* html content/tags are not supported on whatsapp and messenger bot.</span>
                            </div>
                          <div
                            v-for="(
                              new_response, index
                            ) in selected_intent_response"
                            :key="index"
                            class="form-group"
                          >
                            <span
                              v-if="selected_intent_response.length > 1"
                              style="float: right; cursor: pointer; margin-right: 12px; margin-top: 12px"
                              @click="add_to_response_list('remove', index)"
                            >
                              <i style="font-size: 16px" class="fa">&#xf00d;</i>
                            </span>
                            <vue-editor
                              v-model="selected_intent_response[index]"
                              :editorToolbar="customToolbar"
                            ></vue-editor>
                          </div>
                        </div>
                        <div class="form-group">
                          <label>{{tlt('intent_page_edit_select_source')}}</label>
                          <select
                            class="form-control"
                            style="padding:6px 6px 6px 1rem!important"
                            v-model="selected_intent_response_source"
                            id="res_n_int_source"
                          >
                            <option
                              v-for="(option, index) in options"
                              :key="index"
                              :value="option"
                            >
                              {{ option }}
                            </option>
                          </select>
                        </div>
                      </div>
                      <!-- <EDIT INTENT ENDPOINT> -->
                      <div v-show="!is_response">
                        <div class="d-flex">
                          <span v-html="point_circle_svg"></span>
                          <p class="ml-1"><b> REQUEST JSON </b></p>
                        </div>
                        <div class="form-group">
                          <label>URL</label>
                          <input
                            type="text"
                            class="form-control edit"
                            v-model="url"
                            id="add_api_url_edit"
                            :placeholder="tlt('enter_url1')"
                          />
                        </div>
                        <div class="form-group d-flex">
                          <label class="pt-1">Method:</label>
                          <div class="radio ml-3">
                            <label>
                              <input
                                type="radio"
                                class="form-control"
                                id="configapi_post"
                                v-model="api_method"
                                value="POST"
                              />
                              <span class="icn" id="configapi_post_icn"></span>
                              POST
                            </label>
                            <label>
                              <input
                                type="radio"
                                v-model="api_method"
                                value="GET"
                              />
                              <span class="icn"></span> GET
                            </label>
                          </div>
                        </div>
                        <div class="form-group">
                          <label>Request JSON</label>
                          <span style="margin-left: 8px">
                            <svg
                              data-tooltip="tooltip"
                              data-placement="bottom"
                              title="Help"
                              data-toggle="modal"
                              data-target="#configapimodal4"
                              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                              xmlns="http://www.w3.org/2000/svg"
                              xmlns:cc="http://creativecommons.org/ns#"
                              xmlns:dc="http://purl.org/dc/elements/1.1/"
                              height="24"
                              width="24"
                              version="1.1"
                            >
                              <g transform="translate(0 -1028.4)">
                                <path
                                  d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                                  transform="translate(0 1029.4)"
                                  fill="#2980b9"
                                />
                                <path
                                  d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                                  transform="translate(0 1028.4)"
                                  fill="#273679"
                                />
                                <path
                                  d="m12 1035.4c-1.727-0.1-3.4306 1.1-3.8438 2.8-0.0403 0.3-0.0546 0.4-0.1562 1.2h2c-0.0526-1.3 1.306-2.3 2.5-2 1.021 0.3 1.763 1.5 1.406 2.5-0.294 0.6-0.998 1-1.562 1.4-0.577 0.5-1.074 1.1-1.313 1.8-0.039 0.4-0.034 0.8-0.031 1.3h2v-1c0.172-0.7 0.688-1.1 1.25-1.4 0.634-0.3 1.087-0.8 1.406-1.4 0.543-1 0.454-2.2-0.125-3.1-0.705-1.3-2.067-2.2-3.531-2.1zm0 10c-0.552 0-1 0.4-1 1 0 0.5 0.448 1 1 1s1-0.5 1-1c0-0.6-0.448-1-1-1z"
                                  fill="#2980b9"
                                />
                                <path
                                  d="m12 6c-1.727-0.0274-3.4306 1.1749-3.8438 2.875-0.0403 0.2941-0.0546 0.3281-0.1562 1.125h2c-0.0526-1.2477 1.306-2.289 2.5-1.9375 1.021 0.2374 1.763 1.4281 1.406 2.4375-0.294 0.684-0.998 0.992-1.562 1.406-0.577 0.482-1.074 1.094-1.313 1.813-0.039 0.42-0.034 0.859-0.031 1.281h2v-1c0.172-0.624 0.688-1.042 1.25-1.312 0.634-0.312 1.087-0.835 1.406-1.469 0.543-0.974 0.454-2.1746-0.125-3.094-0.705-1.2699-2.067-2.1438-3.531-2.125zm0 10c-0.552 0-1 0.448-1 1s0.448 1 1 1 1-0.448 1-1-0.448-1-1-1z"
                                  transform="translate(0 1028.4)"
                                  fill="#ecf0f1"
                                />
                              </g>
                            </svg>
                          </span>
                          <textarea
                            id="configapi_req_json"
                            :class="'edit form-control ' + json_request_class"
                            :placeholder="tlt('request_json_data')"
                            rows="5"
                            v-model="show_json_request_data"
                          ></textarea>
                        </div>
                        <div class="form-group d-flex">
                          <label class="pt-1">Request JSON Editable:</label>
                          <div class="radio ml-3">
                            <label>
                              <input
                                type="radio"
                                class="form-control"
                                v-model="request_json_editable"
                                value="True"
                                id="configapi_true1"
                              />
                              <span class="icn" id="configapi_true_icn"></span>
                              True
                            </label>
                            <label>
                              <input
                                type="radio"
                                class="form-control"
                                v-model="request_json_editable"
                                value="False"
                              />
                              <span class="icn"></span> False
                            </label>
                          </div>
                        </div>
                        <div
                          class="form-group"
                          v-show="request_json_editable == 'True'"
                        >
                          <label>Request JSON Parameters</label>
                          <textarea
                            id="input_from_user_id"
                            class="form-control edit"
                            v-model="editable_values"
                            placeholder="Mention all the request json parameters here, the values which will be given by the users. Multiple parameters to be separated by ';'"
                            rows="5"
                            v-on:keyup="edit_pushing()"
                          ></textarea>
                          <div
                            class="row"
                            v-if="
                              api_method == 'POST' && show_task_values == true
                            "
                          >
                            <div class="col-md-3">
                              <div class="form-group">Input Value</div>
                            </div>
                            <div class="col-md-9">
                              Question to be asked by the chatbot
                            </div>
                          </div>
                          <div
                            class="row"
                            v-if="api_method == 'GET' && show_task_values == true"
                          >
                            <div class="col-md-3">
                              <div class="form-group">Input Value</div>
                            </div>
                            <div class="col-md-9">Select the tags</div>
                          </div>
                          <div
                            class="row"
                            v-for="(input, index) in task_input_values"
                            :key="index"
                            v-show="request_json_editable == 'True'"
                          >
                            <div class="col-md-3">
                              <div class="form-group">{{ input.key_name }}</div>
                            </div>
                            <div class="col-md-9">
                              <div class="row" v-show="api_method == 'POST'">
                                <div class="col-md-9">
                                  <div class="form-group">
                                    <input
                                      class="form-control edit"
                                      :id="'subject_input_edit' + index"
                                      v-model="
                                        task_input_values[index].input_text
                                      "
                                    />
                                  </div>
                                </div>
                              </div>
                              <div
                                class="form-group"
                                v-show="api_method == 'GET'"
                              >
                                <select
                                  class="form-control edit"
                                  v-model="input.input_text"
                                >
                                  <option value>Select A Value</option>
                                  <option
                                    v-for="(
                                      value, index
                                    ) in post_method_request_list"
                                    :value="value"
                                    :key="index"
                                  >
                                    {{ value }}
                                  </option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="d-flex">
                          <span v-html="point_circle_svg"></span>
                          <p class="ml-1"><b> RESPONSE JSON </b></p>
                        </div>
                        <div class="form-group d-flex">
                          <label class="pt-1">End User Message Type:</label>
                          <div class="radio ml-3">
                            <label>
                              <input
                                type="radio"
                                v-model="enduser_msg_type"
                                :disabled="isEdit"
                                value="Through_API"
                                id="eu_msg_radio"
                              />
                              <span class="icn" id="eu_thru_api"></span> Through
                              API
                            </label>
                            <label>
                              <input
                                type="radio"
                                v-model="enduser_msg_type"
                                value="Custom"
                              />
                              <span class="icn"></span> Custom
                            </label>
                          </div>
                        </div>
                        <div
                          class="form-group"
                          v-show="enduser_msg_type == 'Through_API'"
                        >
                          <label>Response JSON</label>
                          <span style="margin-left: 8px">
                            <svg
                              data-tooltip="tooltip"
                              data-placement="bottom"
                              title="Help"
                              data-toggle="modal"
                              data-target="#configapimodal2"
                              fill="#273679"
                              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                              xmlns="http://www.w3.org/2000/svg"
                              xmlns:cc="http://creativecommons.org/ns#"
                              xmlns:dc="http://purl.org/dc/elements/1.1/"
                              height="24"
                              width="24"
                              version="1.1"
                              @click="show_block('up')"
                            >
                              <g transform="translate(0 -1028.4)">
                                <path
                                  d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                                  transform="translate(0 1029.4)"
                                  fill="#2980b9"
                                />
                                <path
                                  d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                                  transform="translate(0 1028.4)"
                                  fill="#273679"
                                />
                                <path
                                  d="m12 1035.4c-1.727-0.1-3.4306 1.1-3.8438 2.8-0.0403 0.3-0.0546 0.4-0.1562 1.2h2c-0.0526-1.3 1.306-2.3 2.5-2 1.021 0.3 1.763 1.5 1.406 2.5-0.294 0.6-0.998 1-1.562 1.4-0.577 0.5-1.074 1.1-1.313 1.8-0.039 0.4-0.034 0.8-0.031 1.3h2v-1c0.172-0.7 0.688-1.1 1.25-1.4 0.634-0.3 1.087-0.8 1.406-1.4 0.543-1 0.454-2.2-0.125-3.1-0.705-1.3-2.067-2.2-3.531-2.1zm0 10c-0.552 0-1 0.4-1 1 0 0.5 0.448 1 1 1s1-0.5 1-1c0-0.6-0.448-1-1-1z"
                                  fill="#2980b9"
                                />
                                <path
                                  d="m12 6c-1.727-0.0274-3.4306 1.1749-3.8438 2.875-0.0403 0.2941-0.0546 0.3281-0.1562 1.125h2c-0.0526-1.2477 1.306-2.289 2.5-1.9375 1.021 0.2374 1.763 1.4281 1.406 2.4375-0.294 0.684-0.998 0.992-1.562 1.406-0.577 0.482-1.074 1.094-1.313 1.813-0.039 0.42-0.034 0.859-0.031 1.281h2v-1c0.172-0.624 0.688-1.042 1.25-1.312 0.634-0.312 1.087-0.835 1.406-1.469 0.543-0.974 0.454-2.1746-0.125-3.094-0.705-1.2699-2.067-2.1438-3.531-2.125zm0 10c-0.552 0-1 0.448-1 1s0.448 1 1 1 1-0.448 1-1-0.448-1-1-1z"
                                  transform="translate(0 1028.4)"
                                  fill="#ecf0f1"
                                />
                              </g>
                            </svg>
                          </span>
                          <textarea
                            id="configapi_res_json"
                            :class="'edit form-control ' + json_response_class"
                            :placeholder="tlt('request_json_data')"
                            rows="5"
                            v-model="show_json_response_data"
                          ></textarea>
                        </div>
                        <div
                          class="form-group"
                          v-show="enduser_msg_type == 'Through_API'"
                        >
                          <label>Response JSON parameter sent to end user</label>
                          <textarea
                            class="form-control edit"
                            v-model="response_key_to_enduser"
                            placeholder="Mention the response json parameter here, the value of which will be sent to the user..."
                            rows="3"
                            id="response_key_json_id"
                          ></textarea>
                        </div>
                        <div
                          class="form-group"
                          v-show="enduser_msg_type == 'Custom'"
                        >
                          <label>Message to end user</label>
                          <input
                            id="configapi_end_user_msg_edit"
                            class="form-control edit"
                            placeholder="Message to end user...type here"
                            v-model="end_user_message"
                          />
                        </div>
                        <div
                          class="form-group"
                          v-show="enduser_msg_type == 'Through_API'"
                        >
                          <label>Response JSON Editable</label>
                          <div class="radio" style="margin-left: 32%">
                            <label>
                              <input
                                type="radio"
                                class="form-control"
                                v-model="response_json_editable"
                                value="True"
                                id="configapi_true2"
                              />
                              <span class="icn" id="configapi_true_icn2"></span>
                              True
                            </label>
                            <label>
                              <input
                                type="radio"
                                class="form-control"
                                v-model="response_json_editable"
                                value="False"
                              />
                              <span class="icn"></span> False
                            </label>
                          </div>
                        </div>
                        <div
                          class="form-group"
                          v-show="
                            response_json_editable == 'True' &&
                            enduser_msg_type == 'Through_API'
                          "
                        >
                          <label>Message With Response JSON Parameter</label>
                          <span style="margin-left: 8px">
                            <svg
                              data-tooltip="tooltip"
                              data-placement="bottom"
                              title="Help"
                              data-toggle="modal"
                              data-target="#configapimodal_json_editable"
                              fill="#273679"
                              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                              xmlns="http://www.w3.org/2000/svg"
                              xmlns:cc="http://creativecommons.org/ns#"
                              xmlns:dc="http://purl.org/dc/elements/1.1/"
                              height="24"
                              width="24"
                              version="1.1"
                            >
                              <g transform="translate(0 -1028.4)">
                                <path
                                  d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                                  transform="translate(0 1029.4)"
                                  fill="#2980b9"
                                />
                                <path
                                  d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                                  transform="translate(0 1028.4)"
                                  fill="#273679"
                                />
                                <path
                                  d="m12 1035.4c-1.727-0.1-3.4306 1.1-3.8438 2.8-0.0403 0.3-0.0546 0.4-0.1562 1.2h2c-0.0526-1.3 1.306-2.3 2.5-2 1.021 0.3 1.763 1.5 1.406 2.5-0.294 0.6-0.998 1-1.562 1.4-0.577 0.5-1.074 1.1-1.313 1.8-0.039 0.4-0.034 0.8-0.031 1.3h2v-1c0.172-0.7 0.688-1.1 1.25-1.4 0.634-0.3 1.087-0.8 1.406-1.4 0.543-1 0.454-2.2-0.125-3.1-0.705-1.3-2.067-2.2-3.531-2.1zm0 10c-0.552 0-1 0.4-1 1 0 0.5 0.448 1 1 1s1-0.5 1-1c0-0.6-0.448-1-1-1z"
                                  fill="#2980b9"
                                />
                                <path
                                  d="m12 6c-1.727-0.0274-3.4306 1.1749-3.8438 2.875-0.0403 0.2941-0.0546 0.3281-0.1562 1.125h2c-0.0526-1.2477 1.306-2.289 2.5-1.9375 1.021 0.2374 1.763 1.4281 1.406 2.4375-0.294 0.684-0.998 0.992-1.562 1.406-0.577 0.482-1.074 1.094-1.313 1.813-0.039 0.42-0.034 0.859-0.031 1.281h2v-1c0.172-0.624 0.688-1.042 1.25-1.312 0.634-0.312 1.087-0.835 1.406-1.469 0.543-0.974 0.454-2.1746-0.125-3.094-0.705-1.2699-2.067-2.1438-3.531-2.125zm0 10c-0.552 0-1 0.448-1 1s0.448 1 1 1 1-0.448 1-1-0.448-1-1-1z"
                                  transform="translate(0 1028.4)"
                                  fill="#ecf0f1"
                                />
                              </g>
                            </svg>
                          </span>
                          <textarea
                            class="form-control edit"
                            v-model="response_key_edit_message"
                            placeholder="Please enter the custom message with response json parameter which will sent to enduser"
                            rows="3"
                            id="msg_reponse_key"
                          ></textarea>
                        </div>
                        <div class="form-group">
                          <label>Message to User upon API failure</label>
                          <textarea
                            class="form-control edit"
                            v-model="unsuccessful_message"
                            placeholder="Message on API failure...type here"
                            rows="3"
                            id="api_failure"
                          ></textarea>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="modal-footer" v-if="isEditIntent">
                    <div class="dash-modal card-act">
                    <div class="btn-wrap text-right mt-0 py-0 border-top-0">
                      <button
                        type="button"
                        class="btn btn-link"
                        data-dismiss="modal"
                        @click="edit_intent_details"
                      >
                        {{tlt('intent_page_edit_cancel_btn')}}
                      </button>
                      <button
                        type="submit"
                        class="darkblue-btn"
                        id="res_n_int_save"
                        @click="edit_intent()"
                      >
                        {{tlt('save_btn')}}
                      </button>
                    </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div v-show="intentlist.length === 0 && !spinnerOn">
              <p class="text-center">
                <strong>
                  {{tlt('intent_page_no_intent_added_text')}}.</strong
                >
              </p>
            </div>
            <div class="pagin-table" style="margin-top: 2%" v-show="intentlist.length > 0">
              <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                  <li class="page-item">
                    <a
                      class="page-link"
                      href="#"
                      @click="isEditIntent ? verify_changes() : page_require(page_no - 1)"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="8.667"
                        height="15.204"
                        viewBox="0 0 8.667 15.204"
                      >
                        <g
                          id="arrow-point-to-left"
                          transform="translate(105.806 15.204) rotate(180)"
                        >
                          <path
                            id="Path_1136"
                            data-name="Path 1136"
                            d="M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z"
                            transform="translate(0 0)"
                            fill="#9499ae"
                          />
                        </g>
                      </svg>
                    </a>
                  </li>
                  <li
                    :class="'page-item ' + pagination_class(pageno)"
                    v-for="pageno in page_array"
                    :key="pageno"
                  >
                    <a
                      v-if="pageno == '...s' || pageno == '...l'"
                      class="page-link"
                      href="#"
                      @click="isEditIntent ? verify_changes() : page_require(pageno)"
                      >...</a
                    >
                    <a
                      v-if="pageno != '...s' && pageno != '...l'"
                      class="page-link"
                      href="#"
                      @click="isEditIntent ? verify_changes() : page_require(pageno)"
                      >{{ pageno }}</a
                    >
                  </li>
                  <li class="page-item">
                    <a
                      class="page-link"
                      href="#"
                      @click="isEditIntent ? verify_changes() : page_require(page_no + 1)"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="8.667"
                        height="15.204"
                        viewBox="0 0 8.667 15.204"
                      >
                        <g
                          id="arrow-point-to-right"
                          transform="translate(-97.139 0)"
                        >
                          <path
                            id="Path_1136"
                            data-name="Path 1136"
                            d="M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z"
                            transform="translate(0 0)"
                            fill="#9499ae"
                          />
                        </g>
                      </svg>
                    </a>
                  </li>
                </ul>
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Modal -->
    <!-- SAVE NEW INTENT -->
    <div
      id="intentmodel"
      class="modal fade dash-modal"
      role="dialog"
      data-backdrop="static"
      data-keyboard="false"
    >
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-body">
            <div class="modal-head d-flex align-items-center">
              <div class="head-icn">
                <img src="/img/msg-blue.png" alt />
              </div>
              <h3>{{tlt('intent_model_intent_label')}}</h3>
              <button type="button" class="close" data-dismiss="modal">
                <img src="/img/close-icn.png" alt />
              </button>
            </div>
            <div class="form-group">
              <label>{{tlt('intent_model_name_desc_label')}} <span class="pl-1">{{tlt('intent_model_name_desc_text')}}</span></label>
              <input
                type="text"
                v-model.trim="new_intents"
                class="form-control"
                :placeholder="tlt('enter_intent')"
                id="enter_intent_id"
                v-on:keyup="enterintentid()"
                @keydown="intent_name_check_special_characters($event)"
              />
              <span v-show="intent_already_exists" style="color: red"
                >{{tlt('intent_page_intent_name_exist')}}.</span
              >
            </div>
            <div class="modal-head d-flex align-items-center">
              <div class="head-icn">
                <img src="/img/msg-blue.png" alt />
              </div>
              <h3>{{tlt('intent_model_question_label')}}</h3>
            </div>
            <div style="display: block; margin-bottom: 2px;">
              <label>{{tlt('intent_model_question_desc_label')}}</label>
              <button
                id="add_question_button"
                class="darkblue-btn"
                style="padding: 5px 10px; margin-left: 10%"
                @click="add_to_questions_list('add')"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="13.997"
                  viewBox="0 0 14 13.997"
                >
                  <path
                    id="Union_13"
                    data-name="Union 13"
                    d="M-12684,2058v-5h-5a1,1,0,0,1-1-1,1,1,0,0,1,1-1h5v-5a1,1,0,0,1,1-1,1,1,0,0,1,1,1v5h5a1,1,0,0,1,1,1,1,1,0,0,1-1,1h-5v5a1,1,0,0,1-1,1A1,1,0,0,1-12684,2058Z"
                    transform="translate(12690.001 -2045.002)"
                    fill="#fff"
                  />
                </svg>
              </button>
            </div>
            <div
              v-for="(new_question, index) in add_questions_list"
              :key="index"
              class="form-group"
              style="display:flex;"
            >
              <input
                type="text"
                v-model.trim="add_questions_list[index]"
                class="form-control pl-3"
                :placeholder="tlt('enter_question')"
                :id="`enter_question_id_${index}`"
              />
              <span
                v-if="add_questions_list.length > 1"
                style="cursor: pointer"
                class="my-auto ml-2 mr-0"
                @click="add_to_questions_list('remove', index)"
              >
                <i style="font-size: 16px" class="fa">&#xf00d;</i>
              </span>
            </div>
            <div class="modal-head d-flex align-items-center">
              <div class="head-icn">
                <img src="/img/msg-blue.png" alt />
              </div>
              <h3>{{tlt('intent_model_response_label')}}</h3>
              <div class="radio" style="margin-left: 25%">
                <label>
                  <input type="radio" id="radioBtnn" @click="switching(this)" />
                  <span class="icn"></span>
                  {{tlt('intent_model_define_endpoints_label')}}</label
                >
              </div>
              <!-- </button> -->
            </div>

            <div v-show="view_response_modal">
              <div class="form-group">
                <div class="d-flex">
                  <p>{{tlt('intent_model_response_img_label')}}</p>
                  <div class="ml-2">
                    <center>
                      <div class="radio" style="margin-bottom: 3%">
                        <label>
                          <input
                            type="radio"
                            v-model="image_response"
                            value="Yes"
                          />
                          <span class="icn"></span> {{tlt('intent_model_yes_option')}}
                        </label>
                        <label>
                          <input
                            type="radio"
                            v-model="image_response"
                            value="No"
                          />
                          <span class="icn"></span> {{tlt('intent_model_no_option')}}
                        </label>
                      </div>
                    </center>
                  </div>
                </div>
                <div
                  class="custom-file"
                  v-show="image_response == 'Yes'"
                  style="margin-bottom: 5%"
                >
                  <input
                    type="file"
                    accept="image/x-png, image/gif, image/jpeg"
                    class="custom-file-input"
                    :placeholder="tlt('choose_img')"
                    @change="fileinput2"
                    id="inputGroupFileAddon02"
                  />
                  <label
                    style="font-weight: 400; line-height: 15px"
                    class="custom-file-label form-control"
                    for="file"
                    >{{ file_label2 }}</label
                  >
                </div>
              </div>
              <div class="form-group">
                <div class="d-flex">
                  <p>{{tlt('intent_model_response_video_label')}}</p>
                  <div class="ml-2">
                    <center>
                      <div class="radio" style="margin-bottom: 3%">
                        <label>
                          <input
                            type="radio"
                            id="res_video_type"
                            v-model="video_response"
                            value="Yes"
                          />
                          <span class="icn" id="res_video_icn"></span> {{tlt('intent_model_yes_option')}}
                        </label>
                        <label>
                          <input
                            type="radio"
                            v-model="video_response"
                            value="No"
                          />
                          <span class="icn"></span> {{tlt('intent_model_no_option')}}
                        </label>
                      </div>
                    </center>
                  </div>
                </div>
                <div v-show="video_response == 'Yes'" style="margin-bottom: 5%">
                  <input
                    id="res_video_url"
                    type="url"
                    class="form-control"
                    :placeholder="tlt('enter_url')"
                    v-model="video_link"
                    @change="embedded_change"
                  />
                </div>
              </div>
              <div class="form-group">
                <label>{{tlt('intent_model_response_to_user_by_bot_label')}}</label>
                <button
                  id="add_question_button"
                  class="darkblue-btn"
                  style="padding: 5px 10px; margin-left: 17%"
                  @click="add_to_response_list('add')"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="14"
                    height="13.997"
                    viewBox="0 0 14 13.997"
                  >
                    <path
                      id="Union_13"
                      data-name="Union 13"
                      d="M-12684,2058v-5h-5a1,1,0,0,1-1-1,1,1,0,0,1,1-1h5v-5a1,1,0,0,1,1-1,1,1,0,0,1,1,1v5h5a1,1,0,0,1,1,1,1,1,0,0,1-1,1h-5v5a1,1,0,0,1-1,1A1,1,0,0,1-12684,2058Z"
                      transform="translate(12690.001 -2045.002)"
                      fill="#fff"
                    />
                  </svg>
                </button>
                <div class="mt-2 mb-2" style="color: #df7474;"> 
                    <span>* html content/tags are not supported on whatsapp and messenger bot.</span>
                </div>                
                <div
                  v-for="(new_response, index) in multiple_response"
                  :key="index"
                  class="form-group"
                >
                  <span
                    v-if="multiple_response.length > 1"
                    style="float: right; cursor: pointer; margin-right: 12px; margin-top: 12px"
                    @click="add_to_response_list('remove', index)"
                  >
                    <i style="font-size: 16px" class="fa">&#xf00d;</i>
                  </span>
                  <vue-editor
                    v-model="multiple_response[index]"
                    :editorToolbar="customToolbar"
                  ></vue-editor>
                </div>
              </div>
              <div class="form-group">
                <label>{{tlt('intent_model_select_source_label')}}</label>
                <select
                  class="form-control"
                  v-model="source"
                  id="res_n_int_source"
                >
                  <option
                    v-for="(option, index) in options"
                    :key="index"
                    :value="option"
                  >
                    {{ option }}
                  </option>
                </select>
              </div>
            </div>
            <!-- <NEW INTENT SECTION> -->
            <div v-show="!view_response_modal">
              <div class="d-flex">
                <span v-html="point_circle_svg"></span>
                <p class="ml-1"><b> {{tlt('intent_model_request_json_label')}} </b></p>
              </div>
              <div class="form-group">
                <label>{{tlt('intent_model_url_label')}}</label>
                <input
                  type="text"
                  class="form-control"
                  v-model="save_url"
                  id="add_api_url"
                  :placeholder="tlt('enter_url1')"
                />
              </div>
              <div class="form-group d-flex">
                <label class="pt-1">{{tlt('intent_model_method_label')}}:</label>
                <div class="radio ml-3">
                  <label>
                    <input
                      type="radio"
                      class="form-control"
                      id="configapi_post"
                      v-model="save_api_method"
                      value="POST"
                    />
                    <span class="icn" id="configapi_post_icn"></span> {{tlt('intent_model_post_label')}}
                  </label>
                  <label>
                    <input type="radio" v-model="save_api_method" value="GET" />
                    <span class="icn"></span> {{tlt('intent_model_get_label')}}
                  </label>
                </div>
              </div>
              <div class="form-group">
                <label>{{tlt('intent_model_request_json_small_label')}}</label>
                <span style="margin-left: 8px">
                  <svg
                    data-tooltip="tooltip"
                    data-placement="bottom"
                    title="Help"
                    data-toggle="modal"
                    data-target="#configapimodal4"
                    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:cc="http://creativecommons.org/ns#"
                    xmlns:dc="http://purl.org/dc/elements/1.1/"
                    height="24"
                    width="24"
                    version="1.1"
                  >
                    <g transform="translate(0 -1028.4)">
                      <path
                        d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                        transform="translate(0 1029.4)"
                        fill="#2980b9"
                      />
                      <path
                        d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                        transform="translate(0 1028.4)"
                        fill="#273679"
                      />
                      <path
                        d="m12 1035.4c-1.727-0.1-3.4306 1.1-3.8438 2.8-0.0403 0.3-0.0546 0.4-0.1562 1.2h2c-0.0526-1.3 1.306-2.3 2.5-2 1.021 0.3 1.763 1.5 1.406 2.5-0.294 0.6-0.998 1-1.562 1.4-0.577 0.5-1.074 1.1-1.313 1.8-0.039 0.4-0.034 0.8-0.031 1.3h2v-1c0.172-0.7 0.688-1.1 1.25-1.4 0.634-0.3 1.087-0.8 1.406-1.4 0.543-1 0.454-2.2-0.125-3.1-0.705-1.3-2.067-2.2-3.531-2.1zm0 10c-0.552 0-1 0.4-1 1 0 0.5 0.448 1 1 1s1-0.5 1-1c0-0.6-0.448-1-1-1z"
                        fill="#2980b9"
                      />
                      <path
                        d="m12 6c-1.727-0.0274-3.4306 1.1749-3.8438 2.875-0.0403 0.2941-0.0546 0.3281-0.1562 1.125h2c-0.0526-1.2477 1.306-2.289 2.5-1.9375 1.021 0.2374 1.763 1.4281 1.406 2.4375-0.294 0.684-0.998 0.992-1.562 1.406-0.577 0.482-1.074 1.094-1.313 1.813-0.039 0.42-0.034 0.859-0.031 1.281h2v-1c0.172-0.624 0.688-1.042 1.25-1.312 0.634-0.312 1.087-0.835 1.406-1.469 0.543-0.974 0.454-2.1746-0.125-3.094-0.705-1.2699-2.067-2.1438-3.531-2.125zm0 10c-0.552 0-1 0.448-1 1s0.448 1 1 1 1-0.448 1-1-0.448-1-1-1z"
                        transform="translate(0 1028.4)"
                        fill="#ecf0f1"
                      />
                    </g>
                  </svg>
                </span>
                <textarea
                  id="configapi_req_json"
                  :class="'form-control ' + json_request_class"
                  placeholder="Request JSON data here..."
                  rows="5"
                  v-model="save_json_request_data"
                ></textarea>
              </div>
              <div class="form-group d-flex">
                <label class="pt-1">{{tlt('intent_model_json_edit_label')}}</label>
                <div class="radio ml-3">
                  <label>
                    <input
                      type="radio"
                      class="form-control"
                      v-model="save_request_json_editable"
                      value="True"
                      id="configapi_true1"
                    />
                    <span class="icn" id="configapi_true_icn"></span> {{tlt('intent_model_json_edit_true_label')}}
                  </label>
                  <label>
                    <input
                      type="radio"
                      class="form-control"
                      v-model="save_request_json_editable"
                      value="False"
                    />
                    <span class="icn"></span> {{tlt('intent_model_json_edit_false_label')}}
                  </label>
                </div>
              </div>
              <div
                class="form-group"
                v-show="save_request_json_editable == 'True'"
              >
                <label>{{tlt('json_parameter_label')}}</label>
                <textarea
                  id="input_from_user_id"
                  class="form-control"
                  v-model="save_editable_values"
                  :placeholder="tlt('multiple_parameter') +';'"
                  rows="5"
                  v-on:keyup="save_pushing()"
                ></textarea>
                <div class="row mt-4" v-if="save_api_method == 'POST' && save_show_task_values == true">
                  <div class="col-md-3">
                    <div class="form-group">Input Value</div>
                  </div>
                  <div class="col-md-9">
                    Question to be asked by the chatbot
                  </div>
                </div>
                <div
                  class="row"
                  v-if="
                    save_api_method == 'GET' && save_show_task_values == true
                  "
                >
                  <div class="col-md-3">
                    <div class="form-group">Input Value</div>
                  </div>
                  <div class="col-md-9">Select the tags</div>
                </div>
                <div
                  class="row"
                  v-for="(input, index) in save_task_input_values"
                  :key="index"
                  v-show="save_request_json_editable == 'True' && save_api_method != null"
                >
                  <div class="col-md-3">
                    <div class="form-group" style="word-wrap: break-word !important;">
                      {{ input.key_name }}
                    </div>
                  </div>
                  <div class="col-md-9">
                    <div class="row" v-show="save_api_method == 'POST'">
                      <div class="col-md-9">
                        <div class="form-group">
                          <input
                            class="form-control"
                            :id="'subject_input' + index"
                            v-model="save_task_input_values[index].input_text"
                          />
                        </div>
                      </div>
                    </div>
                    <div class="form-group" v-show="save_api_method == 'GET'">
                      <select class="form-control" v-model="input.input_text">
                        <option value>Select A Value</option>
                        <option
                          v-for="(value, index) in post_method_request_list"
                          :value="value"
                          :key="index"
                        >
                          {{ value }}
                        </option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
              <div class="d-flex">
                <span v-html="point_circle_svg"></span>
                <p class="ml-1"><b> {{tlt('intent_model_response_json_label')}} </b></p>
              </div>
              <div class="form-group d-flex">
                <label class="pt-1">{{tlt('intent_model_end_user_msg_label')}}</label>
                <div class="radio ml-3">
                  <label>
                    <input
                      type="radio"
                      v-model="save_enduser_msg_type"
                      :disabled="isEdit"
                      value="Through_API"
                      id="eu_msg_radio"
                    />
                    <span class="icn" id="eu_thru_api"></span> {{tlt('intent_model_through_api_label')}}
                  </label>
                  <label>
                    <input
                      type="radio"
                      v-model="save_enduser_msg_type"
                      value="Custom"
                    />
                    <span class="icn"></span> {{tlt('intent_model_custom_label')}}
                  </label>
                </div>
              </div>
              <div
                class="form-group"
                v-show="save_enduser_msg_type == 'Through_API'"
              >
                <label>{{tlt('intent_model_response_json_small_label')}}</label>
                <span style="margin-left: 8px">
                  <svg
                    data-tooltip="tooltip"
                    data-placement="bottom"
                    title="Help"
                    data-toggle="modal"
                    data-target="#configapimodal2"
                    fill="#273679"
                    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:cc="http://creativecommons.org/ns#"
                    xmlns:dc="http://purl.org/dc/elements/1.1/"
                    height="24"
                    width="24"
                    version="1.1"
                    @click="show_block('up')"
                  >
                    <g transform="translate(0 -1028.4)">
                      <path
                        d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                        transform="translate(0 1029.4)"
                        fill="#2980b9"
                      />
                      <path
                        d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                        transform="translate(0 1028.4)"
                        fill="#273679"
                      />
                      <path
                        d="m12 1035.4c-1.727-0.1-3.4306 1.1-3.8438 2.8-0.0403 0.3-0.0546 0.4-0.1562 1.2h2c-0.0526-1.3 1.306-2.3 2.5-2 1.021 0.3 1.763 1.5 1.406 2.5-0.294 0.6-0.998 1-1.562 1.4-0.577 0.5-1.074 1.1-1.313 1.8-0.039 0.4-0.034 0.8-0.031 1.3h2v-1c0.172-0.7 0.688-1.1 1.25-1.4 0.634-0.3 1.087-0.8 1.406-1.4 0.543-1 0.454-2.2-0.125-3.1-0.705-1.3-2.067-2.2-3.531-2.1zm0 10c-0.552 0-1 0.4-1 1 0 0.5 0.448 1 1 1s1-0.5 1-1c0-0.6-0.448-1-1-1z"
                        fill="#2980b9"
                      />
                      <path
                        d="m12 6c-1.727-0.0274-3.4306 1.1749-3.8438 2.875-0.0403 0.2941-0.0546 0.3281-0.1562 1.125h2c-0.0526-1.2477 1.306-2.289 2.5-1.9375 1.021 0.2374 1.763 1.4281 1.406 2.4375-0.294 0.684-0.998 0.992-1.562 1.406-0.577 0.482-1.074 1.094-1.313 1.813-0.039 0.42-0.034 0.859-0.031 1.281h2v-1c0.172-0.624 0.688-1.042 1.25-1.312 0.634-0.312 1.087-0.835 1.406-1.469 0.543-0.974 0.454-2.1746-0.125-3.094-0.705-1.2699-2.067-2.1438-3.531-2.125zm0 10c-0.552 0-1 0.448-1 1s0.448 1 1 1 1-0.448 1-1-0.448-1-1-1z"
                        transform="translate(0 1028.4)"
                        fill="#ecf0f1"
                      />
                    </g>
                  </svg>
                </span>
                <textarea
                  id="configapi_res_json"
                  :class="'form-control ' + json_response_class"
                  :placeholder="tlt('request_json_data')"
                  rows="5"
                  v-model="save_json_response_data"
                ></textarea>
              </div>
              <div
                class="form-group"
                v-show="save_enduser_msg_type == 'Through_API'"
              >
                <label>{{tlt('intent_model_resp_json_parameter_label')}}</label>
                <textarea
                  class="form-control"
                  v-model="save_response_key_to_enduser"
                  :placeholder="tlt('json_parameter')"
                  rows="3"
                  id="response_key_json_id"
                ></textarea>
              </div>
              <div
                class="form-group"
                v-show="save_enduser_msg_type == 'Custom'"
              >
                <label>{{tlt('intent_model_msg_end_user_label')}}</label>
                <input
                  id="configapi_end_user_msg"
                  class="form-control"
                  :placeholder="tlt('msg_end_user')"
                  v-model="save_end_user_message"
                />
              </div>
              <div
                class="form-group"
                v-show="save_enduser_msg_type == 'Through_API'"
              >
                <label>{{tlt('intent_model_through_api_json_edit_label')}}</label>
                <div class="radio" style="margin-left: 32%">
                  <label>
                    <input
                      type="radio"
                      class="form-control"
                      v-model="save_response_json_editable"
                      value="True"
                      id="configapi_true2"
                    />
                    <span class="icn" id="configapi_true_icn2"></span> {{tlt('intent_model_json_edit_inside_api_true_label')}}
                  </label>
                  <label>
                    <input
                      type="radio"
                      class="form-control"
                      v-model="save_response_json_editable"
                      value="False"
                    />
                    <span class="icn"></span> {{tlt('intent_model_json_edit_inside_api_false_label')}}
                  </label>
                </div>
              </div>
              <div
                class="form-group"
                v-show="
                  save_response_json_editable == 'True' &&
                  save_enduser_msg_type == 'Through_API'
                "
              >
                <label>{{tlt('intent_model_response_json_parameter_label')}}</label>
                <span style="margin-left: 8px">
                  <svg
                    data-tooltip="tooltip"
                    data-placement="bottom"
                    title="Help"
                    data-toggle="modal"
                    data-target="#configapimodal_json_editable"
                    fill="#273679"
                    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:cc="http://creativecommons.org/ns#"
                    xmlns:dc="http://purl.org/dc/elements/1.1/"
                    height="24"
                    width="24"
                    version="1.1"
                  >
                    <g transform="translate(0 -1028.4)">
                      <path
                        d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                        transform="translate(0 1029.4)"
                        fill="#2980b9"
                      />
                      <path
                        d="m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z"
                        transform="translate(0 1028.4)"
                        fill="#273679"
                      />
                      <path
                        d="m12 1035.4c-1.727-0.1-3.4306 1.1-3.8438 2.8-0.0403 0.3-0.0546 0.4-0.1562 1.2h2c-0.0526-1.3 1.306-2.3 2.5-2 1.021 0.3 1.763 1.5 1.406 2.5-0.294 0.6-0.998 1-1.562 1.4-0.577 0.5-1.074 1.1-1.313 1.8-0.039 0.4-0.034 0.8-0.031 1.3h2v-1c0.172-0.7 0.688-1.1 1.25-1.4 0.634-0.3 1.087-0.8 1.406-1.4 0.543-1 0.454-2.2-0.125-3.1-0.705-1.3-2.067-2.2-3.531-2.1zm0 10c-0.552 0-1 0.4-1 1 0 0.5 0.448 1 1 1s1-0.5 1-1c0-0.6-0.448-1-1-1z"
                        fill="#2980b9"
                      />
                      <path
                        d="m12 6c-1.727-0.0274-3.4306 1.1749-3.8438 2.875-0.0403 0.2941-0.0546 0.3281-0.1562 1.125h2c-0.0526-1.2477 1.306-2.289 2.5-1.9375 1.021 0.2374 1.763 1.4281 1.406 2.4375-0.294 0.684-0.998 0.992-1.562 1.406-0.577 0.482-1.074 1.094-1.313 1.813-0.039 0.42-0.034 0.859-0.031 1.281h2v-1c0.172-0.624 0.688-1.042 1.25-1.312 0.634-0.312 1.087-0.835 1.406-1.469 0.543-0.974 0.454-2.1746-0.125-3.094-0.705-1.2699-2.067-2.1438-3.531-2.125zm0 10c-0.552 0-1 0.448-1 1s0.448 1 1 1 1-0.448 1-1-0.448-1-1-1z"
                        transform="translate(0 1028.4)"
                        fill="#ecf0f1"
                      />
                    </g>
                  </svg>
                </span>
                <textarea
                  class="form-control"
                  v-model="save_response_key_edit_message"
                  :placeholder="tlt('enter_the_custom_msg')"
                  rows="3"
                  id="msg_reponse_key"
                ></textarea>
              </div>
              <div class="form-group">
                <label>{{tlt('intent_model_msg_to_user_label')}}</label>
                <textarea
                  class="form-control"
                  v-model="save_unsuccessful_message"
                  :placeholder="tlt('msg_api_failure')"
                  rows="3"
                  id="api_failure"
                ></textarea>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <div class="btn-wrap card-act text-right mt-0 py-0 border-top-0">
              <button
                type="button"
                class="btn btn-link"
                data-dismiss="modal"
                @click="empty_variable"
              >
                {{tlt('add_intent_cancel_btn')}}
              </button>
              <button
                type="submit"
                class="darkblue-btn"
                id="res_n_int_save"
                @click="save_intent()"
              >
                {{tlt('add_intent_save_btn')}}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      class="modal fade dash-modal"
      id="configapimodal2"
      tabindex="-1"
      role="dialog"
      aria-labelledby="configapimodaltitle"
      aria-hidden="true"
      data-backdrop="true"
    >
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-body" style="width: fit-content">
            <div class="modal-head d-flex align-items-center">
              <div class="head-icn">
                <img src="/img/msg-blue.png" alt />
              </div>
              <h3>Help</h3>
            </div>
            <div>
              <div>
                <h6 class="hclass6">
                  To show the message as is from the API, it can be configured
                  as follows:
                </h6>
                <label>Response JSON</label>
                <textarea
                  disabled
                  id="configapi_req_json"
                  :class="'form-control ' + json_request_class"
                  placeholder="response"
                  rows="5"
                  v-model="response_json_case_1"
                  style="color: black"
                ></textarea>
              </div>
              <br />
              <div class="form-group">
                <label>Response JSON parameter sent to end user</label>
                <textarea
                  disabled
                  class="form-control"
                  rows="1"
                  style="color: black"
                >
                 message</textarea
                >
              </div>
              <h6 class="hclass6">
                So in this case, the value of message key would be
                <span style="font-weight: 450"
                  >'Your appointment has been scheduled'</span
                >
              </h6>
              <br />
            </div>
            <br />
            <br />

            <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
            >
              <img src="/img/close-icn.png" alt />
            </button>
          </div>
        </div>
      </div>
    </div>

    <div
      class="modal fade dash-modal"
      id="configapimodal_json_editable"
      tabindex="-1"
      role="dialog"
      aria-labelledby="configapimodaltitle"
      aria-hidden="true"
      data-backdrop="true"
    >
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-body" style="width: fit-content">
            <div class="modal-head d-flex align-items-center">
              <div class="head-icn">
                <img src="/img/msg-blue.png" alt />
              </div>
              <h3>Help</h3>
            </div>
            <div>
              <div>
                <h6 class="hclass6">
                  This example show how we can use the various output parameters
                  from the API to modify the user message
                </h6>
                <label>Response JSON</label>
                <textarea
                  disabled
                  id="configapi_req_json"
                  :class="'form-control ' + json_request_class"
                  placeholder="response"
                  rows="6"
                  v-model="response_json_case_11"
                  style="color: black"
                ></textarea>
              </div>
              <br />
              <div class="form-group">
                <label>Response JSON parameter sent to end user</label>
                <textarea
                  disabled
                  class="form-control"
                  rows="1"
                  style="color: black"
                >
count</textarea
                >
              </div>
              <div class="form-group">
                <label>Message With Response JSON Parameter</label>
                <textarea
                  disabled
                  class="form-control"
                  style="color: black"
                  rows="1"
                >
You have {count} appointments</textarea
                >
              </div>

              <br />
              <h6 class="hclass6">
                <span class="noteclass">Note:-</span> The Response sent to end
                user is
                <span style="font-weight: 450">You have 8 appointments</span>
              </h6>
              <br />
            </div>

            <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
            >
              <img src="/img/close-icn.png" alt />
            </button>
          </div>
        </div>
      </div>
    </div>

    <div
      class="modal fade dash-modal"
      id="configapimodal4"
      tabindex="-1"
      role="dialog"
      aria-labelledby="configapimodal4title"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-body" style="width: fit-content">
            <div class="modal-head d-flex align-items-center">
              <div class="head-icn">
                <img src="/img/msg-blue.png" alt />
              </div>
              <h3>Help</h3>
            </div>
            <div>
              <h6>Example 1:</h6>
              <h6 class="hclass6">
                Below is the json, where the values for companyid, email and
                role are set from the session. The values for subject and
                description are obtained from the user.
              </h6>
              <div>
                <label>Request JSON</label>
                <textarea
                  disabled
                  id="configapi_req_json"
                  :class="'form-control ' + json_request_class"
                  placeholder="Request JSON data here..."
                  rows="7"
                  v-model="request_json_case_1"
                  style="color: black"
                ></textarea>
              </div>

              <br />
              <div>
                <label>Request JSON Editable</label>
                <br />
                <div class="radio" style="padding-left: 15%">
                  <label>
                    <input disabled type="radio" checked />
                    <span class="icn" id="configapi_true_icn"></span> True
                  </label>
                  <label>
                    <input disabled type="radio" />
                    <span class="icn"></span> False
                  </label>
                </div>
              </div>
              <div>
                <label>Request JSON Parameters</label>
                <input
                  disabled
                  class="form-control"
                  v-model="input_from_user_case_1"
                  style="color: black"
                />
              </div>
            </div>
            <br />
            <br />
            <div>
              <h6>Example 2 :</h6>
              <h6 class="hclass6">
                This example shows how we map the parameters from json that we
                need from users. In the below json, if we need the inputs from
                the user for say parameter "nickname". This has to be mapped as
                "user,info,nickname" in the "Request JSON Parameters" field.
              </h6>
              <div>
                <label>Request JSON</label>
                <textarea
                  disabled
                  id="configapi_req_json"
                  :class="'form-control ' + json_request_class"
                  placeholder="Request JSON data here..."
                  rows="23"
                  v-model="request_json_case_2"
                  style="color: black"
                ></textarea>
              </div>
              <br />
              <div>
                <label>Request JSON Editable</label>
                <br />
                <div class="radio" style="padding-left: 15%">
                  <label>
                    <input type="radio" disabled checked />
                    <span class="icn" id="configapi_true_icn"></span> True
                  </label>
                  <label>
                    <input type="radio" disabled />
                    <span class="icn"></span> False
                  </label>
                </div>
              </div>
              <div>
                <label>Request JSON Parameters</label>
                <input
                  disabled
                  class="form-control"
                  v-model="input_from_user_case_2"
                  style="color: black"
                />
              </div>
            </div>
            <div>
              <br />
              <br />
              <div class="input-group">
                <h6>Example 3 :</h6>
                <h6 class="hclass6">
                  Whenever the request json parameters are set from session or
                  cookies or some source and not from the user input, in such
                  cases check "False" at Request JSON Editable
                </h6>
              </div>

              <div>
                <label>Request JSON</label>
                <textarea
                  disabled
                  id="configapi_req_json"
                  :class="'form-control ' + json_request_class"
                  placeholder="Request JSON data here..."
                  rows="5"
                  v-model="request_json_case_3"
                  style="color: black"
                ></textarea>
              </div>
              <br />
              <div>
                <label>Request JSON Editable</label>
                <br />
                <div class="radio" style="padding-left: 15%">
                  <label>
                    <input type="radio" disabled />
                    <span class="icn" id="configapi_true_icn"></span> True
                  </label>
                  <label>
                    <input type="radio" disabled checked />
                    <span class="icn"></span> False
                  </label>
                </div>
              </div>
              <br />
              <!-- <h6 class="hclass6">
                <span class="noteclass">Note:-</span>Chatbot will take all the json keys from session , cookies, etc.
              </h6>-->
            </div>
            <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
            >
              <img src="/img/close-icn.png" alt />
            </button>
          </div>
        </div>
      </div>
    </div>
    <div
      class="modal fade dash-modal"
      id="file_upload"
      tabindex="-1"
      role="dialog"
      aria-labelledby="exampleModalCenterTitle"
      aria-hidden="true"
      data-backdrop="static"
      data-keyboard="false"
    >
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-body">
            <div class="modal-head d-flex align-items-center">
              <div class="head-icn">
                <img src="/img/msg-blue.png" alt />
              </div>
              <h3>{{tlt('intent_model_upload_file_label')}}</h3>
            </div>
            <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
              @click="empty_variable"
            >
              <img src="/img/close-icn.png" alt />
            </button>
            <form @submit="file_submit">
              <div class="form-group">
                <div class="custom-file">
                  <input
                    type="file"
                    accept=".csv"
                    class="custom-file-input"
                    @change="fileinput_csv"
                    id="inputGroupFilecsv"
                    aria-describedby="inputGroupFileAddoncsv"
                  />
                  <label
                    style="font-weight: 400; line-height: 15px"
                    class="custom-file-label form-control"
                    for="file"
                    >{{ file_label_csv }}</label
                  >
                </div>
                <p class="mt-2" style="color: #fa0000; font-size: 0.85rem">
                  {{tlt('intent_model_upload_file_desc_note')}}
                </p>
              </div>
              <div class="btn-wrap text-right">
                <a href="#" @click="download_sample_file">
                  {{tlt('intent_model_download_sample_file_label')}}
                  <i
                    class="fa fa-spinner fa-spin"
                    v-show="spinnerOnFileDownload"
                  ></i>
                </a>
                <button
                  type="button"
                  class="btn btn-link"
                  @click="empty_variable"
                  data-dismiss="modal"
                >
                  {{tlt('intent_page_cancel_btn')}}
                </button>
                <button type="submit" class="darkblue-btn">{{tlt('intent_page_submit_btn')}}</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
"},null]}