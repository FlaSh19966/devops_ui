{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/components/LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/components/LineChart.vue","mtime":1660042032583},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/portal/components","sourcesContent":["<template>\n  <section data-root>\n    <div data-line-chart :id=\"chartId\" ref=\"chart\" :style=\"chartStyle\">\n      <div v-if=\"!isChartOptionsValid\" class=\"invalid-options\">\n        <div>Line Chart</div>\n        <div v-if=\"!hasData\">No chart data provided</div>\n        <div v-if=\"!hasXKey\">No x-axis key defined for data</div>\n        <div v-if=\"!hasYKey\">No y-axis key defined for data</div>\n      </div>\n    </div>\n    <div data-line-chart-legend>\n      <div class=\"legend-key\">Key</div>\n      <ul>\n        <li class=\"legend-series\" v-for=\"(d,i) in chartData\" :key=\"d.name\">\n          <div class=\"legend-icon\" :style=\"`background-color: ${ordinalColors(i)}`\"></div>\n          <div class=\"legend-text\">{{graph_label(d.name)}}</div>\n        </li>\n      </ul>\n    </div>\n    <div class=\"line-chart-tooltip\" :data-tooltip=\"chartId\"></div>\n  </section>\n</template>\n\n<script>\nimport _ from \"lodash\";\nimport Popper from \"popper.js\";\nimport { scaleTime, scaleLinear, scaleOrdinal } from \"d3-scale\";\nimport { line } from \"d3-shape\";\nimport { select, selectAll, mouse } from \"d3-selection\";\nimport { bisector, extent, max } from \"d3-array\";\nimport { axisBottom, axisLeft } from \"d3-axis\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport { transition } from \"d3-transition\";\nimport { timeParse, timeFormat } from \"d3-time-format\";\nimport { format as d3format } from \"d3-format\";\nimport {\n  timeSecond,\n  timeMinute,\n  timeHour,\n  timeDay,\n  timeMonth,\n  timeWeek,\n  timeYear\n} from \"d3-time\";\nconst d3 = {\n  select,\n  selectAll,\n  mouse,\n  bisector,\n  extent,\n  max,\n  axisBottom,\n  axisLeft,\n  transition,\n  timeParse,\n  timeFormat,\n  timeSecond,\n  timeMinute,\n  timeHour,\n  timeDay,\n  timeMonth,\n  timeWeek,\n  timeYear,\n  line,\n  schemeCategory10,\n  scaleTime,\n  scaleLinear,\n  scaleOrdinal,\n  format: d3format\n};\n\nexport default {\n  props: {\n    chartId: {\n      type: String,\n      default: () => `linechart-${Date.now()}`\n    },\n    colors: { type: Array, default: () => d3.schemeCategory10 },\n    width: { type: String, default: \"100%\" },\n    height: { type: String, default: \"300px\" },\n    xAxisLabel: { type: String, default: null },\n    yAxisLabel: { type: String, default: null },\n    xKey: { type: String, required: true /* date */ },\n    yKey: { type: String, required: true /* price */ },\n    interval: { type: String, default: \"year\" },\n    data: {\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    ordinalColors() {\n      return d3.scaleOrdinal(this.colors);\n    },\n    chartStyle() {\n      return {\n        width: this.width,\n        height: this.height\n      };\n    },\n    hasData() {\n      return this.data.length !== 0;\n    },\n    hasXKey() {\n      return !!this.xKey;\n    },\n    hasYKey() {\n      return !!this.yKey;\n    },\n    isChartOptionsValid() {\n      return this.hasData && this.hasXKey && this.hasYKey;\n    },\n    chartData() {\n      const parseDate = date => {\n        const dateFormat = \"%d/%m/%Y\";\n        const r = d3.timeParse(dateFormat)(date);\n        if (!r) throw Error(`String date format expected: ${dateFormat}`);\n        return r;\n      };\n      return _.map(this.data, o => ({\n        ...o,\n        values: _.map(o.values, d => ({\n          x: parseDate(d[this.xKey]),\n          y: +d[this.yKey]\n        }))\n      }));\n    },\n    chartHeight() {\n      return this.$refs.chart.clientHeight;\n    },\n    chartWidth() {\n      return this.$refs.chart.clientWidth;\n    },\n    tooltipEl() {\n      return document.querySelector(`[data-tooltip='${this.chartId}']`);\n    },\n    xAxisMax() {\n      return _.max(this.chartData.map(({ values }) => values.length));\n    },\n    longestSeries() {\n      return _.find(this.chartData, d => d.values.length === this.xAxisMax);\n    },\n    xAxisTicksByInterval() {\n      const { interval, xAxisMax } = this;\n      const axisBy = {\n        // year: d3.timeYear,\n        // day: d3.timeDay,\n        // week: d3.timeWeek,\n        // month: d3.timeMonth\n      };\n      return axisBy[xAxisMax] || xAxisMax;\n    }\n  },\n  watch: {\n    data() {\n      this.renderChart();\n    }\n  },\n  methods: {\n    multiDateFormat(date, i = this.getIndexOfFocusPoint(date)) {\n      // const  formatMillisecond = d3.timeFormat('.%L'),\n      // formatSecond = d3.timeFormat(':%S'),\n      // formatMinute = d3.timeFormat('%I:%M'),\n      // formatHour = d3.timeFormat('%I %p'),\n      // formatWeek = d3.timeFormat('Week %U'),\n      // formatMonth = d3.timeFormat('%B'),\n\n      const formatBy = {\n        day: d3.timeFormat(\"%b %Y\"),\n        // week: d3.timeFormat(`Week ${i + 1}`),\n        month: d3.timeFormat(\"%B\"),\n        quarter: d3.timeFormat(`Quarter ${i + 1}`),\n        year: d3.timeFormat(\"%Y\")\n      };\n\n      const formatter = formatBy[this.interval];\n      // const formatter =\n      //   (d3.timeSecond(date) < date && formatMillisecond) ||\n      //   (d3.timeMinute(date) < date && formatSecond) ||\n      //   (d3.timeHour(date) < date && formatMinute) ||\n      //   (d3.timeDay(date) < date && formatHour) ||\n      //   (d3.timeMonth(date) < date\n      //     ? (d3.timeWeek(date) < date && formatDay) || formatWeek\n      //     : (d3.timeYear(date) < date && formatMonth) || formatYear);\n\n      // console.log(`${date} formatter:`, formatter);\n      return formatter && _.escape(formatter(date));\n    },\n\n    getDatumInSeries({ series: { values }, xPoint, focusPoint }) {\n      const bisectDate = d3.bisector(d => d.x).left;\n      const i = bisectDate(values, xPoint, 1);\n      const d0 = values[i - 1];\n      const d1 = values[i] || {};\n      const closestD = xPoint - d0.x > d1.x - xPoint ? d1 : d0;\n      const xPointMinusClosestD = Math.abs(xPoint - closestD.x);\n      const focusPointMinusXPoint = Math.abs(xPoint - focusPoint);\n      const r = focusPoint\n        ? xPointMinusClosestD > focusPointMinusXPoint\n          ? null\n          : closestD\n        : closestD;\n      // console.log(`r:`, r);\n      return r;\n    },\n    getDateSansTime(date) {\n      return `${date.getDate()}-${date.getMonth()}-${date.getFullYear()}`;\n    },\n    getIndexOfFocusPoint(focusPoint) {\n      const { getDateSansTime, longestSeries } = this;\n      return _.findIndex(\n        longestSeries.values,\n        d => getDateSansTime(d.x) === getDateSansTime(focusPoint)\n      );\n    },\n    initTooltipPopper(tooltipRefEl, tooltipEl) {\n      return new Popper(tooltipRefEl, tooltipEl, {\n        placement: \"left\",\n        modifiers: {\n          preventOverflow: {\n            boundariesElement: document.querySelector(`#${this.chartId}`)\n          },\n          offset: {\n            offset: \"0, 8px\"\n          },\n          flip: { behavior: [\"left\", \"right\"] }\n        }\n      });\n    },\n    composeTooltipHTML({ focusDataPoints, focusPoint }) {\n      return `\n        <div class=\"line-chart-tooltip-title\">${this.multiDateFormat(\n          focusPoint\n        )}</div>\n        <div class=\"series-container\">\n          ${focusDataPoints\n            .map(\n              d => `\n                <div class=\"series-row\">\n                  <span class=\"color-bar\" style=\"background-color:${_.escape(\n                    d.color\n                  )}\">&nbsp;</span>\n                  <div class=\"series-info\">\n                    <div class=\"series-name\">${_.escape(d.series)}</div>\n                    <div class=\"series-value\">${_.escape(d.y)}</div>\n                  </div>\n                </div>\n              `\n            )\n            .join(\"\")}\n        </div>\n        <div class=\"popper-arrow\" x-arrow=\"\"></div>\n      `;\n    },\n    renderChart() {\n      const c = this;\n      const {\n        ordinalColors: colors,\n        chartData: data,\n        isChartOptionsValid,\n        chartId,\n        chartWidth,\n        chartHeight,\n        getDatumInSeries,\n        tooltipEl,\n        multiDateFormat,\n        longestSeries,\n        xAxisTicksByInterval,\n        initTooltipPopper,\n        composeTooltipHTML,\n        xAxisLabel,\n        yAxisLabel\n      } = c;\n      if (!isChartOptionsValid) return;\n\n      const axisOffset = 16;\n      const labelOffset = 21 * 1.75 + axisOffset;\n\n      const margin = {\n        top: 30,\n        left: 100 + (yAxisLabel ? labelOffset : 0),\n        right: 30,\n        bottom: 30 + (xAxisLabel ? labelOffset : 0)\n      };\n      const width = chartWidth - margin.left - margin.right;\n      const height = chartHeight - margin.top - margin.bottom;\n\n      /* Scales */\n      const xScale = d3\n        .scaleTime()\n        .domain(d3.extent(longestSeries.values, d => d.x))\n        .range([0, width]);\n      \n      const yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(longestSeries.values, d => d.y)])\n        .range([height - 0, 0]);\n\n      /* draw line fn for each series */\n      const drawLine = ({ values }) =>\n        d3\n          .line()\n          .x(d => xScale(d.x))\n          .y(d => yScale(d.y))(values);\n\n      const tooltip = d3.select(tooltipEl);\n\n      /* remove previously rendered, if any */\n      d3.select(`#${chartId} svg`).remove();\n      d3.select(`#${chartId} div`).remove();\n      tooltip.html(\"\");\n\n      /* SVG */\n      const svg = d3\n        .select(`#${chartId}`)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right + \"px\")\n        .attr(\"height\", height + margin.top + margin.bottom + \"px\");\n\n      /* position main g element */\n      const g = svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n      /* add axes */\n      const xAxis = d3\n        .axisBottom(xScale)\n        // .tickSize(0)\n        .tickFormat(multiDateFormat)\n        .ticks(xAxisTicksByInterval);\n\n      g.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(xAxis)\n        .selectAll(\"text\")\n        .attr(\"y\", axisOffset);\n\n      const yAxis = d3\n        .axisLeft(yScale)\n        .tickSize(-width)\n        .ticks(5)\n        .tickFormat(d3.format(\"\"))\n        .scale(yScale.nice());\n\n      g.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxis)\n        .selectAll(\"text\")\n        .attr(\"x\", -axisOffset);\n\n      // Add X axis label\n      const xAxisTicksApproxHeight = 30;\n      const xLabelOffset = xAxisTicksApproxHeight + 21;\n      svg\n        .select(\".x.axis\")\n        .append(\"text\")\n        .text(xAxisLabel)\n        .attr(\"class\", \"line-graph-label\")\n        .attr(\"transform\", `translate(${width / 2}, ${xLabelOffset})`);\n\n      // Add Y axis label\n      svg\n        .select(\".y.axis\")\n        .append(\"text\")\n        .text(yAxisLabel)\n        .attr(\"class\", \"line-graph-label\")\n        .attr(\n          \"transform\",\n          `translate(${-labelOffset}, ${(height - margin.top) / 2}) rotate(-90)`\n        );\n\n      /* add series lines */\n      const lines = g.append(\"g\").attr(\"class\", \"lines\");\n\n      const series = lines\n        .selectAll(\".line-group\")\n        .data(data)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"line-group\");\n\n      series\n        .append(\"path\")\n        .attr(\"class\", \"line\")\n        .attr(\"d\", d => drawLine(d))\n        .style(\"stroke\", (d, i) => colors(i))\n        .style(\"opacity\", \"0.85\");\n\n      /* Tooltip reference point */\n      const tooltipRef = d3\n        .select(`#${chartId}`)\n        .append(\"div\")\n        .attr(\"class\", \"tooltip-ref\");\n\n      let tooltipPopper; /* init once, reuse popper */\n\n      const overlay = g.append(\"rect\");\n      overlay\n        .attr(\"class\", \"overlay\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .on(\"mousemove\", function() {\n          const [mouseX] = d3.mouse(this);\n          const xPoint = xScale.invert(mouseX);\n          const focusDataPoints = []; /* all dots on focused xAxis */\n\n          g.selectAll(\".circle\").remove(); /* remove rendered dots */\n\n          /* determine focus point from mouse hover X */\n          const { x: focusPoint } = getDatumInSeries({\n            series: longestSeries,\n            xPoint\n          });\n\n          /* for each series, render dot, push to array for tooltip render */\n          data.forEach((series, i) => {\n            const d = getDatumInSeries({ series, xPoint, focusPoint });\n            if (!d) return; /* skip if not focus point */\n            focusDataPoints.push({\n              ...d,\n              series: series.name,\n              color: colors(i)\n            });\n\n            /* dot on focus point */\n            const circleRadius = 3;\n            g.append(\"g\")\n              .attr(\"class\", \"circle\")\n              .append(\"circle\")\n              .style(\"fill\", colors(i))\n              .attr(\"cx\", xScale(d.x))\n              .attr(\"cy\", yScale(d.y))\n              .attr(\"r\", circleRadius);\n          });\n          /* update tooltip reference position */\n          tooltipRef\n            .style(\"left\", `calc(${xScale(focusPoint)}px + ${margin.left}px)`)\n            .style(\"transform\", `translateY(-50%)`)\n            .style(\"top\", `calc(50% - ${margin.top}px)`);\n\n          /* compose HTML for tooltip */\n          tooltip.style(\"display\", \"inherit\").html(\n            composeTooltipHTML({\n              focusDataPoints,\n              focusPoint\n            })\n          );\n\n          /* init popper once */\n          if (!tooltipPopper) {\n            const [tooltipRefEl] = tooltipRef.nodes();\n            tooltipPopper = initTooltipPopper(tooltipRefEl, tooltipEl);\n          }\n          /* update popper on mousemove */\n          if (tooltipPopper) tooltipPopper.update();\n        })\n        .on(\"mouseout\", function() {\n          const [mouseX, mouseY] = d3.mouse(this);\n          const maxWidth = overlay.node().getAttribute(\"width\");\n          const maxHeight = overlay.node().getAttribute(\"height\");\n          /* remove dots and tooltips */\n          if (\n            mouseX < 0 ||\n            mouseX >= maxWidth ||\n            mouseY < 0 ||\n            mouseY >= maxHeight\n          ) {\n            g.selectAll(\".circle\").remove();\n            tooltip.html(\"\");\n          }\n        });\n    },\n    graph_label(val){\n    let name_key = {\n      'all conversations':'all_conversations',\n      'user initiated':'user_initiated',\n      'business initiated':'business_initiated',\n      'free tier': 'free_tier',\n      'free entry':'free_entry',\n      'free conversations':'free_conversations',\n      'all paid':'all_paid',\n      'total':'total'\n    }\n     return Object.keys(name_key).find(key => name_key[key] === val);\n    }\n  },\n  mounted() {\n    this.renderChart();\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import \"@/portal/components/assets/base\";\n@import \"@/portal/components/assets/colors\";\n@import \"@/portal/components/assets/font\";\n\n[data-root] {\n  display: flex;\n  > [data-line-chart-legend],\n  > [data-line-chart] {\n    flex-flow: row wrap;\n  }\n  .line-chart-tooltip {\n    flex-direction: column;\n  }\n  [data-line-chart-legend] {\n    text-align: left;\n    width: 30%;\n    padding: 1.5rem;\n    color: $chart-axis-color;\n    border: 1px solid transparent;\n    border-left-color: $chart-border-color;\n    .legend-key {\n      @include titillium-web-semibold;\n      font-size: 1rem;\n      margin-bottom: 0.875rem;\n    }\n    ul {\n      padding: 0;\n      list-style-type: none;\n      li.legend-series {\n        @include titillium-web-regular;\n        font-size: 0.875rem;\n        margin-bottom: 0.875rem;\n        line-height: 1.3125rem;\n        height: 1.3125rem;\n        &:last-child {\n          margin-bottom: 0;\n        }\n        > div {\n          display: inline-block;\n        }\n        .legend-icon {\n          margin-right: 0.625rem;\n          width: 0.625rem;\n          height: 0.625rem;\n        }\n      }\n    }\n  }\n}\n[data-line-chart] {\n  font-size: 0.875rem;\n  position: relative;\n  .invalid-options {\n    border: 1px solid red;\n    padding: 1rem;\n  }\n  .overlay {\n    fill: none;\n    pointer-events: all;\n  }\n  .line {\n    stroke-width: 2;\n    fill: none;\n  }\n  .tick {\n    line {\n      stroke: $chart-border-color;\n    }\n  }\n  .axis {\n    .tick {\n      text {\n        @include titillium-web-regular;\n        font-size: 0.75rem;\n        fill: $chart-axis-color ;\n      }\n    }\n    &.y .domain {\n      display: none;\n    }\n  }\n  .tooltip-ref {\n    position: absolute;\n  }\n  .line-graph-label {\n    @include titillium-web-semibold;\n    font-size: 0.625rem;\n    text-transform: uppercase;\n    fill: $chart-axis-color;\n  }\n}\n\n$arrow-width: 0.5rem;\n.line-chart-tooltip {\n  @extend %transition-all-ease;\n  filter: drop-shadow(0 0px 2px $shadow-color);\n  display: none;\n  border: 1px solid $chart-border-color;\n  padding: 0;\n  background: $white;\n  // width: auto;\n  max-width: 15rem;\n\n  .popper-arrow {\n    width: 0;\n    height: 0;\n    margin: $arrow-width 0;\n    border: $arrow-width solid $white;\n    border-top-color: transparent;\n    border-bottom-color: transparent;\n    position: absolute;\n    top: calc(50% - #{$arrow-width});\n  }\n  &[x-placement^=\"right\"] {\n    margin-left: $arrow-width;\n    .popper-arrow {\n      border-left-width: 0;\n      left: -#{$arrow-width};\n    }\n  }\n  &[x-placement^=\"left\"] {\n    margin-right: $arrow-width;\n    .popper-arrow {\n      border-right-width: 0;\n      right: -#{$arrow-width};\n    }\n  }\n\n  .line-chart-tooltip-title {\n    @include titillium-web-semibold;\n    font-size: 0.875rem;\n    color: $chart-axis-color;\n    padding: 0.625rem 1rem;\n    line-height: 0.875rem;\n    border-bottom: 1px solid $chart-border-color;\n    text-align: left;\n  }\n\n  .series-container {\n    display: flex;\n    flex-flow: row wrap;\n    padding: 0.96875rem 1rem;\n    .series-row {\n      text-align: left;\n      width: 42%;\n      margin-bottom: 1rem;\n      padding-right: 1rem;\n      display: flex;\n      .color-bar {\n        margin-right: 0.59rem;\n        width: 4px;\n        height: 2rem;\n        line-height: 2rem;\n      }\n      .series-name {\n        @include titillium-web-regular;\n        @extend %truncate;\n        font-size: 0.75rem;\n        line-height: 0.875rem;\n        height: 0.875rem;\n        width: 4.5rem;\n      }\n      .series-value {\n        @include titillium-web-bold;\n        font-size: 1rem;\n        line-height: 0.875rem;\n        height: 0.875rem;\n      }\n    }\n  }\n}\n</style>\n"]}]}