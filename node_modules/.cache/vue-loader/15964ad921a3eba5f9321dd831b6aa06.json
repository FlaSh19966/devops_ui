{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Entities.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Entities.vue","mtime":1645594423479},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBTd2FsIGZyb20gInN3ZWV0YWxlcnQyIjsKaW1wb3J0IHN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwppbXBvcnQgYXBpX2NhbGxzIGZyb20gIkAvcG9ydGFsL2FwaV9jYWxscyI7CmltcG9ydCBNdWx0aXNlbGVjdCBmcm9tICJ2dWUtbXVsdGlzZWxlY3QiOwppbXBvcnQgVGVtcGxhdGUgZnJvbSAnLi4vVGVtcGxhdGUudnVlJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsgVGVtcGxhdGUgfSwKICBuYW1lOiJlbnRpdGllcy1jb21wb25lbnQiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpc19hdF9pbl9lbnRpdHk6ZmFsc2UsCiAgICAgIHZhbGlkYXRpb25fbmVlZGVkOiBmYWxzZSwKICAgICAgdmFsaWRhdGlvbl90eXBlOiBudWxsLAogICAgICBjdXJyZW50X3NlbGVjdGVkX3ZhbGlkYXRpb25fbmVlZGVkOiBmYWxzZSwKICAgICAgY3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX3R5cGU6IG51bGwsCiAgICAgIHNhdmVfbmV3X2VudGl0aWVzOiAnJywKICAgICAgZW50aXRpZXNfdmFsdWVfdHlwZTonc3lub255bXMnLAogICAgICBzeW5vbnltc192YWx1ZV9saXN0OiBbewogICAgICAgIHZhbHVlOicnLAogICAgICAgIHN5bm9ueW1zOlsiIl0KICAgICAgfV0sCiAgICAgIHBhdHRlcm5fbGlzdDpbewogICAgICAgIHBhdHRlcm46JycKICAgICAgfV0sCiAgICAgIHNwaW5uZXJPbjogZmFsc2UsCiAgICAgIGNoZWNrZWRfbGlzdDogW10sCiAgICAgIGVudGl0eV9hbHJlYWR5X2V4aXN0czogZmFsc2UsCiAgICAgIGVudGl0eV9hbHJlYWR5X2V4aXN0c19lZGl0OiBmYWxzZSwKICAgICAgcGVuY2lsX3N2ZzonPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxNS41NDYiIGhlaWdodD0iMTUuNDYxIiB2aWV3Qm94PSIwIDAgMTUuNTQ2IDE1LjQ2MSI+PGRlZnM+PHN0eWxlPi5he2ZpbGw6IzllOWU5ZTt9PC9zdHlsZT48L2RlZnM+PGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTc0Ny44ODggLTM1Ni43NjkpIj48cGF0aCBjbGFzcz0iYSIgZD0iTTc1OS40MTYsMzU2Ljc2OWEyLjM1OCwyLjM1OCwwLDAsMSwxLjc3Ny42NjJjLjUzNC41MTMsMS4wNzIsMS4wMjUsMS41NjcsMS41NzVhMi4zLDIuMywwLDAsMS0uMDcxLDMuMzI1Yy0yLjczNiwyLjc2LTUuNDk0LDUuNS04LjIzOCw4LjI1MWExLjM4MSwxLjM4MSwwLDAsMS0uNzU4LjI4OGMtLjcxOS4xNzQtMS40MjkuMzc5LTIuMTQ0LjU3Mi0uOTMyLjI1MS0xLjg2Mi41LTIuNzk1Ljc1MS0uNi4xNTgtLjk4OS0uMjEzLS44MzItLjgwN3EuNjg5LTIuNTk1LDEuNDA2LTUuMTgyYTEuMTY0LDEuMTY0LDAsMCwxLC4yODktLjQ4N3E0LjA5MS00LjEwNyw4LjItOC4yQTIuMjY1LDIuMjY1LDAsMCwxLDc1OS40MTYsMzU2Ljc2OVptLTEuOTg5LDIuOTU2LTYuNTQsNi41MzgsMy4wMjUsMy4wMjQsNi41MzgtNi41MzdabTQuMDIzLDIuMTY1Yy4xMTgtLjEzNS4yMjUtLjI2OS4zNDMtLjM5MmExLjEzNCwxLjEzNCwwLDAsMCwwLTEuNzM0Yy0uNDYtLjQ2Ni0uOTI2LS45MjUtMS4zODgtMS4zOWExLjE2NiwxLjE2NiwwLDAsMC0uODYxLS4zNjhjLS41NzgsMC0uODgxLjQtMS4yMTQuNzZabS0xMi4wODQsOC44NjMsMy4yLS44NjMtMi4zMzctMi4zMzFaIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwKSIvPjxwYXRoIGNsYXNzPSJhIiBkPSJNODEzLjk0Miw0MjIuNmwtLjc4OS0uOCwzLjgyMS0zLjgxOS43ODQuOFoiIHRyYW5zZm9ybT0idHJhbnNsYXRlKC01OS42NDggLTU1Ljk0NykiLz48L2c+PC9zdmc+JywKICAgICAgc2VhcmNoX25hbWU6ICIiLAogICAgICBpc1Zpc2libGVTZWFyY2hDbGVhcjogZmFsc2UsCiAgICAgIGZpbGVfbGFiZWxfY3N2OiAiQ2hvb3NlIGZpbGUiLAogICAgICBzcGlubmVyT25GaWxlRG93bmxvYWQ6IGZhbHNlLAogICAgICBlbnRpdHlfbGlzdDogW10sCiAgICAgIHBhZ2Vfbm86IDEsCiAgICAgIHBlcl9wYWdlOiAxNSwKICAgICAgcGFnZV9hcnJheTogW10sCiAgICAgIHRvdGFsX3BhZ2VzOiBudWxsLAogICAgICBudW1iZXJfb2Zfcm93czogbnVsbCwKICAgICAgaXNFZGl0RW50aXR5OiBmYWxzZSwKICAgICAgaXNfc2VhcmNoX2FjdGl2ZTpmYWxzZSwKICAgICAgb2xkX2VudGl0eV9uYW1lOicnLAogICAgICBjdXJyZW50X3NlbGVjdGVkX2VudGl0eV9oaWdobGlnaHQ6JycsCiAgICAgIGN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5OicnLAogICAgICBjdXJyZW50X3NlbGVjdGVkX2VudGl0eV9pbmRleDowLAogICAgICBjdXJyZW50X3NlbGVjdGVkX3R5cGU6JycsCiAgICAgIGN1cnJlbnRfc2VsZWN0ZWRfaWQ6IG51bGwsCiAgICAgIGN1cnJlbnRfc2VsZWN0ZWRfZGVzY3JpcHRpb246JycsCiAgICAgIGN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzOlt7CiAgICAgICAgdmFsdWU6JycsCiAgICAgICAgc3lub255bXM6WyIiXQogICAgICB9XSwKICAgICAgY3VycmVudF9zZWxlY3RlZF9wYXR0ZXJuOlt7CiAgICAgICAgcGF0dGVybjonJwogICAgICB9XQogICAgfTsKICB9LAogIGNyZWF0ZWQoKXsKICAgIGlmICh0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikucm9sZSA9PSAiU3VwZXJBZG1pbiIpIHsKICAgICAgaWYgKHRoaXMuJHNlc3Npb24uaGFzKCJDb21wYW55SWQiKSkgewogICAgICAgIHRoaXMuY29tcGFueWlkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlJZCIpOwogICAgICAgIHRoaXMuY29tcGFueW5hbWUgPSB0aGlzLiRzZXNzaW9uLmdldCgiQ29tcGFueU5hbWUiKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICAgIHRoaXMuY29tcGFueW5hbWUgPSB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lOwogICAgICAgIHRvYXN0ci53YXJuaW5nKCJQbGVhc2Ugc2VsZWN0IGEgY29tcGFueSBuYW1lIGZyb20gdGhlIGRyb3Bkb3duIik7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuY29tcGFueWlkID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQ7CiAgICAgIHRoaXMuY29tcGFueW5hbWUgPSB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9uYW1lOwogICAgfQogICAgdGhpcy5sb2FkX2VudGl0eSgpOwogIH0sCiAgbW91bnRlZCgpewogICAgdmFyIHZtID0gdGhpczsKICAgICQoJ2FbZGF0YS10YXJnZXQ9IiNlbnRpdHltb2RlbCJdJykub24oJ2NsaWNrJyAsIGZ1bmN0aW9uICgpIHsKICAgICAgaWYodm0uaXNFZGl0RW50aXR5ID09IHRydWUpewogICAgICAgIHZtLnZlcmlmeV9jaGFuZ2VzKCk7CiAgICAgIH1lbHNlewogICAgICAgIHZtLmVtcHR5X3ZhcmlhYmxlKCk7CiAgICAgICAgJCgiI2VudGl0eW1vZGVsIikubW9kYWwoJ3Nob3cnKTsKICAgICAgfQogICAgfSk7CiAgICAkKCIjc2VsZWN0YWxsIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICBpZiAoJCh0aGlzKS5pcygiOmNoZWNrZWQiKSkgewogICAgICAgIC8vICQoJ2RpdjppbnB1dCcpLnByb3AoJ2NoZWNrZWQnLHRydWUpOwogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICB9IGVsc2UgewogICAgICAgIHZtLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgfQogICAgfSk7CiAgfSwKICB3YXRjaDp7CiAgICBjdXJyZW50X3NlbGVjdGVkX2VudGl0eSh2YWwpewogICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5ID0gdmFsLnJlcGxhY2UoL1teYS16QS1aMC05XyBdL2csICIiKTsKICAgIH0sCiAgICBzYXZlX25ld19lbnRpdGllcyh2YWwpewogICAgICB0aGlzLnNhdmVfbmV3X2VudGl0aWVzID0gdmFsLnJlcGxhY2UoL1teYS16QS1aMC05XyBdL2csICIiKTsKICAgIH0sCiAgICBzZWFyY2hfbmFtZSgpIHsKICAgICAgaWYgKHRoaXMuc2VhcmNoX25hbWUgPT09ICIiKSB7CiAgICAgICAgdGhpcy5sb2FkX2VudGl0eSgpOwogICAgICAgIHRoaXMuaXNWaXNpYmxlU2VhcmNoQ2xlYXIgPSBmYWxzZTsKICAgICAgfSBlbHNlIGlmICh0aGlzLnNlYXJjaF9uYW1lICE9PSAiIikgewogICAgICAgIHRoaXMuaXNWaXNpYmxlU2VhcmNoQ2xlYXIgPSB0cnVlOwogICAgICB9CiAgICB9LAogIH0sCiAgYmVmb3JlUm91dGVMZWF2ZSh0bywgZnJvbSwgbmV4dCkgewogICAgaWYgKHRoaXMuaXNFZGl0RW50aXR5KSB7CiAgICAgIHRoaXMudmVyaWZ5X2NoYW5nZXMoKTsKICAgIH0gZWxzZSB7CiAgICAgIG5leHQoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6ewogICAgdmVyaWZ5X2NoYW5nZXMoKSB7CiAgICAgIFN3YWwoewogICAgICAgIHRpdGxlOiAiQXJlIHlvdSBzdXJlPyIsCiAgICAgICAgdGV4dDogIklmIHlvdSBoYXZlIG1hZGUgYW55IGNoYW5nZXMgaW4gdGhlIHByb2R1Y3Qgc2V0dGluZ3MgcGxlYXNlIHNhdmUgdGhlbSBmaXJzdCwgZWxzZSB0aGV5IHdpbGwgZGlzY2FyZGVkISIsCiAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlNhdmUiLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICJDYW5jZWwiLAogICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICB0aGlzLmVkaXRfZW50aXR5KCk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICB0aGlzLmlzRWRpdEVudGl0eSA9IGZhbHNlOwogICAgICAgICAgdGhpcy5sb2FkX2VudGl0eSgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8gcm91dGV0b2Fzc2lzdGFudExheW91dCgpewogICAgLy8gdGhpcy4kcm91dGVyLnB1c2goewogICAgLy8gICAgIG5hbWU6ICJDb252ZXJzYXRpb25hbCBGbG93IiwKICAgIC8vICAgICBwYXJhbXM6e21vZGFsX29wZW5fZW50aXR5X3RhYjogdHJ1ZSAgfQogICAgLy8gICB9KTsKICAgIC8vIH0sCiAgICBjaGVja19jdXJyZW50X2VudGl0eShpbmRleCkgewogICAgICB2YXIgcmV0dXJuX3ZhciA9ICIiOwogICAgICBpZiAodGhpcy5lbnRpdHlfbGlzdFtpbmRleF0uZW50aXR5ID09IHRoaXMuY3VycmVudF9zZWxlY3RlZF9lbnRpdHlfaGlnaGxpZ2h0KSB7CiAgICAgICAgcmV0dXJuX3ZhciArPSAiY3VycmVudC1hY3RpdmUtZW50aXR5IjsKICAgICAgfQogICAgICByZXR1cm4gcmV0dXJuX3ZhcjsKICAgIH0sCiAgICBzaG93X2VudGl0aWVzKGluZGV4KSB7CiAgICAgIHRoaXMuaXNFZGl0RW50aXR5ID0gZmFsc2U7CiAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF9lbnRpdHlfaW5kZXggPSBpbmRleDsKICAgICAgaWYodGhpcy5lbnRpdHlfbGlzdFtpbmRleF0uZW50aXR5LnN1YnN0cmluZygwLDEpID09PSAiQCIpewogICAgICAgIHRoaXMuaXNfYXRfaW5fZW50aXR5ID0gdHJ1ZTsKICAgICAgICB2YXIgbGVuID0gdGhpcy5lbnRpdHlfbGlzdFtpbmRleF0uZW50aXR5Lmxlbmd0aDsKICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5ID0gdGhpcy5lbnRpdHlfbGlzdFtpbmRleF0uZW50aXR5LnN1YnN0cmluZygxLGxlbik7CiAgICAgICAgdGhpcy5vbGRfZW50aXR5X25hbWUgPSB0aGlzLmVudGl0eV9saXN0W2luZGV4XS5lbnRpdHkuc3Vic3RyaW5nKDEsbGVuKTsKICAgICAgfWVsc2V7CiAgICAgICAgdGhpcy5pc19hdF9pbl9lbnRpdHkgPSBmYWxzZTsKICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5ID0gdGhpcy5lbnRpdHlfbGlzdFtpbmRleF0uZW50aXR5OwogICAgICAgIHRoaXMub2xkX2VudGl0eV9uYW1lID0gdGhpcy5lbnRpdHlfbGlzdFtpbmRleF0uZW50aXR5OwogICAgICB9CiAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF9pZCA9IHRoaXMuZW50aXR5X2xpc3RbaW5kZXhdLmlkOwogICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5X2hpZ2hsaWdodCA9IHRoaXMuZW50aXR5X2xpc3RbaW5kZXhdLmVudGl0eTsKICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX3R5cGUgPSB0aGlzLmVudGl0eV9saXN0W2luZGV4XS50eXBlOwogICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsaWRhdGlvbl9uZWVkZWQgPSAgdGhpcy5lbnRpdHlfbGlzdFtpbmRleF0udmFsaWRhdGlvbl9uZWVkZWQ7CiAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX3R5cGUgPSAgdGhpcy5lbnRpdHlfbGlzdFtpbmRleF0udmFsaWRhdGlvbl90eXBlOwogICAgICAvLyB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzID0gdGhpcy5lbnRpdHlfbGlzdFtpbmRleF0udmFsdWVzOwogICAgICBpZiAodGhpcy5jdXJyZW50X3NlbGVjdGVkX3R5cGUgPT0gJ3BhdHRlcm4nKXsKICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfcGF0dGVybiA9IHRoaXMuZW50aXR5X2xpc3RbaW5kZXhdLnZhbHVlczsKICAgICAgfWVsc2UgaWYodGhpcy5jdXJyZW50X3NlbGVjdGVkX3R5cGUgPT0gJ3N5c3RlbScpewogICAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF9kZXNjcmlwdGlvbiA9IHRoaXMuZW50aXR5X2xpc3RbaW5kZXhdLmRlc2NyaXB0aW9uOwogICAgICB9ZWxzZXsKICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzID0gdGhpcy5lbnRpdHlfbGlzdFtpbmRleF0udmFsdWVzOwogICAgICB9CiAgICB9LAogICAgbG9hZF9lbnRpdHkoY3VycmVudF9zZWxlY3RlZF9lbnRpdHlfaW5kZXgpewogICAgICB0aGlzLmlzX3NlYXJjaF9hY3RpdmUgPSBmYWxzZTsKICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgIGF4aW9zCiAgICAgICAgLnBvc3QoCiAgICAgICAgICBhcGlfY2FsbHMuZm9ybV9hdXRvbWF0aW9uX2FkZF9lbnRpdHkoKSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgICAgICAgaXNfZ2V0X2VudGl0eTogdHJ1ZSwKICAgICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZSwKCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9CiAgICAgICAgKQogICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgIGlmKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApewogICAgICAgICAgICB0aGlzLm51bWJlcl9vZl9yb3dzID0gcmVzcG9uc2UuZGF0YS5wYWdlY291bnQ7CiAgICAgICAgICAgIHRoaXMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwodGhpcy5udW1iZXJfb2Zfcm93cyAvIHRoaXMucGVyX3BhZ2UpOwogICAgICAgICAgICB0aGlzLmVudGl0eV9saXN0ID0gcmVzcG9uc2UuZGF0YS5lbnRpdHlfbmFtZXM7CiAgICAgICAgICAgIGlmICh0aGlzLmVudGl0eV9saXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICBpZihCb29sZWFuKGN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5X2luZGV4KSl7CiAgICAgICAgICAgICAgICB0aGlzLnNob3dfZW50aXRpZXMoY3VycmVudF9zZWxlY3RlZF9lbnRpdHlfaW5kZXgpOwogICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgdGhpcy5zaG93X2VudGl0aWVzKDApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgIGlmICgKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICkgewogICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIGNsZWFyX3NlYXJjaF9uYW1lKCkgewogICAgICB0aGlzLnNlYXJjaF9uYW1lID0gIiI7CiAgICB9LAogICAgY2FsbHNlYXJjaCgpIHsKICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDEzKSB7CiAgICAgICAgaWYodGhpcy5pc0VkaXRFbnRpdHkpewogICAgICAgICAgdGhpcy52ZXJpZnlfY2hhbmdlcygpCiAgICAgICAgfWVsc2V7CiAgICAgICAgICB0aGlzLnNlYXJjaF9lbnRpdHkoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzZWFyY2hfZW50aXR5KGN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5X2luZGV4KSB7CiAgICAgIGlmICh0aGlzLnNlYXJjaF9uYW1lICE9ICIiKSB7CiAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gW107CiAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgIGF4aW9zCiAgICAgICAgICAucG9zdCgKICAgICAgICAgICAgYXBpX2NhbGxzLmZvcm1fYXV0b21hdGlvbl9hZGRfZW50aXR5KCksCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogIlBsYXRpbnVtIiwKICAgICAgICAgICAgICBpc19zZWFyY2g6IHRydWUsCiAgICAgICAgICAgICAgc2VhcmNoX2tleTogdGhpcy5zZWFyY2hfbmFtZSwKICAgICAgICAgICAgICBwZXJfcGFnZTogdGhpcy5wZXJfcGFnZSwKICAgICAgICAgICAgICBwYWdlX25vOiAxLAogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfQogICAgICAgICAgKQogICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiRW50aXR5IERvZXMgbm90IEV4aXN0cyIpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHRleHQ6ICJObyBSZXN1bHRzIEZvdW5kIiwKICAgICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHRoaXMubG9hZF9lbnRpdHkoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PT0gIkVudGl0aWVzIFNlYXJjaCBTdWNjZXNzZnVsbHkiKSAKICAgICAgICAgICAgewogICAgICAgICAgICAgIHRoaXMuZW50aXR5X2xpc3QgPSBbXTsKICAgICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSAxOwogICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9ICJ0b2tlbiBpbnZhbGlkIikgewogICAgICAgICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEucGFnZWNvdW50OwogICAgICAgICAgICAgICAgdGhpcy50b3RhbF9wYWdlcyA9IE1hdGguY2VpbCgKICAgICAgICAgICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyAvIHRoaXMucGVyX3BhZ2UKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB0aGlzLmVudGl0eV9saXN0ID0gcmVzcG9uc2UuZGF0YS5lbnRpdGllc19zZWFyY2g7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbnRpdHlfbGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuaXNfc2VhcmNoX2FjdGl2ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIGlmIChCb29sZWFuKGN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5X2luZGV4KSl7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93X2VudGl0aWVzKGN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5X2luZGV4KTsKICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93X2VudGl0aWVzKDApOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHRleHQ6ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLAogICAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgdGltZXI6IDIwMDAsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgdGhpcy5sb2FkX2VudGl0eSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiRW50ZXIgcHJvcGVyIGRhdGEgZm9yIHNlYXJjaGluZyIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGZpbGVfc3VibWl0KCl7CgogICAgfSwKICAgIGZpbGVpbnB1dF9jc3YoKXsKCiAgICB9LAogICAgZG93bmxvYWRfc2FtcGxlX2ZpbGUoKXsKICAgICAgLy8gdGhpcy5zcGlubmVyT25GaWxlRG93bmxvYWQgPSB0cnVlOwogICAgfSwKCiAgICBlbXB0eV92YXJpYWJsZSgpewogICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZW50ZXJfZW50aXRpZXNfbmFtZV9pZCIpLnN0eWxlLmJvcmRlciA9IG51bGw7CiAgICAgIHRoaXMuc2F2ZV9uZXdfZW50aXRpZXMgPSAnJywKICAgICAgdGhpcy5lbnRpdGllc192YWx1ZV90eXBlID0nc3lub255bXMnLAogICAgICB0aGlzLnN5bm9ueW1zX3ZhbHVlX2xpc3QgPSBbewogICAgICAgIHZhbHVlOicnLAogICAgICAgIHN5bm9ueW1zOlsiIl0KICAgICAgfV0sCiAgICAgIHRoaXMucGF0dGVybl9saXN0ID0gW3sKICAgICAgICBwYXR0ZXJuOicnCiAgICAgIH1dLAogICAgICB0aGlzLmVudGl0eV9hbHJlYWR5X2V4aXN0c19lZGl0ID0gIGZhbHNlOwogICAgICB0aGlzLmVudGl0eV9hbHJlYWR5X2V4aXN0cyA9ICBmYWxzZTsKICAgIH0sCiAgICBkb3dubG9hZF9jc3YoKXsKCiAgICB9LAogICAgdHJhaW5fbW9kZWwoKXsKCiAgICB9LAogICAgZGVsZXRlX3NlbGVjdGVkKCl7CiAgICAgIGlmICh0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGggPT09IDApIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgIHRleHQ6ICJObyBFbnRpdHkgU2VsZWN0ZWQgISIsCiAgICAgICAgICB0aW1lcjogMjAwMCwKICAgICAgICB9KTsKICAgICAgfWVsc2UgaWYgKHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgZGVsZXRlX2VudGl0eV9saXN0ID0gW107CiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmNoZWNrZWRfbGlzdCkgewogICAgICAgICAgZGVsZXRlX2VudGl0eV9saXN0LnB1c2goCiAgICAgICAgICAgIHRoaXMuY2hlY2tlZF9saXN0W2ldCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgdGl0bGU6ICJBcmUgeW91IHN1cmU/IiwKICAgICAgICAgIHRleHQ6ICJZb3Ugd29uJ3QgYmUgYWJsZSB0byByZXZlcnQgdGhpcyEiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiWWVzLCBkZWxldGUhISIsCiAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7CiAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSB0cnVlOwogICAgICAgICAgICBheGlvcwogICAgICAgICAgICAgIC5wb3N0KAogICAgICAgICAgICAgICAgYXBpX2NhbGxzLmZvcm1fYXV0b21hdGlvbl9hZGRfZW50aXR5KCksCiAgICAgICAgICAgICAgICB7ICAgICAgCiAgICAgICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgICAgICBpc19kZWxldGU6IHRydWUsCiAgICAgICAgICAgICAgICAgIGVudGl0eTogZGVsZXRlX2VudGl0eV9saXN0LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICkKICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiRW50aXRpZXMgVmFsdWVzIERlbGV0ZWQgU3VjY2Vzc2Z1bGx5Iil7CiAgICAgICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgICAgIHRleHQ6IkVudGl0aWVzIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5IiwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgdGltZXI6IDM1MDAsCiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJTdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1yaWdodCIsCiAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgICAgICAgICBpZih0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGggPT09IHRoaXMuZW50aXR5X2xpc3QubGVuZ3RoICYmIAogICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdlX25vID4xKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gdGhpcy5wYWdlX25vIC0gMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICB0aGlzLmxvYWRfZW50aXR5KCk7CiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIlVzZWQgRW50aXRpZXMgVmFsdWVzIERlbGV0ZWQgU3VjY2Vzc2Z1bGx5Iil7CiAgICAgICAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgICAgICAgIHRleHQ6IkVudGl0eSBoYXMgYmVlbiBkZWxldGVkLCB0aGF0IGlzIHVzZWQgaW4gZGlhbG9nIG5vZGUocykuIFBsZWFzZSBtb2RpZnkgdGhpcyBpbiBkaWFsb2cgbm9kZShzKSBhbHNvIiwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgdGltZXI6IDc1MDAsCiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJpbmZvIiwKICAgICAgICAgICAgICAgICAgICAvLyB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAvLyBwb3NpdGlvbjogInRvcC1yaWdodCIsCiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgICAgICAgICBpZih0aGlzLmNoZWNrZWRfbGlzdC5sZW5ndGggPT09IHRoaXMuZW50aXR5X2xpc3QubGVuZ3RoICYmIAogICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdlX25vID4xKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gdGhpcy5wYWdlX25vIC0gMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICB0aGlzLmxvYWRfZW50aXR5KCk7CiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIkVudGl0eSBWYWx1ZXMgZG9lcyBub3QgRXhpc3RzIikgewogICAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICAgIHRleHQ6CiAgICAgICAgICAgICAgICAgICAgICAiVGhlcmUgd2FzIGFuIGludGVybmFsIHNlcnZlciBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi4iLAogICAgICAgICAgICAgICAgICAgIHRpbWVyOiAzNTAwLAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICAgICAgICB0ZXh0OiJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICAgICAgdGltZXI6IDIwMDAsCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmJpZ19zcGlubmVyID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoIlNvbWUgRXJyb3IgT2NjdXJyZWQuIik7CiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIHNhdmVfZW50aXR5KCl7CiAgICAgIGlmICh0aGlzLmVudGl0eV9hbHJlYWR5X2V4aXN0c3MpewogICAgICAgIFN3YWwoewogICAgICAgICAgdGV4dDogIkFuIEVudGl0eSB3aXRoIHRoaXMgbmFtZSBhbHJlYWR5IGV4aXN0cyIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMzUwMCwKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKHRoaXMuc2F2ZV9uZXdfZW50aXRpZXMgPT09ICIiKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiUGxlYXNlIGVudGVyIGFuIEVudGl0eSBuYW1lIiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAzNTAwLAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoQm9vbGVhbih0aGlzLnZhbGlkYXRpb25fbmVlZGVkKSAmJiAhQm9vbGVhbih0aGlzLnZhbGlkYXRpb25fdHlwZSkpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6ICJQbGVhc2Ugc2VsZWN0IHZhbGlkYXRpb24gdG8gdGhlIGVudGl0eSIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogNDUwMCwKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYodGhpcy5lbnRpdGllc192YWx1ZV90eXBlID09PSAncGF0dGVybicpewogICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnBhdHRlcm5fbGlzdC5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgIGlmKHRoaXMucGF0dGVybl9saXN0W2luZGV4XVsncGF0dGVybiddID09PSAnJyB8fAogICAgICAgICAgdGhpcy5wYXR0ZXJuX2xpc3RbaW5kZXhdWydwYXR0ZXJuJ10gPT09IG51bGwpCiAgICAgICAgICB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRleHQ6ICJQYXR0ZXJuIGNhbm5vdCBiZSBibGFuayIsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHRpbWVyOiAzNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfWVsc2UgaWYodGhpcy5lbnRpdGllc192YWx1ZV90eXBlID09PSAnc3lub255bXMnKXsKICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zeW5vbnltc192YWx1ZV9saXN0Lmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgaWYodGhpcy5zeW5vbnltc192YWx1ZV9saXN0W2luZGV4XVsndmFsdWUnXSA9PT0gJycgfHwKICAgICAgICAgIHRoaXMuc3lub255bXNfdmFsdWVfbGlzdFtpbmRleF1bJ3ZhbHVlJ10gPT09IG51bGwpCiAgICAgICAgICB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRleHQ6ICJWYWx1ZSBjYW5ub3QgYmUgYmxhbmsiLAogICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICB0aW1lcjogMzUwMCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB0aGlzLnN5bm9ueW1zX3ZhbHVlX2xpc3RbaW5kZXhdWydzeW5vbnltcyddLmxlbmd0aDsgaisrKXsKICAgICAgICAgICAgaWYodGhpcy5zeW5vbnltc192YWx1ZV9saXN0W2luZGV4XVsnc3lub255bXMnXVtqXSA9PT0gJycgfHwKICAgICAgICAgIHRoaXMuc3lub255bXNfdmFsdWVfbGlzdFtpbmRleF1bJ3N5bm9ueW1zJ11bal0gPT09IG51bGwpCiAgICAgICAgICB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRleHQ6ICJTeW5vbnltcyBjYW5ub3QgYmUgYmxhbmsiLAogICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICB0aW1lcjogMzUwMCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5iaWdfc3Bpbm5lciA9IHRydWU7CiAgICAgIGF4aW9zCiAgICAgICAgLnBvc3QoCiAgICAgICAgICBhcGlfY2FsbHMuZm9ybV9hdXRvbWF0aW9uX2FkZF9lbnRpdHkoKSwKICAgICAgICAgIHsgICAgICAKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIGlzX3NhdmU6IHRydWUsCiAgICAgICAgICAgIGVudGl0eV9kZXRhaWxzOnsKICAgICAgICAgICAgICAiZW50aXR5IjogIkAiICsgdGhpcy5zYXZlX25ld19lbnRpdGllcywKICAgICAgICAgICAgICAidHlwZSI6IHRoaXMuZW50aXRpZXNfdmFsdWVfdHlwZSwKICAgICAgICAgICAgICAidmFsaWRhdGlvbl9uZWVkZWQiOiB0aGlzLnZhbGlkYXRpb25fbmVlZGVkLAogICAgICAgICAgICAgICJ2YWxpZGF0aW9uX3R5cGUiOiB0aGlzLnZhbGlkYXRpb25fbmVlZGVkID09PSB0cnVlID8gdGhpcy52YWxpZGF0aW9uX3R5cGUgOiBudWxsLAogICAgICAgICAgICAgICJ2YWx1ZXMiOiB0aGlzLmVudGl0aWVzX3ZhbHVlX3R5cGUgPT0gJ3BhdHRlcm4nPwogICAgICAgICAgICAgICAgdGhpcy5wYXR0ZXJuX2xpc3Q6dGhpcy5zeW5vbnltc192YWx1ZV9saXN0CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0KICAgICAgICApCiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICB0aGlzLmJpZ19zcGlubmVyID0gZmFsc2U7CiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT0gIkVudGl0eSBEYXRhIFNhdmVkIFN1Y2Nlc3NmdWxseSIpewogICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICB0ZXh0OiJ2YWx1ZSBzYXZlZCBzdWNjZXNzZnVsbHkiLAogICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICB0aW1lcjogMzUwMCwKICAgICAgICAgICAgICB0aXRsZTogIlN1Y2Nlc3MiLAogICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLXJpZ2h0IiwKICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgJCgiI2VudGl0eW1vZGVsIikubW9kYWwoImhpZGUiKTsKICAgICAgICAgIHRoaXMuZW1wdHlfdmFyaWFibGUoKTsKICAgICAgICAgIHRoaXMubG9hZF9lbnRpdHkoKTsKICAgICAgICAgIH1lbHNlIGlmKHJlc3BvbnNlLmRhdGEuTVNHID09ICJJbnZhbGlkIFJlZ2V4IHBhdHRlcm4iKXsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgcG9zaXRpb246InRvcC1yaWdodCIsCiAgICAgICAgICAgICAgdGV4dDoiSW52YWxpZCBQYXR0ZXJuISBQbGVhc2UgZW50ZXIgYSBwcm9wZXIgcGF0dGVybiIsCiAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgIHRpbWVyOjMwMDAsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246ZmFsc2UsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgZWxzZXsKICAgICAgICAgICAgc3dhbCh7CiAgICAgICAgICAgICAgdGV4dDoiSW50ZXJuYWwgU2VydmVyIEVycm9yIiwKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgdGhpcy5iaWdfc3Bpbm5lciA9IGZhbHNlOwogICAgICAgICAgdG9hc3RyLmVycm9yKCJTb21lIEVycm9yIE9jY3VycmVkLiIpOwogICAgICAgICAgaWYgKAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9LAogICAgZWRpdF9lbnRpdHkoKXsKICAgICAgaWYgKHRoaXMuZW50aXR5X2FscmVhZHlfZXhpc3RzX2VkaXQpewogICAgICAgIFN3YWwoewogICAgICAgICAgdGV4dDogIkFuIEVudGl0eSB3aXRoIHRoaXMgbmFtZSBhbHJlYWR5IGV4aXN0cyIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMzUwMCwKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKHRoaXMub2xkX2VudGl0eV9uYW1lID09IHRoaXMuY3VycmVudF9zZWxlY3RlZF9lbnRpdHkpIHsKICAgICAgICB2YXIgZW50aXR5X3RvX3NlbmQgPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBlbnRpdHlfdG9fc2VuZCA9IHRoaXMuaXNfYXRfaW5fZW50aXR5ID09IGZhbHNlID8gdGhpcy5vbGRfZW50aXR5X25hbWUgOiAiQCIgKyB0aGlzLm9sZF9lbnRpdHlfbmFtZTsKCiAgICAgIH0KICAgICAgaWYgKHRoaXMuY3VycmVudF9zZWxlY3RlZF9lbnRpdHkgPT09ICIiKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiUGxlYXNlIGVudGVyIGFuIEVudGl0eSBuYW1lIiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgIHRpbWVyOiAzNTAwLAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoQm9vbGVhbih0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsaWRhdGlvbl9uZWVkZWQpICYmICFCb29sZWFuKHRoaXMuY3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX3R5cGUpKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiUGxlYXNlIHNlbGVjdCB2YWxpZGF0aW9uIHRvIHRoZSBlbnRpdHkiLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDQ1MDAsCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmKHRoaXMuY3VycmVudF9zZWxlY3RlZF90eXBlID09PSAncGF0dGVybicpewogICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfcGF0dGVybi5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgIGlmKHRoaXMuY3VycmVudF9zZWxlY3RlZF9wYXR0ZXJuW2luZGV4XVsncGF0dGVybiddID09PSAnJyB8fAogICAgICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX3BhdHRlcm5baW5kZXhdWydwYXR0ZXJuJ10gPT09IG51bGwpCiAgICAgICAgICB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHRleHQ6ICJQYXR0ZXJuIGNhbm5vdCBiZSBibGFuayIsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHRpbWVyOiAzNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfWVsc2UgaWYodGhpcy5jdXJyZW50X3NlbGVjdGVkX3R5cGUgPT09ICdzeW5vbnltcycpewogICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzLmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgaWYodGhpcy5jdXJyZW50X3NlbGVjdGVkX3ZhbHVlc1tpbmRleF1bJ3ZhbHVlJ10gPT09ICcnIHx8CiAgICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzW2luZGV4XVsndmFsdWUnXSA9PT0gbnVsbCkKICAgICAgICAgIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogIlZhbHVlIGNhbm5vdCBiZSBibGFuayIsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHRpbWVyOiAzNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHRoaXMuY3VycmVudF9zZWxlY3RlZF92YWx1ZXNbaW5kZXhdWydzeW5vbnltcyddLmxlbmd0aDsgaisrKXsKICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50X3NlbGVjdGVkX3ZhbHVlc1tpbmRleF1bJ3N5bm9ueW1zJ11bal0gPT09ICcnIHx8CiAgICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzW2luZGV4XVsnc3lub255bXMnXVtqXSA9PT0gbnVsbCkKICAgICAgICAgIHsKICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgdGV4dDogIlN5bm9ueW1zIGNhbm5vdCBiZSBibGFuayIsCiAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHRpbWVyOiAzNTAwLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLmJpZ19zcGlubmVyID0gdHJ1ZTsKICAgICAgYXhpb3MKICAgICAgICAucG9zdCgKICAgICAgICAgIGFwaV9jYWxscy5mb3JtX2F1dG9tYXRpb25fYWRkX2VudGl0eSgpLAogICAgICAgICAgeyAgICAgIAogICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgaXNfZWRpdDogdHJ1ZSwKICAgICAgICAgICAgb2xkX2VudGl0eV9uYW1lOiBlbnRpdHlfdG9fc2VuZCwKICAgICAgICAgICAgZW50aXR5OiB0aGlzLmlzX2F0X2luX2VudGl0eSA9PSBmYWxzZSA/IHRoaXMuY3VycmVudF9zZWxlY3RlZF9lbnRpdHkgOiAiQCIgKyB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5LAogICAgICAgICAgICBlZGl0X2VudGl0eV9kZXRhaWw6ewogICAgICAgICAgICAgICJ0eXBlIjp0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdHlwZSwKICAgICAgICAgICAgICAiaWQiOnRoaXMuY3VycmVudF9zZWxlY3RlZF9pZCwKICAgICAgICAgICAgICAidmFsaWRhdGlvbl9uZWVkZWQiOiB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsaWRhdGlvbl9uZWVkZWQsCiAgICAgICAgICAgICAgInZhbGlkYXRpb25fdHlwZSI6IHRoaXMuY3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX25lZWRlZCA9PT0gdHJ1ZSA/IHRoaXMuY3VycmVudF9zZWxlY3RlZF92YWxpZGF0aW9uX3R5cGUgOiBudWxsLAogICAgICAgICAgICAgICJ2YWx1ZXMiOnRoaXMuY3VycmVudF9zZWxlY3RlZF90eXBlID09ICdwYXR0ZXJuJz8KICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF9wYXR0ZXJuOnRoaXMuY3VycmVudF9zZWxlY3RlZF92YWx1ZXMKICAgICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgICkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiRW50aXRpZXMgRGF0YSBFZGl0ZWQgU3VjY2Vzc2Z1bGx5Iil7CiAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgIHRleHQ6IkVudGl0eSBlZGl0ZWQgc3VjY2Vzc2Z1bGx5IiwKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgdGltZXI6IDM1MDAsCiAgICAgICAgICAgICAgdGl0bGU6ICJTdWNjZXNzIiwKICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1yaWdodCIsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgLy8gdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgICAgICBpZih0aGlzLmlzX3NlYXJjaF9hY3RpdmUgPT09IHRydWUpewogICAgICAgICAgICAgIHRoaXMuc2VhcmNoX2VudGl0eSh0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5X2luZGV4KTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgdGhpcy5sb2FkX2VudGl0eSh0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfZW50aXR5X2luZGV4KTsKICAgICAgICAgICAgfQogICAgICAgICAgfWVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJVc2VkIEVudGl0aWVzIERhdGEgRWRpdGVkIFN1Y2Nlc3NmdWxseSIpewogICAgICAgICAgICBzd2FsKHsKICAgICAgICAgICAgICB0ZXh0OiJFbnRpdHkgaGFzIGJlZW4gZWRpdGVkLCB0aGF0IGlzIHVzZWQgaW4gZGlhbG9nIG5vZGUocykuIFBsZWFzZSBtb2RpZnkgdGhpcyBpbiBkaWFsb2cgbm9kZShzKSBhbHNvIiwKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgdGltZXI6IDc1MDAsCiAgICAgICAgICAgICAgdGl0bGU6ICJTdWNjZXNzIiwKICAgICAgICAgICAgICAvLyB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAvLyBwb3NpdGlvbjogInRvcC1yaWdodCIsCiAgICAgICAgICAgICAgLy8gc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgLy8gdGhpcy5lbXB0eV92YXJpYWJsZSgpOwogICAgICAgICAgICBpZih0aGlzLmlzX3NlYXJjaF9hY3RpdmUgPT09IHRydWUpewogICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hfZW50aXR5KHRoaXMuY3VycmVudF9zZWxlY3RlZF9lbnRpdHlfaW5kZXgpOwogICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgIHRoaXMubG9hZF9lbnRpdHkodGhpcy5jdXJyZW50X3NlbGVjdGVkX2VudGl0eV9pbmRleCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHN3YWwoewogICAgICAgICAgICAgIHRleHQ6IkludGVybmFsIFNlcnZlciBFcnJvciIsCiAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICB0aW1lcjogMjAwMCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgIHRoaXMuYmlnX3NwaW5uZXIgPSBmYWxzZTsKICAgICAgICAgIHRvYXN0ci5lcnJvcigiU29tZSBFcnJvciBPY2N1cnJlZC4iKTsKICAgICAgICAgIGlmICgKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICkgewogICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIHNlYXJjaF9lbnRpdGllc19uYW1lKCl7CiAgICAgIGF4aW9zCiAgICAgICAgLnBvc3QoCiAgICAgICAgICBhcGlfY2FsbHMuZm9ybV9hdXRvbWF0aW9uX2FkZF9lbnRpdHkoKSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgICAgICAgaXNfc2VhcmNoX2VudGl0eTogdHJ1ZSwKICAgICAgICAgICAgZW50aXR5OiAiQCIgKyB0aGlzLnNhdmVfbmV3X2VudGl0aWVzLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgICkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiTm90IEV4aXN0cyIpIHsKICAgICAgICAgICAgdGhpcy5lbnRpdHlfYWxyZWFkeV9leGlzdHMgPSBmYWxzZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVudGVyX2VudGl0aWVzX25hbWVfaWQiKS5zdHlsZS5ib3JkZXIgPW51bGw7CiAgICAgICAgICAgIGlmKHRoaXMuc2F2ZV9uZXdfZW50aXRpZXMgIT0gIiIpewogICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbnRlcl9lbnRpdGllc19uYW1lX2lkIikuc3R5bGUuYm9yZGVyID0KICAgICAgICAgICAgICAiMXB4IHNvbGlkICMwMGYwMDAiOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJBbHJlYWR5IEV4aXN0cyIpIHsKICAgICAgICAgICAgdGhpcy5lbnRpdHlfYWxyZWFkeV9leGlzdHMgPSB0cnVlOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZW50ZXJfZW50aXRpZXNfbmFtZV9pZCIpLnN0eWxlLmJvcmRlciA9CiAgICAgICAgICAgICIxcHggc29saWQgcmVkIjsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgaWYgKAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9LAogICAgZW50ZXJfZW50aXR5X2VkaXQoKXsKICAgICAgYXhpb3MKICAgICAgICAucG9zdCgKICAgICAgICAgIGFwaV9jYWxscy5mb3JtX2F1dG9tYXRpb25fYWRkX2VudGl0eSgpLAogICAgICAgICAgewogICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uLAogICAgICAgICAgICBpc19zZWFyY2hfZW50aXR5OiB0cnVlLAogICAgICAgICAgICBlbnRpdHk6IHRoaXMuaXNfYXRfaW5fZW50aXR5ID09IGZhbHNlID8gdGhpcy5jdXJyZW50X3NlbGVjdGVkX2VudGl0eSA6ICJAIiArIHRoaXMuY3VycmVudF9zZWxlY3RlZF9lbnRpdHksCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9CiAgICAgICAgKQogICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJOb3QgRXhpc3RzIikgewogICAgICAgICAgICB0aGlzLmVudGl0eV9hbHJlYWR5X2V4aXN0c19lZGl0ID0gZmFsc2U7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbnRlcl9lbnRpdHlfZWRpdF9pZCIpLnN0eWxlLmJvcmRlciA9bnVsbDsKICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50X3NlbGVjdGVkX2VudGl0eSAhPSAiIil7CiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVudGVyX2VudGl0eV9lZGl0X2lkIikuc3R5bGUuYm9yZGVyID0KICAgICAgICAgICAgICAiMXB4IHNvbGlkICMwMGYwMDAiOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJBbHJlYWR5IEV4aXN0cyIpIHsKICAgICAgICAgICAgaWYgKHRoaXMub2xkX2VudGl0eV9uYW1lID09IHRoaXMuY3VycmVudF9zZWxlY3RlZF9lbnRpdHkpewogICAgICAgICAgICAgIHRoaXMuZW50aXR5X2FscmVhZHlfZXhpc3RzX2VkaXQgPSBmYWxzZTsKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZW50ZXJfZW50aXR5X2VkaXRfaWQiKS5zdHlsZS5ib3JkZXIgPW51bGw7ICAKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLmVudGl0eV9hbHJlYWR5X2V4aXN0c19lZGl0ID0gdHJ1ZTsKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZW50ZXJfZW50aXR5X2VkaXRfaWQiKS5zdHlsZS5ib3JkZXIgPQogICAgICAgICAgICAgICIxcHggc29saWQgcmVkIjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICApIHsKICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0sCiAgICBlZGl0X2VudGl0eV9kZXRhaWxzKCl7CiAgICAgIGlmICghdGhpcy5pc0VkaXRFbnRpdHkpIHsKICAgICAgICB0aGlzLmlzRWRpdEVudGl0eSA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5pc0VkaXRFbnRpdHkgPSBmYWxzZTsKICAgICAgICB0aGlzLmxvYWRfZW50aXR5KCk7CiAgICAgIH0KICAgIH0sCiAgICBwYWdlX3JlcXVpcmUocGFnZSkgewogICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgIHRoaXMuY2hlY2tlZF9saXN0ID0gW107CiAgICAgIGlmIChwYWdlID09IDAgfHwgcGFnZSA9PSB0aGlzLnRvdGFsX3BhZ2VzICsgMSkgewogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLnNlYXJjaF9uYW1lID09ICIiKSB7CiAgICAgICAgICBpZiAocGFnZSA9PSAiLi4ucyIpIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCgxICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgICAgfSBlbHNlIGlmIChwYWdlID09ICIuLi5sIikgewogICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBNYXRoLmNlaWwoKHRoaXMudG90YWxfcGFnZXMgKyB0aGlzLnBhZ2Vfbm8pIC8gMik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnBhZ2Vfbm8gPSBwYWdlOwogICAgICAgICAgfQogICAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgICAgYXhpb3MKICAgICAgICAgICAgLnBvc3QoCiAgICAgICAgICAgICAgYXBpX2NhbGxzLmZvcm1fYXV0b21hdGlvbl9hZGRfZW50aXR5KCksCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uLAogICAgICAgICAgICAgICAgaXNfZ2V0X2VudGl0eTogdHJ1ZSwKICAgICAgICAgICAgICAgIHBhZ2Vfbm86IHRoaXMucGFnZV9ubywKICAgICAgICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAoKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgKQogICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEuTVNHID09ICJFbnRpdHkgRGF0YSBFeGlzdHMiKXsKICAgICAgICAgICAgICAgIHRoaXMubnVtYmVyX29mX3Jvd3MgPSByZXNwb25zZS5kYXRhLnBhZ2Vjb3VudDsKICAgICAgICAgICAgICAgIHRoaXMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwodGhpcy5udW1iZXJfb2Zfcm93cyAvIHRoaXMucGVyX3BhZ2UpOwogICAgICAgICAgICAgICAgdGhpcy5lbnRpdHlfbGlzdCA9IHJlc3BvbnNlLmRhdGEuZW50aXR5X25hbWVzOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuZW50aXR5X2xpc3QubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICB0aGlzLnNob3dfZW50aXRpZXMoMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICBpZiAodGhpcy5wYWdlbm8gPT0gIi4uLnMiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgoMSArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYWdlbm8gPT0gIi4uLmwiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgodGhpcy50b3RhbF9wYWdlcyArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IHRoaXMucGFnZW5vOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgICAgYXhpb3MKICAgICAgICAgICAgLnBvc3QoCiAgICAgICAgICAgICAgYXBpX2NhbGxzLmZvcm1fYXV0b21hdGlvbl9hZGRfZW50aXR5KCksCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfaWQsCiAgICAgICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiAiUGxhdGludW0iLAogICAgICAgICAgICAgICAgaXNfc2VhcmNoOiB0cnVlLAogICAgICAgICAgICAgICAgc2VhcmNoX2tleTogdGhpcy5zZWFyY2hfbmFtZSwKICAgICAgICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfQogICAgICAgICAgICApCiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgICAgdGhpcy5lbnRpdHlfbGlzdCA9IFtdOwogICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVudGl0aWVzX3NlYXJjaC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9ICJ0b2tlbiBpbnZhbGlkIikgewogICAgICAgICAgICAgICAgICB0aGlzLm51bWJlcl9vZl9yb3dzID0gcmVzcG9uc2UuZGF0YS5wYWdlY291bnQ7CiAgICAgICAgICAgICAgICAgIHRoaXMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwoCiAgICAgICAgICAgICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyAvIHRoaXMucGVyX3BhZ2UKICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdHlfbGlzdCA9IHJlc3BvbnNlLmRhdGEuZW50aXRpZXNfc2VhcmNoOwogICAgICAgICAgICAgICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJFbnRpdHkgRG9lcyBub3QgRXhpc3RzIikgewogICAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgICAgdGV4dDogIk5vIFJlc3VsdCBGb3VuZCIsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiSW50ZXJuYWwgU2VydmVyIEVycm9yIikgewogICAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICAgIHRleHQ6ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLAogICAgICAgICAgICAgICAgICB0aW1lcjogMjAwMCwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkX2VudGl0eSgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgICAgdGV4dDogIkludGVybmFsIFNlcnZlciBFcnJvciIsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLmxvYWRfZW50aXR5KCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgc2V0cGFnaW5hdGlvbihwYWdlX25vKSB7CiAgICAgIHRoaXMucGFnZV9hcnJheSA9IFtdOwogICAgICBpZiAodGhpcy50b3RhbF9wYWdlcyA8PSA3KSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRvdGFsX3BhZ2VzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSAxKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCh0aGlzLnRvdGFsX3BhZ2VzKTsKICAgICAgfSBlbHNlIGlmIChwYWdlX25vID09IHRoaXMudG90YWxfcGFnZXMpIHsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgxKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ucyIpOwogICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnRvdGFsX3BhZ2VzIC0gNDsgaSA8IHRoaXMudG90YWxfcGFnZXM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSArIDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChwYWdlX25vIDw9IDQpIHsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2Vfbm8gKyAzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLmwiKTsKICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCh0aGlzLnRvdGFsX3BhZ2VzKTsKICAgICAgfSBlbHNlIGlmIChwYWdlX25vID49IHRoaXMudG90YWxfcGFnZXMgLSA0KSB7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLnMiKTsKICAgICAgICBmb3IgKGxldCBpID0gcGFnZV9ubyAtIDQ7IGkgPCB0aGlzLnRvdGFsX3BhZ2VzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLnMiKTsKICAgICAgICBmb3IgKGxldCBpID0gcGFnZV9ubyAtIDM7IGkgPD0gcGFnZV9ubyArIDM7IGkrKykgewogICAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goaSk7CiAgICAgICAgfQogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0KICAgIH0sCiAgICBwYWdpbmF0aW9uX2NsYXNzKGluZGV4KSB7CiAgICAgIGlmIChpbmRleCA9PSB0aGlzLnBhZ2Vfbm8pIHsKICAgICAgICByZXR1cm4gIiBhY3RpdmUiOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAiIjsKICAgICAgfQogICAgfSwKICAgIGVudGl0eV9uYW1lX2NoZWNrX3NwZWNpYWxfY2hhcmFjdGVycyhlKXsKICAgICAgaWYgKC9eW15hLXpBLVowLTlfIF0qJC8udGVzdChlLmtleSkpIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIH0KICAgIH0sCiAgICBhZGRfdG9fcGF0dGVybl9saXN0KHR5cGUsIGluZGV4KXsKICAgICAgaWYgKHR5cGUgPT0gImFkZCIpIHsKICAgICAgICB0aGlzLnBhdHRlcm5fbGlzdC51bnNoaWZ0KHtwYXR0ZXJuOicnfSk7CiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAicmVtb3ZlIikgewogICAgICAgIHRoaXMucGF0dGVybl9saXN0LnNwbGljZShpbmRleCwgMSk7CiAgICAgIH0KICAgIH0sCiAgICBhZGRfdG9fcGF0dGVybl9saXN0X2VkaXQodHlwZSwgaW5kZXgpewogICAgICBpZiAodHlwZSA9PSAiYWRkIikgewogICAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF9wYXR0ZXJuLnVuc2hpZnQoe3BhdHRlcm46Jyd9KTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09ICJyZW1vdmUiKSB7CiAgICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX3BhdHRlcm4uc3BsaWNlKGluZGV4LCAxKTsKICAgICAgfQogICAgfSwKICAgIGFkZF90b192YWx1ZXNfbGlzdCh0eXBlLCBpbmRleCl7CiAgICAgIGlmICh0eXBlID09ICJhZGQiKSB7CiAgICAgICAgdGhpcy5zeW5vbnltc192YWx1ZV9saXN0LnVuc2hpZnQoe3ZhbHVlOicnLCBzeW5vbnltczogWyIiXX0pOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gInJlbW92ZSIpIHsKICAgICAgICB0aGlzLnN5bm9ueW1zX3ZhbHVlX2xpc3Quc3BsaWNlKGluZGV4LCAxKTsKICAgICAgfQogICAgfSwKICAgIGFkZF90b192YWx1ZXNfbGlzdF9lZGl0KHR5cGUsIGluZGV4KXsKICAgICAgaWYgKHR5cGUgPT0gImFkZCIpIHsKICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzLnVuc2hpZnQoe3ZhbHVlOicnLCBzeW5vbnltczogWyIiXX0pOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gInJlbW92ZSIpIHsKICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzLnNwbGljZShpbmRleCwgMSk7CiAgICAgIH0KICAgIH0sCiAgICBhZGRfdG9fc3lub255bXNfbGlzdCh0eXBlLCBpbmRleCwgaW5kZXgxKXsKICAgICAgaWYgKHR5cGUgPT0gImFkZCIpIHsKICAgICAgICB0aGlzLnN5bm9ueW1zX3ZhbHVlX2xpc3RbaW5kZXhdWydzeW5vbnltcyddLnVuc2hpZnQoIiIpOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gInJlbW92ZSIpIHsKICAgICAgICB0aGlzLnN5bm9ueW1zX3ZhbHVlX2xpc3RbaW5kZXhdWydzeW5vbnltcyddLnNwbGljZShpbmRleDEsIDEpOwogICAgICB9CiAgICB9LAogICAgYWRkX3RvX3N5bm9ueW1zX2xpc3RfZWRpdCh0eXBlLCBpbmRleCwgaW5kZXgxKXsKICAgICAgaWYgKHR5cGUgPT0gImFkZCIpIHsKICAgICAgICB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfdmFsdWVzW2luZGV4XVsnc3lub255bXMnXS51bnNoaWZ0KCIiKTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09ICJyZW1vdmUiKSB7CiAgICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX3ZhbHVlc1tpbmRleF1bJ3N5bm9ueW1zJ10uc3BsaWNlKGluZGV4MSwgMSk7CiAgICAgIH0KICAgIH0sCiAgICBzZWxlY3RlZF9lbnRpdGllcyhlbnRpdHlfbmFtZSkgewogICAgICBpZiAoZW50aXR5X25hbWUgPT0gImFsbCIpIHsKICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHsKICAgICAgICAgIHZhciB0ZW1wID0gW10KICAgICAgICAgIHRlbXAgPSB0aGlzLmVudGl0eV9saXN0LmZpbHRlcigoZW50aXR5KT0+ewogICAgICAgICAgICByZXR1cm4gZW50aXR5LnR5cGUgIT0nc3lzdGVtJwogICAgICAgICAgfSkubWFwKChpdGVtKT0+ewogICAgICAgICAgICByZXR1cm4gaXRlbS5lbnRpdHkKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSB0ZW1wOwogICAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgJCgiI2VudGl0eV9jaGVja2JveF8iK1tpXSkucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICAgICAgICAkKCIjc2VsZWN0YWxsIikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoIWV2ZW50LnRhcmdldC5jaGVja2VkKSB7CiAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQgPT0gdHJ1ZSkgewogICAgICAgICAgbGV0IHZhbF9pbmRleCA9IHRoaXMuY2hlY2tlZF9saXN0LmZpbHRlcigoZW50aXRlcykgPT4gewogICAgICAgICAgICByZXR1cm4gZW50aXRlcy5lbnRpdHlfbmFtZSA9PSBlbnRpdHlfbmFtZTsKICAgICAgICAgIH0pOwogICAgICAgICAgaWYgKHZhbF9pbmRleC5sZW5ndGggPT0gMCkgewogICAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdC5wdXNoKGVudGl0eV9uYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkID09IGZhbHNlKSB7CiAgICAgICAgICB2YXIgc2VsZWN0YWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3NlbGVjdGFsbCIpOwogICAgICAgICAgaWYgKHNlbGVjdGFsbC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICAgICAgc2VsZWN0YWxsLmNoZWNrZWQgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIGxldCB0ZW1wID0gdGhpcy5jaGVja2VkX2xpc3QuZmlsdGVyKChlbnRpdGVzKSA9PiB7CiAgICAgICAgICAgIHJldHVybiBlbnRpdGVzICE9IGVudGl0eV9uYW1lOwogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IHRlbXA7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogIH0KfQo="},null]}