{"remainingRequest":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Elixir/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/ProductSettings.vue?vue&type=template&id=3d6865d0&scoped=true&","dependencies":[{"path":"/home/vimalesh/Elixir/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/ProductSettings.vue","mtime":1643027096176},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}