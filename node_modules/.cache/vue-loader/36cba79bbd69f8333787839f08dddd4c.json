{"remainingRequest":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Elixir/chatbot-portal/src/portal/Chatbot/Dashboard/End User Response/BotUserChatHistory.vue?vue&type=template&id=7e76179d&scoped=true&","dependencies":[{"path":"/home/vimalesh/Elixir/chatbot-portal/src/portal/Chatbot/Dashboard/End User Response/BotUserChatHistory.vue","mtime":1643027096172},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9InRhYmxlLWJveCI+CjxkaXYgY2xhc3M9InNwaW5uZXIiIGlkPSJzcGlubmVyIiB2LXNob3c9InNob3dfbG9hZGVyIj48L2Rpdj4KICA8ZGl2CiAgICAgIHYtaWY9InNlbGVjdGVkICE9ICdnZW5lcmFsX2NoYXRfaGlzdG9yeSciCiAgICAgIGNsYXNzPSJ0YWJsZS1yZXNwb25zaXZlIgogICAgICBzdHlsZT0ibWluLWhlaWdodDogMzQ5cHgiCiAgPgogICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgIDwhLS0gPHRoIHNjb3BlPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1jaGVjayBjaGVja2JveCBjaGVja2JveC1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tY2hlY2stbGFiZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY2hlY2staW5wdXQgY2hlY2tib3gtc3VjY2VzcyIgdHlwZT0iY2hlY2tib3giIGlkPSJzZWxlY3RhbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC90aD4tLT4KICAgICAgICA8dGgKICAgICAgICAgICAgc2NvcGU9ImNvbCIKICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyNSU7IHRleHQtYWxpZ246IGNlbnRlciIKICAgICAgICA+CiAgICAgICAgICAgIFVTRVIgTkFNRQogICAgICAgIDwvdGg+CiAgICAgICAgPHRoCiAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjAlOyB0ZXh0LWFsaWduOiBjZW50ZXIiCiAgICAgICAgPgogICAgICAgICAgICBOQU1FIE9GIFRBU0sKICAgICAgICA8L3RoPgogICAgICAgIDx0aAogICAgICAgICAgICBzY29wZT0iY29sIgogICAgICAgICAgICBzdHlsZT0id2lkdGg6IDIwJTsgdGV4dC1hbGlnbjogY2VudGVyIgogICAgICAgID4KICAgICAgICAgICAgREFURQogICAgICAgIDwvdGg+CiAgICAgICAgPHRoCiAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjAlOyB0ZXh0LWFsaWduOiBjZW50ZXIiCiAgICAgICAgPgogICAgICAgICAgICBUSU1FCiAgICAgICAgPC90aD4KICAgICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0cgogICAgICAgIHYtZm9yPSIodXNlciwgaW5kZXgpIGluIHVzZXJfYWN0aW9uX3N0YXRzIgogICAgICAgIDprZXk9ImluZGV4IgogICAgPgogICAgICAgIDx0ZW1wbGF0ZQogICAgICAgIHYtaWY9IgogICAgICAgICAgICB1c2VyLnVzZXJuYW1lID09ICdCb3QgVXNlcicgfHwKICAgICAgICAgICAgdXNlci51c2VybmFtZSA9PSAnJwogICAgICAgICIKICAgICAgICA+CiAgICAgICAgPHRkIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPgogICAgICAgICAgICB7eyB1c2VyLnVzZXJuYW1lIH19CiAgICAgICAgPC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDx0cgogICAgICAgICAgICB2LWZvcj0iKGFjdGlvbiwgY2hhdF9pbmRleCkgaW4gdXNlci5hY3Rpb25fbGlzdCIKICAgICAgICAgICAgOmtleT0iY2hhdF9pbmRleCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOiA1MCU7IHRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb252ZXJzYXRpb25fbW9kZWwiCiAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgIGNoYXRfY29udmVyc2F0aW9uKGluZGV4LCBjaGF0X2luZGV4KQogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPnt7IGFjdGlvbi5uYW1lIH19PC9hCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90ZD4KICAgICAgICA8dGQgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgIDx0cgogICAgICAgICAgICB2LWZvcj0iKGFjdGlvbiwgY2hhdF9pbmRleCkgaW4gdXNlci5hY3Rpb25fbGlzdCIKICAgICAgICAgICAgOmtleT0iY2hhdF9pbmRleCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOiAxMCUiPnt7IGFjdGlvbi5kYXRlIH19PC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICA8L3RkPgogICAgICAgIDx0ZCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj4KICAgICAgICAgICAgPHRyCiAgICAgICAgICAgIHYtZm9yPSIoYWN0aW9uLCBjaGF0X2luZGV4KSBpbiB1c2VyLmFjdGlvbl9saXN0IgogICAgICAgICAgICA6a2V5PSJjaGF0X2luZGV4IgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6IDEwJSI+e3sgYWN0aW9uLnRpbWUgfX08L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGQ+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgIDwvdHI+CiAgICA8L3RhYmxlPgogIDwvZGl2PgoKICA8IS0tIGZvciBnZW5lcmFsX2NoYXRfaGlzdG9yeSAtLT4KICA8ZGl2CiAgICAgIHYtaWY9InNlbGVjdGVkID09ICdnZW5lcmFsX2NoYXRfaGlzdG9yeSciCiAgICAgIGNsYXNzPSJ0YWJsZS1yZXNwb25zaXZlIgogICAgICBzdHlsZT0ibWluLWhlaWdodDogMzQ5cHgiCiAgPgogICAgICA8dGFibGUgY2xhc3M9InRhYmxlIj4KICAgICAgPHRoZWFkPgogICAgICAgICAgPHRyPgogICAgICAgICAgPCEtLSA8dGgKICAgICAgICAgICAgICBzY29wZT0iY29sIgogICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMjAlOyB0ZXh0LWFsaWduOiBjZW50ZXIiCiAgICAgICAgICA+CiAgICAgICAgICAgICAgVVNFUiBOQU1FCiAgICAgICAgICA8L3RoPiAtLT4KICAgICAgICAgIDx0aAogICAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAzMCU7IHRleHQtYWxpZ246IGNlbnRlciIKICAgICAgICAgID4KICAgICAgICAgICAgICBVTklRVUUgSUQKICAgICAgICAgIDwvdGg+CiAgICAgICAgICA8IS0tIDx0aAogICAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMCU7IHRleHQtYWxpZ246IGNlbnRlciIKICAgICAgICAgID4KICAgICAgICAgICAgICBQSE9ORSBOVU1CRVIKICAgICAgICAgIDwvdGg+IC0tPgogICAgICAgICAgPHRoCiAgICAgICAgICAgICAgICBzY29wZT0iY29sIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAzMCU7IHRleHQtYWxpZ246IGNlbnRlcjsiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIERBVEUKICAgICAgICAgICAgPC90aD4KICAgICAgICAgIDx0aAogICAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA0MCU7IHRleHQtYWxpZ246IGNlbnRlciIKICAgICAgICAgID4KICAgICAgICAgICAgICBWSUVXIENIQVQKICAgICAgICAgIDwvdGg+CiAgICAgICAgICA8IS0tIDx0aCBzY29wZT0iY29sIiBzdHlsZT0id2lkdGg6IDIwJTt0ZXh0LWFsaWduOiBjZW50ZXI7Ij5OQU1FIE9GIFRBU0s8L3RoPgogICAgICA8dGggc2NvcGU9ImNvbCIgc3R5bGU9IndpZHRoOiAyMCU7dGV4dC1hbGlnbjogY2VudGVyOyI+REFURTwvdGg+CiAgICAgIDx0aCBzY29wZT0iY29sIiBzdHlsZT0id2lkdGg6IDIwJTt0ZXh0LWFsaWduOiBjZW50ZXI7Ij5USU1FPC90aD4tLT4KICAgICAgICAgIDwvdHI+CiAgICAgIDwvdGhlYWQ+CiAgICAgIDx0cgogICAgICAgICAgdi1mb3I9Iih1c2VyLCBpbmRleCkgaW4gdXNlcl9hY3Rpb25fc3RhdHMiCiAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgPgogICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgPCEtLSA8dGQgY2xhc3M9InRleHQtY2VudGVyIj57eyB1c2VyLnVzZXJuYW1lIH19PC90ZD4gLS0+CiAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj57eyB1c2VyLnVzZXJpZCB9fTwvdGQ+CiAgICAgICAgICA8IS0tIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiPnt7IHVzZXIudXNlcnBob25lbnVtYmVyIH19PC90ZD4gLS0+CiAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj57eyBmb3JtYXRfZGF0ZV9pbl9sb2NhbF90aW1lem9uZSh1c2VyLmRhdGUpIH19PC90ZD4KICAgICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6IDUwJTsgdGV4dC1hbGlnbjogY2VudGVyIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNjb252ZXJzYXRpb25fbW9kZWwxIgogICAgICAgICAgICAgIEBjbGljaz0iY2hhdF9kYXRlKGluZGV4KSIKICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIgogICAgICAgICAgICAgID5WaWV3IENoYXQgSGlzdG9yeTwvYQogICAgICAgICAgICAgID4KICAgICAgICAgIDwvdGQ+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICA8IS0tIDxhCiAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICBkYXRhLXRhcmdldD0iI2NvbnZlcnNhdGlvbl9tb2RlbDEiCiAgICA+e3thY3Rpb24ubmFtZX19PC9hPi0tPgoKICAgICAgICAgICAgPCEtLSA8dGQ+CiAgICAgICAgPHRyIHYtZm9yPSIoYWN0aW9uLGNoYXRfaW5kZXgpIGluIHVzZXIuYWN0aW9uX2xpc3QiIDprZXk9ImNoYXRfaW5kZXgiPgogICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6IDUwJTt0ZXh0LWFsaWduOiBjZW50ZXI7Ij4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjY29udmVyc2F0aW9uX21vZGVsIgogICAgICAgICAgICBAY2xpY2s9ImNoYXRfY29udmVyc2F0aW9uKGluZGV4LGNoYXRfaW5kZXgpIgogICAgICAgICAgICA+e3thY3Rpb24ubmFtZX19PC9hPgogICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgIDwvdGQ+CiAgICA8dGQgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyOyI+CiAgICAgICAgPHRyIHYtZm9yPSIoYWN0aW9uLGNoYXRfaW5kZXgpIGluIHVzZXIuYWN0aW9uX2xpc3QiIDprZXk9ImNoYXRfaW5kZXgiPgogICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6IDEwJTsiPnt7YWN0aW9uLmRhdGV9fTwvdGQ+CiAgICAgICAgPC90cj4KICAgIDwvdGQ+CiAgICA8dGQgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyOyI+CiAgICAgICAgPHRyIHYtZm9yPSIoYWN0aW9uLGNoYXRfaW5kZXgpIGluIHVzZXIuYWN0aW9uX2xpc3QiIDprZXk9ImNoYXRfaW5kZXgiPgogICAgICAgIDx0ZCBzdHlsZT0id2lkdGg6IDEwJTsiPnt7YWN0aW9uLnRpbWV9fTwvdGQ+CiAgICAgICAgPC90cj4KICAgIDwvdGQ+LS0+CiAgICAgIDwvdHI+CiAgICAgIDwvdGFibGU+CiAgPC9kaXY+CgogIDxkaXYgY2xhc3M9InBhZ2luLXRhYmxlIiBzdHlsZT0ibWFyZ2luLXRvcDogMiUiPgogICAgICA8bmF2IGFyaWEtbGFiZWw9IlBhZ2UgbmF2aWdhdGlvbiBleGFtcGxlIj4KICAgICAgPHVsIGNsYXNzPSJwYWdpbmF0aW9uIGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPgogICAgICAgICAgPGEKICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgICAgICBAY2xpY2s9InBhZ2VfcmVxdWlyZShwYWdlX25vIC0gMSkiCiAgICAgICAgICA+CiAgICAgICAgICAgICAgPHN2ZwogICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICB3aWR0aD0iOC42NjciCiAgICAgICAgICAgICAgaGVpZ2h0PSIxNS4yMDQiCiAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDguNjY3IDE1LjIwNCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGcKICAgICAgICAgICAgICAgICAgaWQ9ImFycm93LXBvaW50LXRvLWxlZnQiCiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDEwNS44MDYgMTUuMjA0KSByb3RhdGUoMTgwKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgIGlkPSJQYXRoXzExMzYiCiAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iUGF0aCAxMTM2IgogICAgICAgICAgICAgICAgICBkPSJNMTA1LjQ5Myw4LjM1NGwtNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwxLDEtMS41MDYtMS41MDZMMTAzLjIzNSw3LjYsOTcuNDUsMS44MTdBMS4wNjUsMS4wNjUsMCwwLDEsOTguOTU2LjMxMmw2LjUzNyw2LjUzN2ExLjA2NSwxLjA2NSwwLDAsMSwwLDEuNTA1WiIKICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAwKSIKICAgICAgICAgICAgICAgICAgZmlsbD0iIzk0OTlhZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpCiAgICAgICAgICA6Y2xhc3M9IidwYWdlLWl0ZW0gJyArIHBhZ2luYXRpb25fY2xhc3MocGFnZW5vKSIKICAgICAgICAgIHYtZm9yPSJwYWdlbm8gaW4gcGFnZV9hcnJheSIKICAgICAgICAgIDprZXk9InBhZ2VubyIKICAgICAgICAgID4KICAgICAgICAgIDxhCiAgICAgICAgICAgICAgdi1pZj0icGFnZW5vID09ICcuLi5zJyB8fCBwYWdlbm8gPT0gJy4uLmwnIgogICAgICAgICAgICAgIGNsYXNzPSJwYWdlLWxpbmsiCiAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgIEBjbGljaz0icGFnZV9yZXF1aXJlKHBhZ2VubykiCiAgICAgICAgICAgICAgPi4uLjwvYQogICAgICAgICAgPgogICAgICAgICAgPGEKICAgICAgICAgICAgICB2LWlmPSJwYWdlbm8gIT0gJy4uLnMnICYmIHBhZ2VubyAhPSAnLi4ubCciCiAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgICAgIEBjbGljaz0icGFnZV9yZXF1aXJlKHBhZ2VubykiCiAgICAgICAgICAgICAgPnt7IHBhZ2VubyB9fTwvYQogICAgICAgICAgPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0icGFnZS1pdGVtIj4KICAgICAgICAgIDxhCiAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgQGNsaWNrPSJwYWdlX3JlcXVpcmUocGFnZV9ubyArIDEpIgogICAgICAgICAgPgogICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgd2lkdGg9IjguNjY3IgogICAgICAgICAgICAgIGhlaWdodD0iMTUuMjA0IgogICAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA4LjY2NyAxNS4yMDQiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxnCiAgICAgICAgICAgICAgICAgIGlkPSJhcnJvdy1wb2ludC10by1yaWdodCIKICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTk3LjEzOSAwKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgIGlkPSJQYXRoXzExMzYiCiAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iUGF0aCAxMTM2IgogICAgICAgICAgICAgICAgICBkPSJNMTA1LjQ5Myw4LjM1NGwtNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwxLDEtMS41MDYtMS41MDZMMTAzLjIzNSw3LjYsOTcuNDUsMS44MTdBMS4wNjUsMS4wNjUsMCwwLDEsOTguOTU2LjMxMmw2LjUzNyw2LjUzN2ExLjA2NSwxLjA2NSwwLDAsMSwwLDEuNTA1WiIKICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAwKSIKICAgICAgICAgICAgICAgICAgZmlsbD0iIzk0OTlhZSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgICA8L25hdj4KICA8L2Rpdj4KCiAgPGRpdgogICAgICB2LWlmPSJzZWxlY3RlZCAhPSAnZ2VuZXJhbF9jaGF0X2hpc3RvcnknIgogICAgICBjbGFzcz0ibW9kYWwgZmFkZSBkYXNoLW1vZGFsIgogICAgICBpZD0iY29udmVyc2F0aW9uX21vZGVsIgogICAgICB0YWJpbmRleD0iLTEiCiAgICAgIHJvbGU9ImRpYWxvZyIKICAgICAgYXJpYS1sYWJlbGxlZGJ5PSJjb252ZXJzYXRpb25fbW9kZWwiCiAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IC0xJSIKICA+CiAgICAgIDxkaXYKICAgICAgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiCiAgICAgIHJvbGU9ImRvY3VtZW50IgogICAgICA+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy91c2VyLWJsdWUucG5nIiBhbHQgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8aDM+Q2hhdCBIaXN0b3J5PC9oMz4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSIKICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgdi1mb3I9Iih1c2VyLCBpbmRleCkgaW4gdXNlcl9yZXBseSIKICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgIDxoNT57eyBjdXJyZW50X3VzZXIgfX06ICZuYnNwOzwvaDU+CiAgICAgICAgICAgICAgICAgIDxwPnt7IHVzZXIgfX08L3A+CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBmbGV4Ij4KICAgICAgICAgICAgICAgICAgPGg1PkJvdDogJm5ic3A7PC9oNT4KICAgICAgICAgICAgICAgICAgPHA+e3sgYm90X3JlcGx5W2luZGV4XSB9fTwvcD4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgPC9kaXY+CgogIDxkaXYKICAgICAgICB2LWlmPSJzZWxlY3RlZCA9PSAnZ2VuZXJhbF9jaGF0X2hpc3RvcnknIgogICAgICAgIGNsYXNzPSJtb2RhbCBmYWRlIGRhc2gtbW9kYWwiCiAgICAgICAgaWQ9ImNvbnZlcnNhdGlvbl9tb2RlbDEiCiAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgIHJvbGU9ImRpYWxvZyIKICAgICAgICBhcmlhLWxhYmVsbGVkYnk9ImNvbnZlcnNhdGlvbl9tb2RlbDEiCiAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAtMSUiCiAgICAgID4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCIKICAgICAgICAgIHJvbGU9ImRvY3VtZW50IgogICAgICAgICAgc3R5bGU9Im1heC13aWR0aDogNjAlIgogICAgICAgID4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPgogICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy91c2VyLWJsdWUucG5nIiBhbHQgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGgzPkNoYXQgSGlzdG9yeTwvaDM+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2Nsb3NlLWljbi5wbmciIGFsdCAvPgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgIDwhLS0gPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgQGNsaWNrPSJjbG9zZV9tb2RhbCI+JnRpbWVzOzwvYnV0dG9uPiAtLT4KICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPCEtLSA8ZGl2PgogICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgaWQ9InNlbGVjdF9jb3ZlcnNhdGlvbl9kYXRlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlbGVjdGVkX2RhdGUiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSJjaGF0X2NvbnZlcnNhdGlvbiIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoZGF0ZSwgaW5kZXgpIGluIGNoYXRfZGF0ZXMiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0iZGF0ZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICB7eyBkYXRlIH19CiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgPC9kaXY+IC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsPlNlbGVjdCBUaW1lIFJhbmdlPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxtdWx0aXNlbGVjdAogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJzZWxlY3RlZF9kYXRlIgogICAgICAgICAgICAgICAgICBpZD0ic2VsZWN0X2NvdmVyc2F0aW9uX2RhdGUiCiAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJjaGF0X2RhdGVzIgogICAgICAgICAgICAgICAgICA6c2VhcmNoYWJsZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLXNlbGVjdD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgOnNob3ctbGFiZWxzPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgOmFsbG93LWVtcHR5PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgQGlucHV0PSJjaGF0X2NvbnZlcnNhdGlvbiIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlbGVjdCBUaW1lIFJhbmdlIgogICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQtc2VsZWN0ZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICA6aGlkZS1zZWxlY3RlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgIDptYXgtaGVpZ2h0PSIyMDAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxzcGFuPnt7IHNlbGVjdGVkX2RhdGUgfX08L3NwYW4+CiAgICAgICAgICAgICAgICA8L211bHRpc2VsZWN0PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHA+PC9wPgogICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjpqdXN0aWZ5IiB2LWZvcj0iKHVzZXIsIGluZGV4KSBpbiBjaGF0RGV0YWlscyIgOmtleT0iaW5kZXgiPgogICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJ1c2VyLlVzZXJRdWVyeSAhPSAnJyIgY2xhc3M9InB5LTAgbXktMCIgc3R5bGU9ImRpc3BsYXk6IGZsZXg7IGhlaWdodC0wJTsiPgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0icHktMCBtdC0yIG1iLTAiIHN0eWxlPSJmbG9hdDpsZWZ0O3dpZHRoOjMlOyBoZWlnaHQ6MCU7Ij5ROjwvaDU+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InB5LTAgbWItMCIgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLWFsbDsgbWFyZ2luLXRvcDoxMXB4OyI+CiAgICAgICAgICAgICAgICAgICAgICB7eyB1c2VyLlVzZXJRdWVyeSB9fQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9InVzZXIuVXNlclF1ZXJ5ICE9ICcnIHx8IGNoZWNraW50ZW50KGluZGV4KSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoYm90LCBpbmRleDIpIGluIHVzZXIuQk9UUmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleDIiCiAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9ImNoZWNrX2JvdF9vZmZlcnModXNlci5CT1RSZXNwb25zZSkiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUKICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iYm90LmltZyAhPSB1bmRlZmluZWQgfHwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgYm90LnRleHQgIT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgICAgICAgICAgICAgICAgIGJvdC5wcm9kdWN0cyE9IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICAgICAgICAgICAgICAgICBib3Qub2ZmZXJzIT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgICAgICAgICAgICAgICAgIGJvdC50ZW1wbGF0ZSA9PSAndXR0ZXJfZGVmYXVsdCcgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICBib3QuY29udGFjdF91c19lbWFpbCAhPSB1bmRlZmluZWQgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICBib3QuY29udGFjdF91c19waG9uZV9udW1iZXIgIT0gdW5kZWZpbmVkIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgYm90LmJ1dHRvbnMgIT0gdW5kZWZpbmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDpsZWZ0O3dpZHRoOjMlOyBtYXJnaW4tYm90dG9tOjBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICBBOgogICAgICAgICAgICAgICAgICAgICAgPC9oNT4gCiAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxwIHN0eWxlPSJtYXJnaW4tdG9wOjJweDsgbWFyZ2luLWJvdHRvbTowcHg7IHdpZHRoOjEwMCUiIAogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJib3QuY29udGFjdF91c19lbWFpbCAhPSB1bmRlZmluZWQiCiAgICAgICAgICAgICAgICAgICAgICA+UGxlYXNlIGZlZWwgZnJlZSB0byByZWFjaG91dCB0byB1cyBhdCA6IDxzcGFuIHYtaHRtbD0iYm90LmNvbnRhY3RfdXNfZW1haWwiPjwvc3Bhbj48L3A+IC0tPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSIoQm9vbGVhbihib3QuYnV0dG9ucyk9PT0gdHJ1ZSkgJiYoIGJvdC50ZXh0ID09ICcnKSIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiBtYXgtY29udGVudDsiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIHYtaWY9IkJvb2xlYW4oYm90LmJ1dHRvbnMpPT09IHRydWUgJiYgYm90LmJ1dHRvbnMubGVuZ3RoID4gMCAmJiBib3QudGV4dCA9PSAnJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiBkaW1ncmF5OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcHRpb25zIDo8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1mb3I9IihidXR0b24sIGluZGV4MykgaW4gYm90LmJ1dHRvbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgI2NjY2NjYzsgY3Vyc29yOiBkZWZhdWx0OyBwYWRkaW5nOiAycHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDsgYmFja2dyb3VuZDogI2YyZjJmMjsgYm9yZGVyLXJhZGl1czogNXB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwLTAgbWItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAge3tidXR0b24udGl0bGUgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi10b3A6MnB4OyBtYXJnaW4tYm90dG9tOjBweDsgd2lkdGg6MTAwJSIgCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImJvdC5jb250YWN0X3VzX2VtYWlsICE9IHVuZGVmaW5lZCIgCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaHRtbD0ibWVzc2FnaW5nX3BsYXRmb3JtX2Zvcm1hdGluZyhib3QuY29udGFjdF91c19lbWFpbCkKICAgICAgICAgICAgICAgICAgICAgICAgKyBtZXNzYWdpbmdfcGxhdGZvcm1fZm9ybWF0aW5nX251bWJlcihib3QuY29udGFjdF91c19waG9uZV9udW1iZXIpIgogICAgICAgICAgICAgICAgICAgICAgPjwvcD4KICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOjJweDsgbWFyZ2luLWJvdHRvbTowcHg7IHdpZHRoOjEwMCUiIAogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJib3QubWVzc2FnZSAhPSB1bmRlZmluZWQiIAogICAgICAgICAgICAgICAgICAgICAgICB2LWh0bWw9ImNvbmZ1c2lvbl9tZXNzYWdlX2Zvcm1hdGluZyhib3QubWVzc2FnZSkiCiAgICAgICAgICAgICAgICAgICAgICA+PC9wPgogICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi10b3A6MnB4OyBtYXJnaW4tYm90dG9tOjBweDsgd2lkdGg6MTAwJSIgCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImJvdC50ZXh0ICE9IHVuZGVmaW5lZCAmJiBib3QudGV4dCAhPSAnJyIgCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaHRtbD0iYm90LnRleHQiPgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKG9mZmVyLCBpbmRleDQpIGluIGJvdC5vZmZlcnMiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4NCIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEwMCU7IG1hcmdpbi1ib3R0b206MHB4OyBwYWRkaW5nLWxlZnQ6MS43cmVtIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icGItMCIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1odG1sPSJvZmZlci5vZmZlciIgdi1pZj0iYm90Lm9mZmVycyAhPSB1bmRlZmluZWQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZmxvYXQ6bGVmdDt3aWR0aDoxMDAlIiB2LWlmPSJib3QuaW1nICE9IHVuZGVmaW5lZCAmJiBib3QuaW1nICE9JyciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9ImJvdC5pbWciIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImhlaWdodDoxNDBweDsgd2lkdGg6MTQwcHg7cG9zaXRpb246cmVsYXRpdmUiIHYtaWY9ImJvdC5pbWFnZSAhPSB1bmRlZmluZWQgJiYgYm90LmltYWdlICE9JyciPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6aW5oZXJpdCIgIDpzcmM9ImJvdC5pbWFnZSIgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHAgdi1pZj0iYm90LmludGVudCE9dW5kZWZpbmVkIiA+e3tib3QuaW50ZW50fX08L3A+IC0tPgogICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnV5LXByb2R1Y3RzIgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTogZmxleDsgb3ZlcmZsb3c6IGF1dG8gaGlkZGVuOyBmbG9hdDpsZWZ0O3dpZHRoOjEwMCUgIgogICAgICAgICAgICAgICAgICAgICAgICBAbW91c2V3aGVlbD0ic2Nyb2xsX2RpdiIKICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iYm90LnByb2R1Y3RzICE9IHVuZGVmaW5lZCIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWFnZS1jb250YWluZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iihwcm9kdWN0LCBpbmRleDEpIGluIHByb2R1Y3RfdmFyaWF0aW9uKGJvdC5wcm9kdWN0cy5wcm9kdWN0c19saXN0KSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleDEiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9ImNoZWNrX2ltYWdlX3R5cGUocHJvZHVjdC5pbWdfdXJsKSIgY2xhc3M9ImNlbnRlci1ibG9jayBwLTAgbS0wIiBzdHlsZT0iaGVpZ2h0OjE0MHB4OyB3aWR0aDoxNDBweDsiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InAtMCBtYi0xIj57eyBwcm9kdWN0LnRpdGxlIH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwLTAgbWItMSI+e3sgcHJvZHVjdC5wcmljZSB9fTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxwIGNsYXNzPSJidXktbm93IiBAY2xpY2s9ImdlbmVyYXRlX3BheW1lbnQocHJvZHVjdC5wcmljZSkiPkJ1eSBOb3c8L3A+IC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS0gU2hvd2luZyBQcm9kdWN0cyAtLT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4K"},null]}