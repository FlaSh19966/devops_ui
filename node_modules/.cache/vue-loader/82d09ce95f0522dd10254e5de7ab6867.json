{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/analytics/components/Bargraph.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/analytics/components/Bargraph.vue","mtime":1643027096188},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLyogLmJhciB7CiAgZmlsbDogc3RlZWxibHVlOwogIGNsaXAtcGF0aDogdXJsKCNjbGlwKTsKfQogIAouc3ViQmFyIHsgCiAgZmlsbDogZ3JheTsKICBvcGFjaXR5OiAwLjU7Cn0KCi5heGlzIHBhdGgsCi5heGlzIGxpbmUgewogIGZpbGw6IG5vbmU7CiAgc3Ryb2tlOiAjMDAwOwogIHNoYXBlLXJlbmRlcmluZzogY3Jpc3BFZGdlczsKfQoKLmJydXNoIC5leHRlbnQgewogIHN0cm9rZTogI2ZmZjsKICBmaWxsOiBzdGVlbGJsdWU7CiAgZmlsbC1vcGFjaXR5OiAuMjU7CiAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzOwp9CgogIHJlY3QubW92ZXIgewogICAgICAgICAgICBzdHJva2U6IHJlZDsKICAgICAgICAgICAgc3Ryb2tlLW9wYWNpdHk6IC4xOwogICAgICAgICAgICBmaWxsOiBsaWdodFN0ZWVsQmx1ZTsKICAgICAgICAgICAgZmlsbC1vcGFjaXR5OiAuNTsKICAgICAgICB9ICovCg=="},{"version":3,"sources":["Bargraph.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6OA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Bargraph.vue","sourceRoot":"src/portal/analytics/components","sourcesContent":["<template>\n<div>\n  <div id=\"barchart\">\n\n  </div>\n  <!-- <button id=\"export\">  </button> -->\n</div>\n</template>\n<script>\nimport * as d3 from 'd3-3';\nexport default {\n  name: \"BarChart\",\n  props: {\n    xKey: String,\n    yKey: String,\n    data: Array,\n    currency_key: String,\n  },\n  mounted() {\n  const vm = this;\n   this.data.sort(function(a, b) {\n            return b[vm.yKey] - a[vm.yKey];\n      });\n  var DATA_COUNT = 900;         \nvar MAX_LABEL_LENGTH = 30; \n      \nvar data = [];\ndata = this.data;\n// for (var i = 0; i < DATA_COUNT; i++) {\n//     var datum = {};\n//     datum.label = stringGen(MAX_LABEL_LENGTH)\n//     datum.value = Math.floor(Math.random() * 600);\n//     data.push(datum);\n// }\nconsole.log(data);\nfunction stringGen(maxLength) {\n    var text = \"\";\n    var charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for( var i=0; i < getRandomArbitrary(1, maxLength) ; i++ ) {\n        text += charset.charAt(Math.floor(Math.random() * charset.length));\n    }                                                \n\n    return text;\n}\n  \nfunction getRandomArbitrary(min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n}  \n \n                   \nvar margin =  {top: 20, right: 10, bottom: 20, left: 40};\nvar marginOverview = {top: 30, right: 10, bottom: 20, left: 40};\nvar selectorHeight = 10;\nvar width = 900 - margin.left - margin.right;\nvar height = 400 - margin.top - margin.bottom - selectorHeight;\nvar heightOverview = 80 - marginOverview.top - marginOverview.bottom;\n       \n// var maxLength = d3.max(data.map(function(d){ return d.label.length}))\n// var barWidth = maxLength * 2;\nvar barWidth = 20 * 2;\nvar numBars = Math.round(width/barWidth);\nvar isScrollDisplayed = barWidth * data.length > width;\n       \n\nconsole.log(isScrollDisplayed)\n  \nvar xscale = d3.scale.ordinal()\n                .domain(data.slice(0,numBars).map(function (d) { return d[vm.xKey]; }))\n                .rangeBands([0, width], .2);\n\nvar yscale = d3.scale.linear()\n\t\t\t\t\t\t\t.domain([0, d3.max(data, function (d) { return d[vm.yKey]; })])\n              .range([height, 0]);\n  \nvar xAxis  = d3.svg.axis().scale(xscale).orient(\"bottom\");\nvar yAxis  = d3.svg.axis().scale(yscale).orient(\"left\")\n            .ticks(10, \"s\");\n;\n  \nvar svg = d3.select(\"#barchart\").append(\"svg\")\n\t\t.attr(\"width\", width + margin.left + margin.right)\n\t    \t.attr(\"height\", height + margin.top + margin.bottom + selectorHeight);\n  \nvar diagram = \nsvg.append(\"g\")\n .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  \ndiagram.append(\"g\")\n  \t\t .attr(\"class\", \"x axis\")\n       .attr(\"transform\", \"translate(0, \" + height + \")\")\n       .call(xAxis)\n       .selectAll(\".tick text\")\n          .attr(\"y\", 0)\n          .attr(\"x\", -10)\n          .attr(\"dy\", \".35em\")\n          .attr(\"transform\", \"rotate(-70)\")\n          .style(\"text-anchor\", \"end\")\n  \ndiagram.append(\"g\")\n       .attr(\"class\", \"y axis\")\n       .call(yAxis);\n  \nvar bars = diagram.append(\"g\");\n  \nbars.selectAll(\"rect\")\n            .data(data.slice(0, numBars), function (d) {return d[vm.xKey]; })\n            .enter().append(\"rect\")\n            .attr(\"class\", \"bar-positive\")\n            .attr(\"id\", function(d, i) {\n              return  d[vm.xKey];\n            })\n            .attr(\"x\", function (d) { return xscale(d[vm.xKey]); })\n            .attr(\"y\", function (d) { return yscale(d[vm.yKey]); })\n            .attr(\"width\", xscale.rangeBand())\n            .attr(\"height\", function (d) { return height - yscale(d[vm.yKey]); });\n\n  \nif (isScrollDisplayed)\n{\n  var xOverview = d3.scale.ordinal()\n                  .domain(data.map(function (d) { return d[vm.xKey]; }))\n                  .rangeBands([0, width], .2);\n var   yOverview = d3.scale.linear().range([heightOverview, 0]);\n  yOverview.domain(yscale.domain());\n\n  var subBars = diagram.selectAll('.subBar')\n      .data(data)\n\n  subBars.enter().append(\"rect\")\n      .classed('subBar', true)\n      .attr({\n          height: function(d) {\n              return heightOverview - yOverview(d[vm.yKey]);\n          },\n          width: function(d) {\n              return xOverview.rangeBand()\n          },\n          x: function(d) {\n\n              return xOverview(d[vm.xKey]);\n          },\n          y: function(d) {\n              return height + heightOverview + yOverview(d[vm.yKey])\n          }\n      })\n\n  var displayed = d3.scale.quantize()\n              .domain([0, width])\n              .range(d3.range(data.length));\n\n  diagram.append(\"rect\")\n              .attr(\"transform\", \"translate(0, \" + (height + margin.bottom) + \")\")\n              .attr(\"class\", \"mover\")\n              .attr(\"x\", 0)\n              .attr(\"y\", 0)\n              .attr(\"height\", selectorHeight)\n              .attr(\"width\", Math.round(parseFloat(numBars * width)/data.length))\n              .attr(\"pointer-events\", \"all\")\n              .attr(\"cursor\", \"ew-resize\")\n              .call(d3.behavior.drag().on(\"drag\", display));\n}\nfunction display () {\n    var x = parseInt(d3.select(this).attr(\"x\")),\n        nx = x + d3.event.dx,\n        w = parseInt(d3.select(this).attr(\"width\")),\n        f, nf, new_data, rects;\n\n    if ( nx < 0 || nx + w > width ) return;\n\n    d3.select(this).attr(\"x\", nx);\n\n    f = displayed(x);\n    nf = displayed(nx);\n\n    if ( f === nf ) return;\n\n    new_data = data.slice(nf, nf + numBars);\n\n    xscale.domain(new_data.map(function (d) { return d[vm.xKey]; }));\n    diagram.select(\".x.axis\").call(xAxis)\n    .selectAll(\".tick text\")\n          .attr(\"y\", 0)\n          .attr(\"x\", -10)\n          .attr(\"dy\", \".35em\")\n          .attr(\"transform\", \"rotate(-70)\")\n          .style(\"text-anchor\", \"end\")  \n\n    rects = bars.selectAll(\"rect\")\n    .data(new_data, function (d) {return d[vm.xKey]; });\n\n\t \trects.attr(\"x\", function (d) { return xscale(d[vm.xKey]); });\n\n// \t  rects.attr(\"transform\", function(d) { return \"translate(\" + xscale(d.label) + \",0)\"; })\n\n    rects.enter().append(\"rect\")\n      .attr(\"class\", \"bar-positive\")\n      .attr(\"id\", function(d, i) {\n        return  d[vm.xKey];\n      })\n      .attr(\"x\", function (d) { return xscale(d[vm.xKey]); })\n      .attr(\"y\", function (d) { return yscale(d[vm.yKey]); })\n      .attr(\"width\", xscale.rangeBand())\n      .attr(\"height\", function (d) { return height - yscale(d[vm.yKey]); });\n\n    rects.exit().remove();\n};\n\nvar tooltip = d3.select(\".card-body\").append(\"div\").attr(\"class\", \"toolTip\");\n          d3.selectAll(\".bar-positive\")\n          .on(\"mouseover\", function(d){\n            var x = d3.select(this).attr('id'),\n              n= vm.data.length,\n              yval\n              for(let i=0;  i < n; i++ ){\n                if(vm.data[i][vm.xKey] === x) {\n                  yval = vm.data[i][vm.yKey]\n                }\n              }\n              // console.log(Number.isInteger(yval))\n                  tooltip\n                  .style(\"left\", event.pageX - 315 + \"px\")\n                  .style(\"top\", event.pageY - 170 + \"px\")\n                  .style(\"display\", \"inline-block\")\n                  // .html((vm.data[x][vm.yKey]) + \"<br>\"  + (vm.data[x][vm.xKey]));\n                  .html( x + \"<br>\"  +vm.currency_key + ' ' +  ((Number.isInteger(yval))? yval : yval.toFixed(2)));\n              })\n              .on(\"mouseout\", function(d){\n                  tooltip.style(\"display\", \"none\");\n              });\n  \n\n  }\n}\n\n</script>\n<style>\n/* .bar {\n  fill: steelblue;\n  clip-path: url(#clip);\n}\n  \n.subBar { \n  fill: gray;\n  opacity: 0.5;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.brush .extent {\n  stroke: #fff;\n  fill: steelblue;\n  fill-opacity: .25;\n  shape-rendering: crispEdges;\n}\n\n  rect.mover {\n            stroke: red;\n            stroke-opacity: .1;\n            fill: lightSteelBlue;\n            fill-opacity: .5;\n        } */\n</style>"]}]}