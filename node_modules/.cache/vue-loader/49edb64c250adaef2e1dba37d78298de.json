{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Workflow.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Workflow.vue","mtime":1643027096184},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64://
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* eslint-disable */
import Vue from 'vue';
import axios from "axios";
import api_calls from "@/portal/api_calls";
import Swal from "sweetalert2";
import 'jquery-ui';
import moment from "moment";
import swal from 'sweetalert2';
// import '/home/avdhut/Documents/chatbot-vue/cense_portal/static/js/jquery-ui.min.js';

export default {
    name: "Workflow",
    data(){
        return {
            show_spinner: false,
            companyid: "",
            location: "",
            company_name: "",
            company_id: "",
            bot_name: "",
            bot_type: "",
            bot_id: "",
            bot_version: "",
            levels:[],
            maxid:0,
            selectednode:null,
            selectedlevel:null,
            selectedlevellist:[],
            // selectednodetitle:null,
            name:null,
            buttonsname:[],
            message:null,
            hyperlink:null,
            value:[],
            displaymessage:[],
            singlevalue:[],
            formvalues:[],
            formfildnames:[],
            formname:null,
            testhyperlink:/^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/,
            empty_string_validity: /^$/,
            // testhyperlink:/\b((http|https):\/\/?)[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|\/?))/,
            test_otp_regex: /{otp}/,
            selected:null,
            is_preview_ready: false,
            elementsvgs:{
                button:'<svg xmlns="http://www.w3.org/2000/svg" width="10.399" height="10.833" style="fill:#979797;margin-right:5%" viewBox="0 0 10.399 10.833"> <g transform="translate(-506.513 -407)"> <g transform="translate(506.513 407)"> <path class="a" d="M124.406,197c.029.01.058.022.088.029a1.2,1.2,0,0,1-.258,2.379q-4,0-8,0a1.2,1.2,0,0,1-.258-2.379c.03-.007.059-.019.088-.029Z" transform="translate(-115.035 -197)"/> <path class="a" d="M116.011,510.373a1.367,1.367,0,0,1-.68-.363,1.2,1.2,0,0,1,.8-2.042c.054,0,.108,0,.162,0q3.893,0,7.785,0a1.217,1.217,0,0,1,1.156.637,1.2,1.2,0,0,1-.791,1.746c-.03.007-.058.019-.087.029Z" transform="translate(-114.981 -499.54)"/><path class="a" d="M120.3,355c-1.322,0-2.644,0-3.965,0a1.2,1.2,0,0,1-.111-2.4c.049,0,.1,0,.149,0h7.863a1.2,1.2,0,0,1,.138,2.4c-.373.019-.749.007-1.123.007Z" transform="translate(-115.099 -348.381)"/> </g> </g> </svg>',
                textbox:'<svg xmlns="http://www.w3.org/2000/svg" width="13.169" height="10.06" style="fill:#979797;" viewBox="0 0 13.169 10.06"> <g transform="translate(120 2)"> <g transform="translate(-120 -2)"> <path class="a" d="M85.044,240.849H82.613c-.275,0-.386-.1-.385-.375.006-1.587-.029-3.175.019-4.761a7.627,7.627,0,0,1,.413-2.357,3.71,3.71,0,0,1,3.079-2.5,4.567,4.567,0,0,1,.855-.066c.231,0,.344.107.345.336q.005.786,0,1.573a.306.306,0,0,1-.289.337,1.34,1.34,0,0,0-1.4,1.321,7.624,7.624,0,0,0-.06,1.205c0,.128.079.122.165.122h2.126a.457.457,0,0,1,.214.029.334.334,0,0,1,.175.34q0,1.551,0,3.1,0,.641,0,1.281c0,.32-.093.411-.419.411h-2.4Z" transform="translate(-82.221 -230.79)"/> <path class="a" d="M340.8,237.753c.014-.677-.03-1.517.033-2.356a8.181,8.181,0,0,1,.337-1.872,3.724,3.724,0,0,1,2.969-2.65,4.538,4.538,0,0,1,1.027-.1.305.305,0,0,1,.347.338q.007.786,0,1.572a.311.311,0,0,1-.337.337,1.25,1.25,0,0,0-1.3,1.034,5.572,5.572,0,0,0-.12,1.5c0,.12.085.109.163.109h2.155c.248,0,.357.107.358.354,0,.611,0,1.223,0,1.834q0,1.288,0,2.577c0,.3-.1.4-.4.4H341.2c-.3,0-.4-.1-.4-.4C340.8,239.594,340.8,238.755,340.8,237.753Z" transform="translate(-333.266 -230.777)"/> </g> </g> </svg>',
                textarea:'<svg xmlns="http://www.w3.org/2000/svg" width="14.839" height="14.323" viewBox="0 0 14.839 14.323"><defs><svg:style>.f{fill:#fff;}</svg:style></defs><g transform="translate(175.699 113.805)"><path a" d="M18.839-55.567H8.568a.193.193,0,0,1-.174-.059.175.175,0,0,1-.034-.193.174.174,0,0,1,.165-.1c.115,0,.23,0,.346,0H19.194v.1q0,5.411,0,10.822a.187.187,0,0,1-.177.214c-.109,0-.179-.083-.179-.213q0-2.44,0-4.88,0-2.256,0-4.512,0-.542,0-1.084Z" transform="translate(-181.214 -56.991)"/><path class="a" d="M-101.054,43.377h10.2c.131,0,.2.064.2.177s-.078.178-.205.178h-10.558c0-.03-.005-.054,0-.079,0-.458,0-.917,0-1.375q0-1.837,0-3.674,0-2.375,0-4.75c0-.371,0-.742,0-1.113a.174.174,0,0,1,.225-.186.185.185,0,0,1,.133.192q0,1.975,0,3.95,0,2.617,0,5.234,0,.687,0,1.375C-101.057,43.325-101.055,43.346-101.054,43.377Z" transform="translate(-73.142 -144.104)"/><path class="a" d="M-175.127-112.766a2.208,2.208,0,0,1,.3.169.527.527,0,0,1,.143.6.533.533,0,0,1-.541.325.521.521,0,0,1-.456-.386,1.081,1.081,0,0,1,.021-.494,2.727,2.727,0,0,1,.424-1.02,1.155,1.155,0,0,1,.158-.176.2.2,0,0,1,.235-.032c.081.04.081.115.076.192a.923.923,0,0,1-.135.371C-174.979-113.064-175.055-112.908-175.127-112.766Z" transform="translate(0 0)"/><path class="a" d="M617.488,679.933a.582.582,0,0,1-.394-.224.529.529,0,1,1,.95-.271,2.688,2.688,0,0,1-.485,1.355.9.9,0,0,1-.147.156.194.194,0,0,1-.229.022c-.074-.038-.075-.108-.072-.18a.865.865,0,0,1,.127-.366C617.321,680.265,617.4,680.1,617.488,679.933Z" transform="translate(-780.502 -780.481)"/><path class="a" d="M721.452,679.936a.587.587,0,0,1-.389-.218.529.529,0,0,1,.6-.82.526.526,0,0,1,.341.551,2.694,2.694,0,0,1-.465,1.323.958.958,0,0,1-.159.175.2.2,0,0,1-.235.027c-.075-.043-.076-.114-.071-.188a.913.913,0,0,1,.134-.371C721.29,680.259,721.368,680.1,721.452,679.936Z" transform="translate(-882.868 -780.484)"/><path class="a" d="M-71.007-112.757a1.641,1.641,0,0,1,.278.14.514.514,0,0,1,.191.561.5.5,0,0,1-.41.38.523.523,0,0,1-.626-.516,2.6,2.6,0,0,1,.511-1.438.7.7,0,0,1,.131-.129.191.191,0,0,1,.217-.017c.074.037.078.105.076.178a.853.853,0,0,1-.125.366C-70.848-113.071-70.929-112.91-71.007-112.757Z" transform="translate(-102.525 -0.004)"/></g></svg>',
                hyperlink:'<svg xmlns="http://www.w3.org/2000/svg" width="15.629" height="15.629" style="fill:#979797;"viewBox="0 0 15.629 15.629"> <g transform="translate(445 228)"> <g transform="translate(-445 -228)"> <path class="a" d="M-162.923,91.849c.912-.912,1.82-1.827,2.736-2.734a1.736,1.736,0,0,1,2.872.7c.018.054.032.109.048.167a1.178,1.178,0,0,0,.71-.334c.2-.193.39-.391.587-.584a.068.068,0,0,0,.016-.094c-.081-.145-.152-.3-.243-.436a3.312,3.312,0,0,0-5.122-.517q-1.849,1.842-3.691,3.69a3.273,3.273,0,0,0-.93,1.752c-.024.13-.04.261-.059.392v.438c.02.133.035.267.061.4a3.3,3.3,0,0,0,2.878,2.673.546.546,0,0,1,.122.022h.5a.052.052,0,0,1,.037-.015,3.225,3.225,0,0,0,2.035-.94q1.879-1.867,3.747-3.745c.049-.048.094-.1.156-.167l-.083.017a3.793,3.793,0,0,1-1.968-.068.138.138,0,0,0-.161.043q-1.388,1.392-2.779,2.78a1.662,1.662,0,0,1-1.529.49,1.644,1.644,0,0,1-1.358-1.181,1.671,1.671,0,0,1,.437-1.769C-163.579,92.5-163.249,92.175-162.923,91.849Z" transform="translate(166 -81.754)"/> <path class="a" d="M200.484-247.468c-.02.133-.036.267-.061.4a3.24,3.24,0,0,1-.912,1.727q-1.858,1.86-3.719,3.718a3.311,3.311,0,0,1-5.114-.533c-.09-.136-.158-.287-.239-.429a.071.071,0,0,1,.02-.1c.191-.188.379-.379.57-.568a1.161,1.161,0,0,1,.722-.344c.008.025.016.052.024.078a1.735,1.735,0,0,0,2.9.786q1.752-1.74,3.492-3.492a3.574,3.574,0,0,0,.46-.518,1.731,1.731,0,0,0-1.239-2.665,1.69,1.69,0,0,0-1.452.5q-1.392,1.387-2.778,2.78a.145.145,0,0,1-.168.046,3.883,3.883,0,0,0-2.049-.044c.027-.032.043-.053.061-.071q.628-.632,1.256-1.263c.839-.84,1.682-1.677,2.518-2.52a3.341,3.341,0,0,1,1.8-.966c.125-.023.252-.037.378-.056h.438c.121.017.243.03.362.052a3.294,3.294,0,0,1,2.673,2.651c.026.129.04.261.059.392Z" transform="translate(-184.855 251)"/> </g> </g> </svg>',
                checkbox:'<svg xmlns="http://www.w3.org/2000/svg" width="14.611" height="12.369" style="fill:#979797;"  viewBox="0 0 14.611 12.369"> <g transform="translate(188 -107)"> <g transform="translate(-188 107)"> <path class="a" d="M231.954,174.87c.355-.357.686-.692,1.018-1.024l4.6-4.6a.714.714,0,0,1,1.135,0c.283.282.567.562.847.847a.7.7,0,0,1,0,1.1q-2.637,2.641-5.278,5.279l-1.748,1.749a.709.709,0,0,1-1.136.005l-3.649-3.649a.7.7,0,0,1-.009-1.114q.443-.448.891-.891a.7.7,0,0,1,1.058.008q1.071,1.069,2.139,2.14C231.868,174.758,231.9,174.805,231.954,174.87Z" transform="translate(-225.218 -168.389)"/> <path class="a" d="M160.269,150.362h3.64a2.424,2.424,0,0,1,1,.2.283.283,0,0,1,.1.5,4.921,4.921,0,0,1-.4.4.4.4,0,0,1-.247.084c-.3-.009-.59-.054-.885-.055q-3.394-.007-6.788,0a1.386,1.386,0,0,0-1.461,1.454q-.006,3.624,0,7.249a1.38,1.38,0,0,0,1.4,1.4c1.28.005,2.56,0,3.84,0,1.152,0,2.3,0,3.455,0a1.382,1.382,0,0,0,1.4-1.226,6.986,6.986,0,0,0,.013-.782c0-.522-.005-1.044.006-1.566a.483.483,0,0,1,.115-.282c.157-.181.337-.343.506-.515a.276.276,0,0,1,.321-.075.269.269,0,0,1,.179.276c-.006,1.008.017,2.018-.024,3.024a2.461,2.461,0,0,1-2.162,2.245c-.462.042-.93.03-1.4.031q-3.125,0-6.251,0a2.508,2.508,0,0,1-2.389-1.7,2.772,2.772,0,0,1-.138-.842q-.016-3.655,0-7.31a2.5,2.5,0,0,1,2.408-2.5c.91-.029,1.822-.008,2.733-.009Z" transform="translate(-154.095 -150.356)"/> </g> </g> </svg>',
                radiobutton:'<svg xmlns="http://www.w3.org/2000/svg" width="16.122" height="16.12" style="fill:#979797;" viewBox="0 0 16.122 16.12"> <g transform="translate(-708.017 101.974)"> <path class="a" d="M716.072-85.854a8.048,8.048,0,0,1-8.055-8.123,8.058,8.058,0,0,1,8.059-8,8.07,8.07,0,0,1,8.063,8.126A8.069,8.069,0,0,1,716.072-85.854ZM709.6-93.96a6.452,6.452,0,0,0,6.492,6.524,6.468,6.468,0,0,0,6.461-6.436,6.456,6.456,0,0,0-6.5-6.519A6.445,6.445,0,0,0,709.6-93.96Z" transform="translate(0)"/> <path class="a" d="M744.984-69.06A3.994,3.994,0,0,1,748.955-65a4,4,0,0,1-4.019,3.954,3.989,3.989,0,0,1-4-4.1A3.987,3.987,0,0,1,744.984-69.06Z" transform="translate(-28.869 -28.862)"/> </g> </svg>',
                dropdown:'<svg xmlns="http://www.w3.org/2000/svg" width="13.011" height="13.01" style="fill:#979797;" viewBox="0 0 13.011 13.01"> <g transform="translate(122 -226)"> <g transform="translate(-122 226)"> <path class="a" d="M143.989,227.558q2.5,0,5.007,0a1.429,1.429,0,0,1,1.463,1.111,1.722,1.722,0,0,1,.042.4q0,4.988,0,9.975a1.432,1.432,0,0,1-1.118,1.478,2.1,2.1,0,0,1-.476.044q-4.911,0-9.822,0a1.464,1.464,0,0,1-1.553-1.125,1.678,1.678,0,0,1-.039-.38q0-5,0-9.995a1.435,1.435,0,0,1,1.127-1.472,2.007,2.007,0,0,1,.438-.035Q141.524,227.556,143.989,227.558Zm-5.044,6.494c0,1.6,0,3.21,0,4.814,0,.185.033.251.238.25q4.824-.011,9.648,0c.173,0,.227-.042.226-.222q-.008-4.833,0-9.667c0-.185-.06-.22-.229-.219q-4.824.007-9.648,0c-.182,0-.237.045-.236.232C138.949,230.842,138.945,232.447,138.945,234.052Z" transform="translate(-137.492 -227.557)"/> <path class="a" d="M217.409,343.722l2.572-2.578.979.982-3.557,3.557-3.558-3.555.985-.987Z" transform="translate(-210.915 -336.783)"/> </g> </g> </svg>',
                fileupload:'<svg xmlns="http://www.w3.org/2000/svg" width="12.785" height="13.14" style="fill:#979797;"viewBox="0 0 12.785 13.14"><g transform="translate(-31.42 -443.609)"><g transform="translate(31.42 443.609)"><path class="f" d="M3.094,456.552a2.594,2.594,0,0,1-.34-.175.685.685,0,0,1-.279-.592q0-1.952,0-3.9a.752.752,0,0,1,1.022-.709.718.718,0,0,1,.457.709c0,.623,0,1.245,0,1.868q0,.593,0,1.186v.121H13.8v-.124q0-1.506,0-3.012a.76.76,0,0,1,.25-.619.7.7,0,0,1,.725-.136.665.665,0,0,1,.467.579,5.064,5.064,0,0,1,.014.545q0,1.726,0,3.453a.709.709,0,0,1-.16.527,1.9,1.9,0,0,1-.3.223.762.762,0,0,1-.143.06Z" transform="translate(-2.474 -443.412)"/><path class="f" d="M134.647,84a1.536,1.536,0,0,1,.69.506q.727.725,1.453,1.452c.417.418.835.834,1.246,1.257a.683.683,0,0,1,.119.82.711.711,0,0,1-.833.364.954.954,0,0,1-.375-.214c-.539-.523-1.067-1.059-1.6-1.59-.021-.021-.044-.04-.09-.082v.159q0,3.059,0,6.119a.742.742,0,0,1-.159.508.723.723,0,0,1-1.274-.314,1.516,1.516,0,0,1-.017-.23q0-3.044,0-6.087V86.51l-.324.317c-.494.483-.982.973-1.486,1.446a.718.718,0,0,1-.984-1.037c.375-.391.762-.771,1.144-1.154.6-.6,1.2-1.2,1.8-1.8a1.152,1.152,0,0,1,.459-.28Z" transform="translate(-128.129 -84)"/></g></g></svg>',
                video:'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="fill: rgb(151, 151, 151);margin-bottom: 2%;" xml:space="preserve" width="15" height="15"><rect id="backgroundrect" width="100%" height="100%" x="0" y="0" fill="none" stroke="none"/><g class="currentLayer" style=""><title>Layer 1</title><path d="M14.287040869975606,2.164383191050649 H0.6992602153575042 C0.5653235203334106,2.164383191050649 0.4566212750964669,2.275933519171331 0.4566212750964669,2.4139364978083266 v10.980345497337789 c0,0.13800297863699543 0.10870224523694494,0.24955330675767742 0.24263894026103774,0.24955330675767742 h13.587780654618102 c0.13393669502409286,0 0.24263894026103774,-0.11155032812068182 0.24263894026103774,-0.24955330675767742 V2.4139364978083266 C14.529679810236644,2.275933519171331 14.420977564999697,2.164383191050649 14.287040869975606,2.164383191050649 zM2.883010677706842,13.144728688388437 H0.9418991556185419 v-2.2459797608190932 h1.9411115220883004 V13.144728688388437 zM2.883010677706842,10.39964231405399 H0.9418991556185419 v-2.2459797608190932 h1.9411115220883004 V10.39964231405399 zM2.883010677706842,7.654555939719543 H0.9418991556185419 v-2.2459797608190932 h1.9411115220883004 V7.654555939719543 zM2.883010677706842,4.909469565385097 H0.9418991556185419 V2.6634898045660034 h1.9411115220883004 V4.909469565385097 zM9.321920235413996,8.1147322373807 l-2.669028342871413,1.746873147303739 C6.613341745280031,9.88730937528048 6.56796826345122,9.900535700538637 6.522594781622405,9.900535700538637 c-0.040278064083332295,0 -0.08031348922640356,-0.010231685577064773 -0.1167093302655593,-0.030695056731194305 C6.328240990473316,9.825919261818091 6.279955841361367,9.742069350747512 6.279955841361367,9.65098239378096 V6.15723609917348 c0,-0.09108695696655221 0.048285149111946556,-0.17493686803713188 0.12592960999547861,-0.21885825002648304 c0.07764446088353207,-0.04367182868259355 0.17227364758533686,-0.04042763569474374 0.2472490801259976,0.008235259123003356 l2.669028342871413,1.746873147303739 C9.391800250209174,7.739404064017155 9.434262064754856,7.8187620155660955 9.434262064754856,7.904109246477221 S9.391800250209174,8.068814428937287 9.321920235413996,8.1147322373807 zM14.044401929714569,13.144728688388437 h-1.9411115220883004 v-2.2459797608190932 h1.9411115220883004 V13.144728688388437 zM14.044401929714569,10.39964231405399 h-1.9411115220883004 v-2.2459797608190932 h1.9411115220883004 V10.39964231405399 zM14.044401929714569,7.654555939719543 h-1.9411115220883004 v-2.2459797608190932 h1.9411115220883004 V7.654555939719543 zM14.044401929714569,4.909469565385097 h-1.9411115220883004 V2.6634898045660034 h1.9411115220883004 V4.909469565385097 z" id="svg_1" class=""/><g id="svg_2"></g><g id="svg_3"></g><g id="svg_4"></g><g id="svg_5"></g><g id="svg_6"></g><g id="svg_7"></g><g id="svg_8"></g><g id="svg_9"></g><g id="svg_10"></g><g id="svg_11"></g><g id="svg_12"></g><g id="svg_13"></g><g id="svg_14"></g><g id="svg_15"></g><g id="svg_16"></g></g></svg>',
                image:'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="fill: rgb(151, 151, 151);margin-bottom: 2%;" xml:space="preserve" width="15" height="15"><rect id="backgroundrect" width="100%" height="100%" x="0" y="0" fill="none" stroke="none" class="" style=""/><g class="currentLayer" style=""><title>Layer 1</title><g id="svg_1" class=""><path d="M14.57597422412875,1.7305933623734049 H0.5473161789080976 C0.40903369246235155,1.7305933623734049 0.29680442810058616,1.8474405684495352 0.29680442810058616,1.9919965079575879 v11.501738405704032 c0,0.1445559395080532 0.11222926436176554,0.26140314558418254 0.25051175080751165,0.26140314558418254 h14.028658045220652 c0.13828248644574673,0 0.25051175080751165,-0.11684720607612967 0.25051175080751165,-0.26140314558418254 V1.9919965079575879 C14.826485974936261,1.8474405684495352 14.714256710574492,1.7305933623734049 14.57597422412875,1.7305933623734049 zM14.325462473321238,13.232331768077437 H0.7978279297156092 V2.25339965354177 h13.527634543605629 V13.232331768077437 z" id="svg_2"/><path d="M4.304992441020772,7.517536199316037 c0.7693215867298686,0 1.3950999402470323,-0.6529850576692892 1.3950999402470323,-1.4554927146127288 C5.700092381267803,5.259013021468703 5.074314027750641,4.606027963799413 4.304992441020772,4.606027963799413 s-1.3950999402470323,0.6529850576692892 -1.3950999402470323,1.4557541177583124 C2.9098925007737417,6.86455114164675 3.5356708542909034,7.517536199316037 4.304992441020772,7.517536199316037 zM4.304992441020772,5.128834254967778 c0.49300712558918297,0 0.8940764386320093,0.4187678392258609 0.8940764386320093,0.9329478265899478 S4.797999566609955,6.994729908147672 4.304992441020772,6.994729908147672 s-0.8940764386320093,-0.4185064360802763 -0.8940764386320093,-0.9326864234443636 S3.81198531543159,5.128834254967778 4.304992441020772,5.128834254967778 z" id="svg_3"/><path d="M2.0503866837531675,12.186719185740706 c0.058619749688957876,0 0.11774052287953055,-0.02143505793790302 0.16533775553295785,-0.06508938325046147 l4.086598190922937,-3.7542719768800303 l2.580772056818985,2.6927138026626647 c0.0979500945657371,0.10220862992341544 0.256273521076085,0.10220862992341544 0.3542236156418219,0 s0.0979500945657371,-0.26741541793261936 0,-0.3696240478560346 l-1.2042099861317086,-1.2565649208231655 l2.299948384163764,-2.6281472257033713 l2.8210128258433884,2.6984646718655165 c0.10195828257865724,0.09750337330290022 0.2605322208398123,0.09018408522654306 0.3539731038910145,-0.01620699502621932 c0.09344088305120199,-0.10639108025276232 0.08667706577939896,-0.2718592714075501 -0.015531728550065745,-0.3693626447104505 l-3.0061410096901398,-2.875434601426008 c-0.04910030315827237,-0.04679116305956875 -0.11448387011903285,-0.07005604301656107 -0.1803684605814089,-0.06848762414305586 c-0.06638561396399072,0.003136837747010197 -0.12901355166586848,0.03372100578035962 -0.17385515506041324,0.08495602231485955 l-2.453512087408769,2.804071542681526 l-1.1881772340800278,-1.239835119505778 c-0.0936913948020095,-0.09750337330290022 -0.2434974217849019,-0.10247003306899963 -0.3427000751046762,-0.011501738405704058 L1.884798416469403,11.729002277822804 c-0.10396237658511752,0.09541214813822664 -0.11398284661741792,0.26061893614743015 -0.022546057572676095,0.3691012415648662 C1.911853685556613,12.156919227144112 1.9809949287794901,12.186719185740706 2.0503866837531675,12.186719185740706 z" id="svg_4"/></g><g id="svg_5" class=""></g><g id="svg_6" class=""></g><g id="svg_7" class=""></g><g id="svg_8" class=""></g><g id="svg_9" class=""></g><g id="svg_10" class=""></g><g id="svg_11" class=""></g><g id="svg_12" class=""></g><g id="svg_13" class=""></g><g id="svg_14" class=""></g><g id="svg_15" class=""></g><g id="svg_16" class=""></g><g id="svg_17" class=""></g><g id="svg_18" class=""></g><g id="svg_19" class=""></g></g></svg>',
                message:'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="15" height="15" style="fill: rgb(151, 151, 151);margin-bottom: 2%;" xml:space="preserve"><rect id="backgroundrect" width="100%" height="100%" x="0" y="0" fill="none" stroke="none" class="" style=""/><g class="currentLayer" style=""><title>Layer 1</title><g id="svg_1" class=""><g id="_x32__26_"><g id="svg_2"><path d="M9.824624752136963,7.964126070363899 h-4.6816121148658745 c-0.2584249887405969,0 -0.46816121148658785,0.20971451156759174 -0.46816121148658785,0.46811274903480304 s0.20973622274599127,0.46811274903480304 0.46816121148658785,0.46811274903480304 h4.6816121148658745 c0.2584249887405969,0 0.46816121148658785,-0.20971451156759174 0.46816121148658785,-0.46811274903480304 S10.083049740877557,7.964126070363899 9.824624752136963,7.964126070363899 zM10.760947175110138,5.155449576155084 h-6.554256960812225 c-0.2584249887405969,0 -0.46816121148658785,0.20971451156759174 -0.46816121148658785,0.46811274903480304 s0.20973622274599127,0.46811274903480304 0.46816121148658785,0.46811274903480304 h6.554256960812225 c0.2584249887405969,0 0.46816121148658785,-0.20971451156759174 0.46816121148658785,-0.46811274903480304 S11.019372163850736,5.155449576155084 10.760947175110138,5.155449576155084 zM7.483818694704026,0.006209336772252725 C3.3471584695173346,0.006209336772252725 -0.006760689081374238,2.9403278094805922 -0.006760689081374238,6.559787823259492 c0,2.0686055357870496 1.0978349810588484,3.9101427331272562 2.8089672689195258,5.111326166271465 V14.98581730588594 l3.281338871432293,-1.9908927003263701 c0.4541347344051857,0.07492251632917817 0.9213412642056055,0.11844170418715905 1.4002732434335825,0.11844170418715905 c4.137149805538572,0 7.490579383785401,-2.9341184727083394 7.490579383785401,-6.553578486487238 C14.974398078489427,2.9403278094805922 11.620968500242599,0.006209336772252725 7.483818694704026,0.006209336772252725 zM7.483818694704026,12.177140811677125 c-0.5468122950163341,0 -1.074898141573205,-0.06366333386873328 -1.582397134333463,-0.17180043845622406 l-2.204115223187651,1.324740722405785 l0.029497216200854368,-2.1710885726607074 C2.0372372800234646,10.142728923492772 0.9295617338917999,8.463152618197704 0.9295617338917999,6.559787823259492 c0,-3.1021740091722836 2.9344222340891335,-5.617352988417633 6.554256960812225,-5.617352988417633 c3.6198347267230924,0 6.554256960812225,2.515178979245349 6.554256960812225,5.617352988417633 S11.103653421427117,12.177140811677125 7.483818694704026,12.177140811677125 z" id="svg_3"/></g></g></g><g id="svg_4" class=""></g><g id="svg_5" class=""></g><g id="svg_6" class=""></g><g id="svg_7" class=""></g><g id="svg_8" class=""></g><g id="svg_9" class=""></g><g id="svg_10" class=""></g><g id="svg_11" class=""></g><g id="svg_12" class=""></g><g id="svg_13" class=""></g><g id="svg_14" class=""></g><g id="svg_15" class=""></g><g id="svg_16" class=""></g><g id="svg_17" class=""></g><g id="svg_18" class=""></g></g></svg>',
                form: '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="" xml:space="preserve" width="15" height="15"><rect id="backgroundrect" width="100%" height="100%" x="0" y="0" fill="none" stroke="none" class="" style=""/> <g class="currentLayer" style=""><title>Layer 1</title><g id="svg_1" class="selected"><g id="svg_2"><g id="svg_3"><path d="M14.866769766943497,3.7713953911677676 L10.46209126274474,0.17334910119219643 C10.392323124827278,0.11638625919036447 10.297792812513814,0.08438825457607636 10.199206626807898,0.08438825457607636 H1.7645198174969843 C0.7682692320993111,0.08438825457607636 -0.04219388965481316,0.7464941048238393 -0.04219388965481316,1.5603071159131943 v11.928309741927377 c0,0.8137839484148695 0.8104986995909008,1.4758897986626298 1.806749284988574,1.4758897986626298 h11.404368844992074 c0.9962505853976733,0 1.806749284988574,-0.6620767875732699 1.806749284988574,-1.4758897986626298 V3.986139492979758 C14.975637947477633,3.90560682196595 14.936466749187407,3.8283582331695927 14.866769766943497,3.7713953911677676 zM10.571066176789202,1.121315417730751 l3.1353680215463453,2.561177252169878 H11.634309828835827 c-0.28405344881847827,0 -0.551100691658095,-0.09035585499167284 -0.751902002421057,-0.25438558981734083 c-0.2008368885997381,-0.16400067215117708 -0.3113772274623401,-0.38211604420408984 -0.31134164962556427,-0.6141233746635687 V1.121315417730751 zM14.232132314535678,13.488587795166078 c0,0.4789238129327036 -0.4769564798171992,0.8685380271554004 -1.063208074209845,0.8685380271554004 H1.7645198174969843 c-0.5862871722294216,0 -1.0632436520466209,-0.38961421422269726 -1.0632436520466209,-0.8685380271554004 V1.5603071159131943 c0.00003557783677586162,-0.4789238129327036 0.4769920576539749,-0.8685670898298917 1.0632436520466209,-0.8685670898298917 h8.063040726350266 v2.122185553987435 c-0.00007115567355172333,0.3942351794667228 0.1878509781765487,0.7648714672469745 0.5290780106938355,1.043611578287545 c0.3412626103540635,0.2787691737150611 0.7949867627566255,0.43227822037508606 1.2776356964579625,0.43227822037508606 h2.597822485699854 V13.488587795166078 z" data-original="#000000" class="active-path" data-old_color="#000000" fill="#979797" id="svg_4"/></g></g><g id="svg_5"><g id="svg_6"><path d="M3.6168087335586603,8.912030317762197 h-0.16643312043748013 c-0.205284118196721,0 -0.3717528164709771,0.1359551912676248 -0.3717528164709771,0.30367588575361504 s0.16646869827425634,0.30367588575361504 0.3717528164709771,0.30367588575361504 h0.16643312043748013 c0.205284118196721,0 0.3717528164709771,-0.1359551912676248 0.3717528164709771,-0.30367588575361504 C3.988561550029639,9.047985509029818 3.8220928517553845,8.912030317762197 3.6168087335586603,8.912030317762197 z" data-original="#000000" class="active-path" data-old_color="#000000" fill="#979797" id="svg_7"/></g></g><g id="svg_8"><g id="svg_9"><path d="M11.483068444701637,8.912030317762197 H4.819481927929884 c-0.205284118196721,0 -0.3717528164709771,0.1359551912676248 -0.3717528164709771,0.30367588575361504 s0.16646869827425634,0.30367588575361504 0.3717528164709771,0.30367588575361504 h6.663586516771751 c0.205284118196721,0 0.3717528164709771,-0.1359551912676248 0.3717528164709771,-0.30367588575361504 C11.854821261172615,9.047985509029818 11.688352562898357,8.912030317762197 11.483068444701637,8.912030317762197 z" data-original="#000000" class="active-path" data-old_color="#000000" fill="#979797" id="svg_10"/></g></g><g id="svg_11"><g id="svg_12"><path d="M3.6168087335586603,7.524432924202394 h-0.16643312043748013 c-0.205284118196721,0 -0.3717528164709771,0.1359551912676248 -0.3717528164709771,0.30367588575361504 c0,0.16772069448599025 0.16646869827425634,0.30367588575361504 0.3717528164709771,0.30367588575361504 h0.16643312043748013 c0.205284118196721,0 0.3717528164709771,-0.1359551912676248 0.3717528164709771,-0.30367588575361504 C3.988561550029639,7.660388115470015 3.8220928517553845,7.524432924202394 3.6168087335586603,7.524432924202394 z" data-original="#000000" class="active-path" data-old_color="#000000" fill="#979797" id="svg_13"/></g></g><g id="svg_14"><g id="svg_15"><path d="M11.483068444701637,7.524432924202394 H4.819481927929884 c-0.205284118196721,0 -0.3717528164709771,0.1359551912676248 -0.3717528164709771,0.30367588575361504 c0,0.16772069448599025 0.16646869827425634,0.30367588575361504 0.3717528164709771,0.30367588575361504 h6.663586516771751 c0.205284118196721,0 0.3717528164709771,-0.1359551912676248 0.3717528164709771,-0.30367588575361504 C11.854821261172615,7.660388115470015 11.688352562898357,7.524432924202394 11.483068444701637,7.524432924202394 z" data-original="#000000" class="active-path" data-old_color="#000000" fill="#979797" id="svg_16"/></g></g><g id="svg_17"><g id="svg_18"><path d="M3.6168087335586603,6.136835530642591 h-0.16643312043748013 c-0.205284118196721,0 -0.3717528164709771,0.1359551912676248 -0.3717528164709771,0.30367588575361504 c0,0.16772069448599025 0.16646869827425634,0.30367588575361504 0.3717528164709771,0.30367588575361504 h0.16643312043748013 c0.205284118196721,0 0.3717528164709771,-0.1359551912676248 0.3717528164709771,-0.30367588575361504 S3.8220928517553845,6.136835530642591 3.6168087335586603,6.136835530642591 z" data-original="#000000" class="active-path" data-old_color="#000000" fill="#979797" id="svg_19"/></g></g><g id="svg_20"><g id="svg_21"><path d="M11.483068444701637,6.136835530642591 H4.819481927929884 c-0.205284118196721,0 -0.3717528164709771,0.1359551912676248 -0.3717528164709771,0.30367588575361504 c0,0.16772069448599025 0.16646869827425634,0.30367588575361504 0.3717528164709771,0.30367588575361504 h6.663586516771751 c0.205284118196721,0 0.3717528164709771,-0.1359551912676248 0.3717528164709771,-0.30367588575361504 S11.688352562898357,6.136835530642591 11.483068444701637,6.136835530642591 z" data-original="#000000" class="active-path" data-old_color="#000000" fill="#979797" id="svg_22"/></g></g></g></g></svg>',
                phonenumber: '  <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24"  style="fill:#979797;margin-bottom: 2%;" width="24"> <path d="M0 0h24v24H0z" fill="none"/> <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/> </svg>',
                email: '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" style="fill:#979797;margin-bottom: 2%;" width="24"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
            },
            phone_number_otp:false,
            webhook_url: null,
            webhook_method: "POST",
            webhook_content_type: "application/x-www-form-urlencoded",
            webhook_json_mapping: null,
            webhook_headers: [],
            webhook_predefined_values: [],
            webhook_json_data: [],
            webhook_details: {},
            headers : [],
            closed_form_responses_data: [],
            iseditbot: false,
            current_menu : [],
            general_dropdown_nav: 'dropdown-menu',
            general_li_nav: 'nav-item',
            form_li_nav: 'nav-item',
            export_li_nav:'nav-item'
            // TaskList:['Send Email','Send SMS','Send Link','Confirm appointment'],
        };
    },
    computed:{
        isDisabled() {
            // evaluate whatever you need to determine disabled here...
            if(this.levels[this.selectedlevel].nodetype==null){
                return false;
            }
            return true;
        }
    },
    created(){
        // debugger;
        // //  console.log(uuid.v1());
        // //  console.log(this.$uuid.v1());
        // //  console.log(this.$uuid);

       
        // //  console.log(generateUUID())



        // this.levels.push({
        //     levelno:0,
        //     id:1,
        //     nodes:[],
        //     nodetype:null,
        //     message:'Display Message',
        //     islastnode:false,
        // });
          this.levels.push({
            header_id: this.generateUUID(),
            levelno:0,
            id:0,
            nodes:[],
            nodetype:null,
            message:'Display Message',
            islastnode:false,
        });
        this.selectedlevellist.push(0);
        this.maxid=1;
        // //  console.log(this.levels,"hi1");
        if(this.$route.params.botdata==undefined){
            this.$router.push({
                name: 'Dashboard',
            });
        } else {
            if(this.$route.params.botdata.bot_name==null||this.$route.params.botdata.bot_type==null){
                //router
            } else {
                if(this.$route.params.botdata.is_edit){
                    axios
                    .post(api_calls.show_closed_form_url(),{
                        companyname: this.$session.get("UserInformation").company_name,
                        companyid: this.$session.get("UserInformation").company_id,
                        email: this.$session.get("UserInformation").email,
                        license_key: this.$session.get("UserInformation").license_key,
                        token: this.$session.get("UserInformation").tokens,
                        bot_name: this.$route.params.botdata.bot_name,
                        bot_id: this.$route.params.botdata.bot_id,
                    }, {
                        headers: {
                            Authorization: `Bearer ${this.$session.get("at")}`
                        }
                    })
                    .then(response=>{

                        if(response.data.status === "Success"){
                            this.levels=response.data.bot_details.structure;
                            this.maxid = this.levels.length;
                            // for(let i = 0; i < response.data.bot_details.structure.length; i ++){
                            //    this.rendereditbot(response.data.bot_details.structure[i]);
                            // }
                            // //  console.log(this.levels,"hi");
                            this.iseditbot = true;
                            // console.log(response.data.bot_details.webhook_details);
                            // console.log(Object.keys(response.data.bot_details.webhook_details).length);

                            if(Object.keys(response.data.bot_details.webhook_details).length !== 0){
                                // console.log("Heyyyyyy");

                                this.webhook_url = response.data.bot_details.webhook_details.url;
                                this.webhook_method = response.data.bot_details.webhook_details.http_method;
                                this.webhook_content_type = response.data.bot_details.webhook_details.content_type;
                                this.webhook_json_data = response.data.bot_details.webhook_details.json_mapping;
                                // var webhook_headers_temp = Object.entries(response.data.bot_details.webhook_details.headers).map((e) => ( { [e[0]]: e[1] } ));
                                var webhook_headers_temp = Object.entries(response.data.bot_details.webhook_details.headers).map((e) => ( { key: e[0], value : e[1] } ));
                                this.webhook_headers = webhook_headers_temp;
                                // var predefined_key_value_pairs = Object.entries(response.data.bot_details.webhook_details.predefined_key_value_pairs).map((e) => ( { [e[0]]: e[1] } ));
                                var predefined_key_value_pairs = Object.entries(response.data.bot_details.webhook_details.predefined_key_value_pairs).map((e) => ( { key: e[0], value : e[1] } ));
                                this.webhook_predefined_values = predefined_key_value_pairs;
                            }
                            // else if(Object.keys(response.data.bot_details.webhook_details).length !== null){
                            //     this.webhook_url = response.data.bot_details.webhook_details.url;
                            //     this.webhook_method = response.data.bot_details.webhook_details.http_method;
                            //     this.webhook_content_type = response.data.bot_details.webhook_details.content_type;
                            //     this.webhook_json_data = response.data.bot_details.webhook_details.json_mapping;
                            //     // var webhook_headers_temp = Object.entries(response.data.bot_details.webhook_details.headers).map((e) => ( { [e[0]]: e[1] } ));
                            //     var webhook_headers_temp = Object.entries(response.data.bot_details.webhook_details.headers).map((e) => ( { key: e[0], value : e[1] } ));
                            //     this.webhook_headers = webhook_headers_temp;
                            //     // var predefined_key_value_pairs = Object.entries(response.data.bot_details.webhook_details.predefined_key_value_pairs).map((e) => ( { [e[0]]: e[1] } ));
                            //     var predefined_key_value_pairs = Object.entries(response.data.bot_details.webhook_details.predefined_key_value_pairs).map((e) => ( { key: e[0], value : e[1] } ));
                            //     this.webhook_predefined_values = predefined_key_value_pairs;
                            // }
                            // //  console.log(this.levels);
                            // debugger;
                            // for(let i=0; i < this.levels.length; i++){
                            //     for(let j = 0; j < this.levels[i].nodes.length; j++)
                            //     if(this.levels[i].nodes[j].data_mention == true){
                            //         var temp_message = '';
                            //         for(let k = 0; k < i; k++){
                            //             for(let l = 0; l < this.levels[k].nodes.length; j++){
                            //                 if(this.levels[i].nodes[j].data_value == this.levels[k].nodes[l].node_id){
                            //                     temp_message = this.levels[k].nodes[l].message;
                            //                     this.levels[i].nodes[j].message.replace(/{}/g, temp_message);
                            //                 }
                            //             }
                            //         } 
                            //     }
                            // }
                                // /@\[*([A-Za-z0-9\s])*\]/, "{}"
                                
                                //  console.log(response.data.bot_details.webhook_details);
                                
                        }
                    });
                } else {

                }
                this.bot_version = this.$route.params.botdata.bot_version;
                this.bot_id=this.$route.params.botdata.bot_id;
                this.bot_name=this.$route.params.botdata.bot_name;
                this.bot_type=this.$route.params.botdata.bot_type;
                // //  console.log(this.levels, "hi2");
                
                // if(this.bot_type=='Open Bot'){
                //     axios
                //         .post(api_calls.open_form_tasks(), {
                //             companyid: this.$session.get("UserInformation").company_id,
                //             companyname: this.$session.get("UserInformation").company_name,
                //             email: this.$session.get("UserInformation").email,
                //             license_key: this.$session.get("UserInformation").license_key,
                //             token: this.$session.get("UserInformation").tokens,
                //             isShow: true,
                //             per_page: this.per_page,
                //             page_no: this.page_no
                //         })
                //         .then(response=>{
                //             for(let i=0;i<response.data.TaskList;i++){
                //                 if(response.data.TaskList[i].TaskType=='Email'||response.data.TaskList[i].TaskType=='SMS'){
                //                     this.TaskList.push(response.data.TaskList[i].TaskName);
                //                 }
                //             }
                //         });
                // }
            }
        }
    },
    mounted() {
        $(".dropdown-toggle").dropdown();
        setTimeout(() => {
        this.setdatamentionvalues();
        }, 6000);
        // const $control_tab = $('.control');
        // const $setting_tab = $('.setting');
        // const $window = $(window);
        // const offset = $control_tab.offset();
        // const topPadding = 15;

        // $window.scroll(() => {
        // if ($window.scrollTop() > offset.top) {
        //     // $setting_tab.stop().animate({
        //     //     marginTop: $window.scrollTop() - offset.top + topPadding,
        //     // });
        //     $control_tab.stop().animate({
        //         marginTop: $window.scrollTop() - offset.top + topPadding,
        //     });
        // } else {
        //     // $setting_tab.stop().animate({
        //     //     marginTop: 0,
        //     // }, 0);
        //     $control_tab.stop().animate({
        //         marginTop: 0,
        //     }, 0);
        // }
        // });

        // function generateUUID() { // Public Domain/MIT
        // var d = new Date().getTime();//Timestamp
        // var d2 = (performance && performance.now && (performance.now()*1000)) || 0;//Time in microseconds since page-load or 0 if unsupported
        // return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        //     var r = Math.random() * 16;//random number between 0 and 16
        //     if(d > 0){//Use timestamp until depleted
        //         r = (d + r)%16 | 0;
        //         d = Math.floor(d/16);
        //     } else {//Use microseconds since page-load if supported
        //         r = (d2 + r)%16 | 0; 
        //         d2 = Math.floor(d2/16);
        //     }
        //     return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        // });
        // }
    },
    methods:{

        setdatamentionvalues() {
            for(let i=0; i < this.levels.length; i++){
                for(let j = 0; j < this.levels[i].nodes.length; j++)
                if(this.levels[i].nodes[j].data_mention == true){
                    var temp_message = '';
                    for(let k = 0; k < i; k++){
                        for(let l = 0; l < this.levels[k].nodes.length; l++){
                            if(this.levels[i].nodes[j].data_value == this.levels[k].nodes[l].node_id){
                                temp_message = this.levels[k].nodes[l].message;
                                this.levels[i].nodes[j].message = this.levels[i].nodes[j].message.replace(/{}/g, '@[' +temp_message + ']');
                            }
                        }
                    } 
                }
            }
        },
        generateUUID() { // Public Domain/MIT
            var d = new Date().getTime();//Timestamp
            var d2 = (performance && performance.now && (performance.now()*1000)) || 0;//Time in microseconds since page-load or 0 if unsupported
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16;//random number between 0 and 16
                if(d > 0){//Use timestamp until depleted
                    r = (d + r)%16 | 0;
                    d = Math.floor(d/16);
                } else {//Use microseconds since page-load if supported
                    r = (d2 + r)%16 | 0; 
                    d2 = Math.floor(d2/16);
                }
                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
        },
        startdrag(ev){
            $(".level").toggleClass("drophere");
            setTimeout(() => {
                $(".level").toggleClass("drophere");
            }, 3000);
            ev.dataTransfer.setData("text", ev.target.id);
        },
        //Akshay
        formdrop(ev){
            if(ev.target.id.includes('Form')){
                ev.preventDefault();
                var data = ev.dataTransfer.getData("text");
                var id=document.getElementById(document.getElementById(ev.target.id).parentNode.id).parentNode.id;
                id=document.getElementById(id).parentNode.id;
                this.addformfield(data,id);
            }
        },
        completedrop(ev){
            var checkid=null;
            // debugger;
            // //  console.log(ev.target.id);
            if(isNaN(Number(ev.target.id))||ev.target.id==null){
                // //  console.log('getparent');
                checkid=document.getElementById(ev.target.id).parentNode.id;
                if(isNaN(Number(checkid))){
                    // //  console.log('getparentagain');
                    checkid=document.getElementById(checkid).parentNode.id
                    if(isNaN(Number(checkid))){
                        // //  console.log('getparentagainandagain');
                        checkid=document.getElementById(checkid).parentNode.id
                        if(isNaN(Number(checkid))){
                        // //  console.log('getparentagainandagain');
                        checkid=document.getElementById(checkid).parentNode.id
                    }
                    }
                }
            } else {
                checkid=ev.target.id;
            }
            var droplevelindex=null;
            for(let i=0;i<this.levels.length;i++){
                if(checkid==this.levels[i].id){
                    droplevelindex=i;
                }
            }
            ev.preventDefault();
            var data = ev.dataTransfer.getData("text");
            // //  console.log(data,this.levels[droplevelindex].nodetype,this.levels[droplevelindex].islastnode);
            if(checkid === ""){
                toastr.error("It seems you dropped the element at a wrong place, please try placing it correctly")
            } else {
                if((this.levels[droplevelindex].nodetype==null&&this.levels[droplevelindex].islastnode==false)||(this.levels[droplevelindex].nodetype=='Button'&&data=='Button')||data=='Message'||data=='Video'||data=='Image'||data=='Hyperlink'){
                    this.createnode(data,droplevelindex);
                } else if(this.levels[droplevelindex].nodetype=='Form'){
                } else {
                    // swal
                    if(this.levels[droplevelindex].nodetype!=null){
                        Swal({
                            type: "error",
                            text: "Single level cannnot have more then 1 input elements",
                            showConfirmButton: true,
                            timer:2500,
                        }).then(result => {
                        });
                    } else {
                        Swal({
                            type: "error",
                            text: "This is selected as last node, last node cannot have input type elements",
                            showConfirmButton: true,
                            timer:3000,
                        }).then(result => {
                        });
                    }
                }
            }
            // this.createnode(data,droplevelindex);
            // $("#1").sortable();
        },
        handledrop(ev){
            ev.preventDefault();
        },
        createnode(id,i){
            // axios.patch()
            // debugger;
            // //  console.log(this.levels[i]);
            this.levels[i].header_id = this.generateUUID();
            if(id=='Button'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Button',
                    name:'Button'+(this.levels[i].nodes.length+1),
                    followinglevelid:null,
                    message:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                    // svg:'<svg xmlns="http://www.w3.org/2000/svg" width="10.399" height="10.833" style="fill:#979797;margin-right:5%" viewBox="0 0 10.399 10.833"> <g transform="translate(-506.513 -407)"> <g transform="translate(506.513 407)"> <path class="a" d="M124.406,197c.029.01.058.022.088.029a1.2,1.2,0,0,1-.258,2.379q-4,0-8,0a1.2,1.2,0,0,1-.258-2.379c.03-.007.059-.019.088-.029Z" transform="translate(-115.035 -197)"/> <path class="a" d="M116.011,510.373a1.367,1.367,0,0,1-.68-.363,1.2,1.2,0,0,1,.8-2.042c.054,0,.108,0,.162,0q3.893,0,7.785,0a1.217,1.217,0,0,1,1.156.637,1.2,1.2,0,0,1-.791,1.746c-.03.007-.058.019-.087.029Z" transform="translate(-114.981 -499.54)"/><path class="a" d="M120.3,355c-1.322,0-2.644,0-3.965,0a1.2,1.2,0,0,1-.111-2.4c.049,0,.1,0,.149,0h7.863a1.2,1.2,0,0,1,.138,2.4c-.373.019-.749.007-1.123.007Z" transform="translate(-115.099 -348.381)"/> </g> </g> </svg>',
                    // buttonindex:this.levels[i].buttoncount,
                });
                // this.levels[i].buttons.push({
                //     id:id+this.maxid+this.levels[i].nodes.length,
                //     nodetype:'Button',
                //     name:'Button'+(this.levels[i].buttoncount+1),
                //     followinglevelid:null,
                //     svg:'<svg xmlns="http://www.w3.org/2000/svg" width="10.399" height="10.833" viewBox="0 0 10.399 10.833"><defs><style>.f{fill:#fff;}</style></defs><g transform="translate(-506.513 -407)"><g transform="translate(506.513 407)"><path class="a" d="M124.406,197c.029.01.058.022.088.029a1.2,1.2,0,0,1-.258,2.379q-4,0-8,0a1.2,1.2,0,0,1-.258-2.379c.03-.007.059-.019.088-.029Z" transform="translate(-115.035 -197)"/><path class="a" d="M116.011,510.373a1.367,1.367,0,0,1-.68-.363,1.2,1.2,0,0,1,.8-2.042c.054,0,.108,0,.162,0q3.893,0,7.785,0a1.217,1.217,0,0,1,1.156.637,1.2,1.2,0,0,1-.791,1.746c-.03.007-.058.019-.087.029Z" transform="translate(-114.981 -499.54)"/><path class="a" d="M120.3,355c-1.322,0-2.644,0-3.965,0a1.2,1.2,0,0,1-.111-2.4c.049,0,.1,0,.149,0h7.863a1.2,1.2,0,0,1,.138,2.4c-.373.019-.749.007-1.123.007Z" transform="translate(-115.099 -348.381)"/></g></g></svg>',
                //     nodeindex:null,
                // });
                // this.levels[i].buttoncount=this.levels[i].buttoncount+1;
                // this.levels[i].buttons[this.levels[i].buttoncount-1].nodeindex=this.levels[i].nodes.length-1;
                // this.createlevel(i);
            } else if(id=='Text_Box'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Text Box',
                    placeholder:null,
                    message:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Textarea'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Text Area',
                    placeholder:'Enter Placeholder',
                    message:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Email'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Email',
                    message:null,
                    error_msg:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Number'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Number',
                    message:null,
                    minnumber:null,
                    maxnumber:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='PhoneNumber'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Phone Number',
                    message:null,
                    error_msg:null,
                    enable_otp_validation:false,
                    otp_question_label:null,
                    otp_msg:null,
                    incorrect_otp_msg:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Hyperlink'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Hyperlink',
                    hyperlink:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Check_Box'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Check Box',
                    values:[{title:null,payload:null}],
                    message:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Radio_Button'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Radio Button',
                    values:[{title:null,payload:null}],
                    message:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Dropdown'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Dropdown',
                    values:[{title:null,payload:null}],
                    placeholder:null,
                    message:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='File_Upload'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'File Upload',
                    message:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Video'){
                // this.levels[i].message = "Display Message";
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Video',
                    videourl:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Image'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Image',
                    imageurl:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            } else if(id=='Message'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Message',
                    message:null,
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null                    
                });
            } else if(id=='Form'){
                this.levels[i].nodes.push({
                    node_id: this.generateUUID(),
                    id:id+this.maxid+this.levels[i].nodes.length,
                    nodetype:'Form',
                    formname:null,
                    formfields:[],
                    followinglevelid:null,
                    data_mention:false,
                    data_value:null,
                    data_element_type:null
                });
            }
            if(id=='Message'||id=='Video'||id=='Image'||id=='Hyperlink'){

            } else {
                this.createlevel(i);
                this.levels[i].nodetype=id;
            }
            this.selectnode(this.levels[i].nodes.length-1,this.levels[i].levelno);
        },
        //Akshay : Changed levels[id-2] to levels[this.selectedlevel]
        //Error was : divs id is passed in function, can't be accepted by levels as it requires integer to identify nodes inside array.
        addformfield(type,id){

            for(let i=0;i<this.levels[this.selectedlevel].nodes.length;i++){
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Form'){
                     console.log('Congrats');
                    if(type=='Text_Box'){
                        this.levels[this.selectedlevel].nodes[i].formfields.push({node_id: this.generateUUID(), nodetype:'Text Box',header:null ,placeholder:null });
                    } else if(type=='Dropdown'){
                        this.levels[this.selectedlevel].nodes[i].formfields.push({node_id: this.generateUUID(), nodetype:'Dropdown',header:null ,values:[{title:null,payload:null}] });
                    } else if(type=='Check_Box'){
                        this.levels[this.selectedlevel].nodes[i].formfields.push({node_id: this.generateUUID(), nodetype:'Check Box',header:null ,values:[{title:null,payload:null}] });
                    } else if(type=='Radio_Button'){
                        this.levels[this.selectedlevel].nodes[i].formfields.push({node_id: this.generateUUID(), nodetype:'Radio Button',header:null ,values:[{title:null,payload:null}] });
                    }
                }
            }
            this.setvalues();
        },
        createlevel(levelindex){
            // debugger;
            // //  console.log(this.maxid);
            // this.maxid=this.maxid+1;
            // //  console.log(this.maxid);
            this.levels.push({
                levelno:this.levels[levelindex].levelno+1,
                id:this.maxid,
                nodes:[],
                nodetype:null,
                message:"Display Message",
                previousnodeindex:this.levels[levelindex].nodes.length-1,
                previouslevelindex:levelindex,
                img:null,
                flavor_text:null,
                pop_up:null,
                islastnode:false,
                data_mention:false,
                data_value:null,
                data_element_type:null,
                header_id: this.generateUUID()
            });
            // console.log("MAX ID",this.maxid);

            // //  console.log(levelindex,this.levels[levelindex],this.levels[levelindex].nodes,this.levels[levelindex].nodes[this.levels[levelindex].nodes.length-1], this.maxid )
            this.levels[levelindex].nodes[this.levels[levelindex].nodes.length-1].followinglevelid=this.maxid;
            if(this.selectedlevellist[this.levels[this.levels.length-1].levelno]==undefined){
                this.selectedlevellist[this.levels[levelindex].levelno]=levelindex;
                this.selectedlevellist.push(this.levels.length-1);
            } else {
                this.selectedlevellist[this.levels[levelindex].levelno]=levelindex;
                this.selectedlevellist[this.levels[levelindex].levelno+1]=this.levels.length-1;
                while(this.selectedlevellist.length>levelindex+2){
                    this.selectedlevellist.pop();
                }
            }
            this.maxid=this.maxid+1;
        },
        selectnode(nodeindex,levelindex){
            // debugger;
            var issetval=true;
            if(this.selectedlevel==this.selectedlevellist[levelindex]){
                issetval=false;
            }
            if(levelindex!=null){
                this.selectedlevel=this.selectedlevellist[levelindex];
                this.selected=true;
            } else {
                this.selectedlevel=levelindex;
            }
            this.selectednode=nodeindex;
            // //  console.log(this.selectedlevel, 'selectedlevel');
            if(this.selectedlevel!=null){
                this.setvalues();
            }
        },
        resetpath(nodeindex,levelindex){
            // debugger;
            // //  console.log(this.selectedlevellist[levelindex+1],)
            // //  console.log(nodeindex);
            // //  console.log(levelindex);
            if(this.levels[this.selectedlevellist[levelindex]].nodes[nodeindex].followinglevelid != null){
                this.selectedlevellist[levelindex+1]=this.levels[this.selectedlevellist[levelindex]].nodes[nodeindex].followinglevelid;
                while(this.selectedlevellist.length>levelindex+2){
                    this.selectedlevellist.pop();
                }
                //  console.log(this.selectedlevellist);
                this.setstraightpath();
            }
        },
        setstraightpath(){
            // debugger;
            var lastnodetype=this.levels[this.selectedlevellist[this.selectedlevellist.length-1]].nodetype;
            // //  console.log(lastnodetype);
            if(lastnodetype!="Button"&&lastnodetype!="Message"&&lastnodetype!="Hyperlink"&&lastnodetype!="Image"&&lastnodetype!="Video"&&lastnodetype!=null){
                // //  console.log(this.selectedlevellist, this.levels, this.selectedlevellist.length);
                this.selectedlevellist.push(this.levels[this.selectedlevellist[this.selectedlevellist.length-1]].nodes[0].followinglevelid);
                // //  console.log(this.selectedlevellist);
                // //  console.log(this.followinglevelid);
                // //  console.log(this.levels[this.levels[this.selectedlevellist[this.selectedlevellist.length-1]].nodes[0].followinglevelid].nodes.length);
                // if(this.levels[this.levels[this.selectedlevellist[this.selectedlevellist.length-1]].nodes[0].followinglevelid].nodes.length>0){
                //     this.setstraightpath();
                // }
            }  
        },
        setvalues(){
            // debugger;
            this.singlevalue=[];
            this.value=[];
            this.formvalues=[];
            this.formfildnames=[];
            this.formname=null;
            // this.displaymessage=this.levels[this.selectedlevel].message;
            for(let i=0;i<this.levels[this.selectedlevel].nodes.length;i++){
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Button'){
                      this.singlevalue.push({
                        message:  this.levels[this.selectedlevel].nodes[i].message,
                        name: this.levels[this.selectedlevel].nodes[i].name,
                    });
                    // this.singlevalue.push(this.levels[this.selectedlevel].nodes[i].name);
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Text Box'){
                     this.singlevalue.push({
                        message:  this.levels[this.selectedlevel].nodes[i].message,
                        placeholder:  this.levels[this.selectedlevel].nodes[i].placeholder,
                    });
                    // this.singlevalue.push(this.levels[this.selectedlevel].nodes[i].placeholder);
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Text Area'){
                    this.singlevalue.push({
                        message:  this.levels[this.selectedlevel].nodes[i].message,
                        placeholder : this.levels[this.selectedlevel].nodes[i].placeholder
                    });
                    // this.singlevalue.push(this.levels[this.selectedlevel].nodes[i].placeholder);
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Hyperlink'){
                    this.singlevalue.push({
                        hyperlink: this.levels[this.selectedlevel].nodes[i].hyperlink
                    });
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Check Box'){
                    // this.value.push(this.levels[this.selectedlevel].nodes[i].values);
                    // //  console.log("This is chechbox",this.levels);
                    // //  console.log(this.nodes);
                    // //  console.log(this.nodetype);
                     this.singlevalue.push({
                        message:  this.levels[this.selectedlevel].nodes[i].message,
                    });
                    for(let j=0;j<this.levels[this.selectedlevel].nodes[i].values.length;j++){
                        this.value.push(this.levels[this.selectedlevel].nodes[i].values[j].title);
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Radio Button'){
                    // this.value.push(this.levels[this.selectedlevel].nodes[i].values);
                    // //  console.log("This is radio",this.levels);
                    

                    this.singlevalue.push({
                        message:  this.levels[this.selectedlevel].nodes[i].message,
                    });
                    for(let j=0;j<this.levels[this.selectedlevel].nodes[i].values.length;j++){
                        this.value.push(this.levels[this.selectedlevel].nodes[i].values[j].title);
                    }
                    
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Dropdown'){
                    // //  console.log(this.levels[selectedlevel]);
                    //  console.log("This is Dropdown",this.levels);
                    //  console.log(this.nodes);
                    //  console.log(this.nodetype);

                    //  console.log(this.id)
                    this.singlevalue.push({
                        message:  this.levels[this.selectedlevel].nodes[i].message,
                        id: this.levels[this.selectedlevel].nodes[i].id,
                    });
                    // this.singlevalue.push(this.levels[this.selectedlevel].nodes[i].placeholder);
                    for(let j=0;j<this.levels[this.selectedlevel].nodes[i].values.length;j++){
                        this.value.push(this.levels[this.selectedlevel].nodes[i].values[j].title);
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='File Upload'){
                    this.singlevalue.push(this.levels[this.selectedlevel].nodes[i].message);
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Image'){
                    this.displaymessage=this.levels[this.selectedlevel].message;
                    this.singlevalue.push({
                        imageurl: this.levels[this.selectedlevel].nodes[i].imageurl
                    });
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Message'){
                    // this.displaymessage=this.levels[this.selectedlevel].message;
                    // this.singlevalue.push(this.levels[this.selectedlevel].nodes[i].message);
                    // this.displaymessage=this.levels[this.selectedlevel].message;
                    //  console.log("This is message",this.levels);
                    //  console.log(this.nodes);
                    //  console.log(this.nodetype);

                    this.singlevalue.push({
                        message: this.levels[this.selectedlevel].nodes[i].message,
                    });
                    
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Email'){
                    this.singlevalue.push({
                        message: this.levels[this.selectedlevel].nodes[i].message,
                        error_msg: this.levels[this.selectedlevel].nodes[i].error_msg
                    });
                }   
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Number'){
                    this.singlevalue.push({
                        message: this.levels[this.selectedlevel].nodes[i].message,
                        minnumber: this.levels[this.selectedlevel].nodes[i].minnumber,
                        maxnumber: this.levels[this.selectedlevel].nodes[i].maxnumber,
                    });
                } 
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Phone Number'){
                    this.singlevalue.push({
                        message:  this.levels[this.selectedlevel].nodes[i].message,
                        error_msg :  this.levels[this.selectedlevel].nodes[i].error_msg,
                        enable_otp_validation: this.levels[this.selectedlevel].nodes[i].enable_otp_validation,
                        otp_question_label : this.levels[this.selectedlevel].nodes[i].otp_question_label,
                        otp_msg : this.levels[this.selectedlevel].nodes[i].otp_msg,
                        incorrect_otp_msg : this.levels[this.selectedlevel].nodes[i].incorrect_otp_msg,
                    }) ;
                } 
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Video'){
                    // this.displaymessage=this.levels[this.selectedlevel].message;
                    this.levels[this.selectedlevel].message = "Display Message";
                    this.singlevalue.push({
                       videourl: this.levels[this.selectedlevel].nodes[i].videourl});
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Form'){
                    // //  console.log(this.levels[this.selectedlevel].nodes[i]);
                    this.formname=this.levels[this.selectedlevel].nodes[i].formname;
                    this.singlevalue.push({})
                    // this.singlevalue.push(this.levels[this.selectedlevel].nodes[i].videourl);
                    for(let j=0;j<this.levels[this.selectedlevel].nodes[i].formfields.length;j++){
                        this.formfildnames.push(this.levels[this.selectedlevel].nodes[i].formfields[j].header);
                        this.formvalues.push(this.levels[this.selectedlevel].nodes[i].formfields[j].values);
                    }
                }
            }
        },
        saveval() {
            // debugger;
            var str = this.singlevalue[0]['message']; 
            if(str != null){
                var res = str.charAt(str.length-1); 
                if(this.levels[this.selectedlevel]!= 0){
                if(res == "@"){
                    // //  console.log(this.selectedlevellist);
                    // //  console.log(this.levels);
                    // //  console.log(this.levels[this.selectedlevel].levelno, "Hello");
                    var arr = [];
                    for(let i = 0; i < this.levels.length; i+= 1){
                        // if(this.levels[i].levelno != 0){
                            // if(this.levels[i].has("header_id")){
                            // if(this.levels[i].nodetype != "Text_Box" && this.levels[i].nodetype != "Text_Box"  )
                            if(this.levels[this.selectedlevel].levelno != this.levels[i].levelno ){
                                //    arr.push({
                                //     data_mention: true,
                                //     data_value : this.levels[i].header_id,
                                //     data_element_type : this.levels[i].nodetype,
                                //     message: this.levels[i].message 
                                // })
                        
                            for(let j = 0; j< this.levels[i].nodes.length; j++){
                                arr.push({
                                    data_mention: false,
                                    data_value : this.levels[i].nodes[j].node_id,
                                    data_element_type : this.levels[i].nodes[j].nodetype,
                                    message: this.levels[i].nodes[j].message 
                                })
                            }
                            }
                            
                            
                        // }
                    }
                    // //  console.log(arr); 
                    // }
                    // for(let i =0; i < this.selectedlevellist)
                    // var arr = [
                    //     "Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antigua & Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia & Herzegovina","Botswana","Brazil","British Virgin Islands","Brunei","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central Arfrican Republic","Chad","Chile","China","Colombia","Congo","Cook Islands","Costa Rica","Cote D Ivoire","Croatia","Cuba","Curacao","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands","Faroe Islands","Fiji","Finland","France","French Polynesia","French West Indies","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guam","Guatemala","Guernsey","Guinea","Guinea Bissau","Guyana","Haiti","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo"
                    // ];
                    // this.autocomplete($("#display_message"), countries);

                    var currentFocus;
                    /*execute a function when someone writes in the text field:*/
                    // inp.addEventListener("input", function(e) {
                    
                    var a, b, i, val = this.singlevalue[0]['message'].charAt(this.singlevalue[0]['message'].length-1);
                    /*close any already open lists of autocompleted values*/
                    closeAllLists();
                    if (!val) { return false;}
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("DIV");
                    a.setAttribute("id",'#display_message' + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    a.setAttribute("style", "overflow-y:scroll; position: absolute; width: 100%; z-index: 1000; max-height: 100px; background-color: white");
                    /*append the DIV element as a child of the autocomplete container:*/
                    document.querySelector(".autocomplete").appendChild(a);
                    /*for each item in the array...*/
                    for (i = 0; i < arr.length; i++) {
                        /*check if the item starts with the same letters as the text field value:*/
                        // if (arr["i"].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        // if (val == "@") {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].message.substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].message.substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i].message + "'>";
                        b.innerHTML += "<input type='hidden' value='" + arr[i].data_value + "'>";
                        b.innerHTML += "<input type='hidden' value='" + arr[i].data_element_type + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        // b.addEventListener("click", function(e) {
                            /*insert the value for the autocomplete text field:*/
                        //     document.getElementById('display_message').value = str + this.getElementsByTagName("input")[0].value;
                        //      vm.levels[vm.selectedlevel].nodes.push({
                        //         data_mention: true,
                        //         data_value: this.getElementsByTagName("input")[1].value,
                        //         data_element_type: this.getElementsByTagName("input")[2].value
                        //     })
                        //     //  console.log(vm.levels[vm.selectedlevel].nodes);
                        //     // this.levO this.getElementsByTagName("input")[1].m;
                        //     /*close the list of autocompleted values,
                        //     (or any other open lists of autocompleted values:*/
                            // closeAllLists();
                        // });
                            const vm = this;
                           b.addEventListener("click", function(e) {
                        // debugger;
                            /*insert the value for the autocomplete text field:*/
                            document.getElementById('display_message').value = str +"["+ this.getElementsByTagName("input")[0].value+"]";
                            vm.levels[vm.selectedlevel].nodes[0].data_mention =  true;
                            vm.levels[vm.selectedlevel].nodes[0].data_value = this.getElementsByTagName("input")[1].value;
                            vm.levels[vm.selectedlevel].nodes[0].data_element_type = this.getElementsByTagName("input")[2].value;
                            // //  console.log(vm.levels[vm.selectedlevel].nodes);
                            // this.levO this.getElementsByTagName("input")[1].m;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                        // }
                    }
                    // const vm = this;
                    // b.addEventListener("click", function(e) {
                    //     // debugger;
                    //         /*insert the value for the autocomplete text field:*/
                    //         document.getElementById('display_message').value = str +"["+ this.getElementsByTagName("input")[0].value+"]";
                    //         vm.levels[vm.selectedlevel].nodes[0].data_mention =  true;
                    //         vm.levels[vm.selectedlevel].nodes[0].data_value = this.getElementsByTagName("input")[1].value;
                    //         vm.levels[vm.selectedlevel].nodes[0].data_element_type = this.getElementsByTagName("input")[2].value;
                    //         // //  console.log(vm.levels[vm.selectedlevel].nodes);
                    //         // this.levO this.getElementsByTagName("input")[1].m;
                    //         /*close the list of autocompleted values,
                    //         (or any other open lists of autocompleted values:*/
                    //         closeAllLists();
                    //     });
                    // b.addEventListener("keydown", function(e) {
                    //      var x = document.getElementById('display_message' + "autocomplete-list");
                    //     if (x) x = x.getElementsByTagName("div");
                    //     if (e.keyCode == 40) {
                    //         /*If the arrow DOWN key is pressed,
                    //         increase the currentFocus variable:*/
                    //         // document.getElementById('display_message').value = str + this.getElementsByTagName("input")[0].value;
                    //         // vm.levels[vm.selectedlevel].nodes[0].data_mention =  true;
                    //         // vm.levels[vm.selectedlevel].nodes[0].data_value = this.getElementsByTagName("input")[1].value;
                    //         // vm.levels[vm.selectedlevel].nodes[0].data_element_type = this.getElementsByTagName("input")[2].value;
                    //         currentFocus++;
                    //         // alert("down");
                    //         /*and and make the current item more visible:*/
                    //         addActive(x);
                    //     } else if (e.keyCode == 38) { //up
                    //         /*If the arrow UP key is pressed,
                    //         decrease the currentFocus variable:*/
                    //         currentFocus--;
                    //         alert("up");
                    //         /*and and make the current item more visible:*/
                    //         // addActive(x);
                    //     } else if (e.keyCode == 13) {
                    //         /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    //         e.preventDefault();
                    //         if (currentFocus > -1) {
                    //         /*and simulate a click on the "active" item:*/
                    //         if (x) x[currentFocus].click();
                    //         }
                    //     }
                    // });
                    // function addActive(x) {
                    // /*a function to classify an item as "active":*/
                    // if (!x) return false;
                    // /*start by removing the "active" class on all items:*/
                    // removeActive(x);
                    // if (currentFocus >= x.length) currentFocus = 0;
                    // if (currentFocus < 0) currentFocus = (x.length - 1);
                    // /*add class "autocomplete-active":*/
                    // x[currentFocus].classList.add("autocomplete-active");
                    // }
                    // function removeActive(x) {
                    //     /*a function to remove the "active" class from all autocomplete items:*/
                    //     for (var i = 0; i < x.length; i++) {
                    //     x[i].classList.remove("autocomplete-active");
                    //     }
                    // }
                    // $("#display_message").autocomplete({
                    //     lookup: countries,
                    //     onSelect: function (suggestion) {
                    //     alert('You selected: ' + suggestion.value + ', ' + suggestion.data);
                    //         }
                    //     });
                    function closeAllLists(elmnt) {
                    /*close all autocomplete lists in the document,
                    except the one passed as an argument:*/
                    var x = document.getElementsByClassName("autocomplete-items");
                    for (var i = 0; i < x.length; i++) {
                        if (elmnt != x[i] && elmnt != document.getElementById('display_message')) {
                            x[i].parentNode.removeChild(x[i]);
                            }
                        }
                    }
                }
                }
            }
            if (event.keyCode === 13) {
                this.savenodevalue();
            }
        },
        savenodevalue(){
            // debugger;
            // this.levels[this.selectedlevel].message=this.displaymessage;
            for(let i=0;i<this.levels[this.selectedlevel].nodes.length;i++){
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Button'){
                    if(this.singlevalue[i].message !=''){
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                    } if(this.singlevalue[i].name!=''){
                        this.levels[this.selectedlevel].nodes[i].name=this.singlevalue[i].name;
                    } else {
                        toastr.error("Button Field Empty");
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Text Box'){
                    if(this.singlevalue[i].message === '' || this.singlevalue[i].message == null || this.singlevalue[i].message.split(' ').join('') == '' ||
                     this.singlevalue[i].placeholder=='' || this.singlevalue[i].placeholder  == null || this.singlevalue[i].placeholder.split(' ').join('') === ''){
                        toastr.error("Field Cannot be Empty");
                    } else {
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                        this.levels[this.selectedlevel].nodes[i].placeholder=this.singlevalue[i].placeholder;
                        // toastr.error("Field Cannot be Empty");
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Text Area'){
                    if(this.singlevalue[i].message === '' || this.singlevalue[i].message == null || this.singlevalue[i].message.split(' ').join('') == '' ||
                     this.singlevalue[i].placeholder=='' || this.singlevalue[i].placeholder  == null || this.singlevalue[i].placeholder.split(' ').join('') === ''){
                        toastr.error("Field Cannot be Empty");
                    } else {
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                        this.levels[this.selectedlevel].nodes[i].placeholder=this.singlevalue[i].placeholder;
                    }

                }
                 if(this.levels[this.selectedlevel].nodes[i].nodetype=='Email'){
                     this.levels[this.selectedlevel].message = "";
                    if(this.singlevalue[i].message === '' || this.singlevalue[i].message == null || this.singlevalue[i].message.split(' ').join('') == '' ||
                     this.singlevalue[i].error_msg=='' || this.singlevalue[i].error_msg  == null || this.singlevalue[i].error_msg.split(' ').join('') === ''){
                        toastr.error("Any Field Cannot be Empty");
                    } else {
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                        this.levels[this.selectedlevel].nodes[i].error_msg=this.singlevalue[i].error_msg;
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Number'){
                     if(this.singlevalue[i].message !=''){
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                    } if(this.singlevalue[i].minnumber!=''){
                        this.levels[this.selectedlevel].nodes[i].minnumber=this.singlevalue[i].minnumber;
                    } if(this.singlevalue[i].maxnumber!=''){
                        this.levels[this.selectedlevel].nodes[i].maxnumber=this.singlevalue[i].maxnumber;
                    }else {
                        toastr.error("Please fill all the fields");
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Phone Number'){
                     this.levels[this.selectedlevel].message = "";
                    //  if(this.singlevalue[i].message !='' ){
                    //     this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                    // }if(this.singlevalue[i].error_msg!=''){
                    //     this.levels[this.selectedlevel].nodes[i].error_msg=this.singlevalue[i].error_msg;
                    // }if(this.singlevalue[i].enable_otp_validation!=''){
                    //     this.levels[this.selectedlevel].nodes[i].enable_otp_validation=this.singlevalue[i].enable_otp_validation;
                    // }if(this.singlevalue[i].otp_question_label!=''){
                    //     this.levels[this.selectedlevel].nodes[i].otp_question_label=this.singlevalue[i].otp_question_label;
                    // }if(this.singlevalue[i].otp_msg!=''){
                    //     this.levels[this.selectedlevel].nodes[i].otp_msg=this.singlevalue[i].otp_msg;
                    // }if(this.singlevalue[i].incorrect_otp_msg!=''){
                    //     this.levels[this.selectedlevel].nodes[i].incorrect_otp_msg=this.singlevalue[i].incorrect_otp_msg;
                    // } else {
                    //     toastr.error("Please Enter Value in Fields");
                    // }
                    if(this.singlevalue[i].message === '' || this.singlevalue[i].message == null || this.singlevalue[i].message.split(' ').join('') == '' ||
                     this.singlevalue[i].error_msg=='' || this.singlevalue[i].error_msg  == null || this.singlevalue[i].error_msg.split(' ').join('') === ''){
                        toastr.error("Any Field Cannot be Empty");
                    } else {
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                        this.levels[this.selectedlevel].nodes[i].error_msg=this.singlevalue[i].error_msg;
                    }
                    if(this.singlevalue[i].enable_otp_validation){
                        if(this.singlevalue[i].otp_question_label === '' || this.singlevalue[i].otp_question_label == null || this.singlevalue[i].otp_question_label.split(' ').join('') == '' ||
                        this.singlevalue[i].otp_msg=='' || this.singlevalue[i].otp_msg  == null || this.singlevalue[i].otp_msg.split(' ').join('') === '' ||
                        this.singlevalue[i].incorrect_otp_msg=='' || this.singlevalue[i].incorrect_otp_msg  == null || this.singlevalue[i].incorrect_otp_msg.split(' ').join('') === ''){
                            toastr.error("Any Field Cannot be Empty");
                        } else if(!(this.test_otp_regex.test(this.singlevalue[i].otp_msg))){
                            toastr.error("Please enter {otp} where you want the OTP number to be sent")

                        } else {
                            this.levels[this.selectedlevel].nodes[i].otp_question_label=this.singlevalue[i].otp_question_label;
                            this.levels[this.selectedlevel].nodes[i].otp_msg=this.singlevalue[i].otp_msg;
                            this.levels[this.selectedlevel].nodes[i].incorrect_otp_msg=this.singlevalue[i].incorrect_otp_msg;
                    }
                    }

                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Hyperlink'){
                    // this.levels[this.selectedlevel].message=this.displaymessage;
                    // //  console.log(this.singlevalue[i])
                    if(this.testhyperlink.test(this.singlevalue[i].hyperlink)){
                        this.levels[this.selectedlevel].nodes[i].hyperlink=this.singlevalue[i].hyperlink;
                    } else if(this.singlevalue[i].hyperlink==''){
                        toastr.error("Hyperlink Field Empty");
                    } else {
                        // this.singlevalue[i].hyperlink=='';
                        toastr.error("Enter Valid Hyperlink");
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Check Box'){
                    if(this.singlevalue[i].message !=''){
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                    } 
                    for(let j=0;j<this.levels[this.selectedlevel].nodes[i].values.length;j++){
                        if((this.value[j] == '' )||(this.value[j] == null) || (this.value[j].split(' ').join('') === '')){
                            toastr.error("CheckBox value cannot be empty");
                        } else {
                            this.levels[this.selectedlevel].nodes[i].values[j].title=this.value[j];
                        }
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Radio Button'){
                     if(this.singlevalue[i].message !=''){
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                    } 
                    for(let j=0;j<this.levels[this.selectedlevel].nodes[i].values.length;j++){
                        // this.levels[this.selectedlevel].nodes[i].values[j].title=this.value[j];
                         if((this.value[j] == '' )||(this.value[j] == null) || (this.value[j].split(' ').join('') === '')){
                            toastr.error("Radio Button value cannot be empty");
                        } else {
                            this.levels[this.selectedlevel].nodes[i].values[j].title=this.value[j];
                        }
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Dropdown'){
                    if(this.singlevalue[i].message ==='' ||(this.singlevalue[i].message == null) || (this.singlevalue[i].message.split(' ').join('') === '')){
                        toastr.error("The Placeholder Value cannot be empty")
                    } else {
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                    }
                    this.levels[this.selectedlevel].nodes[i].placeholder=this.singlevalue[i];
                    for(let j=0;j<this.levels[this.selectedlevel].nodes[i].values.length;j++){
                        if((this.value[j] == '' )||(this.value[j] == null) || (this.value[j].split(' ').join('') === '')){
                            toastr.error("Dropdown value cannot be empty");
                        } else {
                            this.levels[this.selectedlevel].nodes[i].values[j].title=this.value[j];
                        }
                        // this.levels[this.selectedlevel].nodes[i].values[j].title=this.value[j];
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='File Upload'){
                    this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i];
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Image'){
                    // this.levels[this.selectedlevel].message=this.singlevalue[i].message;
                    if((this.singlevalue[i].imageurl == '' )||(this.singlevalue[i].imageurl == null) || (this.singlevalue[i].imageurl.split(' ').join('') === '')){
                            toastr.error("Image URL value cannot be empty");
                    } else {
                        this.levels[this.selectedlevel].nodes[i].imageurl=this.singlevalue[i].imageurl;
                    }
                    // this.levels[this.selectedlevel].nodes[i].imageurl=this.singlevalue[i].imageurl;
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Message'){
                    if(this.singlevalue[i].message === '' || this.singlevalue[i].message === null || this.singlevalue[i].message.split(' ').join('') === ''){
                        toastr.error("The Message String Cannot Be Empty")
                    } else {    
                        this.levels[this.selectedlevel].nodes[i].message=this.singlevalue[i].message;
                    }
                    // this.levels[this.selectedlevel].message=this.singlevalue[i];
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Video'){
                    // this.levels[this.selectedlevel].message=this.singlevalue[i].message;
                    if((this.singlevalue[i].videourl == '' )||(this.singlevalue[i].videourl == null) || (this.singlevalue[i].videourl.split(' ').join('') === '')){
                            toastr.error("Video URL value cannot be empty");
                    } else {
                        this.levels[this.selectedlevel].nodes[i].videourl=this.singlevalue[i].videourl;
                    }
                }
                if(this.levels[this.selectedlevel].nodes[i].nodetype=='Form'){
                    this.levels[this.selectedlevel].nodes[i].formname=this.formname;
                    // this.levels[this.selectedlevel].nodes[i].videourl=this.singlevalue[i];
                    for(let j=0;j<this.levels[this.selectedlevel].nodes[i].formfields.length;j++){
                        // this.formfildnames.push(this.levels[this.selectedlevel].nodes[i].formfields[j].header);
                        this.levels[this.selectedlevel].nodes[i].formfields[j].header=this.formfildnames[j];
                        this.levels[this.selectedlevel].nodes[i].formfields[j].placeholder=this.formfildnames[j];
                        // this.formvalues.push(this.levels[this.selectedlevel].nodes[i].formfields[j].values);
                        this.levels[this.selectedlevel].nodes[i].formfields[j].values=this.formvalues[j];
                    }
                }
                // //  console.log(this.levels);
            }
        },
        deletenode(deletenodeindex){
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete!!"
            }).then(result=>{
                if (result.value) {
                    this.selected=null;
                    this.clearall();
                    if(this.levels[this.selectedlevel].nodes[this.selectednode].nodetype=='Message'||this.levels[this.selectedlevel].nodes[this.selectednode].nodetype=='Image'||this.levels[this.selectedlevel].nodes[this.selectednode].nodetype=='Video'||this.levels[this.selectedlevel].nodes[this.selectednode].nodetype=='Hyperlink'){
                        this.levels[this.selectedlevel].nodes.splice(deletenodeindex,1);
                        this.selectednode=0;
                    } else {
                        while(this.selectedlevellist.length>this.levels[this.selectedlevel].levelno+1){
                            this.selectedlevellist.pop();
                        }
                        this.levels[this.selectedlevel].nodes.splice(deletenodeindex,1);
                        // if(this.levels[this.selectedlevel].nodes.length==0){
                            this.levels[this.selectedlevel].nodetype=null;
                        // }
                        this.selectedlevel=this.selectedlevellist[this.selectedlevellist.length-1];
                        this.selectednode=0;
                        // //  console.log(this.selectedlevel);
                        this.selectnode(this.selectednode,this.levels[this.selectedlevel].levelno);
                    }
                }
            });
        },
        andvalue(index){
            // //  console.log('hehehehe');
            this.levels[this.selectedlevel].nodes[index].values.push({
                title:null,
                payload:null,
            });
            this.value.push(null);
        },
        addheader(){
            event.preventDefault();
            this.webhook_headers.push({
                key:null,
                value:null,
            });
        },
        deleteheader(valueindex){
            // //  console.log(valueindex,this.selectednode);
            this.webhook_headers.splice(valueindex, 1);
            // this.value.splice(valueindex, 1);
        },
        addpredefinedvalues(){
            event.preventDefault();
            this.webhook_predefined_values.push({
                key:null,
                value:null,
            });
        },
        deletepredefinedvalues(valueindex){
            event.preventDefault();
            this.webhook_predefined_values.splice(valueindex, 1);
            // this.value.splice(valueindex, 1);
        },
        andformvalue(i,j){
            // this.levels[this.selectedlevel].nodes[i].formfields[j].values.push({
            //     title:null,
            //     payload:null,
            // });
            this.formvalues[j].push({
                title:null,
                payload:null,
            });
        },
        deletevalue(valueindex){
            // //  console.log(valueindex,this.selectednode);
            this.levels[this.selectedlevel].nodes[this.selectednode].values.splice(valueindex, 1);
            this.value.splice(valueindex, 1);
        },
        deleteformvalue(level,node,index){
            // this.levels[this.selectedlevel].nodes[this.selectednode].values.splice(valueindex, 1);
            // //  console.log(this.formvalues,this.levels);
            this.formvalues[node].splice(index, 1);
            // //  console.log(this.formvalues,this.levels);
        },
        clearall(){
            // debugger;    
            if(this.levels[this.selectedlevel].nodes[this.selectednode].placeholder!=undefined){
                this.name=this.levels[this.selectedlevel].nodes[this.selectednode].placeholder;
                // //  console.log('h1',this.name);
            } else {
                this.name=null;
                // //  console.log('h2',this.name,this.selected);
            }
            this.hyperlink=null;
            this.message=null;
            this.value=[];
            // setTimeout(function(){ alert("After 5 seconds!"); }, 5000);
            // this.selectedlevel=null;
            // this.selectednode=null;
        },
        setasleafnode(){
            if(this.isDisabled){
                Swal({
                    type: "error",
                    text: "Contains child level. Levels with child level cannot be last level of a branch.",
                    showConfirmButton: true,
                    timer:3000,
                }).then(result => {
                });
            } else {
                if(this.levels[this.selectedlevel].islastnode==true){
                    this.levels[this.selectedlevel].islastnode=false;
                } else {
                    this.levels[this.selectedlevel].islastnode=true;
                }
            }
        },
        whendisabbled(){
            if(this.isDisabled){
                Swal({
                    type: "error",
                    text: "Contains child level. Levels with child level cannot be last level of a branch.",
                    showConfirmButton: true,
                    timer:3000,
                }).then(result => {
                });
            }
        },
        finalsave(){
            // //  console.log(this.levels);
            // debugger;
            var is_leafnode_set = true;
            for(let i=0;i<this.levels.length;i++){
                if(this.levels[i].nodetype==null){
                    if(!this.levels[i].islastnode){
                        is_leafnode_set=false
                    }
                }
                for(let j = 0,n=this.levels[i].nodes.length; j<n; j++){
                    if(this.levels[i].nodes[j].data_mention == true){
                        // var x = this.levels[i].nodes[j].message;
                          this.levels[i].nodes[j].message =  this.levels[i].nodes[j].message.replace(/@\[*([A-Za-z0-9\s])*\]/, "{}");
                        // this.levels[i].nodes[j].message = x;
                    }
                    if(n>1 && (this.levels[i].nodes[j].nodetype === 'Message'
                    ||this.levels[i].nodes[j].nodetype ==='Video'
                    ||this.levels[i].nodes[j].nodetype ==='Image'
                    ||this.levels[i].nodes[j].nodetype ==='Hyperlink')
                    && this.levels[i].nodes[j].followinglevelid === null) {
                        this.levels[i].nodes[j].followinglevelid = 
                        this.levels[i].nodes.find(n => n.followinglevelid !== null).followinglevelid;
                    }
                }
            }
            // //  console.log(this.levels);
            // debugger;   
            if(is_leafnode_set){
                // //  console.log(this.levels);
                // //  console.log('proper save');
                this.show_spinner = true;
                axios
                .post(api_calls.send_closed_form(),{
                    companyname: this.$session.get("UserInformation").company_name,
                    companyid: this.$session.get("UserInformation").company_id,
                    email: this.$session.get("UserInformation").email,
                    license_key: this.$session.get("UserInformation").license_key,
                    token: this.$session.get("UserInformation").tokens,
                    structure:this.levels,
                    bot_name:this.bot_name,
                }, {
                    headers: {
                        Authorization: `Bearer ${this.$session.get("at")}`,
                    }
                })
                .then(response=>{
                    this.show_spinner = false;
                    if(response.data.success=="Success"){
                        this.is_preview_ready=true;
                        Swal({
                            type: "success",
                            text: "Your Bot has Been Saved Successfully",
                            showConfirmButton: true,
                            timer: 2000,
                        }).then(result => {
                            this.setdatamentionvalues();
                        });
                    } 
                    else if(response.data.success=="Failure" || response.data.success=="Error"){
                        this.show_spinner = false;
                        // //  console.log(response);
                          Swal({
                            type: "error",
                            text: "Some Error Occurred, Please try Again",
                            showConfirmButton: true,
                            timer: 2500,
                        }).then(result => {
                            this.setdatamentionvalues();
                        });
                    } else{
                        this.show_spinner = false;
                        // //  console.log(response);
                          Swal({
                            type: "error",
                            text: "Some Error Occurred, Please try Again",
                            showConfirmButton: true,
                            timer: 2500,
                        }).then(result => {
                            this.setdatamentionvalues();
                        });
                    }
                });
            } else {
                Swal.fire({
                    title: "All branches don't have last node",
                    text: "Do you want to ignore the last nodes?",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete!!"
                }).then(result=>{
                    if(result.value){
                        for(let i=0;i<this.levels.length;i++){
                            if(this.levels[i].nodetype==null){
                                if(!this.levels[i].islastnode){
                                    this.levels[i].islastnode=true;
                                }
                            }
                        }
                        // //  console.log(this.levels);
                        // //  console.log('leaf nodes added');
                        this.show_spinner = true;
                        axios
                        .post(api_calls.send_closed_form(),{
                            companyname: this.$session.get("UserInformation").company_name,
                            companyid: this.$session.get("UserInformation").company_id,
                            email: this.$session.get("UserInformation").email,
                            license_key: this.$session.get("UserInformation").license_key,
                            token: this.$session.get("UserInformation").tokens,
                            structure:this.levels,
                            bot_name:this.bot_name,
                        }, {
                            headers: {
                                Authorization: `Bearer ${this.$session.get("at")}`,
                            }
                        })
                        .then(response=>{
                            if(response.data.message=="Query Executed Successfully"){
                                this.show_spinner = false;
                                this.is_preview_ready=true;
                                Swal({
                                    type: "success",
                                    text: "Query Executed Successfully",
                                    showConfirmButton: true,
                                    timer: 2000,
                                }).then(result => {
                                });
                            } else if(response.data.success=="Failure" || response.data.success=="Error"){
                                this.show_spinner = false;
                                // //  console.log(response);
                                Swal({
                                    type: "error",
                                    text: "Some Error Occurred, Please try Again",
                                    showConfirmButton: true,
                                    timer: 2500,
                                }).then(result => {
                                    this.setdatamentionvalues();
                                });
                            } else{
                                this.show_spinner = false;
                                // //  console.log(response);
                                Swal({
                                    type: "error",
                                    text: "Some Error Occurred, Please try Again",
                                    showConfirmButton: true,
                                    timer: 2500,
                                }).then(result => {
                                    this.setdatamentionvalues();
                                });
                            }
                        });
                    }
                })
            }
        },
        route_to_preview(){
            this.$router.push({
                name: 'Test Closed Bot',
                params: {botdata:{bot_name:this.bot_name,bot_type:this.bot_type,is_edit:false}},
            });
        },
        makeVisible(){
            // $list.toggleClass('active');
            var li = document.getElementById('list');
            if(li.className=='list'){
                $(li).removeClass();
                $(li).addClass("list active");
            } else {
                $(li).removeClass();
                $(li).addClass("list");
            }
        },
        open_webhook_modal(){
            
            if(this.iseditbot  || this.is_preview_ready){
            $('#modelWindow').modal('show');
            // this.webhook_json_data = [];
            // console.log("This is webhooooook",this.webhook_json_data);
            // console.log("This is webhooooook",this.levels);
            // for(let i = 0; i< this.webhook_json_data.length; i += 1) {
            //     this.webhook_json_data.push({
            //         key_name :this.webhook_json_data[i].key_name,
                    
            //     });
            // }
            if(!this.iseditbot || this.webhook_json_data.length == 0){
            for(let i = 0; i< this.levels.length; i +=1 ){
                for(let j= 0; j< this.levels[i].nodes.length; j+= 1) {
                    if(this.levels[i].nodes[j].message != undefined && this.levels[i].nodes[j].message != null && this.levels[i].nodes[j].message != ''){
                        
                        this.webhook_json_data.push({
                            key_name : "",
                            node_id : this.levels[i].nodes[j].node_id,
                            message : this.levels[i].nodes[j].message,
                        });
                    }
                    // console.log("THis is node_id:",this.node_id);console.log("THis is key_name:",this.key_name);
                    
                }
            }
            }
            }
            else{
                Swal({
                            type: "error",
                            text: "You Need To Save the Bot Before Adding Webhook Parameters",
                            showConfirmButton: true,
                            timer: 3000,
                        }).then(result => {
                        });
            }
        },
        add_webhook(){
            event.preventDefault();
            // debugger;
            // //  console.log("Hi");
            // //  console.log(this.webhook_url);
            // //  console.log(this.webhook_method);
            // //  console.log(this.webhook_content_type);
            // //  console.log(this.webhook_headers);
            // //  console.log(this.webhook_predefined_values);
            // //  console.log(this.webhook_json_data);
            const json_data = []
            for(let i = 0; i< this.webhook_json_data.length; i += 1) {
                json_data.push({
                    key_name :this.webhook_json_data[i].key_name,
                    node_id :this.webhook_json_data[i].node_id,
                    message :this.webhook_json_data[i].message
                })
            }
            // console.log(this.webhook_headers);
            var headers = this.webhook_headers.reduce(
                 (obj, item) => Object.assign(obj, { [item.key]: item.value }), {});
            // console.log(headers);
            var predefined_key_value_pairs = this.webhook_predefined_values.reduce(
                (obj, item) => Object.assign(obj, { [item.key]: item.value }), {});

                this.webhook_details.headers = headers;
                this.webhook_details.url = this.webhook_url;
                this.webhook_details.http_method  = this.webhook_method;
                this.webhook_details.content_type = this.webhook_content_type;
                this.webhook_details.json_mapping = json_data;
                this.webhook_details.predefined_key_value_pairs = predefined_key_value_pairs;
                this.webhook_details.enabled = true;
            
            // //  console.log(this.webhook_details);
            axios.patch(api_calls.send_closed_form(), {
                companyname: this.$session.get("UserInformation").company_name,
                companyid: this.$session.get("UserInformation").company_id,
                email: this.$session.get("UserInformation").email,
                license_key: this.$session.get("UserInformation").license_key,
                token: this.$session.get("UserInformation").tokens,
                bot_name: this.bot_name,
                webhook_details: this.webhook_details
            }).then(response => {
                if(response.data.success=="Success"){
                        this.show_spinner = false;
                        this.is_preview_ready=true;
                        Swal({
                            type: "success",
                            text: "Webhook Parameters Added Successfully",
                            showConfirmButton: true,
                            timer: 2000,
                        }).then(result => {
                        });
                } 
            });
        },
        open_csv_modal(){
            if(this.iseditbot  || this.is_preview_ready){
            this.show_spinner = true;            
            axios
            .post(api_calls.get_closed_form_response(),{
                companyid: this.$session.get("UserInformation").company_id,
                companyname: this.$session.get("UserInformation").company_name,
                license_key: this.$session.get("UserInformation").license_key,
                email: this.$session.get("UserInformation").email,
                token: this.$session.get("UserInformation").tokens,
                bot_name: this.bot_name,
                bot_id: this.bot_id,
                bot_version: this.bot_version
            }, {
                headers: {
                    Authorization: `Bearer ${this.$session.get("at")}`,
                }
            })
            .then(response=>{
                // //  console.log(response);
                if(response.status == 200 && response.statusText == "OK"){
                    this.closed_form_responses_data = response.data;
                }
                // headers = [];
                this.show_spinner = false;    
                if(response.data.conversation_rows.length > 0){
                    this.headers = Object.keys(response.data.conversation_rows[0]);
                }        
                $('#exportcsvmodal').modal('show');
                // for(let i=0;i<response.data.Bots.length;i++){
                // this.bot_name.push({
                //     name:response.data.Bots[i].bot_name,
                //     type:'Closed Bot',
                //     id: response.data.Bots[i].bot_id
                // });
                // }
            });
            }
            else{
                Swal({
                            type: "error",
                            text: "You Need To Save the Bot Before You Can View This Data",
                            showConfirmButton: true,
                            timer:3000,
                        }).then(result => {
                        });
            }
            // $('#exportcsvmodal').modal('show');
        },
        rotatechevron(index) {
          $($('.fa-chevron-right')).toggleClass('down');
        },
        renderdata(response,header){
            if(header === "StartTime" || header === "EndTime" || header === "Time" ){
               return moment(response).format("YYYY-MM-DD HH:mm");
            }
            else{
                return response;
            }
        },
        change_menu(menu){
            // debugger;
            if(menu === 'general'){
                // if (this.current_menu === 'general'){
                // } else {
                // }
                $("#navbarLiGeneral").toggleClass('show')
                // this.general_li_nav = 'nav-item show';
            } 
            else if(menu === 'form'){
                $("#navbarLiForm").toggleClass('show')
                // this.form_li_nav = 'nav-item show';
            } else if(menu === 'export'){
                $("#exportLiForm").toggleClass('show')
                // this.export_li_nav = 'nav-item show'
            }
        },
        close_page(){
            // if(!this.is_preview_ready || !this.iseditbot){
            //     swal({
            //         title: "Are You Sure",
            //         text: "You want to abandon your changes",
            //         type: 'question',
            //         showCancelButton: true,
            //         confirmButtonText: 'Yes',
            //         confirmButtonColor: "#3085d6",
            //         cancelButtonColor: "#d33",
            //     }).then(result => {
            //         if (result.value){
                        this.$router.push('/bot/designbot')
            //         }
            //     })
            // }
        } 


        // rendereditbot(data){
        //     // axios.patch()
        //     // debugger;
        //     // //  console.log(this.levels[i]);
        //     // this.levels[i].header_id = this.generateUUID();
        //     if(id=='Button'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Button',
        //             name:'Button'+(this.levels[i].nodes.length+1),
        //             followinglevelid:null,
        //             message:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Text_Box'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Text Box',
        //             placeholder:'Enter Placeholder',
        //             message:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Textarea'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Text Area',
        //             placeholder:'Enter Placeholder',
        //             message:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Email'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Email',
        //             message:null,
        //             error_msg:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Number'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Number',
        //             message:null,
        //             minnumber:null,
        //             maxnumber:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='PhoneNumber'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Phone Number',
        //             message:null,
        //             error_msg:null,
        //             enable_otp_validation:false,
        //             otp_question_label:null,
        //             otp_msg:null,
        //             incorrect_otp_msg:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Hyperlink'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Hyperlink',
        //             hyperlink:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Check_Box'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Check Box',
        //             values:[{title:null,payload:null}],
        //             message:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Radio_Button'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Radio Button',
        //             values:[{title:null,payload:null}],
        //             message:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Dropdown'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Dropdown',
        //             values:[{title:null,payload:null}],
        //             placeholder:null,
        //             message:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='File_Upload'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'File Upload',
        //             message:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Video'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Video',
        //             videourl:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Image'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Image',
        //             imageurl:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Message'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Message',
        //             message:null,
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     } else if(id=='Form'){
        //         this.levels[i].nodes.push({
        //             node_id: this.generateUUID(),
        //             id:id+this.maxid+this.levels[i].nodes.length,
        //             nodetype:'Form',
        //             formname:null,
        //             formfields:[],
        //             followinglevelid:null,
        //             data_mention:false,
        //             data_value:null,
        //             data_element_type:null
        //         });
        //     }
        //     if(id=='Message'||id=='Video'||id=='Image'||id=='Hyperlink'){

        //     } else {
        //         this.createlevel(i);
        //         this.levels[i].nodetype=id;
        //     }
        //     this.selectnode(this.levels[i].nodes.length-1,this.levels[i].levelno);
        // },
    },
    // watch :{
    //    current_menu(newVal,oldVal){
    //     //  console.log(newVal,oldVal)
        // if(newVal === 'general'){
        //     if (oldVal === 'general'){
        //         this.general_li_nav = 'nav-item';
        //     } else {
        //         this.general_li_nav = 'nav-item show';
        //     }
        // } else if(newVal === 'form'){
        //     if (oldVal === 'form'){
        //         this.form_li_nav = 'nav-item';
        //     } else {
        //         this.form_li_nav = 'nav-item show';
        //     }
        // } else if(newVal === 'export'){
        //     if (oldVal === 'export'){
        //         this.export_li_nav = 'nav-item';
        //     } else {
        //         this.export_li_nav = 'nav-item show';
        //     }
        // }
    // }
    // }
}
"},null]}