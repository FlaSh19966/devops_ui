{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Newtestbot.vue?vue&type=style&index=0&id=39aac0aa&scoped=true&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Newtestbot.vue","mtime":1660042032575},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Newtestbot.vue"],"names":[],"mappingsokfile":"Newtestbot.vue","sourceRoot":"src/portal/Chatbot/Dashboard","sourcesContent":["<template>\n  <div>\n    <div id=\"popover_content\" class=\"d-none\">\n      <input\n        class=\"form-control\"\n        style=\"height: 30px;padding-left:10px;padding-right:10px\"\n        type=\"text\"\n        v-model=\"phone_number\"\n        @keydown.enter=\"call_api\"\n      />\n    </div>\n    <div\n      class=\"modal fade dash-modal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-hidden=\"true\"\n      id=\"add_schedule\"\n    >\n      <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n        <div class=\"modal-content\">\n          <!-- Modal Header -->\n          <div class=\"modal-body\">\n            <div class=\"modal-head d-flex align-items-center\">\n              <div class=\"head-icn\">\n                <img src=\"/img/msg-blue.png\" alt />\n              </div>\n              <h3>Add Schedule</h3>\n            </div>\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <img src=\"/img/close-icn.png\" alt />\n            </button>\n            <form @submit=\"fix_appointment\">\n              <div class=\"form-group\">\n                <input class=\"form-control\" v-model=\"patient_name\" placeholder=\"Patient Name\" />\n              </div>\n              <div class=\"form-group\">\n                <input\n                  class=\"form-control\"\n                  v-model=\"reason_of_visit\"\n                  placeholder=\"Reason for visit\"\n                />\n              </div>\n              <div class=\"form-group\">\n                <input\n                  class=\"form-control\"\n                  v-model=\"visitor_number\"\n                  type=\"text\"\n                  pattern=\"[789][0-9]{9}\"\n                  placeholder=\"Phone Number\"\n                />\n              </div>\n              <div class=\"form-group\">\n                <select v-model=\"selected_time\" class=\"form-control\">\n                  <option value>---Select Time Slot---</option>\n                  <option v-for=\"(time, index) in time_slots\" :key=\"index\">{{time}}</option>\n                </select>\n              </div>\n              <div class=\"btn-wrap text-right\">\n                <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\">Cancel</button>\n                <button type=\"submit\" class=\"darkblue-btn\">Save</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"dash-cont\">\n      <div class=\"container-fluid\">\n        <div class=\"card dash-card\">\n          <div class=\"card-header d-block d-sm-flex flex-wrap justify-content-between\"></div>\n          <!-- <i class=\"fa fa-times\" aria-hidden=\"true\"></i> -->\n          <div\n            :class=\"{'card-body d-block d-flex':$route.name!='Direct Response Bot','card-body':$route.name=='Direct Response Bot'}\"\n          >\n          <!-- <i @click=\"go_to_design_bots_page\" style=\"cursor:pointer\" class=\"fa fa-times\" aria-hidden=\"true\"></i> -->\n\n            <div class=\"group_chat_btn\" v-if=\"live_chat_on\">\n              <a href=\"javascript:void(0)\" @click=\"disconnect_support_chat\">Stop Chat</a>\n            </div>\n            <div\n              style=\"width:25%\"\n              v-if=\"$route.name!='Direct Response Bot'\"\n            >\n            <!-- Here administrator can check how the bot responds to the end users questions. -->\n            </div>\n            <!--Add style=\"margin:0 auto\" in below div to shift the chat bot a little right-->\n          <i @click=\"go_to_design_bots_page\" style=\"cursor:pointer;margin-right:1%\" class=\"fa fa-times\" aria-hidden=\"true\"></i>\n\n            <div class=\"chat-master\" id=\"app\">\n              <div\n                class=\"chat-wrap\"\n                style=\"margin-right:auto;margin-left:auto;z-index:0;min-width:450px;position:sticky\"\n                v-bind:class=\"{'chat-wrap2': isexchange,'chat-wrap1':!isexchange}\"\n              >\n                <div class=\"chat-head\">\n                  <div class=\"media\" v-bind:class=\"{'media1': isexchange,'media2':!isexchange}\">\n                    <img\n                      :src=\"chat_widget.logo\"\n                      :style=\"chat_widget.style\"\n                      class=\"rounded \"\n                      alt=\"...\"\n                    />\n                    <div class=\"media-body\" style=\"margin-left:10px\">\n                      <p\n                        style=\"font-size: 15px;font-weight: bold;margin-top: 6px;text-align:center\"\n                        v-if=\"chat_widget!=undefined\"\n                      >{{chat_widget.title}}</p>\n                      <!-- <svg\n                    data-toggle=\"popover\"\n                    data-placement=\"bottom\"\n                    data-content\n                    title=\"Enter your phone number and hit Enter\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    style=\"float: right;margin-top: -10%;\"\n                    width=\"24\"\n                    height=\"24\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path fill=\"none\" d=\"M0 0h24v24H0V0z\"></path>\n                    <path\n                      fill=\"#283879\"\n                      d=\"M19.23 15.26l-2.54-.29c-.61-.07-1.21.14-1.64.57l-1.84 1.84c-2.83-1.44-5.15-3.75-6.59-6.59l1.85-1.85c.43-.43.64-1.03.57-1.64l-.29-2.52c-.12-1.01-.97-1.77-1.99-1.77H5.03c-1.13 0-2.07.94-2 2.07.53 8.54 7.36 15.36 15.89 15.89 1.13.07 2.07-.87 2.07-2v-1.73c.01-1.01-.75-1.86-1.76-1.98z\"\n                    ></path>\n                      </svg>-->\n                    </div>\n                  </div>\n                </div>\n                <div style=\"position:absolute;z-index:1000;top:80%;left:93%\" class=\"bounce\">\n                  <img src=\"/img/down-arrow.png\" v-if=\"to_scroll\" />\n                </div>\n                <div\n                  class=\"chat-body\"\n                  @scroll=\"scroll_down\"\n                  v-bind:class=\"{'chat-body2': isexchange,'chat-body1':!isexchange}\"\n                >\n                  <div\n                    class=\"chat-inner\"\n                    v-for=\"(single, item) in chat\"\n                    :key=\"item\"\n                  >\n                    <div class=\"typewriter\" v-if=\"single.popup !=null\">\n                      <span\n                        class=\"chat\"\n                        style=\"color:black; font-size: 14px;font-weight:bold;border: 0px;\"\n                        v-html=\"popup_msg\"\n                      ></span>\n                    </div>\n                    <div\n                      class=\"chat-row receiver\"\n                      v-if=\"single.url!=undefined && single.receiving==false\"\n                    >\n                      <span class=\"chat\" style=\"width: max-content\">\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"24\"\n                          height=\"24\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            fill=\"#273679\"\n                            d=\"M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z\"\n                          />\n                          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                        </svg>\n                        <a\n                          href=\"#\"\n                          @click=\"download_pdf(single.url, single.file_name)\"\n                          target=\"_blank\"\n                        >\n                          <span>\n                            {{single.file_name}}\n                            &nbsp;\n                          </span>\n                          <i class=\"fa fa-download\" aria-hidden=\"true\"></i>\n                        </a>\n                      </span>\n                    </div>\n                    <div\n                      v-if=\"single.is_leaf_note=='leaf'\"\n                      style=\"float:right;margin-bottom:10px;margin-left:30px;\"\n                      class=\"chat-row prompt\"\n                    >\n                      <span\n                        class=\"chat\"\n                        style=\"background:#273679;font-size:14px;word-break: break-word\"\n                      >{{ single.bot_response }}</span>\n                    </div>\n                    <div v-if=\"single.flavor_text !=null\">\n                      <span>{{single.flavor_text}}</span>\n                    </div>\n\n                    <div class=\"chat-row prompt-title\" v-if=\"single.title!=null\">\n                      <div class=\"chat\">{{ single.title }}</div>\n                    </div>\n                    <!-- <template v-if=\"single.is_table==true\">\n                  <div class=\"chat-row prompt\">\n                    <span style=\"margin-left:2%\">\n                      {{single.table_title}}\n                      <br />\n                    </span>\n                    <div class=\"chat\" style=\"width:96%;margin-left: 2%;margin-top:2%\">\n                      <div v-if=\"isexchange\">\n                        <div\n                          class=\"row\"\n                          v-for=\"(currency, index) in single.table_list\"\n                          :key=\"index\"\n                          style=\"margin-bottom:10px;margin-left:0;width:100%;box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2);background-color: #fbfbfb;border-radius:4px;height:30px;align-items:center;color: 3d3d3d;\"\n                        >\n                          <div class=\"column\" style=\"align:center;width: 5%;padding-left:1.5%\">\n                            <img\n                              style=\"align:center;opacity:4.5;height:20px;color:#2b3184;vertical-align:top;\"\n                              :src=\"'../../../img/ForeignExchange/'+currency.currency_title+'.png'\"\n                            />\n                          </div>\n                          <div\n                            class=\"column\"\n                            v-show=\"currency.type=='TR'\"\n                            style=\"padding-left:5%;width: 65%;color:black\"\n                          >{{currency.currency_title}}</div>\n                          <div\n                            class=\"column\"\n                            v-show=\"currency.type=='TR'\"\n                            style=\"width:20%;text-align:right;color:black\"\n                          >{{currency.currency_value}}</div>\n                        </div>\n                      </div>\n\n                      <table v-if=\"!isexchange\">\n                        <tr\n                          v-for=\"(currency, index) in single.table_list\"\n                          :key=\"index\"\n                          style=\"line-height: 9.5px;\"\n                        >\n                          <th\n                            v-show=\"currency.type=='THEAD'\"\n                            style=\"text-align: left;width: auto;\"\n                          >{{currency.country_name}}</th>\n                          <th\n                            v-show=\"currency.type=='THEAD'\"\n                            style=\"text-align: left\"\n                          >{{currency.currency_name}}</th>\n                          <td\n                            v-show=\"currency.type=='TR'\"\n                            style=\"font-weight: bolder;\"\n                          >{{currency.currency_title}}</td>\n                          <td\n                            v-show=\"currency.type=='TR'\"\n                            style=\"font-weight: bolder;\"\n                          >{{currency.currency_value}}</td>\n                        </tr>\n                      </table>\n                    </div>\n                  </div>\n                    </template>-->\n                    <template v-if=\"single.is_leaf_note==false\">\n                      <div\n                        class=\"chat-row prompt\"\n                        @click=\"click_prompt(prompt)\"\n                        v-for=\"(prompt, index) in single.bot_response\"\n                        :key=\"index\"\n                      >\n                        <div\n                          @click=\"show_popup\"\n                          style=\"cursor:pointer;\"\n                          :value=\"single.level\"\n                          class=\"chat\"\n                        >{{ prompt }}</div>\n                      </div>\n                    </template>\n                    <template v-if=\"single.is_leaf_note==true\">\n                      <div class=\"chat-inner\">\n                        <div\n                          class=\"chat-row prompt\"\n                          style=\"margin-right: 10px;margin-left: -5px;\"\n                          v-for=\"(sub_response, index) in single.bot_response\"\n                          :key=\"index\"\n                        >\n                          <div style=\"width:69%;\" v-for=\"(value,key) in sub_response\" :key=\"key\">\n                            <div\n                              @click=\"sub_leaf_node_call\"\n                              style=\"cursor:pointer;\"\n                              class=\"chat\"\n                              v-if=\"key==='Text'\"\n                            >{{value}}</div>\n                          </div>\n                        </div>\n                        <div\n                          class=\"plyr__video-embed\"\n                          id=\"player\"\n                          v-if=\"show && demourlbind\"\n                          style=\"ma\"\n                        >\n                          <iframe\n                            :src=\"demourl[0]\"\n                            allowfullscreen\n                            allowtransparency\n                            allow=\"autoplay\"\n                          ></iframe>\n                        </div>\n                        <div\n                          class=\"plyr__video-embed\"\n                          id=\"player\"\n                          v-if=\"show && demourlbind\"\n                          style=\"ma;margin-top:10px \"\n                        >\n                          <iframe\n                            :src=\"demourl[1]\"\n                            allowfullscreen\n                            allowtransparency\n                            allow=\"autoplay\"\n                          ></iframe>\n                        </div>\n                        <div\n                          class=\"plyr__video-embed\"\n                          id=\"player\"\n                          v-if=\"show && reviewsurlbind\"\n                          style=\"ma;margin-top:10px \"\n                        >\n                          <iframe\n                            :src=\"reviewsurl\"\n                            allowfullscreen\n                            allowtransparency\n                            allow=\"autoplay\"\n                          ></iframe>\n                        </div>\n                      </div>\n                      <!-- </div> -->\n                    </template>\n                    <div\n                      class=\"buy-products\"\n                      style=\"display:flex;overflow:auto hidden\"\n                      @mousewheel=\"scroll_div\"\n                      v-if=\"single.isproduct\"\n                    >\n                      <div\n                        class=\"image-container\"\n                        v-for=\"(product, index) in single.elements.products\"\n                        :key=\"index\"\n                      >\n                        <img :src=\"product['Product Image Url']\" class=\"image-box\" />\n                        <p>{{product['Product Name']}}</p>\n                        <p>{{product['UnitPrice']}}</p>\n                        <p\n                          class=\"buy-now\"\n                          @click=\"generate_payment(product['UnitPrice'],product['Product Name'])\"\n                        >Buy Now</p>\n                      </div>\n                    </div>\n                    <template v-if=\"single.conversation_only\">\n                      <div v-if=\"single.sending\" class=\"chat-row sender\">\n                        <div class=\"chat\">{{ single.sent }}</div>\n                        <div class=\"chat-his\" v-if=\"single.time!=null\">\n                          <span class=\"time\" style=\"color:#000\">{{ single.time }}</span>\n                          <span class=\"del-note delivered\">Delivered</span>\n                        </div>\n                      </div>\n                      <div v-if=\"single.receiving\" class=\"chat-row receiver\">\n                        <div\n                          v-if=\"single.received!=''&&single.received!=undefined\"\n                          class=\"chat\"\n                          v-html=\"single.received\"\n                          :id=\"'chat'+item\"\n                          @click=\"getdata\"\n                        >{{single.received}}</div>\n                        <br v-if=\"single.image!=null\" />\n                        <img\n                          v-if=\"single.image!=null\"\n                          :src=\"single.image\"\n                          style=\"margin-top: 4%;height: 40vh;width: 40vh\"\n                        />\n                        <div v-if=\"single.show_buttons && single.support_buttons\">\n                          <button class=\"btn custom-buttons\" @click=\"call_support('Yes')\">Yes</button>\n                          <button class=\"btn custom-buttons\" @click=\"call_support('No')\">No</button>\n                        </div>\n                        <div v-if=\"single.custom_buttons\" class=\"d-block d-flex flex-wrap\">\n                          <button\n                            class=\"btn custom-buttons\"\n                            @click=\"send_message('is_button', button, item)\"\n                            v-for=\"(button, index) in single.buttons_list\"\n                            :key=\"index\"\n                            :id=\"'chat'+item\"\n                          >{{button.title}}</button>\n                        </div>\n                        <!-- Apply logic here -->\n                        <div v-if=\"single.is_multiselect\">\n                          <multiselect\n                            :close-on-select=\"false\"\n                            :taggable=\"true\"\n                            :multiple=\"true\"\n                            :options=\"single.multiselect_values\"\n                            :placeholder=\"single.placeholder\"\n                            track-by=\"value\"\n                            :group-select=\"true\"\n                            label=\"title\"\n                            v-model=\"selected_indication\"\n                            @input=\"adddropdownvalue\"\n                          ></multiselect>\n                        </div>\n                        <!-- <div v-if=\"single.is_table\">\n                      <div class=\"row\" style=\"margin-bottom:10px;margin-left:0;width:100%;box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2);background-color: #fbfbfb;border-radius:4px;height:30px;align-items:center;color: 3d3d3d;\">\n                        <div class=\"column\" style=\"align:center;opacity:4.5;height:20px;color:#2b3184;vertical-align:top;\" v-for=\"(head, index1) in single.col_list\" :key=\"index1\">\n                          {{head}}\n                        </div>\n                      </div>\n                      <div class=\"row\" style=\"margin-bottom:10px;margin-left:0;width:100%;box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2);background-color: #fbfbfb;border-radius:4px;height:30px;align-items:center;color: 3d3d3d;\" v-for=\"(value, index2) in single.table_value\" :key=\"index2\">\n                        <div class=\"column\" style=\"align:center;opacity:4.5;height:20px;color:#2b3184;vertical-align:top;\" v-for=\"(head, index3) in single.col_list\" :key=\"index3\">\n                          {{value[head]}}\n                        </div>\n                      </div>\n                        </div>-->\n                        <table\n                          v-if=\"single.is_table\"\n                          style=\"margin-left: 2%;margin-top:2%;font-size: 14px;font-weight: 300;background-color:#fff\"\n                          class=\"table\"\n                        >\n                          <tr>\n                            <th v-for=\"(head, index1) in single.col_list\" :key=\"index1\">{{head}}</th>\n                          </tr>\n                          <tr v-for=\"(value, index2) in single.table_value\" :key=\"index2\">\n                            <td\n                              v-for=\"(head, index3) in single.col_list\"\n                              :key=\"index3\"\n                            >{{value[head]}}</td>\n                          </tr>\n                        </table>\n                        <!-- <div v-if=\"single.is_table\">\n                      <div  class=\"row\">\n                          <div  class=\"column\"\n                                v-for=\"(value,index2)in single.row_list\"\n                                :key=\"index2\">\n                                {{value}}\n                          </div>\n                      </div>\n                      <div  class=\"row\"\n                            v-for=\"(key, index) in single.row_list\"\n                            :key=\"index\">\n                            <div  class=\"column\"\n                                  v-for=\"(value,index2)in key\"\n                                  :key=\"index2\">\n                                  {{value}}\n                            </div>\n\n                      </div>\n                        </div>-->\n                        <div\n                          class=\"plyr__video-embed\"\n                          id=\"player\"\n                          v-for=\"(video, index) in single.videos\"\n                          :key=\"index\"\n                          style=\"ma\"\n                        >\n                          <iframe :src=\"video\" allowfullscreen allowtransparency allow=\"autoplay\"></iframe>\n                        </div>\n                        <div class=\"chat-his\" v-if=\"single.time!=null\">\n                          <span class=\"time\">{{ single.time }}</span>\n                          <!-- <span class=\"del-note delivered\" v-show=\"single.time!=undefined\">Delivered</span> -->\n                        </div>\n                      </div>\n                    </template>\n                  </div>\n                </div>\n\n                <div\n                  v-if=\"isexchange\"\n                  class=\"row\"\n                  style=\"margin-left:auto;margin-right:auto;width:100%\"\n                >\n                  <!-- <button @click=\"ForeignExchangeConversion\" id=\"XYZ\" class=\"FE_button\">\n                <img\n                  src=\"../../../img/ForeignExchange/ui-12.png\"\n                  style=\"height:14px\"\n                  alt=\"Warning!\"\n                />\n                Exchange Rate\n                  </button>-->\n                  <!-- <button @click=\"FXPaymentMode\" class=\"FE_button\">\n                <img\n                  src=\"../../../img/ForeignExchange/ui-11.png\"\n                  style=\"height:14px\"\n                  alt=\"Warning!\"\n                />\n                Payment\n                  </button>-->\n                  <!-- <button @click=\"FXTrackingParcel\" class=\"FE_button\">\n                        <img\n                          src=\"../../../img/ForeignExchange/ui-13.png\"\n                          style=\"height:14px\"\n                          alt=\"Warning!\"\n                        />\n                        Track My Parcel\n                  </button>-->\n                </div>\n\n                <div class=\"chat-footer\">\n                  <div class=\"typing-indicator\" style=\"display:none\">\n                    <p\n                      style=\"font-size:13px;font-weight:300\"\n                      v-show=\"is_typing && live_chat_on\"\n                    >Support Agent is typing</p>\n                    <p\n                      style=\"font-size:13px;font-weight:300;margin-left: 5%;\"\n                      v-show=\"!is_typing\"\n                    >typing</p>\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                  </div>\n                  <span class=\"powered-by\">\n                    Powered by &nbsp;\n                    <img src=\"/img/cense_image.png\" style=\"height:20px\" />\n                  </span>\n                </div>\n                <div class=\"chat-txt\">\n                  <div class=\"input-group mb-0\">\n                    <input\n                      :id=\"isexchange?'response_bot_text':''\"\n                      type=\"text\"\n                      class=\"form-control\"\n                      v-model=\"to_send\"\n                      @keyup.enter=\"send_message\"\n                      @input=\"button_fill\"\n                      :disabled=\"refreshed_or_closed\"\n                      placeholder=\"Type your message here ...\"\n                    />\n                    <!-- <div class=\"input-group-append\">\n                          <button\n                            class=\"btn voice-button\"\n                            type=\"button\"\n                            :disabled=\"!live_chat_on\"\n                            @click=\"start_video_call\"\n                          >\n                            <i class=\"fas fa-video\" style=\"margin-right:5px\"></i>\n                          </button>\n                    </div>-->\n                    <!-- <div class=\"input-group-append\">\n                      <button\n                        class=\"btn voice-button\"\n                        type=\"button\"\n                        @click=\"voice_communication\"\n                        :disabled=\"refreshed_or_closed\"\n                      >\n                        <i class=\"fa fa-microphone\" id=\"microphone\"></i>\n                      </button>\n                    </div> -->\n                    <div class=\"input-group-append\">\n                      <button\n                        class=\"btn\"\n                        type=\"button\"\n                        :id=\"{'button_addon2':isexchange}\"\n                        @click=\"send_message\"\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          id=\"send_button\"\n                          style=\"fill:#8a8a8a63\"\n                          width=\"40\"\n                          height=\"25\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" />\n                          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                        </svg>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport fingerprint from \"@/portal/components/fingerprint\";\nimport { bus } from \"@/portal/main\";\nimport api_calls from \"@/portal/api_calls\";\nimport { Socket } from \"phoenix-socket\";\nimport { setTimeout, setInterval } from \"timers\";\nimport Recorder from \"@/portal/components/recorder\";\nimport Scrollbar from \"smooth-scrollbar\";\nimport Multiselect from \"vue-multiselect\";\nimport debounce from \"vue-debounce/src/debounce\";\nimport country_code from \"../Dashboard/country_code_data.json\";\nimport CountryCodes from \"../Dashboard/CountryCodes.json\";\n\nexport default {\n  name: \"closed-form-response-bot\",\n  components: {\n    Multiselect\n  },\n  data() {\n    return {\n      companyid: this.$session.get(\"UserInformation\").company_id,\n      companyname: this.$session.get(\"UserInformation\").company_name,\n      popup_msg:\n        \"You can type ‘Restart”  at </br>any  time to get back</br> to the Main Menu\",\n      refreshed_or_closed: true,\n      qus_ans: \"answers\",\n      to_send: \"\",\n      cense_enquiry: false,\n      is_typing: false,\n      user_name: \"\",\n      show: false,\n      chat: [],\n      fingerprint: null,\n      bot_response_token_value: this.$session.get(\"ResponseBotToken\")\n        ? this.$session.get(\"ResponseBotToken\")\n        : \"\",\n      first_click: false,\n      level: 0,\n      recognition: null,\n      json_data: {\n        create_appointment:\n          '{\"User\": {\"Physician\": {\"ID\": \"DT000000000000000237\"},\"UserName\":\"ac\",\"ID\":\"US000000000000000138\",\"Account\": {\"ID\": \"CO00023\"},\"Token\": \"Z1rSGGm0XpMWjt3giAErPPWZ84TQN9FsFMBLsU+/LAu6yualMg6EP2bsrwZjLPwm3j4DpPcGc5LcIp3NjgfUsA==\",\"Specialty\": {\"ID\": \"PG000000000000000141\", \"Name\": \"AC\", \"Code\": \"AC\"},\"Domain\": \"gogreenbills.com\"},\"Appointment\": {\"Date\": \"08/30/2018\", \"IsJSONNote\": 0, \"Patient\": {\"CaseID\": \"\"}}}',\n        visits_finalized:\n          '{\"User\": {\"Physician\": {\"ID\": \"DT000000000000011886\"},\"UserName\": \"ch\",\"ID\": \"US000000000000000143\",\"Account\":{\"ID\":\"CO00023\"},\"Token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYXZkaHV0IiwiZXhwIjoxNTI5NDgyNjYzfQ.v1c0HbuWuZXXpJfDrXVc1HPVuffbnGcLqkpg0zm6AoQ\",\"Specialty\": {\"ID\": \"PG000000000000000142\",\"Code\": \"ch\"},\"Domain\": \"greenyourbills.com\"},\"SearchParameters\": {\"Status\": \"\",\"OrderBy\": \"\",\"FromDate\": \"01/01/2018\",\"Count\": \"10\",\"SearchText\": \"\",\"TypeOfVisit\": \"ALL\",\"SortOrder\": \"appointment\",\"StartIndex\": \"1\",\"EndIndex\": \"10\",\"ToDate\": \"08/06/2018\"}}',\n        appointments_count:\n          '{\"User\": {\"Physician\": {\"ID\": \"DT000000000000011886\"},\"UserName\": \"ch\",\"ID\": \"US000000000000000143\",\"Account\":{\"ID\":\"CO00023\"},\"Token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYXZkaHV0IiwiZXhwIjoxNTI5NDgyNjYzfQ.v1c0HbuWuZXXpJfDrXVc1HPVuffbnGcLqkpg0zm6AoQ\",\"Specialty\": {\"ID\": \"PG000000000000000142\",\"Code\": \"ch\"},\"Domain\": \"greenyourbills.com\"},\"SearchParameters\": {\"Status\": \"\",\"OrderBy\": \"\",\"FromDate\": \"01/01/2018\",\"Count\": \"10\",\"SearchText\": \"\",\"TypeOfVisit\": \"ALL\",\"SortOrder\": \"appointment\",\"StartIndex\": \"1\",\"EndIndex\": \"10\",\"ToDate\": \"08/06/2018\"}}',\n        create_ticket:\n          '{\"AccountName\":null,\"CallbackPhone\":\"\",\"CompanyID\":\"CO00023\",\"Description\":\"De\",\"DomainName\":null,\"EmailCC\":\"abhay.w@codearray.tech\",\"EmailDefault\":\"manish.y@codearray.tech\",\"Priority\":\"3\",\"PriorityID\":0,\"RaisedBy\":\"lawuser\",\"Status\":0,\"StatusCode\":null,\"StatusText\":null,\"SType\":\"WP\",\"Subject\":\"De\",\"SubType\":\"SAMD-P\",\"TicketID\":0,\"TicketNumber\":null,\"Type\":0,\"TypeText\":\"Website Problem\",\"listFiles1\":[\"chq1.pdf\"]}',\n        get_report: '{\"companyId\": \"CO00023\"}'\n      },\n      phone_number: \"\",\n      stop: true,\n      demourlbind: false,\n      reviewsurlbind: false,\n      reviewsurl: \"https://www.youtube.com/embed/paAeW86eQZ4\",\n      demourl: [\n        \"https://www.youtube.com/embed/videoseries?KcrJm9UxW3s&index=13&list=PL_jXlih8dgkTE8CrPpiWcA9KxQeKHZAnt&t=0s\",\n        \"https://www.youtube.com/embed/videoseries?qzS2qINI6IM&list=PL_jXlih8dgkRu5ddGXAGqZ4uLLkoJzCj8&index=2\"\n      ],\n      chat_widget: {\n        logo: \"\",\n        title: \"\",\n        style: \"\"\n      },\n      selected_date: \"\",\n      selected_time: \"\",\n      reason_of_visit: \"\",\n      patient_name: \"\",\n      visitor_number: \"\",\n      full_time_slots: [],\n      time_slots: [],\n      TODAY_DATE: \"\",\n      channel: null,\n      chat_socket: null,\n      voice_socket: null,\n      live_chat_on: false,\n      live_chat_token: null,\n      chat_group_name: null,\n      to_scroll: false,\n      form_payload: null,\n      refresh_time: 0,\n      phone_number_validity: /[0-9]{10,11}$/,\n      empty_string_validity: /^$/,\n      //harsh\n      isexchange: false,\n      currencyexchange_list: null,\n      selected_indication: [],\n      res: {},\n      isclosedboton: false,\n      isformon: false,\n      form_name: null,\n      lastclosedbotinputnode: null,\n      closed_form_reply_data: null,\n      selectednodeid:null,\n      bot_name: null,\n      bot_type: null,\n      iffirsttime: true,\n      isemail: false,\n      is_phone_number: false,\n      is_text_area :false,\n      conversation_id : \"\",\n      is_phone_number_otp : false,\n      name_element_for_event_listener: null,\n      is_phone_number_err_msg: false,\n    };\n  },\n  created() {\n    this.conversation_id = this.generateUUID();\n    this.$session.start();\n    this.$session.set(\"conversation_id\", this.conversation_id);\n    // console.log(country_code);\n    // console.log(JSON.parse(country_code));\n    if (this.$session.has(\"BotResponse_Conversation\")) {\n      // this.chat = this.$session.get(\"BotResponse_Conversation\");\n    }\n    if (!this.$session.has(\"ChatBotImageParameters\")) {\n      axios\n        .post(api_calls.widget_setting_url(), {\n          company_name: this.companyname,\n          company_id: this.companyid,\n          email: this.$session.get(\"UserInformation\").email,\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          token: this.$session.get(\"UserInformation\").tokens,\n          isShow: true\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${this.$session.get(\"at\")}`,\n          },\n        })\n        .then(response => {\n          this.chat_widget.title = response.data.WidgetTitle;\n          this.chat_widget.logo = response.data.ImageUrl;\n          this.$session.set(\"ChatBotImageParameters\", this.chat_widget);\n          this.chat_widget.style = \"margin-top: 5px;height:30px;width:auto\";\n        })\n        .catch(e => {\n          if (this.$session.get(\"UserInformation\").company_name == \"gogyb\") {\n            this.chat_widget.style = \"margin-top: 5px;height:30px;width:60px\";\n            this.chat_widget.logo = \"/img/cense_image.png\";\n          } else if (\n            this.$session.get(\"UserInformation\").company_name == \"MT Care\"\n          ) {\n            this.chat_widget.logo = \"/img/robomate_logo.png\";\n            this.chat_widget.style = \"margin-top: 5px;height:50px;width:95px\";\n          } else {\n            this.chat_widget.logo = \"/img/cense_image.png\";\n            this.chat_widget.style = \"margin-top: 5px;height:30px;width:60px\";\n          }\n          this.$session.set(\"ChatBotImageParameters\", this.chat_widget);\n        });\n    } else {\n      this.chat_widget = this.$session.get(\"ChatBotImageParameters\");\n      this.chat_widget.style = \"margin-top: 5px;height:30px;width:auto\";\n    }\n    if (!this.$session.has(\"ResponseBotToken\")) {\n      axios\n        .post(api_calls.bot_response_token(), {\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          username: this.$session.get(\"UserInformation\").email\n        })\n        .then(response => {\n          this.$session.set(\"ResponseBotToken\", response.data.data);\n          this.bot_response_token_value = response.data.data;\n          this.refresh_chatbot();\n        });\n    } else {\n      this.refresh_chatbot();\n    }\n    //harsh\n    if (\n      this.$session.get(\"UserInformation\").license_key ==\n      \".eJxTcssvSs1Mz6tIzkjMS081NDexNIQKKUDFMkpKCoqt9PXLy8v10lBU6yXn5-olluobGRha6hqY6xqYKBgaWBkZW5ma6hmbm5gYmSoBAGa9Hp0.XR3Tuw.X77F_7LDtOLp2Vt9snFDSo31nTw\"\n    ) {\n      this.isexchange = true;\n    }\n    var d = new Date();\n    axios\n      .post(api_calls.bot_user_data(), {\n        license_key: this.$session.get(\"UserInformation\").license_key,\n        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        datetime: d.toISOString(),\n        username: this.$session.get(\"UserInformation\").email,\n        source: \"Web\",\n        token: this.bot_response_token_value,\n        role: this.$session.get(\"UserInformation\").role\n      })\n      .then(response => {});\n      if(this.$route.params.botdata==undefined){\n        this.$router.push({\n          name: 'Dashboard',\n        });\n      } else {\n        this.bot_name=this.$route.params.botdata.bot_name;\n        this.bot_type=this.$route.params.botdata.bot_type;\n        // axios\n        //   .post(api_calls.closed_form_response_api(),{\n        //     license_key: this.$session.get(\"UserInformation\").license_key,\n        //     uid: \"closed_form_user\",\n        //     chat: null,\n        //     node_selected: null,\n        //     bot_name: this.bot_name,\n        //   })\n        //   .then(response=>{\n        //     if(response.data.error==undefined){\n        //       this.closed_bot_chat(response.data);\n        //       this.isclosedboton=true;\n        //     }\n        //   });\n      }\n  },\n  mounted() {\n    CountryCodes.sort(function(a, b) {\n      if(a.code < b.code) { return -1; }\n      if(a.code > b.code) { return 1; }\n      return 0;\n    });\n\n    this.show = false;\n    if (this.$route.name == \"Train the Bot\") {\n      $(\".chat-wrap\").css(\"right\", \"auto\");\n    }\n    if (this.$route.name == \"Direct Response Bot\") {\n      $(\".chat-wrap\").css(\"marginTop\", \"5%\");\n    }\n    $('[data-toggle=\"popover\"]')\n      .popover({\n        html: true,\n        content: $(\"#popover_content\")\n      })\n      .on(\"show.bs.popover\", function() {\n        $(\"#popover_content\").addClass(\"d-block\");\n      })\n      .on(\"hide.bs.popover\", function() {\n        $(\"#popover_content\").addClass(\"d-none\");\n      });\n    $(\"#popover_content\").css(\"zIndex\", 9999);\n    bus.$on(\"Logout has been clicked\", data => {\n      if (data == \"True\") {\n        $('[data-toggle=\"popover\"]').popover(\"hide\");\n      }\n    });\n    window.SpeechRecognition =\n      window.webkitSpeechRecognition || window.SpeechRecognition;\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    navigator.getUserMedia =\n      navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozGetUserMedia ||\n      navigator.msGetUserMedia;\n\n\n  },\n  updated() {\n    this.submit_custom_form();\n    if(this.isclosedboton&&this.isformon){\n      this.submit_closed_form_data();\n    }\n  },\n  methods: {\n    generateUUID() { // Public Domain/MIT\n            var d = new Date().getTime();//Timestamp\n            var d2 = (performance && performance.now && (performance.now()*1000)) || 0;//Time in microseconds since page-load or 0 if unsupported\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n                var r = Math.random() * 16;//random number between 0 and 16\n                if(d > 0){//Use timestamp until depleted\n                    r = (d + r)%16 | 0;\n                    d = Math.floor(d/16);\n                } else {//Use microseconds since page-load if supported\n                    r = (d2 + r)%16 | 0;\n                    d2 = Math.floor(d2/16);\n                }\n                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n            });\n    },\n    voice_communication() {\n      if (/Chromium/i.test(navigator.userAgent)) {\n        this.call_cloud_api();\n      } else if (window.SpeechRecognition != undefined) {\n        this.recognition = new window.SpeechRecognition();\n        document.querySelector(\"#microphone\").classList.add(\"voice-on\");\n        this.recognition.onresult = e => {\n          const speechToText = e.results[0][0].transcript;\n        };\n        this.recognition.onend = function() {\n          document.querySelector(\"#microphone\").classList.remove(\"voice-on\");\n          //Again – give the user feedback that you are not listening anymore. If you wish to achieve continuous recognition – you can write a script to start the recognizer again here.\n        };\n        var vm = this;\n        this.recognition.onresult = function(event) {\n          if (typeof event.results === \"undefined\") {\n            //Something is wrong…\n            this.recognition.stop();\n            return;\n          }\n          for (var i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal) {\n              //Final results\n              vm.to_send = event.results[i][0].transcript;\n              console.log(\"final results: \" + event.results[i][0].transcript); //Of course – here is the place to do useful things with the results.\n            } else {\n              //i.e. interim...\n              console.log(\"interim results: \" + event.results[i][0].transcript); //You can use these results to give the user near real time experience.\n            }\n          } //end for loop\n        };\n        this.recognition.start();\n      } else {\n        this.call_cloud_api();\n      }\n    },\n    call_cloud_api() {\n      document.querySelector(\"#microphone\").classList.add(\"voice-on\");\n      const audioContext = new (window.AudioContext ||\n        window.webkitAudioContext)();\n      var buffer_list, buffer_i32;\n      var recorder = new Recorder(audioContext, {\n        // An array of 255 Numbers\n        // You can use this to visualize the audio stream\n        // If you use react, check out react-wave-stream\n        onAnalysed: data => {}\n      });\n\n      var voice_channel,\n        wav_parameters,\n        recBuffers = [],\n        recLength,\n        meta_data;\n      var vm = this;\n      axios.get(api_calls.voice_channel_api()).then(response => {\n        this.voice_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {\n          params: {\n            company: this.$session.get(\"UserInformation\").company_name,\n            voice_channel_name: response.data.voice_channel_name,\n            token: response.data.token,\n            is_voice: true\n          }\n        });\n        this.voice_socket.connect();\n\n        voice_channel = this.voice_socket.channel(\n          \"voice_to_text:\" + response.data.voice_channel_name\n        );\n        voice_channel.join();\n      });\n\n      let blob = null;\n\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(stream => {\n          recorder.init(stream);\n          startRecording();\n        })\n        .catch(err => console.log(\"Uh oh... unable to get stream...\", err));\n\n      function startRecording() {\n        recorder.start();\n        setTimeout(() => {\n          stopRecording();\n        }, 4000);\n      }\n\n      function stopRecording() {\n        recorder.stop().then(({ blob, buffer }) => {\n          // buffer_list = buffer[0];\n          var reader = new FileReader();\n          reader.readAsArrayBuffer(blob);\n          reader.onloadend = () => {\n            buffer_list = reader.result;\n            var temp = new Uint8Array(buffer_list);\n            wav_parameters = wav_file_processing_read_parameters(temp);\n            init_encoder(buffer_list);\n          };\n          // Recorder.download(blob, \"my-file\");\n          // buffer is an AudioBuffer\n        });\n      }\n\n      function init_encoder(data) {\n        var arrayBuffer = new Uint8Array(data);\n\n        var encData = [];\n        var result = encodeFlac(arrayBuffer, encData);\n        // console.log(\"encoded data array: \", encData);\n\n        if (result.error) {\n          console.error(\"Conversion failed!!\");\n        }\n\n        var metaData = result.metaData;\n\n        if (!result.error) {\n          //using data-util.js utility function(s)\n          var blob_download = exportFlacFile(encData, metaData);\n          // var down_file = URL.createObjectURL(blob_download);\n          // let file = document.createElement(\"a\");\n          // file.href = down_file;\n          // file.download = \"output.flac\";\n          // file.click()\n          var reader = new FileReader();\n          reader.readAsDataURL(blob_download);\n          reader.onloadend = function() {\n            var reader_string = reader.result.split(\"base64,\")[1];\n            voice_channel.push(\"voice_packets_sent\", { stream: reader_string });\n            voice_channel.on(\"voice_to_text_reply\", data => {\n              document\n                .querySelector(\"#microphone\")\n                .classList.remove(\"voice-on\");\n              if (data.text.results != undefined) {\n                vm.to_send = data.text.results[0].alternatives[0].transcript;\n              } else {\n                toastr.error(\n                  \"We could not recognize your voice. Please try again or type in.\"\n                );\n              }\n              vm.button_fill();\n            });\n          };\n        }\n      }\n\n      function encodeFlac(binData, recBuffers) {\n        var ui8_data = new Uint8Array(binData);\n        var sample_rate = 0,\n          channels = 0,\n          bps = 0,\n          total_samples = 0,\n          block_align,\n          position = 0,\n          recLength = 0,\n          meta_data;\n\n        /**\n         *  records/saves the output data of libflac-encode method\n         */\n        function write_callback_fn(buffer, bytes, samples, current_frame) {\n          recBuffers.push(buffer);\n          recLength += bytes;\n          // recLength += buffer.byteLength;\n        }\n\n        function metadata_callback_fn(data) {\n          meta_data = data;\n        }\n\n        // check: is file a compatible wav-file?\n        if (wav_file_processing_check_wav_format(ui8_data) == false) {\n          return { error: \"Wrong WAV file format\", status: 0 };\n        }\n\n        // get WAV/PCM parameters from data / file\n        var wav_parameters = wav_file_processing_read_parameters(ui8_data);\n        var tot_samples = 0;\n        var compression_level = 5;\n        var flac_ok = 1;\n        var is_verify = true;\n\n        var flac_encoder = Flac.create_libflac_encoder(\n          wav_parameters.sample_rate,\n          wav_parameters.channels,\n          wav_parameters.bps,\n          compression_level,\n          tot_samples,\n          is_verify\n        );\n        if (flac_encoder != 0) {\n          var init_status = Flac.init_encoder_stream(\n            flac_encoder,\n            write_callback_fn,\n            metadata_callback_fn,\n            0\n          );\n          flac_ok &= init_status == 0;\n        } else {\n          var msg = \"Error initializing the decoder.\";\n          console.error(msg);\n          return { error: msg, status: 1 };\n        }\n\n        // convert the PCM-Data to the appropriate format for the libflac library methods (32-bit array of samples)\n        // creates a new array (32-bit) and stores the 16-bit data of the wav-file as 32-bit data\n        var buffer_i32 = wav_file_processing_convert_16bitdata_to32bitdata(\n          ui8_data.buffer\n        );\n\n        var flac_return = Flac.FLAC__stream_encoder_process_interleaved(\n          flac_encoder,\n          buffer_i32,\n          buffer_i32.length / wav_parameters.channels\n        );\n\n        if (flac_return != true) {\n          console.log(\n            \"Error: FLAC__stream_encoder_process_interleaved returned false. \" +\n              flac_return\n          );\n        }\n\n        flac_ok &= Flac.FLAC__stream_encoder_finish(flac_encoder);\n\n        Flac.FLAC__stream_encoder_delete(flac_encoder);\n\n        return { metaData: meta_data, status: flac_ok };\n      }\n\n      function wav_file_processing_check_wav_format(ui8_data) {\n        // check: is file a compatible wav-file?\n        if (\n          ui8_data.length < 44 ||\n          String.fromCharCode.apply(null, ui8_data.subarray(0, 4)) != \"RIFF\" ||\n          String.fromCharCode.apply(null, ui8_data.subarray(8, 16)) !=\n            \"WAVEfmt \" ||\n          String.fromCharCode.apply(null, ui8_data.subarray(36, 40)) != \"data\"\n        ) {\n          console.log(\"ERROR: wrong format for wav-file.\");\n          return false;\n        }\n        return true;\n      }\n\n      /**\n       *  checks if the given ui8_data (ui8array) is of a flac-file\n       */\n      function flac_file_processing_check_flac_format(ui8_data) {\n        // check: is file a compatible flac-file?\n        if (\n          ui8_data.length < 42 ||\n          String.fromCharCode.apply(null, ui8_data.subarray(0, 4)) != \"fLaC\"\n        ) {\n          console.log(\"ERROR: wrong format for flac-file.\");\n          return false;\n        }\n        var view = new DataView(ui8_data.buffer);\n        //check last 7 bits of 4th byte for meta-data BLOCK type: must be STREAMINFO (0)\n        if ((view.getUint8(4) & 0x7f) != 0) {\n          console.log(\"ERROR: wrong format for flac-file.\");\n          return false;\n        }\n\n        return true;\n      }\n\n      function wav_file_processing_read_parameters(ui8_data) {\n        var sample_rate = 0,\n          channels = 0,\n          bps = 0,\n          total_samples = 0,\n          block_align;\n\n        // get WAV/PCM parameters from data / file\n        sample_rate =\n          (((((ui8_data[27] << 8) | ui8_data[26]) << 8) | ui8_data[25]) << 8) |\n          ui8_data[24];\n        channels = ui8_data[22];\n        bps = ui8_data[34];\n        block_align = ui8_data[32];\n        total_samples =\n          ((((((ui8_data[43] << 8) | ui8_data[42]) << 8) | ui8_data[41]) << 8) |\n            ui8_data[40]) /\n          block_align;\n\n        return {\n          sample_rate: sample_rate,\n          channels: channels,\n          bps: bps,\n          total_samples: total_samples,\n          block_align: block_align\n        };\n      }\n\n      /**\n       *  converts the PCM data of the wav file (each sample stored as 16 bit value) into\n       *  a format expected by the libflac-encoder method (each sample stored as 32 bit value in a 32-bit array)\n       */\n      function wav_file_processing_convert_16bitdata_to32bitdata(arraybuffer) {\n        // convert the PCM-Data to the appropriate format for the libflac library methods (32-bit array of samples)\n        // creates a new array (32-bit) and stores the 16-bit data of the wav-file as 32-bit data\n        var ab_i16 = new DataView(arraybuffer, 44);\n        var buf_length = ab_i16.byteLength;\n        var buf32_length = buf_length / 2;\n        var buffer_i32 = new Uint32Array(buf32_length);\n        var view = new DataView(buffer_i32.buffer);\n        var index = 0;\n        for (var j = 0; j < buf_length; j += 2) {\n          view.setInt32(index, ab_i16.getInt16(j, true), true);\n          index += 4;\n        }\n        return buffer_i32;\n      }\n\n      function exportFlacFile(recBuffers, metaData) {\n        var recLength = getLength(recBuffers);\n        if (metaData) {\n          addFLACMetaData(recBuffers, metaData);\n        }\n        //convert buffers into one single buffer\n        var samples = mergeBuffers(recBuffers, recLength);\n        var the_blob = new Blob([samples]);\n        return the_blob;\n      }\n\n      function getLength(recBuffers) {\n        //get length\n        var recLength = 0;\n        for (var i = recBuffers.length - 1; i >= 0; --i) {\n          recLength += recBuffers[i].byteLength;\n        }\n        return recLength;\n      }\n\n      function addFLACMetaData(chunks, metadata) {\n        var offset = 4;\n        var data = chunks[0]; //1st data chunk should contain FLAC identifier \"fLaC\"\n        if (\n          data.length < 4 ||\n          String.fromCharCode.apply(null, data.subarray(0, 4)) != \"fLaC\"\n        ) {\n          console.error(\n            \"Unknown data format: cannot add additional FLAC meta data to header\"\n          );\n          return;\n        }\n\n        //first chunk only contains the flac identifier string?\n        if (data.length == 4) {\n          data = chunks[1]; //get 2nd data chunk which should contain STREAMINFO meta-data block (and probably more)\n          offset = 0;\n        }\n\n        var view = new DataView(data.buffer);\n\n        //NOTE by default, the encoder writes a 2nd meta-data block (type VORBIS_COMMENT) with encoder/version info -> do not set \"is last\" to TRUE for first one\n        //\t// write \"is last meta data block\" & type STREAMINFO type (0) as little endian combined uint1 & uint7 -> uint8:\n        //\tvar isLast = 1;//1 bit\n        //\tvar streamInfoType = 0;//7 bit\n        //\tview.setUint8(0 + offset, isLast << 7 | streamInfoType, true);//8 bit\n\n        // block-header: STREAMINFO type, block length -> already set\n\n        // block-content: min_blocksize, min_blocksize -> already set\n\n        // write min_framesize as little endian uint24:\n        view.setUint8(8 + offset, metadata.min_framesize >> 16, true); //24 bit\n        view.setUint8(9 + offset, metadata.min_framesize >> 8, true); //24 bit\n        view.setUint8(10 + offset, metadata.min_framesize, true); //24 bit\n\n        // write max_framesize as little endian uint24:\n        view.setUint8(11 + offset, metadata.max_framesize >> 16, true); //24 bit\n        view.setUint8(12 + offset, metadata.max_framesize >> 8, true); //24 bit\n        view.setUint8(13 + offset, metadata.max_framesize, true); //24 bit\n\n        // block-content: sampleRate, channels, bitsPerSample -> already set\n\n        // write total_samples as little endian uint36:\n        //TODO set last 4 bits to half of the value in index 17\n        view.setUint8(18 + offset, metadata.total_samples >> 24, true); //36 bit\n        view.setUint8(19 + offset, metadata.total_samples >> 16, true); //36 bit\n        view.setUint8(20 + offset, metadata.total_samples >> 8, true); //36 bit\n        view.setUint8(21, metadata.total_samples, true); //36 bit\n\n        writeMd5(view, 22 + offset, metadata.md5sum); //16 * 8 bit\n      }\n\n      function mergeBuffers(channelBuffer, recordingLength) {\n        var result = new Uint8Array(recordingLength);\n        var offset = 0;\n        var lng = channelBuffer.length;\n        for (var i = 0; i < lng; i++) {\n          var buffer = channelBuffer[i];\n          result.set(buffer, offset);\n          offset += buffer.length;\n        }\n        return result;\n      }\n\n      function writeMd5(view, offset, str) {\n        var index;\n        for (var i = 0; i < str.length / 2; ++i) {\n          index = i * 2;\n          view.setUint8(\n            i + offset,\n            parseInt(str.substring(index, index + 2), 16)\n          );\n        }\n      }\n    },\n    start_video_call() {},\n    refresh_chatbot(type) {\n      this.refreshed_or_closed = true;\n      // debugger;\n      axios\n        .post(api_calls.chatbot_response_cense(), {\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          token: this.bot_response_token_value,\n          username: this.$session.get(\"UserInformation\").email,\n          source: \"Web\",\n          chat: \"\",\n          data: \"\",\n          user_id: \"\",\n          role: this.$session.get(\"UserInformation\").role,\n          refreshed_or_closed: this.refreshed_or_closed\n        })\n        .then(resp => {\n          this.refreshed_or_closed = false;\n          if(this.iffirsttime){\n            this.iffirsttime=false;\n            document.querySelector(\".typing-indicator\").style.display = \"block\";\n            axios\n            .post(api_calls.closed_form_response_api(),{\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              uid: this.$session.get(\"UserInformation\").email,\n              chat: null,\n              node_selected: null,\n              bot_name: this.bot_name,\n              conversation_id : this.conversation_id,\n            })\n            .then(response=>{\n              // console.log(response.data.error);\n              if(response.data.error==undefined){\n                // console.log('gaya');\n                document.querySelector(\".typing-indicator\").style.display = \"none\";\n                this.closed_bot_chat(response.data);\n                this.isclosedboton=true;\n              } else {\n                document.querySelector(\".typing-indicator\").style.display = \"none\";\n              }\n            });\n          }\n          if (type == \"support\") {\n            this.chat.push({\n              receiving: true,\n              received: \"Is there anything else I can help you with?\",\n              conversation_only: true,\n              time: this.generate_time()\n            });\n          }\n          if (\n            this.companyid == \"CustomerHappiness95185\" ||\n            this.companyid == \"3x5ive99534\" ||\n            this.companyid == \"Foreignxchange17491\" ||\n            this.companyid == \"clinicaltrials81352\"\n          ) {\n            axios\n              .post(api_calls.chatbot_response_cense(), {\n                chat: \"/welcome_message\",\n                token: this.bot_response_token_value,\n                username: this.$session.get(\"UserInformation\").email,\n                source: \"Web\",\n                user_id: \"\",\n                license_key: this.$session.get(\"UserInformation\").license_key,\n                data: \"\",\n                role: this.$session.get(\"UserInformation\").role,\n                refreshed_or_closed: false\n              })\n              .then(response => {\n                this.push_msg(response, response.data.responses);\n              });\n          }\n          axios\n            .post(api_calls.prompt_url(), {\n              uid: \"cense\", //this.fingerprint\n              company_id: this.$session.get(\"UserInformation\").company_id,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              chat: \"\"\n            })\n            .then(response => {\n              if (response.data != \"NO CLOSED FORM BOT\") {\n                if (\n                  response.data.extras != null &&\n                  response.data.extras[0].Type == \"TABLE\"\n                ) {\n                  this.create_chat(response.data, \"istable\");\n                } else if (response.data.return == \"PROMPTS\") {\n                  this.create_chat(response.data, \"isprompt\");\n                }\n              }\n            })\n            .catch(e => {});\n        });\n    },\n    download_pdf(url, file_name) {\n      event.preventDefault();\n      var link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", file_name);\n      document.body.appendChild(link);\n      link.click();\n    },\n    scroll_div() {\n      var doc = document.querySelector(\".buy-products\");\n      if (event.deltaX > event.deltaY) {\n        doc.scrollLeft += 10;\n      } else if (event.deltaX < event.deltaY) {\n        doc.scrollLeft -= 10;\n      }\n    },\n    call_support(type) {\n      if (type == \"Yes\") {\n        axios\n          .post(api_calls.chatbot_response_cense(), {\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.bot_response_token_value,\n            username: this.$session.get(\"UserInformation\").email,\n            source: \"Web\",\n            chat: \"/call_support\",\n            token: this.bot_response_token_value,\n            role: this.$session.get(\"UserInformation\").role,\n            refreshed_or_closed: this.refreshed_or_closed\n          })\n          .then(resp => {\n            this.chat.push({\n              conversation_only: true,\n              receiving: true,\n              received: resp.data.responses[0].text,\n              time: this.generate_time()\n            });\n            this.$session.set(\"BotResponse_Conversation\", this.chat);\n            this.update_scrollbar(\"upto_end\", \"response\");\n          });\n      } else if (type == \"No\") {\n        this.chat.push(this.chat[0]);\n        this.chat.push(this.chat[1]);\n        this.update_scrollbar(\"upto_end\", \"response\");\n        // this.refresh_chatbot(\"support\");\n      }\n    },\n    parse(string) {\n      return string.replace(/{{.*?}}/g, match => {\n        var today = new Date();\n        var dd = today.getDate();\n\n        var mm = today.getMonth() + 1;\n        var yyyy = today.getFullYear();\n        if (dd < 10) {\n          dd = \"0\" + dd;\n        }\n\n        if (mm < 10) {\n          mm = \"0\" + mm;\n        }\n        today = dd + \"-\" + mm + \"-\" + yyyy;\n        var expression = match.slice(2, -2);\n        this.$data[expression] = today;\n        return this.$data[expression];\n      });\n    },\n    generate_time() {\n      let d = new Date();\n      let h, m, type;\n      if (d.getHours() > 12) {\n        h = d.getHours() % 12;\n        type = \" pm\";\n      } else if (d.getHours() < 12) {\n        h = d.getHours();\n        type = \" am\";\n      } else if (d.getHours() == 12) {\n        h = d.getHours();\n        type = \" pm\";\n      }\n      m = d.getMinutes();\n      if (m < 10) {\n        m = 0 + String(m);\n      }\n      return h + \":\" + m + type;\n    },\n    call_api() {\n      event.preventDefault();\n      if (this.phone_number_validity.test(this.phone_number)) {\n        axios\n          .post(api_calls.call_support_url(), {\n            company_id: this.companyid,\n            company_name: this.companyname,\n            phonenumber: this.phone_number,\n            token: this.bot_response_token_value,\n            username: this.$session.get(\"UserInformation\").email\n          })\n          .then(response => {\n            if (response.data.message == \"Call incoming!\") {\n              toastr.success(\"We will get in touch with you soon. Thanks\");\n            }\n          });\n      } else {\n        toastr.error(\"Please Enter a valid phone number\");\n      }\n    },\n    show_popup() {\n      this.show = false;\n      this.stop = false;\n    },\n    sub_leaf_node_call(type) {\n      var divclick = event.target.innerText;\n      if (divclick == \"Watch Demo Video\") {\n        this.demourlbind = true;\n        this.reviewsurlbind = false;\n      } else if (divclick == \"User Reviews/Testimonials\") {\n        this.reviewsurlbind = true;\n        this.demourlbind = false;\n      }\n      if (\n        divclick == \"Watch Demo Video\" ||\n        divclick == \"User Reviews/Testimonials\"\n      ) {\n        this.show = !this.show;\n        this.update_scrollbar();\n        setTimeout(() => {\n          document.querySelector(\".typing-indicator\").style.display = \"none\";\n        }, 1000);\n      } else if (divclick == \"Buy Tutorial\") {\n        this.cense_enquiry = true;\n        axios\n          .post(api_calls.chatbot_response_cense(), {\n            username: this.$session.get(\"UserInformation\").email,\n            token: this.bot_response_token_value,\n            chat: \"/personal_details\",\n            source: \"Web\",\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            role: this.$session.get(\"UserInformation\").role,\n            refreshed_or_closed: \"\"\n          })\n          .then(response => {\n            var msg = {\n              received: response.data.responses[0].text,\n              conversation_only: true,\n              receiving: true,\n              time: this.generate_time()\n            };\n            this.chat.push(msg);\n            this.update_scrollbar();\n            setTimeout(() => {\n              document.querySelector(\".typing-indicator\").style.display =\n                \"none\";\n            }, 1000);\n            this.$session.set(\"BotResponse_Conversation\", this.chat);\n          });\n      }\n    },\n    ticket_number() {\n      var random_num = Math.floor(1000000 + Math.random() * 9000000);\n      var company = this.companyname.slice(0, 1).toUpperCase();\n      return company + \"_\" + random_num;\n    },\n    send_message(type, message, to_be_displayed) {\n      //harsh\n      // debugger;\n      event.preventDefault();\n      if (this.selected_indication[0] != undefined) {\n        type = \"is_prompt\";\n        to_be_displayed = this.to_send;\n        this.to_send =\n          this.selected_indication[0].value.split(\"{\")[0] +\n          JSON.stringify(this.res);\n        this.selected_indication = [];\n      }\n      if(this.isclosedboton&&type!='is_button'){\n        this.refreshed_or_closed=true;\n        this.submit_closed_form_data();\n      } else if (type == \"is_button\") {\n        $(\"#response_bot_text\").prop(\"disabled\", false);\n        if (\n          message.value == \"isdisabled\" &&\n          this.companyid == \"clinicaltrials81352\" &&\n          message.title == \"No\"\n        ) {\n        } else if(this.isclosedboton){\n          this.submit_closed_form_data(type,message);\n        } else {\n          let index = to_be_displayed;\n          document.querySelector(\".typing-indicator\").style.display = \"block\";\n          this.chat.push({\n            sent: message.title,\n            sending: true,\n            time: this.generate_time(),\n            conversation_only: true,\n            delivered: true,\n            dropdown: \"\"\n          });\n          this.update_scrollbar(\"upto_end\", \"sender\");\n          axios\n            .post(api_calls.chatbot_response_cense(), {\n              chat: message.value,\n              token: this.bot_response_token_value,\n              username: this.$session.get(\"UserInformation\").email,\n              source: \"Web\",\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              role: this.$session.get(\"UserInformation\").role,\n              refreshed_or_closed: this.refreshed_or_closed\n            })\n            .then(response => {\n              if (this.chat[index].removable == true) {\n                this.chat.splice(index, 1);\n              }\n              this.response_handling(response);\n            });\n        }\n      } else if (type == \"is_prompt\") {\n        document.querySelector(\".typing-indicator\").style.display = \"block\";\n        this.chat.push({\n          sent: to_be_displayed,\n          sending: true,\n          time: this.generate_time(),\n          conversation_only: true,\n          delivered: true\n        });\n        this.update_scrollbar(\"upto_end\", \"sender\");\n        axios\n          .post(api_calls.chatbot_response_cense(), {\n            // host: this.user_data.host,\n            role: this.$session.get(\"UserInformation\").role,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.bot_response_token_value,\n            username: this.$session.get(\"UserInformation\").email,\n            source: \"Web\",\n            chat: this.to_send\n          })\n          .then(response => {\n            this.response_handling(response);\n            this.ex1();\n          });\n      } else if (this.to_send == \"Restart\" || this.to_send == \"restart\") {\n        axios\n          .post(api_calls.prompt_url(), {\n            uid: \"cense\", //this.fingerprint\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            chat: \"\"\n          })\n          .then(response => {\n            this.chat.push(response.data);\n            this.update_scrollbar(\"upto_end\", \"response\");\n            this.$session.set(\"BotResponse_Conversation\", this.chat);\n            this.first_click = true;\n            this.level = response.data.level;\n          })\n          .catch(e => {});\n      } else if (\n        this.cense_enquiry == true &&\n        this.to_send != \"\" &&\n        this.to_send != null &&\n        !/^\\s*$/.test(this.to_send)\n      ) {\n        document.querySelector(\".typing-indicator\").style.display = \"block\";\n        var send_msg = {\n          sent: this.to_send,\n          conversation_only: true,\n          sending: true,\n          time: this.generate_time()\n        };\n        this.chat.push(send_msg);\n        this.$session.set(\"BotResponse_Conversation\", this.chat);\n        this.update_scrollbar(\"upto_end\");\n        axios\n          .post(api_calls.chatbot_response_cense(), {\n            username: this.$session.get(\"UserInformation\").email,\n            token: this.bot_response_token_value,\n            chat: \"/personal_details\",\n            source: \"Web\",\n            user_id: \"\",\n            company_id: \"CO00023\",\n            data: \"\",\n            role: this.$session.get(\"UserInformation\").role,\n            refreshed_or_closed: \"\",\n            license_key: this.$session.get(\"UserInformation\").license_key\n          })\n          .then(response => {\n            var msg = {\n              received: response.data.responses[0].text,\n              conversation_only: true,\n              receiving: true,\n              time: this.generate_time()\n            };\n            this.chat.push(msg);\n            this.$session.set(\"BotResponse_Conversation\", this.chat);\n            this.refreshed_or_closed = false;\n            this.update_scrollbar(\"upto_end\", \"response\");\n          })\n          .catch(e => {\n            document.querySelector(\".typing-indicator\").style.display = \"none\";\n          });\n      } else if (this.live_chat_on) {\n        if (this.user_name == \"\") {\n          this.channel.push(\"new_name\", { name: this.to_send });\n          this.user_name = this.to_send;\n          this.update_scrollbar(\"upto_end\", \"response\");\n        } else {\n          this.channel.push(\"new_chat_message\", { message: this.to_send });\n          this.update_scrollbar(\"upto_end\", \"response\");\n        }\n        this.chat.push({\n          sent: this.to_send,\n          sending: true,\n          conversation_only: true,\n          time: this.generate_time()\n        });\n        this.$session.set(\"BotResponse_Conversation\", this.chat);\n        this.update_scrollbar(\"upto_end\", \"sender\");\n      } else if (\n        this.to_send != \"\" &&\n        this.to_send != null &&\n        this.cense_enquiry != true\n      ) {\n        this.chat.push({\n          conversation_only: true,\n          sending: true,\n          sent: this.to_send,\n          time: this.generate_time()\n        });\n        this.$session.set(\"BotResponse_Conversation\", this.chat);\n        this.update_scrollbar(\"upto_end\", \"sender\");\n        axios\n          .post(api_calls.chatbot_response_cense(), {\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.bot_response_token_value,\n            username: this.$session.get(\"UserInformation\").email,\n            source: \"Web\",\n            chat: this.to_send,\n            token: this.bot_response_token_value,\n            role: this.$session.get(\"UserInformation\").role,\n            refreshed_or_closed: this.refreshed_or_closed\n          })\n          .then(response => {\n            this.response_handling(response);\n          })\n          .catch(e => {\n            this.update_scrollbar(\"upto_end\", \"response\");\n          });\n      }\n      this.to_send = \"\";\n      this.button_fill();\n    },\n    initiate_support_chat() {\n      this.chat.push({\n        receiving: true,\n        received: \"Sorry I am not getting your question\",\n        conversation_only: true\n      });\n      this.chat.push({\n        receiving: true,\n        received: \"Would you like to talk with support team?\",\n        conversation_only: true,\n        show_buttons: true,\n        support_buttons: true,\n        time: this.generate_time()\n      });\n      this.update_scrollbar(\"upto_end\", \"response\");\n    },\n    disconnect_support_chat() {\n      this.channel.push(\"stopped_chat\", {\n        name: this.user_name,\n        message: \" has ended the conversation.\"\n      });\n      this.channel.leave();\n      this.chat_socket.disconnect();\n      this.live_chat_on = false;\n    },\n    chat_response_error() {\n      this.chat.push({\n        conversation_only: true,\n        receiving: true,\n        received: \"Sorry I'm not getting your question\",\n        time: this.generate_time()\n      });\n      this.$session.set(\"BotResponse_Conversation\", this.chat);\n      this.update_scrollbar(\"upto_end\", \"response\");\n    },\n    send_request_json(message) {\n      axios\n        .post(api_calls.chatbot_response_cense(), {\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          token: this.bot_response_token_value,\n          username: this.$session.get(\"UserInformation\").email,\n          token: this.bot_response_token_value,\n          role: this.$session.get(\"UserInformation\").role,\n          refreshed_or_closed: this.refreshed_or_closed,\n          chat: \"\",\n          source: \"Web\",\n          data: this.json_data[message.responses[0].intent]\n        })\n        .then(resp => {\n          this.chat.push({\n            conversation_only: true,\n            receiving: true,\n            received:\n              resp.data.responses.length == 0\n                ? \"Sorry I'm not getting your question\"\n                : resp.data.responses[0].text,\n            time: this.generate_time(),\n            image:\n              resp.data.responses[0].img == \"\"\n                ? null\n                : resp.data.responses[0].img\n          });\n          this.$session.set(\"BotResponse_Conversation\", this.chat);\n          this.update_scrollbar(\"upto_end\", \"response\");\n        });\n    },\n    response_handling(response, type) {\n      var i = 0;\n      var delay =\n        response.data.responses[i].text != undefined &&\n        response.data.responses[i].text.length > 10\n          ? 2000\n          : 500;\n      var vm = this;\n      document.querySelector(\".typing-indicator\").style.display = \"block\";\n      setTimeout(() => {\n        handle_response();\n      }, delay);\n      function handle_response() {\n        setTimeout(() => {\n          document.querySelector(\".typing-indicator\").style.display = \"none\";\n          if (response.data == null || response.data.responses.length == 0) {\n            vm.chat_response_error();\n          } else if (\n            response.data.responses[i].request_json != undefined &&\n            response.data.responses[i].request_json == true\n          ) {\n            if (response.data.responses[i].text != null) {\n              vm.chat.push({\n                conversation_only: true,\n                receiving: true,\n                received: response.data.responses[i].text,\n                time: vm.generate_time(),\n                image: response.data.responses[i].img,\n                video: response.data.responses[i].video\n              });\n              vm.$session.set(\"BotResponse_Conversation\", vm.chat);\n              vm.update_scrollbar(\"upto_end\", \"response\");\n            }\n            if (response.data.responses[i].intent == \"gogyb450_create_ticket\") {\n              var name;\n              if (vm.$session.get(\"UserInformation\").first_name != null) {\n                name =\n                  vm.$session.get(\"UserInformation\").first_name +\n                  \" \" +\n                  vm.$session.get(\"UserInformation\").last_name;\n              } else if (vm.$session.has(\"UserFirstName\")) {\n                name =\n                  vm.$session.get(\"UserFirstName\") +\n                  \" \" +\n                  vm.$session.get(\"UserLastName\");\n              }\n              var payload = {\n                username: name,\n                company_name: vm.companyname,\n                company_id: vm.companyid,\n                user_role: vm.$session.get(\"UserInformation\").role,\n                email: vm.$session.get(\"UserInformation\").email,\n                license_key: vm.$session.get(\"UserInformation\").license_key,\n                token: vm.$session.get(\"UserInformation\").tokens,\n                ticket_issue: \"\",\n                ticket_number: vm.ticket_number(),\n                description: \"\",\n                file_content: null,\n                file_name: null,\n                isEdit: false\n              };\n              payload = JSON.stringify(payload);\n              axios\n                .post(api_calls.chatbot_response_cense(), {\n                  license_key: vm.$session.get(\"UserInformation\").license_key,\n                  token: vm.bot_response_token_value,\n                  username: vm.$session.get(\"UserInformation\").email,\n                  token: vm.bot_response_token_value,\n                  role: vm.$session.get(\"UserInformation\").role,\n                  refreshed_or_closed: vm.refreshed_or_closed,\n                  chat: \"\",\n                  source: \"Web\",\n                  data: payload\n                })\n                .then(resp => {\n                  vm.chat.push({\n                    conversation_only: true,\n                    receiving: true,\n                    received:\n                      resp.data.responses.length == 0\n                        ? \"Sorry I'm not getting your question\"\n                        : resp.data.responses[i].text,\n                    time: vm.generate_time(),\n                    image: resp.data.responses[i].img,\n                    video:\n                      resp.data.responses[i].video != null\n                        ? resp.data.responses[i].video\n                        : null\n                  });\n                  vm.$session.set(\"BotResponse_Conversation\", vm.chat);\n                  vm.update_scrollbar(\"upto_end\", \"response\");\n                });\n            } else if (\n              response.data.responses[i].intent == \"create_appointment\"\n            ) {\n              let today_date = new Date();\n              axios\n                .post(api_calls.schedule_appointment_url(), {\n                  company_name: vm.companyname,\n                  company_id: vm.companyid,\n                  Date:\n                    today_date.getFullYear() +\n                    \"-\" +\n                    (today_date.getMonth() < 9\n                      ? \"0\" + (today_date.getMonth() + 1)\n                      : today_date.getMonth() + 1) +\n                    \"-\" +\n                    today_date.getDate() //Month object document it\n                  // Date: start_time,\n                })\n                .then(response => {\n                  // this.time_slots = this.full_time_slots;\n                  // if (response.data.Slot != undefined) {\n                  //   if (response.data.Slot.length > 0) {\n                  //     let index;\n                  //     for (var i in response.data.Slot) {\n                  //       index = this.time_slots.indexOf(response.data.Slot[i]);\n                  //       if (index != -1) {\n                  //         this.time_slots.splice(index, 1);\n                  //       }\n                  //     }\n                  //   } else {\n                  //   }\n                  // }\n                })\n                .catch(e => {\n                  // console.log(e);\n                });\n            } else {\n              vm.send_request_json(response.data);\n            }\n          } else if (\n            response.data.responses[i].return_intent != undefined &&\n            response.data.responses[i].return_intent == true\n          ) {\n            axios\n              .post(api_calls.chatbot_response_cense(), {\n                license_key: vm.$session.get(\"UserInformation\").license_key,\n                token: vm.bot_response_token_value,\n                username: vm.$session.get(\"UserInformation\").email,\n                token: vm.bot_response_token_value,\n                role: vm.$session.get(\"UserInformation\").role,\n                refreshed_or_closed: vm.refreshed_or_closed,\n                chat: \"/\" + response.data.responses[i].intent,\n                source: \"Web\"\n              })\n              .then(response => {\n                vm.handle_response(response);\n              });\n          } else if (\n            vm.companyid == \"3x5ive99534\" &&\n            response.data.responses[i].intent != undefined &&\n            response.data.responses[i].intent == \"confusion\"\n          ) {\n            vm.confusion_message(\"/need_help\");\n          } else if (response.data.responses[i].buttons != undefined) {\n            vm.load_buttons(response.data.responses[i], i);\n          } else if (response.data.responses[i].custom != undefined) {\n            //CHange  the condition here\n            if (\n              response.data.responses[i].custom.type != undefined &&\n              response.data.responses[i].custom.type == \"multiselect_dropdown\"\n            ) {\n              vm.multiselect_load(response.data.responses[i], i);\n            } else if (\n              response.data.responses[i].custom.type != undefined &&\n              response.data.responses[i].custom.type == \"table\"\n            ) {\n              vm.load_table(response.data.responses[i], i);\n            }\n          }\n          //this one for foreignxchange\n          else if (\n            response.data.responses[i].text != undefined &&\n            (response.data.responses[i].text.toLowerCase() ==\n              \"sorry i am not getting your question\" ||\n              response.data.responses[i].text.toLowerCase() ==\n                \"is there anything i can help you with?\")\n          ) {\n            if (\n              vm.$session.get(\"UserInformation\").license_key ==\n                \".eJxTcssvSs1Mz6tIzkjMS081NDexNIQKKUDFMkpKCoqt9PXLy8v10lBU6yXn5-olluobGRha6hqY6xqYKBgaWBkZW5ma6hmbm5gYmSoBAGa9Hp0.XR3Tuw.X77F_7LDtOLp2Vt9snFDSo31nTw\" ||\n              vm.$session.get(\"UserInformation\").license_key ==\n                \".eJxTci4tLsnPTS3ySCwoyMxLLS62NDW0MIWJKsCFM0pKCoqt9PXLy8v1kjOKE_USU_WNDAwtdQ3MdQ2NFAwNrYDIxFzPxMTS0tJICQBjZxux.XShq8w.Pgo5cmKwMQFnYUsscpojwEqDXQw\"\n            ) {\n              vm.initiate_support_chat();\n            } else {\n              vm.chat.push({\n                receiving: true,\n                received: \"Sorry I am not getting your question\",\n                conversation_only: true,\n                time: vm.generate_time()\n              });\n              vm.update_scrollbar(\"upto_end\", \"response\");\n            }\n          } else {\n            var msg = {\n              conversation_only: true,\n              time:\n                i == response.data.responses.length - 1\n                  ? vm.generate_time()\n                  : null\n            };\n            if (response.data.responses.length == 0) {\n              msg.received = \"Sorry we are not getting your question.\";\n              msg.receiving = true;\n            } else if (\n              response.data.responses[i].text != undefined &&\n              response.data.responses[i].text.includes(\".pdf\")\n            ) {\n              vm.display_pdf_chat(response.data.responses[i].text);\n            } else if (\n              response.data.responses[i].text != undefined &&\n              !response.data.responses[i].text.includes(\n                \"Download your manifest here\"\n              )\n            ) {\n              msg.received = response.data.responses[i].text;\n              msg.receiving = true;\n              msg.image = response.data.responses[i].img;\n              msg.videos =\n                response.data.responses[i].video == null\n                  ? []\n                  : response.data.responses[i].video;\n              vm.chat.push(msg);\n              if (i == 0) {\n                setTimeout(() => {\n                  vm.to_scroll = true;\n                  if (\n                    $(\".chat-body\")\n                      .children()\n                      .last()\n                      .height() /\n                      $(\".chat-body\").height() <\n                    0.5\n                  ) {\n                    $(\".chat-body\").animate(\n                      {\n                        scrollTop: $(\".chat-body\").prop(\"scrollHeight\")\n                      },\n                      1500\n                    );\n                  } else if (\n                    $(\".receiver\")\n                      .last()\n                      .parent()\n                      .height() /\n                      $(\".chat-body\").height() >\n                      0.5 &&\n                    $(\".receiver\")\n                      .last()\n                      .parent()\n                      .height() /\n                      $(\".chat-body\").height() <\n                      0.6\n                  ) {\n                    $(\".chat-body\").animate(\n                      {\n                        scrollTop: 0.9 * $(\".chat-body\").prop(\"scrollHeight\")\n                      },\n                      1500\n                    );\n                  } else {\n                    $(\".chat-body\").animate(\n                      {\n                        scrollTop: 0.75 * $(\".chat-body\").prop(\"scrollHeight\")\n                      },\n                      1500\n                    );\n                  }\n                }, 1000);\n              }\n              if (\n                $(\".chat-body\").height() -\n                  $(\".chat-body\").prop(\"scrollHeight\") !=\n                0\n              ) {\n                vm.to_scroll = true;\n              }\n            } else if (response.data.responses[i].intent == \"chat_support\") {\n              msg.receiving = true;\n              msg.received =\n                \"I am connecting you to one of our support agents. Please wait for a while.\";\n              vm.update_scrollbar(\"upto_end\", \"response\");\n              vm.chat.push(msg);\n              vm.chat.push({\n                receiving: true,\n                received: \"What's your name?\",\n                conversation_only: true,\n                time: vm.generate_time()\n              });\n              vm.update_scrollbar(\"upto_end\", \"response\");\n              axios.get(api_calls.chat_group_api()).then(response => {\n                vm.chat_group_name = response.data.chat_group_name;\n                vm.live_chat_token = response.data.token;\n                vm.live_chat_on = true;\n                vm.chat_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {\n                  params: {\n                    company: vm.$session.get(\"UserInformation\").company_name,\n                    chat_group_name: vm.chat_group_name,\n                    token: vm.live_chat_token\n                  }\n                });\n                vm.chat_socket.connect();\n                vm.channel = vm.chat_socket.channel(\n                  \"customers_groups:\" + vm.chat_group_name\n                );\n                vm.channel.join();\n                vm.channel.push(\"customer_needs_support_agent\");\n                vm.channel.on(\"new_chat_message\", res => {\n                  if (res.sender != \"customer\") {\n                    vm.chat.push({\n                      receiving: true,\n                      received: res.message,\n                      time: vm.generate_time(),\n                      conversation_only: true\n                    });\n                  }\n                  vm.update_scrollbar(\"upto_end\", \"response\");\n                });\n                vm.channel.on(\"stopped_chat\", res => {\n                  vm.chat.push({\n                    conversation_only: true,\n                    receiving: true,\n                    received: \"Support agent \" + res.message,\n                    time: this.generate_time()\n                  });\n                  vm.live_chat_on = false;\n                  vm.update_scrollbar(\"upto_end\", \"response\");\n                });\n                vm.channel.on(\"started_typing\", res => {\n                  vm.is_typing = true;\n                  document.querySelector(\".typing-indicator\").style.display =\n                    \"block\";\n                });\n                vm.channel.on(\"stopped_typing\", res => {\n                  vm.is_typing = false;\n                  document.querySelector(\".typing-indicator\").style.display =\n                    \"none\";\n                });\n              });\n            } else if (\n              response.data.responses[i].text != undefined &&\n              (response.data.responses[i].text.includes(\n                \"Download your manifest here\"\n              ) ||\n                response.data.responses[i].text.includes(/.pdf/))\n            ) {\n              vm.display_pdf_chat(response.data.responses[i]);\n            } else if (response.data.responses[i].products.length > 0) {\n              vm.display_products_chat(response.data.responses[i]);\n            }\n          }\n          if (i < response.data.responses.length - 1) {\n            i += 1;\n            document.querySelector(\".typing-indicator\").style.display = \"block\";\n            delay =\n              response.data.responses[i].text != undefined &&\n              response.data.responses[i].text.length > 10\n                ? 2000\n                : 500;\n            handle_response();\n          }\n        }, delay);\n      }\n    },\n    push_msg(responses, response) {\n      var index = 0;\n      var vm = this;\n      var delay = response[index].text.length > 10 ? 2000 : 500;\n      push_chat(response[index], delay);\n      this.refreshed_or_closed = true;\n      function push_chat(msg, time_delay) {\n        document.querySelector(\".typing-indicator\").style.display = \"block\";\n        setTimeout(() => {\n          document.querySelector(\".typing-indicator\").style.display = \"none\";\n\n          if (responses.data.responses[index].buttons != undefined) {\n            vm.load_buttons(\n              responses.data.responses[index],\n              \"is_button\",\n              \"welcome_message\"\n            );\n          } else {\n            vm.chat.push({\n              conversation_only: true,\n              receiving: true,\n              received: msg.text,\n              time:\n                index == response.length - 1 ? vm.generate_time() : undefined\n            });\n          }\n\n          $(\".time\")\n            .last()\n            .css(\"display\", \"none\");\n          setTimeout(() => {\n            $(\".time\")\n              .last()\n              .css(\"display\", \"block\");\n\n            if (index < response.length - 1) {\n              index += 1;\n              delay = response[index].text.length > 10 ? 2000 : 500;\n              push_chat(response[index], delay);\n            } else {\n              // console.log('1');\n              vm.refreshed_or_closed = false;\n            }\n          }, 500);\n        }, time_delay);\n      }\n    },\n    confusion_message(msg_string) {\n      axios\n        .post(api_calls.chatbot_response_cense(), {\n          chat: msg_string,\n          token: this.bot_response_token_value,\n          username: this.$session.get(\"UserInformation\").email,\n          source: \"Web\",\n          user_id: \"\",\n          license_key: this.$session.get(\"UserInformation\").license_key,\n          data: \"\",\n          role: this.$session.get(\"UserInformation\").role,\n          refreshed_or_closed: false\n        })\n        .then(response => {\n          this.response_handling(response);\n        });\n    },\n    fix_appointment() {\n      event.preventDefault();\n    },\n    display_products_chat(message) {\n      var msg = {\n        conversation_only: true,\n        time: this.generate_time()\n      };\n      msg.isproduct = true;\n      msg.elements = message;\n      this.chat.push(msg);\n      this.$session.set(\"BotResponse_Conversation\", this.chat);\n      this.update_scrollbar(\"upto_end\", \"response\");\n    },\n    display_pdf_chat(message) {\n      var msg = {\n        conversation_only: true,\n        time: this.generate_time()\n      };\n      if (message.includes(\"Download your manifest here \")) {\n        var temp = message.split(\"Download your manifest here \");\n        msg.url = temp[1];\n        msg.receiving = false;\n        msg.file_name = message.split(/^.*[\\\\\\/]/)[1];\n        this.chat.push(msg);\n        this.$session.set(\"BotResponse_Conversation\", this.chat);\n        this.update_scrollbar(\"upto_end\", \"response\");\n      } else {\n        let url = message.match(\n          /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[\\-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9\\.\\-]+|(?:www\\.|[\\-;:&=\\+\\$,\\w]+@)[A-Za-z0-9\\.\\-]+)((?:\\/[\\+~%\\/\\.\\w\\-_]*)?\\??(?:[\\-\\+=&;%@\\.\\w_]*)#?(?:[\\.\\!\\/\\\\\\w]*))?)/g\n        )[0];\n        msg.url = url;\n        msg.receiving = false;\n        msg.file_name = url.split(/^.*[\\\\\\/]/)[1];\n        this.chat.push(msg);\n        this.$session.set(\"BotResponse_Conversation\", this.chat);\n        this.update_scrollbar(\"upto_end\", \"response\");\n      }\n    },\n    generate_payment(price, name) {\n      var vm = this;\n      var options = {\n        key: \"rzp_test_SnDTaPnncfliDt\",\n        amount: price * 100,\n        company_id: this.$session.get(\"UserInformation\").company_id,\n        company_name: this.$session.get(\"UserInformation\").company_name,\n        name: \"Cense AI\",\n        currency: \"INR\",\n        description: \"Instill Intelligence\",\n        image: \"/img/cense_image.png\", // COMPANY LOGO\n        handler: function(response) {\n          var contact = $('#contact[type=\"tel\"]').value;\n          var email = $('#email[type=\"email\"]').value;\n          vm.paymentid = response.razorpay_payment_id;\n\n          if (transfer_account != null) {\n            vm.transfer_payment(transfer_account, price * 100, \"INR\", name);\n          }\n        },\n        prefill: {\n          name: \"\", // pass customer name\n          email: \"\", // customer email\n          contact: \"\" //customer phone no.\n        },\n        notes: {\n          address: \"address\" //customer address\n        },\n        theme: {\n          color: \"#283777\" // screen color\n        }\n      };\n      var rzp1 = new Razorpay(options);\n      rzp1.open();\n      event.preventDefault();\n    },\n    transfer_payment(account, amount, currency, name) {\n      axios\n        .post(\"https://api.razorpay.com/1/transfers\", {\n          auth: {\n            rzp_test_SnDTaPnncfliDt: \"llxEKbgABH8Lx4XApex9cGzj\"\n          },\n          data: {\n            account: account,\n            amount: amount,\n            currency: currency\n          }\n        })\n        .then(response => {\n          // if(this.user_data.api_key!='') {\n          this.shopify_order_create(name);\n          // }\n        });\n    },\n    shopify_order_create(name) {},\n    click_prompt(type) {\n      this.live_chat_on = false;\n      var divclickpopup = event.target.innerText;\n      setTimeout(() => {\n        document.querySelector(\".typing-indicator\").style.display = \"none\";\n      }, 500);\n      document.querySelector(\".typing-indicator\").style.display = \"block\";\n      if (type != \"collapsible\") {\n        axios\n          .post(api_calls.prompt_url(), {\n            uid: \"cense\",\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            chat: event.target.innerText,\n            level: event.target.attributes.value.nodeValue\n          })\n          .then(response => {\n            if (response.data.collapsible == true) {\n              this.create_chat(response.data, \"isprompt\");\n              document.querySelector(\".typing-indicator\").style.display =\n                \"none\";\n            } else if (\n              response.data.extras != undefined &&\n              response.data.extras[0].Type == \"TABLE\"\n            ) {\n              this.create_chat(response.data, \"istable\");\n              document.querySelector(\".typing-indicator\").style.display =\n                \"none\";\n            } else {\n              if (response.data != \"Oops! Something went wrong!\") {\n                this.create_chat(response.data, \"isprompt\");\n                document.querySelector(\".typing-indicator\").style.display =\n                  \"none\";\n              } else if (response.data == \"Oops! Something went wrong!\") {\n                this.chat.push(response.data);\n                this.$session.set(\"BotResponse_Conversation\", this.chat);\n                this.update_scrollbar();\n                document.querySelector(\".typing-indicator\").style.display =\n                  \"none\";\n              }\n            }\n          });\n      } else if (type == \"collapsible\") {\n        axios\n          .post(api_calls.prompt_url(), {\n            uid: \"cense\",\n            company_id: this.$session.get(\"UserInformation\").company_id,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            chat: \"\"\n          })\n          .then(response => {\n            this.chat.push(response.data);\n            this.update_scrollbar(\"upto_end\", \"response\");\n            this.$session.set(\"BotResponse_Conversation\", this.chat);\n          });\n      }\n    },\n    button_fill() {\n      if (this.isexchange) {\n        if (this.to_send == \"\") {\n          document.querySelector(\"#send_button\").style.fill = \"#8a8a8a63\";\n        } else if (this.to_send != \"\") {\n          if (this.live_chat_on) {\n            this.channel.push(\"started_typing\");\n            this.stop_typing(this);\n          }\n          document.querySelector(\"#send_button\").style.fill = \"#fdcf38\";\n        }\n      } else if (!this.isexchange) {\n        if (this.to_send == \"\") {\n          document.querySelector(\"#send_button\").style.fill = \"#8a8a8a63\";\n        } else if (this.to_send != \"\") {\n          if (this.live_chat_on) {\n            this.channel.push(\"started_typing\");\n            this.stop_typing(this);\n          }\n          document.querySelector(\"#send_button\").style.fill = \"#273679\";\n        }\n      }\n    },\n    stop_typing: debounce(vm => {\n      vm.channel.push(\"stopped_typing\");\n    }, 5000),\n    scroll_down() {\n      if (\n        document.querySelector(\".chat-body\").scrollHeight -\n          document.querySelector(\".chat-body\").scrollTop -\n          $(\".chat-his\")\n            .last()\n            .height() <=\n        document.querySelector(\".chat-body\").clientHeight\n      ) {\n        this.to_scroll = false;\n      } else {\n        this.to_scroll = true;\n      }\n    },\n    load_buttons(message, index, type) {\n      var msg = {\n        conversation_only: true,\n        buttons_list: [],\n        button_prefix: message.prefix,\n        custom_buttons: true,\n        receiving: true,\n        received: message.text,\n        time: this.generate_time(),\n        removable: type == \"welcome_message\" ? false : true\n      };\n      if (message.buttons.length == 3) {\n        if (\n          message.buttons[0].title == \"Exchange Rate\" &&\n          message.buttons[1].title == \"Track My Parcel\" &&\n          message.buttons[2].title == \"Call Helpdesk\"\n        ) {\n          msg.removable = false;\n        }\n      }\n      if (\n        message.text == \"Would you like to share your name and number?\" &&\n        this.isexchange\n      ) {\n        $(\"#response_bot_text\").prop(\"disabled\", true);\n      }\n      for (var i in message.buttons) {\n        if (msg.button_prefix != null) {\n          msg.buttons_list.push({\n            title: message.buttons[i].title,\n            value: msg.button_prefix + message.buttons[i].value\n          });\n        } else {\n          msg.buttons_list.push({\n            title: message.buttons[i].title,\n            value: message.buttons[i].value\n          });\n        }\n        if (\n          msg.buttons_list[i].title == \"No\" &&\n          message.text != \"Can I help you with anything else?\" &&\n          this.companyid == \"clinicaltrials81352\"\n        ) {\n          msg.buttons_list[i].value = \"isdisabled\";\n        }\n      }\n      setTimeout(() => {\n        this.chat.push(msg);\n        if (index == \"is_button\" || index == 0) {\n          setTimeout(() => {\n            if (\n              $(\".chat-body\")\n                .children()\n                .last()\n                .height() /\n                $(\".chat-body\").height() <\n              0.5\n            ) {\n              $(\".chat-body\").animate(\n                {\n                  scrollTop: $(\".chat-body\").prop(\"scrollHeight\")\n                },\n                1500\n              );\n            } else {\n              $(\".chat-body\").animate(\n                {\n                  scrollTop: $(\".chat-body\").prop(\"scrollTop\") + 50\n                },\n                1500\n              );\n            }\n          }, 1000);\n        } else {\n          this.to_scroll = true;\n        }\n        this.$session.set(\"BotResponse_Conversation\", this.chat);\n      }, 2500);\n    },\n    multiselect_load(message, index) {\n      var msg = {\n        conversation_only: true,\n        multiselect_values: message.custom.values,\n        placeholder: message.custom.placeholder,\n        is_multiselect: true,\n        receiving: true,\n        received: message.text,\n        time: this.generate_time()\n      };\n      this.chat.push(msg);\n    },\n    load_table(message, index) {\n      let msg = {\n        conversation_only: true,\n        col_list: Object.keys(message.custom.values[0]),\n        table_value: message.custom.values,\n        receiving: true,\n        received: message.text,\n        is_table: true,\n        time: this.generate_time()\n      };\n\n      setTimeout(() => {\n        this.chat.push(msg);\n        if (index == 0) {\n          setTimeout(() => {\n            if (\n              $(\".chat-body\")\n                .children()\n                .last()\n                .height() /\n                $(\".chat-body\").height() <\n              0.5\n            ) {\n              $(\".chat-body\").animate(\n                {\n                  scrollTop: $(\".chat-body\").prop(\"scrollHeight\")\n                },\n                1500\n              );\n            } else {\n              $(\".chat-body\").animate(\n                {\n                  scrollTop: 0.7 * $(\".chat-body\").prop(\"scrollHeight\")\n                },\n                1500\n              );\n            }\n          }, 1000);\n        } else {\n          $(\".chat-body\").animate(\n            {\n              scrollTop: $(\".chat-body\").prop(\"scrollTop\") + 100\n            },\n            1500\n          );\n          this.to_scroll = true;\n        }\n      }, 2500);\n    },\n    create_chat(message, type) {\n      var currency_list = [];\n      if (type == \"istable\") {\n        axios\n          .get(\"https://api.exchangeratesapi.io/latest\", {\n            params: {\n              base: \"AUD\"\n            }\n          })\n          .then(response => {\n            for (var i in message.extras[0].TABLE) {\n              if (message.extras[0].TABLE[i].PROP == \"TR\") {\n                currency_list.push({\n                  currency_title: message.extras[0].TABLE[i].TD,\n                  currency_value: parseFloat(\n                    Math.round(\n                      response.data.rates[message.extras[0].TABLE[i][\"TD_1\"]] *\n                        100\n                    ) / 100\n                  ).toFixed(4),\n                  type: \"TR\"\n                });\n              } else if (\n                message.extras[0].TABLE[i].PROP == \"THEAD\" &&\n                !this.isexchange\n              ) {\n                currency_list.push({\n                  country_name: message.extras[0].TABLE[i].TD,\n                  currency_name: message.extras[0].TABLE[i].TD_1,\n                  type: \"THEAD\"\n                });\n              }\n            }\n            ///\n            this.currencyexchange_list = currency_list;\n            ///\n            this.chat.push({\n              is_table: true,\n              table_title: this.parse(message.title),\n              table_list: currency_list\n            });\n            this.update_scrollbar();\n            setTimeout(() => {\n              document.querySelector(\".typing-indicator\").style.display =\n                \"none\";\n            }, 1000);\n          });\n      } else if (type == \"isprompt\") {\n        if (message.level > 0) {\n          this.chat.push(message);\n          this.$session.set(\"BotResponse_Conversation\", this.chat);\n          this.level = message.level;\n          this.update_scrollbar(\"upto_end\", \"response\");\n        } else {\n          this.chat.push(message);\n          this.first_click = true;\n          this.level = message.level;\n          this.update_scrollbar(\"upto_end\", \"response\");\n        }\n      } else {\n        this.chat.push(message);\n      }\n      this.$session.set(\"BotResponse_Conversation\", this.chat);\n    },\n    submit_custom_form() {\n      if (document.querySelector(\"#details_form\") != null) {\n        var element = document.querySelector(\"#details_form\");\n        element.addEventListener(\"submit\", event => {\n          event.preventDefault();\n          // actual logic, e.g. validate the form\n          var queryString = $(\"#details_form\").serializeArray();\n          if (this.form_payload == null) {\n            this.form_payload = {};\n            for (var i in queryString) {\n              this.form_payload[queryString[i].name] = queryString[i].value;\n            }\n            axios\n              .post(api_calls.bot_user_data(), {\n                license_key: this.$session.get(\"UserInformation\").license_key,\n                data: this.form_payload,\n                token: this.bot_response_token_value,\n                username: this.$session.get(\"UserInformation\").email,\n                source: \"Web\",\n                token: this.bot_response_token_value,\n                role: this.$session.get(\"UserInformation\").role\n              })\n              .then(response => {\n                if (response.data == \"Bot User Data Saved Successfully\") {\n                  $(\"#details_form :input\").prop(\"disabled\", true);\n                  $(\"#details_form :button\").prop(\"disabled\", true);\n                  this.update_scrollbar(\"upto_end\", \"response\");\n                  axios\n                    .post(api_calls.chatbot_response_cense(), {\n                      chat: \"/details_form\",\n                      token: this.bot_response_token_value,\n                      username: this.$session.get(\"UserInformation\").email,\n                      source: \"Web\",\n                      user_id: \"\",\n                      license_key: this.$session.get(\"UserInformation\")\n                        .license_key,\n                      Details: JSON.stringify(this.form_payload),\n                      role: this.$session.get(\"UserInformation\").role,\n                      refreshed_or_closed: false\n                    })\n                    .then(resp => {\n                      this.response_handling(resp);\n                      $(\".chat-body\").animate(\n                        { scrollTop: $(\".chat-body\").prop(\"scrollHeight\") },\n                        1000\n                      );\n                    });\n                }\n              })\n              .catch(e => {\n                // console.log(e);\n              });\n          }\n        });\n      }\n    },\n    update_scrollbar(type, isresponse, iswelcome, delay_value) {\n      var scroll_delay = iswelcome == \"is_welcome\" ? delay_value : 2000;\n      document.querySelector(\".typing-indicator\").style.display = \"block\";\n      if (isresponse == \"response\") {\n        setTimeout(() => {\n          document.querySelector(\".typing-indicator\").style.display = \"none\";\n        }, scroll_delay);\n      } else if (isresponse == \"sender\") {\n        $(\".chat-body\").animate(\n          {\n            scrollTop: $(\".chat-body\").prop(\"scrollHeight\")\n          },\n          750\n        );\n      }\n      if (isresponse != \"sender\") {\n        if (type == \"upto_end\") {\n          setTimeout(() => {\n            if (\n              $(\".chat-body\").prop(\"scrollTop\") <\n              $(\".chat-body\").prop(\"scrollHeight\")\n            ) {\n              if (\n                $(\".receiver\")\n                  .last()\n                  .parent()\n                  .height() /\n                  $(\".chat-body\").height() >\n                0.5\n              ) {\n                $(\".chat-body\").animate(\n                  {\n                    scrollTop: 0.75 * $(\".chat-body\").prop(\"scrollHeight\")\n                  },\n                  1500\n                );\n                this.to_scroll = true;\n              }\n            } else if (\n              $(\".receiver\")\n                .last()\n                .parent()\n                .height() /\n                $(\".chat-body\").height() <\n              0.5\n            ) {\n              $(\".chat-body\").animate(\n                {\n                  scrollTop: $(\".chat-body\").prop(\"scrollHeight\")\n                },\n                scroll_delay\n              );\n            }\n          }, scroll_delay);\n        } else {\n          setTimeout(() => {\n            document.querySelector(\".chat-body\").scrollTop =\n              document.querySelector(\".chat-body\").scrollHeight -\n              document.querySelector(\".chat-body\").lastChild.scrollHeight;\n          }, 1000);\n        }\n      }\n    },\n    FXPaymentMode() {\n      this.to_send = \"/Foreignxchange17491_payment_mode\";\n      this.send_message(\n        \"is_prompt\",\n        \"/Foreignxchange17491_payment_mode\",\n        \"Payment\"\n      );\n    },\n    FXTrackingParcel() {\n      this.to_send = \"/Foreignxchange17491_tracking_parcel\";\n      this.send_message(\n        \"is_prompt\",\n        \"/Foreignxchange17491_tracking_parcel\",\n        \"Track My Parcel\"\n      );\n    },\n    // ForeignExchangeConversion() {\n    //   this.to_send = \"/Foreignxchange17491_exchange_rate\";\n    //   this.send_message(\n    //     \"is_prompt\",\n    //     \"/Foreignxchange17491_exchange_rate\",\n    //     \"Exchange Rate\"\n    //   );\n    // },\n    ForeignExchangeConversion() {\n      // this.to_send = \"/Foreignxchange17491_exchange_rate\";\n      this.to_send = '/Foreignxchange17491_exchange_rate{\"BUY_OR_SELL\": \"BUY\"}';\n      this.send_message(\n        \"is_prompt\",\n        '/Foreignxchange17491_exchange_rate{\"BUY_OR_SELL\": \"BUY\"}',\n        \"Exchange Rate\"\n      );\n    },\n\n    ex1() {\n      setTimeout(() => {\n        if (document.getElementById(\"r1\") != null) {\n          $(\"#l1\").val(1);\n          for (let i = 0; i < this.currencyexchange_list.length; i++) {\n            $(\"#country\").append(\n              `<option value=\"${this.currencyexchange_list[i].currency_value}\">${this.currencyexchange_list[i].currency_title}</option>`\n            );\n          }\n          $(\"#r1\").text(document.getElementById(\"country\").value);\n          // document.getElementById(\"r1\").addEventListener(\"keyup\", function() {\n          //   var x = document.getElementById(\"r1\").innerText;\n          //   var con = document.getElementById(\"country\").value;\n          //   x = x / con;\n          //   x = x.toFixed(4);\n          //   $(\"#l1\").val(x);\n          // });\n          document.getElementById(\"l1\").addEventListener(\"keyup\", function() {\n            var x = document.getElementById(\"l1\").value;\n            var con = document.getElementById(\"country\").value;\n            x = x * con;\n            x = x.toFixed(4);\n            $(\"#r1\").text(x);\n          });\n          $(document).on(\"change\", \"#country\", function() {\n            // document.getElementById(\"country\").addEventListener(\"keyup\", function(){\n            var x = document.getElementById(\"l1\").value;\n            var con = document.getElementById(\"country\").value;\n            x = x * con;\n            x = x.toFixed(4);\n            $(\"#r1\").text(x);\n          });\n        }\n      }, 100);\n    },\n    adddropdownvalue() {\n      if (this.selected_indication[0] != undefined) {\n        this.to_send = \"\";\n        this.res = {};\n        for (let i = 0; i < this.selected_indication.length; i++) {\n          if (i == 0) {\n            this.to_send = this.selected_indication[i].title;\n          } else {\n            this.to_send =\n              this.to_send + \", \" + this.selected_indication[i].title;\n          }\n          if (\n            this.res[this.selected_indication[i].value.split('\"')[1]] ==\n            undefined\n          ) {\n            this.res[\n              this.selected_indication[i].value.split('\"')[1]\n            ] = this.selected_indication[i].value.split('\"')[3];\n          } else {\n            this.res[this.selected_indication[i].value.split('\"')[1]] =\n              this.res[this.selected_indication[i].value.split('\"')[1]] +\n              \",\" +\n              this.selected_indication[i].value.split('\"')[3];\n          }\n        }\n        this.button_fill();\n      } else {\n        this.to_send = \"\";\n        this.res = [];\n      }\n      this.button_fill();\n    },\n    closed_bot_chat(message,type){\n      // debugger;\n      // console.log(message);\n      this.refreshed_or_closed=true;\n      // lastclosedbotinputnode\n      if(message.nodes[message.nodes.length-1].node_type==\"header\"&&message.nodes[message.nodes.length-1].node_type!=null&&!this.empty_string_validity.test(message.nodes[message.nodes.length-1].node_type)){\n        if(message.nodes[message.nodes.length-1].title==\"Display Message\"){\n          message.nodes[message.nodes.length-1].title=null;\n        }\n        this.chat.push({\n          receiving: true,\n          received: message.nodes[message.nodes.length-1].title,\n          conversation_only: true,\n          time: null\n        });\n      }\n\n        // console.log(message.nodes.length);\n      for(let i=0;i<message.nodes.length-1;i+= 1){\n        // console.log(message.nodes);\n        if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"button\"&&!message.nodes[i].part_of_form){\n          var msg = {\n            conversation_only: true,\n            buttons_list: [],\n            button_prefix: null,\n            custom_buttons: true,\n            receiving: true,\n            time: null,\n            removable: type == \"welcome_message\" ? false : true\n          };\n          while(message.nodes[i].ui_element!=undefined){\n            if(message.nodes[i].ui_element.element_type==\"button\"){\n              msg.buttons_list.push({\n                title: message.nodes[i].ui_element.button,\n                value: message.nodes[i].ui_element.payload,\n                id: message.nodes[i].node_id,\n                node: message.nodes[i]\n              });\n            }\n            // msg.buttons_list.push({\n            //   title: message.nodes[i].ui_element.buttons,\n            //   value: message.nodes[i].ui_element.payload,\n            // });\n            i++;\n          }\n          i--;\n          this.chat.push(msg);\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"text_box\"&&!message.nodes[i].part_of_form){\n          this.chat.push({\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: message.nodes[i].ui_element.message,\n          });\n          // var msg = {\n          //   conversation_only: true,\n          //   buttons_list: [],\n          //   button_prefix: null,\n          //   custom_buttons: true,\n          //   receiving: true,\n          //   received: '<input type=\"text\" placeholder=\"'+message.nodes[i].ui_element.placeholder+'\"name=\"closed_bot_node_'+i+'\">',\n          //   time: null,\n          //   removable: type == \"welcome_message\" ? false : true\n          // };\n          this.refreshed_or_closed = false;\n          // console.log('2');\n          // this.chat.push(msg);\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"text_area\"&&!message.nodes[i].part_of_form){\n          var msg = {\n            conversation_only: true,\n            buttons_list: [],\n            button_prefix: null,\n            custom_buttons: true,\n            receiving: true,\n            // received: '<input type=\"text\" placeholder=\"'+message.nodes[i].ui_element.placeholder+'\"name=\"closed_bot_node_'+i+'\">',\n            received: '<textarea class=\"form-control\" rows=\"4\" cols=\"150\"style=\"padding-left:12px;resize:none;overflow-y:auto;min-height:30px\" placeholder=\"'+message.nodes[i].ui_element.placeholder+'\"name=\"closed_bot_node_'+i+'\"></textarea>',\n            time: null,\n            removable: type == \"welcome_message\" ? false : true\n          };\n          this.name_element_for_event_listener = \"closed_bot_node_\"+i;\n          // msg.buttons_list.push({\n          //     title: 'Submit',\n          //     value: 'Submit',\n          //   });\n          this.chat.push({\n            receiving: true,\n            received: message.nodes[i].ui_element.message,\n            conversation_only: true,\n            time: null\n          });\n          this.chat.push(msg);\n          this.is_text_area = true;\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"email\"&&!message.nodes[i].part_of_form){\n          this.isemail = true;\n          // if(message.nodes[i].validation_successful == false){\n          // this.chat.push({\n          //   receiving: true,\n          //   received: message.nodes[i].ui_element.error_msg,\n          //   conversation_only: true,\n          //   time: null\n          // });\n          // this.refreshed_or_closed = false;\n          // }\n          //  if(!message.nodes[i].validation_successful){\n            this.chat.push({\n              receiving: true,\n              received: message.nodes[i].ui_element.message,\n              conversation_only: true,\n              time: null\n            });\n            this.refreshed_or_closed = false;\n          //  }\n          // var msg = {\n          //   conversation_only: true,\n          //   buttons_list: [],\n          //   button_prefix: null,\n          //   custom_buttons: true,\n          //   receiving: true,\n          //   received: '<input type=\"email\" placeholder=\"'+message.nodes[i].ui_element.message+'\"name=\"closed_bot_node_'+i+'\">',\n          //   time: null,\n          //   removable: type == \"welcome_message\" ? false : true\n          // };\n          // // msg.buttons_list.push({\n          // //     title: 'Submit',\n          // //     value: 'Submit',\n          // //   });\n          // this.chat.push(msg);\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"phone_number\"&&!message.nodes[i].part_of_form){\n          this.is_phone_number = true;\n          // if(message.nodes[i].validation_successful == false){\n          // this.chat.push({\n          //   receiving: true,\n          //   received: message.nodes[i].ui_element.error_msg,\n          //   conversation_only: true,\n          //   time: null\n          // });\n          // this.refreshed_or_closed = false;\n          // }\n           this.chat.push({\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: message.nodes[i].ui_element.message,\n          });\n\n          var msg = {\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: '<div style=\"display:flex\"> <select name=\"countrycode\" class=\"form-control\" style=\"padding-left:6px !important;padding-right:6px !important; width:40%;height:50px !important;\"  >',\n            // received: '',\n          }\n          // var dropdown = [];\n            const data = CountryCodes;\n            let option;\n            for (let i = 0; i < data.length; i++) {\n              // option = document.createElement('option');\n              // option.text = data[i].country_code;\n              // option.value = data[i].calling_code;\n              // // dropdown.add(option);\n              // msg.received=msg.received + option;\n              msg.received= msg.received+'<option value= '+data[i].dial_code+'>'+data[i].code + \"(\"+ data[i].dial_code +\")\" + '</option>'\n            }\n            msg.received=msg.received+'</select>';\n            msg.received = msg.received + '<input type=\"text\" class=\"form-control\" style=\"padding-left:12px !important; height:50px !important;\" autocomplete=\"off\" name=\"phonenumber\" id= \"phonenumber\" name=\"closed_bot_node_'+i+'\">  </div>'\n            // console.log(msg);\n            this.chat.push(msg);\n          // this.chat.push({\n          // receiving: true,\n          // received: message.nodes[i].ui_element.message,\n          // conversation_only: true,\n          // time: null\n          // });\n          this.refreshed_or_closed = true;\n          this.name_element_for_event_listener = \"phonenumber\";\n          // var msg = {\n          //   conversation_only: true,\n          //   buttons_list: [],\n          //   button_prefix: null,\n          //   custom_buttons: true,\n          //   receiving: true,\n          //   received: '<input type=\"email\" placeholder=\"'+message.nodes[i].ui_element.message+'\"name=\"closed_bot_node_'+i+'\">',\n          //   time: null,\n          //   removable: type == \"welcome_message\" ? false : true\n          // };\n          // // msg.buttons_list.push({\n          // //     title: 'Submit',\n          // //     value: 'Submit',\n          // //   });\n          // this.chat.push(msg);\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"hyperlink\"&&!message.nodes[i].part_of_form){\n          this.chat.push({\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: '<a href=\"'+message.nodes[i].ui_element.hyperlink+'\" target=\"_blank\">'+message.nodes[i].ui_element.hyperlink+'</a>',\n          });\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"radio_buttons\"&&!message.nodes[i].part_of_form){\n           var msg = {\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: '',\n          }\n          this.chat.push({\n              receiving: true,\n              received: message.nodes[i].ui_element.message,\n              conversation_only: true,\n              time: null\n          });\n          // msg.received = message.nodes[i].ui_element.message;\n          for(let j=0;j<message.nodes[i].ui_element.radio_buttons.length;j++){\n            msg.received=msg.received+'<input type=\"radio\" name=\"'+message.nodes[i].node_id+'\" value=\"'+message.nodes[i].ui_element.radio_buttons[j].title+'\">'+message.nodes[i].ui_element.radio_buttons[j].title+'<br>';\n          }\n          this.chat.push(msg);\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"check_box\"&&!message.nodes[i].part_of_form){\n          var msg = {\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: '',\n          }\n          this.chat.push({\n              receiving: true,\n              received: message.nodes[i].ui_element.message,\n              conversation_only: true,\n              time: null\n          });\n          for(let j=0;j<message.nodes[i].ui_element.values.length;j++){\n            msg.received=msg.received+'<input type=\"checkbox\" name=\"'+message.nodes[i].node_id+'\" value=\"'+message.nodes[i].ui_element.values[j].title+'\">'+message.nodes[i].ui_element.values[j].title+'<br>';\n          }\n          this.chat.push(msg);\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"dropdown\"&&!message.nodes[i].part_of_form){\n          var msg = {\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: '<select name=\"'+message.nodes[i].node_id+'\" class=\"form-control\" ><option value disabled=\"disabled\">'+message.nodes[i].ui_element.message+'</option>',\n            // received: '',\n          }\n\n          for(let j=0;j<message.nodes[i].ui_element.dropdown.length;j++){\n            msg.received=msg.received+'<option>'+message.nodes[i].ui_element.dropdown[j].title+'</option>';\n          }\n          msg.received=msg.received+'</select>';\n          this.chat.push(msg);\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"image\"&&!message.nodes[i].part_of_form){\n          this.chat.push({\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: '<img width=\"210px\" height=\"140px\" src=\"'+message.nodes[i].ui_element.image+'\">',\n          });\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"video\"&&!message.nodes[i].part_of_form){\n          this.chat.push({\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: '<iframe width=\"210px\" height=\"140px\" src=\"'+message.nodes[i].ui_element.video+'\"</iframe>',\n          });\n        } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"message\"&&!message.nodes[i].part_of_form){\n          this.chat.push({\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: message.nodes[i].ui_element.message,\n          });\n        } else if(message.nodes[i].node_type==\"node\"){\n          var msg = {\n            receiving: true,\n            conversation_only: true,\n            time: null,\n            received: '',\n          }\n          var form='<form id=\"'+message.nodes[i].form_name.replace(' ','_')+'\">';\n          while(message.nodes[i].part_of_form){\n            // form=form+'<br>'\n            if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"text_box\"){\n              form=form+'<div class=\"form-group\">';\n              form=form+'<p style=\"margin-bottom:0px;font-weight:450;font-size:15px;\">'+message.nodes[i].header+'</p>';\n              form=form+'<input name=\"'+message.nodes[i].header+'\" class=\"form-control\" style=\"padding-left:10px !important\" type=\"text\" placeholder=\"'+message.nodes[i].ui_element.placeholder+'\"name=\"closed_bot_node_'+i+'\">';\n              form=form+'</div>';\n\n            } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"dropdown\"){\n              form=form+'<div class=\"form-group\">';\n              form=form+'<p style=\"margin-bottom:0px;font-weight:450;font-size:15px;\">'+message.nodes[i].header+'</p>';\n              form=form+'<select name=\"'+message.nodes[i].header+'\" class=\"form-control\" >'\n              for(let j=0;j<message.nodes[i].ui_element.dropdown.length;j++){\n                form=form+'<option>'+message.nodes[i].ui_element.dropdown[j].title+'</option>';\n              }\n              form=form+'</select>';\n              form=form+'</div>';\n            } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"check_box\"){\n              form=form+'<div class=\"form-group\">';\n              form=form+'<p style=\"margin-bottom:0px;font-weight:450;font-size:15px;\">'+message.nodes[i].header+'</p>';\n              for(let j=0;j<message.nodes[i].ui_element.values.length;j++){\n                form=form+'<input type=\"checkbox\" name=\"'+message.nodes[i].header+'\" value=\"'+message.nodes[i].ui_element.values[j].title+'\">'+message.nodes[i].ui_element.values[j].title+'<br>';\n              }\n              form=form+'</div>';\n            } else if(message.nodes[i].node_type==\"node\"&&message.nodes[i].ui_element.element_type==\"radio_buttons\"){\n              form=form+'<div class=\"form-group\">';\n              form=form+'<p style=\"margin-bottom:0px;font-weight:450;font-size:15px;\">'+message.nodes[i].header+'</p>';\n              for(let j=0;j<message.nodes[i].ui_element.radio_buttons.length;j++){\n                form=form+'<input type=\"radio\" name=\"'+message.nodes[i].header+'\" value=\"'+message.nodes[i].ui_element.radio_buttons[j].title+'\">'+message.nodes[i].ui_element.radio_buttons[j].title+'<br>';\n              }\n              form=form+'</div>';\n            }\n            // form=form+'<br>'\n            i++\n          }\n          i--;\n          form = form+'<button type=\"submit\" class=\"btn btn-primary\">Submit</button></form>'\n          this.isformon=true;\n          this.form_name=message.nodes[i].form_name.replace(' ','_');\n          msg.received=form;\n          this.chat.push(msg);\n          this.submit_closed_form_data();\n        }\n        this.chat.push({\n          receiving: true,\n          conversation_only: true,\n          time: this.generate_time(),\n          received: null,\n        });\n        if(message.nodes[i].ui_element.element_type!='message'&&message.nodes[i].ui_element.element_type!='image'&&message.nodes[i].ui_element.element_type!='video'&&message.nodes[i].ui_element.element_type!='button'&&message.nodes[i].ui_element.element_type!='hyperlink'){\n          this.lastclosedbotinputnode=this.chat.length-1;\n          this.selectednodeid=message.nodes[i];\n        }\n        if(message.nodes[i].ui_element.element_type=='button'){\n          this.lastclosedbotinputnode=this.chat.length-2;\n          this.selectednodeid=message.nodes[i];\n        }\n        if(message.nodes[i].is_leaf){\n          this.isclosedboton=false;\n          this.refreshed_or_closed=false;\n          this.refreshed_or_closed=true;\n        }\n      }\n      setTimeout(() => {\n        var vm = this;\n        vm.to_scroll = true;\n        if (\n          $(\".chat-body\")\n            .children()\n            .last()\n            .height() /\n            $(\".chat-body\").height() <\n          0.5\n        ) {\n          $(\".chat-body\").animate(\n            {\n              scrollTop: $(\".chat-body\").prop(\"scrollHeight\")\n            },\n            1500\n          );\n        } else if (\n          $(\".receiver\")\n            .last()\n            .parent()\n            .height() /\n            $(\".chat-body\").height() >\n            0.5 &&\n          $(\".receiver\")\n            .last()\n            .parent()\n            .height() /\n            $(\".chat-body\").height() <\n            0.6\n        ) {\n          $(\".chat-body\").animate(\n            {\n              scrollTop: 0.9 * $(\".chat-body\").prop(\"scrollHeight\")\n            },\n            1500\n          );\n        } else {\n          $(\".chat-body\").animate(\n            {\n              scrollTop: 0.75 * $(\".chat-body\").prop(\"scrollHeight\")\n            },\n            1500\n          );\n        }\n        if($(\".chat-body\").scrollTop()==0){\n          this.to_scroll=false;\n        }\n        // console.log($('[name='+vm.name_element_for_event_listener+']'))\n        if(vm.name_element_for_event_listener != null){\n          $('[name='+vm.name_element_for_event_listener+']')[0].addEventListener('keyup', vm.append_message_to_chatbox)\n        }\n      }, 1000);\n    },\n    submit_closed_form_data(type,message){\n      // debugger;\n      // console.log(type, 'Hello Harsh');\n      if (document.querySelector(\"#chat\"+(this.lastclosedbotinputnode-1)) != null&&type=='is_button'&&message.title==\"Submit\"){\n        var element = document.querySelector(\"#chat\"+(this.lastclosedbotinputnode+1));\n        var queryString = $(\"#chat\"+(this.lastclosedbotinputnode-1)+\" :input\").serializeArray();\n        if(this.closed_form_reply_data==null){\n          document.querySelector(\".typing-indicator\").style.display = \"block\";\n          this.closed_form_reply_data={};\n          for (var i in queryString) {\n            this.closed_form_reply_data[queryString[i].name] = queryString[i].value;\n          }\n          for (var i in queryString) {\n            this.closed_form_reply_data.queryString[i].name.push(queryString[i].value);;\n          }\n          axios\n            .post(api_calls.closed_form_response_api(),{\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              uid: this.$session.get(\"UserInformation\").email,\n              chat: this.closed_form_reply_data,\n              node_selected: this.selectednodeid,\n              bot_name: this.bot_name,\n              conversation_id : this.conversation_id,\n            })\n            .then(response=>{\n              document.querySelector(\".typing-indicator\").style.display = \"none\";\n              this.closed_form_reply_data=null;\n              this.closed_bot_chat(response.data);\n            });\n        }\n      } else if(type=='is_button'){\n        this.refreshed_or_closed = true;\n        this.chat.push({\n          sent: message.title,\n          sending: true,\n          time: this.generate_time(),\n          conversation_only: true,\n          delivered: true,\n          dropdown: \"\"\n        });\n        document.querySelector(\".typing-indicator\").style.display = \"block\";\n        axios\n          .post(api_calls.closed_form_response_api(),{\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            uid: this.$session.get(\"UserInformation\").email,\n            chat: message.title,\n            // node_selected: {node_id: message.id},\n            node_selected:  message.node,\n            conversation_id : this.conversation_id,\n            bot_name: this.bot_name,\n          })\n          .then(response=>{\n            document.querySelector(\".typing-indicator\").style.display = \"none\";\n            this.closed_form_reply_data=null;\n            this.closed_bot_chat(response.data);\n          });\n      } else if(type==undefined&&!this.isformon && !this.isemail &&!this.is_phone_number && this.is_text_area){\n        this.disable_name_element_for_event_listener();\n        // $('[name='+this.name_element_for_event_listener+']').attr(\"disabled\", 'disabled')\n        // this.name_element_for_event_listener = null;\n        var element = document.querySelector(\"#chat\"+(this.lastclosedbotinputnode+1));\n        var queryString = $(\"#chat\"+(this.lastclosedbotinputnode-1)+\" :input\").serializeArray();\n        if(this.closed_form_reply_data==null){\n          document.querySelector(\".typing-indicator\").style.display = \"block\";\n          this.closed_form_reply_data={};\n          for (var i in queryString) {\n            this.closed_form_reply_data[queryString[i].name] = [];\n          }\n          for (var i in queryString) {\n            this.closed_form_reply_data[queryString[i].name].push(queryString[i].value);;\n          }\n          this.chat.push({\n            sent: this.to_send,\n            sending: true,\n            time: this.generate_time(),\n            conversation_only: true,\n            delivered: true,\n            dropdown: \"\"\n          });\n          axios\n            .post(api_calls.closed_form_response_api(),{\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              uid: this.$session.get(\"UserInformation\").email,\n              chat: this.to_send,\n              node_selected: this.selectednodeid,\n              conversation_id : this.conversation_id,\n              bot_name: this.bot_name,\n            })\n            .then(response=>{\n              document.querySelector(\".typing-indicator\").style.display = \"none\";\n              this.closed_form_reply_data=null;\n              this.closed_bot_chat(response.data);\n            });\n        }\n      } else if(type==undefined&&this.isformon && !this.isemail &&!this.is_phone_number){\n        if(document.querySelector(\"#\"+this.form_name)!=null){\n          var element = document.querySelector(\"#\"+this.form_name);\n          element.addEventListener(\"submit\", event => {\n            event.preventDefault();\n            var queryString = $(\"#\"+this.form_name).serializeArray();\n            if (this.closed_form_reply_data == null) {\n              document.querySelector(\".typing-indicator\").style.display = \"block\";\n              this.closed_form_reply_data = {};\n              for (var i in queryString) {\n                this.closed_form_reply_data[queryString[i].name] = [];\n              }\n              for (var i in queryString) {\n                this.closed_form_reply_data[queryString[i].name].push(queryString[i].value);;\n              }\n              axios\n                .post(api_calls.closed_form_response_api(),{\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  uid: this.$session.get(\"UserInformation\").email,\n                  chat: this.closed_form_reply_data,\n                  node_selected: this.selectednodeid,\n                  conversation_id : this.conversation_id,\n                  bot_name: this.bot_name,\n                })\n                .then(response=>{\n                  document.querySelector(\".typing-indicator\").style.display = \"none\";\n                  $(\"#\"+this.form_name+\" :input\").prop(\"disabled\", true);\n                  // console.log(\"#\"+this.form_name+\":input\");\n                  this.closed_form_reply_data=null;\n                  this.closed_bot_chat(response.data);\n                });\n            }\n          });\n        }\n      } else if(type==undefined&&this.isemail){\n        // alert(this.to_send);\n        if(document.querySelector(\"#chat\"+(this.lastclosedbotinputnode-1)) != null){\n          this.chat.push({\n          sent: this.to_send,\n          sending: true,\n          time: this.generate_time(),\n          conversation_only: true,\n          delivered: true,\n          dropdown: \"\"\n        });\n\n          var element = document.querySelector(\"#chat\"+(this.lastclosedbotinputnode+1));\n          var queryString = $(\"#chat\"+(this.lastclosedbotinputnode-1)+\" :input\").serializeArray();\n          var x = this.lastclosedbotinputnode-1\n          // if(this.closed_form_reply_data==null){\n            document.querySelector(\".typing-indicator\").style.display = \"block\";\n            this.closed_form_reply_data={};\n            axios\n              .post(api_calls.closed_form_response_api(),{\n                license_key: this.$session.get(\"UserInformation\").license_key,\n                uid: this.$session.get(\"UserInformation\").email,\n                chat: this.to_send,\n                node_selected: this.selectednodeid,\n                conversation_id : this.conversation_id,\n                bot_name: this.bot_name,\n              })\n              .then(response=>{\n                var error_variable = null;\n                document.querySelector(\".typing-indicator\").style.display = \"none\";\n                  for(let i=0; i<response.data.nodes.length - 1 ; i += 1){\n                     if(response.data.nodes[i].validation_successful != undefined &&  response.data.nodes[i].validation_successful == false ){\n                       error_variable = i;\n                           this.chat.push({\n                        receiving: true,\n                        received: response.data.nodes[i].ui_element.error_msg,\n                        conversation_only: true,\n                        time: null\n                      });\n                      this.refreshed_or_closed = false;\n                     }\n                  }\n                 if(error_variable == null){\n                  this.closed_form_reply_data=null;\n                  this.isemail = false\n                  this.closed_bot_chat(response.data);\n                 }\n\n              });\n        }\n      }else if(type==undefined&&this.is_phone_number){\n        if(document.querySelector(\"#chat\"+(this.lastclosedbotinputnode-1)) != null){\n          if(this.is_phone_number_otp == true){\n            var dts = this.to_send;\n            this.chat.push({\n              sent: this.to_send,\n              sending: true,\n              time: this.generate_time(),\n              conversation_only: true,\n              delivered: true,\n              dropdown: \"\"\n            });\n          }\n          else {\n              console.log(this.lastclosedbotinputnode);\n              if(this.is_phone_number_err_msg){\n              var x = $(\"#chat\"+(this.lastclosedbotinputnode-1)+\" :input\").serializeArray();\n              console.log(\"if loop\");\n              console.log(this.lastclosedbotinputnode);\n              }\n              else {\n              console.log(\"else loop\");\n              var x = $(\"#chat\"+(this.lastclosedbotinputnode-1)+\" :input\").serializeArray();\n              }\n              console.log(x);\n              var dts = x[0].value + x[1].value;\n              this.chat.push({\n              sent: dts,\n              sending: true,\n              time: this.generate_time(),\n              conversation_only: true,\n              delivered: true,\n              dropdown: \"\"\n            });\n          }\n          // this.disable_name_element_for_event_listener();\n          // var element = document.querySelector(\"#chat\"+(this.lastclosedbotinputnode+1));\n          // var queryString = $(\"#chat\"+(this.lastclosedbotinputnode-1)+\" :input\").serializeArray();\n          // if(this.closed_form_reply_data==null){\n            document.querySelector(\".typing-indicator\").style.display = \"block\";\n            this.closed_form_reply_data={};\n            axios\n              .post(api_calls.closed_form_response_api(),{\n                license_key: this.$session.get(\"UserInformation\").license_key,\n                uid: this.$session.get(\"UserInformation\").email,\n                chat:dts,\n                node_selected: this.selectednodeid,\n                conversation_id : this.conversation_id,\n                bot_name: this.bot_name,\n              })\n              .then(response=>{\n                // console.log(this.chat);\n                this.to_send = \"\";\n                var error_variable = null;\n                document.querySelector(\".typing-indicator\").style.display = \"none\";\n                for(let i=0; i<response.data.nodes.length - 1 ; i += 1){\n                     if(response.data.nodes[i].ui_element.validate == \"phone_number\" && response.data.nodes[i].validation_successful != undefined &&  response.data.nodes[i].validation_successful == false ){\n                      this.is_phone_number_err_msg = true;\n                      this.closed_form_reply_data=null;\n                       error_variable = i;\n                       console.log(response.data);\n                      //  this.selectednodeid = response.data.nodes;\n                           this.chat.push({\n                        receiving: true,\n                        received: response.data.nodes[i].ui_element.error_msg,\n                        conversation_only: true,\n                        time: null\n                      });\n                          var msg = {\n                    receiving: true,\n                    conversation_only: true,\n                    time: null,\n                    received: '<div style=\"display:flex\"> <select name=\"countrycode\" class=\"form-control\" style=\"padding-left:6px !important;padding-right:6px !important; width:40%;height:50px !important;\"  >',\n                    // received: '',\n                  }\n                  console.log(\"reached here\")\n                  // var dropdown = [];\n                    this.disable_name_element_for_event_listener();\n                    const data = CountryCodes;\n                    let option;\n                    for (let i = 0; i < data.length; i++) {\n                      // option = document.createElement('option');\n                      // option.text = data[i].country_code;\n                      // option.value = data[i].calling_code;\n                      // // dropdown.add(option);\n                      // msg.received=msg.received + option;\n                      msg.received= msg.received+'<option value= '+data[i].dial_code+'>'+data[i].code + \"(\"+ data[i].dial_code +\")\" + '</option>'\n                    }\n                    msg.received=msg.received+'</select>';\n                    msg.received = msg.received + '<input type=\"text\" class=\"form-control\" style=\"padding-left:12px !important; height:50px !important;\" autocomplete=\"off\" name=\"phonenumber\" id= \"phonenumber\" name=\"closed_bot_node_'+i+'\">  </div>'\n                    // console.log(msg);\n                    this.chat.push(msg);\n                  // this.chat.push({\n                  // receiving: true,\n                  // received: message.nodes[i].ui_element.message,\n                  // conversation_only: true,\n                  // time: null\n                  // });\n                  // this.disable_name_element_for_event_listener();\n\n                  \n                  this.refreshed_or_closed = true;\n                  if(this.name_element_for_event_listener!= null){\n                    $('[name='+this.name_element_for_event_listener+']').off('keyup', vm.append_message_to_chatbox)\n                  }\n                  this.name_element_for_event_listener = \"phonenumber\";\n                  var vm = this;\n                  this.lastclosedbotinputnode=this.chat.length;\n                  console.log(this.lastclosedbotinputnode);\n                  var len = $('[name='+vm.name_element_for_event_listener+']').length;\n                  setTimeout(() => {\n                    // if(vm.name_element_for_event_listener != null){\n                    //   console.log($('[name='+vm.name_element_for_event_listener+']'))\n                    //   if($('[name='+vm.name_element_for_event_listener+']').length>1){\n                    //       console.log($('[name='+vm.name_element_for_event_listener+']')[len])\n                          $('[name='+vm.name_element_for_event_listener+']')[len].addEventListener('keyup', vm.append_message_to_chatbox)\n                      // }else {\n                        $('[name='+vm.name_element_for_event_listener+']')[0].addEventListener('keyup', vm.append_message_to_chatbox)\n                      // }\n                    // }\n                  }, 2000);\n                      this.refreshed_or_closed = true;\n                     } else if(response.data.nodes[i].ui_element.validate != undefined &&  response.data.nodes[i].ui_element.validate == \"otp\" && response.data.nodes[i].validation_successful == true ){\n                        this.closed_form_reply_data=null;\n                        this.selectednodeid = response.data.nodes[i];\n                        error_variable = i;\n                        this.is_phone_number_otp = true;\n                        this.chat.push({\n                        receiving: true,\n                        received: response.data.nodes[i].ui_element.otp_question_label,\n                        conversation_only: true,\n                        time: null\n                      });\n                     } else if(response.data.nodes[i].ui_element.validate != undefined && response.data.nodes[i].ui_element.validate == \"otp\" && response.data.nodes[i].validation_successful == false  ){\n                        this.closed_form_reply_data=null;\n                        this.selectednodeid = response.data.nodes[i];\n                        error_variable = i;\n                        this.chat.push({\n                        receiving: true,\n                        received: response.data.nodes[i].ui_element.incorrect_otp_msg,\n                        conversation_only: true,\n                        time: null\n                      });\n                     }\n                    this.refreshed_or_closed = false;\n                    console.log(\"reached here2\")\n                  }\n                if(error_variable == null){\n                  this.closed_form_reply_data=null;\n                  this.disable_name_element_for_event_listener();\n                  // setTimeout(() => {\n                    this.is_phone_number = false;\n                  // }, 1);\n                  this.closed_bot_chat(response.data);\n                }\n              });\n          // }\n        }\n      } else if(type==undefined&&!this.isformon && !this.isemail &&!this.is_phone_number && !this.is_text_area){\n         this.chat.push({\n          sent: this.to_send,\n          sending: true,\n          time: this.generate_time(),\n          conversation_only: true,\n          delivered: true,\n          dropdown: \"\"\n        });\n          axios\n            .post(api_calls.closed_form_response_api(),{\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              uid: this.$session.get(\"UserInformation\").email,\n              chat: this.to_send,\n              node_selected: this.selectednodeid,\n              conversation_id : this.conversation_id,\n              bot_name: this.bot_name,\n            })\n            .then(response=>{\n              document.querySelector(\".typing-indicator\").style.display = \"none\";\n              this.closed_form_reply_data=null;\n              this.closed_bot_chat(response.data);\n            });\n      }\n    },\n    getdata(){\n      if(!this.isformon && !this.is_phone_number){\n        var queryString = $(\"#chat\"+(this.lastclosedbotinputnode-1)+\" :input\").serializeArray();\n        this.to_send='';\n        for(let i=0;i<queryString.length;i++){\n          if(i==0){\n            this.to_send=queryString[i].value;\n          } else {\n            this.to_send=this.to_send + \",\" + queryString[i].value;\n          }\n        }\n      }\n      this.button_fill();\n    },\n    append_message_to_chatbox(){\n      console.log(this.name_element_for_event_listener, this.is_phone_number);\n      \n      console.log($('[name='+this.name_element_for_event_listener+']'));\n      if(this.is_text_area){\n        this.to_send = $('[name='+this.name_element_for_event_listener+']')[0].value;\n        this.button_fill();\n      }\n      if(this.is_phone_number){\n        var len = $('[name='+this.name_element_for_event_listener+']').length;\n        this.to_send = $('[name='+this.name_element_for_event_listener+']')[len-1].value;      \n        }\n    },\n    disable_name_element_for_event_listener(){\n      // console.log(\"We are here disabled function\")\n      $('[name='+this.name_element_for_event_listener+']').attr(\"disabled\", 'disabled')\n        // $('[name='+this.name_element_for_event_listener+']').remove();\n      this.name_element_for_event_listener = null;\n      if(this.is_phone_number){\n        $('[name=countrycode]').attr(\"disabled\", 'disabled')\n        // $('[name=countrycode]').remove();\n      }\n    },\n    go_to_design_bots_page(){\n      this.$router.push('/bot/designbot')\n    }\n\n    //sell function for foreign exchange\n    // ex2() {\n    //   setTimeout(() => {\n    //     if (document.getElementById(\"r2\") != null) {\n    //       $(\"#l2\").val(1);\n    //       for (let i = 0; i < this.currencyexchange_list.length; i++) {\n    //         $(\"#country2\").append(\n    //           `<option value=\"${this.currencyexchange_list[i].currency_value}\">${this.currencyexchange_list[i].currency_title}</option>`\n    //         );\n    //       }\n    //       $(\"#r2\").val(document.getElementById(\"country2\").value);\n    //       document.getElementById(\"r2\").addEventListener(\"keyup\", function() {\n    //         var x = document.getElementById(\"r2\").value;\n    //         var con = document.getElementById(\"country2\").value;\n    //         x = x / con;\n    //         x = x.toFixed(4);\n    //         $(\"#l2\").val(x);\n    //       });\n    //       document.getElementById(\"l2\").addEventListener(\"keyup\", function() {\n    //         var x = document.getElementById(\"l2\").value;\n    //         var con = document.getElementById(\"country2\").value;\n    //         x = x * con;\n    //         x = x.toFixed(4);\n    //         $(\"#r2\").val(x);\n    //       });\n    //       $(document).on(\"change\", \"#country2\", function() {\n    //         // document.getElementById(\"country2\").addEventListener(\"keyup\", function(){\n    //         var x = document.getElementById(\"l2\").value;\n    //         var con = document.getElementById(\"country2\").value;\n    //         x = x * con;\n    //         x = x.toFixed(4);\n    //         $(\"#r2\").val(x);\n    //       });\n    //     }\n    //   }, 3000);\n    // }\n  }\n};\n</script>\n\n<style scoped>\n.table td,\n.table th {\n  padding: 0.5rem !important;\n}\n.stop-chat {\n  width: 100%;\n}\n.chat-footer > a {\n  color: #283879 !important;\n}\n.chat-his > .time {\n  color: #000;\n}\n.buy-now {\n  font-weight: 800;\n  color: #283879;\n  font-size: 12px;\n  cursor: pointer;\n  margin-top: -5%;\n}\n.image-box {\n  height: 90px;\n  width: 100px;\n  margin-top: 6%;\n}\n.buy-products {\n  height: 180px;\n}\n.image-container {\n  background: #fff;\n  border: #fff 1px solid;\n  border-radius: 5px 5px 5px 5px;\n  margin-left: 5%;\n  height: 180px;\n}\n.image-container > p {\n  font-size: 10px;\n  text-align: center;\n}\n.chat-row.sender > .chat {\n  background-color: #283879;\n  color: #fff;\n  font-weight: 450;\n}\n.chat-row.receiver > .chat {\n  font-weight: 450;\n}\n.chat-body {\n  overflow-y: auto;\n}\n.chat-body .chat-row.receiver p,\n.chat-body .chat-row.receiver a {\n  width: 50%;\n}\n.chat-row.receiver > .chat {\n  background-color: #fff;\n  color: #000;\n}\nbutton.custom-buttons {\n  background: #1daae1;\n  min-width: 101px;\n  color: white;\n  font-size: 13px;\n  border-radius: 50px;\n  margin-top: 5%;\n  margin-left: auto;\n  margin-right: auto;\n}\ndiv::-webkit-scrollbar {\n  max-height: 20px;\n  width: 6px;\n  height: 2px;\n  border-radius: 10px;\n}\n.bounce {\n  animation: bounce 4s infinite;\n}\n.fa.fa-microphone {\n  color: #8a8a8a63;\n  font-size: 24px;\n}\n.fas.fa-video {\n  color: #8a8a8a63;\n  font-size: 18px;\n}\n.fa.fa-microphone :hover {\n  color: red;\n}\n#microphone.voice-on {\n  animation-name: flicker;\n  animation-duration: 0.7s;\n  animation-iteration-count: infinite;\n\n  -webkit-animation-name: flicker;\n  -webkit-animation-duration: 0.7s;\n  -webkit-animation-iteration-count: infinite;\n}\n/* Track */\ndiv::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 10px;\n}\n.toast-message {\n  margin-top: 1000px;\n}\n/* Handle */\ndiv::-webkit-scrollbar-thumb {\n  background: #7d7d7d;\n  border-radius: 10px;\n}\n\n/* Handle on hover */\ndiv::-webkit-scrollbar-thumb:hover {\n  background: #555;\n  border-radius: 10px;\n}\n.toast-container {\n  margin-left: 800px;\n}\n.typewriter span {\n  color: #fff;\n  font-family: monospace;\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\n  border-right: 0.15em solid orange; /* The typwriter cursor */\n  white-space: nowrap; /* Keeps the content on a single line */\n  margin: 0 auto; /* Gives that scrolling effect as the typing happens */\n  letter-spacing: 0.15em; /* Adjust as needed */\n  animation: typing 3.5s steps(30, end), blink-caret 0.5s step-end infinite;\n}\n\n/* Harsh */\n.chat-head .media .media-body p {\n  font-weight: bold;\n}\n#response_bot_text {\n  margin-top: 5px;\n  margin-bottom: 5px;\n  margin-left: 5px;\n  margin-right: 5px;\n  border-radius: 100px;\n}\n#button_addon2 {\n  margin-top: 5px;\n  margin-bottom: 5px;\n  border-radius: 100px;\n}\n.prompt .chat {\n  background: #fff;\n}\np {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n.chat-footer p {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n    \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n    \"Segoe UI Symbol\", \"Noto Color Emoji\";\n}\n\n.btn:focus,\n.btn:active:focus {\n  outline: none !important;\n  box-shadow: none;\n  -webkit-box-shadow: none;\n}\n\n/**/\n.form-control {\n  line-height: 20px;\n  font-size: 13px;\n  color: #494d69;\n  /* padding: 10px 0 10px 15px; */\n  border-radius: 10px;\n  border: none;\n  height: auto;\n  font-weight: 300;\n}\n\n#details_form .form-group,\n#details_form .form-group input {\n  width: 25vw !important;\n}\n\n#details_form,\n#details_form .form-group,\n#details_form .form-group input {\n  box-sizing: content-box !important;\n}\n\n.chat-txt input {\n  border-top-left-radius: 0;\n}\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  margin: 0;\n}\n.country,\n.country2 {\n  margin-left: 2%;\n  height: 20px;\n}\n.media1 {\n  background: #fff !important;\n  color: #2b3184 !important;\n}\n.media2 {\n  background: #fff;\n}\n.chat-wrap1 {\n  min-width: 320px;\n  max-width: 320px;\n}\n.chat-wrap2 {\n  min-width: 415px;\n  max-width: 415px;\n}\n.chat-body1 {\n  max-height: 300px;\n  min-height: 70vh;\n}\n.chat-body2 {\n  min-height: 70vh;\n  max-height: 400px;\n}\n\n.receiver .chat {\n  font-size: 14px !important;\n  font-weight: 300 !important;\n}\n\n.sender .chat {\n  font-size: 14px !important;\n  font-weight: 300 !important;\n}\n\n.FE_button {\n  width: 33%;\n  cursor: pointer;\n  margin-left: 2%;\n  font-size: 13px;\n  margin-bottom: 0;\n  background-color: white;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0px 1px 5px 0px;\n  height: 26px;\n}\n.FE_button img {\n  vertical-align: sub;\n}\n\n.FE_button :active {\n  background-color: #1eaae1;\n  color: #fff;\n}\n.FE_button :active img {\n  color: #fff;\n}\n\n.chat-act1 {\n  position: fixed;\n  bottom: 30px;\n  right: 30px;\n  z-index: 1111;\n}\n\n.chat-act1 a {\n  display: block;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: #273679 url(../../../../public/img/ForeignExchange/ui-15.png) center /\n    cover no-repeat;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\n}\n.chat-act1.active a img {\n  width: 100%;\n}\n.chat-act1 a.active {\n  -webkit-animation-delay: 0;\n  -webkit-animation-duration: 0.5s;\n  /* -webkit-animation-name: rotation-rl; */\n  -webkit-animation-fill-mode: forwards;\n  -moz-animation-delay: 0;\n  -moz-animation-duration: 0.5s;\n  /* -moz-animation-name: rotation-rl; */\n  -moz-animation-fill-mode: forwards;\n  animation-delay: 0;\n  animation-duration: 0.5s;\n  /* animation-name: rotation-rl; */\n  animation-fill-mode: forwards;\n}\n.chat-act1 a.inactive {\n  -webkit-animation-delay: 0;\n  -webkit-animation-duration: 0.5s;\n  /* -webkit-animation-name: rotation-lr; */\n  -webkit-animation-fill-mode: forwards;\n  -moz-animation-delay: 0;\n  -moz-animation-duration: 0.5s;\n  /* -moz-animation-name: rotation-lr; */\n  -moz-animation-fill-mode: forwards;\n  animation-delay: 0;\n  animation-duration: 0.5s;\n  /* animation-name: rotation-lr; */\n  animation-fill-mode: forwards;\n}\n@media (max-width: 991px) {\n  .chat-act1 {\n    bottom: 15px;\n    right: 15px;\n  }\n  .chat-act1 a {\n    width: 50px;\n    height: 50px;\n  }\n}\n/* v-bind:class=\"{'chat-act1': isexchange,'chat-act': !isexchange}\"  */\n\n/* The typing effect */\n@keyframes typing {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\n\n/* The typewriter cursor effect */\n@keyframes blink-caret {\n  from,\n  to {\n    border-color: transparent;\n  }\n  50% {\n    border-color: orange;\n  }\n}\n\n@keyframes flicker {\n  from {\n    color: red;\n  }\n  to {\n    color: #8a8a8a63;\n  }\n}\n@-webkit-keyframes flicker {\n  from {\n    color: red;\n  }\n  to {\n    color: #8a8a8a63;\n  }\n}\n@-moz-keyframes flicker {\n  from {\n    color: red;\n  }\n  to {\n    color: #8a8a8a63;\n  }\n}\n@-o-keyframes flicker {\n  from {\n    color: red;\n  }\n  to {\n    color: #8a8a8a63;\n  }\n}\n\n@keyframes bounce {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-180%);\n  }\n  60% {\n    transform: translateY(-90%);\n  }\n}\n@-webkit-keyframes bounce {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    -webkit-transform: translateY(0);\n  }\n  40% {\n    -webkit-transform: translateY(-200%);\n  }\n  60% {\n    -webkit-transform: translateY(-100%);\n  }\n}\n@-moz-keyframes bounce {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    -moz-transform: translateY(0);\n  }\n  40% {\n    -moz-transform: translateY(-200%);\n  }\n  60% {\n    -moz-transform: translateY(-100%);\n  }\n}\n@-o-keyframes bounce {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    -o-transform: translateY(0);\n  }\n  40% {\n    -o-transform: translateY(-200%);\n  }\n  60% {\n    -o-transform: translateY(-100%);\n  }\n}\n</style>"]}]}