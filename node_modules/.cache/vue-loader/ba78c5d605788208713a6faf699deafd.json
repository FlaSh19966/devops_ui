{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/SmsTemplates.vue?vue&type=template&id=30097c32&scoped=true&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/SmsTemplates.vue","mtime":1646636790390},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiBjbGFzcz0ic3Bpbm5lciIgaWQ9InNwaW5uZXIiIHYtc2hvdz0ic3Bpbm5lck9uIj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgcC0wIj4KICAgIDxkaXYgY2xhc3M9ImNhcmQgZGFzaC1jYXJkIj4KICAgICAgPGRpdiBjbGFzcz0iZGFzaC1jYXJkIGNhcmQtaGVhZGVyIGQtZmxleCBtLTAiPgogICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYWN0IGNvbC1zbS00IHByLTIgcGwtMCBkLWZsZXgiPgogICAgICAgIDxpbnB1dAogICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIG1yLWF1dG8iCiAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOiAwcHggMTVweDsgaGVpZ2h0OiAzNnB4ICFpbXBvcnRhbnQ7IgogICAgICAgICAgICBpZD0ic2VhcmNoX2Jhcl9pZCIKICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlYXJjaCB0ZW1wbGF0ZSBoZXJlIgogICAgICAgICAgICB2LW1vZGVsLnRyaW09InNlYXJjaF9uYW1lIgogICAgICAgICAgICB2LW9uOmtleXVwPSJjYWxsc2VhcmNoIgogICAgICAgIC8+CiAgICAgICAgPGEKICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgIHYtaWY9ImlzVmlzaWJsZVNlYXJjaENsZWFyIgogICAgICAgICAgY2xhc3M9ImJ0biBiZy10cmFuc3BhcmVudCBtdC1hdXRvIG1iLWF1dG8gcHktMCIKICAgICAgICAgIEBjbGljaz0iY2xlYXJfc2VhcmNoX25hbWUiCiAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IC00MHB4OyB6LWluZGV4OiAxMCIKICAgICAgICA+CiAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1hY3QgbWwtYXV0byBkLWZsZXggZmxleC13cmFwIj4KICAgICAgICAgIDxhCiAgICAgICAgICBpZD0iY2hlY2tfYmFsYW5jZV9idG4iCiAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IDE1cHg7IG1hcmdpbi1yaWdodDogMTBweDsiCiAgICAgICAgICBAY2xpY2s9ImNoZWNrX2FkZG9uc19iYWxhbmNlIgogICAgICAgICAgdGl0bGU9IkNoZWNrIHlvdXIgU01TIGNyZWRpdHMiCiAgICAgICAgPgogICAgICAgICAgQ2hlY2sgQmFsYW5jZQogICAgICAgIDwvYT4KICAgICAgICA8YQogICAgICAgICAgaWQ9InNlbmRfc21zX2J0bjEiCiAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgIHRpdGxlPSJTZW5kIFNNUyIKICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IDE1cHg7IG1hcmdpbi1yaWdodDogMTBweDsiCiAgICAgICAgICB2LXNob3c9ImRpc2FibGVfYnRuX2V4cGlyZWQiCiAgICAgICAgICBAY2xpY2s9InNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbCIKICAgICAgICA+CiAgICAgICAgICBTZW5kIFNNUwogICAgICAgIDwvYT4KICAgICAgICA8YQogICAgICAgICAgaWQ9InNlbmRfc21zX2J0biIKICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgZGF0YS10YXJnZXQ9IiNzZW5kc21zIgogICAgICAgICAgdGl0bGU9IlNlbmQgU01TIgogICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTVweDsgbWFyZ2luLXJpZ2h0OiAxMHB4OyIKICAgICAgICAgIHYtc2hvdz0idGVtcGxhdGVsaXN0Lmxlbmd0aCA+IDAgJiYgaXNfbm90aWZpY2F0aW9uX3RlbXBsYXRlID09PSBmYWxzZSAmJiAhZGlzYWJsZV9idG5fZXhwaXJlZCIKICAgICAgICA+CiAgICAgICAgICBTZW5kIFNNUwogICAgICAgIDwvYT4KICAgICAgICA8YQogICAgICAgICAgaWQ9ImFkZF90ZW1wbGF0ZV9idG4iCiAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgIHYtaWY9ImRpc2FibGVfYnRuX2V4cGlyZWQiCiAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNXB4OyBtYXJnaW4tcmlnaHQ6IDEwcHg7IgogICAgICAgICAgdGl0bGU9IkFkZCBuZXcgVGVtcGxhdGUiCiAgICAgICAgICBAY2xpY2s9ImVtcHR5X3ZhcmlhYmxlIgogICAgICAgID4KICAgICAgICAgIEFkZCBUZW1wbGF0ZQogICAgICAgIDwvYT4KICAgICAgICA8YQogICAgICAgICAgaWQ9ImFkZF90ZW1wbGF0ZV9idG4iCiAgICAgICAgICB2LWVsc2UKICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgZGF0YS10YXJnZXQ9IiNhZGR0ZW1wbGF0ZW1vZGVsIgogICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTVweDsgbWFyZ2luLXJpZ2h0OiAxMHB4OyIKICAgICAgICAgIHRpdGxlPSJBZGQgbmV3IFRlbXBsYXRlIgogICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSIKICAgICAgICA+CiAgICAgICAgICBBZGQgVGVtcGxhdGUKICAgICAgICA8L2E+CiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgIGNsYXNzPSJyZWQtYnRuIgogICAgICAgICAgaWQ9ImRlbGV0ZV9pbnRlbnQiCiAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNXB4OyIKICAgICAgICAgIEBjbGljaz0iZGVsZXRlX3RlbXBsYXRlIgogICAgICAgID4KICAgICAgICAgIERlbGV0ZQogICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcHktMCIgaWQ9InBhZ2UiPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgZC1mbGV4IHB4LTAiIHYtaWY9InRlbXBsYXRlbGlzdC5sZW5ndGggPiAwIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBwbC0wIiBzdHlsZT0iaGVpZ2h0OiA4MHZoOyBvdmVyZmxvdy15OiBhdXRvIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLWJveCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUiPgogICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiIHN0eWxlPSJvdmVyZmxvdy15OiBhdXRvIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgPCEtLSA8dHI+IC0tPgogICAgICAgICAgICAgICAgICA8dGggc2NvcGU9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1jaGVjayBjaGVja2JveCBjaGVja2JveC1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1jaGVjay1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNoZWNrLWlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJzZWxlY3RhbGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iY2hlY2tib3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0ic2VsZWN0ZWRfdGVtcGxhdGVzKCdhbGwnKSIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgPHRoCiAgICAgICAgICAgICAgICAgICAgc2NvcGU9InJvdyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1sZWZ0IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IG5vcm1hbCBub3JtYWwgbm9ybWFsIDE2cHgvMjJweCBSb2JvdG87CiAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMHB4OwogICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICM0MTQxNDE7CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgVEVNUExBVEVTCiAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgIDwhLS0gPC90cj4gLS0+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHRlbXBsYXRlLCBpbmRleCkgaW4gdGVtcGxhdGVsaXN0IgogICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgIDpjbGFzcz0iY2hlY2tfY3VycmVudF90ZW1wbGF0ZV9hY3RpdmUoaW5kZXgpIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHRkIHNjb3BlPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1jaGVjayBjaGVja2JveCBjaGVja2JveC1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWNoZWNrLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNoZWNrLWlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iY2hlY2tib3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9J2luZGV4JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX3RlbXBsYXRlcyh0ZW1wbGF0ZS50ZW1wbGF0ZV9pZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzaG93X3RlbXBsYXRlKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT0idGVtcGxhdGUudGVtcGxhdGVfbmFtZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB0ZW1wbGF0ZS50ZW1wbGF0ZV9uYW1lIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzcz0iY29sLXNtLTggcHItMCIKICAgICAgICAgIHN0eWxlPSJvdmVyZmxvdy15OiBhdXRvIgogICAgICAgICAgdi1pZj0idGVtcGxhdGVsaXN0Lmxlbmd0aCA+IDAiCiAgICAgICAgPgogICAgICAgICAgPGRpdiBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgI2RiZTJlOCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtYi0wIHB0LTIgZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im10LTIgbWItMCI+VGVtcGxhdGUgRGV0YWlsczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWwtYXV0byBtdC0yIG1iLTAiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgIHRpdGxlPSJDbGljayBIZXJlIGZvciBQcmV2aWV3IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogcmdiKDM5LCA1NCwgMTIxKSIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InByZXZpZXdfdGVtcGxhdGUoJ29sZCcpIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGFiZTEiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXJpZ2h0OiAxcmVtOyBmb250LXNpemU6IDEuMjVyZW0iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgUHJldmlldwogICAgICAgICAgICAgICAgICAgIDwvcD48L2EKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZWRpdF90ZW1wbGF0ZV9kZXRhaWxzIgogICAgICAgICAgICAgICAgICAgIHYtaHRtbD0icGVuY2lsX3N2ZyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXItMiBtdC0yIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiCiAgICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGhyIHN0eWxlPSJtYXJnaW4tdG9wOiAwIiAvPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPgogICAgICAgICAgICAgICAgICBUZW1wbGF0ZSBOYW1lCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9IiFpc0VkaXRUZW1wbGF0ZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMjBweCI+CiAgICAgICAgICAgICAgICA8cD57eyBjdXJyZW50X3RlbXBsYXRlLnRlbXBsYXRlX25hbWUgfX08L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiB2LWVsc2U+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgaWQ9ImVkaXRfdGVtcGxhdGVfbmFtZV9pZCIKICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJjdXJyZW50X3RlbXBsYXRlLnRlbXBsYXRlX25hbWUiCiAgICAgICAgICAgICAgICAgIHYtb246a2V5dXA9InZhbGlkYXRlX2VkaXRfdGVtcGxhdGVfbmFtZSIgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogMC4zNzVyZW0gMC43NXJlbSIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIFRlbXBsYXRlIE5hbWUiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgdi1zaG93PSJlZGl0X3RlbXBsYXRlX25hbWVfYWxyZWFkeV9leGlzdCIKICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiByZWQiCiAgICAgICAgICAgICAgICAgID5BIFRlbXBsYXRlIHdpdGggdGhpcyBuYW1lIGFscmVhZHkgZXhpc3RzLjwvc3BhbgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJjb2wtc20tMTIiCiAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDFyZW0iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIEJvZHk8L3A+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgPHA+e3sgY3VycmVudF90ZW1wbGF0ZS50ZW1wbGF0ZV9ib2R5IH19PC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJjb2wtc20tMTIiCiAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDFyZW0iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIEV4YW1wbGU8L3A+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgPHA+e3sgY3VycmVudF90ZW1wbGF0ZS50ZW1wbGF0ZV9leGFtcGxlIH19PC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIgogICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIFZhcmlhYmxlczwvcD4KICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgPHRhYmxlIHYtaWY9IiFpc0VkaXRUZW1wbGF0ZSIgc3R5bGU9IndpZHRoOiAxMDAlOyI+CiAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICA8dHIgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyI+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtc20tNCIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgIFZhcmlhYmxlcwogICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtc20tOCIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgIFZhbHVlcwogICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIodmFsdWUsIG5hbWUsIGluZGV4KSBpbiBjdXJyZW50X3RlbXBsYXRlLnZhcmlhYmxlX2RpY3QiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJib3JkZXI6IDFweCBzb2xpZCBibGFjazsiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgIHt7bmFtZX19CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyI+CiAgICAgICAgICAgICAgICAgICAgICB7e2N1cnJlbnRfdGVtcGxhdGUudmFyaWFibGVfZGljdFtuYW1lXX19CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgIDx0YWJsZSB2LWVsc2Ugc3R5bGU9IndpZHRoOiAxMDAlOyI+CiAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtc20tNCIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgICAgVmFyaWFibGVzCiAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC1zbS04IiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgICBWYWx1ZXMKICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHZhbHVlLCBuYW1lLCBpbmRleCkgaW4gY3VycmVudF90ZW1wbGF0ZS52YXJpYWJsZV9kaWN0IgogICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx0ZCA+CiAgICAgICAgICAgICAgICAgICAgICB7e25hbWV9fQogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IiAKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY3VycmVudF90ZW1wbGF0ZS52YXJpYWJsZV9kaWN0W25hbWVdIiAKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDsKICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHggMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9Im5hbWUgPT0gJ2N1c3RvbWVyX25hbWUnPyAnQ3VzdG9tZXJzIE5hbWUgd2lsbCBiZSBwaWNrZWQgZnJvbSBjdXN0b21lcnMgbGlzdCB3aGlsZSBzZW5kaW5nIFNNUyc6JyciCiAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0ibmFtZSA9PSAnY3VzdG9tZXJfbmFtZSciCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciIgdi1pZj0iaXNFZGl0VGVtcGxhdGUiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhc2gtbW9kYWwiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXdyYXAgdGV4dC1yaWdodCBtdC0wIHB5LTAgYm9yZGVyLXRvcC0wIj4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1saW5rIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJib3JkZXItcmFkaXVzOiAwIgogICAgICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlZGl0X3RlbXBsYXRlX2RldGFpbHMiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBDYW5jZWwKICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NhdmUiCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlZGl0X3RlbXBsYXRlKCkiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBTYXZlCiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgZC1mbGV4IHB4LTAgcHktNSIgdi1lbHNlLWlmPSJzZWFyY2hfbmFtZSA9PSAnJyI+CiAgICAgICAgPGg0IGNsYXNzPSJteC1hdXRvIj4KICAgICAgICAgIExvb2tzIGxpa2UgeW91IGRvbid0IGhhdmUgYW55IHRlbXBsYXRlcyBhZGRlZC4gTGV0J3MgYmVnaW4gYnkKICAgICAgICAgIGNsaWNraW5nIG9uIEFkZCBUZW1wbGF0ZS4KICAgICAgICA8L2g0PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGQtZmxleCBweC0wIHB5LTUiIHYtZWxzZS1pZj0idGVtcGxhdGVsaXN0Lmxlbmd0aCA9PSAwICYmIHNlYXJjaF9uYW1lICE9ICcnIj4KICAgICAgICA8aDQgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgU2VhcmNoZWQgVGVtcGxhdGUgbm90IGZvdW5kLgogICAgICAgIDwvaDQ+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJwYWdpbi10YWJsZSBwYi0zIiB2LWlmPSJ0ZW1wbGF0ZWxpc3QubGVuZ3RoID4gMCIgc3R5bGU9Im1hcmdpbi10b3A6IDIlIj4KICAgICAgICA8bmF2IGFyaWEtbGFiZWw9IlBhZ2UgbmF2aWdhdGlvbiBleGFtcGxlIj4KICAgICAgICAgIDx1bCBjbGFzcz0icGFnaW5hdGlvbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgIEBjbGljaz0icGFnZV9yZXF1aXJlKHBhZ2Vfbm8gLSAxKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjguNjY3IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1LjIwNCIKICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDguNjY3IDE1LjIwNCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGcKICAgICAgICAgICAgICAgICAgICBpZD0iYXJyb3ctcG9pbnQtdG8tbGVmdCIKICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMDUuODA2IDE1LjIwNCkgcm90YXRlKDE4MCkiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgaWQ9IlBhdGhfMTEzNiIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iUGF0aCAxMTM2IgogICAgICAgICAgICAgICAgICAgICAgZD0iTTEwNS40OTMsOC4zNTRsLTYuNTM3LDYuNTM3YTEuMDY1LDEuMDY1LDAsMSwxLTEuNTA2LTEuNTA2TDEwMy4yMzUsNy42LDk3LjQ1LDEuODE3QTEuMDY1LDEuMDY1LDAsMCwxLDk4Ljk1Ni4zMTJsNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwwLDEsMCwxLjUwNVoiCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDApIgogICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzk0OTlhZSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgIDpjbGFzcz0iJ3BhZ2UtaXRlbSAnICsgcGFnaW5hdGlvbl9jbGFzcyhwYWdlbm8pIgogICAgICAgICAgICAgIHYtZm9yPSJwYWdlbm8gaW4gcGFnZV9hcnJheSIKICAgICAgICAgICAgICA6a2V5PSJwYWdlbm8iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgdi1pZj0icGFnZW5vID09ICcuLi5zJyB8fCBwYWdlbm8gPT0gJy4uLmwnIgogICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgICAgICBAY2xpY2s9InBhZ2VfcmVxdWlyZShwYWdlbm8pIgogICAgICAgICAgICAgICAgPi4uLjwvYQogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgdi1pZj0icGFnZW5vICE9ICcuLi5zJyAmJiBwYWdlbm8gIT0gJy4uLmwnIgogICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgICAgICBAY2xpY2s9InBhZ2VfcmVxdWlyZShwYWdlbm8pIgogICAgICAgICAgICAgICAgPnt7IHBhZ2VubyB9fTwvYQogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgIEBjbGljaz0icGFnZV9yZXF1aXJlKHBhZ2Vfbm8gKyAxKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjguNjY3IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1LjIwNCIKICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDguNjY3IDE1LjIwNCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGcKICAgICAgICAgICAgICAgICAgICBpZD0iYXJyb3ctcG9pbnQtdG8tcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTk3LjEzOSAwKSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICBpZD0iUGF0aF8xMTM2IgogICAgICAgICAgICAgICAgICAgICAgZGF0YS1uYW1lPSJQYXRoIDExMzYiCiAgICAgICAgICAgICAgICAgICAgICBkPSJNMTA1LjQ5Myw4LjM1NGwtNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwxLDEtMS41MDYtMS41MDZMMTAzLjIzNSw3LjYsOTcuNDUsMS44MTdBMS4wNjUsMS4wNjUsMCwwLDEsOTguOTU2LjMxMmw2LjUzNyw2LjUzN2ExLjA2NSwxLjA2NSwwLDAsMSwwLDEuNTA1WiIKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMCkiCiAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjOTQ5OWFlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9uYXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBpZD0iYWRkdGVtcGxhdGVtb2RlbCIKICAgIGNsYXNzPSJtb2RhbCBmYWRlIGRhc2gtbW9kYWwiCiAgICByb2xlPSJkaWFsb2ciCiAgICBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiCiAgICBkYXRhLWtleWJvYXJkPSJmYWxzZSIKICA+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGgzPkFkZCBUZW1wbGF0ZTwvaDM+CiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgIEBjbGljaz0iZW1wdHlfdmFyaWFibGUiCiAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2Nsb3NlLWljbi5wbmciIGFsdCAvPgogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIE5hbWU8L3A+CiAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICBpZD0idGVtcGxhdGVfbmFtZV9hZGRfaWQiCiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJ0ZW1wbGF0ZV9uYW1lIgogICAgICAgICAgICAgICAgdi1vbjprZXl1cD0idmFsaWRhdGVfdGVtcGxhdGVfbmFtZSIgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtIgogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIFRlbXBsYXRlIE5hbWUiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgdi1zaG93PSJ0ZW1wbGF0ZV9uYW1lX2FscmVhZHlfZXhpc3QiCiAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHJlZCIKICAgICAgICAgICAgICAgID5BIFRlbXBsYXRlIHdpdGggdGhpcyBuYW1lIGFscmVhZHkgZXhpc3RzLjwvc3BhbgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIHYtc2hvdz0iY3VycmVudF9zdGVwID09IDEiPgogICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+U2VsZWN0IGEgUHJvbW90aW9uYWwgVGVtcGxhdGU8L3A+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiIgdi1mb3I9Iih0ZW1wbGF0ZSwgaW5kZXgpIGluIGRlZmF1bHRfdGVtcGxhdGVsaXN0IgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCI+CiAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jaGVjay1pbnB1dCIKICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNob29zZW5fdGVtcGxhdGUiCiAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgIG5hbWU9InNlY3Qxb25fM18xIgogICAgICAgICAgICAgICAgaWQ9InNlY3Qxb25fM18xX2lkXzEiCiAgICAgICAgICAgICAgICA6dmFsdWU9InRlbXBsYXRlIgogICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1jaGVjay1sYWJlbCIgZm9yPSJpbmxpbmVSYWRpbzEiCiAgICAgICAgICAgICAgICA+e3t0ZW1wbGF0ZS50ZW1wbGF0ZV9uYW1lfX08L2xhYmVsCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxoNT4KICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIj5TZWxlY3RlZCBUZW1wbGF0ZSBFeGFtcGxlPC9wPgogICAgICAgICAgPC9oNT4KICAgICAgICAgIDxwIHYtaWY9ImNob29zZW5fdGVtcGxhdGUgIT0gbnVsbCI+e3tjaG9vc2VuX3RlbXBsYXRlLnRlbXBsYXRlX2V4YW1wbGV9fTwvcD4KICAgICAgICAgIDxwIHYtZWxzZT5TZWxlY3QgYSBUZW1wbGF0ZTwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiB2LWlmPSJjdXJyZW50X3N0ZXAgPT0gMiAmJiBjaG9vc2VuX3RlbXBsYXRlICE9IG51bGwiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIEJvZHk8L3A+CiAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgIDxkaXYgc3R5bGU9InBhZGRpbmctbGVmdDogMTVweCI+CiAgICAgICAgICAgICAgPHA+e3sgY2hvb3Nlbl90ZW1wbGF0ZS50ZW1wbGF0ZV9ib2R5IH19PC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIFZhcmlhYmxlczwvcD4KICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgPHRhYmxlPgogICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICA8dGggc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgIFZhcmlhYmxlcwogICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICA8dGggc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgIFZhbHVlcwogICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHZhbHVlLCBuYW1lLCBpbmRleCkgaW4gY2hvb3Nlbl90ZW1wbGF0ZS52YXJpYWJsZV9kaWN0IgogICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgIHt7bmFtZX19CiAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLTgiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiAKICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IiAKICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjaG9vc2VuX3RlbXBsYXRlLnZhcmlhYmxlX2RpY3RbbmFtZV0iIAogICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9Im5hbWUgPT0gJ2N1c3RvbWVyX25hbWUnPyAnQ3VzdG9tZXJzIE5hbWUgd2lsbCBiZSBwaWNrZWQgZnJvbSBjdXN0b21lcnMgbGlzdCB3aGlsZSBzZW5kaW5nIFNNUyc6JyciCiAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9Im5hbWUgPT0gJ2N1c3RvbWVyX25hbWUnIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXdyYXAgdGV4dC1yaWdodCBtdC0wIHB5LTAgYm9yZGVyLXRvcC0wIj4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHYtc2hvdz0iY3VycmVudF9zdGVwID09IDEiCiAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICBAY2xpY2s9ImVtcHR5X3ZhcmlhYmxlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgQ2FuY2VsCiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdi1zaG93PSJjdXJyZW50X3N0ZXAgPT0gMSAmJiBCb29sZWFuKGNob29zZW5fdGVtcGxhdGUpICE9IGZhbHNlIgogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgIEBjbGljaz0iY2hhbmdlX3N0ZXAoMikiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBOZXh0CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdi1zaG93PSJjdXJyZW50X3N0ZXAgPT0gMiIKICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgICBAY2xpY2s9ImNoYW5nZV9zdGVwKDEpIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgQmFjawogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHYtc2hvdz0iY3VycmVudF9zdGVwID09IDIiCiAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgQGNsaWNrPSJwcmV2aWV3X3RlbXBsYXRlKCduZXcnKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIFByZXZpZXcKICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICB2LXNob3c9ImN1cnJlbnRfc3RlcCA9PSAyIgogICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc2F2ZSIKICAgICAgICAgICAgICBAY2xpY2s9InNhdmVfdGVtcGxhdGUoKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIFNhdmUKICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBpZD0ic2VuZHNtcyIKICAgIGNsYXNzPSJtb2RhbCBmYWRlIGRhc2gtbW9kYWwiCiAgICByb2xlPSJkaWFsb2ciCiAgICBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiCiAgICBkYXRhLWtleWJvYXJkPSJmYWxzZSIKICA+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGgzPlNlbmQgU01TPC9oMz4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSIKICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvY2xvc2UtaWNuLnBuZyIgYWx0IC8+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgTmFtZTwvcD4KICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0icGFkZGluZy1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICA8cD57eyBjdXJyZW50X3RlbXBsYXRlLnRlbXBsYXRlX25hbWUgfX08L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlNlbmQgU01TIHRvPC9wPgogICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIHYtaWY9IiFzZW5kX3Ntc19hbGxfY3VzdG9tZXIiCiAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMnB4OwogICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMDY0NWFkOwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSIKICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IDE2cHgiCiAgICAgICAgICAgICAgICAgIHRpdGxlPSJ5b3UgY2FuIGFsc28gc3BlY2lmeSBuYW1lIHdoaWxlIGFkZGluZyBuZXcgbnVtYmVyIGluIHRoaXMgd2F5ICgrOTEgOTk5OTk5OTk5OSxKb2huIERvZSksIG5vdGUgdGhpcyB3b3VsZCBvbmx5IHdvcmsgaW4gdGhlIGNhc2Ugd2hlcmUgeW91IGFkZCBuZXcgbnVtYmVyLiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBteS1hdXRvIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlbmRfc21zX2FsbF9jdXN0b21lciIKICAgICAgICAgICAgICAgICAgOnZhbHVlPSJ0cnVlIgogICAgICAgICAgICAgICAgICBpZD0ic2VuZF9zbXNfYWxsX2N1c3RvbWVyX3RydWVfaWQiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiIgaWQ9ImZpbHRlcl9wb3J0YWxfdXNlcl9yYWRpbyI+PC9zcGFuPgogICAgICAgICAgICAgICAgQWxsIEN1c3RvbWVyCiAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlbmRfc21zX2FsbF9jdXN0b21lciIKICAgICAgICAgICAgICAgICAgOnZhbHVlPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgaWQ9InNlbmRfc21zX2FsbF9jdXN0b21lcl9mYWxzZV9pZCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICBTcGVjaWZpYyBDdXN0b21lcgogICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIiB2LWlmPSIhc2VuZF9zbXNfYWxsX2N1c3RvbWVyIj4KICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgIChBZGQgTmV3IEN1c3RvbWVyIENvbnRhY3Qgb3IgU2VhcmNoIEJlbG93IGFuZCBTZWxlY3QpCiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBtYi0zIj4KICAgICAgICAgICAgICA8aW5wdXQgCiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJDdXN0b21lciBOYW1lIiAKICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFkZF9jdXN0b21lcl9uYW1lIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMnJlbTsgbWFyZ2luLXJpZ2h0OiA5cHg7IgogICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHZ1ZS1waG9uZS1udW1iZXItaW5wdXQgCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJhZGRfY3VzdG9tZXJfY29udGFjdF9udW1iZXIiIAogICAgICAgICAgICAgICAgOm5vLXVzZS1icm93c2VyLWxvY2FsZT0idHJ1ZSIKICAgICAgICAgICAgICAgIEB1cGRhdGU9InBob25lTnVtYmVyID0gJGV2ZW50IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L3Z1ZS1waG9uZS1udW1iZXItaW5wdXQ+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgaWQ9ImFsdGVybmF0ZV9wcm9kdWN0X25hbWVfYWRkX2J0biIKICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4gbWwtMiIKICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX2N1c3RvbWVyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIEFERAogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPG11bHRpc2VsZWN0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3BlY2lmaWNfY3VzdG9tZXJfbGlzdCIKICAgICAgICAgICAgICA6b3B0aW9ucz0iY3VzdG9tZXJzX2xpc3QiCiAgICAgICAgICAgICAgaWQ9InNwZWNpZmljX2N1c3RvbWVyX2xpc3RfaWQiCiAgICAgICAgICAgICAgOnNlYXJjaGFibGU9InRydWUiCiAgICAgICAgICAgICAgOmNsb3NlLW9uLXNlbGVjdD0iZmFsc2UiCiAgICAgICAgICAgICAgOm11bHRpcGxlPSJ0cnVlIgogICAgICAgICAgICAgIDp0YWdnYWJsZT0idHJ1ZSIKICAgICAgICAgICAgICB0YWctcG9zaXRpb249InRvcCIKICAgICAgICAgICAgICB0YWctcGxhY2Vob2xkZXI9IkFkZCB0aGlzIGFzIG5ldyBlbWFpbCIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIGN1c3RvbWVyIG51bWJlciIKICAgICAgICAgICAgICA6bWF4LWhlaWdodD0iNDAwIgogICAgICAgICAgICAgIGxhYmVsPSJjdXN0b21lcl9uYW1lIgogICAgICAgICAgICAgIHRyYWNrLWJ5PSJwaG9uZSIKICAgICAgICAgICAgICBvcGVuLWRpcmVjdGlvbj0iYmVsb3ciCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8IS0tIDxzcGFuPnt7IHNlbGVjdGVkX3JvbGUgfX08L3NwYW4+IC0tPgogICAgICAgICAgICA8L211bHRpc2VsZWN0PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgQm9keTwvcD4KICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0icGFkZGluZy1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICA8cD57eyBjdXJyZW50X3RlbXBsYXRlLnRlbXBsYXRlX2JvZHkgfX08L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgVmFyaWFibGVzPC9wPgogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGggc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgVmFyaWFibGVzCiAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICA8dGggc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgVmFsdWVzCiAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgdi1mb3I9Iih2YWx1ZSwgbmFtZSwgaW5kZXgpIGluIGN1cnJlbnRfdGVtcGxhdGUudmFyaWFibGVfZGljdCIKICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgIHt7bmFtZX19CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC04Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiAKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IiAKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjdXJyZW50X3RlbXBsYXRlLnZhcmlhYmxlX2RpY3RbbmFtZV0iCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDsKICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA6dGl0bGU9Im5hbWUgPT0gJ2N1c3RvbWVyX25hbWUnPyAnQ3VzdG9tZXJzIE5hbWUgd2lsbCBiZSBwaWNrZWQgZnJvbSBjdXN0b21lcnMgbGlzdCB3aGlsZSBzZW5kaW5nIFNNUyc6JyciCiAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0ibmFtZSA9PSAnY3VzdG9tZXJfbmFtZSciCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXdyYXAgdGV4dC1yaWdodCBtdC0wIHB5LTAgYm9yZGVyLXRvcC0wIj4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1saW5rIgogICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIENhbmNlbAogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc2F2ZSIKICAgICAgICAgICAgICBAY2xpY2s9InNlbmRfc21zKCkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBTZW5kCiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdgogICAgY2xhc3M9Im1vZGFsIGZhZGUiCiAgICBpZD0icHJldmlld190ZW1wbGF0ZV92aXNpYmxlIgogICAgcm9sZT0iZGlhbG9nIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJwcmV2aWV3X3RlbXBsYXRlX3Zpc2libGUiCiAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgIHN0eWxlPSJ6LWluZGV4OiAyMDAwOyIKICA+CiAgICA8ZGl2CiAgICAgIGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsIgogICAgICByb2xlPSJkb2N1bWVudCIKICAgID4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDxpIHN0eWxlPSdmb250LXNpemU6MjRweDsgcGFkZGluZy1yaWdodDogMTBweDsgcGFkZGluZy10b3A6IDNweDsnIGNsYXNzPSdmYXInPiYjeGYyN2E7PC9pPgogICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSI+CiAgICAgICAgICAgIFNNUyBQcmV2aWV3IAogICAgICAgICAgPC9oNT4KICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgICAgPgogICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGRpdj4KICAgICAgICAgIDxsYWJlbCBmb3I9Im1zZyI+PGI+TWVzc2FnZTwvYj48L2xhYmVsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9InRleHQtYXJlYSIgZGlzYWJsZWQgbmFtZT0ibXNnIiB2LW1vZGVsPSJwcmV2aWV3X3RlbXBsYXRlX2RhdGEiPjwvdGV4dGFyZWE+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdgogICAgY2xhc3M9Im1vZGFsIGZhZGUiCiAgICBpZD0iY2hlY2tiYWxhbmNlIgogICAgcm9sZT0iZGlhbG9nIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJjaGVja2JhbGFuY2UiCiAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICA+CiAgICA8ZGl2CiAgICAgIGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsIgogICAgICByb2xlPSJkb2N1bWVudCIKICAgICAgc3R5bGU9Im1heC13aWR0aDogNjAwcHggIWltcG9ydGFudCIKICAgID4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDwhLS0gPGkgc3R5bGU9J2ZvbnQtc2l6ZToyNHB4OyBwYWRkaW5nLXJpZ2h0OiAxMHB4OyBwYWRkaW5nLXRvcDogM3B4OycgY2xhc3M9J2Zhcic+JiN4ZjI3YTs8L2k+IC0tPgogICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSI+CiAgICAgICAgICAgIFlvdXIgQWRkLW9ucyBCYWxhbmNlIAogICAgICAgICAgPC9oNT4KICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgICAgPgogICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGRpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPHAgdi1zaG93PSJjcmVkaXRzX2JhbGFuY2UgIT0gbnVsbCIKICAgICAgICAgICAgdi1odG1sPSJjcmVkaXRzX2JhbGFuY2UiPiAmbmJzcDsgJm5ic3A7CiAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2Pgo="},null]}