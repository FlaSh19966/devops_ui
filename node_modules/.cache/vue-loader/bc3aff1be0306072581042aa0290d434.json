{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Webhook.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Webhook.vue","mtime":1645594423479},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBhcGlfY2FsbHMgZnJvbSAiQC9wb3J0YWwvYXBpX2NhbGxzIjsKaW1wb3J0IFN3YWwgZnJvbSAic3dlZXRhbGVydDIiOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHBlbmNpbF9zdmc6CiAgICAgICAgJzxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMTUuNTQ2IiBoZWlnaHQ9IjE1LjQ2MSIgdmlld0JveD0iMCAwIDE1LjU0NiAxNS40NjEiPjxkZWZzPjxzdHlsZT4uYXtmaWxsOiM5ZTllOWU7fTwvc3R5bGU+PC9kZWZzPjxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKC03NDcuODg4IC0zNTYuNzY5KSI+PHBhdGggY2xhc3M9ImEiIGQ9Ik03NTkuNDE2LDM1Ni43NjlhMi4zNTgsMi4zNTgsMCwwLDEsMS43NzcuNjYyYy41MzQuNTEzLDEuMDcyLDEuMDI1LDEuNTY3LDEuNTc1YTIuMywyLjMsMCwwLDEtLjA3MSwzLjMyNWMtMi43MzYsMi43Ni01LjQ5NCw1LjUtOC4yMzgsOC4yNTFhMS4zODEsMS4zODEsMCwwLDEtLjc1OC4yODhjLS43MTkuMTc0LTEuNDI5LjM3OS0yLjE0NC41NzItLjkzMi4yNTEtMS44NjIuNS0yLjc5NS43NTEtLjYuMTU4LS45ODktLjIxMy0uODMyLS44MDdxLjY4OS0yLjU5NSwxLjQwNi01LjE4MmExLjE2NCwxLjE2NCwwLDAsMSwuMjg5LS40ODdxNC4wOTEtNC4xMDcsOC4yLTguMkEyLjI2NSwyLjI2NSwwLDAsMSw3NTkuNDE2LDM1Ni43NjlabS0xLjk4OSwyLjk1Ni02LjU0LDYuNTM4LDMuMDI1LDMuMDI0LDYuNTM4LTYuNTM3Wm00LjAyMywyLjE2NWMuMTE4LS4xMzUuMjI1LS4yNjkuMzQzLS4zOTJhMS4xMzQsMS4xMzQsMCwwLDAsMC0xLjczNGMtLjQ2LS40NjYtLjkyNi0uOTI1LTEuMzg4LTEuMzlhMS4xNjYsMS4xNjYsMCwwLDAtLjg2MS0uMzY4Yy0uNTc4LDAtLjg4MS40LTEuMjE0Ljc2Wm0tMTIuMDg0LDguODYzLDMuMi0uODYzLTIuMzM3LTIuMzMxWiIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCkiLz48cGF0aCBjbGFzcz0iYSIgZD0iTTgxMy45NDIsNDIyLjZsLS43ODktLjgsMy44MjEtMy44MTkuNzg0LjhaIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtNTkuNjQ4IC01NS45NDcpIi8+PC9nPjwvc3ZnPicsCiAgICAgIGlzVmlzaWJsZVNlYXJjaENsZWFyOiBmYWxzZSwKICAgICAgaXNFZGl0V2ViaG9vazogZmFsc2UsCiAgICAgIGNvbXBhbnlpZDogIiIsCiAgICAgIGNvbXBhbnluYW1lOiAiIiwKICAgICAgY2hlY2tlZF9saXN0OiBbXSwKICAgICAgc2VhcmNoX25hbWU6ICIiLAogICAgICB3ZWJob29rc19saXN0OiBbXSwKICAgICAgd2ViaG9va3NfbmFtZXNfbGlzdDogW10sCiAgICAgIHdlYmhvb2tfYWxyZWFkeV9leGlzdHM6IGZhbHNlLAogICAgICBwYWdlX25vOiAxLAogICAgICBwZXJfcGFnZTogMTUsCiAgICAgIG51bWJlcl9vZl9yb3dzOiBudWxsLAogICAgICBwYWdlX2FycmF5OiBbXSwKICAgICAgcGFnZW5vOiAiIiwKICAgICAgdG90YWxfcGFnZXM6IG51bGwsCiAgICAgIGN1cnJlbnRfc2VsZWN0ZWRfd2ViaG9vazogW10sCiAgICAgIGN1cnJlbnRfc2VsZWN0ZWRfd2ViaG9va19oaWdobGlnaHQ6ICIiLAogICAgICBzcGlubmVyT246IGZhbHNlLAogICAgICB3ZWJob29rX25hbWU6ICIiLAogICAgICB3ZWJob29rX2lkOiAiIiwKICAgICAgd2ViaG9va191cmw6ICIiLAogICAgICBodHRwX21ldGhvZDogIkdFVCIsCiAgICAgIGh0dHBfbWV0aG9kX3R5cGVzOiBbIkdFVCIsICJQT1NUIl0sCiAgICAgIGhlYWRlcnM6IFtdLAogICAgICBoZWFkZXJfbmFtZXM6IFsKICAgICAgICAiQWNjZXB0IiwKICAgICAgICAiQWNjZXB0LURhdGV0aW1lIiwKICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIiwKICAgICAgICAiQ29va2llIiwKICAgICAgICAiRnJvbSIsCiAgICAgICAgIkF1dGhvcml6YXRpb24iLAogICAgICAgICJXYXJuaW5nIiwKICAgICAgICAiVXNlci1BZ2VudCIsCiAgICAgICAgIkhvc3QiLAogICAgICAgICJSZWZlcmVyIiwKICAgICAgICAiUHJhZ21hIiwKICAgICAgXSwKICAgICAgYXV0aF91c2VybmFtZTogIiIsCiAgICAgIGF1dGhfcGFzc3dvcmQ6ICIiLAogICAgICBub193ZWJob29rc19wcmVzZW50OiBmYWxzZSwKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgd2ViaG9va19uYW1lKHZhbCl7CiAgICAgIHRoaXMud2ViaG9va19uYW1lID0gdmFsLnJlcGxhY2UoL1teYS16QS1aMC05XyBdL2csICIiKTsKICAgIH0sCiAgICBzZWFyY2hfbmFtZSgpIHsKICAgICAgaWYgKHRoaXMuc2VhcmNoX25hbWUgPT09ICIiKSB7CiAgICAgICAgdGhpcy5sb2FkX3dlYmhvb2soKTsKICAgICAgICB0aGlzLmlzVmlzaWJsZVNlYXJjaENsZWFyID0gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZWFyY2hfbmFtZSAhPT0gIiIpIHsKICAgICAgICB0aGlzLmlzVmlzaWJsZVNlYXJjaENsZWFyID0gdHJ1ZTsKICAgICAgfQogICAgfSwKICB9LAogIGNyZWF0ZWQoKSB7CiAgICBpZiAodGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnJvbGUgPT0gIlN1cGVyQWRtaW4iKSB7CiAgICAgIGlmICh0aGlzLiRzZXNzaW9uLmhhcygiQ29tcGFueUlkIikpIHsKICAgICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJDb21wYW55SWQiKTsKICAgICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIkNvbXBhbnlOYW1lIik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb21wYW55aWQgPSB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZDsKICAgICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgICAgICB0b2FzdHIud2FybmluZygiUGxlYXNlIHNlbGVjdCBhIGNvbXBhbnkgbmFtZSBmcm9tIHRoZSBkcm9wZG93biIpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNvbXBhbnlpZCA9IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkOwogICAgICB0aGlzLmNvbXBhbnluYW1lID0gdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZTsKICAgIH0KICAgIHRoaXMubG9hZF93ZWJob29rKCk7CiAgfSwKICBtb3VudGVkKCkgewogICAgdmFyIHZtID0gdGhpczsKICAgICQoIiNzZWxlY3RhbGwiKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgIGlmICgkKHRoaXMpLmlzKCI6Y2hlY2tlZCIpKSB7CiAgICAgICAgLy8gJCgnZGl2OmlucHV0JykucHJvcCgnY2hlY2tlZCcsdHJ1ZSk7CiAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdm0uY2hlY2tlZF9saXN0ID0gW107CiAgICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICB9CiAgICB9KTsKICAgICQoJ2FbZGF0YS10YXJnZXQ9IiN3ZWJob29rbW9kYWwiXScpLm9uKCdjbGljaycgLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmKHZtLmlzRWRpdFdlYmhvb2sgPT0gdHJ1ZSl7CiAgICAgICAgdm0udmVyaWZ5X2NoYW5nZXMoKTsKICAgICAgfWVsc2V7CiAgICAgICAgdm0uZW1wdHlfdmFyaWFibGUoKTsKICAgICAgICAkKCIjd2ViaG9va21vZGFsIikubW9kYWwoJ3Nob3cnKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBjb21wdXRlZDp7CiAgICBjdXJyZW50X3NlbGVjdGVkX3dlYmhvb2tfaGVhZGVycygpewogICAgICBpZih0eXBlb2YodGhpcy5jdXJyZW50X3NlbGVjdGVkX3dlYmhvb2spID09PSAnb2JqZWN0Jyl7CiAgICAgICAgaWYoT2JqZWN0LmtleXModGhpcy5jdXJyZW50X3NlbGVjdGVkX3dlYmhvb2spLmxlbmd0aCA+MCl7CiAgICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5jdXJyZW50X3NlbGVjdGVkX3dlYmhvb2suaGVhZGVycykubGVuZ3RoID4wKXsKICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgIH0KICAgICAgICB9ZWxzZXsKICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgYmVmb3JlUm91dGVMZWF2ZSh0bywgZnJvbSwgbmV4dCkgewogICAgaWYgKHRoaXMuaXNFZGl0V2ViaG9vaykgewogICAgICB0aGlzLnZlcmlmeV9jaGFuZ2VzKCk7CiAgICB9IGVsc2UgewogICAgICBuZXh0KCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICB3ZWJob29rX25hbWVfY2hlY2tfc3BlY2lhbF9jaGFyYWN0ZXJzKGUpewogICAgICBpZiAoL15bXmEtekEtWjAtOV8gXSokLy50ZXN0KGUua2V5KSkgewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgfQogICAgfSwKICAgIHZlcmlmeV9jaGFuZ2VzKCkgewogICAgICBTd2FsKHsKICAgICAgICB0aXRsZTogIkFyZSB5b3Ugc3VyZT8iLAogICAgICAgIHRleHQ6ICJJZiB5b3UgaGF2ZSBtYWRlIGFueSBjaGFuZ2VzIHRvIHRoZSBzZWxlY3RlZCBXZWJob29rIHBsZWFzZSBzYXZlIHRoZW0gZmlyc3QsIGVsc2UgdGhleSB3aWxsIGRpc2NhcmRlZCEiLAogICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAiI2QzMyIsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICJTYXZlIiwKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAiQ2FuY2VsIiwKICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7CiAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgLy8gY29uc29sZS5sb2coImlmIHRydWUiKTsKICAgICAgICAgIHRoaXMuc2F2ZV93ZWJob29rKCk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZygiZWxzZSBmYWxzZSIpOwogICAgICAgICAgdGhpcy5pc0VkaXRXZWJob29rID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBjaGVja193ZWJob29rX25hbWUoKSB7CiAgICAgIGlmICh0aGlzLndlYmhvb2tzX25hbWVzX2xpc3QuaW5jbHVkZXModGhpcy53ZWJob29rX25hbWUpKXsKICAgICAgICB0aGlzLndlYmhvb2tfYWxyZWFkeV9leGlzdHMgPSB0cnVlOwogICAgICB9ZWxzZSB7CiAgICAgICAgdGhpcy53ZWJob29rX2FscmVhZHlfZXhpc3RzID0gZmFsc2U7CiAgICAgIH0KICAgICAgYXhpb3MKICAgICAgICAucG9zdCgKICAgICAgICAgIGFwaV9jYWxscy5mb3JtX2F1dG9tYXRpb25fd2ViaG9va19kZXRhaWxzKCksCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55bmFtZSwKICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgIGVtYWlsOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuZW1haWwsCiAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICBzdWJzY3JpcHRpb246IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5zdWJzY3JpcHRpb24sCiAgICAgICAgICAgIGlzX2V4aXN0OiB0cnVlLAogICAgICAgICAgICB3ZWJob29rX25hbWU6IHRoaXMud2ViaG9va19uYW1lLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgICkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PSAiTm90IEV4aXN0cyIpIHsKICAgICAgICAgICAgdGhpcy53ZWJob29rX2FscmVhZHlfZXhpc3RzID0gZmFsc2U7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbnRlcl93ZWJob29rX2lkIikuc3R5bGUuYm9yZGVyID0gbnVsbDsKICAgICAgICAgICAgaWYodGhpcy53ZWJob29rX25hbWUgIT0gIiIpewogICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbnRlcl93ZWJob29rX2lkIikuc3R5bGUuYm9yZGVyID0KICAgICAgICAgICAgICAiMXB4IHNvbGlkICMwMGYwMDAiOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJBbHJlYWR5IEV4aXN0cyIpIHsKICAgICAgICAgICAgdGhpcy53ZWJob29rX2FscmVhZHlfZXhpc3RzID0gdHJ1ZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVudGVyX3dlYmhvb2tfaWQiKS5zdHlsZS5ib3JkZXIgPQogICAgICAgICAgICAiMXB4IHNvbGlkIHJlZCI7CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgIGlmICgKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDQwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICkgewogICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCJTZXNzaW9uX0V4cGlyZWQiLCBlLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIGNoZWNrX3dlYmhvb2tfbmFtZV9lZGl0KCkgewogICAgICBheGlvcwogICAgICAgIC5wb3N0KAogICAgICAgICAgYXBpX2NhbGxzLmZvcm1fYXV0b21hdGlvbl93ZWJob29rX2RldGFpbHMoKSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgZW1haWw6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5lbWFpbCwKICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnN1YnNjcmlwdGlvbiwKICAgICAgICAgICAgaXNfZXhpc3Q6IHRydWUsCiAgICAgICAgICAgIHdlYmhvb2tfbmFtZTogdGhpcy53ZWJob29rX25hbWUsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9CiAgICAgICAgKQogICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJOb3QgRXhpc3RzIikgewogICAgICAgICAgICB0aGlzLndlYmhvb2tfYWxyZWFkeV9leGlzdHMgPSBmYWxzZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVudGVyX3dlYmhvb2tfZWRpdF9pZCIpLnN0eWxlLmJvcmRlciA9IG51bGw7CiAgICAgICAgICAgIGlmKHRoaXMud2ViaG9va19uYW1lICE9ICIiKXsKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZW50ZXJfd2ViaG9va19lZGl0X2lkIikuc3R5bGUuYm9yZGVyID0KICAgICAgICAgICAgICAiMXB4IHNvbGlkICMwMGYwMDAiOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09ICJBbHJlYWR5IEV4aXN0cyIpIHsKICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudF9zZWxlY3RlZF93ZWJob29rLm5hbWUgPT0gdGhpcy53ZWJob29rX25hbWUpewogICAgICAgICAgICAgIHRoaXMud2ViaG9va19hbHJlYWR5X2V4aXN0cyA9IGZhbHNlOwogICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbnRlcl93ZWJob29rX2VkaXRfaWQiKS5zdHlsZS5ib3JkZXIgPW51bGw7ICAKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLndlYmhvb2tfYWxyZWFkeV9leGlzdHMgPSB0cnVlOwogICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbnRlcl93ZWJob29rX2VkaXRfaWQiKS5zdHlsZS5ib3JkZXIgPQogICAgICAgICAgICAgICIxcHggc29saWQgcmVkIjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICApIHsKICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0sCiAgICBjbGVhcl9zZWFyY2hfbmFtZSgpIHsKICAgICAgdGhpcy5zZWFyY2hfbmFtZSA9ICIiOwogICAgfSwKICAgIGNhbGxzZWFyY2goKSB7CiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMykgewogICAgICAgIHRoaXMuc2VhcmNoX3dlYmhvb2soKTsKICAgICAgfQogICAgfSwKICAgIHNlYXJjaF93ZWJob29rKCkgewogICAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSAhPSAiIikgewogICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICBheGlvcwogICAgICAgICAgLnBvc3QoCiAgICAgICAgICAgIGFwaV9jYWxscy5mb3JtX2F1dG9tYXRpb25fd2ViaG9va19kZXRhaWxzKCksCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlpZCwKICAgICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuY29tcGFueW5hbWUsCiAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogIlBsYXRpbnVtIiwKICAgICAgICAgICAgICBpc19zZWFyY2g6IHRydWUsCiAgICAgICAgICAgICAgc2VhcmNoX3Rlcm06IHRoaXMuc2VhcmNoX25hbWUsCiAgICAgICAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgICAgICAgcGFnZV9ubzogMSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0KICAgICAgICAgICkKICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT09ICJXZWJob29rIERldGFpbHMgUmVjZWl2ZWQgU3VjY2Vzc2Z1bGx5IikgewogICAgICAgICAgICAgIHRoaXMud2ViaG9va3NfbGlzdCA9IFtdOwogICAgICAgICAgICAgIHRoaXMubnVtYmVyX29mX3Jvd3MgPSByZXNwb25zZS5kYXRhLmNvdW50OwogICAgICAgICAgICAgIHRoaXMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwodGhpcy5udW1iZXJfb2Zfcm93cyAvIHRoaXMucGVyX3BhZ2UpOwogICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVzcG9uc2UuZGF0YS53ZWJob29rWzBdLndlYmhvb2spIHsKICAgICAgICAgICAgICAgIHRoaXMud2ViaG9va3NfbGlzdC5wdXNoKHJlc3BvbnNlLmRhdGEud2ViaG9va1swXS53ZWJob29rW2ldKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGhpcy5zaG93X3dlYmhvb2soMCk7CiAgICAgICAgICAgICAgdGhpcy5zZXRwYWdpbmF0aW9uKHRoaXMucGFnZV9ubyk7CiAgICAgICAgICAgICAgdGhpcy5ub193ZWJob29rc19wcmVzZW50ID0gZmFsc2U7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT09ICJTZWFyY2hlZCB3ZWJob29rIG5vdCBmb3VuZCIpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJTZWFyY2hlZCB3ZWJob29rIG5vdCBmb3VuZCIsCiAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHRleHQ6ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLAogICAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgdGltZXI6IDIwMDAsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgdGhpcy5sb2FkX2VudGl0eSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiU2VhcmNoIGZpZWxkIGNhbm5vdCBiZSBlbXB0eSIsCiAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWVuZCIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICB0aW1lcjogMjUwMCwKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGVkaXRfd2ViaG9va19kZXRhaWxzKCkgewogICAgICBpZiAoIXRoaXMuaXNFZGl0V2ViaG9vaykgewogICAgICAgIHRoaXMud2ViaG9va19uYW1lID0gdGhpcy5jdXJyZW50X3NlbGVjdGVkX3dlYmhvb2submFtZTsKICAgICAgICB0aGlzLndlYmhvb2tfaWQgPSB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfd2ViaG9vay5pZDsKICAgICAgICB0aGlzLndlYmhvb2tfdXJsID0gdGhpcy5jdXJyZW50X3NlbGVjdGVkX3dlYmhvb2sudXJsOwogICAgICAgIHRoaXMuaHR0cF9tZXRob2QgPSB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfd2ViaG9vay5odHRwX21ldGhvZDsKICAgICAgICB0aGlzLmhlYWRlcnMgPSB0aGlzLmN1cnJlbnRfc2VsZWN0ZWRfd2ViaG9vay5oZWFkZXJzOwogICAgICAgIHRoaXMuYXV0aF91c2VybmFtZSA9IHRoaXMuY3VycmVudF9zZWxlY3RlZF93ZWJob29rLmF1dGhfdXNlcm5hbWU7CiAgICAgICAgdGhpcy5hdXRoX3Bhc3N3b3JkID0gdGhpcy5jdXJyZW50X3NlbGVjdGVkX3dlYmhvb2suYXV0aF9wYXNzd29yZDsKICAgICAgICB0aGlzLmlzRWRpdFdlYmhvb2sgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuaXNFZGl0V2ViaG9vayA9IGZhbHNlOwogICAgICAgIHRoaXMuZW1wdHlfdmFyaWFibGUoKTsKICAgICAgICB0aGlzLmxvYWRfd2ViaG9vaygpOwogICAgICB9CiAgICB9LAogICAgY2hlY2tfY3VycmVudF93ZWJob29rKGluZGV4KSB7CiAgICAgIHZhciByZXR1cm5fdmFyID0gIiI7CiAgICAgIGlmICgKICAgICAgICB0aGlzLndlYmhvb2tzX2xpc3RbaW5kZXhdLmlkID09IHRoaXMuY3VycmVudF9zZWxlY3RlZF93ZWJob29rX2hpZ2hsaWdodAogICAgICApIHsKICAgICAgICByZXR1cm5fdmFyICs9ICJjdXJyZW50LWFjdGl2ZS13ZWJob29rIjsKICAgICAgfQogICAgICByZXR1cm4gcmV0dXJuX3ZhcjsKICAgIH0sCiAgICBzaG93X3dlYmhvb2soaW5kZXgpIHsKICAgICAgdGhpcy5pc0VkaXRXZWJob29rID0gZmFsc2U7CiAgICAgIHRoaXMuY3VycmVudF9zZWxlY3RlZF93ZWJob29rID0gdGhpcy53ZWJob29rc19saXN0W2luZGV4XTsKICAgICAgdGhpcy5jdXJyZW50X3NlbGVjdGVkX3dlYmhvb2tfaGlnaGxpZ2h0ID0gdGhpcy53ZWJob29rc19saXN0W2luZGV4XS5pZDsKICAgIH0sCiAgICBsb2FkX3dlYmhvb2soKSB7CiAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICBheGlvcwogICAgICAgIC5wb3N0KGFwaV9jYWxscy5mb3JtX2F1dG9tYXRpb25fd2ViaG9va19kZXRhaWxzKCksIHsKICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueWlkLAogICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgaXNfZ2V0OiB0cnVlLAogICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgfSwKICAgICAgICB9CiAgICAgICAgKQogICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgIHRoaXMud2ViaG9va3NfbGlzdCA9IFtdOwogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09PSAiV2ViaG9vayBEZXRhaWxzIFJlY2VpdmVkIFN1Y2Nlc3NmdWxseSIpIHsKICAgICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEuY291bnQ7CiAgICAgICAgICAgIHRoaXMudG90YWxfcGFnZXMgPSBNYXRoLmNlaWwodGhpcy5udW1iZXJfb2Zfcm93cyAvIHRoaXMucGVyX3BhZ2UpOwogICAgICAgICAgICAvLyB0aGlzLndlYmhvb2tzX2xpc3QgPSByZXNwb25zZS5kYXRhLndlYmhvb2tbMF0ud2ViaG9vazsKICAgICAgICAgICAgZm9yICh2YXIgaSBpbiByZXNwb25zZS5kYXRhLndlYmhvb2tbMF0ud2ViaG9vaykgewogICAgICAgICAgICAgIHRoaXMud2ViaG9va3NfbGlzdC5wdXNoKHJlc3BvbnNlLmRhdGEud2ViaG9va1swXS53ZWJob29rW2ldKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLndlYmhvb2tzX25hbWVzX2xpc3QgPSByZXNwb25zZS5kYXRhLndlYmhvb2tfbmFtZXM7CiAgICAgICAgICAgIHRoaXMuc2hvd193ZWJob29rKDApOwogICAgICAgICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgICAgICAgICAgdGhpcy5ub193ZWJob29rc19wcmVzZW50ID0gZmFsc2U7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09PSAiV2ViaG9vayBEZXRhaWxzIERvZXMgbm90IEV4aXN0cyIpIHsKICAgICAgICAgICAgdGhpcy5ub193ZWJob29rc19wcmVzZW50ID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy53ZWJob29rc19saXN0ID0gW10KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFN3YWwoewogICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgdGV4dDogIkludGVybmFsIFNlcnZlciBFcnJvciIsCiAgICAgICAgICAgICAgdGltZXI6IDIwMDAsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0aGlzLmxvYWRfd2ViaG9vaygpOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICApIHsKICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0sCiAgICBjcmVhdGVfVVVJRCgpIHsKICAgICAgdmFyIGR0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAgIHZhciB1dWlkID0gInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCIucmVwbGFjZSgKICAgICAgICAvW3h5XS9nLAogICAgICAgIGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICB2YXIgciA9IChkdCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7CiAgICAgICAgICBkdCA9IE1hdGguZmxvb3IoZHQgLyAxNik7CiAgICAgICAgICByZXR1cm4gKGMgPT0gIngiID8gciA6IChyICYgMHgzKSB8IDB4OCkudG9TdHJpbmcoMTYpOwogICAgICAgIH0KICAgICAgKTsKICAgICAgcmV0dXJuIHV1aWQ7CiAgICB9LAogICAgYWRkX3RvX2hlYWRlcnNfbGlzdChmdW5jLCBpbmRleCkgewogICAgICBpZiAoZnVuYyA9PSAiYWRkIikgewogICAgICAgIHRoaXMuaGVhZGVycy5wdXNoKHsKICAgICAgICAgIG5hbWU6ICIiLAogICAgICAgICAgdmFsdWU6ICIiLAogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKGZ1bmMgPT0gInJlbW92ZSIpIHsKICAgICAgICB0aGlzLmhlYWRlcnMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgfQogICAgfSwKICAgIGRlbGV0ZV9zZWxlY3RlZCgpIHsKICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICBpZiAodGhpcy5jaGVja2VkX2xpc3QubGVuZ3RoID4gMCkgewogICAgICAgIGF4aW9zCiAgICAgICAgICAucG9zdChhcGlfY2FsbHMuZm9ybV9hdXRvbWF0aW9uX3dlYmhvb2tfZGV0YWlscygpLCB7CiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgIGlzX2RlbGV0ZTogdHJ1ZSwKICAgICAgICAgICAgd2ViaG9va19pZDogdGhpcy5jaGVja2VkX2xpc3QsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgIH0sCiAgICAgICAgfQogICAgICAgICkKICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5NU0cgPT09ICJRdWVyeSBFeGVjdXRlZCBTdWNjZXNzZnVsbHkiKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICB0ZXh0OiAiV2ViaG9vayBkZWxldGVkIHN1Y2Nlc3NmdWxseSIsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PT0gIkRCIE9QRVJBVElPTiBVTlNVQ0NFU1NGVUwiKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgdGV4dDogIkludGVybmFsIFNlcnZlciBlcnJvciIsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLk1TRyA9PT0gIk5vIFdlYmhvb2sgaW4gZGF0YWJhc2UiKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgdGV4dDogIkludGVybmFsIFNlcnZlciBlcnJvciIsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmxvYWRfd2ViaG9vaygpOwogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICkgewogICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgIFN3YWwoewogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgdGV4dDogIlNlbGVjdCBhdGxlYXN0IG9uZSB3ZWJob29rIHRvIGRlbGV0ZSIsCiAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIHNhdmVfd2ViaG9vaygpIHsKICAgICAgLy8gTmVlZCB0byBjaGFuZ2UgbG9naWMgaWYgTXVsdGlwbGUgV2ViaG9vayBkZXRhaWxzIGFyZSBhY2NlcHRlZAogICAgICBpZiAodGhpcy53ZWJob29rX2lkID09ICIiKSB7CiAgICAgICAgdGhpcy53ZWJob29rX2lkID0gdGhpcy5jcmVhdGVfVVVJRCgpOwogICAgICB9CiAgICAgIGlmICh0aGlzLndlYmhvb2tfbmFtZSA9PSAiIiB8fCB0aGlzLndlYmhvb2tfYWxyZWFkeV9leGlzdHMpIHsKICAgICAgICBTd2FsKHsKICAgICAgICAgIHRleHQ6ICJBZGQgYSB1bmlxdWUgd2ViaG9vayBuYW1lIiwKICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDQwMDAsCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICh0aGlzLndlYmhvb2tfdXJsID09ICIiKSB7CiAgICAgICAgU3dhbCh7CiAgICAgICAgICB0ZXh0OiAiQWRkIGNvcnJlY3QgVVJMIiwKICAgICAgICAgIHR5cGU6ICJ3YXJuaW5nIiwKICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogInRvcC1lbmQiLAogICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgdGltZXI6IDQwMDAsCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICB2YXIgd2ViaG9va19kZXRhaWxzID0ge307CiAgICAgICAgd2ViaG9va19kZXRhaWxzLmlkID0gdGhpcy53ZWJob29rX2lkOwogICAgICAgIHdlYmhvb2tfZGV0YWlscy5uYW1lID0gdGhpcy53ZWJob29rX25hbWUucmVwbGFjZSgvXHMrL2csICJfIikudG9Mb2NhbGVMb3dlckNhc2UoKTsKICAgICAgICB3ZWJob29rX2RldGFpbHMudXJsID0gdGhpcy53ZWJob29rX3VybDsKICAgICAgICB3ZWJob29rX2RldGFpbHMuaHR0cF9tZXRob2QgPSB0aGlzLmh0dHBfbWV0aG9kOwogICAgICAgIHdlYmhvb2tfZGV0YWlscy5oZWFkZXJzID0gdGhpcy5oZWFkZXJzOwogICAgICAgIHdlYmhvb2tfZGV0YWlscy5hdXRoX3VzZXJuYW1lID0gdGhpcy5hdXRoX3VzZXJuYW1lOwogICAgICAgIHdlYmhvb2tfZGV0YWlscy5hdXRoX3Bhc3N3b3JkID0gdGhpcy5hdXRoX3Bhc3N3b3JkOwogICAgICAgIGF4aW9zCiAgICAgICAgICAucG9zdChhcGlfY2FsbHMuZm9ybV9hdXRvbWF0aW9uX3dlYmhvb2tfZGV0YWlscygpLCB7CiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICAgICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgICAgICAgIGlzX3NhdmU6IHRydWUsCiAgICAgICAgICAgIHdlYmhvb2tfZGV0YWlsczogd2ViaG9va19kZXRhaWxzLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAsCiAgICAgICAgICB9LAogICAgICAgIH0KICAgICAgICApCiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09PSAiV2ViaG9vayBEZXRhaWxzIFNhdmVkIFN1Y2Nlc3NmdWxseSIpIHsKICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgIHRleHQ6ICJXZWJob29rIGRldGFpbHMgc2F2ZWQgc3VjY2Vzc2Z1bGx5IiwKICAgICAgICAgICAgICAgIHRpbWVyOiAzMDAwLAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmKCF0aGlzLmlzRWRpdFdlYmhvb2spewogICAgICAgICAgICAgICAgJCgiI3dlYmhvb2ttb2RhbCIpLm1vZGFsKCJoaWRlIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMubG9hZF93ZWJob29rKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoCiAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5NU0cgPT09ICJXZWJob29rIERldGFpbHMgbm90IFNhdmVkIFN1Y2Nlc3NmdWxseSIKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgU3dhbCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgdGV4dDogIkludGVybmFsIFNlcnZlciBlcnJvciIsCiAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICAgICkgewogICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgcGFnZV9yZXF1aXJlKHBhZ2UpIHsKICAgICAgJCgiaW5wdXQ6Y2hlY2tib3giKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICBpZiAocGFnZSA9PSAwIHx8IHBhZ2UgPT0gdGhpcy50b3RhbF9wYWdlcyArIDEpIHsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5zZWFyY2hfbmFtZSA9PSAiIikgewogICAgICAgICAgaWYgKHBhZ2UgPT0gIi4uLnMiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgoMSArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSBpZiAocGFnZSA9PSAiLi4ubCIpIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gTWF0aC5jZWlsKCh0aGlzLnRvdGFsX3BhZ2VzICsgdGhpcy5wYWdlX25vKSAvIDIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5wYWdlX25vID0gcGFnZTsKICAgICAgICAgIH0KICAgICAgICAgICQoImlucHV0OmNoZWNrYm94IikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgICAgIGF4aW9zCiAgICAgICAgICAgIC5wb3N0KAogICAgICAgICAgICAgIGFwaV9jYWxscy5mb3JtX2F1dG9tYXRpb25fd2ViaG9va19kZXRhaWxzKCksCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnluYW1lLAogICAgICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55aWQsCiAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgICAgbGljZW5zZV9rZXk6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5saWNlbnNlX2tleSwKICAgICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikudG9rZW5zLAogICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuc3Vic2NyaXB0aW9uLAogICAgICAgICAgICAgICAgaXNfZ2V0OiB0cnVlLAogICAgICAgICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgICAgICAgcGVyX3BhZ2U6IHRoaXMucGVyX3BhZ2UsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICkKICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy5zcGlubmVyT24gPSBmYWxzZTsKICAgICAgICAgICAgICB0aGlzLndlYmhvb2tzX2xpc3QgPSBbXTsKICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLk1TRyA9PT0gIldlYmhvb2sgRGV0YWlscyBSZWNlaXZlZCBTdWNjZXNzZnVsbHkiCiAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICB0aGlzLndlYmhvb2tzX2xpc3QgPSBbXTsKICAgICAgICAgICAgICAgIHRoaXMubnVtYmVyX29mX3Jvd3MgPSByZXNwb25zZS5kYXRhLmNvdW50OwogICAgICAgICAgICAgICAgdGhpcy50b3RhbF9wYWdlcyA9IE1hdGguY2VpbCgKICAgICAgICAgICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyAvIHRoaXMucGVyX3BhZ2UKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIHJlc3BvbnNlLmRhdGEud2ViaG9va1swXS53ZWJob29rKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMud2ViaG9va3NfbGlzdC5wdXNoKHJlc3BvbnNlLmRhdGEud2ViaG9va1swXS53ZWJob29rW2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuc2hvd193ZWJob29rKDApOwogICAgICAgICAgICAgICAgdGhpcy53ZWJob29rc19uYW1lc19saXN0ID0gcmVzcG9uc2UuZGF0YS53ZWJob29rOwogICAgICAgICAgICAgICAgdGhpcy5zZXRwYWdpbmF0aW9uKHRoaXMucGFnZV9ubyk7CiAgICAgICAgICAgICAgICB0aGlzLm5vX3dlYmhvb2tzX3ByZXNlbnQgPSBmYWxzZTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKAogICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5NU0cgPT09ICJXZWJob29rIERldGFpbHMgRG9lcyBub3QgRXhpc3RzIgogICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgLy8gYWRkIHN3YWwgaGVyZQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgICAgdGV4dDogIkludGVybmFsIFNlcnZlciBFcnJvciIsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLmxvYWRfd2ViaG9vaygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICBpZiAodGhpcy5wYWdlbm8gPT0gIi4uLnMiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgoMSArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYWdlbm8gPT0gIi4uLmwiKSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IE1hdGguY2VpbCgodGhpcy50b3RhbF9wYWdlcyArIHRoaXMucGFnZV9ubykgLyAyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMucGFnZV9ubyA9IHRoaXMucGFnZW5vOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5zcGlubmVyT24gPSB0cnVlOwogICAgICAgICAgYXhpb3MKICAgICAgICAgICAgLnBvc3QoCiAgICAgICAgICAgICAgYXBpX2NhbGxzLmZvcm1fYXV0b21hdGlvbl93ZWJob29rX2RldGFpbHMoKSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb21wYW55X2lkOiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikuY29tcGFueV9pZCwKICAgICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgICAgIGxpY2Vuc2Vfa2V5OiB0aGlzLiRzZXNzaW9uLmdldCgiVXNlckluZm9ybWF0aW9uIikubGljZW5zZV9rZXksCiAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICAgICAgdG9rZW46IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS50b2tlbnMsCiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb246ICJQbGF0aW51bSIsCiAgICAgICAgICAgICAgICBpc19zZWFyY2g6IHRydWUsCiAgICAgICAgICAgICAgICBzZWFyY2hfdGVybTogdGhpcy5zZWFyY2hfbmFtZSwKICAgICAgICAgICAgICAgIHBlcl9wYWdlOiB0aGlzLnBlcl9wYWdlLAogICAgICAgICAgICAgICAgcGFnZV9ubzogdGhpcy5wYWdlX25vLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YCwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfQogICAgICAgICAgICApCiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICAgICAgdGhpcy53ZWJob29rc19saXN0ID0gW107CiAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5NU0cgPT09ICJXZWJob29rIERldGFpbHMgUmVjZWl2ZWQgU3VjY2Vzc2Z1bGx5IgogICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgdGhpcy5udW1iZXJfb2Zfcm93cyA9IHJlc3BvbnNlLmRhdGEuY291bnQ7CiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsX3BhZ2VzID0gTWF0aC5jZWlsKAogICAgICAgICAgICAgICAgICB0aGlzLm51bWJlcl9vZl9yb3dzIC8gdGhpcy5wZXJfcGFnZQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVzcG9uc2UuZGF0YS53ZWJob29rWzBdLndlYmhvb2spIHsKICAgICAgICAgICAgICAgICAgdGhpcy53ZWJob29rc19saXN0LnB1c2gocmVzcG9uc2UuZGF0YS53ZWJob29rWzBdLndlYmhvb2tbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5zaG93X3dlYmhvb2soMCk7CiAgICAgICAgICAgICAgICB0aGlzLndlYmhvb2tzX25hbWVzX2xpc3QgPSByZXNwb25zZS5kYXRhLndlYmhvb2s7CiAgICAgICAgICAgICAgICB0aGlzLnNldHBhZ2luYXRpb24odGhpcy5wYWdlX25vKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuTVNHID09PSAiU2VhcmNoZWQgd2ViaG9vayBub3QgZm91bmQiKSB7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgICAgICAgICB0ZXh0OiAiU2VhcmNoZWQgd2ViaG9vayBub3QgZm91bmQiLAogICAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtZW5kIiwKICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgICB0aW1lcjogMzAwMCwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgICAgdGV4dDogIkludGVybmFsIFNlcnZlciBFcnJvciIsCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAyMDAwLAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLmxvYWRfd2ViaG9vaygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQxMCB8fAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHNldHBhZ2luYXRpb24ocGFnZV9ubykgewogICAgICB0aGlzLnBhZ2VfYXJyYXkgPSBbXTsKICAgICAgaWYgKHRoaXMudG90YWxfcGFnZXMgPD0gNykgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50b3RhbF9wYWdlczsgaSsrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChpICsgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHBhZ2Vfbm8gPT0gMSkgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChpICsgMSk7CiAgICAgICAgfQogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA9PSB0aGlzLnRvdGFsX3BhZ2VzKSB7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goMSk7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2goIi4uLnMiKTsKICAgICAgICBmb3IgKGxldCBpID0gdGhpcy50b3RhbF9wYWdlcyAtIDQ7IGkgPCB0aGlzLnRvdGFsX3BhZ2VzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkgKyAxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA8PSA0KSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWdlX25vICsgMzsgaSsrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChpICsgMSk7CiAgICAgICAgfQogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5sIik7CiAgICAgICAgdGhpcy5wYWdlX2FycmF5LnB1c2godGhpcy50b3RhbF9wYWdlcyk7CiAgICAgIH0gZWxzZSBpZiAocGFnZV9ubyA+PSB0aGlzLnRvdGFsX3BhZ2VzIC0gNCkgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CiAgICAgICAgZm9yIChsZXQgaSA9IHBhZ2Vfbm8gLSA0OyBpIDwgdGhpcy50b3RhbF9wYWdlczsgaSsrKSB7CiAgICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaChpICsgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKDEpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKCIuLi5zIik7CiAgICAgICAgZm9yIChsZXQgaSA9IHBhZ2Vfbm8gLSAzOyBpIDw9IHBhZ2Vfbm8gKyAzOyBpKyspIHsKICAgICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKGkpOwogICAgICAgIH0KICAgICAgICB0aGlzLnBhZ2VfYXJyYXkucHVzaCgiLi4ubCIpOwogICAgICAgIHRoaXMucGFnZV9hcnJheS5wdXNoKHRoaXMudG90YWxfcGFnZXMpOwogICAgICB9CiAgICB9LAogICAgcGFnaW5hdGlvbl9jbGFzcyhpbmRleCkgewogICAgICBpZiAoaW5kZXggPT0gdGhpcy5wYWdlX25vKSB7CiAgICAgICAgcmV0dXJuICIgYWN0aXZlIjsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gIiI7CiAgICAgIH0KICAgIH0sCiAgICBzZWxlY3RlZF93ZWJob29rKHdlYmhvb2tfaWQpIHsKICAgICAgaWYgKHdlYmhvb2tfaWQgPT0gImFsbCIpIHsKICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IFtdOwogICAgICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCkgewogICAgICAgICAgdmFyIHRlbXAgPSBbXTsKICAgICAgICAgIHRlbXAgPSB0aGlzLndlYmhvb2tzX2xpc3QubWFwKChpdGVtKSA9PiB7CiAgICAgICAgICAgIHJldHVybiBpdGVtLmlkOwogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IHRlbXA7CiAgICAgICAgICAkKCJpbnB1dDpjaGVja2JveCIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hlY2tlZF9saXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICQoIiN3ZWJob29rX2NoZWNrYm94XyIgKyBbaV0pLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgICAgJCgiI3NlbGVjdGFsbCIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKCFldmVudC50YXJnZXQuY2hlY2tlZCkgewogICAgICAgICAgdGhpcy5jaGVja2VkX2xpc3QgPSBbXTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkID09IHRydWUpIHsKICAgICAgICAgIGxldCB2YWxfaW5kZXggPSB0aGlzLmNoZWNrZWRfbGlzdC5maWx0ZXIoKHdlYmhvb2spID0+IHsKICAgICAgICAgICAgcmV0dXJuIHdlYmhvb2sud2ViaG9va19pZCA9PSB3ZWJob29rX2lkOwogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAodmFsX2luZGV4Lmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgIHRoaXMuY2hlY2tlZF9saXN0LnB1c2god2ViaG9va19pZCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCA9PSBmYWxzZSkgewogICAgICAgICAgdmFyIHNlbGVjdGFsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzZWxlY3RhbGwiKTsKICAgICAgICAgIGlmIChzZWxlY3RhbGwuY2hlY2tlZCA9PSB0cnVlKSB7CiAgICAgICAgICAgIHNlbGVjdGFsbC5jaGVja2VkID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgdGVtcCA9IHRoaXMuY2hlY2tlZF9saXN0LmZpbHRlcigod2ViaG9vaykgPT4gewogICAgICAgICAgICByZXR1cm4gd2ViaG9vayAhPSB3ZWJob29rX2lkOwogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLmNoZWNrZWRfbGlzdCA9IHRlbXA7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZW1wdHlfdmFyaWFibGUoKSB7CiAgICAgIGlmKHRoaXMuaXNFZGl0V2ViaG9vayl7CiAgICAgICAgdGhpcy5lZGl0X3dlYmhvb2tfZGV0YWlscygpOwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbnRlcl93ZWJob29rX2VkaXRfaWQiKS5zdHlsZS5ib3JkZXIgPSBudWxsOwogICAgICB9CiAgICAgIHRoaXMud2ViaG9va19hbHJlYWR5X2V4aXN0cyA9IGZhbHNlOwogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZW50ZXJfd2ViaG9va19pZCIpLnN0eWxlLmJvcmRlciA9IG51bGw7CiAgICAgIHRoaXMud2ViaG9va19pZCA9ICIiOwogICAgICB0aGlzLndlYmhvb2tfbmFtZSA9ICIiOwogICAgICB0aGlzLndlYmhvb2tfdXJsID0gIiI7CiAgICAgIHRoaXMuaHR0cF9tZXRob2QgPSAiR0VUIjsKICAgICAgdGhpcy5odHRwX21ldGhvZF90eXBlcyA9IFsiR0VUIiwgIlBPU1QiXTsKICAgICAgdGhpcy5oZWFkZXJzID0gW107CiAgICAgIHRoaXMuaGVhZGVyX25hbWVzID0gWwogICAgICAgICJBY2NlcHQiLAogICAgICAgICJBY2NlcHQtRGF0ZXRpbWUiLAogICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiLAogICAgICAgICJDb29raWUiLAogICAgICAgICJGcm9tIiwKICAgICAgICAiQXV0aG9yaXphdGlvbiIsCiAgICAgICAgIldhcm5pbmciLAogICAgICAgICJVc2VyLUFnZW50IiwKICAgICAgICAiSG9zdCIsCiAgICAgICAgIlJlZmVyZXIiLAogICAgICAgICJQcmFnbWEiLAogICAgICBdOwogICAgICB0aGlzLmF1dGhfdXNlcm5hbWUgPSAiIjsKICAgICAgdGhpcy5hdXRoX3Bhc3N3b3JkID0gIiI7CiAgICB9LAogIH0sCn07Cg=="},null]}