{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Newtestbot.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Newtestbot.vue","mtime":1645594423491},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64://
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

import axios from "axios";
import fingerprint from "@/portal/components/fingerprint";
import { bus } from "@/portal/main";
import api_calls from "@/portal/api_calls";
import { Socket } from "phoenix-socket";
import { setTimeout, setInterval } from "timers";
import Recorder from "@/portal/components/recorder";
import Scrollbar from "smooth-scrollbar";
import Multiselect from "vue-multiselect";
import debounce from "vue-debounce/src/debounce";
import country_code from "../Dashboard/country_code_data.json";
import CountryCodes from "../Dashboard/CountryCodes.json";

export default {
  name: "closed-form-response-bot",
  components: {
    Multiselect
  },
  data() {
    return {
      companyid: this.$session.get("UserInformation").company_id,
      companyname: this.$session.get("UserInformation").company_name,
      popup_msg:
        "You can type ‘Restart”  at </br>any  time to get back</br> to the Main Menu",
      refreshed_or_closed: true,
      qus_ans: "answers",
      to_send: "",
      cense_enquiry: false,
      is_typing: false,
      user_name: "",
      show: false,
      chat: [],
      fingerprint: null,
      bot_response_token_value: this.$session.get("ResponseBotToken")
        ? this.$session.get("ResponseBotToken")
        : "",
      first_click: false,
      level: 0,
      recognition: null,
      json_data: {
        create_appointment:
          '{"User": {"Physician": {"ID": "DT000000000000000237"},"UserName":"ac","ID":"US000000000000000138","Account": {"ID": "CO00023"},"Token": "Z1rSGGm0XpMWjt3giAErPPWZ84TQN9FsFMBLsU+/LAu6yualMg6EP2bsrwZjLPwm3j4DpPcGc5LcIp3NjgfUsA==","Specialty": {"ID": "PG000000000000000141", "Name": "AC", "Code": "AC"},"Domain": "gogreenbills.com"},"Appointment": {"Date": "08/30/2018", "IsJSONNote": 0, "Patient": {"CaseID": ""}}}',
        visits_finalized:
          '{"User": {"Physician": {"ID": "DT000000000000011886"},"UserName": "ch","ID": "US000000000000000143","Account":{"ID":"CO00023"},"Token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYXZkaHV0IiwiZXhwIjoxNTI5NDgyNjYzfQ.v1c0HbuWuZXXpJfDrXVc1HPVuffbnGcLqkpg0zm6AoQ","Specialty": {"ID": "PG000000000000000142","Code": "ch"},"Domain": "greenyourbills.com"},"SearchParameters": {"Status": "","OrderBy": "","FromDate": "01/01/2018","Count": "10","SearchText": "","TypeOfVisit": "ALL","SortOrder": "appointment","StartIndex": "1","EndIndex": "10","ToDate": "08/06/2018"}}',
        appointments_count:
          '{"User": {"Physician": {"ID": "DT000000000000011886"},"UserName": "ch","ID": "US000000000000000143","Account":{"ID":"CO00023"},"Token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYXZkaHV0IiwiZXhwIjoxNTI5NDgyNjYzfQ.v1c0HbuWuZXXpJfDrXVc1HPVuffbnGcLqkpg0zm6AoQ","Specialty": {"ID": "PG000000000000000142","Code": "ch"},"Domain": "greenyourbills.com"},"SearchParameters": {"Status": "","OrderBy": "","FromDate": "01/01/2018","Count": "10","SearchText": "","TypeOfVisit": "ALL","SortOrder": "appointment","StartIndex": "1","EndIndex": "10","ToDate": "08/06/2018"}}',
        create_ticket:
          '{"AccountName":null,"CallbackPhone":"","CompanyID":"CO00023","Description":"De","DomainName":null,"EmailCC":"abhay.w@codearray.tech","EmailDefault":"manish.y@codearray.tech","Priority":"3","PriorityID":0,"RaisedBy":"lawuser","Status":0,"StatusCode":null,"StatusText":null,"SType":"WP","Subject":"De","SubType":"SAMD-P","TicketID":0,"TicketNumber":null,"Type":0,"TypeText":"Website Problem","listFiles1":["chq1.pdf"]}',
        get_report: '{"companyId": "CO00023"}'
      },
      phone_number: "",
      stop: true,
      demourlbind: false,
      reviewsurlbind: false,
      reviewsurl: "https://www.youtube.com/embed/paAeW86eQZ4",
      demourl: [
        "https://www.youtube.com/embed/videoseries?KcrJm9UxW3s&index=13&list=PL_jXlih8dgkTE8CrPpiWcA9KxQeKHZAnt&t=0s",
        "https://www.youtube.com/embed/videoseries?qzS2qINI6IM&list=PL_jXlih8dgkRu5ddGXAGqZ4uLLkoJzCj8&index=2"
      ],
      chat_widget: {
        logo: "",
        title: "",
        style: ""
      },
      selected_date: "",
      selected_time: "",
      reason_of_visit: "",
      patient_name: "",
      visitor_number: "",
      full_time_slots: [],
      time_slots: [],
      TODAY_DATE: "",
      channel: null,
      chat_socket: null,
      voice_socket: null,
      live_chat_on: false,
      live_chat_token: null,
      chat_group_name: null,
      to_scroll: false,
      form_payload: null,
      refresh_time: 0,
      phone_number_validity: /[0-9]{10,11}$/,
      empty_string_validity: /^$/,
      //harsh
      isexchange: false,
      currencyexchange_list: null,
      selected_indication: [],
      res: {},
      isclosedboton: false,
      isformon: false,
      form_name: null,
      lastclosedbotinputnode: null,
      closed_form_reply_data: null,
      selectednodeid:null,
      bot_name: null,
      bot_type: null,
      iffirsttime: true,
      isemail: false,
      is_phone_number: false,
      is_text_area :false,
      conversation_id : "",
      is_phone_number_otp : false,
      name_element_for_event_listener: null,
      is_phone_number_err_msg: false,
    };
  },
  created() {
    this.conversation_id = this.generateUUID();
    this.$session.start();
    this.$session.set("conversation_id", this.conversation_id);
    // console.log(country_code);
    // console.log(JSON.parse(country_code));
    if (this.$session.has("BotResponse_Conversation")) {
      // this.chat = this.$session.get("BotResponse_Conversation");
    }
    if (!this.$session.has("ChatBotImageParameters")) {
      axios
        .post(api_calls.widget_setting_url(), {
          companyname: this.companyname,
          companyid: this.companyid,
          email: this.$session.get("UserInformation").email,
          license_key: this.$session.get("UserInformation").license_key,
          token: this.$session.get("UserInformation").tokens,
          isShow: true
        },
        {
          headers: {
            Authorization: `Bearer ${this.$session.get("at")}`,
          },
        })
        .then(response => {
          this.chat_widget.title = response.data.WidgetTitle;
          this.chat_widget.logo = response.data.ImageUrl;
          this.$session.set("ChatBotImageParameters", this.chat_widget);
          this.chat_widget.style = "margin-top: 5px;height:30px;width:auto";
        })
        .catch(e => {
          if (this.$session.get("UserInformation").company_name == "gogyb") {
            this.chat_widget.style = "margin-top: 5px;height:30px;width:60px";
            this.chat_widget.logo = "/img/cense_image.png";
          } else if (
            this.$session.get("UserInformation").company_name == "MT Care"
          ) {
            this.chat_widget.logo = "/img/robomate_logo.png";
            this.chat_widget.style = "margin-top: 5px;height:50px;width:95px";
          } else {
            this.chat_widget.logo = "/img/cense_image.png";
            this.chat_widget.style = "margin-top: 5px;height:30px;width:60px";
          }
          this.$session.set("ChatBotImageParameters", this.chat_widget);
        });
    } else {
      this.chat_widget = this.$session.get("ChatBotImageParameters");
      this.chat_widget.style = "margin-top: 5px;height:30px;width:auto";
    }
    if (!this.$session.has("ResponseBotToken")) {
      axios
        .post(api_calls.bot_response_token(), {
          license_key: this.$session.get("UserInformation").license_key,
          username: this.$session.get("UserInformation").email
        })
        .then(response => {
          this.$session.set("ResponseBotToken", response.data);
          this.bot_response_token_value = response.data;
          this.refresh_chatbot();
        });
    } else {
      this.refresh_chatbot();
    }
    //harsh
    if (
      this.$session.get("UserInformation").license_key ==
      ".eJxTcssvSs1Mz6tIzkjMS081NDexNIQKKUDFMkpKCoqt9PXLy8v10lBU6yXn5-olluobGRha6hqY6xqYKBgaWBkZW5ma6hmbm5gYmSoBAGa9Hp0.XR3Tuw.X77F_7LDtOLp2Vt9snFDSo31nTw"
    ) {
      this.isexchange = true;
    }
    var d = new Date();
    axios
      .post(api_calls.bot_user_data(), {
        license_key: this.$session.get("UserInformation").license_key,
        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,
        datetime: d.toISOString(),
        username: this.$session.get("UserInformation").email,
        source: "Web",
        token: this.bot_response_token_value,
        role: this.$session.get("UserInformation").role
      })
      .then(response => {});
      if(this.$route.params.botdata==undefined){
        this.$router.push({
          name: 'Dashboard',
        });
      } else {
        this.bot_name=this.$route.params.botdata.bot_name;
        this.bot_type=this.$route.params.botdata.bot_type;
        // axios
        //   .post(api_calls.closed_form_response_api(),{
        //     license_key: this.$session.get("UserInformation").license_key,
        //     uid: "closed_form_user",
        //     chat: null,
        //     node_selected: null,
        //     bot_name: this.bot_name,
        //   })
        //   .then(response=>{
        //     if(response.data.error==undefined){
        //       this.closed_bot_chat(response.data);
        //       this.isclosedboton=true;
        //     }
        //   });
      }
  },
  mounted() {
    CountryCodes.sort(function(a, b) {
      if(a.code < b.code) { return -1; }
      if(a.code > b.code) { return 1; }
      return 0;
    });

    this.show = false;
    if (this.$route.name == "Train the Bot") {
      $(".chat-wrap").css("right", "auto");
    }
    if (this.$route.name == "Direct Response Bot") {
      $(".chat-wrap").css("marginTop", "5%");
    }
    $('[data-toggle="popover"]')
      .popover({
        html: true,
        content: $("#popover_content")
      })
      .on("show.bs.popover", function() {
        $("#popover_content").addClass("d-block");
      })
      .on("hide.bs.popover", function() {
        $("#popover_content").addClass("d-none");
      });
    $("#popover_content").css("zIndex", 9999);
    bus.$on("Logout has been clicked", data => {
      if (data == "True") {
        $('[data-toggle="popover"]').popover("hide");
      }
    });
    window.SpeechRecognition =
      window.webkitSpeechRecognition || window.SpeechRecognition;
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    navigator.getUserMedia =
      navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia;


  },
  updated() {
    this.submit_custom_form();
    if(this.isclosedboton&&this.isformon){
      this.submit_closed_form_data();
    }
  },
  methods: {
    generateUUID() { // Public Domain/MIT
            var d = new Date().getTime();//Timestamp
            var d2 = (performance && performance.now && (performance.now()*1000)) || 0;//Time in microseconds since page-load or 0 if unsupported
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16;//random number between 0 and 16
                if(d > 0){//Use timestamp until depleted
                    r = (d + r)%16 | 0;
                    d = Math.floor(d/16);
                } else {//Use microseconds since page-load if supported
                    r = (d2 + r)%16 | 0;
                    d2 = Math.floor(d2/16);
                }
                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
    },
    voice_communication() {
      if (/Chromium/i.test(navigator.userAgent)) {
        this.call_cloud_api();
      } else if (window.SpeechRecognition != undefined) {
        this.recognition = new window.SpeechRecognition();
        document.querySelector("#microphone").classList.add("voice-on");
        this.recognition.onresult = e => {
          const speechToText = e.results[0][0].transcript;
        };
        this.recognition.onend = function() {
          document.querySelector("#microphone").classList.remove("voice-on");
          //Again – give the user feedback that you are not listening anymore. If you wish to achieve continuous recognition – you can write a script to start the recognizer again here.
        };
        var vm = this;
        this.recognition.onresult = function(event) {
          if (typeof event.results === "undefined") {
            //Something is wrong…
            this.recognition.stop();
            return;
          }
          for (var i = event.resultIndex; i < event.results.length; ++i) {
            if (event.results[i].isFinal) {
              //Final results
              vm.to_send = event.results[i][0].transcript;
              console.log("final results: " + event.results[i][0].transcript); //Of course – here is the place to do useful things with the results.
            } else {
              //i.e. interim...
              console.log("interim results: " + event.results[i][0].transcript); //You can use these results to give the user near real time experience.
            }
          } //end for loop
        };
        this.recognition.start();
      } else {
        this.call_cloud_api();
      }
    },
    call_cloud_api() {
      document.querySelector("#microphone").classList.add("voice-on");
      const audioContext = new (window.AudioContext ||
        window.webkitAudioContext)();
      var buffer_list, buffer_i32;
      var recorder = new Recorder(audioContext, {
        // An array of 255 Numbers
        // You can use this to visualize the audio stream
        // If you use react, check out react-wave-stream
        onAnalysed: data => {}
      });

      var voice_channel,
        wav_parameters,
        recBuffers = [],
        recLength,
        meta_data;
      var vm = this;
      axios.get(api_calls.voice_channel_api()).then(response => {
        this.voice_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {
          params: {
            company: this.$session.get("UserInformation").company_name,
            voice_channel_name: response.data.voice_channel_name,
            token: response.data.token,
            is_voice: true
          }
        });
        this.voice_socket.connect();

        voice_channel = this.voice_socket.channel(
          "voice_to_text:" + response.data.voice_channel_name
        );
        voice_channel.join();
      });

      let blob = null;

      navigator.mediaDevices
        .getUserMedia({ audio: true })
        .then(stream => {
          recorder.init(stream);
          startRecording();
        })
        .catch(err => console.log("Uh oh... unable to get stream...", err));

      function startRecording() {
        recorder.start();
        setTimeout(() => {
          stopRecording();
        }, 4000);
      }

      function stopRecording() {
        recorder.stop().then(({ blob, buffer }) => {
          // buffer_list = buffer[0];
          var reader = new FileReader();
          reader.readAsArrayBuffer(blob);
          reader.onloadend = () => {
            buffer_list = reader.result;
            var temp = new Uint8Array(buffer_list);
            wav_parameters = wav_file_processing_read_parameters(temp);
            init_encoder(buffer_list);
          };
          // Recorder.download(blob, "my-file");
          // buffer is an AudioBuffer
        });
      }

      function init_encoder(data) {
        var arrayBuffer = new Uint8Array(data);

        var encData = [];
        var result = encodeFlac(arrayBuffer, encData);
        // console.log("encoded data array: ", encData);

        if (result.error) {
          console.error("Conversion failed!!");
        }

        var metaData = result.metaData;

        if (!result.error) {
          //using data-util.js utility function(s)
          var blob_download = exportFlacFile(encData, metaData);
          // var down_file = URL.createObjectURL(blob_download);
          // let file = document.createElement("a");
          // file.href = down_file;
          // file.download = "output.flac";
          // file.click()
          var reader = new FileReader();
          reader.readAsDataURL(blob_download);
          reader.onloadend = function() {
            var reader_string = reader.result.split("base64,")[1];
            voice_channel.push("voice_packets_sent", { stream: reader_string });
            voice_channel.on("voice_to_text_reply", data => {
              document
                .querySelector("#microphone")
                .classList.remove("voice-on");
              if (data.text.results != undefined) {
                vm.to_send = data.text.results[0].alternatives[0].transcript;
              } else {
                toastr.error(
                  "We could not recognize your voice. Please try again or type in."
                );
              }
              vm.button_fill();
            });
          };
        }
      }

      function encodeFlac(binData, recBuffers) {
        var ui8_data = new Uint8Array(binData);
        var sample_rate = 0,
          channels = 0,
          bps = 0,
          total_samples = 0,
          block_align,
          position = 0,
          recLength = 0,
          meta_data;

        /**
         *  records/saves the output data of libflac-encode method
         */
        function write_callback_fn(buffer, bytes, samples, current_frame) {
          recBuffers.push(buffer);
          recLength += bytes;
          // recLength += buffer.byteLength;
        }

        function metadata_callback_fn(data) {
          meta_data = data;
        }

        // check: is file a compatible wav-file?
        if (wav_file_processing_check_wav_format(ui8_data) == false) {
          return { error: "Wrong WAV file format", status: 0 };
        }

        // get WAV/PCM parameters from data / file
        var wav_parameters = wav_file_processing_read_parameters(ui8_data);
        var tot_samples = 0;
        var compression_level = 5;
        var flac_ok = 1;
        var is_verify = true;

        var flac_encoder = Flac.create_libflac_encoder(
          wav_parameters.sample_rate,
          wav_parameters.channels,
          wav_parameters.bps,
          compression_level,
          tot_samples,
          is_verify
        );
        if (flac_encoder != 0) {
          var init_status = Flac.init_encoder_stream(
            flac_encoder,
            write_callback_fn,
            metadata_callback_fn,
            0
          );
          flac_ok &= init_status == 0;
        } else {
          var msg = "Error initializing the decoder.";
          console.error(msg);
          return { error: msg, status: 1 };
        }

        // convert the PCM-Data to the appropriate format for the libflac library methods (32-bit array of samples)
        // creates a new array (32-bit) and stores the 16-bit data of the wav-file as 32-bit data
        var buffer_i32 = wav_file_processing_convert_16bitdata_to32bitdata(
          ui8_data.buffer
        );

        var flac_return = Flac.FLAC__stream_encoder_process_interleaved(
          flac_encoder,
          buffer_i32,
          buffer_i32.length / wav_parameters.channels
        );

        if (flac_return != true) {
          console.log(
            "Error: FLAC__stream_encoder_process_interleaved returned false. " +
              flac_return
          );
        }

        flac_ok &= Flac.FLAC__stream_encoder_finish(flac_encoder);

        Flac.FLAC__stream_encoder_delete(flac_encoder);

        return { metaData: meta_data, status: flac_ok };
      }

      function wav_file_processing_check_wav_format(ui8_data) {
        // check: is file a compatible wav-file?
        if (
          ui8_data.length < 44 ||
          String.fromCharCode.apply(null, ui8_data.subarray(0, 4)) != "RIFF" ||
          String.fromCharCode.apply(null, ui8_data.subarray(8, 16)) !=
            "WAVEfmt " ||
          String.fromCharCode.apply(null, ui8_data.subarray(36, 40)) != "data"
        ) {
          console.log("ERROR: wrong format for wav-file.");
          return false;
        }
        return true;
      }

      /**
       *  checks if the given ui8_data (ui8array) is of a flac-file
       */
      function flac_file_processing_check_flac_format(ui8_data) {
        // check: is file a compatible flac-file?
        if (
          ui8_data.length < 42 ||
          String.fromCharCode.apply(null, ui8_data.subarray(0, 4)) != "fLaC"
        ) {
          console.log("ERROR: wrong format for flac-file.");
          return false;
        }
        var view = new DataView(ui8_data.buffer);
        //check last 7 bits of 4th byte for meta-data BLOCK type: must be STREAMINFO (0)
        if ((view.getUint8(4) & 0x7f) != 0) {
          console.log("ERROR: wrong format for flac-file.");
          return false;
        }

        return true;
      }

      function wav_file_processing_read_parameters(ui8_data) {
        var sample_rate = 0,
          channels = 0,
          bps = 0,
          total_samples = 0,
          block_align;

        // get WAV/PCM parameters from data / file
        sample_rate =
          (((((ui8_data[27] << 8) | ui8_data[26]) << 8) | ui8_data[25]) << 8) |
          ui8_data[24];
        channels = ui8_data[22];
        bps = ui8_data[34];
        block_align = ui8_data[32];
        total_samples =
          ((((((ui8_data[43] << 8) | ui8_data[42]) << 8) | ui8_data[41]) << 8) |
            ui8_data[40]) /
          block_align;

        return {
          sample_rate: sample_rate,
          channels: channels,
          bps: bps,
          total_samples: total_samples,
          block_align: block_align
        };
      }

      /**
       *  converts the PCM data of the wav file (each sample stored as 16 bit value) into
       *  a format expected by the libflac-encoder method (each sample stored as 32 bit value in a 32-bit array)
       */
      function wav_file_processing_convert_16bitdata_to32bitdata(arraybuffer) {
        // convert the PCM-Data to the appropriate format for the libflac library methods (32-bit array of samples)
        // creates a new array (32-bit) and stores the 16-bit data of the wav-file as 32-bit data
        var ab_i16 = new DataView(arraybuffer, 44);
        var buf_length = ab_i16.byteLength;
        var buf32_length = buf_length / 2;
        var buffer_i32 = new Uint32Array(buf32_length);
        var view = new DataView(buffer_i32.buffer);
        var index = 0;
        for (var j = 0; j < buf_length; j += 2) {
          view.setInt32(index, ab_i16.getInt16(j, true), true);
          index += 4;
        }
        return buffer_i32;
      }

      function exportFlacFile(recBuffers, metaData) {
        var recLength = getLength(recBuffers);
        if (metaData) {
          addFLACMetaData(recBuffers, metaData);
        }
        //convert buffers into one single buffer
        var samples = mergeBuffers(recBuffers, recLength);
        var the_blob = new Blob([samples]);
        return the_blob;
      }

      function getLength(recBuffers) {
        //get length
        var recLength = 0;
        for (var i = recBuffers.length - 1; i >= 0; --i) {
          recLength += recBuffers[i].byteLength;
        }
        return recLength;
      }

      function addFLACMetaData(chunks, metadata) {
        var offset = 4;
        var data = chunks[0]; //1st data chunk should contain FLAC identifier "fLaC"
        if (
          data.length < 4 ||
          String.fromCharCode.apply(null, data.subarray(0, 4)) != "fLaC"
        ) {
          console.error(
            "Unknown data format: cannot add additional FLAC meta data to header"
          );
          return;
        }

        //first chunk only contains the flac identifier string?
        if (data.length == 4) {
          data = chunks[1]; //get 2nd data chunk which should contain STREAMINFO meta-data block (and probably more)
          offset = 0;
        }

        var view = new DataView(data.buffer);

        //NOTE by default, the encoder writes a 2nd meta-data block (type VORBIS_COMMENT) with encoder/version info -> do not set "is last" to TRUE for first one
        //	// write "is last meta data block" & type STREAMINFO type (0) as little endian combined uint1 & uint7 -> uint8:
        //	var isLast = 1;//1 bit
        //	var streamInfoType = 0;//7 bit
        //	view.setUint8(0 + offset, isLast << 7 | streamInfoType, true);//8 bit

        // block-header: STREAMINFO type, block length -> already set

        // block-content: min_blocksize, min_blocksize -> already set

        // write min_framesize as little endian uint24:
        view.setUint8(8 + offset, metadata.min_framesize >> 16, true); //24 bit
        view.setUint8(9 + offset, metadata.min_framesize >> 8, true); //24 bit
        view.setUint8(10 + offset, metadata.min_framesize, true); //24 bit

        // write max_framesize as little endian uint24:
        view.setUint8(11 + offset, metadata.max_framesize >> 16, true); //24 bit
        view.setUint8(12 + offset, metadata.max_framesize >> 8, true); //24 bit
        view.setUint8(13 + offset, metadata.max_framesize, true); //24 bit

        // block-content: sampleRate, channels, bitsPerSample -> already set

        // write total_samples as little endian uint36:
        //TODO set last 4 bits to half of the value in index 17
        view.setUint8(18 + offset, metadata.total_samples >> 24, true); //36 bit
        view.setUint8(19 + offset, metadata.total_samples >> 16, true); //36 bit
        view.setUint8(20 + offset, metadata.total_samples >> 8, true); //36 bit
        view.setUint8(21, metadata.total_samples, true); //36 bit

        writeMd5(view, 22 + offset, metadata.md5sum); //16 * 8 bit
      }

      function mergeBuffers(channelBuffer, recordingLength) {
        var result = new Uint8Array(recordingLength);
        var offset = 0;
        var lng = channelBuffer.length;
        for (var i = 0; i < lng; i++) {
          var buffer = channelBuffer[i];
          result.set(buffer, offset);
          offset += buffer.length;
        }
        return result;
      }

      function writeMd5(view, offset, str) {
        var index;
        for (var i = 0; i < str.length / 2; ++i) {
          index = i * 2;
          view.setUint8(
            i + offset,
            parseInt(str.substring(index, index + 2), 16)
          );
        }
      }
    },
    start_video_call() {},
    refresh_chatbot(type) {
      this.refreshed_or_closed = true;
      // debugger;
      axios
        .post(api_calls.chatbot_response_cense(), {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
          chat: "",
          data: "",
          user_id: "",
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: this.refreshed_or_closed
        })
        .then(resp => {
          this.refreshed_or_closed = false;
          if(this.iffirsttime){
            this.iffirsttime=false;
            document.querySelector(".typing-indicator").style.display = "block";
            axios
            .post(api_calls.closed_form_response_api(),{
              license_key: this.$session.get("UserInformation").license_key,
              uid: this.$session.get("UserInformation").email,
              chat: null,
              node_selected: null,
              bot_name: this.bot_name,
              conversation_id : this.conversation_id,
            })
            .then(response=>{
              // console.log(response.data.error);
              if(response.data.error==undefined){
                // console.log('gaya');
                document.querySelector(".typing-indicator").style.display = "none";
                this.closed_bot_chat(response.data);
                this.isclosedboton=true;
              } else {
                document.querySelector(".typing-indicator").style.display = "none";
              }
            });
          }
          if (type == "support") {
            this.chat.push({
              receiving: true,
              received: "Is there anything else I can help you with?",
              conversation_only: true,
              time: this.generate_time()
            });
          }
          if (
            this.companyid == "CustomerHappiness95185" ||
            this.companyid == "3x5ive99534" ||
            this.companyid == "Foreignxchange17491" ||
            this.companyid == "clinicaltrials81352"
          ) {
            axios
              .post(api_calls.chatbot_response_cense(), {
                chat: "/welcome_message",
                token: this.bot_response_token_value,
                username: this.$session.get("UserInformation").email,
                source: "Web",
                user_id: "",
                license_key: this.$session.get("UserInformation").license_key,
                data: "",
                role: this.$session.get("UserInformation").role,
                refreshed_or_closed: false
              })
              .then(response => {
                this.push_msg(response, response.data.responses);
              });
          }
          axios
            .post(api_calls.prompt_url(), {
              uid: "cense", //this.fingerprint
              companyid: this.$session.get("UserInformation").company_id,
              license_key: this.$session.get("UserInformation").license_key,
              chat: ""
            })
            .then(response => {
              if (response.data != "NO CLOSED FORM BOT") {
                if (
                  response.data.extras != null &&
                  response.data.extras[0].Type == "TABLE"
                ) {
                  this.create_chat(response.data, "istable");
                } else if (response.data.return == "PROMPTS") {
                  this.create_chat(response.data, "isprompt");
                }
              }
            })
            .catch(e => {});
        });
    },
    download_pdf(url, file_name) {
      event.preventDefault();
      var link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", file_name);
      document.body.appendChild(link);
      link.click();
    },
    scroll_div() {
      var doc = document.querySelector(".buy-products");
      if (event.deltaX > event.deltaY) {
        doc.scrollLeft += 10;
      } else if (event.deltaX < event.deltaY) {
        doc.scrollLeft -= 10;
      }
    },
    call_support(type) {
      if (type == "Yes") {
        axios
          .post(api_calls.chatbot_response_cense(), {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: "/call_support",
            token: this.bot_response_token_value,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: this.refreshed_or_closed
          })
          .then(resp => {
            this.chat.push({
              conversation_only: true,
              receiving: true,
              received: resp.data.responses[0].text,
              time: this.generate_time()
            });
            this.$session.set("BotResponse_Conversation", this.chat);
            this.update_scrollbar("upto_end", "response");
          });
      } else if (type == "No") {
        this.chat.push(this.chat[0]);
        this.chat.push(this.chat[1]);
        this.update_scrollbar("upto_end", "response");
        // this.refresh_chatbot("support");
      }
    },
    parse(string) {
      return string.replace(/{{.*?}}/g, match => {
        var today = new Date();
        var dd = today.getDate();

        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        if (dd < 10) {
          dd = "0" + dd;
        }

        if (mm < 10) {
          mm = "0" + mm;
        }
        today = dd + "-" + mm + "-" + yyyy;
        var expression = match.slice(2, -2);
        this.$data[expression] = today;
        return this.$data[expression];
      });
    },
    generate_time() {
      let d = new Date();
      let h, m, type;
      if (d.getHours() > 12) {
        h = d.getHours() % 12;
        type = " pm";
      } else if (d.getHours() < 12) {
        h = d.getHours();
        type = " am";
      } else if (d.getHours() == 12) {
        h = d.getHours();
        type = " pm";
      }
      m = d.getMinutes();
      if (m < 10) {
        m = 0 + String(m);
      }
      return h + ":" + m + type;
    },
    call_api() {
      event.preventDefault();
      if (this.phone_number_validity.test(this.phone_number)) {
        axios
          .post(api_calls.call_support_url(), {
            companyid: this.companyid,
            companyname: this.companyname,
            phonenumber: this.phone_number,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email
          })
          .then(response => {
            if (response.data.message == "Call incoming!") {
              toastr.success("We will get in touch with you soon. Thanks");
            }
          });
      } else {
        toastr.error("Please Enter a valid phone number");
      }
    },
    show_popup() {
      this.show = false;
      this.stop = false;
    },
    sub_leaf_node_call(type) {
      var divclick = event.target.innerText;
      if (divclick == "Watch Demo Video") {
        this.demourlbind = true;
        this.reviewsurlbind = false;
      } else if (divclick == "User Reviews/Testimonials") {
        this.reviewsurlbind = true;
        this.demourlbind = false;
      }
      if (
        divclick == "Watch Demo Video" ||
        divclick == "User Reviews/Testimonials"
      ) {
        this.show = !this.show;
        this.update_scrollbar();
        setTimeout(() => {
          document.querySelector(".typing-indicator").style.display = "none";
        }, 1000);
      } else if (divclick == "Buy Tutorial") {
        this.cense_enquiry = true;
        axios
          .post(api_calls.chatbot_response_cense(), {
            username: this.$session.get("UserInformation").email,
            token: this.bot_response_token_value,
            chat: "/personal_details",
            source: "Web",
            license_key: this.$session.get("UserInformation").license_key,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: ""
          })
          .then(response => {
            var msg = {
              received: response.data.responses[0].text,
              conversation_only: true,
              receiving: true,
              time: this.generate_time()
            };
            this.chat.push(msg);
            this.update_scrollbar();
            setTimeout(() => {
              document.querySelector(".typing-indicator").style.display =
                "none";
            }, 1000);
            this.$session.set("BotResponse_Conversation", this.chat);
          });
      }
    },
    ticket_number() {
      var random_num = Math.floor(1000000 + Math.random() * 9000000);
      var company = this.companyname.slice(0, 1).toUpperCase();
      return company + "_" + random_num;
    },
    send_message(type, message, to_be_displayed) {
      //harsh
      // debugger;
      event.preventDefault();
      if (this.selected_indication[0] != undefined) {
        type = "is_prompt";
        to_be_displayed = this.to_send;
        this.to_send =
          this.selected_indication[0].value.split("{")[0] +
          JSON.stringify(this.res);
        this.selected_indication = [];
      }
      if(this.isclosedboton&&type!='is_button'){
        this.refreshed_or_closed=true;
        this.submit_closed_form_data();
      } else if (type == "is_button") {
        $("#response_bot_text").prop("disabled", false);
        if (
          message.value == "isdisabled" &&
          this.companyid == "clinicaltrials81352" &&
          message.title == "No"
        ) {
        } else if(this.isclosedboton){
          this.submit_closed_form_data(type,message);
        } else {
          let index = to_be_displayed;
          document.querySelector(".typing-indicator").style.display = "block";
          this.chat.push({
            sent: message.title,
            sending: true,
            time: this.generate_time(),
            conversation_only: true,
            delivered: true,
            dropdown: ""
          });
          this.update_scrollbar("upto_end", "sender");
          axios
            .post(api_calls.chatbot_response_cense(), {
              chat: message.value,
              token: this.bot_response_token_value,
              username: this.$session.get("UserInformation").email,
              source: "Web",
              license_key: this.$session.get("UserInformation").license_key,
              role: this.$session.get("UserInformation").role,
              refreshed_or_closed: this.refreshed_or_closed
            })
            .then(response => {
              if (this.chat[index].removable == true) {
                this.chat.splice(index, 1);
              }
              this.response_handling(response);
            });
        }
      } else if (type == "is_prompt") {
        document.querySelector(".typing-indicator").style.display = "block";
        this.chat.push({
          sent: to_be_displayed,
          sending: true,
          time: this.generate_time(),
          conversation_only: true,
          delivered: true
        });
        this.update_scrollbar("upto_end", "sender");
        axios
          .post(api_calls.chatbot_response_cense(), {
            // host: this.user_data.host,
            role: this.$session.get("UserInformation").role,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: this.to_send
          })
          .then(response => {
            this.response_handling(response);
            this.ex1();
          });
      } else if (this.to_send == "Restart" || this.to_send == "restart") {
        axios
          .post(api_calls.prompt_url(), {
            uid: "cense", //this.fingerprint
            companyid: this.$session.get("UserInformation").company_id,
            license_key: this.$session.get("UserInformation").license_key,
            chat: ""
          })
          .then(response => {
            this.chat.push(response.data);
            this.update_scrollbar("upto_end", "response");
            this.$session.set("BotResponse_Conversation", this.chat);
            this.first_click = true;
            this.level = response.data.level;
          })
          .catch(e => {});
      } else if (
        this.cense_enquiry == true &&
        this.to_send != "" &&
        this.to_send != null &&
        !/^\s*$/.test(this.to_send)
      ) {
        document.querySelector(".typing-indicator").style.display = "block";
        var send_msg = {
          sent: this.to_send,
          conversation_only: true,
          sending: true,
          time: this.generate_time()
        };
        this.chat.push(send_msg);
        this.$session.set("BotResponse_Conversation", this.chat);
        this.update_scrollbar("upto_end");
        axios
          .post(api_calls.chatbot_response_cense(), {
            username: this.$session.get("UserInformation").email,
            token: this.bot_response_token_value,
            chat: "/personal_details",
            source: "Web",
            user_id: "",
            Companyid: "CO00023",
            data: "",
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: "",
            license_key: this.$session.get("UserInformation").license_key
          })
          .then(response => {
            var msg = {
              received: response.data.responses[0].text,
              conversation_only: true,
              receiving: true,
              time: this.generate_time()
            };
            this.chat.push(msg);
            this.$session.set("BotResponse_Conversation", this.chat);
            this.refreshed_or_closed = false;
            this.update_scrollbar("upto_end", "response");
          })
          .catch(e => {
            document.querySelector(".typing-indicator").style.display = "none";
          });
      } else if (this.live_chat_on) {
        if (this.user_name == "") {
          this.channel.push("new_name", { name: this.to_send });
          this.user_name = this.to_send;
          this.update_scrollbar("upto_end", "response");
        } else {
          this.channel.push("new_chat_message", { message: this.to_send });
          this.update_scrollbar("upto_end", "response");
        }
        this.chat.push({
          sent: this.to_send,
          sending: true,
          conversation_only: true,
          time: this.generate_time()
        });
        this.$session.set("BotResponse_Conversation", this.chat);
        this.update_scrollbar("upto_end", "sender");
      } else if (
        this.to_send != "" &&
        this.to_send != null &&
        this.cense_enquiry != true
      ) {
        this.chat.push({
          conversation_only: true,
          sending: true,
          sent: this.to_send,
          time: this.generate_time()
        });
        this.$session.set("BotResponse_Conversation", this.chat);
        this.update_scrollbar("upto_end", "sender");
        axios
          .post(api_calls.chatbot_response_cense(), {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: this.to_send,
            token: this.bot_response_token_value,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: this.refreshed_or_closed
          })
          .then(response => {
            this.response_handling(response);
          })
          .catch(e => {
            this.update_scrollbar("upto_end", "response");
          });
      }
      this.to_send = "";
      this.button_fill();
    },
    initiate_support_chat() {
      this.chat.push({
        receiving: true,
        received: "Sorry I am not getting your question",
        conversation_only: true
      });
      this.chat.push({
        receiving: true,
        received: "Would you like to talk with support team?",
        conversation_only: true,
        show_buttons: true,
        support_buttons: true,
        time: this.generate_time()
      });
      this.update_scrollbar("upto_end", "response");
    },
    disconnect_support_chat() {
      this.channel.push("stopped_chat", {
        name: this.user_name,
        message: " has ended the conversation."
      });
      this.channel.leave();
      this.chat_socket.disconnect();
      this.live_chat_on = false;
    },
    chat_response_error() {
      this.chat.push({
        conversation_only: true,
        receiving: true,
        received: "Sorry I'm not getting your question",
        time: this.generate_time()
      });
      this.$session.set("BotResponse_Conversation", this.chat);
      this.update_scrollbar("upto_end", "response");
    },
    send_request_json(message) {
      axios
        .post(api_calls.chatbot_response_cense(), {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          token: this.bot_response_token_value,
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: this.refreshed_or_closed,
          chat: "",
          source: "Web",
          data: this.json_data[message.responses[0].intent]
        })
        .then(resp => {
          this.chat.push({
            conversation_only: true,
            receiving: true,
            received:
              resp.data.responses.length == 0
                ? "Sorry I'm not getting your question"
                : resp.data.responses[0].text,
            time: this.generate_time(),
            image:
              resp.data.responses[0].img == ""
                ? null
                : resp.data.responses[0].img
          });
          this.$session.set("BotResponse_Conversation", this.chat);
          this.update_scrollbar("upto_end", "response");
        });
    },
    response_handling(response, type) {
      var i = 0;
      var delay =
        response.data.responses[i].text != undefined &&
        response.data.responses[i].text.length > 10
          ? 2000
          : 500;
      var vm = this;
      document.querySelector(".typing-indicator").style.display = "block";
      setTimeout(() => {
        handle_response();
      }, delay);
      function handle_response() {
        setTimeout(() => {
          document.querySelector(".typing-indicator").style.display = "none";
          if (response.data == null || response.data.responses.length == 0) {
            vm.chat_response_error();
          } else if (
            response.data.responses[i].request_json != undefined &&
            response.data.responses[i].request_json == true
          ) {
            if (response.data.responses[i].text != null) {
              vm.chat.push({
                conversation_only: true,
                receiving: true,
                received: response.data.responses[i].text,
                time: vm.generate_time(),
                image: response.data.responses[i].img,
                video: response.data.responses[i].video
              });
              vm.$session.set("BotResponse_Conversation", vm.chat);
              vm.update_scrollbar("upto_end", "response");
            }
            if (response.data.responses[i].intent == "gogyb450_create_ticket") {
              var name;
              if (vm.$session.get("UserInformation").first_name != null) {
                name =
                  vm.$session.get("UserInformation").first_name +
                  " " +
                  vm.$session.get("UserInformation").last_name;
              } else if (vm.$session.has("UserFirstName")) {
                name =
                  vm.$session.get("UserFirstName") +
                  " " +
                  vm.$session.get("UserLastName");
              }
              var payload = {
                username: name,
                companyname: vm.companyname,
                companyid: vm.companyid,
                user_role: vm.$session.get("UserInformation").role,
                email: vm.$session.get("UserInformation").email,
                license_key: vm.$session.get("UserInformation").license_key,
                token: vm.$session.get("UserInformation").tokens,
                ticket_issue: "",
                ticket_number: vm.ticket_number(),
                description: "",
                file_content: null,
                file_name: null,
                isEdit: false
              };
              payload = JSON.stringify(payload);
              axios
                .post(api_calls.chatbot_response_cense(), {
                  license_key: vm.$session.get("UserInformation").license_key,
                  token: vm.bot_response_token_value,
                  username: vm.$session.get("UserInformation").email,
                  token: vm.bot_response_token_value,
                  role: vm.$session.get("UserInformation").role,
                  refreshed_or_closed: vm.refreshed_or_closed,
                  chat: "",
                  source: "Web",
                  data: payload
                })
                .then(resp => {
                  vm.chat.push({
                    conversation_only: true,
                    receiving: true,
                    received:
                      resp.data.responses.length == 0
                        ? "Sorry I'm not getting your question"
                        : resp.data.responses[i].text,
                    time: vm.generate_time(),
                    image: resp.data.responses[i].img,
                    video:
                      resp.data.responses[i].video != null
                        ? resp.data.responses[i].video
                        : null
                  });
                  vm.$session.set("BotResponse_Conversation", vm.chat);
                  vm.update_scrollbar("upto_end", "response");
                });
            } else if (
              response.data.responses[i].intent == "create_appointment"
            ) {
              let today_date = new Date();
              axios
                .post(api_calls.schedule_appointment_url(), {
                  companyname: vm.companyname,
                  companyid: vm.companyid,
                  Date:
                    today_date.getFullYear() +
                    "-" +
                    (today_date.getMonth() < 9
                      ? "0" + (today_date.getMonth() + 1)
                      : today_date.getMonth() + 1) +
                    "-" +
                    today_date.getDate() //Month object document it
                  // Date: start_time,
                })
                .then(response => {
                  // this.time_slots = this.full_time_slots;
                  // if (response.data.Slot != undefined) {
                  //   if (response.data.Slot.length > 0) {
                  //     let index;
                  //     for (var i in response.data.Slot) {
                  //       index = this.time_slots.indexOf(response.data.Slot[i]);
                  //       if (index != -1) {
                  //         this.time_slots.splice(index, 1);
                  //       }
                  //     }
                  //   } else {
                  //   }
                  // }
                })
                .catch(e => {
                  // console.log(e);
                });
            } else {
              vm.send_request_json(response.data);
            }
          } else if (
            response.data.responses[i].return_intent != undefined &&
            response.data.responses[i].return_intent == true
          ) {
            axios
              .post(api_calls.chatbot_response_cense(), {
                license_key: vm.$session.get("UserInformation").license_key,
                token: vm.bot_response_token_value,
                username: vm.$session.get("UserInformation").email,
                token: vm.bot_response_token_value,
                role: vm.$session.get("UserInformation").role,
                refreshed_or_closed: vm.refreshed_or_closed,
                chat: "/" + response.data.responses[i].intent,
                source: "Web"
              })
              .then(response => {
                vm.handle_response(response);
              });
          } else if (
            vm.companyid == "3x5ive99534" &&
            response.data.responses[i].intent != undefined &&
            response.data.responses[i].intent == "confusion"
          ) {
            vm.confusion_message("/need_help");
          } else if (response.data.responses[i].buttons != undefined) {
            vm.load_buttons(response.data.responses[i], i);
          } else if (response.data.responses[i].custom != undefined) {
            //CHange  the condition here
            if (
              response.data.responses[i].custom.type != undefined &&
              response.data.responses[i].custom.type == "multiselect_dropdown"
            ) {
              vm.multiselect_load(response.data.responses[i], i);
            } else if (
              response.data.responses[i].custom.type != undefined &&
              response.data.responses[i].custom.type == "table"
            ) {
              vm.load_table(response.data.responses[i], i);
            }
          }
          //this one for foreignxchange
          else if (
            response.data.responses[i].text != undefined &&
            (response.data.responses[i].text.toLowerCase() ==
              "sorry i am not getting your question" ||
              response.data.responses[i].text.toLowerCase() ==
                "is there anything i can help you with?")
          ) {
            if (
              vm.$session.get("UserInformation").license_key ==
                ".eJxTcssvSs1Mz6tIzkjMS081NDexNIQKKUDFMkpKCoqt9PXLy8v10lBU6yXn5-olluobGRha6hqY6xqYKBgaWBkZW5ma6hmbm5gYmSoBAGa9Hp0.XR3Tuw.X77F_7LDtOLp2Vt9snFDSo31nTw" ||
              vm.$session.get("UserInformation").license_key ==
                ".eJxTci4tLsnPTS3ySCwoyMxLLS62NDW0MIWJKsCFM0pKCoqt9PXLy8v1kjOKE_USU_WNDAwtdQ3MdQ2NFAwNrYDIxFzPxMTS0tJICQBjZxux.XShq8w.Pgo5cmKwMQFnYUsscpojwEqDXQw"
            ) {
              vm.initiate_support_chat();
            } else {
              vm.chat.push({
                receiving: true,
                received: "Sorry I am not getting your question",
                conversation_only: true,
                time: vm.generate_time()
              });
              vm.update_scrollbar("upto_end", "response");
            }
          } else {
            var msg = {
              conversation_only: true,
              time:
                i == response.data.responses.length - 1
                  ? vm.generate_time()
                  : null
            };
            if (response.data.responses.length == 0) {
              msg.received = "Sorry we are not getting your question.";
              msg.receiving = true;
            } else if (
              response.data.responses[i].text != undefined &&
              response.data.responses[i].text.includes(".pdf")
            ) {
              vm.display_pdf_chat(response.data.responses[i].text);
            } else if (
              response.data.responses[i].text != undefined &&
              !response.data.responses[i].text.includes(
                "Download your manifest here"
              )
            ) {
              msg.received = response.data.responses[i].text;
              msg.receiving = true;
              msg.image = response.data.responses[i].img;
              msg.videos =
                response.data.responses[i].video == null
                  ? []
                  : response.data.responses[i].video;
              vm.chat.push(msg);
              if (i == 0) {
                setTimeout(() => {
                  vm.to_scroll = true;
                  if (
                    $(".chat-body")
                      .children()
                      .last()
                      .height() /
                      $(".chat-body").height() <
                    0.5
                  ) {
                    $(".chat-body").animate(
                      {
                        scrollTop: $(".chat-body").prop("scrollHeight")
                      },
                      1500
                    );
                  } else if (
                    $(".receiver")
                      .last()
                      .parent()
                      .height() /
                      $(".chat-body").height() >
                      0.5 &&
                    $(".receiver")
                      .last()
                      .parent()
                      .height() /
                      $(".chat-body").height() <
                      0.6
                  ) {
                    $(".chat-body").animate(
                      {
                        scrollTop: 0.9 * $(".chat-body").prop("scrollHeight")
                      },
                      1500
                    );
                  } else {
                    $(".chat-body").animate(
                      {
                        scrollTop: 0.75 * $(".chat-body").prop("scrollHeight")
                      },
                      1500
                    );
                  }
                }, 1000);
              }
              if (
                $(".chat-body").height() -
                  $(".chat-body").prop("scrollHeight") !=
                0
              ) {
                vm.to_scroll = true;
              }
            } else if (response.data.responses[i].intent == "chat_support") {
              msg.receiving = true;
              msg.received =
                "I am connecting you to one of our support agents. Please wait for a while.";
              vm.update_scrollbar("upto_end", "response");
              vm.chat.push(msg);
              vm.chat.push({
                receiving: true,
                received: "What's your name?",
                conversation_only: true,
                time: vm.generate_time()
              });
              vm.update_scrollbar("upto_end", "response");
              axios.get(api_calls.chat_group_api()).then(response => {
                vm.chat_group_name = response.data.chat_group_name;
                vm.live_chat_token = response.data.token;
                vm.live_chat_on = true;
                vm.chat_socket = new Socket(process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT, {
                  params: {
                    company: vm.$session.get("UserInformation").company_name,
                    chat_group_name: vm.chat_group_name,
                    token: vm.live_chat_token
                  }
                });
                vm.chat_socket.connect();
                vm.channel = vm.chat_socket.channel(
                  "customers_groups:" + vm.chat_group_name
                );
                vm.channel.join();
                vm.channel.push("customer_needs_support_agent");
                vm.channel.on("new_chat_message", res => {
                  if (res.sender != "customer") {
                    vm.chat.push({
                      receiving: true,
                      received: res.message,
                      time: vm.generate_time(),
                      conversation_only: true
                    });
                  }
                  vm.update_scrollbar("upto_end", "response");
                });
                vm.channel.on("stopped_chat", res => {
                  vm.chat.push({
                    conversation_only: true,
                    receiving: true,
                    received: "Support agent " + res.message,
                    time: this.generate_time()
                  });
                  vm.live_chat_on = false;
                  vm.update_scrollbar("upto_end", "response");
                });
                vm.channel.on("started_typing", res => {
                  vm.is_typing = true;
                  document.querySelector(".typing-indicator").style.display =
                    "block";
                });
                vm.channel.on("stopped_typing", res => {
                  vm.is_typing = false;
                  document.querySelector(".typing-indicator").style.display =
                    "none";
                });
              });
            } else if (
              response.data.responses[i].text != undefined &&
              (response.data.responses[i].text.includes(
                "Download your manifest here"
              ) ||
                response.data.responses[i].text.includes(/.pdf/))
            ) {
              vm.display_pdf_chat(response.data.responses[i]);
            } else if (response.data.responses[i].products.length > 0) {
              vm.display_products_chat(response.data.responses[i]);
            }
          }
          if (i < response.data.responses.length - 1) {
            i += 1;
            document.querySelector(".typing-indicator").style.display = "block";
            delay =
              response.data.responses[i].text != undefined &&
              response.data.responses[i].text.length > 10
                ? 2000
                : 500;
            handle_response();
          }
        }, delay);
      }
    },
    push_msg(responses, response) {
      var index = 0;
      var vm = this;
      var delay = response[index].text.length > 10 ? 2000 : 500;
      push_chat(response[index], delay);
      this.refreshed_or_closed = true;
      function push_chat(msg, time_delay) {
        document.querySelector(".typing-indicator").style.display = "block";
        setTimeout(() => {
          document.querySelector(".typing-indicator").style.display = "none";

          if (responses.data.responses[index].buttons != undefined) {
            vm.load_buttons(
              responses.data.responses[index],
              "is_button",
              "welcome_message"
            );
          } else {
            vm.chat.push({
              conversation_only: true,
              receiving: true,
              received: msg.text,
              time:
                index == response.length - 1 ? vm.generate_time() : undefined
            });
          }

          $(".time")
            .last()
            .css("display", "none");
          setTimeout(() => {
            $(".time")
              .last()
              .css("display", "block");

            if (index < response.length - 1) {
              index += 1;
              delay = response[index].text.length > 10 ? 2000 : 500;
              push_chat(response[index], delay);
            } else {
              // console.log('1');
              vm.refreshed_or_closed = false;
            }
          }, 500);
        }, time_delay);
      }
    },
    confusion_message(msg_string) {
      axios
        .post(api_calls.chatbot_response_cense(), {
          chat: msg_string,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
          user_id: "",
          license_key: this.$session.get("UserInformation").license_key,
          data: "",
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: false
        })
        .then(response => {
          this.response_handling(response);
        });
    },
    fix_appointment() {
      event.preventDefault();
    },
    display_products_chat(message) {
      var msg = {
        conversation_only: true,
        time: this.generate_time()
      };
      msg.isproduct = true;
      msg.elements = message;
      this.chat.push(msg);
      this.$session.set("BotResponse_Conversation", this.chat);
      this.update_scrollbar("upto_end", "response");
    },
    display_pdf_chat(message) {
      var msg = {
        conversation_only: true,
        time: this.generate_time()
      };
      if (message.includes("Download your manifest here ")) {
        var temp = message.split("Download your manifest here ");
        msg.url = temp[1];
        msg.receiving = false;
        msg.file_name = message.split(/^.*[\\\/]/)[1];
        this.chat.push(msg);
        this.$session.set("BotResponse_Conversation", this.chat);
        this.update_scrollbar("upto_end", "response");
      } else {
        let url = message.match(
          /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/g
        )[0];
        msg.url = url;
        msg.receiving = false;
        msg.file_name = url.split(/^.*[\\\/]/)[1];
        this.chat.push(msg);
        this.$session.set("BotResponse_Conversation", this.chat);
        this.update_scrollbar("upto_end", "response");
      }
    },
    generate_payment(price, name) {
      var vm = this;
      var options = {
        key: "rzp_test_SnDTaPnncfliDt",
        amount: price * 100,
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name,
        name: "Cense AI",
        currency: "INR",
        description: "Instill Intelligence",
        image: "/img/cense_image.png", // COMPANY LOGO
        handler: function(response) {
          var contact = $('#contact[type="tel"]').value;
          var email = $('#email[type="email"]').value;
          vm.paymentid = response.razorpay_payment_id;

          if (transfer_account != null) {
            vm.transfer_payment(transfer_account, price * 100, "INR", name);
          }
        },
        prefill: {
          name: "", // pass customer name
          email: "", // customer email
          contact: "" //customer phone no.
        },
        notes: {
          address: "address" //customer address
        },
        theme: {
          color: "#283777" // screen color
        }
      };
      var rzp1 = new Razorpay(options);
      rzp1.open();
      event.preventDefault();
    },
    transfer_payment(account, amount, currency, name) {
      axios
        .post("https://api.razorpay.com/1/transfers", {
          auth: {
            rzp_test_SnDTaPnncfliDt: "llxEKbgABH8Lx4XApex9cGzj"
          },
          data: {
            account: account,
            amount: amount,
            currency: currency
          }
        })
        .then(response => {
          // if(this.user_data.api_key!='') {
          this.shopify_order_create(name);
          // }
        });
    },
    shopify_order_create(name) {},
    click_prompt(type) {
      this.live_chat_on = false;
      var divclickpopup = event.target.innerText;
      setTimeout(() => {
        document.querySelector(".typing-indicator").style.display = "none";
      }, 500);
      document.querySelector(".typing-indicator").style.display = "block";
      if (type != "collapsible") {
        axios
          .post(api_calls.prompt_url(), {
            uid: "cense",
            companyid: this.$session.get("UserInformation").company_id,
            license_key: this.$session.get("UserInformation").license_key,
            chat: event.target.innerText,
            level: event.target.attributes.value.nodeValue
          })
          .then(response => {
            if (response.data.collapsible == true) {
              this.create_chat(response.data, "isprompt");
              document.querySelector(".typing-indicator").style.display =
                "none";
            } else if (
              response.data.extras != undefined &&
              response.data.extras[0].Type == "TABLE"
            ) {
              this.create_chat(response.data, "istable");
              document.querySelector(".typing-indicator").style.display =
                "none";
            } else {
              if (response.data != "Oops! Something went wrong!") {
                this.create_chat(response.data, "isprompt");
                document.querySelector(".typing-indicator").style.display =
                  "none";
              } else if (response.data == "Oops! Something went wrong!") {
                this.chat.push(response.data);
                this.$session.set("BotResponse_Conversation", this.chat);
                this.update_scrollbar();
                document.querySelector(".typing-indicator").style.display =
                  "none";
              }
            }
          });
      } else if (type == "collapsible") {
        axios
          .post(api_calls.prompt_url(), {
            uid: "cense",
            companyid: this.$session.get("UserInformation").company_id,
            license_key: this.$session.get("UserInformation").license_key,
            chat: ""
          })
          .then(response => {
            this.chat.push(response.data);
            this.update_scrollbar("upto_end", "response");
            this.$session.set("BotResponse_Conversation", this.chat);
          });
      }
    },
    button_fill() {
      if (this.isexchange) {
        if (this.to_send == "") {
          document.querySelector("#send_button").style.fill = "#8a8a8a63";
        } else if (this.to_send != "") {
          if (this.live_chat_on) {
            this.channel.push("started_typing");
            this.stop_typing(this);
          }
          document.querySelector("#send_button").style.fill = "#fdcf38";
        }
      } else if (!this.isexchange) {
        if (this.to_send == "") {
          document.querySelector("#send_button").style.fill = "#8a8a8a63";
        } else if (this.to_send != "") {
          if (this.live_chat_on) {
            this.channel.push("started_typing");
            this.stop_typing(this);
          }
          document.querySelector("#send_button").style.fill = "#273679";
        }
      }
    },
    stop_typing: debounce(vm => {
      vm.channel.push("stopped_typing");
    }, 5000),
    scroll_down() {
      if (
        document.querySelector(".chat-body").scrollHeight -
          document.querySelector(".chat-body").scrollTop -
          $(".chat-his")
            .last()
            .height() <=
        document.querySelector(".chat-body").clientHeight
      ) {
        this.to_scroll = false;
      } else {
        this.to_scroll = true;
      }
    },
    load_buttons(message, index, type) {
      var msg = {
        conversation_only: true,
        buttons_list: [],
        button_prefix: message.prefix,
        custom_buttons: true,
        receiving: true,
        received: message.text,
        time: this.generate_time(),
        removable: type == "welcome_message" ? false : true
      };
      if (message.buttons.length == 3) {
        if (
          message.buttons[0].title == "Exchange Rate" &&
          message.buttons[1].title == "Track My Parcel" &&
          message.buttons[2].title == "Call Helpdesk"
        ) {
          msg.removable = false;
        }
      }
      if (
        message.text == "Would you like to share your name and number?" &&
        this.isexchange
      ) {
        $("#response_bot_text").prop("disabled", true);
      }
      for (var i in message.buttons) {
        if (msg.button_prefix != null) {
          msg.buttons_list.push({
            title: message.buttons[i].title,
            value: msg.button_prefix + message.buttons[i].value
          });
        } else {
          msg.buttons_list.push({
            title: message.buttons[i].title,
            value: message.buttons[i].value
          });
        }
        if (
          msg.buttons_list[i].title == "No" &&
          message.text != "Can I help you with anything else?" &&
          this.companyid == "clinicaltrials81352"
        ) {
          msg.buttons_list[i].value = "isdisabled";
        }
      }
      setTimeout(() => {
        this.chat.push(msg);
        if (index == "is_button" || index == 0) {
          setTimeout(() => {
            if (
              $(".chat-body")
                .children()
                .last()
                .height() /
                $(".chat-body").height() <
              0.5
            ) {
              $(".chat-body").animate(
                {
                  scrollTop: $(".chat-body").prop("scrollHeight")
                },
                1500
              );
            } else {
              $(".chat-body").animate(
                {
                  scrollTop: $(".chat-body").prop("scrollTop") + 50
                },
                1500
              );
            }
          }, 1000);
        } else {
          this.to_scroll = true;
        }
        this.$session.set("BotResponse_Conversation", this.chat);
      }, 2500);
    },
    multiselect_load(message, index) {
      var msg = {
        conversation_only: true,
        multiselect_values: message.custom.values,
        placeholder: message.custom.placeholder,
        is_multiselect: true,
        receiving: true,
        received: message.text,
        time: this.generate_time()
      };
      this.chat.push(msg);
    },
    load_table(message, index) {
      let msg = {
        conversation_only: true,
        col_list: Object.keys(message.custom.values[0]),
        table_value: message.custom.values,
        receiving: true,
        received: message.text,
        is_table: true,
        time: this.generate_time()
      };

      setTimeout(() => {
        this.chat.push(msg);
        if (index == 0) {
          setTimeout(() => {
            if (
              $(".chat-body")
                .children()
                .last()
                .height() /
                $(".chat-body").height() <
              0.5
            ) {
              $(".chat-body").animate(
                {
                  scrollTop: $(".chat-body").prop("scrollHeight")
                },
                1500
              );
            } else {
              $(".chat-body").animate(
                {
                  scrollTop: 0.7 * $(".chat-body").prop("scrollHeight")
                },
                1500
              );
            }
          }, 1000);
        } else {
          $(".chat-body").animate(
            {
              scrollTop: $(".chat-body").prop("scrollTop") + 100
            },
            1500
          );
          this.to_scroll = true;
        }
      }, 2500);
    },
    create_chat(message, type) {
      var currency_list = [];
      if (type == "istable") {
        axios
          .get("https://api.exchangeratesapi.io/latest", {
            params: {
              base: "AUD"
            }
          })
          .then(response => {
            for (var i in message.extras[0].TABLE) {
              if (message.extras[0].TABLE[i].PROP == "TR") {
                currency_list.push({
                  currency_title: message.extras[0].TABLE[i].TD,
                  currency_value: parseFloat(
                    Math.round(
                      response.data.rates[message.extras[0].TABLE[i]["TD_1"]] *
                        100
                    ) / 100
                  ).toFixed(4),
                  type: "TR"
                });
              } else if (
                message.extras[0].TABLE[i].PROP == "THEAD" &&
                !this.isexchange
              ) {
                currency_list.push({
                  country_name: message.extras[0].TABLE[i].TD,
                  currency_name: message.extras[0].TABLE[i].TD_1,
                  type: "THEAD"
                });
              }
            }
            ///
            this.currencyexchange_list = currency_list;
            ///
            this.chat.push({
              is_table: true,
              table_title: this.parse(message.title),
              table_list: currency_list
            });
            this.update_scrollbar();
            setTimeout(() => {
              document.querySelector(".typing-indicator").style.display =
                "none";
            }, 1000);
          });
      } else if (type == "isprompt") {
        if (message.level > 0) {
          this.chat.push(message);
          this.$session.set("BotResponse_Conversation", this.chat);
          this.level = message.level;
          this.update_scrollbar("upto_end", "response");
        } else {
          this.chat.push(message);
          this.first_click = true;
          this.level = message.level;
          this.update_scrollbar("upto_end", "response");
        }
      } else {
        this.chat.push(message);
      }
      this.$session.set("BotResponse_Conversation", this.chat);
    },
    submit_custom_form() {
      if (document.querySelector("#details_form") != null) {
        var element = document.querySelector("#details_form");
        element.addEventListener("submit", event => {
          event.preventDefault();
          // actual logic, e.g. validate the form
          var queryString = $("#details_form").serializeArray();
          if (this.form_payload == null) {
            this.form_payload = {};
            for (var i in queryString) {
              this.form_payload[queryString[i].name] = queryString[i].value;
            }
            axios
              .post(api_calls.bot_user_data(), {
                license_key: this.$session.get("UserInformation").license_key,
                data: this.form_payload,
                token: this.bot_response_token_value,
                username: this.$session.get("UserInformation").email,
                source: "Web",
                token: this.bot_response_token_value,
                role: this.$session.get("UserInformation").role
              })
              .then(response => {
                if (response.data == "Bot User Data Saved Successfully") {
                  $("#details_form :input").prop("disabled", true);
                  $("#details_form :button").prop("disabled", true);
                  this.update_scrollbar("upto_end", "response");
                  axios
                    .post(api_calls.chatbot_response_cense(), {
                      chat: "/details_form",
                      token: this.bot_response_token_value,
                      username: this.$session.get("UserInformation").email,
                      source: "Web",
                      user_id: "",
                      license_key: this.$session.get("UserInformation")
                        .license_key,
                      Details: JSON.stringify(this.form_payload),
                      role: this.$session.get("UserInformation").role,
                      refreshed_or_closed: false
                    })
                    .then(resp => {
                      this.response_handling(resp);
                      $(".chat-body").animate(
                        { scrollTop: $(".chat-body").prop("scrollHeight") },
                        1000
                      );
                    });
                }
              })
              .catch(e => {
                // console.log(e);
              });
          }
        });
      }
    },
    update_scrollbar(type, isresponse, iswelcome, delay_value) {
      var scroll_delay = iswelcome == "is_welcome" ? delay_value : 2000;
      document.querySelector(".typing-indicator").style.display = "block";
      if (isresponse == "response") {
        setTimeout(() => {
          document.querySelector(".typing-indicator").style.display = "none";
        }, scroll_delay);
      } else if (isresponse == "sender") {
        $(".chat-body").animate(
          {
            scrollTop: $(".chat-body").prop("scrollHeight")
          },
          750
        );
      }
      if (isresponse != "sender") {
        if (type == "upto_end") {
          setTimeout(() => {
            if (
              $(".chat-body").prop("scrollTop") <
              $(".chat-body").prop("scrollHeight")
            ) {
              if (
                $(".receiver")
                  .last()
                  .parent()
                  .height() /
                  $(".chat-body").height() >
                0.5
              ) {
                $(".chat-body").animate(
                  {
                    scrollTop: 0.75 * $(".chat-body").prop("scrollHeight")
                  },
                  1500
                );
                this.to_scroll = true;
              }
            } else if (
              $(".receiver")
                .last()
                .parent()
                .height() /
                $(".chat-body").height() <
              0.5
            ) {
              $(".chat-body").animate(
                {
                  scrollTop: $(".chat-body").prop("scrollHeight")
                },
                scroll_delay
              );
            }
          }, scroll_delay);
        } else {
          setTimeout(() => {
            document.querySelector(".chat-body").scrollTop =
              document.querySelector(".chat-body").scrollHeight -
              document.querySelector(".chat-body").lastChild.scrollHeight;
          }, 1000);
        }
      }
    },
    FXPaymentMode() {
      this.to_send = "/Foreignxchange17491_payment_mode";
      this.send_message(
        "is_prompt",
        "/Foreignxchange17491_payment_mode",
        "Payment"
      );
    },
    FXTrackingParcel() {
      this.to_send = "/Foreignxchange17491_tracking_parcel";
      this.send_message(
        "is_prompt",
        "/Foreignxchange17491_tracking_parcel",
        "Track My Parcel"
      );
    },
    // ForeignExchangeConversion() {
    //   this.to_send = "/Foreignxchange17491_exchange_rate";
    //   this.send_message(
    //     "is_prompt",
    //     "/Foreignxchange17491_exchange_rate",
    //     "Exchange Rate"
    //   );
    // },
    ForeignExchangeConversion() {
      // this.to_send = "/Foreignxchange17491_exchange_rate";
      this.to_send = '/Foreignxchange17491_exchange_rate{"BUY_OR_SELL": "BUY"}';
      this.send_message(
        "is_prompt",
        '/Foreignxchange17491_exchange_rate{"BUY_OR_SELL": "BUY"}',
        "Exchange Rate"
      );
    },

    ex1() {
      setTimeout(() => {
        if (document.getElementById("r1") != null) {
          $("#l1").val(1);
          for (let i = 0; i < this.currencyexchange_list.length; i++) {
            $("#country").append(
              `<option value="${this.currencyexchange_list[i].currency_value}">${this.currencyexchange_list[i].currency_title}</option>`
            );
          }
          $("#r1").text(document.getElementById("country").value);
          // document.getElementById("r1").addEventListener("keyup", function() {
          //   var x = document.getElementById("r1").innerText;
          //   var con = document.getElementById("country").value;
          //   x = x / con;
          //   x = x.toFixed(4);
          //   $("#l1").val(x);
          // });
          document.getElementById("l1").addEventListener("keyup", function() {
            var x = document.getElementById("l1").value;
            var con = document.getElementById("country").value;
            x = x * con;
            x = x.toFixed(4);
            $("#r1").text(x);
          });
          $(document).on("change", "#country", function() {
            // document.getElementById("country").addEventListener("keyup", function(){
            var x = document.getElementById("l1").value;
            var con = document.getElementById("country").value;
            x = x * con;
            x = x.toFixed(4);
            $("#r1").text(x);
          });
        }
      }, 100);
    },
    adddropdownvalue() {
      if (this.selected_indication[0] != undefined) {
        this.to_send = "";
        this.res = {};
        for (let i = 0; i < this.selected_indication.length; i++) {
          if (i == 0) {
            this.to_send = this.selected_indication[i].title;
          } else {
            this.to_send =
              this.to_send + ", " + this.selected_indication[i].title;
          }
          if (
            this.res[this.selected_indication[i].value.split('"')[1]] ==
            undefined
          ) {
            this.res[
              this.selected_indication[i].value.split('"')[1]
            ] = this.selected_indication[i].value.split('"')[3];
          } else {
            this.res[this.selected_indication[i].value.split('"')[1]] =
              this.res[this.selected_indication[i].value.split('"')[1]] +
              "," +
              this.selected_indication[i].value.split('"')[3];
          }
        }
        this.button_fill();
      } else {
        this.to_send = "";
        this.res = [];
      }
      this.button_fill();
    },
    closed_bot_chat(message,type){
      // debugger;
      // console.log(message);
      this.refreshed_or_closed=true;
      // lastclosedbotinputnode
      if(message.nodes[message.nodes.length-1].node_type=="header"&&message.nodes[message.nodes.length-1].node_type!=null&&!this.empty_string_validity.test(message.nodes[message.nodes.length-1].node_type)){
        if(message.nodes[message.nodes.length-1].title=="Display Message"){
          message.nodes[message.nodes.length-1].title=null;
        }
        this.chat.push({
          receiving: true,
          received: message.nodes[message.nodes.length-1].title,
          conversation_only: true,
          time: null
        });
      }

        // console.log(message.nodes.length);
      for(let i=0;i<message.nodes.length-1;i+= 1){
        // console.log(message.nodes);
        if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="button"&&!message.nodes[i].part_of_form){
          var msg = {
            conversation_only: true,
            buttons_list: [],
            button_prefix: null,
            custom_buttons: true,
            receiving: true,
            time: null,
            removable: type == "welcome_message" ? false : true
          };
          while(message.nodes[i].ui_element!=undefined){
            if(message.nodes[i].ui_element.element_type=="button"){
              msg.buttons_list.push({
                title: message.nodes[i].ui_element.button,
                value: message.nodes[i].ui_element.payload,
                id: message.nodes[i].node_id,
                node: message.nodes[i]
              });
            }
            // msg.buttons_list.push({
            //   title: message.nodes[i].ui_element.buttons,
            //   value: message.nodes[i].ui_element.payload,
            // });
            i++;
          }
          i--;
          this.chat.push(msg);
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="text_box"&&!message.nodes[i].part_of_form){
          this.chat.push({
            receiving: true,
            conversation_only: true,
            time: null,
            received: message.nodes[i].ui_element.message,
          });
          // var msg = {
          //   conversation_only: true,
          //   buttons_list: [],
          //   button_prefix: null,
          //   custom_buttons: true,
          //   receiving: true,
          //   received: '<input type="text" placeholder="'+message.nodes[i].ui_element.placeholder+'"name="closed_bot_node_'+i+'">',
          //   time: null,
          //   removable: type == "welcome_message" ? false : true
          // };
          this.refreshed_or_closed = false;
          // console.log('2');
          // this.chat.push(msg);
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="text_area"&&!message.nodes[i].part_of_form){
          var msg = {
            conversation_only: true,
            buttons_list: [],
            button_prefix: null,
            custom_buttons: true,
            receiving: true,
            // received: '<input type="text" placeholder="'+message.nodes[i].ui_element.placeholder+'"name="closed_bot_node_'+i+'">',
            received: '<textarea class="form-control" rows="4" cols="150"style="padding-left:12px;resize:none;overflow-y:auto;min-height:30px" placeholder="'+message.nodes[i].ui_element.placeholder+'"name="closed_bot_node_'+i+'"></textarea>',
            time: null,
            removable: type == "welcome_message" ? false : true
          };
          this.name_element_for_event_listener = "closed_bot_node_"+i;
          // msg.buttons_list.push({
          //     title: 'Submit',
          //     value: 'Submit',
          //   });
          this.chat.push({
            receiving: true,
            received: message.nodes[i].ui_element.message,
            conversation_only: true,
            time: null
          });
          this.chat.push(msg);
          this.is_text_area = true;
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="email"&&!message.nodes[i].part_of_form){
          this.isemail = true;
          // if(message.nodes[i].validation_successful == false){
          // this.chat.push({
          //   receiving: true,
          //   received: message.nodes[i].ui_element.error_msg,
          //   conversation_only: true,
          //   time: null
          // });
          // this.refreshed_or_closed = false;
          // }
          //  if(!message.nodes[i].validation_successful){
            this.chat.push({
              receiving: true,
              received: message.nodes[i].ui_element.message,
              conversation_only: true,
              time: null
            });
            this.refreshed_or_closed = false;
          //  }
          // var msg = {
          //   conversation_only: true,
          //   buttons_list: [],
          //   button_prefix: null,
          //   custom_buttons: true,
          //   receiving: true,
          //   received: '<input type="email" placeholder="'+message.nodes[i].ui_element.message+'"name="closed_bot_node_'+i+'">',
          //   time: null,
          //   removable: type == "welcome_message" ? false : true
          // };
          // // msg.buttons_list.push({
          // //     title: 'Submit',
          // //     value: 'Submit',
          // //   });
          // this.chat.push(msg);
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="phone_number"&&!message.nodes[i].part_of_form){
          this.is_phone_number = true;
          // if(message.nodes[i].validation_successful == false){
          // this.chat.push({
          //   receiving: true,
          //   received: message.nodes[i].ui_element.error_msg,
          //   conversation_only: true,
          //   time: null
          // });
          // this.refreshed_or_closed = false;
          // }
           this.chat.push({
            receiving: true,
            conversation_only: true,
            time: null,
            received: message.nodes[i].ui_element.message,
          });

          var msg = {
            receiving: true,
            conversation_only: true,
            time: null,
            received: '<div style="display:flex"> <select name="countrycode" class="form-control" style="padding-left:6px !important;padding-right:6px !important; width:40%;height:50px !important;"  >',
            // received: '',
          }
          // var dropdown = [];
            const data = CountryCodes;
            let option;
            for (let i = 0; i < data.length; i++) {
              // option = document.createElement('option');
              // option.text = data[i].country_code;
              // option.value = data[i].calling_code;
              // // dropdown.add(option);
              // msg.received=msg.received + option;
              msg.received= msg.received+'<option value= '+data[i].dial_code+'>'+data[i].code + "("+ data[i].dial_code +")" + '</option>'
            }
            msg.received=msg.received+'</select>';
            msg.received = msg.received + '<input type="text" class="form-control" style="padding-left:12px !important; height:50px !important;" autocomplete="off" name="phonenumber" id= "phonenumber" name="closed_bot_node_'+i+'">  </div>'
            // console.log(msg);
            this.chat.push(msg);
          // this.chat.push({
          // receiving: true,
          // received: message.nodes[i].ui_element.message,
          // conversation_only: true,
          // time: null
          // });
          this.refreshed_or_closed = true;
          this.name_element_for_event_listener = "phonenumber";
          // var msg = {
          //   conversation_only: true,
          //   buttons_list: [],
          //   button_prefix: null,
          //   custom_buttons: true,
          //   receiving: true,
          //   received: '<input type="email" placeholder="'+message.nodes[i].ui_element.message+'"name="closed_bot_node_'+i+'">',
          //   time: null,
          //   removable: type == "welcome_message" ? false : true
          // };
          // // msg.buttons_list.push({
          // //     title: 'Submit',
          // //     value: 'Submit',
          // //   });
          // this.chat.push(msg);
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="hyperlink"&&!message.nodes[i].part_of_form){
          this.chat.push({
            receiving: true,
            conversation_only: true,
            time: null,
            received: '<a href="'+message.nodes[i].ui_element.hyperlink+'" target="_blank">'+message.nodes[i].ui_element.hyperlink+'</a>',
          });
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="radio_buttons"&&!message.nodes[i].part_of_form){
           var msg = {
            receiving: true,
            conversation_only: true,
            time: null,
            received: '',
          }
          this.chat.push({
              receiving: true,
              received: message.nodes[i].ui_element.message,
              conversation_only: true,
              time: null
          });
          // msg.received = message.nodes[i].ui_element.message;
          for(let j=0;j<message.nodes[i].ui_element.radio_buttons.length;j++){
            msg.received=msg.received+'<input type="radio" name="'+message.nodes[i].node_id+'" value="'+message.nodes[i].ui_element.radio_buttons[j].title+'">'+message.nodes[i].ui_element.radio_buttons[j].title+'<br>';
          }
          this.chat.push(msg);
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="check_box"&&!message.nodes[i].part_of_form){
          var msg = {
            receiving: true,
            conversation_only: true,
            time: null,
            received: '',
          }
          this.chat.push({
              receiving: true,
              received: message.nodes[i].ui_element.message,
              conversation_only: true,
              time: null
          });
          for(let j=0;j<message.nodes[i].ui_element.values.length;j++){
            msg.received=msg.received+'<input type="checkbox" name="'+message.nodes[i].node_id+'" value="'+message.nodes[i].ui_element.values[j].title+'">'+message.nodes[i].ui_element.values[j].title+'<br>';
          }
          this.chat.push(msg);
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="dropdown"&&!message.nodes[i].part_of_form){
          var msg = {
            receiving: true,
            conversation_only: true,
            time: null,
            received: '<select name="'+message.nodes[i].node_id+'" class="form-control" ><option value disabled="disabled">'+message.nodes[i].ui_element.message+'</option>',
            // received: '',
          }

          for(let j=0;j<message.nodes[i].ui_element.dropdown.length;j++){
            msg.received=msg.received+'<option>'+message.nodes[i].ui_element.dropdown[j].title+'</option>';
          }
          msg.received=msg.received+'</select>';
          this.chat.push(msg);
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="image"&&!message.nodes[i].part_of_form){
          this.chat.push({
            receiving: true,
            conversation_only: true,
            time: null,
            received: '<img width="210px" height="140px" src="'+message.nodes[i].ui_element.image+'">',
          });
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="video"&&!message.nodes[i].part_of_form){
          this.chat.push({
            receiving: true,
            conversation_only: true,
            time: null,
            received: '<iframe width="210px" height="140px" src="'+message.nodes[i].ui_element.video+'"</iframe>',
          });
        } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="message"&&!message.nodes[i].part_of_form){
          this.chat.push({
            receiving: true,
            conversation_only: true,
            time: null,
            received: message.nodes[i].ui_element.message,
          });
        } else if(message.nodes[i].node_type=="node"){
          var msg = {
            receiving: true,
            conversation_only: true,
            time: null,
            received: '',
          }
          var form='<form id="'+message.nodes[i].form_name.replace(' ','_')+'">';
          while(message.nodes[i].part_of_form){
            // form=form+'<br>'
            if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="text_box"){
              form=form+'<div class="form-group">';
              form=form+'<p style="margin-bottom:0px;font-weight:450;font-size:15px;">'+message.nodes[i].header+'</p>';
              form=form+'<input name="'+message.nodes[i].header+'" class="form-control" style="padding-left:10px !important" type="text" placeholder="'+message.nodes[i].ui_element.placeholder+'"name="closed_bot_node_'+i+'">';
              form=form+'</div>';

            } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="dropdown"){
              form=form+'<div class="form-group">';
              form=form+'<p style="margin-bottom:0px;font-weight:450;font-size:15px;">'+message.nodes[i].header+'</p>';
              form=form+'<select name="'+message.nodes[i].header+'" class="form-control" >'
              for(let j=0;j<message.nodes[i].ui_element.dropdown.length;j++){
                form=form+'<option>'+message.nodes[i].ui_element.dropdown[j].title+'</option>';
              }
              form=form+'</select>';
              form=form+'</div>';
            } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="check_box"){
              form=form+'<div class="form-group">';
              form=form+'<p style="margin-bottom:0px;font-weight:450;font-size:15px;">'+message.nodes[i].header+'</p>';
              for(let j=0;j<message.nodes[i].ui_element.values.length;j++){
                form=form+'<input type="checkbox" name="'+message.nodes[i].header+'" value="'+message.nodes[i].ui_element.values[j].title+'">'+message.nodes[i].ui_element.values[j].title+'<br>';
              }
              form=form+'</div>';
            } else if(message.nodes[i].node_type=="node"&&message.nodes[i].ui_element.element_type=="radio_buttons"){
              form=form+'<div class="form-group">';
              form=form+'<p style="margin-bottom:0px;font-weight:450;font-size:15px;">'+message.nodes[i].header+'</p>';
              for(let j=0;j<message.nodes[i].ui_element.radio_buttons.length;j++){
                form=form+'<input type="radio" name="'+message.nodes[i].header+'" value="'+message.nodes[i].ui_element.radio_buttons[j].title+'">'+message.nodes[i].ui_element.radio_buttons[j].title+'<br>';
              }
              form=form+'</div>';
            }
            // form=form+'<br>'
            i++
          }
          i--;
          form = form+'<button type="submit" class="btn btn-primary">Submit</button></form>'
          this.isformon=true;
          this.form_name=message.nodes[i].form_name.replace(' ','_');
          msg.received=form;
          this.chat.push(msg);
          this.submit_closed_form_data();
        }
        this.chat.push({
          receiving: true,
          conversation_only: true,
          time: this.generate_time(),
          received: null,
        });
        if(message.nodes[i].ui_element.element_type!='message'&&message.nodes[i].ui_element.element_type!='image'&&message.nodes[i].ui_element.element_type!='video'&&message.nodes[i].ui_element.element_type!='button'&&message.nodes[i].ui_element.element_type!='hyperlink'){
          this.lastclosedbotinputnode=this.chat.length-1;
          this.selectednodeid=message.nodes[i];
        }
        if(message.nodes[i].ui_element.element_type=='button'){
          this.lastclosedbotinputnode=this.chat.length-2;
          this.selectednodeid=message.nodes[i];
        }
        if(message.nodes[i].is_leaf){
          this.isclosedboton=false;
          this.refreshed_or_closed=false;
          this.refreshed_or_closed=true;
        }
      }
      setTimeout(() => {
        var vm = this;
        vm.to_scroll = true;
        if (
          $(".chat-body")
            .children()
            .last()
            .height() /
            $(".chat-body").height() <
          0.5
        ) {
          $(".chat-body").animate(
            {
              scrollTop: $(".chat-body").prop("scrollHeight")
            },
            1500
          );
        } else if (
          $(".receiver")
            .last()
            .parent()
            .height() /
            $(".chat-body").height() >
            0.5 &&
          $(".receiver")
            .last()
            .parent()
            .height() /
            $(".chat-body").height() <
            0.6
        ) {
          $(".chat-body").animate(
            {
              scrollTop: 0.9 * $(".chat-body").prop("scrollHeight")
            },
            1500
          );
        } else {
          $(".chat-body").animate(
            {
              scrollTop: 0.75 * $(".chat-body").prop("scrollHeight")
            },
            1500
          );
        }
        if($(".chat-body").scrollTop()==0){
          this.to_scroll=false;
        }
        // console.log($('[name='+vm.name_element_for_event_listener+']'))
        if(vm.name_element_for_event_listener != null){
          $('[name='+vm.name_element_for_event_listener+']')[0].addEventListener('keyup', vm.append_message_to_chatbox)
        }
      }, 1000);
    },
    submit_closed_form_data(type,message){
      // debugger;
      // console.log(type, 'Hello Harsh');
      if (document.querySelector("#chat"+(this.lastclosedbotinputnode-1)) != null&&type=='is_button'&&message.title=="Submit"){
        var element = document.querySelector("#chat"+(this.lastclosedbotinputnode+1));
        var queryString = $("#chat"+(this.lastclosedbotinputnode-1)+" :input").serializeArray();
        if(this.closed_form_reply_data==null){
          document.querySelector(".typing-indicator").style.display = "block";
          this.closed_form_reply_data={};
          for (var i in queryString) {
            this.closed_form_reply_data[queryString[i].name] = queryString[i].value;
          }
          for (var i in queryString) {
            this.closed_form_reply_data.queryString[i].name.push(queryString[i].value);;
          }
          axios
            .post(api_calls.closed_form_response_api(),{
              license_key: this.$session.get("UserInformation").license_key,
              uid: this.$session.get("UserInformation").email,
              chat: this.closed_form_reply_data,
              node_selected: this.selectednodeid,
              bot_name: this.bot_name,
              conversation_id : this.conversation_id,
            })
            .then(response=>{
              document.querySelector(".typing-indicator").style.display = "none";
              this.closed_form_reply_data=null;
              this.closed_bot_chat(response.data);
            });
        }
      } else if(type=='is_button'){
        this.refreshed_or_closed = true;
        this.chat.push({
          sent: message.title,
          sending: true,
          time: this.generate_time(),
          conversation_only: true,
          delivered: true,
          dropdown: ""
        });
        document.querySelector(".typing-indicator").style.display = "block";
        axios
          .post(api_calls.closed_form_response_api(),{
            license_key: this.$session.get("UserInformation").license_key,
            uid: this.$session.get("UserInformation").email,
            chat: message.title,
            // node_selected: {node_id: message.id},
            node_selected:  message.node,
            conversation_id : this.conversation_id,
            bot_name: this.bot_name,
          })
          .then(response=>{
            document.querySelector(".typing-indicator").style.display = "none";
            this.closed_form_reply_data=null;
            this.closed_bot_chat(response.data);
          });
      } else if(type==undefined&&!this.isformon && !this.isemail &&!this.is_phone_number && this.is_text_area){
        this.disable_name_element_for_event_listener();
        // $('[name='+this.name_element_for_event_listener+']').attr("disabled", 'disabled')
        // this.name_element_for_event_listener = null;
        var element = document.querySelector("#chat"+(this.lastclosedbotinputnode+1));
        var queryString = $("#chat"+(this.lastclosedbotinputnode-1)+" :input").serializeArray();
        if(this.closed_form_reply_data==null){
          document.querySelector(".typing-indicator").style.display = "block";
          this.closed_form_reply_data={};
          for (var i in queryString) {
            this.closed_form_reply_data[queryString[i].name] = [];
          }
          for (var i in queryString) {
            this.closed_form_reply_data[queryString[i].name].push(queryString[i].value);;
          }
          this.chat.push({
            sent: this.to_send,
            sending: true,
            time: this.generate_time(),
            conversation_only: true,
            delivered: true,
            dropdown: ""
          });
          axios
            .post(api_calls.closed_form_response_api(),{
              license_key: this.$session.get("UserInformation").license_key,
              uid: this.$session.get("UserInformation").email,
              chat: this.to_send,
              node_selected: this.selectednodeid,
              conversation_id : this.conversation_id,
              bot_name: this.bot_name,
            })
            .then(response=>{
              document.querySelector(".typing-indicator").style.display = "none";
              this.closed_form_reply_data=null;
              this.closed_bot_chat(response.data);
            });
        }
      } else if(type==undefined&&this.isformon && !this.isemail &&!this.is_phone_number){
        if(document.querySelector("#"+this.form_name)!=null){
          var element = document.querySelector("#"+this.form_name);
          element.addEventListener("submit", event => {
            event.preventDefault();
            var queryString = $("#"+this.form_name).serializeArray();
            if (this.closed_form_reply_data == null) {
              document.querySelector(".typing-indicator").style.display = "block";
              this.closed_form_reply_data = {};
              for (var i in queryString) {
                this.closed_form_reply_data[queryString[i].name] = [];
              }
              for (var i in queryString) {
                this.closed_form_reply_data[queryString[i].name].push(queryString[i].value);;
              }
              axios
                .post(api_calls.closed_form_response_api(),{
                  license_key: this.$session.get("UserInformation").license_key,
                  uid: this.$session.get("UserInformation").email,
                  chat: this.closed_form_reply_data,
                  node_selected: this.selectednodeid,
                  conversation_id : this.conversation_id,
                  bot_name: this.bot_name,
                })
                .then(response=>{
                  document.querySelector(".typing-indicator").style.display = "none";
                  $("#"+this.form_name+" :input").prop("disabled", true);
                  // console.log("#"+this.form_name+":input");
                  this.closed_form_reply_data=null;
                  this.closed_bot_chat(response.data);
                });
            }
          });
        }
      } else if(type==undefined&&this.isemail){
        // alert(this.to_send);
        if(document.querySelector("#chat"+(this.lastclosedbotinputnode-1)) != null){
          this.chat.push({
          sent: this.to_send,
          sending: true,
          time: this.generate_time(),
          conversation_only: true,
          delivered: true,
          dropdown: ""
        });

          var element = document.querySelector("#chat"+(this.lastclosedbotinputnode+1));
          var queryString = $("#chat"+(this.lastclosedbotinputnode-1)+" :input").serializeArray();
          var x = this.lastclosedbotinputnode-1
          // if(this.closed_form_reply_data==null){
            document.querySelector(".typing-indicator").style.display = "block";
            this.closed_form_reply_data={};
            axios
              .post(api_calls.closed_form_response_api(),{
                license_key: this.$session.get("UserInformation").license_key,
                uid: this.$session.get("UserInformation").email,
                chat: this.to_send,
                node_selected: this.selectednodeid,
                conversation_id : this.conversation_id,
                bot_name: this.bot_name,
              })
              .then(response=>{
                var error_variable = null;
                document.querySelector(".typing-indicator").style.display = "none";
                  for(let i=0; i<response.data.nodes.length - 1 ; i += 1){
                     if(response.data.nodes[i].validation_successful != undefined &&  response.data.nodes[i].validation_successful == false ){
                       error_variable = i;
                           this.chat.push({
                        receiving: true,
                        received: response.data.nodes[i].ui_element.error_msg,
                        conversation_only: true,
                        time: null
                      });
                      this.refreshed_or_closed = false;
                     }
                  }
                 if(error_variable == null){
                  this.closed_form_reply_data=null;
                  this.isemail = false
                  this.closed_bot_chat(response.data);
                 }

              });
        }
      }else if(type==undefined&&this.is_phone_number){
        if(document.querySelector("#chat"+(this.lastclosedbotinputnode-1)) != null){
          if(this.is_phone_number_otp == true){
            var dts = this.to_send;
            this.chat.push({
              sent: this.to_send,
              sending: true,
              time: this.generate_time(),
              conversation_only: true,
              delivered: true,
              dropdown: ""
            });
          }
          else {
              console.log(this.lastclosedbotinputnode);
              if(this.is_phone_number_err_msg){
              var x = $("#chat"+(this.lastclosedbotinputnode-1)+" :input").serializeArray();
              console.log("if loop");
              console.log(this.lastclosedbotinputnode);
              }
              else {
              console.log("else loop");
              var x = $("#chat"+(this.lastclosedbotinputnode-1)+" :input").serializeArray();
              }
              console.log(x);
              var dts = x[0].value + x[1].value;
              this.chat.push({
              sent: dts,
              sending: true,
              time: this.generate_time(),
              conversation_only: true,
              delivered: true,
              dropdown: ""
            });
          }
          // this.disable_name_element_for_event_listener();
          // var element = document.querySelector("#chat"+(this.lastclosedbotinputnode+1));
          // var queryString = $("#chat"+(this.lastclosedbotinputnode-1)+" :input").serializeArray();
          // if(this.closed_form_reply_data==null){
            document.querySelector(".typing-indicator").style.display = "block";
            this.closed_form_reply_data={};
            axios
              .post(api_calls.closed_form_response_api(),{
                license_key: this.$session.get("UserInformation").license_key,
                uid: this.$session.get("UserInformation").email,
                chat:dts,
                node_selected: this.selectednodeid,
                conversation_id : this.conversation_id,
                bot_name: this.bot_name,
              })
              .then(response=>{
                // console.log(this.chat);
                this.to_send = "";
                var error_variable = null;
                document.querySelector(".typing-indicator").style.display = "none";
                for(let i=0; i<response.data.nodes.length - 1 ; i += 1){
                     if(response.data.nodes[i].ui_element.validate == "phone_number" && response.data.nodes[i].validation_successful != undefined &&  response.data.nodes[i].validation_successful == false ){
                      this.is_phone_number_err_msg = true;
                      this.closed_form_reply_data=null;
                       error_variable = i;
                       console.log(response.data);
                      //  this.selectednodeid = response.data.nodes;
                           this.chat.push({
                        receiving: true,
                        received: response.data.nodes[i].ui_element.error_msg,
                        conversation_only: true,
                        time: null
                      });
                          var msg = {
                    receiving: true,
                    conversation_only: true,
                    time: null,
                    received: '<div style="display:flex"> <select name="countrycode" class="form-control" style="padding-left:6px !important;padding-right:6px !important; width:40%;height:50px !important;"  >',
                    // received: '',
                  }
                  console.log("reached here")
                  // var dropdown = [];
                    this.disable_name_element_for_event_listener();
                    const data = CountryCodes;
                    let option;
                    for (let i = 0; i < data.length; i++) {
                      // option = document.createElement('option');
                      // option.text = data[i].country_code;
                      // option.value = data[i].calling_code;
                      // // dropdown.add(option);
                      // msg.received=msg.received + option;
                      msg.received= msg.received+'<option value= '+data[i].dial_code+'>'+data[i].code + "("+ data[i].dial_code +")" + '</option>'
                    }
                    msg.received=msg.received+'</select>';
                    msg.received = msg.received + '<input type="text" class="form-control" style="padding-left:12px !important; height:50px !important;" autocomplete="off" name="phonenumber" id= "phonenumber" name="closed_bot_node_'+i+'">  </div>'
                    // console.log(msg);
                    this.chat.push(msg);
                  // this.chat.push({
                  // receiving: true,
                  // received: message.nodes[i].ui_element.message,
                  // conversation_only: true,
                  // time: null
                  // });
                  // this.disable_name_element_for_event_listener();

                  
                  this.refreshed_or_closed = true;
                  if(this.name_element_for_event_listener!= null){
                    $('[name='+this.name_element_for_event_listener+']').off('keyup', vm.append_message_to_chatbox)
                  }
                  this.name_element_for_event_listener = "phonenumber";
                  var vm = this;
                  this.lastclosedbotinputnode=this.chat.length;
                  console.log(this.lastclosedbotinputnode);
                  var len = $('[name='+vm.name_element_for_event_listener+']').length;
                  setTimeout(() => {
                    // if(vm.name_element_for_event_listener != null){
                    //   console.log($('[name='+vm.name_element_for_event_listener+']'))
                    //   if($('[name='+vm.name_element_for_event_listener+']').length>1){
                    //       console.log($('[name='+vm.name_element_for_event_listener+']')[len])
                          $('[name='+vm.name_element_for_event_listener+']')[len].addEventListener('keyup', vm.append_message_to_chatbox)
                      // }else {
                        $('[name='+vm.name_element_for_event_listener+']')[0].addEventListener('keyup', vm.append_message_to_chatbox)
                      // }
                    // }
                  }, 2000);
                      this.refreshed_or_closed = true;
                     } else if(response.data.nodes[i].ui_element.validate != undefined &&  response.data.nodes[i].ui_element.validate == "otp" && response.data.nodes[i].validation_successful == true ){
                        this.closed_form_reply_data=null;
                        this.selectednodeid = response.data.nodes[i];
                        error_variable = i;
                        this.is_phone_number_otp = true;
                        this.chat.push({
                        receiving: true,
                        received: response.data.nodes[i].ui_element.otp_question_label,
                        conversation_only: true,
                        time: null
                      });
                     } else if(response.data.nodes[i].ui_element.validate != undefined && response.data.nodes[i].ui_element.validate == "otp" && response.data.nodes[i].validation_successful == false  ){
                        this.closed_form_reply_data=null;
                        this.selectednodeid = response.data.nodes[i];
                        error_variable = i;
                        this.chat.push({
                        receiving: true,
                        received: response.data.nodes[i].ui_element.incorrect_otp_msg,
                        conversation_only: true,
                        time: null
                      });
                     }
                    this.refreshed_or_closed = false;
                    console.log("reached here2")
                  }
                if(error_variable == null){
                  this.closed_form_reply_data=null;
                  this.disable_name_element_for_event_listener();
                  // setTimeout(() => {
                    this.is_phone_number = false;
                  // }, 1);
                  this.closed_bot_chat(response.data);
                }
              });
          // }
        }
      } else if(type==undefined&&!this.isformon && !this.isemail &&!this.is_phone_number && !this.is_text_area){
         this.chat.push({
          sent: this.to_send,
          sending: true,
          time: this.generate_time(),
          conversation_only: true,
          delivered: true,
          dropdown: ""
        });
          axios
            .post(api_calls.closed_form_response_api(),{
              license_key: this.$session.get("UserInformation").license_key,
              uid: this.$session.get("UserInformation").email,
              chat: this.to_send,
              node_selected: this.selectednodeid,
              conversation_id : this.conversation_id,
              bot_name: this.bot_name,
            })
            .then(response=>{
              document.querySelector(".typing-indicator").style.display = "none";
              this.closed_form_reply_data=null;
              this.closed_bot_chat(response.data);
            });
      }
    },
    getdata(){
      if(!this.isformon && !this.is_phone_number){
        var queryString = $("#chat"+(this.lastclosedbotinputnode-1)+" :input").serializeArray();
        this.to_send='';
        for(let i=0;i<queryString.length;i++){
          if(i==0){
            this.to_send=queryString[i].value;
          } else {
            this.to_send=this.to_send + "," + queryString[i].value;
          }
        }
      }
      this.button_fill();
    },
    append_message_to_chatbox(){
      console.log(this.name_element_for_event_listener, this.is_phone_number);
      
      console.log($('[name='+this.name_element_for_event_listener+']'));
      if(this.is_text_area){
        this.to_send = $('[name='+this.name_element_for_event_listener+']')[0].value;
        this.button_fill();
      }
      if(this.is_phone_number){
        var len = $('[name='+this.name_element_for_event_listener+']').length;
        this.to_send = $('[name='+this.name_element_for_event_listener+']')[len-1].value;      
        }
    },
    disable_name_element_for_event_listener(){
      // console.log("We are here disabled function")
      $('[name='+this.name_element_for_event_listener+']').attr("disabled", 'disabled')
        // $('[name='+this.name_element_for_event_listener+']').remove();
      this.name_element_for_event_listener = null;
      if(this.is_phone_number){
        $('[name=countrycode]').attr("disabled", 'disabled')
        // $('[name=countrycode]').remove();
      }
    },
    go_to_design_bots_page(){
      this.$router.push('/bot/designbot')
    }

    //sell function for foreign exchange
    // ex2() {
    //   setTimeout(() => {
    //     if (document.getElementById("r2") != null) {
    //       $("#l2").val(1);
    //       for (let i = 0; i < this.currencyexchange_list.length; i++) {
    //         $("#country2").append(
    //           `<option value="${this.currencyexchange_list[i].currency_value}">${this.currencyexchange_list[i].currency_title}</option>`
    //         );
    //       }
    //       $("#r2").val(document.getElementById("country2").value);
    //       document.getElementById("r2").addEventListener("keyup", function() {
    //         var x = document.getElementById("r2").value;
    //         var con = document.getElementById("country2").value;
    //         x = x / con;
    //         x = x.toFixed(4);
    //         $("#l2").val(x);
    //       });
    //       document.getElementById("l2").addEventListener("keyup", function() {
    //         var x = document.getElementById("l2").value;
    //         var con = document.getElementById("country2").value;
    //         x = x * con;
    //         x = x.toFixed(4);
    //         $("#r2").val(x);
    //       });
    //       $(document).on("change", "#country2", function() {
    //         // document.getElementById("country2").addEventListener("keyup", function(){
    //         var x = document.getElementById("l2").value;
    //         var con = document.getElementById("country2").value;
    //         x = x * con;
    //         x = x.toFixed(4);
    //         $("#r2").val(x);
    //       });
    //     }
    //   }, 3000);
    // }
  }
};
"},null]}