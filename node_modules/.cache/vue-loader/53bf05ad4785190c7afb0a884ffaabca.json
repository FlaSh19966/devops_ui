{"remainingRequest":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Elixir/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/SmsTemplates.vue?vue&type=template&id=30097c32&scoped=true&","dependencies":[{"path":"/home/vimalesh/Elixir/chatbot-portal/src/portal/Chatbot/Dashboard/ProductManagement/SmsTemplates.vue","mtime":1643027096180},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Elixir/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiBjbGFzcz0ic3Bpbm5lciIgaWQ9InNwaW5uZXIiIHYtc2hvdz0ic3Bpbm5lck9uIj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgcC0wIj4KICAgIDxkaXYgY2xhc3M9ImNhcmQgZGFzaC1jYXJkIiBzdHlsZT0iYm9yZGVyOiAwIj4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGQtZmxleCBteS0xIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBwbC0yIGQtZmxleCI+CiAgICAgICAgPGlucHV0CiAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgbXItYXV0byIKICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogNDBweDsgcGFkZGluZzogMHB4IDE1cHg7IgogICAgICAgICAgICBpZD0ic2VhcmNoX2Jhcl9pZCIKICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlYXJjaCB0ZW1wbGF0ZSBoZXJlIgogICAgICAgICAgICB2LW1vZGVsLnRyaW09InNlYXJjaF9uYW1lIgogICAgICAgICAgICB2LW9uOmtleXVwPSJjYWxsc2VhcmNoIgogICAgICAgIC8+CiAgICAgICAgPGEKICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgIHYtaWY9ImlzVmlzaWJsZVNlYXJjaENsZWFyIgogICAgICAgICAgY2xhc3M9ImJ0biBiZy10cmFuc3BhcmVudCBtdC1hdXRvIG1iLWF1dG8gcHktMCIKICAgICAgICAgIEBjbGljaz0iY2xlYXJfc2VhcmNoX25hbWUiCiAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IC00MHB4OyB6LWluZGV4OiAxMCIKICAgICAgICA+CiAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTggcHItMCBkLWZsZXgiPgogICAgICAgICAgPGEKICAgICAgICAgIGlkPSJjaGVja19iYWxhbmNlX2J0biIKICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIG1sLWF1dG8iCiAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNXB4OyBtYXJnaW4tcmlnaHQ6IDEwcHg7IgogICAgICAgICAgZGF0YS10YXJnZXQ9IiNjaGVja2JhbGFuY2UiCiAgICAgICAgICBAY2xpY2s9ImNoZWNrX2FkZG9uc19iYWxhbmNlIgogICAgICAgICAgdGl0bGU9IkNoZWNrIHlvdXIgU01TIGNyZWRpdHMiCiAgICAgICAgPgogICAgICAgICAgQ2hlY2sgQmFsYW5jZQogICAgICAgIDwvYT4KICAgICAgICA8YQogICAgICAgICAgaWQ9InNlbmRfc21zX2J0biIKICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgZGF0YS10YXJnZXQ9IiNzZW5kc21zIgogICAgICAgICAgdGl0bGU9IlNlbmQgU01TIgogICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTVweDsgbWFyZ2luLXJpZ2h0OiAxMHB4OyIKICAgICAgICAgIHYtaWY9InRlbXBsYXRlbGlzdC5sZW5ndGggPiAwICYmIGlzX25vdGlmaWNhdGlvbl90ZW1wbGF0ZSA9PT0gZmFsc2UiCiAgICAgICAgPgogICAgICAgICAgU2VuZCBTTVMKICAgICAgICA8L2E+CiAgICAgICAgPGEKICAgICAgICAgIGlkPSJhZGRfdGVtcGxhdGVfYnRuIgogICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICBkYXRhLXRhcmdldD0iI2FkZHRlbXBsYXRlbW9kZWwiCiAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNXB4OyBtYXJnaW4tcmlnaHQ6IDEwcHg7IgogICAgICAgICAgdGl0bGU9IkFkZCBuZXcgVGVtcGxhdGUiCiAgICAgICAgICBAY2xpY2s9ImVtcHR5X3ZhcmlhYmxlIgogICAgICAgID4KICAgICAgICAgIEFkZCBUZW1wbGF0ZQogICAgICAgIDwvYT4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgIGlkPSJkZWxldGVfaW50ZW50IgogICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTogMTVweDsgbWFyZ2luLXJpZ2h0OiAxMHB4OyIKICAgICAgICAgIEBjbGljaz0iZGVsZXRlX3RlbXBsYXRlIgogICAgICAgID4KICAgICAgICAgIERlbGV0ZQogICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcHktMCIgaWQ9InBhZ2UiPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgZC1mbGV4IHB4LTAiIHYtaWY9InRlbXBsYXRlbGlzdC5sZW5ndGggPiAwIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBwbC0wIiBzdHlsZT0iaGVpZ2h0OiA4MHZoOyBvdmVyZmxvdy15OiBhdXRvIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLWJveCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUiPgogICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiIHN0eWxlPSJvdmVyZmxvdy15OiBhdXRvIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgPCEtLSA8dHI+IC0tPgogICAgICAgICAgICAgICAgICA8dGggc2NvcGU9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1jaGVjayBjaGVja2JveCBjaGVja2JveC1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1jaGVjay1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNoZWNrLWlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJzZWxlY3RhbGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iY2hlY2tib3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0ic2VsZWN0ZWRfdGVtcGxhdGVzKCdhbGwnKSIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgPHRoCiAgICAgICAgICAgICAgICAgICAgc2NvcGU9InJvdyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1sZWZ0IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IG5vcm1hbCBub3JtYWwgbm9ybWFsIDE2cHgvMjJweCBSb2JvdG87CiAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMHB4OwogICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICM0MTQxNDE7CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgVEVNUExBVEVTCiAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgIDwhLS0gPC90cj4gLS0+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHRlbXBsYXRlLCBpbmRleCkgaW4gdGVtcGxhdGVsaXN0IgogICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgIDpjbGFzcz0iY2hlY2tfY3VycmVudF90ZW1wbGF0ZV9hY3RpdmUoaW5kZXgpIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHRkIHNjb3BlPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1jaGVjayBjaGVja2JveCBjaGVja2JveC1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWNoZWNrLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNoZWNrLWlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iY2hlY2tib3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9J2luZGV4JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX3RlbXBsYXRlcyh0ZW1wbGF0ZS50ZW1wbGF0ZV9pZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY24iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzaG93X3RlbXBsYXRlKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT0idGVtcGxhdGUudGVtcGxhdGVfbmFtZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB0ZW1wbGF0ZS50ZW1wbGF0ZV9uYW1lIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2CiAgICAgICAgICBjbGFzcz0iY29sLXNtLTggcHItMCIKICAgICAgICAgIHN0eWxlPSJvdmVyZmxvdy15OiBhdXRvIgogICAgICAgICAgdi1pZj0idGVtcGxhdGVsaXN0Lmxlbmd0aCA+IDAiCiAgICAgICAgPgogICAgICAgICAgPGRpdiBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgI2RiZTJlOCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtYi0wIHB0LTIgZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im10LTIgbWItMCI+VGVtcGxhdGUgRGV0YWlsczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWwtYXV0byBtdC0yIG1iLTAiCiAgICAgICAgICAgICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgIHRpdGxlPSJDbGljayBIZXJlIGZvciBQcmV2aWV3IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogcmdiKDM5LCA1NCwgMTIxKSIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InByZXZpZXdfdGVtcGxhdGUoJ29sZCcpIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGFiZTEiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXJpZ2h0OiAxcmVtOyBmb250LXNpemU6IDEuMjVyZW0iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgUHJldmlldwogICAgICAgICAgICAgICAgICAgIDwvcD48L2EKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZWRpdF90ZW1wbGF0ZV9kZXRhaWxzIgogICAgICAgICAgICAgICAgICAgIHYtaHRtbD0icGVuY2lsX3N2ZyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXItMiBtdC0yIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiCiAgICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGhyIHN0eWxlPSJtYXJnaW4tdG9wOiAwIiAvPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPgogICAgICAgICAgICAgICAgICBUZW1wbGF0ZSBOYW1lCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9IiFpc0VkaXRUZW1wbGF0ZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMjBweCI+CiAgICAgICAgICAgICAgICA8cD57eyBjdXJyZW50X3RlbXBsYXRlLnRlbXBsYXRlX25hbWUgfX08L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiB2LWVsc2U+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgaWQ9ImVkaXRfdGVtcGxhdGVfbmFtZV9pZCIKICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgdi1tb2RlbC50cmltPSJjdXJyZW50X3RlbXBsYXRlLnRlbXBsYXRlX25hbWUiCiAgICAgICAgICAgICAgICAgIHYtb246a2V5dXA9InZhbGlkYXRlX2VkaXRfdGVtcGxhdGVfbmFtZSIgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogMC4zNzVyZW0gMC43NXJlbSIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIFRlbXBsYXRlIE5hbWUiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgdi1zaG93PSJlZGl0X3RlbXBsYXRlX25hbWVfYWxyZWFkeV9leGlzdCIKICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiByZWQiCiAgICAgICAgICAgICAgICAgID5BIFRlbXBsYXRlIHdpdGggdGhpcyBuYW1lIGFscmVhZHkgZXhpc3RzLjwvc3BhbgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJjb2wtc20tMTIiCiAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDFyZW0iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIEJvZHk8L3A+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgPHA+e3sgY3VycmVudF90ZW1wbGF0ZS50ZW1wbGF0ZV9ib2R5IH19PC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJjb2wtc20tMTIiCiAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDFyZW0iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIEV4YW1wbGU8L3A+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgPHA+e3sgY3VycmVudF90ZW1wbGF0ZS50ZW1wbGF0ZV9leGFtcGxlIH19PC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIgogICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlRlbXBsYXRlIFZhcmlhYmxlczwvcD4KICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgPHRhYmxlIHYtaWY9IiFpc0VkaXRUZW1wbGF0ZSIgc3R5bGU9IndpZHRoOiAxMDAlOyI+CiAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICA8dHIgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyI+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtc20tNCIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgIFZhcmlhYmxlcwogICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtc20tOCIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgIFZhbHVlcwogICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIodmFsdWUsIG5hbWUsIGluZGV4KSBpbiBjdXJyZW50X3RlbXBsYXRlLnZhcmlhYmxlX2RpY3QiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJib3JkZXI6IDFweCBzb2xpZCBibGFjazsiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Ij4KICAgICAgICAgICAgICAgICAgICAgIHt7bmFtZX19CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyI+CiAgICAgICAgICAgICAgICAgICAgICB7e2N1cnJlbnRfdGVtcGxhdGUudmFyaWFibGVfZGljdFtuYW1lXX19CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgIDx0YWJsZSB2LWVsc2Ugc3R5bGU9IndpZHRoOiAxMDAlOyI+CiAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtc20tNCIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgICAgVmFyaWFibGVzCiAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC1zbS04IiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgICBWYWx1ZXMKICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKHZhbHVlLCBuYW1lLCBpbmRleCkgaW4gY3VycmVudF90ZW1wbGF0ZS52YXJpYWJsZV9kaWN0IgogICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx0ZCA+CiAgICAgICAgICAgICAgICAgICAgICB7e25hbWV9fQogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IiAKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY3VycmVudF90ZW1wbGF0ZS52YXJpYWJsZV9kaWN0W25hbWVdIiAKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDsKICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIiB2LWlmPSJpc0VkaXRUZW1wbGF0ZSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGFzaC1tb2RhbCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCB0ZXh0LXJpZ2h0IG10LTAgcHktMCBib3JkZXItdG9wLTAiPgogICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJvcmRlci1yYWRpdXM6IDAiCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImVkaXRfdGVtcGxhdGVfZGV0YWlscyIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIENhbmNlbAogICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc2F2ZSIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImVkaXRfdGVtcGxhdGUoKSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFNhdmUKICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBkLWZsZXggcHgtMCBweS01IiB2LWVsc2UtaWY9InNlYXJjaF9uYW1lID09ICcnIj4KICAgICAgICA8aDQgY2xhc3M9Im14LWF1dG8iPgogICAgICAgICAgTG9va3MgbGlrZSB5b3UgZG9uJ3QgaGF2ZSBhbnkgdGVtcGxhdGVzIGFkZGVkLiBMZXQncyBiZWdpbiBieQogICAgICAgICAgY2xpY2tpbmcgb24gQWRkIFRlbXBsYXRlLgogICAgICAgIDwvaDQ+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgZC1mbGV4IHB4LTAgcHktNSIgdi1lbHNlLWlmPSJ0ZW1wbGF0ZWxpc3QubGVuZ3RoID09IDAgJiYgc2VhcmNoX25hbWUgIT0gJyciPgogICAgICAgIDxoNCBjbGFzcz0ibXgtYXV0byI+CiAgICAgICAgICBTZWFyY2hlZCBUZW1wbGF0ZSBub3QgZm91bmQuCiAgICAgICAgPC9oND4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9InBhZ2luLXRhYmxlIHBiLTMiIHYtaWY9InRlbXBsYXRlbGlzdC5sZW5ndGggPiAwIiBzdHlsZT0ibWFyZ2luLXRvcDogMiUiPgogICAgICAgIDxuYXYgYXJpYS1sYWJlbD0iUGFnZSBuYXZpZ2F0aW9uIGV4YW1wbGUiPgogICAgICAgICAgPHVsIGNsYXNzPSJwYWdpbmF0aW9uIGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSI+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJwYWdlLWxpbmsiCiAgICAgICAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgICAgICAgQGNsaWNrPSJwYWdlX3JlcXVpcmUocGFnZV9ubyAtIDEpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgICAgICB3aWR0aD0iOC42NjciCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUuMjA0IgogICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgOC42NjcgMTUuMjA0IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8ZwogICAgICAgICAgICAgICAgICAgIGlkPSJhcnJvdy1wb2ludC10by1sZWZ0IgogICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDEwNS44MDYgMTUuMjA0KSByb3RhdGUoMTgwKSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICBpZD0iUGF0aF8xMTM2IgogICAgICAgICAgICAgICAgICAgICAgZGF0YS1uYW1lPSJQYXRoIDExMzYiCiAgICAgICAgICAgICAgICAgICAgICBkPSJNMTA1LjQ5Myw4LjM1NGwtNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwxLDEtMS41MDYtMS41MDZMMTAzLjIzNSw3LjYsOTcuNDUsMS44MTdBMS4wNjUsMS4wNjUsMCwwLDEsOTguOTU2LjMxMmw2LjUzNyw2LjUzN2ExLjA2NSwxLjA2NSwwLDAsMSwwLDEuNTA1WiIKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMCkiCiAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjOTQ5OWFlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpCiAgICAgICAgICAgICAgOmNsYXNzPSIncGFnZS1pdGVtICcgKyBwYWdpbmF0aW9uX2NsYXNzKHBhZ2VubykiCiAgICAgICAgICAgICAgdi1mb3I9InBhZ2VubyBpbiBwYWdlX2FycmF5IgogICAgICAgICAgICAgIDprZXk9InBhZ2VubyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICB2LWlmPSJwYWdlbm8gPT0gJy4uLnMnIHx8IHBhZ2VubyA9PSAnLi4ubCciCiAgICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgIEBjbGljaz0icGFnZV9yZXF1aXJlKHBhZ2VubykiCiAgICAgICAgICAgICAgICA+Li4uPC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICB2LWlmPSJwYWdlbm8gIT0gJy4uLnMnICYmIHBhZ2VubyAhPSAnLi4ubCciCiAgICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgIEBjbGljaz0icGFnZV9yZXF1aXJlKHBhZ2VubykiCiAgICAgICAgICAgICAgICA+e3sgcGFnZW5vIH19PC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSI+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJwYWdlLWxpbmsiCiAgICAgICAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgICAgICAgQGNsaWNrPSJwYWdlX3JlcXVpcmUocGFnZV9ubyArIDEpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICAgICAgICB3aWR0aD0iOC42NjciCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTUuMjA0IgogICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgOC42NjcgMTUuMjA0IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8ZwogICAgICAgICAgICAgICAgICAgIGlkPSJhcnJvdy1wb2ludC10by1yaWdodCIKICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtOTcuMTM5IDApIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICAgICAgICAgIGlkPSJQYXRoXzExMzYiCiAgICAgICAgICAgICAgICAgICAgICBkYXRhLW5hbWU9IlBhdGggMTEzNiIKICAgICAgICAgICAgICAgICAgICAgIGQ9Ik0xMDUuNDkzLDguMzU0bC02LjUzNyw2LjUzN2ExLjA2NSwxLjA2NSwwLDEsMS0xLjUwNi0xLjUwNkwxMDMuMjM1LDcuNiw5Ny40NSwxLjgxN0ExLjA2NSwxLjA2NSwwLDAsMSw5OC45NTYuMzEybDYuNTM3LDYuNTM3YTEuMDY1LDEuMDY1LDAsMCwxLDAsMS41MDVaIgogICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAwKSIKICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiM5NDk5YWUiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICA8L25hdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYKICAgIGlkPSJhZGR0ZW1wbGF0ZW1vZGVsIgogICAgY2xhc3M9Im1vZGFsIGZhZGUgZGFzaC1tb2RhbCIKICAgIHJvbGU9ImRpYWxvZyIKICAgIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIKICAgIGRhdGEta2V5Ym9hcmQ9ImZhbHNlIgogID4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZC1pY24iPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL21zZy1ibHVlLnBuZyIgYWx0IC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8aDM+QWRkIFRlbXBsYXRlPC9oMz4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSIKICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvY2xvc2UtaWNuLnBuZyIgYWx0IC8+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgTmFtZTwvcD4KICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgIGlkPSJ0ZW1wbGF0ZV9uYW1lX2FkZF9pZCIKICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICB2LW1vZGVsLnRyaW09InRlbXBsYXRlX25hbWUiCiAgICAgICAgICAgICAgICB2LW9uOmtleXVwPSJ2YWxpZGF0ZV90ZW1wbGF0ZV9uYW1lIiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW0iCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgVGVtcGxhdGUgTmFtZSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICB2LXNob3c9InRlbXBsYXRlX25hbWVfYWxyZWFkeV9leGlzdCIKICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogcmVkIgogICAgICAgICAgICAgICAgPkEgVGVtcGxhdGUgd2l0aCB0aGlzIG5hbWUgYWxyZWFkeSBleGlzdHMuPC9zcGFuCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCIgdi1zaG93PSJjdXJyZW50X3N0ZXAgPT0gMSI+CiAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItMCIgc3R5bGU9ImNvbG9yOiAjNDE0MTQxIj5TZWxlY3QgYSBQcm9tb3Rpb25hbCBUZW1wbGF0ZTwvcD4KICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IiB2LWZvcj0iKHRlbXBsYXRlLCBpbmRleCkgaW4gZGVmYXVsdF90ZW1wbGF0ZWxpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4Ij4KICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNoZWNrLWlucHV0IgogICAgICAgICAgICAgICAgdi1tb2RlbD0iY2hvb3Nlbl90ZW1wbGF0ZSIKICAgICAgICAgICAgICAgIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgbmFtZT0ic2VjdDFvbl8zXzEiCiAgICAgICAgICAgICAgICBpZD0ic2VjdDFvbl8zXzFfaWRfMSIKICAgICAgICAgICAgICAgIDp2YWx1ZT0idGVtcGxhdGUiCiAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWNoZWNrLWxhYmVsIiBmb3I9ImlubGluZVJhZGlvMSIKICAgICAgICAgICAgICAgID57e3RlbXBsYXRlLnRlbXBsYXRlX25hbWV9fTwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGg1PgogICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlNlbGVjdGVkIFRlbXBsYXRlIEV4YW1wbGU8L3A+CiAgICAgICAgICA8L2g1PgogICAgICAgICAgPHAgdi1pZj0iY2hvb3Nlbl90ZW1wbGF0ZSAhPSBudWxsIj57e2Nob29zZW5fdGVtcGxhdGUudGVtcGxhdGVfZXhhbXBsZX19PC9wPgogICAgICAgICAgPHAgdi1lbHNlPlNlbGVjdCBhIFRlbXBsYXRlPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IHYtaWY9ImN1cnJlbnRfc3RlcCA9PSAyICYmIGNob29zZW5fdGVtcGxhdGUgIT0gbnVsbCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgQm9keTwvcD4KICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0icGFkZGluZy1sZWZ0OiAxNXB4Ij4KICAgICAgICAgICAgICA8cD57eyBjaG9vc2VuX3RlbXBsYXRlLnRlbXBsYXRlX2JvZHkgfX08L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgVmFyaWFibGVzPC9wPgogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgVmFyaWFibGVzCiAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgICAgVmFsdWVzCiAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIHYtZm9yPSIodmFsdWUsIG5hbWUsIGluZGV4KSBpbiBjaG9vc2VuX3RlbXBsYXRlLnZhcmlhYmxlX2RpY3QiCiAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAge3tuYW1lfX0KICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtOCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIAogICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiIAogICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNob29zZW5fdGVtcGxhdGUudmFyaWFibGVfZGljdFtuYW1lXSIgCiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNXB4OwogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMHB4OwogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXdyYXAgdGV4dC1yaWdodCBtdC0wIHB5LTAgYm9yZGVyLXRvcC0wIj4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHYtc2hvdz0iY3VycmVudF9zdGVwID09IDEiCiAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICBAY2xpY2s9ImVtcHR5X3ZhcmlhYmxlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgQ2FuY2VsCiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdi1zaG93PSJjdXJyZW50X3N0ZXAgPT0gMSAmJiBCb29sZWFuKGNob29zZW5fdGVtcGxhdGUpICE9IGZhbHNlIgogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgIEBjbGljaz0iY2hhbmdlX3N0ZXAoMikiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBOZXh0CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdi1zaG93PSJjdXJyZW50X3N0ZXAgPT0gMiIKICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgICAgICBAY2xpY2s9ImNoYW5nZV9zdGVwKDEpIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgQmFjawogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHYtc2hvdz0iY3VycmVudF9zdGVwID09IDIiCiAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgQGNsaWNrPSJwcmV2aWV3X3RlbXBsYXRlKCduZXcnKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIFByZXZpZXcKICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICB2LXNob3c9ImN1cnJlbnRfc3RlcCA9PSAyIgogICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc2F2ZSIKICAgICAgICAgICAgICBAY2xpY2s9InNhdmVfdGVtcGxhdGUoKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIFNhdmUKICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBpZD0ic2VuZHNtcyIKICAgIGNsYXNzPSJtb2RhbCBmYWRlIGRhc2gtbW9kYWwiCiAgICByb2xlPSJkaWFsb2ciCiAgICBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiCiAgICBkYXRhLWtleWJvYXJkPSJmYWxzZSIKICA+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWQtaWNuIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9tc2ctYmx1ZS5wbmciIGFsdCAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGgzPlNlbmQgU01TPC9oMz4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSIKICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvY2xvc2UtaWNuLnBuZyIgYWx0IC8+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgTmFtZTwvcD4KICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0icGFkZGluZy1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICA8cD57eyBjdXJyZW50X3RlbXBsYXRlLnRlbXBsYXRlX25hbWUgfX08L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi0wIiBzdHlsZT0iY29sb3I6ICM0MTQxNDEiPlNlbmQgU01TIHRvPC9wPgogICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIHYtaWY9IiFzZW5kX3Ntc19hbGxfY3VzdG9tZXIiCiAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMnB4OwogICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMDY0NWFkOwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSIKICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6IDE2cHgiCiAgICAgICAgICAgICAgICAgIHRpdGxlPSJ5b3UgY2FuIGFsc28gc3BlY2lmeSBuYW1lIHdoaWxlIGFkZGluZyBuZXcgbnVtYmVyIGluIHRoaXMgd2F5ICgrOTEgOTk5OTk5OTk5OSxKb2huIERvZSksIG5vdGUgdGhpcyB3b3VsZCBvbmx5IHdvcmsgaW4gdGhlIGNhc2Ugd2hlcmUgeW91IGFkZCBuZXcgbnVtYmVyLiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYWRpbyBteS1hdXRvIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlbmRfc21zX2FsbF9jdXN0b21lciIKICAgICAgICAgICAgICAgICAgOnZhbHVlPSJ0cnVlIgogICAgICAgICAgICAgICAgICBpZD0ic2VuZF9zbXNfYWxsX2N1c3RvbWVyX3RydWVfaWQiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiIgaWQ9ImZpbHRlcl9wb3J0YWxfdXNlcl9yYWRpbyI+PC9zcGFuPgogICAgICAgICAgICAgICAgQWxsIEN1c3RvbWVyCiAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlbmRfc21zX2FsbF9jdXN0b21lciIKICAgICAgICAgICAgICAgICAgOnZhbHVlPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgaWQ9InNlbmRfc21zX2FsbF9jdXN0b21lcl9mYWxzZV9pZCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNuIj48L3NwYW4+CiAgICAgICAgICAgICAgICBTcGVjaWZpYyBDdXN0b21lcgogICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIiB2LWlmPSIhc2VuZF9zbXNfYWxsX2N1c3RvbWVyIj4KICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgIChBZGQgTmV3IEN1c3RvbWVyIENvbnRhY3Qgb3IgU2VhcmNoIEJlbG93IGFuZCBTZWxlY3QpCiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBtYi0zIj4KICAgICAgICAgICAgICA8aW5wdXQgCiAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJDdXN0b21lciBOYW1lIiAKICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFkZF9jdXN0b21lcl9uYW1lIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMnJlbTsgbWFyZ2luLXJpZ2h0OiA5cHg7IgogICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHZ1ZS1waG9uZS1udW1iZXItaW5wdXQgCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJhZGRfY3VzdG9tZXJfY29udGFjdF9udW1iZXIiIAogICAgICAgICAgICAgICAgOm5vLXVzZS1icm93c2VyLWxvY2FsZT0idHJ1ZSIKICAgICAgICAgICAgICAgIEB1cGRhdGU9InBob25lTnVtYmVyID0gJGV2ZW50IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L3Z1ZS1waG9uZS1udW1iZXItaW5wdXQ+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgaWQ9ImFsdGVybmF0ZV9wcm9kdWN0X25hbWVfYWRkX2J0biIKICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4gbWwtMiIKICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX2N1c3RvbWVyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIEFERAogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPG11bHRpc2VsZWN0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3BlY2lmaWNfY3VzdG9tZXJfbGlzdCIKICAgICAgICAgICAgICA6b3B0aW9ucz0iY3VzdG9tZXJzX2xpc3QiCiAgICAgICAgICAgICAgaWQ9InNwZWNpZmljX2N1c3RvbWVyX2xpc3RfaWQiCiAgICAgICAgICAgICAgOnNlYXJjaGFibGU9InRydWUiCiAgICAgICAgICAgICAgOmNsb3NlLW9uLXNlbGVjdD0iZmFsc2UiCiAgICAgICAgICAgICAgOm11bHRpcGxlPSJ0cnVlIgogICAgICAgICAgICAgIDp0YWdnYWJsZT0idHJ1ZSIKICAgICAgICAgICAgICB0YWctcG9zaXRpb249InRvcCIKICAgICAgICAgICAgICB0YWctcGxhY2Vob2xkZXI9IkFkZCB0aGlzIGFzIG5ldyBlbWFpbCIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIGN1c3RvbWVyIG51bWJlciIKICAgICAgICAgICAgICA6bWF4LWhlaWdodD0iNDAwIgogICAgICAgICAgICAgIGxhYmVsPSJjdXN0b21lcl9uYW1lIgogICAgICAgICAgICAgIHRyYWNrLWJ5PSJwaG9uZSIKICAgICAgICAgICAgICBvcGVuLWRpcmVjdGlvbj0iYmVsb3ciCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8IS0tIDxzcGFuPnt7IHNlbGVjdGVkX3JvbGUgfX08L3NwYW4+IC0tPgogICAgICAgICAgICA8L211bHRpc2VsZWN0PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgQm9keTwvcD4KICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0icGFkZGluZy1sZWZ0OiAyMHB4Ij4KICAgICAgICAgICAgICA8cD57eyBjdXJyZW50X3RlbXBsYXRlLnRlbXBsYXRlX2JvZHkgfX08L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTAiIHN0eWxlPSJjb2xvcjogIzQxNDE0MSI+VGVtcGxhdGUgVmFyaWFibGVzPC9wPgogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGggc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgVmFyaWFibGVzCiAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICA8dGggc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgVmFsdWVzCiAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgdi1mb3I9Iih2YWx1ZSwgbmFtZSwgaW5kZXgpIGluIGN1cnJlbnRfdGVtcGxhdGUudmFyaWFibGVfZGljdCIKICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC00Ij4KICAgICAgICAgICAgICAgIHt7bmFtZX19CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC04Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiAKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IiAKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjdXJyZW50X3RlbXBsYXRlLnZhcmlhYmxlX2RpY3RbbmFtZV0iCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjVweDsKICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsKICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCB0ZXh0LXJpZ2h0IG10LTAgcHktMCBib3JkZXItdG9wLTAiPgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICBAY2xpY2s9ImVtcHR5X3ZhcmlhYmxlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgQ2FuY2VsCiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgdHlwZT0ic3VibWl0IgogICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zYXZlIgogICAgICAgICAgICAgIEBjbGljaz0ic2VuZF9zbXMoKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIFNlbmQKICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBjbGFzcz0ibW9kYWwgZmFkZSIKICAgIGlkPSJwcmV2aWV3X3RlbXBsYXRlX3Zpc2libGUiCiAgICByb2xlPSJkaWFsb2ciCiAgICBhcmlhLWxhYmVsbGVkYnk9InByZXZpZXdfdGVtcGxhdGVfdmlzaWJsZSIKICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgc3R5bGU9InotaW5kZXg6IDIwMDA7IgogID4KICAgIDxkaXYKICAgICAgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwiCiAgICAgIHJvbGU9ImRvY3VtZW50IgogICAgPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgPGkgc3R5bGU9J2ZvbnQtc2l6ZToyNHB4OyBwYWRkaW5nLXJpZ2h0OiAxMHB4OyBwYWRkaW5nLXRvcDogM3B4OycgY2xhc3M9J2Zhcic+JiN4ZjI3YTs8L2k+CiAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIj4KICAgICAgICAgICAgU01TIFByZXZpZXcgCiAgICAgICAgICA8L2g1PgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxpbWcgc3JjPSIvaW1nL2Nsb3NlLWljbi5wbmciIGFsdCAvPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8ZGl2PgogICAgICAgICAgPGxhYmVsIGZvcj0ibXNnIj48Yj5NZXNzYWdlPC9iPjwvbGFiZWw+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0idGV4dC1hcmVhIiBkaXNhYmxlZCBuYW1lPSJtc2ciIHYtbW9kZWw9InByZXZpZXdfdGVtcGxhdGVfZGF0YSI+PC90ZXh0YXJlYT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBjbGFzcz0ibW9kYWwgZmFkZSIKICAgIGlkPSJjaGVja2JhbGFuY2UiCiAgICByb2xlPSJkaWFsb2ciCiAgICBhcmlhLWxhYmVsbGVkYnk9ImNoZWNrYmFsYW5jZSIKICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogID4KICAgIDxkaXYKICAgICAgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwiCiAgICAgIHJvbGU9ImRvY3VtZW50IgogICAgPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgPCEtLSA8aSBzdHlsZT0nZm9udC1zaXplOjI0cHg7IHBhZGRpbmctcmlnaHQ6IDEwcHg7IHBhZGRpbmctdG9wOiAzcHg7JyBjbGFzcz0nZmFyJz4mI3hmMjdhOzwvaT4gLS0+CiAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIj4KICAgICAgICAgICAgWW91ciBBZGRPbnMgQmFsYW5jZSAKICAgICAgICAgIDwvaDU+CiAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSIKICAgICAgICAgID4KICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWcvY2xvc2UtaWNuLnBuZyIgYWx0IC8+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxkaXY+CiAgICAgICAgICA8bGFiZWwgZm9yPSJtc2ciPjxiPk1lc3NhZ2U8L2I+PC9sYWJlbD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJ0ZXh0LWFyZWEiIGRpc2FibGVkIG5hbWU9Im1zZyIgdi1tb2RlbD0icHJldmlld190ZW1wbGF0ZV9kYXRhIj48L3RleHRhcmVhPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4K"},null]}