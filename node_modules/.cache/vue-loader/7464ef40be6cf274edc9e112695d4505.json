{"remainingRequest":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/ProductManagement/ProductsCrossSell.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/Learning/devops_ui/src/portal/Chatbot/Dashboard/ProductManagement/ProductsCrossSell.vue","mtime":1660042032579},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/Learning/devops_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBhcGlfY2FsbHMgZnJvbSAiQC9wb3J0YWwvYXBpX2NhbGxzLmpzIjsKaW1wb3J0IE11bHRpc2VsZWN0IGZyb20gInZ1ZS1tdWx0aXNlbGVjdCI7CmltcG9ydCBTd2FsIGZyb20gInN3ZWV0YWxlcnQyIjsKaW1wb3J0IHsgZnJlZXplX3BvcnRhbCxzaG93X3N1YnNjcmlwdGlvbl9leHBpcmVkX3N3YWwgfSBmcm9tICJAL3BvcnRhbC9taXhpbnMiOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJQcm9kdWN0c0Nyb3Nzc2VsbFBhZ2UiLAogIGNvbXBvbmVudHM6IHsKICAgIE11bHRpc2VsZWN0CiAgfSwKICBtaXhpbnM6IFtmcmVlemVfcG9ydGFsLHNob3dfc3Vic2NyaXB0aW9uX2V4cGlyZWRfc3dhbF0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNwaW5uZXJPbjogZmFsc2UsCiAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X2lkLAogICAgICBjb21wYW55X25hbWU6IHRoaXMuJHNlc3Npb24uZ2V0KCJVc2VySW5mb3JtYXRpb24iKS5jb21wYW55X25hbWUsCiAgICAgIHByb2R1Y3RfZGF0YV9saXN0OiBbXSwKICAgICAgLy8gbmV3X3Byb2R1Y3RfZGF0YV9saXN0OiBbXSwKICAgICAgY3Jvc3Nfc2VsbF9wcm9kdWN0czogW10sCiAgICAgIGN1cnJlbnRfcHJvZHVjdDogbnVsbCwKICAgICAgcHJvZHVjdHNfbGlzdF9kYXRhOiBbXSwKICAgICAgbGltaXRfY3Jvc3Nfc2VsbDogbnVsbCwKICAgICAgcmV0YWlsX3dlYl9mcmFtZXdvcms6ICIiLAogICAgICBkaXNhYmxlX2J0bl9leHBpcmVkOiBmYWxzZSwKICAgIH07CiAgfSwKICBtb3VudGVkKCkgewogICAgdGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9IHRoaXMuJHNlc3Npb24uZ2V0KCJyZXRhaWxfd2ViX2ZyYW1ld29yayIpOwogICAgLy8gdGhpcy5mZXRjaF9wcm9kdWN0X2xpc3QoKTsKICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICB0aGlzLmZyZWV6ZV9wb3J0YWwoKTsKICAgICAgfSwgMTAwMCk7CiAgICB0aGlzLnVwc2VsbF9jcm9zc3NlbGxfcHJvZHVjdHNfZGF0YSgpOwogICAgdGhpcy5saW1pdF9jcm9zc2VsbF9wcm9kdWN0cygpOwogICAgdGhpcy4kcm9vdC4kb24oIlByb2R1Y3RzQ3Jvc3NzZWxsUGFnZURpc2FibGVkIiwgKGRhdGEpID0+ewogICAgICBpZihkYXRhPT09dHJ1ZSl7CiAgICAgICAgdGhpcy5kaXNhYmxlX2J0bl9leHBpcmVkID0gdHJ1ZTsKICAgICAgfQogICAgfSkKICB9LAogIG1ldGhvZHM6IHsKICAgIHNhdmVfcHJvZHVjdF9kZXRhaWxzKCkgewogICAgICAvLyB2YXIgbXlKU09OID0gSlNPTi5zdHJpbmdpZnkodGhpcy5wcm9kdWN0X2RhdGFfbGlzdCk7CiAgICAgIC8vIGNvbnNvbGUubG9nKCJDcm9zcyBzZWxsIFByb2R1Y2NjY3RzIDoiLG15SlNPTik7CiAgICAgIGlmKCF0aGlzLmRpc2FibGVfYnRuX2V4cGlyZWQpewogICAgICBTd2FsLmZpcmUoewogICAgICAgIHRpdGxlOiB0aGlzLnRsdCgnY3Jvc3Nfc2VsbF9zd2FsX21zZycpLAogICAgICAgIHRleHQ6IHRoaXMudGx0KCdjcm9zc19zZWxsX3NhdmVfcHJvZHVjdF9tc2cnKSwKICAgICAgICB0eXBlOiAicXVlc3Rpb24iLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogdGhpcy50bHQoJ2Nyb3NzX3NlbGxfc3dhbF9jb25maXJtX21zZycpCiAgICAgIH0pLnRoZW4ocmVzdWx0ID0+IHsKICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IHRydWU7CiAgICAgICAgICBheGlvcwogICAgICAgICAgICAucG9zdCgKICAgICAgICAgICAgICBhcGlfY2FsbHMudXBzZWxsX2Nyb3Nzc2VsbCgpLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueV9pZCwKICAgICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55X25hbWUsCiAgICAgICAgICAgICAgICBpc19zYXZlX2VkaXQ6IHRydWUsCiAgICAgICAgICAgICAgICBwcm9kdWN0c19kYXRhOiB0aGlzLnByb2R1Y3RfZGF0YV9saXN0LAogICAgICAgICAgICAgICAgaXNfY3Jvc3NzZWxsX2RhdGE6IHRydWUKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICkKICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICAgICAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLm1lc3NhZ2UuTVNHX0NPREUgPT0gdGhpcy5hcGlfc3RhdHVzX2NvZGUuREFUQV9BVkFJTEFCTEVfTU9ERUxTLk1TR19DT0RFKSB7CiAgICAgICAgICAgICAgICBTd2FsKHsKICAgICAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRsdCgnY3Jvc3Nfc2VsbF9kYXRhX2FkZGVkX2NvbmZpcm1fbXNnJyksCiAgICAgICAgICAgICAgICAgIHRpbWVyOiAyNTAwCiAgICAgICAgICAgICAgICB9KS50aGVuKHJlc3VsdCA9PiB7CiAgICAgICAgICAgICAgICAgIHRoaXMudXBzZWxsX2Nyb3Nzc2VsbF9wcm9kdWN0c19kYXRhKCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaChlID0+IHsKICAgICAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDkKICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pO31lbHNlewogICAgICAgIHRoaXMuc2hvd19zdWJzY3JpcHRpb25fZXhwaXJlZF9zd2FsKCk7CiAgICAgIH0KICAgIH0sCiAgICAvLyBmZXRjaF9wcm9kdWN0X2xpc3QoKSB7CiAgICAvLyAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgIC8vICAgYXhpb3MKICAgIC8vICAgICAucG9zdCgKICAgIC8vICAgICAgIGFwaV9jYWxscy50ZW1wbGF0ZV9zeW5vbnltcygpLAogICAgLy8gICAgICAgewogICAgLy8gICAgICAgICBjb21wYW55X2lkOiB0aGlzLmNvbXBhbnlfaWQsCiAgICAvLyAgICAgICAgIGNvbXBhbnlfbmFtZTogdGhpcy5jb21wYW55X25hbWUsCiAgICAvLyAgICAgICAgIGlzX2dldF9wcm9kdWN0X2xpc3Q6IHRydWUKICAgIC8vICAgICAgIH0sCiAgICAvLyAgICAgICB7CiAgICAvLyAgICAgICAgIGhlYWRlcnM6IHsKICAgIC8vICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4kc2Vzc2lvbi5nZXQoImF0Iil9YAogICAgLy8gICAgICAgICB9CiAgICAvLyAgICAgICB9CiAgICAvLyAgICAgKQogICAgLy8gICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gewogICAgLy8gICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAiU3VjY2VzcyIpIHsKICAgIC8vICAgICAgICAgdmFyIHRlbXA7CiAgICAvLyAgICAgICAgIHRlbXAgPSBkYXRhLnByb2R1Y3RzX2RhdGE7CiAgICAvLyAgICAgICAgIGlmICh0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJ3b29jb21tZXJjZSIpIHsKICAgIC8vICAgICAgICAgICBmb3IgKHZhciBpIGluIHRlbXApIHsKICAgIC8vICAgICAgICAgICAgIC8vY3JlYXRlIGEgbmV3IGFycmF5IG9iamVjdCBuZXdfcHJvZHVjdHNfaXNfYW55CiAgICAvLyAgICAgICAgICAgICB0aGlzLm5ld19wcm9kdWN0X2RhdGFfbGlzdC5wdXNoKHsKICAgIC8vICAgICAgICAgICAgICAgaWQ6IHRlbXBbaV0uaWQsCiAgICAvLyAgICAgICAgICAgICAgIHRpdGxlOiB0ZW1wW2ldLm5hbWUsCiAgICAvLyAgICAgICAgICAgICAgIGNyb3NzX3NlbGxfcHJvZHVjdHNfbGlzdDogW10KICAgIC8vICAgICAgICAgICAgIH0pOwogICAgLy8gICAgICAgICAgICAgdGhpcy5jcm9zc19zZWxsX3Byb2R1Y3RzLnB1c2goewogICAgLy8gICAgICAgICAgICAgICBpZDogdGVtcFtpXS5pZCwKICAgIC8vICAgICAgICAgICAgICAgdGl0bGU6IHRlbXBbaV0ubmFtZQogICAgLy8gICAgICAgICAgICAgfSk7CiAgICAvLyAgICAgICAgICAgfQogICAgLy8gICAgICAgICB9ZWxzZSBpZih0aGlzLnJldGFpbF93ZWJfZnJhbWV3b3JrID09ICJzaG9waWZ5Iil7CiAgICAvLyAgICAgICAgICAgZm9yICh2YXIgaSBpbiB0ZW1wKSB7CiAgICAvLyAgICAgICAgICAgICAvL2NyZWF0ZSBhIG5ldyBhcnJheSBvYmplY3QgbmV3X3Byb2R1Y3RzX2lzX2FueQogICAgLy8gICAgICAgICAgICAgdGhpcy5uZXdfcHJvZHVjdF9kYXRhX2xpc3QucHVzaCh7CiAgICAvLyAgICAgICAgICAgICAgIGlkOiB0ZW1wW2ldLmlkLAogICAgLy8gICAgICAgICAgICAgICB0aXRsZTogdGVtcFtpXS50aXRsZSwKICAgIC8vICAgICAgICAgICAgICAgY3Jvc3Nfc2VsbF9wcm9kdWN0c19saXN0OiBbXQogICAgLy8gICAgICAgICAgICAgfSk7CiAgICAvLyAgICAgICAgICAgICB0aGlzLmNyb3NzX3NlbGxfcHJvZHVjdHMucHVzaCh7CiAgICAvLyAgICAgICAgICAgICAgIGlkOiB0ZW1wW2ldLmlkLAogICAgLy8gICAgICAgICAgICAgICB0aXRsZTogdGVtcFtpXS50aXRsZQogICAgLy8gICAgICAgICAgICAgfSk7CiAgICAvLyAgICAgICAgICAgfQogICAgLy8gICAgICAgICB9CiAgICAvLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKCJuZXcgcHJvZHVjdCBkYXRhIiwgdGhpcy5uZXdfcHJvZHVjdF9kYXRhX2xpc3QpOwogICAgLy8gICAgICAgICAvLyB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgLy8gICAgICAgICB0aGlzLnVwc2VsbF9jcm9zc3NlbGxfcHJvZHVjdHNfZGF0YSgpOwogICAgLy8gICAgICAgICAvLyBpZiAodGhpcy5wcm9kdWN0X2RhdGFfbGlzdC5sZW5ndGggPiAwKSB7CiAgICAvLyAgICAgICAgIC8vICAgdGhpcy5jdXJyZW50X3Byb2R1Y3QgPSB0aGlzLnByb2R1Y3RfZGF0YV9saXN0WzBdOwogICAgLy8gICAgICAgICAvLyB9CiAgICAvLyAgICAgICB9CiAgICAvLyAgICAgfSkKICAgIC8vICAgICAuY2F0Y2goZSA9PiB7CiAgICAvLyAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgLy8gICAgICAgaWYgKAogICAgLy8gICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAvLyAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgIC8vICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgLy8gICAgICAgKSB7CiAgICAvLyAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAvLyAgICAgICB9CiAgICAvLyAgICAgfSk7CiAgICAvLyB9LAogICAgdXBzZWxsX2Nyb3Nzc2VsbF9wcm9kdWN0c19kYXRhKCkgewogICAgICB0aGlzLnByb2R1Y3RfZGF0YV9saXN0ID0gW107CiAgICAgIHRoaXMuc3Bpbm5lck9uID0gdHJ1ZTsKICAgICAgYXhpb3MKICAgICAgICAucG9zdCgKICAgICAgICAgIGFwaV9jYWxscy51cHNlbGxfY3Jvc3NzZWxsKCksCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvbXBhbnlfaWQ6IHRoaXMuY29tcGFueV9pZCwKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgaXNfZ2V0OiB0cnVlLAogICAgICAgICAgICBpc19jcm9zc3NlbGxfZGF0YTogdHJ1ZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiRzZXNzaW9uLmdldCgiYXQiKX1gCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICApCiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSB0aGlzLmFwaV9zdGF0dXNfY29kZS5EQVRBX0FWQUlMQUJMRV9NT0RFTFMuTVNHX0NPREUpIHsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YS5jcm9zc19zZWxsKTsKICAgICAgICAgICAgdmFyIHRlbXAgPSByZXNwb25zZS5kYXRhLmRhdGEucmVzcG9uc2VfZGF0YS5jcm9zc19zZWxsOwogICAgICAgICAgICBmb3IgKHZhciBpIGluIHRlbXApIHsKICAgICAgICAgICAgICB0aGlzLnByb2R1Y3RfZGF0YV9saXN0LnB1c2goewogICAgICAgICAgICAgICAgaWQ6IHRlbXBbaV0uaWQsCiAgICAgICAgICAgICAgICB0aXRsZTogdGVtcFtpXS50aXRsZSwKICAgICAgICAgICAgICAgIGNyb3NzX3NlbGxfcHJvZHVjdHNfbGlzdDogdGVtcFtpXS5jcm9zc19zZWxsX3Byb2R1Y3RzX2xpc3QgPyB0ZW1wW2ldLmNyb3NzX3NlbGxfcHJvZHVjdHNfbGlzdCA6IFtdIAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHRoaXMuY3Jvc3Nfc2VsbF9wcm9kdWN0cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgaWQ6IHRlbXBbaV0uaWQsCiAgICAgICAgICAgICAgICAgIHRpdGxlOiB0ZW1wW2ldLnRpdGxlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBjb25zb2xlLmxvZygiYmVmb3JlIG9sZCBwcm9kdWN0IGRhdGEiLHRoaXMucHJvZHVjdF9kYXRhX2xpc3QpOwogICAgICAgICAgICAvLyB2YXIgdGVtcDIgPSB0aGlzLm5ld19wcm9kdWN0X2RhdGFfbGlzdDsKICAgICAgICAgICAgLy8gdmFyIHRlbXAzID0gdGhpcy5wcm9kdWN0X2RhdGFfbGlzdDsKCiAgICAgICAgICAgIC8vIHZhciByZXMgPSB0ZW1wMi5maWx0ZXIoCiAgICAgICAgICAgIC8vICAgaXRlbTEgPT4KICAgICAgICAgICAgLy8gICAgICF0ZW1wMy5zb21lKAogICAgICAgICAgICAvLyAgICAgICBpdGVtMiA9PiBpdGVtMi5pZCA9PT0gaXRlbTEuaWQgJiYgaXRlbTIubmFtZSA9PT0gaXRlbTEubmFtZQogICAgICAgICAgICAvLyAgICAgKQogICAgICAgICAgICAvLyApOwogICAgICAgICAgICAvLyBkZWJ1Z2dlcjsKICAgICAgICAgICAgLy8gLy8gY29uc29sZS5sb2cocmVzKTsKICAgICAgICAgICAgLy8gZm9yICh2YXIgaSBpbiByZXMpIHsKICAgICAgICAgICAgLy8gICB0aGlzLnByb2R1Y3RfZGF0YV9saXN0LnB1c2goewogICAgICAgICAgICAvLyAgICAgaWQ6IHJlc1tpXS5pZCwKICAgICAgICAgICAgLy8gICAgIHRpdGxlOiByZXNbaV0udGl0bGUsCiAgICAgICAgICAgIC8vICAgICBjcm9zc19zZWxsX3Byb2R1Y3RzX2xpc3Q6IFtdCiAgICAgICAgICAgIC8vICAgfSk7CiAgICAgICAgICAgIC8vIH0KICAgICAgICAgICAgLy8gY29uc29sZS5sb2coImFmdGVyIG9sZCBwcm9kdWN0IGRhdGEiLHRoaXMucHJvZHVjdF9kYXRhX2xpc3QpOwogICAgICAgICAgICBpZiAodGhpcy5wcm9kdWN0X2RhdGFfbGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X3Byb2R1Y3QgPSB0aGlzLnByb2R1Y3RfZGF0YV9saXN0WzBdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgIHRoaXMuZnJlZXplX3BvcnRhbCgpOwogICAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICB0aGlzLnNwaW5uZXJPbiA9IGZhbHNlOwogICAgICAgICAgaWYgKAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDEwIHx8CiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0NDAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQwOQogICAgICAgICAgKSB7CiAgICAgICAgICAgIHRoaXMuJHJvb3QuJGVtaXQoIlNlc3Npb25fRXhwaXJlZCIsIGUucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9LAogICAgbGltaXRfY3Jvc3NlbGxfcHJvZHVjdHMoKSB7CiAgICAgIHRoaXMubGltaXRfY3Jvc3Nfc2VsbCA9IDEwOwogICAgICBheGlvcwogICAgICAgIC5wb3N0KAogICAgICAgICAgYXBpX2NhbGxzLnByb2R1Y3Rfc2V0dGluZ3MoKSwKICAgICAgICAgIHsKICAgICAgICAgICAgY29tcGFueV9uYW1lOiB0aGlzLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgY29tcGFueV9pZDogdGhpcy5jb21wYW55X2lkLAogICAgICAgICAgICBlbWFpbDogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmVtYWlsLAogICAgICAgICAgICBsaWNlbnNlX2tleTogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLmxpY2Vuc2Vfa2V5LAogICAgICAgICAgICB0b2tlbjogdGhpcy4kc2Vzc2lvbi5nZXQoIlVzZXJJbmZvcm1hdGlvbiIpLnRva2VucywKICAgICAgICAgICAgaXNfZ2V0OiB0cnVlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuJHNlc3Npb24uZ2V0KCJhdCIpfWAKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICkKICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEubWVzc2FnZS5NU0dfQ09ERSA9PSB0aGlzLmFwaV9zdGF0dXNfY29kZS5EQVRBX0FWQUlMQUJMRV9NT0RFTFMuTVNHX0NPREUgCiAgICAgICAgICApIHsKICAgICAgICAgICAgaWYodGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAid29vY29tbWVyY2UiKXsKICAgICAgICAgICAgICB0aGlzLmxpbWl0X2Nyb3NzX3NlbGwgPSByZXNwb25zZS5kYXRhLmRhdGEud29vY29tbWVyY2VfZGV0YWlscy5saW1pdF91cF9zZWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYodGhpcy5yZXRhaWxfd2ViX2ZyYW1ld29yayA9PSAic2hvcGlmeSIpewogICAgICAgICAgICAgIHRoaXMubGltaXRfY3Jvc3Nfc2VsbCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5zaG9waWZ5X2RldGFpbHMubGltaXRfdXBfc2VsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmKHRoaXMucmV0YWlsX3dlYl9mcmFtZXdvcmsgPT0gIm1hZ2VudG8iKXsKICAgICAgICAgICAgICB0aGlzLmxpbWl0X2Nyb3NzX3NlbGwgPSByZXNwb25zZS5kYXRhLmRhdGEubWFnZW50b19kZXRhaWxzLmxpbWl0X3VwX3NlbGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiggcmVzcG9uc2UuZGF0YS5tZXNzYWdlLk1TR19DT0RFID09IHRoaXMuYXBpX3N0YXR1c19jb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUi5NU0dfQ09ERSApIHsKICAgICAgICAgICAgdG9hc3RyLmVycm9yKHRoaXMudGx0KCdjcm9zc19zZWxsX2ludGVybmFsX3NlcnZlcl9hbGVydCcpKTsKICAgICAgICAgIH1lbHNlewoKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaChlID0+IHsKICAgICAgICAgIHRoaXMuc3Bpbm5lck9uID0gZmFsc2U7CiAgICAgICAgICB0b2FzdHIuZXJyb3IodGhpcy50bHQoJ2Nyb3NzX3NlbGxfZXJyb3Jfb2NjdXJyZWRfYWxlcnQnKSk7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MTAgfHwKICAgICAgICAgICAgZS5yZXNwb25zZS5zdGF0dXMgPT09IDQ0MCB8fAogICAgICAgICAgICBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5CiAgICAgICAgICApIHsKICAgICAgICAgICAgdGhpcy4kcm9vdC4kZW1pdCgiU2Vzc2lvbl9FeHBpcmVkIiwgZS5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0sCiAgICBjaGVja19jdXJyZW50X3Byb2R1Y3RfYWN0aXZlKGluZGV4KSB7CiAgICAgIGlmIChCb29sZWFuKHRoaXMuY3VycmVudF9wcm9kdWN0KSA9PT0gdHJ1ZSkgewogICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRfcHJvZHVjdC50aXRsZSA9PT0KICAgICAgICAgIHRoaXMucHJvZHVjdF9kYXRhX2xpc3RbaW5kZXhdLnRpdGxlCiAgICAgICAgICA/ICJjdXJyZW50LXByb2R1Y3QiCiAgICAgICAgICA6IG51bGw7CiAgICAgIH0KICAgIH0sCiAgICByZW1vdmVfYnV0dG9uX3Byb2R1Y3RfdXBzZWxsX25hbWUoaW5kZXgpIHsKICAgICAgdGhpcy5jdXJyZW50X3Byb2R1Y3QuY3Jvc3Nfc2VsbF9wcm9kdWN0c19saXN0LnNwbGljZShpbmRleCwgMSk7CiAgICB9LAogICAgc2V0X2N1cnJlbnRfcHJvZHVjdChpbmRleCkgewogICAgICB0aGlzLmN1cnJlbnRfcHJvZHVjdCA9IHRoaXMucHJvZHVjdF9kYXRhX2xpc3RbaW5kZXhdOwogICAgfQogIH0KfTsK"},null]}