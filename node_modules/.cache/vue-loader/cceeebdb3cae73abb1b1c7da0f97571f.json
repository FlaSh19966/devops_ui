{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/ResponseBot.vue?vue&type=template&id=263e4b51&scoped=true&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/ResponseBot.vue","mtime":1655466542520},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div :style="cssProps">
  <div
    class="card-header d-block d-sm-flex flex-wrap justify-content-between"
  ></div>
  <div
    :class="{
      'card-body d-block d-flex': $route.name != 'Direct Response Bot',
      'card-body': $route.name == 'Direct Response Bot',
    }"
  >
    <div style="width: 25%" v-if="isTextToBot && !isPreviewBot && !isDialogBot">
      Here administrator can check how the bot responds to the end users
      questions.
    </div>
    <div class="chat-master ml-auto" id="app">
      <div
        class="chat-wrap"
        :style="chat_bot_background_image"
        style="margin: 0 auto; z-index: 0; min-width: 450px"
      >
        <div class="chat-head">
          <div
            class="media"
          >
            <img
              :src="chat_widget.logo"
              :style="chat_widget.style"
              class="rounded"
              alt="..."
              style="max-width: 100%"
            />
          </div>
        </div>
        <div
          style="position: absolute; z-index: 1000; top: 80%; left: 93%;cursor:pointer"
          class="bounce"
          @click="animate_chat_body_scroll(1, 50)"
        >
          <img src="/img/down-arrow.png" v-if="to_scroll" />
        </div>
        <div
          id="portal_chat_body_id"
          class="chat-body"
          @scroll="scroll_down"
        >
          <div v-if="live_chat_on" class="live-agent-window fadeInDown">
            <div class="d-flex">
              <img src="@/portal/assets/img/user-blue.png" alt="">
              <span class="bot-font-style" v-if="support_agent_info" style="margin-top: 14px;">Agent {{support_agent_info.first_name}} is online</span>
              <span class="bot-font-style" v-else style="margin-top: 14px;">Connecting to our Support Agent ...</span>
            </div>
          </div>
          <div
            class="chat-inner"
            v-for="(single, item) in chat"
            :key="item"
            :id="'chat' + item"
          >
            <div class="typewriter" v-if="single.popup != null">
              <span
                class="chat"
                style="
                  color: black;
                  font-size: 14px;
                  font-weight: bold;
                  border: 0px;
                "
                v-html="popup_msg"
              ></span>
            </div>
            <div
              class="chat-row receiver"
              v-if="Boolean(single.url) && single.receiving == false"
            >
              <span class="chat" style="width: max-content">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                >
                  <path
                    fill="#273679"
                    d="M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z"
                  />
                  <path d="M0 0h24v24H0z" fill="none" />
                </svg>
                <a
                  href="#"
                  @click="download_file(single.url, single.file_name)"
                  target="_blank"
                >
                  <span>
                    {{ single.file_name }}
                    &nbsp;
                  </span>
                  <i class="fa fa-download" aria-hidden="true"></i>
                </a>
              </span>
            </div>
            <div
              v-if="single.is_leaf_note == 'leaf'"
              style="float: right; margin-bottom: 10px; margin-left: 30px"
              class="chat-row prompt"
            >
              <span
                class="chat"
                style="
                  background: #273679;
                  font-size: 14px;
                  word-break: break-word;
                "
                >{{ single.bot_response }}</span
              >
            </div>
            <div v-if="single.flavor_text != null">
              <span>{{ single.flavor_text }}</span>
            </div>

            <div class="chat-row prompt-title" v-if="single.title != null">
              <div class="chat">{{ single.title }}</div>
            </div>
            <template v-if="single.is_leaf_note == false">
              <div
                class="chat-row prompt"
                @click="click_prompt(prompt)"
                v-for="(prompt, index) in single.bot_response"
                :key="index"
              >
                <div
                  @click="show_popup"
                  style="cursor: pointer"
                  :value="single.level"
                  class="chat"
                >
                  {{ prompt }}
                </div>
              </div>
            </template>
            <template v-if="single.is_leaf_note == true">
              <video-viewer
                :responses="single.bot_response"
                :show="show"
                :demourlbind="demourlbind"
                :demourl="demourl"
                :reviewsurlbind="reviewsurlbind"
                :reviewsurl="reviewsurl"
                @sub_leaf_node_call="sub_leaf_node_call"
              ></video-viewer>
            </template>
            <div
              class="buy-products d-flex"
              style="overflow: auto hidden"
              @mousewheel="scroll_div"
              v-if="single.isproduct"
            >
              <div
                class="image-container"
                v-for="(product, index) in single.elements.products"
                :key="index"
              >
                <img :src="product['Product Image Url']" class="image-box" />
                <p>{{ product["Product Name"] }}</p>
                <p>{{ product["UnitPrice"] }}</p>
                <p
                  class="buy-now"
                  @click="
                    generate_payment(
                      product['UnitPrice'],
                      product['Product Name']
                    )
                  "
                >
                  Buy Now
                </p>
              </div>
            </div>
            <div
              :class="Boolean(single.products_list.length > 1)?'d-flex':''"
              v-if="single.new_products && show_custom_cart"
            >
              <button 
                class="btn mr-2 product_scroll_btn"
                style="border-radius:35px 0px 0px 35px !important"
                @click="scroll_div_left(item)"
                v-if="Boolean(single.products_list.length > 1)"
              >
                <span class="product_scroll_btn_icon">
                  <svg 
                    style="height: 22px !important;width: 22px !important;"
                    xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-left" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
                  </svg>
                </span>
              </button>
              <div
                class="buy-products d-flex"
                :id="'buy_product_id_' + item"
                style="overflow: auto hidden; height: auto;"
                @mousewheel="scroll_div1(item)"
              >
                <div
                  class="image-container-woocommerce"
                  v-for="(product, index) in single.products_list"
                  :key="index"
                  :style="Boolean(single.products_list.length > 1)? '':'margin-left:8% !important'"
                > <a :href="product.permalink" target="_blank">
                  <img v-if="product.img_url != null" :src="product.img_url" class="image-box-woocommerce" alt="Product Image" />
                  <img v-else src="/img/blank_product_image.png" class="image-box-woocommerce" alt="Product Image" />
                  </a>
                  <div class="product-title-woocommerce">
                  <p class="textMaxLine bot-font-style m-0" :title="product.title">{{ product.title }}
                  </p>
                  <p class="product-variant-title bot-font-style" v-if="product.variant_title" :title="product.variant_title">{{ product.variant_title }}</p>
                  </div>
                  <div class="d-flex" style="justify-content: center;">
                  <p class="product-price-woocommerce bot-font-style">{{retail_shop_currency}} {{parseInt(product.price).toLocaleString()}}.00</p>
                  <p v-if="product.price != product.regular_price && (product.regular_price != '' && product.regular_price != null)" class="product-price-woocommerce bot-font-style"
                    style="font-size: 10px;
                          text-decoration: line-through;
                          padding-left: 5px;
                          padding-top: 2px;
                          opacity: 1;">
                    {{retail_shop_currency}} {{parseInt(product.regular_price).toLocaleString()}}.00</p>
                  </div>
                  <div class="bot-font-style" v-if="product.order_qty === 2  && product.stock_quantity != null" style="color: red; font-size: 12px;">
                    Maximum limit {{available_qty(product.stock_quantity, product.id)}}
                  </div>
                  <div v-if="Boolean(custom_product_button_key.length)" class="product-variation" style="position: relative;" >
                    <div v-for="(product_button, index) in custom_product_button_key"
                      :key="index">
                      <select class="select-product-variation bot-font-style" 
                        v-model="product.variant_title" 
                        @change="update_variation(item, index, product.variant_title)"
                        :disabled="product_button.on_value == product[product_button.on_key]"
                        :style="product_button.on_value == product[product_button.on_key] ? 'background: #dddddd; cursor: not-allowed;' : ''"
                      >
                        <option v-for="(variation, var_index) in product.variations"
                        :key="var_index"
                        :value="variation.variant_title">{{variation.variant_title}}</option>
                      </select>
                      <svg class="select-icon" data-element="option.selectIcon" viewBox="0 0 24 24"><path d="M21 5.176l-9.086 9.353L3 5.176.686 7.647 12 19.382 23.314 7.647 21 5.176z"></path></svg>
                    </div>
                  </div>
                  <div v-else class="product-variation" style="position: relative;" >
                    <select class="select-product-variation bot-font-style" 
                      v-model="product.variant_title" 
                      @change="update_variation(item, index, product.variant_title)" 
                      :disabled="!product.variations || product.variations.length <= 1"
                      :style="!product.variations || product.variations.length <= 1 ? 'background: #dddddd; cursor: not-allowed;' : ''"
                    >
                      <option v-for="(variation, var_index) in product.variations"
                      :key="var_index"
                      :value="variation.variant_title">{{variation.variant_title}}</option>
                    </select>
                    <svg class="select-icon" data-element="option.selectIcon" viewBox="0 0 24 24"><path d="M21 5.176l-9.086 9.353L3 5.176.686 7.647 12 19.382 23.314 7.647 21 5.176z"></path></svg>
                  </div>
                  <div v-if="Boolean(custom_product_button_key.length)">
                    <div class="product-qty" v-for="(product_button, index) in custom_product_button_key"
                      :key="index">
                      <button
                        type="button"
                        class="quantity-btn minus"
                        :disabled="product_button.on_value == product[product_button.on_key]"
                        :style="product_button.on_value == product[product_button.on_key] ? 'background: #dddddd; cursor: not-allowed;' : ''"
                        @click="update_quantity('-', item, index,product)"
                      >
                      <span>-</span>
                      </button>
                      <input
                        type="number"
                        min="1"
                        class="bot-font-style quantity-btn"
                        style="
                          text-align: center; 
                          width: 45px; 
                          border-right: 0; 
                          border-left: 0;
                          background-color: #ffffff;"
                        v-model.number="product.buy_qty"
                        :style="product_button.on_value == product[product_button.on_key] ? 'background: #dddddd; cursor: not-allowed;' : ''"
                        @focusout="update_quantity('manual', item, index, product)"
                        :disabled="product_button.on_value == product[product_button.on_key]"
                        name="quantity"
                        title="Qty"
                      />
                      <button
                        type="button"
                        class="quantity-btn plus"
                        @click="update_quantity('+', item, index,product)"
                        :disabled="product_button.on_value == product[product_button.on_key]"
                        :style="product_button.on_value == product[product_button.on_key] ? 'background: #dddddd; cursor: not-allowed;' : ''"
                      >
                      <span>+</span>
                      </button>
                    </div>
                  </div>
                  <div v-else class="product-qty">
                    <button
                      type="button"
                      class="quantity-btn minus"
                      @click="update_quantity('-', item, index,product)"
                    >
                    <span>-</span>
                    </button>
                    <input
                      type="number"
                      min="1"
                      class="bot-font-style quantity-btn"
                      style="
                        text-align: center; 
                        width: 45px; 
                        border-right: 0; 
                        border-left: 0;
                        background-color: #ffffff;"
                      v-model.number="product.buy_qty"
                      @focusout="update_quantity('manual', item, index, product)"
                      name="quantity"
                      title="Qty"
                    />
                    <button
                      type="button"
                      class="quantity-btn plus"
                      @click="update_quantity('+', item, index,product)"
                    >
                    <span>+</span>
                    </button>
                  </div>
                  <div v-if="Boolean(custom_product_button_key.length)">
                    <div v-for="(product_button, index) in custom_product_button_key"
                      :key="index">
                      <a v-if="product_button.function == 'permalink' && product_button.on_value == product[product_button.on_key]" 
                        :href="product.permalink" target="_blank">
                      <button 
                        class="btn add-to-cart"
                        style="
                          font-size: 13px;
                          width: 100% !important;"
                      >
                        {{product_button.name}}
                      </button>
                      </a>
                      <button 
                        class="btn add-to-cart"
                        v-else-if="product.stock_status != 'outofstock'"
                        style="
                          font-size: 13px;
                          width: 100% !important;"
                        @click="
                          addproduct(product)
                        "
                      >
                        ADD TO CART
                      </button>
                      <button
                        v-else
                        class="btn add-to-cart"
                        style="
                          font-size: 13px;
                          cursor: not-allowed;
                          width: 100% !important;"
                        disabled
                      >
                        OUT OF STOCK
                      </button>
                    </div>
                  </div>
                  <button
                    class="btn add-to-cart"
                    id="addtocart"
                    v-else-if="product.stock_status != 'outofstock'"
                    style="font-size: 13px;"
                    @click="
                      addproduct(product)
                    "
                  >
                    ADD TO CART
                  </button>
                  <button
                    v-else
                    class="btn add-to-cart"
                    style="font-size: 13px;
                    cursor: not-allowed;"
                    disabled
                  >
                    OUT OF STOCK
                  </button>
                </div>
              </div>
              <button 
                style="border-radius:0px 35px 35px 0px !important;"
                class="btn ml-2 product_scroll_btn"
                @click="scroll_div_right(item)"
                v-if="Boolean(single.products_list.length > 1)"
              >
                <span class="product_scroll_btn_icon">
                  <svg 
                    style="height: 22px !important;width: 22px !important;"
                    xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </span>
              </button>
            </div>
            <div
              class="buy-products d-flex"
              style="overflow: auto hidden; height: auto"
              @mousewheel="scroll_div"
              v-else-if="Boolean(single.is_products_list)"
              id="products_list_div"
            >
              <div
                :id="`product_${product_item.id}_`+item"
                v-for="(product_item, index) in single.products_list"
                :key="index"
                class="m-3"
                style="min-width: 200px"
              ></div>
            </div>
            <div class="chat-row receiver" v-if="single.product_out_of_stock">
              <div class="d-flex" style="position: relative;">
                  <div class="bot-img" :style="bot_img_icon"></div>
                  <div
                    class="chat bot-font-receiver"
                  >
                  Some products you searched for are out of stock, if you want to be notified via email when they are back in stock,
                <a
              href="#"
              style="cursor: pointer;"
              @click="add_to_out_of_stock_list(single.product_out_of_stock_list)"
              data-toggle="modal"
              data-target="#notifyemail"
            >
              click here
            </a>            
                  </div>
                </div>
            </div>
            <div class="chat-row receiver" v-if="single.show_banner_img_url">
              <div class="d-flex" style="position: relative;">
                <div v-if="single.show_bot_img" class="bot-img" :style="bot_img_icon"></div>
                <br />
                <a 
                  style="width: -webkit-fill-available !important;" 
                  :href="single.banner_img_link ? single.banner_img_link: 'javascript:void(0);'"
                  :target="single.banner_img_link ? '_blank' : ''"
                >
                  <img
                    :src="single.banner_img_url"
                    :class="(Boolean(single.show_bot_img) == true)?'banner_img_url_id':'banner_img_url_only_id'"
                  />
                </a>
              </div>
                <div class="chat-his" v-if="single.time != null">
                <span class="time" style="color: #000">{{ single.time }}</span>
              </div>
            </div>
            <div class="chat-row receiver" v-if="single.show_banner_description">
              <div class="d-flex" style="position: relative">
                <div v-if="single.show_bot_img" class="bot-img" :style="bot_img_icon"></div>
                <div
                  class="chat bot-font-receiver"
                  :style="(Boolean(single.show_bot_img) == true) ? '' : 'margin-left: 8% !important;'"
                  v-html="single.banner_description"
                >
                  {{ single.banner_description }}
                </div>
              </div>
                <div class="chat-his" v-if="single.time != null">
                <span class="time" style="color: #000">{{ single.time }}</span>
              </div>
            </div>
            <div class="chat-row receiver" v-if="single.show_banner_video_url">
              <div class="d-flex" style="position: relative;">
                <div v-if="single.show_bot_img" class="bot-img" :style="bot_img_icon"></div>
                <br />
                <div
                  class="plyr__video-embed"
                  id="player"
                >
                  <iframe
                    :src="single.banner_video_url"
                    allowfullscreen
                    allowtransparency
                    allow="autoplay"
                    :class="(Boolean(single.show_bot_img) == true )?'banner_video_url_id':'banner_video_url_only_id'"
                  ></iframe>
                </div>
              </div>
                <div class="chat-his" v-if="single.time != null">
                <span class="time" style="color: #000">{{ single.time }}</span>
              </div>
            </div>
            <div class="chat-row receiver" v-if="single.is_review_rating_product">
              <div class="d-flex" style="position: relative">
                <div class="bot-img" :style="bot_img_icon"></div>
                <div 
                  class="p-3 my-3 chat"
                >
                  <div class="col-sm-12 d-flex p-0">
                    <div class="col-sm-8 p-0">
                      <div class="bot-font-receiver" style="width: 100% !important;">
                        <label style="text-align: justify !important;" ><strong><b> {{single.not_reviewed_product_details.name}}</b></strong></label>
                        <div
                          style="
                            width: 100% !important;
                            text-align: justify !important;"
                        >
                          {{single.review_message_first}}
                        </div>
                        <div
                          style="
                            width: 100% !important;
                            text-align: justify !important;"
                        >
                          {{single.review_message_second}}
                        </div>
                      </div>
                    </div>
                    <div class="col-sm-4 pl-2 pr-0">
                      <div style="text-align: end !important;contain: content !important;">
                        <img :src="single.product_review_img_url" class="img-fluid" />
                      </div>
                    </div>
                  </div>
                  <div class="card p-3 my-2">
                    <div 
                      class="card-body p-0 bot-font-receiver" 
                      style="min-height: 10vh !important;"
                    >
                      <form @submit.prevent="submit_review_rating(item)">
                        <div class="d-flex flex-wrap">
                          <label class="mr-4 my-auto"><strong><b>Rating:</b></strong></label>
                          <star-rating 
                            v-model="single.product_rating"
                            v-bind:star-size="17"
                            :showRating= false
                          >
                          </star-rating>
                        </div>
                        <br/>
                        <label><strong><b>Review:</b></strong></label>
                        <textarea
                          required
                          rows="3"
                          v-model.trim="single.product_review"
                          class="form-control" 
                          type="text"
                          style="border: 1px solid #ced4da;
                            border-radius: .25rem; fon-size: 16px;
                            padding: 5px !important; resize: none !important"
                        />
                        <hr>
                        <div class="card-act btn-wrap d-block d-flex flex-wrap buttons-parent buttons-alignment mt-1">
                          <button 
                            class="btn custom-buttons mt-3"
                            style="text-align: center !important;"  
                            type="submit"
                          >
                          <strong>Submit Your Review</strong> 
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
              <div class="chat-his" v-if="single.time != null">
                <span class="time" style="color: #000">{{ single.time }}</span>
              </div>
            </div>
            <div class="chat-row receiver" v-if="single.show_messaging_platforms">
              <div v-if="single.show_messaging_platforms" class="d-flex" style="justify-content: center">
                <div  class="px-2" v-for="(plt,plt_index) in single.messaging_platforms_data" :key="plt_index">
                  <div v-if="Boolean(plt.TELEGRAM) === true">
                    <span @click="open_messaging_framework_integration(plt.TELEGRAM)">
                    <img :src="require('@/portal/assets/img/Webp.net-resizeimage_5.png')" alt="Telegram" class="image-box-msg-frmw" style="cursor:pointer;background: inherit;">
                    </span>
                  </div>
                  <div v-if="Boolean(plt.WHATSAPP) === true">
                    <span @click="open_messaging_framework_integration(plt.WHATSAPP)">
                    <img :src="require('@/portal/assets/img/whatsapp-logo-png-2290.png')" alt="WhatsApp" class="image-box-msg-frmw" style="cursor:pointer;background: inherit;">
                    </span>
                  </div>
                  <div v-if="Boolean(plt.FACEBOOK) === true">
                    <span @click="open_messaging_framework_integration(plt.FACEBOOK)">
                    <img :src="require('@/portal/assets/img/logo-256.png')" alt="Facebook" class="image-box-msg-frmw" style="cursor:pointer;background: inherit;">
                    </span>
                  </div>
                  <div v-if="Boolean(plt.INSTAGRAM) === true">
                    <span @click="open_messaging_framework_integration(plt.INSTAGRAM)">
                    <img :src="require('@/portal/assets/img/instagram_bot_logo.png')" alt="Instagram" class="image-box-msg-frmw" style="cursor:pointer;background: inherit;">
                    </span>
                  </div>
                </div>
              </div>
              <div class="chat-his" v-if="single.time != null">
                <span class="time" style="color: #000">{{ single.time }}</span>
              </div>
            </div>
            <div
              v-if="single.carousel_card_list"
              :id="'carousel_card' + item"
              class="carousel_card" data-ride="carousel"
              style="position: relative !important;"
            >
              <div :class="Boolean(single.carousel_card_list.length>1)?'d-flex':''"
                :style="Boolean(single.carousel_card_list.length===1)? 'width:66%':''"
              >
                <a class="carousel_scroll_btn1 ml-1" @click="scroll_card_left(item)" type="button"
                  v-if="single.carousel_card_list.length > 1"
                  :id="'carousel_scroll_btn1_' + item"
                  style="display: none;"
                >
                  <svg 
                      style="transform: rotateY(180deg) !important"
                      xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right product_scroll_btn_icon1" viewBox="0 0 16 16">
                      <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                  </svg>
                </a>
                <div 
                  :id="'carousel_cards_id_'+item"
                  style="overflow:hidden;" class="cards_carsol d-flex"
                > 
                  <div 
                  v-for="(carousel, index) in single.carousel_card_list"
                  :key="index"
                  class="carousel_cards"
                  >
                    <div class="carousel_card_single">
                      <div v-if="carousel.image">
                        <img :src =carousel.image  alt="carousel Image">
                      </div>
                      <div v-if="carousel.video">
                          <iframe
                            :src="carousel.video"
                            allowfullscreen
                            allowtransparency
                            allow="autoplay"
                          ></iframe>
                      </div>
                      <div class="carousel_card_single_content">
                        <h4 v-if="carousel.title">{{carousel.title}}</h4>
                        <div class="carousel_card_single_para">
                          <div v-if="carousel.text">
                            <p>{{carousel.text}}</p>
                          </div>
                        </div>
                        <div>
                          <div v-for="(bttn,indx) in carousel.buttons" :key="indx" class="carousel_card_button">
                            <div v-if="Boolean(bttn.title) && Boolean(bttn.value)">
                              <a
                                type="button"
                                @click="custom_button_click(bttn, item)"
                                :disabled="input_disabled"
                                :key="index"
                              >
                                {{bttn.title}}
                              </a>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>  
                  </div>
                </div>
                <a class="carousel_scroll_btn2 ml-1" @click="scroll_card_right(item)" type="button"
                  v-if="single.carousel_card_list.length > 1"
                  :id="'carousel_scroll_btn2_' + item"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right product_scroll_btn_icon1" viewBox="0 0 16 16">
                  <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                </svg>
                </a>
              </div>
            </div>
            <template v-if="single.conversation_only">
              <div
                v-if="single.sending"
                class="chat-row sender"
              >
                <div class="chat bot-font-sender">{{ single.sent }}
                  <!-- <div class="chat-his" v-if="single.time != null">
                    <span class="time" style="color: #000">{{
                      single.time
                    }}</span>
                  <span class="del-note delivered">Sent</span>
                </div> -->
                </div>
              </div>
              <div
                v-if="single.receiving"
                class="chat-row receiver"
                :class="{ 'pr-0': single.fetch_shopify_details }"
              >
                <div class="d-flex" style="position: relative;">
                  <div v-if="!(Boolean(single.received) == false &&
                      (Boolean(single.image) == true ||
                      Boolean(single.custom_buttons) == true ||
                      Boolean(single.videos) == true))"
                      class="bot-img" :style="bot_img_icon">
                  </div>
                  <div
                    v-if="Boolean(single.received) == true"
                    class="chat bot-font-receiver"
                  >
                    <div v-html="single.received"></div>
                    <div class="chat-his" v-if="single.time != null">
                        <span class="time">{{ single.time }}</span>
                    </div>
                  </div>
                </div>
                <template
                  v-if="
                    single.fetch_shopify_details &&
                    !retail_is_token_valid(item, single.is_refund)
                  "
                >
                  <form
                    id="shopify_login_form"
                    enctype="multipart/form-data"
                    @submit.prevent="
                      retail_create_customer_token(item, single.is_refund)
                    "
                    v-if="retail_order_retreival_only_email_required || (retail_web_framework != 'shopify' && retail_web_framework != 'woocommerce' 
                    && retail_web_framework != 'magento' && retail_web_framework != 'bigcommerce')"
                  >
                    <div class="form-group">
                      <input
                        :placeholder="retail_order_retreival_only_email_required ? 'Enter your Email or Phone number' : 'Enter your Email'" 
                        name="email"
                        class="form-control"
                        id="email"
                        v-model="single.customer_email_id"
                        required
                        type="text"
                        @focus="retail_form_focus(item)"
                      />
                    </div>
                    <div class="form-group" v-if="!retail_order_retreival_only_email_required">
                      <input
                        placeholder="Enter your Password"
                        name="password"
                        class="form-control"
                        id="password"
                        v-model="single.customer_password"
                        required
                        type="password"
                        @focus="retail_form_focus(item)"
                      />
                    </div>
                    <button type="submit" class="btn btn-primary dynamic-button">
                      {{shopify_login_button_text}}
                    </button>
                  </form>
                  <div v-else class="bot-font-receiver">
                    {{change_chat_text_to_login_redirect(item)}}
                  </div>
                </template>
                <div
                  v-if="single.refund_orders_list"
                  style="
                    background: #ffffff;
                    text-align: center;
                    margin: 10px 0px;
                    padding: 10px;
                  "
                >
                  <div
                    v-if="!single.refund_order_view_details.line_items"
                    style="display: grid"
                  >
                  <div>

                  </div>
                  <div
                      class="d-flex bot-font-receiver"
                    >
                      <p style="font-weight:600; margin: 0;"
                        >Order#</p>
                      <p style="font-weight:600; margin: 0;">Order Date</p>
                      <p style="font-weight:600; margin: 0;">Order Status</p>
                      <p
                        v-if="retail_web_framework != 'shopify'" 
                        style="font-weight:600; margin: 0;">Notes</p>
                    </div>
                    <div
                      v-for="(order, orderIndex) in single.refund_orders_list"
                      :key="orderIndex"
                      class="d-flex bot-font-receiver"
                    >
                      <a
                        class="bot-font-receiver"
                        href="javascript:void(0)"
                        @click="
                          view_order_details(
                            item,
                            orderIndex,
                            order.line_items,
                            order.refunds,
                          )
                        "
                        >{{ order.name }}</a
                      >
                      <a
                        class="bot-font-receiver"
                        href="javascript:void(0)"
                        @click="
                          view_order_details(
                            item,
                            orderIndex,
                            order.line_items,
                            order.refunds,
                          )
                        "
                        >{{ order.created_at }}</a>
                      <!-- <a 
                        href="javascript:void(0)"
                        @click="
                          view_order_details(
                            item,
                            orderIndex,
                            order.line_items,
                            order.refunds,
                          )
                        "
                      >{{ order.processed_date }}</a> -->
                      <a
                        class="bot-font-receiver"
                        href="javascript:void(0)"
                        @click="
                          view_order_details(
                            item,
                            orderIndex,
                            order.line_items,
                            order.refunds,
                          )
                        "
                      >{{ order.fulfillment_status }}</a>
                      <a
                        class="bot-font-receiver"
                        v-if="retail_web_framework != 'shopify'" 
                        href="#"
                        @click="order_notes_data = order.order_notes; selected_order_name = order.name"
                        data-toggle="modal"
                        data-target="#ordernotesmodel"
                        title="View Notes"
                      >View Notes</a>
                    </div>
                  </div>
                  <div v-else-if="single.refund_order_view_details.line_items">
                    <div class="mb-3 text-left">
                      <a
                        href="javascript:void(0)"
                        @click="refresh_or_remove_order_details(item, 'remove')"
                        >&lt;&lt; Back to Orders</a
                      >
                      <a href="javascript:void(0)" class="ml-2">{{
                        single.refund_order_view_details.name
                      }}</a>
                    </div>
                    <div>
                      <p class="bot-font-receiver w-auto text-left">
                        To Return, follow these steps: 
                        <ol>
                          <li>
                            Select the checkbox for the items to be returned
                          </li>
                          <li>
                            Update the quantity
                          </li>
                          <li>
                            Click on Proceed button
                          </li>
                        </ol>
                      </p>
                    </div>
                    <div
                      v-for="(
                        lineItem, lineItemIndex
                      ) in single.refund_order_view_details.line_items"
                      :key="lineItemIndex"
                      class="mb-0"
                    >
                      <div class="col-sm-12 bot-font-receiver p-0 px-2" style="display: inline-flex !important;">
                        <div class="col-sm-1 p-0 pl-2">
                          <input
                            :title="((lineItem.qty_available_for_refund) <= 0) ?'No product quantity available for refund':null"
                            type="checkbox"
                            v-model="single.refund_selected_items"
                            :value="retail_web_framework == 'magento' ? lineItem.product_id : lineItem.id"
                            :style="((lineItem.qty_available_for_refund) <= 0) ?'cursor: not-allowed !important':null"
                            style="margin-left: 2%; margin-top: 1%;"
                            :disabled="(lineItem.qty_available_for_refund) <= 0"
                          />
                        </div>
                        <div class="col-sm-5 p-0 pl-2">
                          <p style="width: 100% !important;text-align: center !important;">
                            {{ lineItem.name }}
                          </p>
                        </div>
                        <div class="col-sm-3 p-0 pl-2" style="flex: content !important;">
                          <p style="width: 100% !important; text-align: center !important;">
                            {{ single.refund_order_view_details.presentment_currency }}
                            {{ lineItem.price }}
                          </p>
                        </div>
                        <div class="col-sm-3 p-0 pl-2" style="flex: content !important;">
                          <div class="">
                            <template>
                              <div class="input-group margin-bottom">
                                <vue-numeric-input
                                  :title="((lineItem.qty_available_for_refund) <= 0) ?'No product quantity available for refund':null"
                                  id="return_increment_numeric_input"
                                  style="width: fit-content !important;"  
                                  v-model.number="lineItem.selected_quantity" 
                                  :min="1"  
                                  :max="lineItem.qty_available_for_refund" 
                                  :step="1"
                                  controls-type="updown"
                                  :disabled="(lineItem.qty_available_for_refund) <= 0"
                                  :style="((lineItem.qty_available_for_refund) <= 0) ?'cursor: not-allowed !important':null"
                                >
                                  <span class="input-group-addon addon-inline input-source-observer">days</span>
                                </vue-numeric-input>
                              </div>
                            </template>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="col-sm-12 p-0 px-2 d-flex"> 
                      <div class="col-sm-5 p-0 bot-font-receiver">
                        <label class="bot-font-receiver text-left">
                          Reason for Return*
                          <br>
                        <sup v-if="show_shopify_reason_for_refund_error" style="color:red;top: -.25em !important;">
                          ( This cannot be empty!! )
                        </sup>
                        </label>
                      </div>
                      <div class="col-sm-7 p-0">
                        <div class="form-group bot-font-receiver">
                          <multiselect
                            v-model="single.shopify_reason_for_refund_list"
                            id="shopify_reason_for_refund_id"
                            :options="shopify_reason_for_refund_option"
                            :searchable="true"
                            :close-on-select="true"
                            :show-labels="false"
                            @input="refresh_or_remove_order_details(item)"
                            placeholder="Select Reason"
                            :max-height="100"
                          >
                          </multiselect>
                        </div>
                        <div class="bot-font-receiver" v-if="single.shopify_reason_for_refund_list === 'Others'">
                          <textarea
                            class="form-control"
                            style="border: 1px solid #ced4da;
                            border-radius: .25rem; fon-size: 16px;
                            padding: 5px !important; resize: none !important"
                            rows="3"
                            v-model.trim="single.shopify_reason_for_refund"
                            id="product_refund_txt_area"
                          />
                        </div>
                    </div>
                    </div>
                    <div
                      class="d-block d-flex flex-wrap buttons-parent buttons-alignment mt-1"
                    >
                      <button
                        :title="((single.refund_selected_items.length) <= 0) ?'Select the checkbox for the items to be returned':null"
                        class="btn custom-buttons bot-font-buttons"
                        :disabled="(single.refund_selected_items.length) <= 0"
                        :style="((single.refund_selected_items.length) <= 0) ?'cursor: not-allowed !important':null"
                        style="font-size: 16px !important;"
                        @click="
                          submit_refund_request(
                            single.refund_order_view_details, item
                          )
                        "
                      >
                        Proceed
                      </button>
                    </div>
                  </div>
                </div>
                <div
                  class="bot-font-receiver"
                  v-if="single.show_all_orders_list"
                  style="
                    background: #ffffff;
                    text-align: center;
                    margin: 10px 0px;
                    padding: 10px;;
                  "
                >
                <div
                  class="d-flex"
                >
                  <p style="font-weight:600; margin: 0;">Order#</p>
                  <p style="font-weight:600; margin: 0;">Order Date</p>
                  <p style="font-weight:600; margin: 0;">Order Status</p>
                  <p
                    v-if="retail_web_framework != 'shopify'" 
                    style="font-weight:600; margin: 0;">Notes</p>
                </div>
                <div
                      v-for="(order, orderIndex) in single.all_orders_list"
                      :key="orderIndex"
                      class="d-flex"
                    >
                      <a
                        class="bot-font-receiver"
                        :href="order.status_url"
                        target="_blank"
                      >{{ order.name }}</a
                      >
                      <a 
                        class="bot-font-receiver"
                        :href="order.status_url"
                        target="_blank"
                      >{{ order.processed_date }}</a>
                      <a 
                        class="bot-font-receiver"
                        :href="order.status_url"
                        target="_blank"
                      >{{ order.fulfillment_status }}</a>
                      <a
                        class="bot-font-receiver"
                        v-if="retail_web_framework != 'shopify'" 
                        href="#"
                        @click="order_notes_data = order.order_notes; selected_order_name = order.name"
                        data-toggle="modal"
                        data-target="#ordernotesmodel"
                        title="View Notes"
                      >View Notes</a>
                    </div>
                </div>
                <div v-else>
                  <!-- {{no_orders_to_be_shown(item)}} -->
                </div>
                <template v-if="Boolean(single.image)">
                  <div class="d-flex" style="position: relative;">
                    <div v-if="(Boolean(single.received) == false &&
                      Boolean(single.image) == true)" class="bot-img" :style="bot_img_icon"></div>
                    <br />
                    <img
                      :class="!(Boolean(single.received) == false &&
                      Boolean(single.image) == true)? 'img_only_id':'img_id'"
                      :src="single.image"
                    />
                  </div>
                </template>
                <div v-if="single.show_buttons && single.support_buttons">
                  <button
                    class="btn custom-buttons"
                    @click="call_support('Yes')"
                  >
                    Yes
                  </button>
                  <button
                    class="btn custom-buttons"
                    @click="call_support('No')"
                  >
                    No
                  </button>
                </div>
                <div
                  v-if="single.custom_buttons"
                >
                  <div :class="(Boolean(single.received) == false &&
                        Boolean(single.custom_buttons) == true)?'d-flex':null" style="align-items: center; position: relative;">
                    <div v-if="(Boolean(single.received) == false &&
                      Boolean(single.custom_buttons) == true)" class="bot-img" :style="bot_img_icon">
                    </div>
                    <div
                      class="d-block d-flex flex-wrap buttons-parent buttons-alignment mt-1"
                      :style="(Boolean(single.received) == false &&
                      Boolean(single.custom_buttons) == true)?'width: -webkit-fill-available !important;': null"
                    >
                      <button
                        :style="(Boolean(single.received) == false &&
                        Boolean(single.custom_buttons) == true)?'margin-top:1% !important; margin-bottom:2% !important': null"
                        class="btn custom-buttons"
                        @click="custom_button_click(button, item)"
                        v-for="(button, index) in single.buttons_list"
                        :disabled="input_disabled"
                        :key="index"
                      >
                        {{ button.title }}
                      </button>
                    </div>
                  </div>
                </div>
                <div v-if="single.show_text_area">
                  <textarea
                    class="form-control"
                    placeholder="Enter text here"
                    :id="'textarea' + item"
                    style="padding-left: 2%"
                    :disabled="single.disabled"
                  >
                  </textarea>
                </div>
                <div
                  v-if="Boolean(single.is_order_status)"
                  class="chat"
                  style="margin-left: 33px; margin-top: 10px"
                  v-html="single.order_status"
                ></div>
                <div v-if="Boolean(single.offers)" class="d-flex" style="position: relative;">
                  <div class="bot-img" :style="bot_img_icon"></div>
                  <div
                    class="chat bot-font-receiver"
                    style="margin-top: 10px; position: relative;"
                  >
                    <span
                      v-for="(offer, offerIndex) in single.offers"
                      :key="offerIndex"
                    >
                    <span><strong style="padding-right:0.25rem">{{offerIndex+1}}:</strong></span>
                    <span v-html="offer.offer +'<br>' " style="margin-bottom: 1rem"></span>
                    </span>
                    <div class="chat-his" v-if="single.time != null">
                        <span class="time">{{ single.time }}</span>
                    </div>
                  </div>
                </div>
                <!-- Apply logic here -->
                <div v-if="single.is_multiselect">
                  <multiselect
                    :close-on-select="false"
                    :taggable="true"
                    :multiple="true"
                    :options="single.multiselect_values"
                    :placeholder="single.placeholder"
                    track-by="value"
                    :group-select="true"
                    label="title"
                    v-model="single.value_mapping"
                    @input="adddropdownvalue"
                    :disabled="single.disabled"
                  ></multiselect>
                </div>
                <table
                  v-if="single.is_table"
                  style="
                    margin-left: 2%;
                    margin-top: 2%;
                    font-size: 14px;
                    font-weight: 300;
                    background-color: #fff;
                  "
                  class="table"
                >
                  <tr>
                    <th
                      v-for="(head, index1) in single.col_list"
                      :key="index1"
                    >
                      {{ head }}
                    </th>
                  </tr>
                  <tr
                    v-for="(value, index2) in single.table_value"
                    :key="index2"
                  >
                    <td
                      v-for="(head, index3) in single.col_list"
                      :key="index3"
                    >
                      {{ value[head] }}
                    </td>
                  </tr>
                </table>
                <template v-if="Boolean(single.videos)">
                  <div class="d-flex" style="position: relative;">
                    <div v-if="(Boolean(single.received) == false &&
                      Boolean(single.videos) == true)" class="bot-img" :style="bot_img_icon"></div>
                    <br />
                    <div
                      class="plyr__video-embed"
                      id="player"
                      style="ma"
                    >
                      <iframe
                        :src="single.videos"
                        allowfullscreen
                        allowtransparency
                        allow="autoplay"
                        :class="!(Boolean(single.received) == false &&
                          Boolean(single.videos) == true)? 'video_url_only_id':'video_url_id'"
                      ></iframe>
                    </div>
                  </div>
                </template>
                <div
                  class="d-flex bot-font-receiver"
                  style="margin-top: 5px"
                  v-if="single.ask_feedback"
                >
                  <div class="bot-img" :style="bot_img_icon"></div>
                  <div class="chat">
                    Was this answer helpful?
                    <a style="margin-left:1rem; margin-right:1rem;" href="#" 
                      @click="add_bot_unanswered_question(item, true)" >
                      <strong>Yes</strong>
                    </a>
                    <a href="#" @click="add_bot_unanswered_question(item, false)">
                      <strong>No</strong>
                    </a>
                    <!-- <img
                      :src="thumbs_up_icon"
                      @click="add_bot_unanswered_question(item, true)"
                    />
                    <img
                      :src="thumbs_down_icon"
                      @click="add_bot_unanswered_question(item, false)"
                    /> -->
                  </div>
                </div>
              </div>
            </template>
          </div>
            <cense-cart 
              :addtoCart="addtoCartdata"
              :retail_currency="retail_shop_currency"
              :retail_framework="retail_web_framework"
              :shop_url="(retail_web_framework === 'shopify') ? shopify_retail_shop_name: shop_url"
              @close_cart="closecart"
              @cart_data="cart_communication"
              v-if="is_cense_cart && !input_disabled"/>
          <div id="cartDiv"></div>
        </div>
        <div class="col-sm-12 d-flex px-0" style="overflow: hidden;">
          <div id="custom-cart" v-if="show_custom_cart" class="col-sm-2 px-1" style="margin-top: 6px;">
          <div
          id="cense-cart-btn"
          type="button" class="btn cense-cart-btn"
          @click="is_cense_cart = !is_cense_cart"
          >
          <div id="cart-qty-num" 
              class="cart-qty-num bot-font-buttons"
              v-if="total_products_qty.toLocaleString() < 100"
              >{{parseInt(total_products_qty).toLocaleString()}}
          </div>
          <div id="cart-qty-num" 
              class="cart-qty-num bot-font-buttons"
              style="margin-bottom: 20px; margin-left: -2px; margin-right: -1px;"
              v-else>
                {{99}}<sup style="font-size: 85%; top: -0.25em;">+</sup> 
          </div>
            <span
            id="cart-img" 
            v-html="cart_icon_svg"
            style="height: 20px; width: 20px;">
            </span>
          </div>
          </div>
          <div
            :class="custom_greetings_buttom_alignment(show_custom_cart)"
            v-if="Boolean(chat[greeting_buttons_position]) && Boolean(chat[greeting_buttons_position].greeting_button)"
          >
            <div
              class="d-block d-flex flex-wrap buttons-alignment"
              v-if="Boolean(chat[greeting_buttons_position]) && Boolean(chat[greeting_buttons_position].greeting_button === true)"
            >
              <button
                :disabled="input_disabled"
                :style="input_disabled ? 'cursor: not-allowed' : null"
                style = "
                  margin-top: 2.5% !important; 
                  margin-left: 2.5% !important;"
                class="btn custom-buttons bot-font-buttons"
                @click="custom_button_click(button, greeting_buttons_position)"
                v-for="(button, index) in chat[greeting_buttons_position].buttons_list"
                :key="index"
              >
                {{ button.title }}
              </button>
            </div>
          </div>
        </div>
        <div class="chat-footer">
          <div
            class="typing-indicator"
            :class="{
              'd-block': is_typing_indicator_on,
              'd-none': !is_typing_indicator_on,
            }"
          >
            <p style="font-size: 13px; font-weight: 300" v-show="is_agent_typing">
              Support Agent is typing
            </p>
            <p
              style="font-size: 13px; font-weight: 300; margin-left: 5%"
              v-show="!is_agent_typing"
            >
              typing
            </p>
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
        <div class="chat-txt">
          <div class="input-group mb-0">
            <input
              type="text"
              class="form-control"
              style="border-radius: 0;"
              v-model="to_send"
              @keyup.enter="send_message"
              :disabled="input_disabled"
              :placeholder="Boolean(is_retail_bot === true)? 'Search products or type your message here ...': 'Type your message here ...'"
            />
        <div class="pr-2 pl-2" title="Stop chat" style="background-color: #fff;" v-if="live_chat_on">
          <a href="javascript:void(0)" @click="disconnect_support_chat" id="stop-chat-button"
          ><i class="fas fa-ban pt-2" style="font-size: 22px;"></i></a>
        </div>
            <div class="input-group-append">
              <button
                class="btn voice-button"
                type="button"
                @click="voice_communication"
                :disabled="input_disabled"
              >
                <i class="fa fa-microphone" id="microphone"></i>
              </button>
            </div>
            <div class="input-group-append">
              <button
                class="btn"
                type="button"
                id="send_btn"
                @click="send_message"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  id="send_button"
                  style="fill: #8a8a8a63"
                  width="40"
                  height="25"
                  viewBox="0 0 24 24"
                >
                  <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" />
                  <path d="M0 0h24v24H0z" fill="none" />
                </svg>
              </button>
            </div>
          </div>
        </div>
        <div class="chat-cense-footer">
          <span 
            v-show="this.chat_widget.is_powered_by_cense"
            class="powered-by">
            Powered by &nbsp;
            <a href="https://cense.ai" target="_blank"
              title="click here to visit"
              class="open_cense_website"><img src="/img/cense_image.png" style="height: 20px"/></a>
          </span>
        </div>
      </div>
    </div>
    <div
    id="notifyemail"
    class="modal fade dash-modal"
    role="dialog"
    data-backdrop="static"
    data-keyboard="false"
    >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-body">
          <div class="modal-head d-flex align-items-center">
            <div class="head-icn">
              <img src="/img/msg-blue.png" alt />
            </div>
            <h3>Out of Stock products</h3>
            <button type="button" class="close" data-dismiss="modal">
              <img src="/img/close-icn.png" alt />
            </button>
          </div>
          <div>
            <div
              class="p-0"
              style="overflow-y: auto"
            >
            <label>Please check the products regarding which you want notification</label>
              <div class="table-box">
                <div class="table-responsive">
                  <table class="table">
                    <thead>
                      <tr>
                        <th scope="col">
                          <div class="form-check checkbox checkbox-success">
                            <label class="form-check-label">
                              <input
                                class="form-check-input"
                                id="selectall"
                                type="checkbox"
                                @change="selected_product('all')"
                              />
                              <span class="icn"></span>
                            </label>
                          </div>
                        </th>
                        <th
                          scope="col"
                          class="text-left"
                          style="
                            font: normal normal normal 16px/22px Roboto;
                            letter-spacing: 0px;
                            color: #414141;
                            border-left: 0;
                          "
                        >
                          Select All
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                      <tr
                        v-for="(product, index) in product_out_of_stock_list"
                        :key="index"
                        :class="check_current_product_active(index)"
                      >
                        <th scope="col">
                          <div class="form-check checkbox checkbox-success">
                            <label class="form-check-label">
                              <input
                                class="form-check-input"
                                type="checkbox"
                                :id="'product_checkbox_'+product.product_id"
                                @change="
                                  selected_product(product)
                                "
                              />
                              <span class="icn"></span>
                            </label>
                          </div>
                        </th>
                        <td
                         @click="show_product(index)"
                          :title="product.product_title"
                        >
                          <template>
                            <p style="margin-bottom: 0">
                              {{ product.product_title }} {{product.variant_title}}
                            </p>
                          </template>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
              <hr>
              <div class="form-group">
            <input
              type="text"
              class="form-control"
              style="border: 1px solid #ced4da;
              border-radius: .25rem; fon-size: 16px;"
              v-model="customer_email"
              placeholder="Enter Your Email Id"
            />
          </div>
          <div style="text-align: center;">
          <button
              type="submit"
              class="darkblue-btn"
              id="res_n_int_save"
              @click="submit_out_of_stock_products()"
            >
              Notify me
          </button>
          </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    id="ordernotesmodel"
    class="modal fade dash-modal"
    role="dialog"
    data-backdrop="static"
    data-keyboard="false"
    >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-body">
          <div class="modal-head d-flex align-items-center">
            <div class="head-icn">
              <img src="/img/msg-blue.png" alt />
            </div>
            <h3>Notes for Order No. {{selected_order_name}}</h3>
            <button type="button" class="close" data-dismiss="modal">
              <img src="/img/close-icn.png" alt />
            </button>
          </div>
          <div v-if="order_notes_data.length > 0">
          <div v-for="(note ,index) in order_notes_data"
          :key="index">
            <ul style="list-style-type: disc;">
              <li v-if="note.date_created && note.note"><p> <strong>{{note.date_created}}</strong>  : {{note.note}}</p></li>
            </ul>
          </div>
          </div>
          <div v-else>
            <p>No updates</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  </div>
</div>
"},null]}