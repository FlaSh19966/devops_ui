{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/AddTasks.vue?vue&type=style&index=1&id=012adb1c&scoped=true&lang=css&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/AddTasks.vue","mtime":1643027096168},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgp0ZCA+IHRyID4gdGQgewogIGJvcmRlci1jb2xvcjogI2ZmZmZmZjsKfQp0ZCA+IHRyID4gdGQgOmhvdmVyIHsKICBib3JkZXItY29sb3I6ICNmN2Y4ZmI7Cn0KLm1vZGFsIHsKICBvdmVyZmxvdzogc2Nyb2xsICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["AddTasks.vue"],"names":[],"mappingsiuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AddTasks.vue","sourceRoot":"src/portal/Chatbot/Dashboard/Data Inputs","sourcesContent":["<template>\n  <div>\n    <div class=\"spinner\" v-show=\"spinnerOn\" id=\"spinner\"></div>\n    <div class=\"dash-cont\">\n      <div class=\"container-fluid\">\n        <div class=\"card dash-card\">\n          <div\n            class=\"card-header d-block d-sm-flex flex-wrap justify-content-between\"\n          >\n            <h4 class=\"mb-sm-0\">Tasks</h4>\n            <div class=\"card-act d-flex flex-wrap\">\n              <input\n                class=\"form-control search-bar\"\n                id=\"search_bar\"\n                placeholder=\"Search here\"\n                v-model=\"search_name\"\n                v-on:keyup=\"callsearch\"\n              />\n              <a\n                type=\"button\"\n                v-if=\"isVisibleSearchClear\"\n                class=\"btn bg-transparent mt-auto mb-auto py-0\"\n                @click=\"clear_search_name\"\n                style=\"margin-left: -40px; z-index: 10\"\n              >\n                <img src=\"/img/close-icn.png\" alt />\n              </a>\n              <a\n                href=\"#\"\n                class=\"darkblue-btn\"\n                @click=\"search_product\"\n                id=\"search_btn\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n                  width=\"14\"\n                  height=\"14\"\n                >\n                  <path\n                    d=\"M13.809011327100071,12.965505435601472 L9.30910012117823,8.49330664854199 C10.007392079586584,7.596111589605521 10.38512817619458,6.499157170138106 10.38512817619458,5.345374656726532 c0,-1.3810948891881802 -0.5423458634784514,-2.676086605733705 -1.523073527148749,-3.6524965835014083 c-0.9807276636702976,-0.9764099777677033 -2.287209392305289,-1.5136937750578685 -3.6751296371814526,-1.5136937750578685 s-2.6944019735111544,0.5390058607430178 -3.6751296371814526,1.5136937750578685 C0.5293349766245179,2.667565987539975 -0.011278152465820316,3.9642797675383576 -0.011278152465820316,5.345374656726532 c0,1.3793728257353273 0.5423458634784514,2.6778086691865575 1.523073527148749,3.6524965835014083 C2.492523038353222,9.974281217995648 3.7972720326001044,10.51156501528581 5.18692501186438,10.51156501528581 c1.160932040033745,0 2.2629511108717475,-0.37540983272197437 3.165705727077092,-1.0676793407689171 l4.499911205921844,4.470476723606628 a0.1420842198250257,0.14120920313395363 0 0 0 0.20099718902076805,0 l0.7554721932159904,-0.7490976019910955 a0.1420842198250257,0.14120920313395363 0 0 0 0,-0.19975936053095905 zM7.931576282630728,8.073123166045836 C7.196896902072058,8.80155600660269 6.2231001759542055,9.20279679111746 5.18692501186438,9.20279679111746 s-2.0099718902076775,-0.4012407845147706 -2.744651270766347,-1.1296736250716286 C1.709327094927478,7.342968262036121 1.3055999824978375,6.37516860153268 1.3055999824978375,5.345374656726532 s0.4037271124296458,-1.99931566876244 1.1366737586002036,-2.727748509319298 C3.1769531216567026,1.8891933068503817 4.150749847774562,1.4879525223356067 5.18692501186438,1.4879525223356067 s2.0117046245957884,0.3995187210619175 2.744651270766347,1.1296736250716286 S9.06825004123093,4.315580711920385 9.06825004123093,5.345374656726532 s-0.4037271124296458,1.99931566876244 -1.1366737586002036,2.727748509319298 z\"\n                    fill=\"#fff\"\n                  />\n                </svg>\n              </a>\n              <a\n                href=\"#\"\n                class=\"darkblue-btn\"\n                @click=\"add_task()\"\n                data-toggle=\"modal\"\n                data-target=\"#taskmodal\"\n                id=\"task_add_btn\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"14\"\n                  height=\"13.997\"\n                  viewBox=\"0 0 14 13.997\"\n                >\n                  <path\n                    id=\"Union_13\"\n                    data-name=\"Union 13\"\n                    d=\"M-12684,2058v-5h-5a1,1,0,0,1-1-1,1,1,0,0,1,1-1h5v-5a1,1,0,0,1,1-1,1,1,0,0,1,1,1v5h5a1,1,0,0,1,1,1,1,1,0,0,1-1,1h-5v5a1,1,0,0,1-1,1A1,1,0,0,1-12684,2058Z\"\n                    transform=\"translate(12690.001 -2045.002)\"\n                    fill=\"#fff\"\n                  />\n                </svg>\n                Add Tasks\n              </a>\n              <a\n                href=\"javascript:void(0)\"\n                class=\"red-btn\"\n                @click=\"delete_selected\"\n                id=\"delete_task\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"14\"\n                  height=\"14\"\n                  viewBox=\"0 0 14 14\"\n                >\n                  <path\n                    id=\"trash-can-outline\"\n                    d=\"M8.375,3v.778H4V5.333h.875V15.444A1.661,1.661,0,0,0,6.625,17h8.75a1.661,1.661,0,0,0,1.75-1.556V5.333H18V3.778H13.625V3H8.375M6.625,5.333h8.75V15.444H6.625V5.333m1.75,1.556v7h1.75v-7H8.375m3.5,0v7h1.75v-7Z\"\n                    transform=\"translate(-4 -3)\"\n                    fill=\"#fff\"\n                  />\n                </svg>\n                Delete\n              </a>\n            </div>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"table-box\">\n              <div class=\"table-responsive\">\n                <table class=\"table\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">\n                        <div class=\"form-check checkbox checkbox-success\">\n                          <label class=\"form-check-label\">\n                            <input\n                              id=\"selectall\"\n                              class=\"form-check-input\"\n                              @change=\"selected_tasks('all')\"\n                              type=\"checkbox\"\n                              value\n                              required\n                            />\n                            <span class=\"icn\"></span>\n                          </label>\n                        </div>\n                      </th>\n                      <th scope=\"col\" style=\"width: 2%\">ACTION</th>\n                      <th scope=\"col\">TASK NAME</th>\n                      <th scope=\"col\">TYPE</th>\n                      <th scope=\"col\">INTENT</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr v-for=\"(task, index) in task_list\" :key=\"index\">\n                      <th scope=\"row\">\n                        <div class=\"form-check checkbox checkbox-success\">\n                          <label class=\"form-check-label\">\n                            <input\n                              class=\"form-check-input\"\n                              @change=\"selected_tasks(index)\"\n                              type=\"checkbox\"\n                            />\n                            <span class=\"icn\"></span>\n                          </label>\n                        </div>\n                      </th>\n                      <td class=\"action\">\n                        <a\n                          class=\"#\"\n                          style=\"cursor: pointer\"\n                          @click=\"openpreview(index)\"\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"15.392\"\n                            height=\"15.392\"\n                            viewBox=\"0 0 15.392 15.392\"\n                          >\n                            <path\n                              id=\"square-edit-outline\"\n                              d=\"M4.71,3A1.7,1.7,0,0,0,3,4.71V16.682a1.71,1.71,0,0,0,1.71,1.71H16.682a1.71,1.71,0,0,0,1.71-1.71V10.7h-1.71v5.986H4.71V4.71H10.7V3H4.71m10.928.855a.591.591,0,0,0-.41.171L14.185,5.061,16.322,7.2l1.043-1.035a.578.578,0,0,0,0-.812L16.04,4.026a.571.571,0,0,0-.4-.171M13.578,5.668l-6.3,6.311v2.138H9.413l6.3-6.311Z\"\n                              transform=\"translate(-3 -3)\"\n                              fill=\"#9499ae\"\n                            />\n                          </svg>\n                        </a>\n                        <a\n                          href=\"#\"\n                          class=\"trash\"\n                          @click=\"delete_single(index)\"\n                          id=\"single_delete_task_id\"\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"13.682\"\n                            height=\"15.392\"\n                            viewBox=\"0 0 13.682 15.392\"\n                          >\n                            <path\n                              id=\"trash-can-outline\"\n                              d=\"M8.276,3v.855H4v1.71h.855V16.682a1.71,1.71,0,0,0,1.71,1.71h8.551a1.71,1.71,0,0,0,1.71-1.71V5.565h.855V3.855H13.406V3H8.276M6.565,5.565h8.551V16.682H6.565V5.565m1.71,1.71v7.7h1.71v-7.7H8.276m3.42,0v7.7h1.71v-7.7Z\"\n                              transform=\"translate(-4 -3)\"\n                              fill=\"#f23d3d\"\n                            />\n                          </svg>\n                        </a>\n                      </td>\n                      <td>{{ task.TaskName }}</td>\n                      <td>\n                        {{ task.Task_Type }}\n                        <!-- <tr\n                          v-for=\"(description, desc_index) in task.Task_Description\"\n                          :key=\"desc_index\"\n                        >\n                          <td style=\"border-color: #fff;width:auto\">{{ description.Text }}</td>\n                        </tr> -->\n                      </td>\n                      <td>{{ task.Intent }}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div\n                class=\"modal fade dash-modal\"\n                id=\"taskmodal\"\n                tabindex=\"-1\"\n                role=\"dialog\"\n                aria-labelledby=\"intentmodeltitle\"\n                aria-hidden=\"true\"\n                data-backdrop=\"static\"\n                data-keyboard=\"false\">\n              >\n                <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                  <div class=\"modal-content\">\n                    <div class=\"modal-body\">\n                      <div class=\"modal-head d-flex align-items-center\">\n                        <div class=\"head-icn\">\n                          <img src=\"/img/msg-blue.png\" alt />\n                        </div>\n                        <h3>Tasks</h3>\n                        <!-- <a\n                          v-if=\"!isEdit\"\n                          style=\"margin-left: 10px\"\n                          class=\"#\"\n                          @click=\"edit_modal\"\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"15.392\"\n                            height=\"15.392\"\n                            viewBox=\"0 0 15.392 15.392\"\n                          >\n                            <path\n                              id=\"square-edit-outline\"\n                              d=\"M4.71,3A1.7,1.7,0,0,0,3,4.71V16.682a1.71,1.71,0,0,0,1.71,1.71H16.682a1.71,1.71,0,0,0,1.71-1.71V10.7h-1.71v5.986H4.71V4.71H10.7V3H4.71m10.928.855a.591.591,0,0,0-.41.171L14.185,5.061,16.322,7.2l1.043-1.035a.578.578,0,0,0,0-.812L16.04,4.026a.571.571,0,0,0-.4-.171M13.578,5.668l-6.3,6.311v2.138H9.413l6.3-6.311Z\"\n                              transform=\"translate(-3 -3)\"\n                              fill=\"#9499ae\"\n                            />\n                          </svg>\n                        </a> -->\n                      </div>\n                      <button\n                        type=\"button\"\n                        class=\"close\"\n                        data-dismiss=\"modal\"\n                        aria-label=\"Close\"\n                        @click=\"clear_fields\"\n                      >\n                        <img src=\"/img/close-icn.png\" alt />\n                      </button>\n                      <form @submit.prevent=\"add_edit_tasks\">\n                        <div class=\"radio\" style=\"margin-left: 25%\">\n                          <label>\n                            <input\n                              :disabled=\"isEdit || preview\"\n                              type=\"radio\"\n                              v-model=\"task_type\"\n                              id=\"portal_user\"\n                              value=\"Default\"\n                            />\n                            <span class=\"icn\" id=\"portal_user_radio\"></span>\n                            Questions\n                          </label>\n                          <label>\n                            <input\n                              :disabled=\"isEdit || preview\"\n                              type=\"radio\"\n                              v-model=\"task_type\"\n                              value=\"Email\"\n                            />\n                            <span class=\"icn\" id=\"bot_user_radio\"></span> Email\n                          </label>\n                          <!-- <label>\n                            <input\n                              :disabled=\"isEdit || preview\"\n                              type=\"radio\"\n                              v-model=\"task_type\"\n                              value=\"SMS\"\n                            />\n                            <span class=\"icn\" id=\"bot_user_radio\"></span> SMS\n                          </label> -->\n                        </div>\n                        <div class=\"form-group\">\n                          <label>Task Name</label>\n                          <input\n                            id=\"task_name_id\"\n                            class=\"form-control\"\n                            type=\"text\"\n                            v-model=\"input_list.task_name\"\n                            :disabled=\"isEdit || preview\"\n                            placeholder=\"Enter the task name...\"\n                          />\n                        </div>\n                        <div class=\"form-group\">\n                          <label>Select Intent</label>\n                          <multiselect\n                            id=\"select_role_name\"\n                            @change=\"intent_selected_api\"\n                            v-model=\"input_list.intent\"\n                            :searchable=\"true\"\n                            :close-on-select=\"true\"\n                            :show-labels=\"false\"\n                            :options=\"intentlist\"\n                            :disabled=\"preview\"\n                          >\n                            <span>{{ input_list.intent }}</span>\n                          </multiselect>\n                        </div>\n                        <div v-if=\"task_type == 'Email'\" class=\"form-group\">\n                          <div class=\"d-flex justify-space-between\">\n                            <label>Send To:</label>\n                            <div\n                              style=\"position: absolute; right: 0px\"\n                              class=\"form-check checkbox checkbox-success d-flex\"\n                            >\n                              <label\n                                title=\"User interacting with the bot\"\n                                class=\"form-check-label\"\n                              >\n                                <input\n                                  class=\"form-check-input\"\n                                  :disabled=\"preview\"\n                                  type=\"checkbox\"\n                                  value=\"User\"\n                                  @click=\"send_msg_to_user\"\n                                  v-model=\"email_to_user\"\n                                />\n                                <span class=\"icn\"></span>\n                              </label>\n                              <div>End User</div>\n                              <!-- <label class=\"checkbox-inline\">\n                                <input :disabled=\"preview\" type=\"checkbox\" value=\"Custom\" @click=\"send_msg_to_custom_user\" v-model=\"add_customs_email\">Custom\n                              </label> -->\n                            </div>\n                          </div>\n                          <div\n                            style=\"margin-bottom: 10px\"\n                            v-if=\"add_customs_email\"\n                          >\n                            <input\n                              :disabled=\"preview\"\n                              class=\"form-control\"\n                              v-model=\"new_custom_email\"\n                              type=\"text\"\n                              placeholder=\"Add Email\"\n                              @keydown.tab=\"add_email('add')\"\n                            />\n                          </div>\n                          <div\n                            v-if=\"\n                              (add_customs_email && custom_emails.length > 0) ||\n                              email_to_user\n                            \"\n                            style=\"padding-bottom: 0px\"\n                          >\n                            <div\n                              v-for=\"(email, index) in custom_emails\"\n                              :key=\"index\"\n                              class=\"bootstrap-tagsinput\"\n                              style=\"margin-bottom: 10px\"\n                            >\n                              <span class=\"badge\">\n                                {{ email }}\n                                <span\n                                  data-role=\"remove\"\n                                  @click=\"add_email('remove', index)\"\n                                ></span>\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <div v-if=\"task_type == 'Email'\">\n                          Subject\n                          <input\n                            :disabled=\"preview\"\n                            style=\"margin: 0 0 15px\"\n                            class=\"form-control\"\n                            type=\"text\"\n                            v-model=\"email_title\"\n                            placeholder=\"Enter Email Subject here\"\n                          />\n                          Body\n                          <span style=\"margin-left: 8px\">\n                            <svg\n                              class=\"question-mark\"\n                              data-tooltip=\"tooltip\"\n                              data-placement=\"bottom\"\n                              title=\"Help\"\n                              data-toggle=\"modal\"\n                              data-target=\"#info_email\"\n                              fill=\"#273679\"\n                              xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              xmlns:cc=\"http://creativecommons.org/ns#\"\n                              xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n                              height=\"24\"\n                              width=\"24\"\n                              version=\"1.1\"\n                            >\n                              <g transform=\"translate(0 -1028.4)\">\n                                <path\n                                  d=\"m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z\"\n                                  transform=\"translate(0 1029.4)\"\n                                  fill=\"#2980b9\"\n                                />\n                                <path\n                                  d=\"m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z\"\n                                  transform=\"translate(0 1028.4)\"\n                                  fill=\"#273679\"\n                                />\n                                <path\n                                  d=\"m12 1035.4c-1.727-0.1-3.4306 1.1-3.8438 2.8-0.0403 0.3-0.0546 0.4-0.1562 1.2h2c-0.0526-1.3 1.306-2.3 2.5-2 1.021 0.3 1.763 1.5 1.406 2.5-0.294 0.6-0.998 1-1.562 1.4-0.577 0.5-1.074 1.1-1.313 1.8-0.039 0.4-0.034 0.8-0.031 1.3h2v-1c0.172-0.7 0.688-1.1 1.25-1.4 0.634-0.3 1.087-0.8 1.406-1.4 0.543-1 0.454-2.2-0.125-3.1-0.705-1.3-2.067-2.2-3.531-2.1zm0 10c-0.552 0-1 0.4-1 1 0 0.5 0.448 1 1 1s1-0.5 1-1c0-0.6-0.448-1-1-1z\"\n                                  fill=\"#2980b9\"\n                                />\n                                <path\n                                  d=\"m12 6c-1.727-0.0274-3.4306 1.1749-3.8438 2.875-0.0403 0.2941-0.0546 0.3281-0.1562 1.125h2c-0.0526-1.2477 1.306-2.289 2.5-1.9375 1.021 0.2374 1.763 1.4281 1.406 2.4375-0.294 0.684-0.998 0.992-1.562 1.406-0.577 0.482-1.074 1.094-1.313 1.813-0.039 0.42-0.034 0.859-0.031 1.281h2v-1c0.172-0.624 0.688-1.042 1.25-1.312 0.634-0.312 1.087-0.835 1.406-1.469 0.543-0.974 0.454-2.1746-0.125-3.094-0.705-1.2699-2.067-2.1438-3.531-2.125zm0 10c-0.552 0-1 0.448-1 1s0.448 1 1 1 1-0.448 1-1-0.448-1-1-1z\"\n                                  transform=\"translate(0 1028.4)\"\n                                  fill=\"#ecf0f1\"\n                                />\n                              </g>\n                            </svg>\n                          </span>\n                          <textarea\n                            :disabled=\"preview\"\n                            rows=\"4\"\n                            cols=\"50\"\n                            style=\"\n                              resize: none;\n                              overflow-y: auto;\n                              margin: 0 0 15px;\n                            \"\n                            class=\"form-control\"\n                            type=\"text\"\n                            v-model=\"email_body\"\n                            placeholder=\"Enter email body here\"\n                            @keyup=\"checkforemailvariables\"\n                          ></textarea>\n                          <div v-if=\"email_variables.length > 0\">\n                            Variables:\n                            <div\n                              v-for=\"(variable, index) in email_variables\"\n                              :key=\"index\"\n                            >\n                              {{ variable.variable_name }}\n                              <input\n                                :disabled=\"preview\"\n                                class=\"form-control\"\n                                v-model=\"\n                                  email_variables[index].variable_description\n                                \"\n                                type=\"text\"\n                                placeholder=\"Description\"\n                                required\n                              />\n                            </div>\n                          </div>\n                        </div>\n                        <div v-if=\"task_type == 'SMS'\" class=\"form-group\">\n                          <div style=\"display: flex\">\n                            <label>Send To:</label>\n                            <div\n                              style=\"\n                                position: absolute;\n                                right: 0px;\n                                display: flex;\n                              \"\n                              class=\"form-check checkbox checkbox-success\"\n                            >\n                              <label\n                                title=\"User interacting with the bot\"\n                                class=\"form-check-label\"\n                              >\n                                <input\n                                  class=\"form-check-input\"\n                                  :disabled=\"preview\"\n                                  type=\"checkbox\"\n                                  value=\"User\"\n                                  @click=\"send_sms_to_user\"\n                                  v-model=\"sms_to_user\"\n                                />\n                                <span class=\"icn\"></span>\n                              </label>\n                              <div>End User</div>\n                              <!-- <label class=\"checkbox-inline\">\n                                <input :disabled=\"preview\" type=\"checkbox\" value=\"Custom\" @click=\"send_sms_to_custom_user\" v-model=\"add_customs_number\">Custom\n                              </label> -->\n                            </div>\n                          </div>\n                          <div\n                            style=\"margin-bottom: 10px\"\n                            v-if=\"add_customs_number\"\n                          >\n                            <input\n                              :disabled=\"preview\"\n                              class=\"form-control\"\n                              v-model=\"new_custom_number\"\n                              type=\"text\"\n                              placeholder=\"Add Number\"\n                              @keyup=\"add_number('add')\"\n                            />\n                          </div>\n                          <div\n                            v-if=\"\n                              (add_customs_number &&\n                                custom_number.length > 0) ||\n                              sms_to_user\n                            \"\n                            style=\"padding-bottom: 0px\"\n                          >\n                            <div\n                              v-if=\"sms_to_user\"\n                              class=\"bootstrap-tagsinput\"\n                              style=\"margin-bottom: 10px\"\n                            >\n                              <span class=\"badge\"> User </span>\n                            </div>\n                            <div\n                              v-for=\"(number, index) in custom_number\"\n                              :key=\"index\"\n                              class=\"bootstrap-tagsinput\"\n                              style=\"margin-bottom: 10px\"\n                            >\n                              <span class=\"badge\">\n                                {{ number }}\n                                <span\n                                  data-role=\"remove\"\n                                  @click=\"add_number('remove', index)\"\n                                ></span>\n                              </span>\n                            </div>\n                          </div>\n                          Body\n                          <span style=\"margin-left: 8px\">\n                            <svg\n                              class=\"question-mark\"\n                              data-tooltip=\"tooltip\"\n                              data-placement=\"bottom\"\n                              title=\"Help\"\n                              data-toggle=\"modal\"\n                              data-target=\"#info_email\"\n                              fill=\"#273679\"\n                              xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              xmlns:cc=\"http://creativecommons.org/ns#\"\n                              xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n                              height=\"24\"\n                              width=\"24\"\n                              version=\"1.1\"\n                            >\n                              <g transform=\"translate(0 -1028.4)\">\n                                <path\n                                  d=\"m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z\"\n                                  transform=\"translate(0 1029.4)\"\n                                  fill=\"#2980b9\"\n                                />\n                                <path\n                                  d=\"m22 12c0 5.523-4.477 10-10 10-5.5228 0-10-4.477-10-10 0-5.5228 4.4772-10 10-10 5.523 0 10 4.4772 10 10z\"\n                                  transform=\"translate(0 1028.4)\"\n                                  fill=\"#273679\"\n                                />\n                                <path\n                                  d=\"m12 1035.4c-1.727-0.1-3.4306 1.1-3.8438 2.8-0.0403 0.3-0.0546 0.4-0.1562 1.2h2c-0.0526-1.3 1.306-2.3 2.5-2 1.021 0.3 1.763 1.5 1.406 2.5-0.294 0.6-0.998 1-1.562 1.4-0.577 0.5-1.074 1.1-1.313 1.8-0.039 0.4-0.034 0.8-0.031 1.3h2v-1c0.172-0.7 0.688-1.1 1.25-1.4 0.634-0.3 1.087-0.8 1.406-1.4 0.543-1 0.454-2.2-0.125-3.1-0.705-1.3-2.067-2.2-3.531-2.1zm0 10c-0.552 0-1 0.4-1 1 0 0.5 0.448 1 1 1s1-0.5 1-1c0-0.6-0.448-1-1-1z\"\n                                  fill=\"#2980b9\"\n                                />\n                                <path\n                                  d=\"m12 6c-1.727-0.0274-3.4306 1.1749-3.8438 2.875-0.0403 0.2941-0.0546 0.3281-0.1562 1.125h2c-0.0526-1.2477 1.306-2.289 2.5-1.9375 1.021 0.2374 1.763 1.4281 1.406 2.4375-0.294 0.684-0.998 0.992-1.562 1.406-0.577 0.482-1.074 1.094-1.313 1.813-0.039 0.42-0.034 0.859-0.031 1.281h2v-1c0.172-0.624 0.688-1.042 1.25-1.312 0.634-0.312 1.087-0.835 1.406-1.469 0.543-0.974 0.454-2.1746-0.125-3.094-0.705-1.2699-2.067-2.1438-3.531-2.125zm0 10c-0.552 0-1 0.448-1 1s0.448 1 1 1 1-0.448 1-1-0.448-1-1-1z\"\n                                  transform=\"translate(0 1028.4)\"\n                                  fill=\"#ecf0f1\"\n                                />\n                              </g>\n                            </svg>\n                          </span>\n                          <textarea\n                            :disabled=\"preview\"\n                            rows=\"4\"\n                            cols=\"50\"\n                            style=\"\n                              resize: none;\n                              overflow-y: auto;\n                              margin: 0 0 15px;\n                            \"\n                            class=\"form-control\"\n                            type=\"text\"\n                            v-model=\"sms_body\"\n                            placeholder=\"Enter sms message here\"\n                            @keyup=\"checkforsmsvariables\"\n                          ></textarea>\n                          <div v-if=\"sms_varibles.length > 0\">\n                            Variables:\n                            <div\n                              v-for=\"(variable, index) in sms_varibles\"\n                              :key=\"index\"\n                            >\n                              {{ variable.variable_name }}\n                              <input\n                                :disabled=\"preview\"\n                                class=\"form-control\"\n                                v-model=\"\n                                  sms_varibles[index].variable_description\n                                \"\n                                type=\"text\"\n                                placeholder=\"Description\"\n                                required\n                              />\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"row\"></div>\n                        <br />\n                        <div v-if=\"task_type == 'Default'\" class=\"form-group\">\n                          <label>Questions to be asked to the user</label>\n                          <br />\n                          <br />Question Number 1\n                          <input\n                            :disabled=\"preview\"\n                            class=\"form-control\"\n                            type=\"text\"\n                            placeholder=\"Enter the Question...\"\n                            v-model=\"input_list.question\"\n                          />\n                        </div>\n                        <div v-if=\"task_type == 'Default'\">\n                          <div\n                            class=\"form-group\"\n                            v-for=\"(question, index) in questions_list\"\n                            :key=\"index\"\n                          >\n                            Question Number {{ index + 2 }}\n                            <span\n                              style=\"float: right; cursor: pointer\"\n                              @click=\"add_question('remove', index)\"\n                            >\n                              <i style=\"font-size: 16px\" class=\"fa\">&#xf00d;</i>\n                            </span>\n                            <input\n                              :disabled=\"preview\"\n                              class=\"form-control\"\n                              type=\"text\"\n                              v-model.trim=\"question.Text\"\n                              placeholder=\"Enter the Question...\"\n                            />\n                          </div>\n                        </div>\n\n                        <div\n                          v-if=\"task_type == 'Default'\"\n                          class=\"form-group\"\n                          style=\"float: left\"\n                        >\n                          <a\n                            href=\"#\"\n                            class=\"darkblue-btn\"\n                            style=\"padding: 5px 10px\"\n                            @click=\"add_question('add')\"\n                          >\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"14\"\n                              height=\"13.997\"\n                              viewBox=\"0 0 14 13.997\"\n                            >\n                              <path\n                                id=\"Union_13\"\n                                data-name=\"Union 13\"\n                                d=\"M-12684,2058v-5h-5a1,1,0,0,1-1-1,1,1,0,0,1,1-1h5v-5a1,1,0,0,1,1-1,1,1,0,0,1,1,1v5h5a1,1,0,0,1,1,1,1,1,0,0,1-1,1h-5v5a1,1,0,0,1-1,1A1,1,0,0,1-12684,2058Z\"\n                                transform=\"translate(12690.001 -2045.002)\"\n                                fill=\"#fff\"\n                              />\n                            </svg>\n                            Add Question\n                          </a>\n                        </div>\n                        <br />\n                        <!-- <div class=\"row\" v-for=\"(input, index) in input_list.fields\" :key=\"index\">\n                          <div class=\"col-md-3\">\n                            <div class=\"form-group\">{{input.title}}</div>\n                          </div>\n                          <div class=\"col-md-9\">\n                            <div class=\"form-group\">\n                              <input type=\"text\" class=\"form-control\" v-model=\"input.value\">\n                            </div>\n                          </div>\n                        </div>-->\n                        <div class=\"btn-wrap text-right\">\n                          <button\n                            type=\"button\"\n                            @click=\"clear_fields\"\n                            class=\"btn btn-link\"\n                            data-dismiss=\"modal\"\n                          >\n                            Cancel\n                          </button>\n                          <button\n                            type=\"submit\"\n                            id=\"add_task_save\"\n                            class=\"darkblue-btn\"\n                          >\n                            Save\n                          </button>\n                        </div>\n                      </form>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"pagin-table\">\n                <nav aria-label=\"Page navigation example\">\n                  <ul class=\"pagination justify-content-center\">\n                    <li class=\"page-item\">\n                      <a\n                        class=\"page-link\"\n                        href=\"#\"\n                        @click=\"page_require(page_no - 1)\"\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"8.667\"\n                          height=\"15.204\"\n                          viewBox=\"0 0 8.667 15.204\"\n                        >\n                          <g\n                            id=\"arrow-point-to-left\"\n                            transform=\"translate(105.806 15.204) rotate(180)\"\n                          >\n                            <path\n                              id=\"Path_1136\"\n                              data-name=\"Path 1136\"\n                              d=\"M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z\"\n                              transform=\"translate(0 0)\"\n                              fill=\"#9499ae\"\n                            />\n                          </g>\n                        </svg>\n                      </a>\n                    </li>\n                    <li\n                      :class=\"{\n                        'page-item active': pageno === page_no,\n                        'page-item': pageno !== page_no,\n                      }\"\n                      v-for=\"pageno in page_array\"\n                      :key=\"pageno\"\n                    >\n                      <a\n                        v-if=\"pageno == '...s' || pageno == '...l'\"\n                        class=\"page-link\"\n                        href=\"#\"\n                        @click=\"page_require(pageno)\"\n                        >...</a\n                      >\n                      <a\n                        v-if=\"pageno != '...s' && pageno != '...l'\"\n                        class=\"page-link\"\n                        href=\"#\"\n                        @click=\"page_require(pageno)\"\n                        >{{ pageno }}</a\n                      >\n                      <!-- <a class=\"page-link\" href=\"#\" @click=\"page_require(pageno)\">{{pageno}}</a> -->\n                    </li>\n                    <li class=\"page-item\">\n                      <a\n                        class=\"page-link\"\n                        href=\"#\"\n                        @click=\"page_require(page_no + 1)\"\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"8.667\"\n                          height=\"15.204\"\n                          viewBox=\"0 0 8.667 15.204\"\n                        >\n                          <g\n                            id=\"arrow-point-to-right\"\n                            transform=\"translate(-97.139 0)\"\n                          >\n                            <path\n                              id=\"Path_1136\"\n                              data-name=\"Path 1136\"\n                              d=\"M105.493,8.354l-6.537,6.537a1.065,1.065,0,1,1-1.506-1.506L103.235,7.6,97.45,1.817A1.065,1.065,0,0,1,98.956.312l6.537,6.537a1.065,1.065,0,0,1,0,1.505Z\"\n                              transform=\"translate(0 0)\"\n                              fill=\"#9499ae\"\n                            />\n                          </g>\n                        </svg>\n                      </a>\n                    </li>\n                  </ul>\n                </nav>\n              </div>\n              <div\n                class=\"modal fade dash-modal\"\n                id=\"info_email\"\n                tabindex=\"-1\"\n                role=\"dialog\"\n                aria-labelledby=\"configapimodaltitle\"\n                aria-hidden=\"true\"\n                data-backdrop=\"true\"\n              >\n                <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                  <div\n                    class=\"modal-content\"\n                    style=\"width: 220%; margin-left: -35%\"\n                  >\n                    <div class=\"modal-body\" style=\"width: 1000px\">\n                      <div class=\"modal-head d-flex align-items-center\">\n                        <div class=\"head-icn\">\n                          <img src=\"/img/msg-blue.png\" alt />\n                        </div>\n                        <h3>Help</h3>\n                      </div>\n                      <div>\n                        <h6>\n                          If you want to add variables you can add them using\n                          the following syntax\n                          {{ variable }} in the email body.\n                        </h6>\n                      </div>\n                      <div>\n                        <div>\n                          <br />\n                          <label\n                            >For Example, If you want to use the user's name in\n                            the email you can write it in the following\n                            manner:</label\n                          >\n                          <textarea\n                            disabled\n                            id=\"configapi_req_json\"\n                            class=\"form-control\"\n                            placeholder=\"response\"\n                            rows=\"10\"\n                            style=\"color: black\"\n                            v-model=\"body_content\"\n                          ></textarea>\n                        </div>\n                        <br />\n                      </div>\n                      <br />\n                      <br />\n                      <button\n                        type=\"button\"\n                        class=\"close\"\n                        data-dismiss=\"modal\"\n                        aria-label=\"Close\"\n                      >\n                        <img src=\"/img/close-icn.png\" alt />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport { setTimeout } from \"timers\";\nimport api_calls from \"@/portal/api_calls\";\nimport Multiselect from \"vue-multiselect\";\nimport { tsObjectKeyword } from \"@babel/types\";\nimport { freeze_portal,show_subscription_expired_swal } from \"@/portal/mixins\";\n\nexport default {\n  name: \"AddTaskPage\",\n  mixins: [\n    freeze_portal,\n    show_subscription_expired_swal,\n  ],\n  components: {\n    Multiselect,\n  },\n  data() {\n    return {\n      input_list: {\n        task_name: \"\",\n        intent: \"\",\n        fields: [],\n        question: \"\",\n        question_id: \"\",\n      },\n      total_pages: 1,\n      per_page: 10,\n      page_no: 1,\n      question_text: false,\n      question_entered: \"\",\n      intentlist: [],\n      task_list: [],\n      original_intent_list: [],\n      checked_list: [],\n      isEdit: false,\n      questions_list: [],\n      // harsh\n      search_name: \"\",\n      page_array: [],\n      task_type: \"Default\",\n      task_types: [\"Email\", \"SMS\", \"Default\"],\n      email_to_user: true,\n      add_customs_email: true,\n      new_custom_email: null,\n      custom_emails: [],\n      email_title: null,\n      email_body: null,\n      email_variables: [],\n      sms_to_user: true,\n      add_customs_number: true,\n      new_custom_number: null,\n      custom_number: [],\n      sms_body: null,\n      sms_varibles: [],\n      selected_task: null,\n      spinnerOn: false,\n      isVisibleSearchClear: false,\n      disable_btn_expired:false,\n      // ----\n      companyid:\n        this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\n          ? this.$session.get(\"CompanyId\")\n          : this.$session.get(\"UserInformation\").company_id,\n      companyname:\n        this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\n          ? this.$session.get(\"CompanyName\")\n          : this.$session.get(\"UserInformation\").company_name,\n      variable: \"{{name}}\",\n      preview: false,\n      delete_task_ids: [],\n      body_content: `Hi {{name}},\n        You are receiving this email because you (or someone else) have requested to reset the password of {{name}} account.\n        Please click on the following link, or paste this into your browser to complete the process:\n        https://cense.ai/change-password\n        If you did not request this, please ignore this email and your password will remain unchanged.\n\n        Regards,\n        Admin`,\n    };\n  },\n  created() {\n    this.load_task();\n  },\n  mounted() {\n    setTimeout(() => {\n      this.freeze_portal();\n    }, 1000);\n    this.$root.$on(\"NerTrainingPageDisabled\", (data) =>{\n      if(data===true){\n        this.disable_btn_expired = true;\n      }\n    })\n    var vm = this;\n    $(\"#taskmodal\").on(\"hidden.bs.modal\", function (e) {\n      vm.clear_fields();\n    });\n    $(\"#selectall\").click(function () {\n      if ($(this).is(\":checked\")) {\n        // $('div:input').prop('checked',true);\n        $(\"input:checkbox\").prop(\"checked\", true);\n      } else {\n        vm.checked_list = [];\n        $(\"input:checkbox\").prop(\"checked\", false);\n      }\n    });\n  },\n  watch: {\n    search_name() {\n      if (this.search_name === \"\") {\n        this.load_task();\n        this.isVisibleSearchClear = false;\n      } else if (this.search_name !== \"\") {\n        this.isVisibleSearchClear = true;\n      }\n    },\n  },\n  methods: {\n    add_task(){\n      if(!this.disable_btn_expired){\n        $(\"#taskmodal\").modal('show')\n      } else {\n        this.show_subscription_expired_swal();\n      }\n    },\n    clear_search_name() {\n      this.search_name = \"\";\n    },\n    load_task() {\n      if (\n        !this.$session.has(\"CompanyId\") &&\n        this.$session.get(\"UserInformation\").role == \"SuperAdmin\"\n      ) {\n        toastr.warning(\"Please select a company name from the dropdown\");\n      } else {\n        this.companyid = this.$session.get(\"UserInformation\").company_id;\n        this.companyname = this.$session.get(\"UserInformation\").company_name;\n      }\n      axios\n        .post(\n          api_calls.show_intent_url(),\n          {\n            companyid: this.companyid,\n            companyname: this.companyname,\n            email: this.$session.get(\"UserInformation\").email,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.$session.get(\"UserInformation\").tokens,\n            get_intents: true,\n            showintent: \"True\",\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          // for (var i in response.data) {\n          //   this.intentlist.push(\n          //     response.data[i].replace(this.companyid + \"_\", \"\")\n          //   );\n          // }\n          for (var i in response.data) {\n            this.intentlist.push(\n              response.data[i]\n            );\n          }\n        })\n        .catch((e) => {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n      axios\n        .post(\n          api_calls.open_form_tasks(),\n          {\n            companyid: this.companyid,\n            companyname: this.companyname,\n            email: this.$session.get(\"UserInformation\").email,\n            license_key: this.$session.get(\"UserInformation\").license_key,\n            token: this.$session.get(\"UserInformation\").tokens,\n            isShow: true,\n            per_page: this.per_page,\n            page_no: this.page_no,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$session.get(\"at\")}`,\n            },\n          }\n        )\n        .then((response) => {\n          // console.log(\"MAiN LIST\", response.data.TasksList);\n          this.task_list = [];\n          for (var i in response.data.TasksList) {\n            if (response.data.TasksList[i].TaskType == \"default\") {\n              let desc = [];\n              for (var j in response.data.TasksList[i].Utterances) {\n                desc.push({\n                  QuestionId: response.data.TasksList[i].Utterances[j].SlotName,\n                  Text: response.data.TasksList[i].Utterances[j].Text,\n                });\n              }\n              if (desc.length != 0) {\n                this.task_list.push({\n                  Intent: response.data.TasksList[i].Intent,\n                  TaskName: response.data.TasksList[i].TaskName,\n                  Task_Description: desc,\n                  Task_Id: response.data.TasksList[i].TaskID,\n                  Task_Type: response.data.TasksList[i].TaskType,\n                });\n              }\n            } else if (response.data.TasksList[i].TaskType == \"Email\") {\n              this.task_list.push({\n                Intent: \"None\",\n                // Intent: response.data.TasksList[i].Intent,\n                TaskName: response.data.TasksList[i].TaskName,\n                Task_Description: response.data.TasksList[i].TaskDetails,\n                Task_Id: response.data.TasksList[i].TaskID,\n                Task_Type: response.data.TasksList[i].TaskType,\n              });\n            } else if (response.data.TasksList[i].TaskType == \"SMS\") {\n              this.task_list.push({\n                Intent: \"None\",\n                // Intent: response.data.TasksList[i].Intent,\n                TaskName: response.data.TasksList[i].TaskName,\n                Task_Description: response.data.TasksList[i].TaskDetails,\n                Task_Id: response.data.TasksList[i].TaskID,\n                Task_Type: response.data.TasksList[i].TaskType,\n              });\n            } else if (response.data.TasksList[i]) {\n              let desc = [];\n              for (var j in response.data.TasksList[i].Utterances) {\n                desc.push({\n                  QuestionId: response.data.TasksList[i].Utterances[j].SlotName,\n                  Text: response.data.TasksList[i].Utterances[j].Text,\n                });\n              }\n              if (desc.length != 0) {\n                this.task_list.push({\n                  Intent: response.data.TasksList[i].Intent,\n                  TaskName: response.data.TasksList[i].TaskName,\n                  Task_Description: desc,\n                  Task_Id: response.data.TasksList[i].TaskID,\n                  Task_Type: response.data.TasksList[i].TaskType,\n                });\n                // console.log(\"task id\");\n                // console.log(response.data.TasksList[i].TaskID)\n              }\n            }\n          }\n          this.original_intent_list = this.task_list;\n          // console.log(this.original_intent_list);\n          // for (var i in response.data.TasksList) {\n          //   let desc = [];\n          //   for (var j in response.data.TasksList[i].Utterances) {\n          //     desc.push({\n          //       Text: response.data.TasksList[i].Utterances[j].Text\n          //     });\n          //   }\n          //   if (desc.length != 0) {\n          //     this.task_list.push({\n          //       Intent: response.data.TasksList[i].Intent,\n          //       TaskName: response.data.TasksList[i].TaskName,\n          //       Task_Description: desc,\n          //       Task_Id: response.data.TasksList[i].TaskID,\n          //       Task_Type: response.data.TasksList[i].TaskType,\n          //     });\n          //   }\n          // }\n          this.total_pages = response.data.pagecount;\n          this.setpagination(this.page_no);\n        })\n        .catch((e) => {\n          if (\n            e.response.status === 410 ||\n            e.response.status === 440 ||\n            e.response.status === 409\n          ) {\n            this.$root.$emit(\"Session_Expired\", e.response.data);\n          }\n        });\n    },\n    add_question(type, index) {\n      if (type == \"add\") {\n        if (this.isEdit == true){\n          var count = this.questions_list.length + 2;          \n          this.questions_list.push({\n          Text: \"\",\n          QuestionId: \"Question_Number_\" + count + \"_\" + new Date().getTime() ,\n        });\n          count = count + 1;\n        }\n        else {\n        this.questions_list.push({\n          Text: \"\",\n        });\n        }\n      } else if (type == \"remove\") {\n        this.questions_list.splice(index, 1);\n      }\n    },\n    add_email(type, index) {\n      if (type == \"add\") {\n        this.custom_emails.push(this.new_custom_email);\n        this.new_custom_email = null;\n      } else if (type == \"remove\") {\n        this.custom_emails.splice(index, 1);\n      }\n    },\n    add_number(type, index) {\n      if (type == \"add\" && event.keyCode === 13) {\n        this.custom_number.push(this.new_custom_number);\n        this.new_custom_number = null;\n      } else if (type == \"remove\") {\n        this.custom_number.splice(index, 1);\n      }\n    },\n    intent_selected_api() {},\n    edit_modal() {\n      event.preventDefault();\n      var index = this.selected_task;\n      this.isEdit = true;\n      this.preview = false;\n      // this.task_type = Boolean(this.task_list[index].Task_Type)\n      //   ? this.task_list[index].Task_Type\n      //   : \"Default\"\n      // this.input_list.intent = this.task_list[index].Intent;\n      // this.input_list.task_name = this.task_list[index].TaskName;\n      // this.input_list.question = this.task_list[index].Task_Description[0].Text;\n      // this.task_list[index].Task_Description.splice(0, 1);\n      // for (var j in this.task_list[index].Task_Description) {\n      //   this.questions_list.push(this.task_list[index].Task_Description[j]);\n      // }\n    },\n    selected_tasks(index) {\n      if (index == \"all\") {\n        if (event.target.checked) {\n          this.checked_list = this.task_list;\n        } else if (!event.target.checked) {\n          this.checked_list = [];\n        }\n      } else {\n        if (event.target.checked == true) {\n          this.checked_list.push(index);\n        } else if (event.target.checked == false) {\n          let val_index = this.checked_list.indexOf(index);\n          this.checked_list.splice(val_index, 1);\n        }\n      }\n    },\n    add_edit_tasks() {\n      if (this.task_type == \"Default\") {\n        var empty_questions = this.questions_list.filter((question) => {\n          return question.Text == \"\";\n        });\n        if (\n          this.empty_fields_check() &&\n          (this.questions_list.length == 0 || empty_questions.length == 0)\n        ) {\n          // this.input_list.fields.push({\n          //   Text: this.input_list.question\n          // });\n          // for (var i in this.questions_list) {\n          //   this.input_list.fields.push(this.questions_list[i]);\n          // }\n          if (this.isEdit == true) {\n            var edit_object = {};\n            var edit_slot_mapping_data = {};\n            let i = 1;\n            var taskquestion = [];\n            taskquestion.push({\n              Type: \"Ask\",\n              Text: this.input_list.question,\n            });\n            edit_object[this.input_list.question_id] =\n              taskquestion[0];\n            edit_slot_mapping_data[this.input_list.question_id] = {\n              from_text: true,\n              from_entity: false,\n              intent: true,\n              not_intent: false,\n            };\n            for (i = 2; i < this.questions_list.length + 2; i++) {\n              taskquestion.push({\n                Type: \"Ask\",\n                Text: this.questions_list[i - 2].Text,\n              });\n              edit_object[this.questions_list[i-2].QuestionId] =\n                taskquestion[i - 1];\n              edit_slot_mapping_data[this.questions_list[i-2].QuestionId] = {\n                from_text: true,\n                from_entity: false,\n                intent: true,\n                not_intent: false,\n              };\n            }\n            // console.log(\"This is the EDIT object\", edit_object);\n            axios\n              .put(\n                api_calls.task_list_url(),\n                {\n                  companyid: this.companyid,\n                  companyname: this.companyname,\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  intent: this.input_list.intent,\n                  task_details: edit_object,\n                  task_id: this.task_list[this.selected_task].Task_Id,\n                  task_type: \"Default\",\n                  // task_details: this.input_list.fields\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                if (response.data == \"Task Edit\") {\n                  Swal({\n                    text:\n                      \"The saved changes would be reflected once the model is trained.\",\n                    showConfirmButton: true,\n                    timer: 3000,\n                  }).then((result) => {\n                    if (result.value) {\n                      this.load_task();\n                    }\n                  });\n                } else if (response.data == \"Internal Server Error\") {\n                  toastr.error(\"Internal Server Error\");\n                }\n                $(\"#taskmodal\").modal(\"hide\");\n              })\n              .catch((e) => {\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n              });\n          } else if (this.isEdit == false) {\n            var object = {};\n        var slot_mapping_data = {};\n            let i = 1;\n          var taskquestion = [];\n          taskquestion.push({\n            Type: \"Ask\",\n            Text: this.input_list.question,\n          });\n          var unique_key = new Date().getTime() ;\n          object[\"Question_Number_1\" + \"_\" + unique_key] = taskquestion[0];\n          slot_mapping_data[\"Question_Number_1\" + \"_\" + unique_key] = {\n            from_text: true,\n            from_entity: false,\n            intent: true,\n            not_intent: false,\n          };\n          for (i = 2; i < this.questions_list.length + 2; i++) {\n            taskquestion.push({\n              Type: \"Ask\",\n              Text: this.questions_list[i - 2].Text,\n            });\n            var unique_key_2 = new Date().getTime() ; \n            object[\"Question_Number_\" + i + \"_\" + unique_key_2] =\n              taskquestion[i - 1];\n            slot_mapping_data[\"Question_Number_\" + i + \"_\" + unique_key_2] = {\n              from_text: true,\n              from_entity: false,\n              intent: true,\n              not_intent: false,\n            };\n          }\n          // console.log(\"This is the object\", object);\n            axios\n              .post(\n                api_calls.task_list_url(),\n                {\n                  companyid: this.companyid,\n                  companyname: this.companyname,\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  intent: this.input_list.intent,\n                  task_details: object,\n                  // task_details: this.input_list.fields,\n                  slot_mapping_data: slot_mapping_data,\n                  task_name: this.input_list.task_name,\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                if (response.data == \"Task Added\") {\n                  toastr.success(\"Your task has been added successfully\");\n                  $(\"#taskmodal\").modal(\"hide\");\n                  setTimeout(() => {\n                    // this.$router.go();\n                    this.load_task();\n                  }, 2500);\n                } else if (response.data == \"Internal Server Error\") {\n                  toastr.error(\"Internal Server Error\");\n                }\n                $(\"#taskmodal\").modal(\"hide\");\n              })\n              .catch((e) => {\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n              });\n          }\n        } else {\n          toastr.error(\"Please enter all the required fields.\");\n        }\n      } else if (this.task_type == \"Email\") {\n        var object = {};\n        var allok = true;\n        if (\n          this.email_title == null ||\n          this.email_title == \"\" ||\n          this.email_body == null ||\n          this.email_body == \"\"\n        ) {\n          allok = false;\n        }\n        // if(this.add_customs_email&&this.custom_emails.length==0){\n        //   allok = false;\n        // }\n        if (this.input_list.task_name == \"\") {\n          allok = false;\n        }\n        if (this.email_variables.length > 0) {\n          for (let i = 0; i < this.email_variables.length; i++) {\n            if (\n              this.email_variables[i].variable_description == \"\" ||\n              this.email_variables[i].variable_description == null ||\n              this.email_variables[i].variable_description == \" \"\n            ) {\n              allok = false;\n            }\n          }\n        }\n        if (allok) {\n          object[\"subject\"] = this.email_title;\n          object[\"body\"] = this.email_body;\n          object[\"user_email\"] = this.email_to_user;\n          object[\"custom_emails\"] = this.custom_emails;\n          object[\"email_variables\"] = this.email_variables;\n\n          if (this.isEdit == false) {\n            axios\n              .post(\n                api_calls.open_form_tasks(),\n                {\n                  companyid: this.companyid,\n                  companyname: this.companyname,\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  intent: this.input_list.intent,\n                  task_name: this.input_list.task_name,\n                  task_type: \"Email\",\n                  task_details: object,\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                if ((response.data = \"Task Added\")) {\n                  toastr.success(\"Your task has been added successfully\");\n                  $(\"#taskmodal\").modal(\"hide\");\n                  setTimeout(() => {\n                    // this.$router.go();\n                    this.load_task();\n                  }, 2500);\n                }\n              })\n              .catch((e) => {\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n              });\n          } else if (this.isEdit == true) {\n            axios\n              .put(\n                api_calls.open_form_tasks(),\n                {\n                  companyid: this.companyid,\n                  companyname: this.companyname,\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  intent: this.input_list.intent,\n                  task_name: this.input_list.task_name,\n                  task_type: \"Email\",\n                  task_details: object,\n                  task_id: this.task_list[this.selected_task].Task_Id,\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                if ((response.data = \"Task Edit\")) {\n                  toastr.success(\"Your task has been edited successfully\");\n                  $(\"#taskmodal\").modal(\"hide\");\n                  setTimeout(() => {\n                    // this.$router.go();\n                    this.load_task();\n                  }, 2500);\n                }\n              })\n              .catch((e) => {\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n              });\n          }\n        } else {\n          toastr.error(\"Please enter all the required fields.\");\n        }\n      } else if (this.task_type == \"SMS\") {\n        var object = {};\n        var allok = true;\n        if (this.sms_body == null || this.sms_body == \"\") {\n          allok = false;\n        }\n        // if(this.add_customs_number&&this.custom_number.length==0){\n        //   allok = false;\n        // }\n        if (this.input_list.task_name == \"\") {\n          allok = false;\n        }\n        if (this.sms_varibles.length > 0) {\n          for (let i = 0; i < this.sms_varibles.length; i++) {\n            if (\n              this.sms_varibles[i].variable_description == \"\" ||\n              this.sms_varibles[i].variable_description == null ||\n              this.sms_varibles[i].variable_description == \" \"\n            ) {\n              allok = false;\n            }\n          }\n        }\n        if (allok) {\n          object[\"body\"] = this.sms_body;\n          object[\"user_number\"] = this.sms_to_user;\n          object[\"custom_numbers\"] = this.custom_number;\n          object[\"sms_variables\"] = this.sms_varibles;\n\n          if (this.isEdit == false) {\n            axios\n              .post(\n                api_calls.open_form_tasks(),\n                {\n                  companyid: this.companyid,\n                  companyname: this.companyname,\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  task_name: this.input_list.task_name,\n                  task_type: \"SMS\",\n                  task_details: object,\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                if ((response.data = \"Task Added\")) {\n                  toastr.success(\"Your task has been added successfully\");\n                  $(\"#taskmodal\").modal(\"hide\");\n                  setTimeout(() => {\n                    // this.$router.go();\n                    this.load_task();\n                  }, 2500);\n                }\n              })\n              .catch((e) => {\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n              });\n          } else if (this.isEdit == true) {\n            axios\n              .put(\n                api_calls.open_form_tasks(),\n                {\n                  companyid: this.companyid,\n                  companyname: this.companyname,\n                  email: this.$session.get(\"UserInformation\").email,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  task_name: this.input_list.task_name,\n                  task_type: \"SMS\",\n                  task_details: object,\n                  task_id: this.task_list[this.selected_task].Task_Id,\n                },\n                {\n                  headers: {\n                    Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                  },\n                }\n              )\n              .then((response) => {\n                if ((response.data = \"Task Edit\")) {\n                  toastr.success(\"Your task has been edited successfully\");\n                  $(\"#taskmodal\").modal(\"hide\");\n                  setTimeout(() => {\n                    // this.$router.go();\n                    this.load_task();\n                  }, 2500);\n                }\n              })\n              .catch((e) => {\n                if (\n                  e.response.status === 410 ||\n                  e.response.status === 440 ||\n                  e.response.status === 409\n                ) {\n                  this.$root.$emit(\"Session_Expired\", e.response.data);\n                }\n              });\n          }\n        }\n      }\n    },\n    delete_selected() {\n      if (this.checked_list.length == 0) {\n        Swal.fire({\n          title: \"No task selected!\",\n          text: \"\",\n          type: \"error\",\n          timer: 2000,\n        });\n      } else {\n        this.delete_task_ids = [];\n        for (let i = 0; i < this.checked_list.length; i++) {\n          // console.log('delete task');\n          // console.log(i.Task_Id);\n          this.delete_task_ids.push(\n            this.task_list[this.checked_list[i]].Task_Id\n          );\n        }\n        // console.log(this.delete_task_ids);\n        this.delete_tasks_api();\n        // let questionlist = [],delete_task_ids\n        //   responselist = [],\n        //   intentlist = [],\n        //   sourcelist = [];\n        // for (var i in this.checked_list) {\n        //   questionlist.push(this.checked_list[i].question);\n        //   responselist.push(this.checked_list[i].response);\n        //   sourcelist.push(this.checked_list[i].source);\n        //   intentlist.push(this.checked_list[i].intent);\n        // }\n        // this.delete_tasks_api(questionlist, responselist, sourcelist, intentlist);\n      }\n    },\n    delete_single(index) {\n      // let intents = [];\n      // intents.push(this.task_list[index].Intent);\n      // console.log(index);\n      this.delete_task_ids = [];\n      this.delete_task_ids.push(this.task_list[index].Task_Id);\n      // console.log(this.delete_task_ids);\n      this.delete_tasks_api();\n      // console.log(\"delete single\")\n      // console.log(this.task_list[index].Task_Id)\n    },\n    delete_tasks_api() {\n      Swal.fire({\n        title: \"Are you sure?\",\n        text: \"You won't be able to revert this!\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#3085d6\",\n        cancelButtonColor: \"#d33\",\n        confirmButtonText: \"Yes, delete it!\",\n      }).then((result) => {\n        if (result.value) {\n          this.spinnerOn = true;\n          axios\n            .delete(\n              api_calls.open_form_tasks(),\n              {\n                params: {\n                  companyid: this.$session.get(\"UserInformation\").company_id,\n                  companyname: this.$session.get(\"UserInformation\")\n                    .company_name,\n                  license_key: this.$session.get(\"UserInformation\").license_key,\n                  email: this.$session.get(\"UserInformation\").email,\n                  token: this.$session.get(\"UserInformation\").tokens,\n                  task_ids: this.delete_task_ids,\n                },\n              },\n              {\n                headers: {\n                  Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                },\n              }\n            )\n            .then((response) => {\n              this.spinnerOn = false;\n              if (response.data.status == \"Failure\") {\n                toastr.error(\"Failed to delete task.\");\n              } else if (response.data.status == \"Success\") {\n                toastr.success(\"Task was deleted successfully\");\n                setTimeout(() => {\n                  // this.$router.go();\n                  this.load_task();\n                }, 2500);\n              }\n            })\n            .catch((e) => {\n              if (\n                e.response.status === 410 ||\n                e.response.status === 440 ||\n                e.response.status === 409\n              ) {\n                this.$root.$emit(\"Session_Expired\", e.response.data);\n              }\n            });\n          // axios\n          //   .delete(api_calls.task_list_url(), {\n          //     data: {\n          //       intents: intents,\n          //       companyname: this.companyname,\n          //       companyid: this.companyid,\n          //       email: this.$session.get(\"UserInformation\").email,\n          //       license_key: this.$session.get(\"UserInformation\").license_key,\n          //       token: this.$session.get(\"UserInformation\").tokens,\n          //       subscription: this.$session.get(\"UserInformation\").subscription\n          //     }\n          //   }, {\n          //   headers: {\n          //     Authorization: `Bearer ${this.$session.get(\"at\")}`,\n          //   },\n          // })\n          //   .then(response => {\n          //     if (response.data == \"Task(s) Deleted\") {\n          //       Swal.fire(\n          //         \"Deleted!\",\n          //         \"Your task(s) have been deleted.\",\n          //         \"success\"\n          //       );\n          //       setTimeout(() => {\n          //         this.$router.go();\n          //       }, 2500);\n          //     }\n          //   })\n          // .catch((e) => {\n          //     if (\n          //       e.response.status === 410 ||\n          //       e.response.status === 440 ||\n          //       e.response.status === 409\n          //     ) {\n          //       this.$root.$emit(\"Session_Expired\", e.response.data);\n          //     }\n          //   });\n        }\n      });\n    },\n    empty_fields_check() {\n      if (\n        this.input_list.intent == \"\" ||\n        this.input_list.task_name == \"\" ||\n        this.input_list.question == \"\"\n      ) {\n        toastr.error(\"Please enter all the fields\");\n        return false;\n      } else {\n        return true;\n        // for (var i in this.input_list.fields) {\n        //   if (\n        //     this.input_list.task_name == \"\" ||\n        //     this.input_list.intent == \"\" ||\n        //     this.input_list.question == \"\"\n        //   ) {\n        //     toastr.error(\"Please enter all the fields\");\n        //     return false;\n        //   } else if (this.input_list.fields[i].value == \"\") {\n        //     toastr.error(\"Please enter all the fields\");\n        //     return false;\n        //   } else if (\n        //     i == this.input_list.fields.length - 1 &&\n        //     this.input_list.fields[i].value != \"\"\n        //   ) {\n        //     return true;\n        //   }\n        // }\n      }\n    },\n    clear_fields() {\n      this.input_list.intent = \"\";\n      this.input_list.task_name = \"\";\n      this.input_list.fields = [];\n      this.input_list.question = \"\";\n      this.questions_list = [];\n      this.isEdit = false;\n      this.preview = false;\n      this.question_text = false;\n      this.task_list[this.selected_task] = this.original_intent_list[\n        this.selected_task\n      ];\n    },\n    callsearch() {\n      if (event.keyCode === 13) {\n        this.search_product();\n      }\n    },\n    search_product() {\n      // if(this.search_by!=''){\n      if (this.search_name != \"\") {\n        this.spinnerOn = true;\n        axios\n          .post(\n            api_calls.task_list_url(),\n            {\n              companyid: this.$session.get(\"UserInformation\").company_id,\n              companyname: this.$session.get(\"UserInformation\").company_name,\n              license_key: this.$session.get(\"UserInformation\").license_key,\n              email: this.$session.get(\"UserInformation\").email,\n              token: this.$session.get(\"UserInformation\").tokens,\n              issearch: true,\n              // searchby: this.search_by,\n              key: this.search_name,\n              per_page: this.per_page,\n              page_no: 1,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$session.get(\"at\")}`,\n              },\n            }\n          )\n          .then((response) => {\n            this.spinnerOn = false;\n            if (response.data.pagecount != undefined) {\n              this.page_no = 1;\n              this.task_list = [];\n              this.original_intent_list = response.data.TasksList;\n              for (var i in response.data.TasksList) {\n                let desc = [];\n                for (var j in response.data.TasksList[i].Utterances) {\n                  desc.push({\n                    Text: response.data.TasksList[i].Utterances[j].Text,\n                  });\n                }\n                if (desc.length != 0) {\n                  this.task_list.push({\n                    Intent: response.data.TasksList[i].Intent,\n                    TaskName: response.data.TasksList[i].TaskName,\n                    Task_Description: desc,\n                  });\n                }\n              }\n              this.total_pages = response.data.pagecount;\n              this.setpagination(this.page_no);\n            } else if (response.data.MSG == \"No Tasks Found\") {\n              toastr.error(\"No Task Found\");\n              setTimeout(() => {\n                // this.$router.go();\n                this.load_task();\n              }, 2500);\n            } else {\n              toastr.error(\"Intrnal Server Error\");\n              setTimeout(() => {\n                // this.$router.go();\n                this.load_task();\n              }, 2500);\n            }\n          })\n          .catch((e) => {\n            if (\n              e.response.status === 410 ||\n              e.response.status === 440 ||\n              e.response.status === 409\n            ) {\n              this.$root.$emit(\"Session_Expired\", e.response.data);\n            }\n          });\n      } else {\n        toastr.error(\"Enter proper data for searching\");\n      }\n      // }else{\n      //   toastr.error(\"Select header for searching\");\n      // }\n    },\n    page_require(page) {\n      if (page == 0 || page == this.total_pages + 1) {\n        event.preventDefault();\n      } else {\n        if (this.search_name == \"\") {\n          $(\"input:checkbox\").prop(\"checked\", false);\n          if (page == \"...s\") {\n            this.page_no = Math.ceil((1 + this.page_no) / 2);\n          } else if (page == \"...l\") {\n            this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);\n          } else {\n            this.page_no = page;\n          }\n          axios\n            .post(\n              api_calls.task_list_url(),\n              {\n                companyid: this.companyid,\n                companyname: this.companyname,\n                email: this.$session.get(\"UserInformation\").email,\n                license_key: this.$session.get(\"UserInformation\").license_key,\n                token: this.$session.get(\"UserInformation\").tokens,\n                isShow: true,\n                per_page: this.per_page,\n                page_no: this.page_no,\n              },\n              {\n                headers: {\n                  Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                },\n              }\n            )\n            .then((response) => {\n              this.task_list = [];\n              this.original_intent_list = response.data.TasksList;\n              for (var i in response.data.TasksList) {\n                let desc = [];\n                for (var j in response.data.TasksList[i].Utterances) {\n                  desc.push({\n                    Text: response.data.TasksList[i].Utterances[j].Text,\n                  });\n                }\n                if (desc.length != 0) {\n                  this.task_list.push({\n                    Intent: response.data.TasksList[i].Intent,\n                    TaskName: response.data.TasksList[i].TaskName,\n                    Task_Description: desc,\n                  });\n                }\n              }\n              this.total_pages = response.data.pagecount;\n              this.setpagination(this.page_no);\n            })\n            .catch((e) => {\n              if (\n                e.response.status === 410 ||\n                e.response.status === 440 ||\n                e.response.status === 409\n              ) {\n                this.$root.$emit(\"Session_Expired\", e.response.data);\n              }\n            });\n        } else {\n          $(\"input:checkbox\").prop(\"checked\", false);\n          if (pageno == \"...s\") {\n            this.page_no = Math.ceil((1 + this.page_no) / 2);\n          } else if (pageno == \"...l\") {\n            this.page_no = Math.ceil((this.total_pages + this.page_no) / 2);\n          } else {\n            this.page_no = pageno;\n          }\n          axios\n            .post(\n              api_calls.task_list_url(),\n              {\n                companyid: this.$session.get(\"UserInformation\").company_id,\n                companyname: this.$session.get(\"UserInformation\").company_name,\n                license_key: this.$session.get(\"UserInformation\").license_key,\n                email: this.$session.get(\"UserInformation\").email,\n                token: this.$session.get(\"UserInformation\").tokens,\n                issearch: true,\n                // searchby: this.search_by,\n                key: this.search_name,\n                per_page: this.per_page,\n                page_no: page,\n              },\n              {\n                headers: {\n                  Authorization: `Bearer ${this.$session.get(\"at\")}`,\n                },\n              }\n            )\n            .then((response) => {\n              if (response.data.pagecount != undefined) {\n                this.page_no = page;\n                this.task_list = [];\n                this.original_intent_list = response.data.TasksList;\n                for (var i in response.data.TasksList) {\n                  let desc = [];\n                  for (var j in response.data.TasksList[i].Utterances) {\n                    desc.push({\n                      Text: response.data.TasksList[i].Utterances[j].Text,\n                    });\n                  }\n                  if (desc.length != 0) {\n                    this.task_list.push({\n                      Intent: response.data.TasksList[i].Intent,\n                      TaskName: response.data.TasksList[i].TaskName,\n                      Task_Description: desc,\n                    });\n                  }\n                }\n                this.total_pages = response.data.pagecount;\n                this.setpagination(this.page_no);\n              } else {\n                toastr.error(\"Intrnal Server Error\");\n                setTimeout(() => {\n                  // this.$router.go();\n                  this.load_task();\n                }, 2500);\n              }\n            })\n            .catch((e) => {\n              if (\n                e.response.status === 410 ||\n                e.response.status === 440 ||\n                e.response.status === 409\n              ) {\n                this.$root.$emit(\"Session_Expired\", e.response.data);\n              }\n            });\n        }\n      }\n    },\n    setpagination(page_no) {\n      this.page_array = [];\n      if (this.total_pages <= 7) {\n        for (let i = 0; i < this.total_pages; i++) {\n          this.page_array.push(i + 1);\n        }\n      } else if (page_no == 1) {\n        for (let i = 0; i < 4; i++) {\n          this.page_array.push(i + 1);\n        }\n        this.page_array.push(\"...l\");\n        this.page_array.push(this.total_pages);\n      } else if (page_no == this.total_pages) {\n        this.page_array.push(1);\n        this.page_array.push(\"...s\");\n        for (let i = this.total_pages - 4; i < this.total_pages; i++) {\n          this.page_array.push(i + 1);\n        }\n      } else if (page_no <= 4) {\n        for (let i = 0; i < page_no + 3; i++) {\n          this.page_array.push(i + 1);\n        }\n        this.page_array.push(\"...l\");\n        this.page_array.push(this.total_pages);\n      } else if (page_no >= this.total_pages - 4) {\n        this.page_array.push(1);\n        this.page_array.push(\"...s\");\n        for (let i = page_no - 4; i < this.total_pages; i++) {\n          this.page_array.push(i + 1);\n        }\n      } else {\n        this.page_array.push(1);\n        this.page_array.push(\"...s\");\n        for (let i = page_no - 3; i <= page_no + 3; i++) {\n          this.page_array.push(i);\n        }\n        this.page_array.push(\"...l\");\n        this.page_array.push(this.total_pages);\n      }\n    },\n    send_msg_to_user() {\n      if (\n        this.add_customs_email ||\n        (!this.add_customs_email && !this.email_to_user)\n      ) {\n        this.email_to_user = !this.email_to_user;\n      } else if (!this.add_customs_email && this.email_to_user) {\n        event.preventDefault();\n        toastr.error(\"Please select atleast one type of recipient\");\n      }\n    },\n    send_msg_to_custom_user() {\n      if (\n        this.email_to_user ||\n        (!this.add_customs_email && !this.email_to_user)\n      ) {\n        this.add_customs_email = !this.add_customs_email;\n      } else if (this.add_customs_email && !this.email_to_user) {\n        event.preventDefault();\n        toastr.error(\"Please select atleast one type of recipient\");\n      }\n    },\n    send_sms_to_user() {\n      if (\n        this.add_customs_number ||\n        (!this.add_customs_number && !this.sms_to_user)\n      ) {\n        this.sms_to_user = !this.sms_to_user;\n      } else if (!this.add_customs_number && this.sms_to_user) {\n        event.preventDefault();\n        toastr.error(\"Please select atleast one type of recipient\");\n      }\n    },\n    send_sms_to_custom_user() {\n      if (this.sms_to_user || (!this.add_customs_number && !this.sms_to_user)) {\n        this.add_customs_number = !this.add_customs_number;\n      } else if (this.add_customs_number && !this.sms_to_user) {\n        event.preventDefault();\n        toastr.error(\"Please select atleast one type of recipient\");\n      }\n    },\n    checkforemailvariables() {\n      var arrStr1 = this.email_body.split(\"{{\");\n      var arrStr2 = [];\n      var new_var_list = [];\n      var new_var_action = [];\n      for (let i = 1; i < arrStr1.length; i++) {\n        if (arrStr1[i].includes(\"}}\")) {\n          arrStr2.push(arrStr1[i].split(\"}}\")[0]);\n          if (new_var_list.indexOf(arrStr1[i].split(\"}}\")[0]) == -1) {\n            new_var_list.push(arrStr1[i].split(\"}}\")[0]);\n            new_var_action.push(\"add\");\n          }\n        }\n      }\n      for (let i = 0; i < this.email_variables.length; i++) {\n        if (new_var_list.indexOf(this.email_variables[i].variable_name) > -1) {\n          new_var_action[\n            new_var_list.indexOf(this.email_variables[i].variable_name)\n          ] = \"keep\";\n        } else if (\n          new_var_list.indexOf(this.email_variables[i].variable_name) == -1\n        ) {\n          new_var_list.push(this.email_variables[i].variable_name);\n          new_var_action.push(\"remove\");\n        }\n      }\n      for (let i = 0; i < new_var_list.length; i++) {\n        if (new_var_action[i] == \"add\") {\n          this.email_variables.push({\n            variable_name: new_var_list[i],\n            variable_description: null,\n          });\n        } else if (new_var_action[i] == \"remove\") {\n          for (let j = 0; j < this.email_variables.length; j++) {\n            if (this.email_variables[j].variable_name == new_var_list[i]) {\n              this.email_variables.splice(j, 1);\n            }\n          }\n        }\n      }\n    },\n    checkforsmsvariables() {\n      // sms_varibles\n      var arrStr1 = this.sms_body.split(\"{{\");\n      var arrStr2 = [];\n      var new_var_list = [];\n      var new_var_action = [];\n      for (let i = 1; i < arrStr1.length; i++) {\n        if (arrStr1[i].includes(\"}}\")) {\n          arrStr2.push(arrStr1[i].split(\"}}\")[0]);\n          if (new_var_list.indexOf(arrStr1[i].split(\"}}\")[0]) == -1) {\n            new_var_list.push(arrStr1[i].split(\"}}\")[0]);\n            new_var_action.push(\"add\");\n          }\n        }\n      }\n      for (let i = 0; i < this.sms_varibles.length; i++) {\n        if (new_var_list.indexOf(this.sms_varibles[i].variable_name) > -1) {\n          new_var_action[\n            new_var_list.indexOf(this.sms_varibles[i].variable_name)\n          ] = \"keep\";\n        } else if (\n          new_var_list.indexOf(this.sms_varibles[i].variable_name) == -1\n        ) {\n          new_var_list.push(this.sms_varibles[i].variable_name);\n          new_var_action.push(\"remove\");\n        }\n      }\n      for (let i = 0; i < new_var_list.length; i++) {\n        if (new_var_action[i] == \"add\") {\n          this.sms_varibles.push({\n            variable_name: new_var_list[i],\n            variable_description: null,\n          });\n        } else if (new_var_action[i] == \"remove\") {\n          for (let j = 0; j < this.sms_varibles.length; j++) {\n            if (this.sms_varibles[j].variable_name == new_var_list[i]) {\n              this.sms_varibles.splice(j, 1);\n            }\n          }\n        }\n      }\n    },\n    openpreview(index) {\n      $(\"#taskmodal\").modal(\"show\");\n      this.task_type = this.task_list[index].Task_Type;\n      // this.preview = true;\n      this.isEdit = true;\n      this.preview = false;\n      this.selected_task = index;\n      this.input_list.task_name = this.task_list[index].TaskName;\n      if (\n        this.task_list[index].Task_Type == \"default\" ||\n        !Boolean(this.task_list[index].Task_Type)\n      ) {\n        this.task_type = \"Default\";\n        this.input_list.intent = this.task_list[index].Intent;\n        this.input_list.question = this.task_list[\n          index\n        ].Task_Description[0].Text;\n        this.input_list.question_id = this.task_list[\n          index\n        ].Task_Description[0].QuestionId;\n        for (\n          var j = 1;\n          j < this.task_list[index].Task_Description.length;\n          j++\n        ) {\n          this.questions_list.push(this.task_list[index].Task_Description[j]);\n        }\n      } else if (this.task_list[index].Task_Type == \"Email\") {\n        // this.custom_emails = this.getdatasobs(this.task_list[index].Task_Description.custom_emails);\n        // this.custom_emails = this.task_list[index].Task_Description.custom_emails;\n        // console.log(this.custom_emails);\n        this.custom_emails = [];\n        for (\n          let i = 0;\n          i < this.task_list[index].Task_Description.custom_emails.length;\n          i++\n        ) {\n          this.custom_emails.push(\n            this.task_list[index].Task_Description.custom_emails[i]\n          );\n        }\n        this.email_title = this.task_list[index].Task_Description.subject;\n        this.email_body = this.task_list[index].Task_Description.body;\n        this.email_variables = [];\n        for (var i in this.task_list[index].Task_Description.email_variables) {\n          this.email_variables.push({\n            variable_name: this.task_list[index].Task_Description\n              .email_variables[i].variable_name,\n            variable_description: this.task_list[index].Task_Description\n              .email_variables[i].variable_description,\n          });\n        }\n      } else if (this.task_list[index].Task_Type == \"SMS\") {\n        this.custom_number = [];\n        for (\n          let i = 0;\n          i < this.task_list[index].Task_Description.custom_numbers.length;\n          i++\n        ) {\n          this.custom_number.push(\n            this.task_list[index].Task_Description.custom_numbers[i]\n          );\n        }\n        this.sms_body = this.task_list[index].Task_Description.body;\n        this.sms_varibles = [];\n        for (var i in this.task_list[index].Task_Description.sms_variables) {\n          this.sms_varibles.push({\n            variable_name: this.task_list[index].Task_Description.sms_variables[\n              i\n            ].variable_name,\n            variable_description: this.task_list[index].Task_Description\n              .sms_variables[i].variable_description,\n          });\n        }\n      }\n      // this.isEdit = true;\n      // this.task_type = this.task_list[index].Task_Type;\n      // this.preview = true;\n      // this.selected_task = index;\n      // this.task_type = 'Default';\n      // this.input_list.intent = this.task_list[index].Intent;\n      // this.input_list.task_name = this.task_list[index].TaskName;\n      // this.input_list.question = this.task_list[index].Task_Description[0].Text;\n      // this.task_list[index].Task_Description.splice(0, 1);\n      // for (var j=1;j<this.task_list[index].Task_Description.length;j++) {\n      //   this.questions_list.push(this.task_list[index].Task_Description[j]);\n      // }\n      // console.log(this.task_list[index]);\n    },\n    // getdatasobs(data){\n    //   var x;\n    //   console.log(data,x);\n    //   x=data;\n    //   console.log(data,x);\n    //   return x;\n    // },\n  },\n};\n</script>\n\n<style  src=\"vue-multiselect/dist/vue-multiselect.min.css\">\n</style>\n\n<style scoped>\ntd > tr > td {\n  border-color: #ffffff;\n}\ntd > tr > td :hover {\n  border-color: #f7f8fb;\n}\n.modal {\n  overflow: scroll !important;\n}\n</style>\n"]}]}