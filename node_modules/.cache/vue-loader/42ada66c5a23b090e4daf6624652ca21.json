{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/ResponseBot.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/Data Inputs/ResponseBot.vue","mtime":1645594423487},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64://
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

import axios from "axios";
import api_calls from "@/portal/api_calls";
import fingerprint from "@/portal/components/fingerprint";
import { bus } from "@/portal/main";
import { setTimeout } from "timers";
import Multiselect from "vue-multiselect";
import VideoViewer from "@/portal/components/Response Bot/VideoViewer.vue";
import debounce from "vue-debounce/dist/debounce.min.js";
// import { Socket } from "phoenix-socket";
import { Socket, Presence } from "phoenix";
import StarRating from 'vue-star-rating';
import {
  voicerecorder,
  start_voice_communication,
  foreignxchange_custom,
  generate_time,
} from "@/portal/mixins";
import moment from "moment";
import swal from "sweetalert2";
import CenseCart from './CenseCart.vue';
import VueNumericInput from 'vue-numeric-input';
import sound from "@/portal/assets/audio/mixkit-add-to-cart.wav";
import "@/portal/assets/js/shopify.min.js"
export default {
  name: "response-bot",
  components: {
    Multiselect,
    VideoViewer,
    StarRating,
    CenseCart,
    VueNumericInput,
  },
  mixins: [
    voicerecorder,
    start_voice_communication,
    foreignxchange_custom,
    generate_time,
  ],
  data() {
    return {
      companyid: this.$session.get("UserInformation").company_id,
      companyname: this.$session.get("UserInformation").company_name,
      popup_msg:
        "You can type ‘Restart”  at </br>any  time to get back</br> to the Main Menu",
      refreshed_or_closed: true,
      qus_ans: "answers",
      to_send: "",
      cense_enquiry: false,
      is_agent_typing: false,
      user_name: "",
      show: false,
      chat: [],
      fingerprint: null,
      bot_response_token_value: this.$session.get("BotToken"),
      level: 0,
      recognition: null,
      json_data: {
        create_appointment:
          '{"User": {"Physician": {"ID": "DT000000000000000237"},"UserName":"ac","ID":"US000000000000000138","Account": {"ID": "CO00023"},"Token": "Z1rSGGm0XpMWjt3giAErPPWZ84TQN9FsFMBLsU+/LAu6yualMg6EP2bsrwZjLPwm3j4DpPcGc5LcIp3NjgfUsA==","Specialty": {"ID": "PG000000000000000141", "Name": "AC", "Code": "AC"},"Domain": "gogreenbills.com"},"Appointment": {"Date": "08/30/2018", "IsJSONNote": 0, "Patient": {"CaseID": ""}}}',
        visits_finalized:
          '{"User": {"Physician": {"ID": "DT000000000000011886"},"UserName": "ch","ID": "US000000000000000143","Account":{"ID":"CO00023"},"Token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYXZkaHV0IiwiZXhwIjoxNTI5NDgyNjYzfQ.v1c0HbuWuZXXpJfDrXVc1HPVuffbnGcLqkpg0zm6AoQ","Specialty": {"ID": "PG000000000000000142","Code": "ch"},"Domain": "greenyourbills.com"},"SearchParameters": {"Status": "","OrderBy": "","FromDate": "01/01/2018","Count": "10","SearchText": "","TypeOfVisit": "ALL","SortOrder": "appointment","StartIndex": "1","EndIndex": "10","ToDate": "08/06/2018"}}',
        appointments_count:
          '{"User": {"Physician": {"ID": "DT000000000000011886"},"UserName": "ch","ID": "US000000000000000143","Account":{"ID":"CO00023"},"Token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYXZkaHV0IiwiZXhwIjoxNTI5NDgyNjYzfQ.v1c0HbuWuZXXpJfDrXVc1HPVuffbnGcLqkpg0zm6AoQ","Specialty": {"ID": "PG000000000000000142","Code": "ch"},"Domain": "greenyourbills.com"},"SearchParameters": {"Status": "","OrderBy": "","FromDate": "01/01/2018","Count": "10","SearchText": "","TypeOfVisit": "ALL","SortOrder": "appointment","StartIndex": "1","EndIndex": "10","ToDate": "08/06/2018"}}',
        create_ticket:
          '{"AccountName":null,"CallbackPhone":"","CompanyID":"CO00023","Description":"De","DomainName":null,"EmailCC":"abhay.w@codearray.tech","EmailDefault":"manish.y@codearray.tech","Priority":"3","PriorityID":0,"RaisedBy":"lawuser","Status":0,"StatusCode":null,"StatusText":null,"SType":"WP","Subject":"De","SubType":"SAMD-P","TicketID":0,"TicketNumber":null,"Type":0,"TypeText":"Website Problem","listFiles1":["chq1.pdf"]}',
        get_report: '{"companyId": "CO00023"}',
      },
      stop: true,
      demourlbind: false,
      reviewsurlbind: false,
      reviewsurl: "https://www.youtube.com/embed/paAeW86eQZ4",
      demourl: [
        "https://www.youtube.com/embed/videoseries?KcrJm9UxW3s&index=13&list=PL_jXlih8dgkTE8CrPpiWcA9KxQeKHZAnt&t=0s",
        "https://www.youtube.com/embed/videoseries?qzS2qINI6IM&list=PL_jXlih8dgkRu5ddGXAGqZ4uLLkoJzCj8&index=2",
      ],
      chat_widget: {
        logo: "",
        title: "",
        style: "",
        bot_theme: "",
        button_border_theme: "#273679",
        user_msg_font_color: "#273679",
        bot_response_font_color: "#273679",
        button_theme: "",
        button_alignment: "",
        bot_icon: "",
        bot_background_image: "",
        button_horizontal_spacing: "3",
        button_vertical_spacing: "5",
        header_background: "",
        bot_font_style: "",
        bot_font_color_sender: "",
        bot_font_color_receiver: "",
        bot_font_color_buttons: "",
        is_powered_by_cense: true,
      },
      selected_date: "",
      selected_time: "",
      reason_of_visit: "",
      patient_name: "",
      visitor_number: "",
      full_time_slots: [],
      time_slots: [],
      TODAY_DATE: "",
      channel: null,
      chat_socket: null,
      voice_socket: null,
      live_chat_on: false,
      live_chat_token: null,
      chat_group_name: null,
      to_scroll: false,
      form_payload: null,
      phone_number_validity: /[0-9]{10,11}$/,
      // url_match_regex: /\b(https?|ftp):\/\/([\S])+\.((pdf|csv|xlsx))([\w?=]+)/g,
      url_match_regex: /^https?:\/\/.*[\\\/].+\.[(pdf|csv|xlsx)]{2,4}/,
      // harsh
      isexchange: false,
      isretailigence: false,
      currencyexchange_list: null,
      selected_indication: [],
      welcome_message_not_yet_received: true,
      res: {},
      is_typing_indicator_on: false,
      thumbs_up_icon: require("@/portal/assets/img/Group 7.svg"),
      thumbs_down_icon: require("@/portal/assets/img/Group 6.svg"),
      shopify_ui: null,
      shopify_customer_id: null,
      // refund_order_view_details: {},
      // refund_selected_items: [],
      shopify_retail_shop_name: null,
      shop_url: null,
      is_retail_bot: false,
      shopify_reason_for_refund: null,
      show_shopify_reason_for_refund_error: false,
      support_channel: null,
      is_support_agent_present: false,
      retail_shop_storefront_token: null,
      retail_order_retreival_only_email_required: false,
      retail_shop_currency: null,
      product_list: [],
      product_out_of_stock_list: [],
      checked_list: [],
      current_product: "",
      customer_email: "",
      is_sender_email: false,
      reg_email: /^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/,
      scrollPosition: 0,
      visible_custom_greetings_buttom:false,
      review_message_first:'',
      review_message_second:'',
      review_response_message:'',
      display_products:false,
      retail_web_framework: "",
      is_cense_cart: false,
      show_custom_cart: false,
      addtoCartdata: [],
      total_products_qty: 0,
      over_qty_warning: false,
      contact_help_email: null,
      shopify_reason_for_refund_list: null,
      shopify_reason_for_refund_option:[
        'Ordered by mistake',
        'Ordered wrong product',
        'Order not Received',
        'No longer needed',
        'Better price available',
        'Received damaged products',
        'Others'
      ],
      order_notes_data: [],
      selected_order_name: "",
      is_woocommerce_order: false,
      visitors_current_location: null,
      is_display_banner_on_landing: false,
      visitors_current_location_url: `https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.VUE_APP_CURRENT_LOCATION_TOKEN}`,
      greeting_buttons_position: null
    };
  },
  props: {
    isPreviewBot: Boolean,
    isDialogBot: Boolean,
    current_preview_banner_id: String,
    isTextToBot: {
      type: Boolean,
      default: true,
    },
    isCalledFromSetup: {
      type: Boolean,
      default: false,
    },
  },
  computed: {
    custom_greetings_buttom_alignment(){
      if(this.is_retail_bot){
        return "col-sm-10 px-0";
      }else{
        return "col-sm-12 px-0";
      }
    },
    cart_button_alignment(){
    if(this.is_retail_bot){
        return "col-sm-2 px-0";
      }else{
        return null;
      }
    },
    input_disabled() {
      return this.refreshed_or_closed || this.welcome_message_not_yet_received;
    },
    cssProps() {
      let botAttributes = {
        head_color: this.chat_widget.header_background,
      };
      if (this.companyid === "retailigence84926") {
        botAttributes.head_color = this.chat_widget.bot_theme;
      } else if (this.isexchange) {
        return {
          "--bot-head-color": "#fff",
          "--bot-sender-color": "#2b3184",
          "--bot-button-color": "#fdcf38",
          "--bot-link-color": "#2b3184",
          "--bot-button-border": "#273679",
          "--user_msg_font_color": "#273679",
          "--bot-response-font-color": "#273679",
          "--bot-button-background": "#1daae1",
          "--bot-buttons-alignment": "center",
          "--bot-buttons-vertical-spacing": "5%",
          "--bot-buttons-horizontal-spacing": "3%",
        };
      }
      return {
        "--bot-head-color": botAttributes.head_color,
        "--bot-sender-color": this.chat_widget.bot_theme,
        "--bot-button-color": this.chat_widget.bot_theme,
        "--bot-link-color": this.chat_widget.bot_theme,
        "--bot-button-border": this.chat_widget.button_border_theme,
        "--user_msg_font_color": this.chat_widget.user_msg_font_color,
        "--bot-response-font-color":this.chat_widget.bot_response_font_color,
        "--bot-button-background": this.chat_widget.button_theme,
        "--bot-buttons-alignment": this.chat_widget.button_alignment.value,
        "--bot-buttons-vertical-spacing": `${this.chat_widget.button_vertical_spacing}%`,
        "--bot-buttons-horizontal-spacing": `${this.chat_widget.button_horizontal_spacing}%`,
        "--bot-font-style": this.chat_widget.bot_font_style.value,
        "--bot-font-color-sender": this.chat_widget.bot_font_color_sender,
        "--bot-font-color-receiver": this.chat_widget.bot_font_color_receiver,
        "--bot-font-color-buttons": this.chat_widget.bot_font_color_buttons,
      };
    },
    bot_img_icon() {
      return {
        "background-image": `url(${this.chat_widget.bot_icon})`,
      };
    },
    chat_bot_background_image() {
      return {
        "background-image": `url(${this.chat_widget.bot_background_image})`,
      };
    },
    shopify_login_button_text() {
      if (this.retail_order_retreival_only_email_required) {
        return "Go";
      }
      return "Login";
    },
    cart_icon_svg(){
     return `<svg xmlns="http://www.w3.org/2000/svg" version="1.0" width="18.000000pt" height="18.000000pt" viewBox="0 0 512.000000 512.000000" preserveAspectRatio="xMidYMid meet"><g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)" fill="${this.chat_widget.bot_font_color_buttons}" stroke="none"><path d="M81 5002 c-100 -50 -106 -186 -12 -249 33 -23 39 -23 317 -23 l284 0 5 -22 c3 -13 172 -745 375 -1628 279 -1209 376 -1612 392 -1636 47 -69 -72 -64 1599 -64 1367 0 1514 2 1545 16 37 18 68 62 79 111 9 45 -24 117 -67 143 -33 20 -45 20 -1475 20 -1364 0 -1442 1 -1447 18 -12 37 -106 454 -106 468 0 12 206 14 1503 14 1472 0 1503 0 1534 20 18 10 39 33 48 50 26 50 468 2030 461 2068 -7 44 -39 86 -80 106 -31 15 -208 16 -2014 16 l-1980 0 -27 118 c-73 319 -94 395 -117 419 -49 53 -51 53 -430 53 -316 0 -357 -2 -387 -18z m4702 -869 c2 -5 -81 -381 -184 -838 -104 -456 -188 -831 -189 -833 0 -1 -656 -1 -1457 0 l-1458 3 -192 830 c-105 457 -192 833 -192 838 -1 9 3667 9 3672 0z"/><path d="M2038 1165 c-190 -48 -356 -216 -398 -400 -15 -64 -15 -186 0 -250 31 -137 151 -290 277 -354 173 -87 387 -78 538 23 219 146 306 407 216 647 -55 144 -181 268 -326 320 -78 27 -227 34 -307 14z m217 -295 c48 -19 104 -71 129 -121 111 -223 -147 -449 -354 -310 -176 118 -130 382 78 437 45 12 105 9 147 -6z"/><path d="M3806 1164 c-133 -32 -278 -146 -343 -270 -113 -213 -75 -462 97 -634 213 -213 542 -214 754 -4 35 35 78 88 95 118 38 66 71 190 71 266 0 76 -33 200 -71 266 -17 30 -60 83 -95 118 -134 133 -323 185 -508 140z m195 -288 c48 -8 112 -56 146 -108 25 -38 28 -52 28 -128 0 -76 -3 -90 -27 -127 -51 -78 -118 -115 -209 -115 -109 0 -203 69 -233 173 -20 65 -20 73 0 138 16 56 69 123 117 147 32 17 104 33 127 29 8 -2 31 -6 51 -9z"/></g></svg>`
    }
    
  },
  watch: {
    scrollPosition(){
      if(this.scrollPosition > 150){
        this.visible_custom_greetings_buttom = true;
      }else if(this.scrollPosition < 150){
        this.visible_custom_greetings_buttom = false;
      }
    },
    to_send() {
      this.button_fill();
    },
    chat() {
      this.scroll_down();
    },
  },
  beforeCreated(){
    let route_params = this.$route.params;
    if (route_params.reload === true) {
      this.$router.go();
    }
  },
  beforeDestroy(){
    if(this.live_chat_on) this.disconnect_support_chat();
  },
  created() {
    this.load_widget_settings();
    let bot_templates_data = this.$session.get("BotTemplates");
    for (let i = 0; i < bot_templates_data.length; i++) {
      if (
        bot_templates_data[i].domain === "Retail" &&
        bot_templates_data[i].subscribed === true
      ) {
        this.is_retail_bot = true;
        break;
      }
    }
    if (this.$session.has("BotResponse_Conversation")) {
      // this.chat = this.$session.get("BotResponse_Conversation");
    }
    // if (!this.$session.has("ChatBotImageParameters")) {
    // } else {
    //   this.chat_widget = this.$session.get("ChatBotImageParameters");
    //   this.chat_widget.style = "margin-top: 5px;height:30px;width:auto;margin-left: auto;margin-right: 0;";
    // }
    if (!this.isPreviewBot) {
      if (!this.$session.has("BotToken")) {
        axios
          .post(api_calls.bot_response_token(), {
            license_key: this.$session.get("UserInformation").license_key,
            username: this.$session.get("UserInformation").email,
          })
          .then((response) => {
            this.$session.set("BotToken", response.data);
            this.bot_response_token_value = response.data;
            this.refresh_chatbot();
          });
      } else {
        this.bot_response_token_value = this.$session.get("BotToken");
        this.refresh_chatbot();
      }
    }
    // harsh
    if (
      this.$session.get("UserInformation").license_key ==
      ".eJxTcssvSs1Mz6tIzkjMS081NDexNIQKKUDFMkpKCoqt9PXLy8v10lBU6yXn5-olluobGRha6hqY6xqYKBgaWBkZW5ma6hmbm5gYmSoBAGa9Hp0.XR3Tuw.X77F_7LDtOLp2Vt9snFDSo31nTw"
    ) {
      this.isexchange = true;
    } else if (this.companyid == "retailigence84926") {
      this.isretailigence = true;
    }
    var d = new Date();
    axios
      .post(api_calls.bot_user_data(), {
        license_key: this.$session.get("UserInformation").license_key,
        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,
        datetime: d.toISOString(),
        token: this.bot_response_token_value,
        username: this.$session.get("UserInformation").email,
        source: "Web",
        token: this.bot_response_token_value,
        role: this.$session.get("UserInformation").role,
      })
      .then((response) => {});

    axios
      .post(
        api_calls.product_settings(),
        {
          company_name: this.companyname,
          company_id: this.companyid,
          is_email_verification_status: true,
        },
        {
          headers: {
            Authorization: `Bearer ${this.$session.get("at")}`,
          },
        }
      )
      .then((response) => {
        this.big_spinner = false;
        if (
          response.data != "" &&
          response.data != null &&
          response.data != "Internal server Error"
        ) {
          var status = response.data.verification_status;
          if (status == "Success") {
            this.is_sender_email = true;
          } else {
            this.is_sender_email = false;
          }
        } else {
          this.is_sender_email = false;
        }
      })
      .catch((e) => {
        this.big_spinner = false;
        if (
          e.response.status === 410 ||
          e.response.status === 440 ||
          e.response.status === 409
        ) {
          this.$root.$emit("Session_Expired", e.response.data);
        }
      });
  },
  beforeDestroy() {
    this.$forceUpdate();
  },
  mounted() {
    var vm = this;
    document.addEventListener('scroll', function (ev) {
      if (ev.target.id === 'portal_chat_body_id'){
        vm.scrollPosition = ev.target["scrollTop"]
      }
    }, true)
    // let recaptchaScript = document.createElement('script')
    // recaptchaScript.setAttribute('src', 'https://sdks.shopifycdn.com/buy-button/latest/buybutton.js')
    // document.head.appendChild(recaptchaScript)
    // const plugin = document.createElement("script");
    // plugin.setAttribute(
    //   "src",
    //   "https://sdks.shopifycdn.com/buy-button/latest/buybutton.js"
    // );
    // plugin.async = true;
    // document.head.appendChild(plugin);
    this.show = false;
    if (this.$route.name == "Train the Bot") {
      $(".chat-wrap").css("right", "auto");
    }
    if (this.$route.name == "Direct Response Bot") {
      $(".chat-wrap").css("marginTop", "5%");
    }
    window.SpeechRecognition =
      window.webkitSpeechRecognition || window.SpeechRecognition;
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    navigator.getUserMedia =
      navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia;

    document.addEventListener("click", someListener);

    function someListener(event) {
      let element = event.target;
      if (
        (element.tagName == "I" || element.tagName == "A") &&
        element.classList.contains("fa-clipboard")
      ) {
        var msg = element.getAttribute("data-copy-content");
        var temp = document.createElement("textarea");
        var tempMsg = document.createTextNode(msg);
        temp.appendChild(tempMsg);

        document.body.appendChild(temp);
        temp.select();
        document.execCommand("copy");
        document.body.removeChild(temp);
      }
    }
    this.$root.$emit("change_sidebar_main_menu", "Simulate Interaction");

    //To hide cense cart if clicked outside
    document.onclick = function(e){
      if((e.target).closest("#cart-box") || (e.target).closest("#custom-cart")){
      }else{
        vm.is_cense_cart = false;
      }
    };
  },
  updated() {
    this.submit_custom_form();
  },
  methods: {
    load_widget_settings(){
      axios
        .post(
          api_calls.get_widget_settings(),
          {
            companyname: this.companyname,
            companyid: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            isShow: true,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          this.chat_widget.title = response.data.WidgetTitle;
          this.chat_widget.logo = response.data.ImageUrl;
          this.chat_widget.button_theme = response.data.ButtonTheme;
          this.chat_widget.button_border_theme = response.data.ButtonBorderTheme === null ?
                                                this.chat_widget.button_border_theme : response.data.ButtonBorderTheme;
          this.chat_widget.user_msg_font_color = response.data.UserMessageFontColor === null ?
                                                this.chat_widget.user_msg_font_color : response.data.UserMessageFontColor;
          this.chat_widget.bot_response_font_color = response.data.BotResponseFontColor === null ?
                                                this.chat_widget.bot_response_font_color : response.data.BotResponseFontColor;    
          this.chat_widget.bot_font_style = response.data.BotFont.FontStyle;
          this.chat_widget.bot_font_color_sender = response.data.BotFont.FontColorSender;
          this.chat_widget.bot_font_color_receiver = response.data.BotFont.FontColorReceiver;
          this.chat_widget.bot_font_color_buttons = response.data.BotFont.FontColorButtons;
          this.chat_widget.bot_theme = response.data.BotTheme;
          this.chat_widget.is_powered_by_cense = response.data.IsPoweredByCense === undefined ? 
                                                  this.chat_widget.is_powered_by_cense : response.data.IsPoweredByCense;                                   
          this.chat_widget.button_alignment = response.data.BotStyling;
          this.chat_widget.bot_icon = response.data.BotImageUrl;
          this.chat_widget.button_vertical_spacing =
            response.data.ButtonStyling.vertical;
          this.chat_widget.button_horizontal_spacing =
            response.data.ButtonStyling.horizontal;
          this.chat_widget.bot_background_image = response.data.BgImageUrl;
          this.chat_widget.header_background = response.data.HeaderTheme;
          if (response.data.BotGreetings.data.responses.length > 0) {
            let is_visible_greetings = response.data.BotGreetings.data.responses.map(item => {
              return (item.visible !== undefined) ? item.visible : true
            });
            if(is_visible_greetings.includes(true)){
              this.greeting_buttons_position = response.data.BotGreetings.data.responses.length -1;
              if (Boolean(response.data.BotGreetings.data.responses[this.greeting_buttons_position]['buttons'])){
                var visible_buttons = response.data.BotGreetings.data.responses[this.greeting_buttons_position]['buttons'];
                visible_buttons = visible_buttons.filter((button)=>{
                  return button['visible'] === true;
                });
                response.data.BotGreetings.data.responses[this.greeting_buttons_position]['buttons'] = visible_buttons;
              }
              const visible_greetings_map = is_visible_greetings.reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());
              let splice_index = [];
              if((visible_greetings_map.get(true) !== response.data.BotGreetings.data.responses.length)){
                if(response.data.BotGreetings.data.responses[this.greeting_buttons_position].visible === false){
                  try {
                    for(let i = response.data.BotGreetings.data.responses.length-1; i >= 0; i--){
                      if(response.data.BotGreetings.data.responses[i].visible === false){
                        response.data.BotGreetings.data.responses[(i-1 < 0) ? i : i-1]['buttons'] = visible_buttons;
                        this.greeting_buttons_position = (this.greeting_buttons_position-1 < 0) ? this.greeting_buttons_position : this.greeting_buttons_position-1;
                        splice_index.push(i)
                      } 
                    }
                  } catch (error) {
                    console.log(error);
                  }
                } else {
                  for(let i = response.data.BotGreetings.data.responses.length-1; i >= 0; i--){
                    if(response.data.BotGreetings.data.responses[i].visible === false){
                      this.greeting_buttons_position = (this.greeting_buttons_position-1 < 0) ? this.greeting_buttons_position : this.greeting_buttons_position-1;
                      splice_index.push(i)
                    }
                  }
                }
                for (let index = 0; index < splice_index.length; index++) {
                  response.data.BotGreetings.data.responses.splice(splice_index[index],1);
                }
              }
              this.push_msg(
                response.data.BotGreetings,
                response.data.BotGreetings.data.responses
              );
            }
          }else {
            if (this.is_retail_bot) {
              this.load_chatbot_integration_details();
            }
          }
          if (this.chat_widget.button_alignment === undefined) {
            this.chat_widget.button_alignment = "flex-end";
          }
          if (this.chat_widget.bot_icon === undefined) {
            this.chat_widget.bot_icon = "/img/Bot_img.png";
          }
          this.$session.set("ChatBotImageParameters", this.chat_widget);
          let styling_value = response.data.HeaderStyling.value;
          let temp_string = "";
          if (styling_value === "left") {
            temp_string = "margin-left: 0;margin-right: auto;";
          } else if (styling_value === "right") {
            temp_string = "margin-left: auto;margin-right: 0;";
          } else if (styling_value === "center") {
            temp_string = "margin-left: auto;margin-right: auto;";
          } else {
            temp_string = "margin-left: auto;margin-right: auto;";
          }
          this.chat_widget.style =
            "margin-top: 5px;height:30px;width:auto;max-width:100% !important;" +
            temp_string;
        })
        .catch((e) => {
          if (this.is_retail_bot) {
            this.load_chatbot_integration_details();
          }
          if (e.response) {
            if (
              e.response.status === 410 ||
              e.response.status === 440 ||
              e.response.status === 409
            ) {
              this.$root.$emit("Session_Expired", e.response.data);
            }
          } else {
            if (this.$session.get("UserInformation").company_name == "gogyb") {
              this.chat_widget.style =
                "margin-top: 5px;height:30px;width:60px;margin-left: auto;margin-right: auto;";
              this.chat_widget.logo = "/img/cense_image.png";
              this.chat_widget.bot_icon = "/img/Bot_img.png";
              this.chat_widget.button_vertical_spacing = "5";
              this.chat_widget.button_horizontal_spacing = "3";
              this.chat_widget.bot_background_image = "";
              this.chat_widget.header_background = "#ffffff";
              this.chat_widget.button_theme = "#1daae1";
              this.chat_widget.user_msg_font_color = "#273679";
              this.chat_widget.bot_response_font_color = "#273679";
              this.chat_widget.bot_theme = "#273679";
              this.chat_widget.button_border_theme = "#273679";
            } else if (
              this.$session.get("UserInformation").company_name == "MT Care"
            ) {
              this.chat_widget.logo = "/img/robomate_logo.png";
              this.chat_widget.style =
                "margin-top: 5px;height:50px;width:95px;margin-left: auto;margin-right: auto;";
              this.chat_widget.bot_icon = "/img/Bot_img.png";
              this.chat_widget.button_vertical_spacing = "5";
              this.chat_widget.button_horizontal_spacing = "3";
              this.chat_widget.bot_background_image = "";
              this.chat_widget.header_background = "#ffffff";
              this.chat_widget.button_theme = "#1daae1";
              this.chat_widget.bot_theme = "#273679";
              this.chat_widget.button_border_theme = "#273679";
              this.chat_widget.user_msg_font_color = "#273679";
              this.chat_widget.bot_response_font_color = "#273679";
            } else {
              this.chat_widget.logo = "/img/cense_image.png";
              this.chat_widget.style =
                "margin-top: 5px;height:30px;width:60px;margin-left: auto;margin-right: auto;";
              this.chat_widget.bot_icon = "/img/Bot_img.png";
              this.chat_widget.button_vertical_spacing = "5";
              this.chat_widget.button_horizontal_spacing = "3";
              this.chat_widget.bot_background_image = "";
              this.chat_widget.header_background = "#ffffff";
              this.chat_widget.button_theme = "#1daae1";
              this.chat_widget.bot_theme = "#273679";
              this.chat_widget.button_border_theme = "#273679";
              this.chat_widget.user_msg_font_color = "#273679";
              this.chat_widget.bot_response_font_color = "#273679";
              this.chat_widget.bot_font_style = 'Roboto';
              this.chat_widget.bot_font_color_sender = '#ffffff';
              this.chat_widget.bot_font_color_receiver = '#000000';
              this.chat_widget.bot_font_color_buttons = '#ffffff';
            }
            this.$session.set("ChatBotImageParameters", this.chat_widget);
          }
        });
    },
    load_chatbot_integration_details(){
      axios
        .post(
          api_calls.chatbot_integration_details(),
          {
            is_get: true,
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          if (response.data.status === "success") {
            this.chatbot_integration_details_response(response);
          }
        })
        .catch((e) => {
          // this.shopify_retail_shop_name = "earthon";
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
            setTimeout(() => {
              axios
                .post(
                  api_calls.chatbot_integration_details(),
                  {
                    is_get: true,
                    company_name: this.companyname,
                    company_id: this.companyid,
                    email: this.$session.get("UserInformation").email,
                    license_key: this.$session.get("UserInformation")
                      .license_key,
                    token: this.$session.get("UserInformation").tokens,
                  },
                  {
                    headers: {
                      Authorization: `Bearer ${this.$session.get("at")}`,
                    },
                  }
                )
                .then((response) => {
                  if (response.data.status === "success") {
                    this.chatbot_integration_details_response(response);
                  }
                });
            }, 1000);
          }
        });
    },
    chatbot_integration_details_response(response){
      this.retail_web_framework = response.data.data.retail_web_framework;
      var webframework = response.data.data[this.retail_web_framework + '_details'];
      this.show_custom_cart = this.retail_web_framework != null ? true : false;
      if(webframework !== null &&
        webframework !== {}){
        this.retail_shop_currency = webframework.base_currency.value || "USD";
        this.retail_order_retreival_only_email_required = webframework.order_retrieval_only_email_required || false;
        this.contact_help_email = webframework.contact_help_email;
        this.review_response_message = webframework.review_response_message;
        this.review_message_first = webframework.review_message_first;
        this.review_message_second = webframework.review_message_second;
        this.display_products = webframework.display_products_on_landing;
        this.is_display_banner_on_landing = webframework.is_display_banner_on_landing;
        if(this.retail_web_framework == "shopify"){
          this.shopify_retail_shop_name = webframework.shopify_shop_name;
        }else{
          this.shop_url = webframework[this.retail_web_framework + '_shop_url'];
        }
      }
      // setTimeout(() => {
        if(!this.isPreviewBot){
          this.get_visitors_current_location();
        }else if(Boolean(this.current_preview_banner_id)){
          this.preview_banner();
        }
      // }, 3000);
    },
    contact_us_phone_number(phone_number){
      if(Boolean(phone_number)){
        return " or call us at: " + phone_number;
      }else{
        return '';
      }
    },
    update_variation(chat_id, product_index, title){
      for(var i in this.chat[chat_id].products_list[product_index].variations){
        if (this.chat[chat_id].products_list[product_index].variations[i].variant_title == title){
          this.chat[chat_id].products_list[product_index].img_url = (this.chat[chat_id].products_list[product_index].variations[i].img_url);
          this.chat[chat_id].products_list[product_index].id = this.chat[chat_id].products_list[product_index].variations[i].id;
          this.chat[chat_id].products_list[product_index].permalink = this.chat[chat_id].products_list[product_index].variations[i].permalink;
          this.chat[chat_id].products_list[product_index].price = this.chat[chat_id].products_list[product_index].variations[i].price;
          this.chat[chat_id].products_list[product_index].regular_price = this.chat[chat_id].products_list[product_index].variations[i].regular_price;
          this.chat[chat_id].products_list[product_index].stock_quantity = this.chat[chat_id].products_list[product_index].variations[i].stock_quantity;
          this.chat[chat_id].products_list[product_index].stock_status = this.chat[chat_id].products_list[product_index].variations[i].stock_status;
          this.chat[chat_id].products_list[product_index].variant_title = this.chat[chat_id].products_list[product_index].variations[i].variant_title;
        }
      }
      // const found = this.chat[chat_id].products_list[product_index].variations.some(el => el.variant_title == "Default");
      // if (!found) this.chat[chat_id].products_list[product_index].variations.push(default_values);
    },
    get_visitors_current_location(){
      if(this.is_display_banner_on_landing === true){
        let cutoff = new Date;
        var date_time = moment.utc(cutoff, [
              "YYYY-MM-DD HH:mm:ss",
            ]).format("YYYY-MM-DD HH:mm:ss")
        var vm = this;
        $.getJSON(vm.visitors_current_location_url, function(data) {
          if(data){
            vm.visitors_current_location = {
              "ip_address" : data.ip_address,
              "city" : data.city,
              "city_geoname_id" : data.city_geoname_id,
              "region" : data.region,
              "region_iso_code" : data.region_iso_code,
              "region_geoname_id" : data.region_geoname_id,
              "postal_code" : data.postal_code,
              "country" : data.country,
              "country_code" : data.country_code,
              "country_geoname_id" : data.country_geoname_id,
              "country_is_eu" : data.country_is_eu,
              "continent" : data.continent,
              "continent_code" : data.continent_code,
              "continent_geoname_id" : data.continent_geoname_id,
              "longitude" : data.longitude,
              "latitude" : data.latitude,
              "security" : data.security,
              "date_time" : date_time,
            }
            vm.is_display_banner();
          }else{
            vm.is_display_products();
          }
        }).error(function() { 
          vm.is_display_products();
        });
      }else{
        this.is_display_products();
      }
    },
    preview_banner(){
      axios
        .post(
          api_calls.banner_template(),
          {
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.$session.get("UserInformation").tokens,
            subscription: this.$session.get("UserInformation").subscription,
            is_preview_banner: true,
            banner_id: this.current_preview_banner_id,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then((response) => {
          if (response.status == 200) {
            if(Boolean(response.data.responses.length > 0)){
              this.response_handling(response);
            }
          }
        })
        .catch((e) => {
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    is_display_banner(){
      axios
        .get(api_calls.banner_template(),{
          params: {      
            license_key: this.$session.get("UserInformation").license_key,
            username: this.$session.get("UserInformation").email,
            email: this.$session.get("UserInformation").email,
            token: this.bot_response_token_value,
            is_display_banner: true,
            visitors_current_location: this.visitors_current_location,
            
          },
        })
        .then((response) => {
          if (response.status == 200) {
            if(Boolean(response.data.responses.length > 0)){
              this.response_handling(response);
            }
          }
          this.is_display_products();
        })
        .catch((e) => {
          this.is_display_products();
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    is_display_products(){
      if(this.display_products === true){
        axios
        .post(api_calls.display_landing_products(), {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
        })
        .then((response) => { 
          var products_count = response.data.responses[0].products.products_list.length;
          if (products_count > 0){
            this.response_handling(response);
          }
          this.is_review_rating();
        })
        .catch((e) => {
          this.is_review_rating();
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
      }else{
        this.is_review_rating();
      }
    },
    check_shopify_customer_token_expiry() {
      let cutoff = this.$session.get("shopify_customer_token_expiry");
      cutoff = moment(cutoff, ["YYYY-MM-DDThh:mm:ssZ"]);
      var current_time = new Date(cutoff);
      if (moment().isBefore(current_time)) {
        return true;
      } else {
        return false;
      }
    },
    is_review_rating() {
      if(Boolean(this.$session.get("shopify_customer_id")) || Boolean(this.$session.get("shopify_customer_token"))) {
        let stringified_customer_payload = JSON.stringify({
          customerId: this.$session.get("shopify_customer_id"),
          email: this.$session.get("shopify_customer_token")
        });
        axios
          .post(api_calls.chatbot_response_cense(), {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: `/retrieve_customer_orders${stringified_customer_payload}`,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: false,
          })
          .then((response) => {
            if(Boolean(response.data.responses[0].custom)){
              if(Boolean(response.data.responses[0].custom.orders_list.length > 0)){
                this.call_review_rating(response.data.responses[0].custom.orders_list);
              }
            }
          }); 
      }
    },
    call_review_rating(data){
      var fulfilled_orders = data.filter(fulfilled_order=>{
        return fulfilled_order.fulfillment_status === "fulfilled";
      });
      var sorted_fulfilled_orders = fulfilled_orders.map(item=>{
        return item.line_items.map(product=> {
          return product;
        });
      });
      axios
        .post(
          api_calls.product_review_rating(),
          {
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            web_framework: this.retail_web_framework,
            is_get_reviewed_product_id: true,
            review_rating_customer_id: this.$session.get("shopify_customer_id"),
            review_rating_customer_email: this.$session.get("shopify_customer_token")
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          if(response.data.is_review === true){
            var reviewed_product_details = [];
            var not_reviewed_product_details = [];
            var reviewed_product_id_list = response.data.product_id_list;
            for (let i = 0; i < sorted_fulfilled_orders.length; i++){
              for (let j = 0; j < sorted_fulfilled_orders[i].length; j++) {
                if (reviewed_product_id_list.includes(sorted_fulfilled_orders[i][j].product_id)){
                  reviewed_product_details.push(sorted_fulfilled_orders[i][j]);
                }else{
                  not_reviewed_product_details.push(sorted_fulfilled_orders[i][j]);
                }
              }
            }
            if(not_reviewed_product_details.length > 0 &&
              Boolean(this.review_message_first) === true &&
              Boolean(this.review_message_second) === true &&
              Boolean(this.review_response_message) === true
            ){
              axios
                .post(
                  api_calls.product_review_rating(),
                  {
                    company_name: this.companyname,
                    company_id: this.companyid,
                    email: this.$session.get("UserInformation").email,
                    license_key: this.$session.get("UserInformation").license_key,
                    token: this.bot_response_token_value,
                    username: this.$session.get("UserInformation").email,
                    web_framework: this.retail_web_framework,
                    is_get_product_image: true,
                    product_id: not_reviewed_product_details[0].product_id
                  },
                  {
                    headers: {
                      Authorization: `Bearer ${this.$session.get("at")}`
                    }
                  }
                )
                .then(response => {
                  if(response.data.MSG === 'Image Received Successfully'){
                    var product_review_img_url = response.data.image_src;
                    var msg = {
                      is_review_rating_product: true,
                      not_reviewed_product_details: not_reviewed_product_details[0],
                      review_message_first: this.review_message_first,
                      review_message_second: this.review_message_second,
                      product_review_img_url: product_review_img_url,
                      product_rating: null,
                      product_review: '',
                      time: this.generate_time(),
                    };
                    this.chat.push(msg);
                    this.update_scrollbar("upto_end", "response");
                  }
                });
            }
          }
        })
        .catch(e => {
          toastr.error("Some Error Occurred.");
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    submit_review_rating(index){
      if (Boolean(this.chat[index].product_rating) === false){
        swal({
          text: "Please give rating",
          toast: true,
          showCancelButton: false,
          showConfirmButton: false,
          type: "warning",
          position: "top-end",
          timer: 5000,
        });
        return
      }
      if (Boolean(this.chat[index].product_review) === false){
        swal({
          text: "Please write review",
          toast: true,
          showCancelButton: false,
          showConfirmButton: false,
          type: "warning",
          position: "top-end",
          timer: 5000,
        });
        return
      }
      if (this.retail_web_framework == "shopify"){
        var product_details = {
          "product_id":this.chat[index].not_reviewed_product_details.product_id,
          "name":this.chat[index].not_reviewed_product_details.name,
          "image_src":this.chat[index].product_review_img_url,
          "price":this.chat[index].not_reviewed_product_details.price,
          "quantity":this.chat[index].not_reviewed_product_details.quantity,
          "variant_id":this.chat[index].not_reviewed_product_details.variant_id,
        }
      }else if(this.retail_web_framework == "woocommerce"){
        var product_details = {
          "product_id":this.chat[index].not_reviewed_product_details.product_id,
          "name":this.chat[index].not_reviewed_product_details.name,
          "image_src":this.chat[index].product_review_img_url,
          "price":this.chat[index].not_reviewed_product_details.price,
          "quantity":this.chat[index].not_reviewed_product_details.quantity,
          "variant_id":this.chat[index].not_reviewed_product_details.variation_id
        }
      }else if(this.retail_web_framework == "magento"){
        var product_details = {
          "product_id":this.chat[index].not_reviewed_product_details.product_id,
          "name":this.chat[index].not_reviewed_product_details.name,
          "image_src":this.chat[index].product_review_img_url,
          "price":this.chat[index].not_reviewed_product_details.price,
          "quantity":this.chat[index].not_reviewed_product_details.qty_shipped,
          "variant_id":this.chat[index].not_reviewed_product_details.sku
        }
      }
      axios
        .post(
          api_calls.product_review_rating(),
          {
            company_name: this.companyname,
            company_id: this.companyid,
            email: this.$session.get("UserInformation").email,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            is_save_review_rating: true,
            review_rating_customer_id: this.$session.get("shopify_customer_id"),
            review_rating_customer_email: this.$session.get("shopify_customer_token"),
            product_rating: this.chat[index].product_rating,
            product_review: this.chat[index].product_review,
            product_details: product_details
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`
            }
          }
        )
        .then(response => {
          if (
            response.data != "" &&
            response.data != null &&
            response.data != "Internal server Error"
          ) {
            this.chat[index].is_review_rating_product = false;
            // this.chat[index].received = this.review_response_message;
            // this.chat[index].time = this.generate_time();
            var msg = {
              received: this.review_response_message,
              conversation_only: true,
              receiving: true,
              time: this.generate_time(),
            };
            this.chat.push(msg);
            this.update_scrollbar("upto_end", "response");
            if(response.data.MSG === 'Review Saved Successfully'){
              swal({
                text: this.review_response_message,
                toast: true,
                showCancelButton: false,
                showConfirmButton: false,
                type: "success",
                position: "top-end",
                timer: 5000,
              });
            }else if(response.data.MSG === "Review Not Saved Successfully"){
              swal({
                text: "Some Error Occurred.",
                toast: true,
                showCancelButton: false,
                showConfirmButton: false,
                type: "error",
                position: "top-end",
                timer: 5000,
              });
            }
          } else {
            toastr.error("Internal Server Error");
          }
        })
        .catch(e => {
          toastr.error("Some Error Occurred.");
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    closecart(close_cart) {
      this.is_cense_cart = close_cart;
    },
    cart_communication(cart_data){
      this.addtoCartdata = [];
      this.total_products_qty = 0;
      for (var i in cart_data){
        this.addtoCartdata.push(cart_data[i]);
      }
      for (var j in this.addtoCartdata){
         this.total_products_qty = this.total_products_qty + this.addtoCartdata[j].order_qty;
      }
    },
    update_quantity(func, chat_id, index, product) {
      var vm = this;
      this.over_qty_warning = false;
      var buy = parseInt(this.chat[chat_id].products_list[index].buy_qty);
      var order = this.chat[chat_id].products_list[index].order_qty;
      var stock = this.chat[chat_id].products_list[index].stock_quantity;
      if (this.addtoCartdata.length !== 0 && stock != null ){
        for (var i in this.addtoCartdata){
          if (this.addtoCartdata[i].id == product.id ){
            let cart_order_qty = this.addtoCartdata[i].order_qty;
            stock = stock - cart_order_qty;
          }
        }
      }
      var total = buy + order;
      if (func === "+") {
        this.chat[chat_id].products_list[index].order_qty = 1;
        if((total <= stock) || stock == null && !isNaN(total)){
          this.chat[chat_id].products_list[index].buy_qty += 1;
          vm.$set(
            vm.chat, chat_id,
            vm.chat[chat_id]
          );
        }else {
          this.chat[chat_id].products_list[index].order_qty = 2;
          if (stock === 0 ){
            this.chat[chat_id].products_list[index].buy_qty = 1;
          }else{
          this.chat[chat_id].products_list[index].buy_qty = stock;
          }
        }
      }
      if (func === "-") {
        if (buy > 1 && !isNaN(total)){
          this.chat[chat_id].products_list[index].order_qty = 1;
          this.chat[chat_id].products_list[index].buy_qty -= 1;
          vm.$set(
            vm.chat, chat_id,
            vm.chat[chat_id]
          );
        }else{
          this.chat[chat_id].products_list[index].buy_qty = 1;
          this.chat[chat_id].products_list[index].order_qty = 1;
        }
      }
      if (func === "manual") {
        var quantity = Math.abs(parseInt(product.buy_qty));
        if (!isNaN(quantity)){
          this.chat[chat_id].products_list[index].order_qty = 1;
          if (quantity){
            if ((quantity <= stock) || stock == null){
              this.chat[chat_id].products_list[index].buy_qty = quantity;
            }else {
              this.chat[chat_id].products_list[index].order_qty = 2;
              if (stock === 0 ){
                this.chat[chat_id].products_list[index].buy_qty = 1;
              }else{
                this.chat[chat_id].products_list[index].buy_qty = stock;
              }
            }
            vm.$set(
              vm.chat, chat_id,
              vm.chat[chat_id]
            );
          }
        }else if (isNaN(total)) {
          this.chat[chat_id].products_list[index].buy_qty = 1;
          this.chat[chat_id].products_list[index].order_qty = 1
          vm.$set(
            vm.chat, chat_id,
            vm.chat[chat_id]
          );         
        }
      }
    },
    addproduct(product){
      this.total_products_qty = 0;
      this.over_qty_warning = false;
      var audio = new Audio(sound);
      audio.play();
      var cart = $('#cense-cart-btn');
      var cart_qty = $('#cart-qty-num');
      var cart_img = $('#cart-img');
      if (this.addtoCartdata.length != 0 && product.buy_qty !== ''){
        var check = false;
        for (var i in this.addtoCartdata) {
          if (this.addtoCartdata[i].id == product.id){
            check = true
            var buy = product.buy_qty + this.addtoCartdata[i].order_qty;
            if ((product.stock_quantity > this.addtoCartdata[i].order_qty) && 
            (buy <= product.stock_quantity)){
              this.addtoCartdata[i].order_qty = buy;
              product.order_qty = 1;
              setTimeout(function(){
                cart_qty.addClass('cart-qty');
                cart_img.addClass('cart-img');
                cart.addClass('shake');
                setTimeout(function(){
                  cart_qty.removeClass('cart-qty');
                  cart_img.removeClass('cart-img');
                  cart.removeClass('shake');
                },500)
              },0)
            }else if(product.stock_quantity == null){
              this.addtoCartdata[i].order_qty = buy;
              product.order_qty = 1;
              setTimeout(function(){
                cart_qty.addClass('cart-qty');
                cart_img.addClass('cart-img');
                cart.addClass('shake');
                setTimeout(function(){
                  cart_qty.removeClass('cart-qty');
                  cart_img.removeClass('cart-img');
                  cart.removeClass('shake');
                },500)
              },0)
            }else{
              product.order_qty = 2;
              let res = product.stock_quantity - this.addtoCartdata[i].order_qty;
              product.buy_qty = res === 0 ? 1 : res;
              this.over_qty_warning = true;
            }
          }
        }
        if(check != true && ((product.buy_qty <= product.stock_quantity) || product.stock_quantity == null)){
          this.addtoCartdata.push({
            id: product.id,
            img_url: product.img_url,
            price: product.price,
            stock_quantity: product.stock_quantity,
            order_qty: product.buy_qty,
            buy_qty: 1,
            variant_title: product.variant_title,
            stock_status: product.stock_status,
            title: product.title
          });
            setTimeout(function(){
              cart_qty.addClass('cart-qty');
              cart_img.addClass('cart-img');
              cart.addClass('shake');
              setTimeout(function(){
                cart_qty.removeClass('cart-qty');
                cart_img.removeClass('cart-img');
                cart.removeClass('shake');
              },500)
            },0)
        }else if(check != true && (product.buy_qty > product.stock_quantity)){
          this.over_qty_warning = true;
        }
      }else if((product.buy_qty <= product.stock_quantity)&& product.buy_qty !== '' || product.stock_quantity == null){
      this.addtoCartdata.push({
            id: product.id,
            img_url: product.img_url,
            price: product.price,
            stock_quantity: product.stock_quantity,
            order_qty: product.buy_qty,
            buy_qty: 1,
            variant_title: product.variant_title,
            stock_status: product.stock_status,
            title: product.title
          });
        setTimeout(function(){
        cart_qty.addClass('cart-qty');
        cart_img.addClass('cart-img');
        cart.addClass('shake');
        setTimeout(function(){
          cart_qty.removeClass('cart-qty');
          cart_img.removeClass('cart-img');
          cart.removeClass('shake');
        },500)
      },0)
      }else{
        this.over_qty_warning = true;
      }
      for (var j in this.addtoCartdata){
         this.total_products_qty = this.total_products_qty + this.addtoCartdata[j].order_qty;
      }
    },
    selected_product(value) {
      if (event.target.checked) {
        if (value == "all") {
          this.checked_list = [];
          for (var i in this.product_out_of_stock_list) {
            this.checked_list.push(this.product_out_of_stock_list[i]);
          }
          $("input:checkbox").prop("checked", false);
          for (let i = 0; i < this.checked_list.length; i++) {
            $(
              "#product_checkbox_" +
                this.product_out_of_stock_list[i].product_id
            ).prop("checked", true);
            $("#selectall").prop("checked", true);
          }
        } else {
          this.checked_list.push(value);
        }
      } else if (!event.target.checked) {
        if (value != "all") {
          var selectall = document.querySelector("#selectall");
          if (selectall.checked) {
            selectall.checked = false;
          }
          var temp = this.checked_list.filter((product_id) => {
            return product_id != value;
          });
          this.checked_list = temp;
        } else {
          $("input:checkbox").prop("checked", false);
          for (let i = 0; i < this.checked_list.length; i++) {
            $(
              "#product_checkbox_" +
                this.product_out_of_stock_list[i].product_id
            ).prop("checked", false);
            $("#selectall").prop("checked", false);
          }
          this.checked_list = [];
        }
      }
    },
    check_current_product_active(index) {
      // console.table(index, this.templatelist[index], this.current_template);
      if (Boolean(this.product_out_of_stock_list[index]) === true) {
        return this.product_out_of_stock_list[index].product_id ===
          this.current_product.product_id
          ? "current-active-template"
          : null;
      }
    },
    show_product(index) {
      this.current_product = this.product_out_of_stock_list[index];
    },
    add_to_out_of_stock_list(items) {
      this.product_out_of_stock_list = items;
      this.checked_list = [];
      $("input:checkbox").prop("checked", false);
    },
    submit_out_of_stock_products() {
      if (this.checked_list.length == 0) {
        swal({
          text: "Please select some products",
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      } else if (
        this.customer_email == "" ||
        !this.reg_email.test(this.customer_email)
      ) {
        swal({
          text: "Please enter a valid email address",
          toast: true,
          position: "top-end",
          type: "warning",
          showConfirmButton: false,
          timer: 2500,
        });
        return;
      }
      swal({
        text: "Please wait while we are submitting your details...",
        type: "info",
        toast: true,
        showConfirmButton: false,
      });
      this.spinnerOn = true;
      axios
        .post(
          api_calls.outofstockemailnotification(),
          {
            company_id: this.companyid,
            company_name: this.companyname,
            license_key: this.$session.get("UserInformation").license_key,
            email: this.customer_email,
            product_list: this.checked_list,
            token:this.bot_response_token_value,
            username:this.$session.get("UserInformation").email,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then(({ data }) => {
          if (data.message == "Query Executed Successfully") {
            swal({
              type: "success",
              text:
                "You'll be notified through email when the products get back in stock",
              timer: 2500,
            }).then((result) => {
              this.customer_email = "";
              this.checked_list = [];
              $("input:checkbox").prop("checked", false);
              $("#notifyemail").modal("hide");
            });
          }
        })
        .catch((e) => {
          this.spinnerOn = false;
          if (
            e.response.status === 410 ||
            e.response.status === 440 ||
            e.response.status === 409
          ) {
            this.$root.$emit("Session_Expired", e.response.data);
          }
        });
    },
    refresh_chatbot(type) {
      this.refreshed_or_closed = true;
      axios
        .post(api_calls.chatbot_response_cense(), {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
          chat: "",
          data: "",
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: this.refreshed_or_closed,
        })
        .then((resp) => {
          this.refreshed_or_closed = false;
          let welcome_msg_companies = [
            "CustomerHappiness95185",
            "3x5ive99534",
            "Foreignxchange17491",
            "360_technology",
          ];
          setTimeout(() => {
            // if (this.shopify_ui == null && this.retail_web_framework == "shopify") {
            //   this.initialize_shopify_ui();
            // }
          }, 100);
          if (type == "support") {
            this.chat.push({
              receiving: true,
              received: "Is there anything else I can help you with?",
              conversation_only: true,
              time: this.generate_time(),
            });
          }
          if (welcome_msg_companies.includes(this.companyid)) {
            axios
              .post(api_calls.chatbot_response_cense(), {
                chat: "/welcome_message",
                token: this.bot_response_token_value,
                username: this.$session.get("UserInformation").email,
                source: "Web",
                license_key: this.$session.get("UserInformation").license_key,
                data: "",
                role: this.$session.get("UserInformation").role,
                refreshed_or_closed: false,
              })
              .then((response) => {
                this.push_msg(response, response.data.responses);
                // this.response_handling(response);
              });
          } else {
            this.welcome_message_not_yet_received = false;
          }
        });
    },
    download_file(url, file_name) {
      event.preventDefault();
      var link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", file_name);
      document.body.appendChild(link);
      link.click();
    },
    scroll_div() {
      var doc = document.querySelector(".buy-products");
      if (event.deltaX > event.deltaY) {
        doc.scrollLeft += 10;
      } else if (event.deltaX < event.deltaY) {
        doc.scrollLeft -= 10;
      }
    },
    scroll_div1(item) {
      var doc = document.querySelector(`#buy_product_id_${item}`);
      if (event.deltaX > event.deltaY) {
        doc.scrollLeft += 10;
      } else if (event.deltaX < event.deltaY) {
        doc.scrollLeft -= 10;
      }
    },
    scroll_div_right(item) {
      var doc = document.querySelector(`#buy_product_id_${item}`);
        doc.scrollLeft += 100;
    },
    scroll_div_left(item) {
      var doc = document.querySelector(`#buy_product_id_${item}`);
        doc.scrollLeft -= 100;
    },
    call_support(type) {
      if (type == "Yes") {
        axios
          .post(api_calls.chatbot_response_cense(), {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: "/call_support",
            token: this.bot_response_token_value,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: this.refreshed_or_closed,
          })
          .then((resp) => {
            this.chat.push({
              conversation_only: true,
              receiving: true,
              received: resp.data.responses[0].text,
              time: this.generate_time(),
            });
            // this.$session.set("BotResponse_Conversation", this.chat);
            this.update_scrollbar("upto_end", "response");
          });
      } else if (type == "No") {
        this.chat.push(this.chat[0]);
        this.chat.push(this.chat[1]);
        this.update_scrollbar("upto_end", "response");
        // this.refresh_chatbot("support");
      }
    },
    parse(string) {
      return string.replace(/{{.*?}}/g, (match) => {
        var today = new Date();
        var dd = today.getDate();

        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        if (dd < 10) {
          dd = "0" + dd;
        }

        if (mm < 10) {
          mm = "0" + mm;
        }
        today = dd + "-" + mm + "-" + yyyy;
        var expression = match.slice(2, -2);
        this.$data[expression] = today;
        return this.$data[expression];
      });
    },
    show_popup() {
      this.show = false;
      this.stop = false;
    },
    sub_leaf_node_call(divclick) {
      // var divclick = event.target.innerText
      if (divclick == "Watch Demo Video") {
        this.demourlbind = true;
        this.reviewsurlbind = false;
      } else if (divclick == "User Reviews/Testimonials") {
        this.reviewsurlbind = true;
        this.demourlbind = false;
      }
      if (
        divclick == "Watch Demo Video" ||
        divclick == "User Reviews/Testimonials"
      ) {
        this.show = !this.show;
        this.update_scrollbar();
        setTimeout(() => {
          this.is_typing_indicator_on = false;
        }, 1000);
      } else if (divclick == "Buy Tutorial") {
        this.cense_enquiry = true;
        axios
          .post(api_calls.chatbot_response_cense(), {
            username: this.$session.get("UserInformation").email,
            token: this.bot_response_token_value,
            chat: "/personal_details",
            source: "Web",
            license_key: this.$session.get("UserInformation").license_key,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: "",
          })
          .then((response) => {
            var msg = {
              received: response.data.responses[0].text,
              conversation_only: true,
              receiving: true,
              time: this.generate_time(),
            };
            this.chat.push(msg);
            this.update_scrollbar();
            setTimeout(() => {
              this.is_typing_indicator_on = false;
            }, 1000);
            // this.$session.set("BotResponse_Conversation", this.chat);
          });
      }
    },
    ticket_number() {
      let random_num = Math.floor(1000000 + Math.random() * 9000000);
      let company = this.companyname.slice(0, 1).toUpperCase();
      return `${company}_${random_num}`;
    },
    send_message(type, message, to_be_displayed) {
      // harsh
      event.preventDefault();
      if (this.selected_indication[0] != undefined) {
        if (type == "is_button") {
          this.to_send = message.value + JSON.stringify(this.res);
        } else {
          type = "is_prompt";
          to_be_displayed = this.to_send;
          this.to_send =
            this.selected_indication[0].value.split("{")[0] +
            JSON.stringify(this.res);
        }
      }
      if (type == "is_button") {
        $("#response_bot_text").prop("disabled", false);
        if (
          message.value == "isdisabled" &&
          this.companyid == "clinicaltrials81352" &&
          message.title == "No"
        ) {
        } else if (message.value === "/live_chat") {
          this.start_live_chat();
        } else {
          var vm = this;
          function send_msg(toSend, customDisplayMsg) {
            vm.is_typing_indicator_on = true;
            vm.chat.push({
              sent: customDisplayMsg
                ? `${message.title} ${customDisplayMsg}`
                : message.title,
              sending: true,
              time: vm.generate_time(),
              conversation_only: true,
              delivered: true,
              dropdown: "",
            });
            vm.update_scrollbar("upto_end", "sender");
            if (
              vm.chat[to_be_displayed] &&
              vm.chat[to_be_displayed].removable == true
            ) {
              document
                .querySelector("#chat" + to_be_displayed)
                .classList.add("--delete");
              setTimeout(() => {
                vm.chat.splice(index, 1);
              }, 850);
              document.getElementById("response_bot_text").disabled = false;
            }
            if (
              vm.chat[to_be_displayed - 1] &&
              vm.chat[to_be_displayed - 1].is_multiselect &&
              (message.title == "Approve" ||
                message.title == "Reject" ||
                message.title == "Comment and Return")
            ) {
              vm.chat[to_be_displayed - 1].disabled = true;
            }
            axios
              .post(api_calls.chatbot_response_cense(), {
                chat: toSend,
                token: vm.bot_response_token_value,
                username: vm.$session.get("UserInformation").email,
                source: "Web",
                license_key: vm.$session.get("UserInformation").license_key,
                role: vm.$session.get("UserInformation").role,
                refreshed_or_closed: vm.refreshed_or_closed,
              })
              .then((response) => {
                vm.response_handling(response);
              });
            vm.selected_indication = [];
            vm.to_send = "";
          }

          if (this.companyid == "360_technology") {
            if (
              this.chat[to_be_displayed - 1] &&
              this.chat[to_be_displayed - 1].value_mapping
            ) {
              let valueMappingData = JSON.parse(
                JSON.stringify(this.chat[to_be_displayed - 1].value_mapping)
              );
              this.adddropdownvalue(valueMappingData).then(() => {
                this.to_send = message.value + JSON.stringify(this.res);
                if (this.chat[to_be_displayed - 1].value_mapping) {
                  if (valueMappingData.length === 0) {
                    send_msg(message.value);
                  } else {
                    send_msg(
                      this.to_send,
                      `for ${this.selected_indication
                        .map((obj) => {
                          return obj.title;
                        })
                        .toString()}`
                    );
                  }
                }
              });
            } else if (message.value.split("{").length > 1) {
              let customDisplayMsg = Object.values(
                JSON.parse(`{${message.value.split("{")[1]}`)
              )[0];
              send_msg(message.value, `for ${customDisplayMsg}`);
            } else if (
              this.chat[to_be_displayed - 1] &&
              this.chat[to_be_displayed - 1].show_text_area
            ) {
              send_msg(message.value);
              this.chat[to_be_displayed - 1].disabled = true;
            } else {
              send_msg(message.value);
            }
          } else {
            send_msg(message.value);
          }
        }
      } else if (type == "is_prompt") {
        this.is_typing_indicator_on = true;
        this.chat.push({
          sent: to_be_displayed,
          sending: true,
          time: this.generate_time(),
          conversation_only: true,
          delivered: true,
        });
        this.update_scrollbar("upto_end", "sender");
        axios
          .post(api_calls.chatbot_response_cense(), {
            // host: this.user_data.host,
            role: this.$session.get("UserInformation").role,
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: this.to_send,
          })
          .then((response) => {
            this.response_handling(response);
            this.ex1();
          });
      } else if (this.to_send == "Restart" || this.to_send == "restart") {
        axios
          .post(api_calls.prompt_url(), {
            uid: "cense", // this.fingerprint
            companyid: this.$session.get("UserInformation").company_id,
            license_key: this.$session.get("UserInformation").license_key,
            chat: "",
          })
          .then((response) => {
            this.chat.push(response.data);
            this.update_scrollbar("upto_end", "response");
            // this.$session.set("BotResponse_Conversation", this.chat);
            this.level = response.data.level;
          })
          .catch((e) => {});
      } else if (this.cense_enquiry == true && Boolean(this.to_send)) {
        this.is_typing_indicator_on = true;
        var send_msg = {
          sent: this.to_send,
          conversation_only: true,
          sending: true,
          time: this.generate_time(),
        };
        this.chat.push(send_msg);
        // this.$session.set("BotResponse_Conversation", this.chat);
        this.update_scrollbar("upto_end");
        axios
          .post(api_calls.chatbot_response_cense(), {
            username: this.$session.get("UserInformation").email,
            token: this.bot_response_token_value,
            chat: "/personal_details",
            source: "Web",
            Companyid: "CO00023",
            data: "",
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: "",
            license_key: this.$session.get("UserInformation").license_key,
          })
          .then((response) => {
            var msg = {
              received: response.data.responses[0].text,
              conversation_only: true,
              receiving: true,
              time: this.generate_time(),
            };
            this.chat.push(msg);
            // this.$session.set("BotResponse_Conversation", this.chat);
            this.refreshed_or_closed = false;
            this.update_scrollbar("upto_end", "response");
          })
          .catch((e) => {
            this.is_typing_indicator_on = false;
          });
      } else if (this.live_chat_on) {
        // LIVE CHAT ON CUSTOMER MESSAGES
        if (Boolean(this.user_name) === false) {
          this.channel.push("new_name", { name: this.to_send });
          this.user_name = this.to_send;
          this.update_scrollbar("upto_end", "response");
        } else {
          this.channel.push("new_name", { name: this.user_name });
          this.channel.push("new_chat_message", { message: this.to_send });
          this.update_scrollbar("upto_end", "response");
        }
        this.chat.push({
          sent: this.to_send,
          sending: true,
          conversation_only: true,
          time: this.generate_time(),
        });
        // this.$session.set("BotResponse_Conversation", this.chat);
        this.update_scrollbar("upto_end", "sender");
      } else if (Boolean(this.to_send) && this.cense_enquiry != true) {
        this.chat.push({
          conversation_only: true,
          sending: true,
          sent: this.to_send,
          time: this.generate_time(),
        });
        // this.$session.set("BotResponse_Conversation", this.chat);
        this.update_scrollbar("upto_end", "sender");
        axios
          .post(api_calls.chatbot_response_cense(), {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: this.to_send,
            token: this.bot_response_token_value,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: this.refreshed_or_closed,
          })
          .then((response) => {
            this.response_handling(response);
          })
          .catch((e) => {
            this.update_scrollbar("upto_end", "response");
          });
      }
      this.to_send = "";
    },
    initiate_support_chat() {
      this.chat.push({
        receiving: true,
        received: "Sorry I am not getting your question",
        conversation_only: true,
      });
      this.chat.push({
        receiving: true,
        received: "Would you like to talk with support team?",
        conversation_only: true,
        show_buttons: true,
        support_buttons: true,
        time: this.generate_time(),
      });
      this.update_scrollbar("upto_end", "response");
    },
    disconnect_support_chat() {
      this.channel.push("stopped_chat", {
        name: this.user_name,
        message: " has ended the conversation.",
      });
      this.channel.leave();
      this.live_chat_token = null;
      this.chat_group_name = null;
      this.user_name = "";
      this.chat_socket.disconnect();
      this.live_chat_on = false;
    },
    generate_payment(price, name) {
      var vm = this;
      var options = {
        key: "rzp_test_SnDTaPnncfliDt",
        amount: price * 100,
        company_id: this.$session.get("UserInformation").company_id,
        company_name: this.$session.get("UserInformation").company_name,
        name: "Cense AI",
        currency: "INR",
        description: "Instill Intelligence",
        image: "/img/cense_image.png", // COMPANY LOGO
        handler: function (response) {
          var contact = $('#contact[type="tel"]').value;
          var email = $('#email[type="email"]').value;
          vm.paymentid = response.razorpay_payment_id;

          if (transfer_account != null) {
            vm.transfer_payment(transfer_account, price * 100, "INR", name);
          }
        },
        prefill: {
          name: "", // pass customer name
          email: "", // customer email
          contact: "", // customer phone no.
        },
        notes: {
          address: "address", // customer address
        },
        theme: {
          color: "#283777", // screen color
        },
      };
      var rzp1 = new Razorpay(options);
      rzp1.open();
      event.preventDefault();
    },
    chat_response_error() {
      this.chat.push({
        conversation_only: true,
        receiving: true,
        received: "Sorry I'm not getting your question",
        time: this.generate_time(),
      });
      // this.$session.set("BotResponse_Conversation", this.chat);
      this.update_scrollbar("upto_end", "response");
    },
    send_request_json(message) {
      axios
        .post(api_calls.chatbot_response_cense(), {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          token: this.bot_response_token_value,
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: this.refreshed_or_closed,
          chat: "",
          source: "Web",
          data: this.json_data[message.responses[0].intent],
        })
        .then((resp) => {
          this.chat.push({
            conversation_only: true,
            receiving: true,
            received:
              resp.data.responses.length == 0
                ? "Sorry I'm not getting your question"
                : resp.data.responses[0].text,
            time: this.generate_time(),
            image:
              resp.data.responses[0].img == ""
                ? null
                : resp.data.responses[0].img,
          });
          // this.$session.set("BotResponse_Conversation", this.chat);
          this.update_scrollbar("upto_end", "response");
        });
    },
    response_handling(response, type) {
      var i = 0;
      var delay = 50;
      // response.data.responses[i].text != undefined ? 500
      // response.data.responses[i].text.length > 10
      //   ? 500
      //   : 500;
      var vm = this;
      vm.is_typing_indicator_on = true;
      setTimeout(() => {
        handle_response();
      }, delay);
      function handle_response() {
        setTimeout(() => {
          vm.is_typing_indicator_on = false;
          if (response.data == null || response.data.responses.length == 0) {
            vm.chat_response_error();
          } else if (Boolean(response.data.responses[i].request_json) == true) {
            if (response.data.responses[i].text != null) {
              vm.chat.push({
                conversation_only: true,
                receiving: true,
                received: response.data.responses[i].text,
                time: vm.generate_time(),
                image: response.data.responses[i].img,
                video: response.data.responses[i].video,
              });
              // vm.$session.set("BotResponse_Conversation", vm.chat);
              vm.update_scrollbar("upto_end", "response");
            }
            if (response.data.responses[i].intent == "gogyb450_create_ticket") {
              var name = `${vm.$session.get("UserInformation").first_name} ${
                vm.$session.get("UserInformation").last_name
              }`;
              var payload = {
                username: name,
                companyname: vm.companyname,
                companyid: vm.companyid,
                user_role: vm.$session.get("UserInformation").role,
                email: vm.$session.get("UserInformation").email,
                license_key: vm.$session.get("UserInformation").license_key,
                token: vm.$session.get("UserInformation").tokens,
                ticket_issue: "",
                ticket_number: vm.ticket_number(),
                description: "",
                file_content: null,
                file_name: null,
                isEdit: false,
              };
              payload = JSON.stringify(payload);
              axios
                .post(api_calls.chatbot_response_cense(), {
                  license_key: vm.$session.get("UserInformation").license_key,
                  token: vm.bot_response_token_value,
                  username: vm.$session.get("UserInformation").email,
                  token: vm.bot_response_token_value,
                  role: vm.$session.get("UserInformation").role,
                  refreshed_or_closed: vm.refreshed_or_closed,
                  chat: "",
                  source: "Web",
                  data: payload,
                })
                .then((resp) => {
                  vm.chat.push({
                    conversation_only: true,
                    receiving: true,
                    received:
                      resp.data.responses.length == 0
                        ? "Sorry I'm not getting your question"
                        : resp.data.responses[i].text,
                    time: vm.generate_time(),
                    image: resp.data.responses[i].img,
                    video: resp.data.responses[i].video || null,
                  });
                  // vm.$session.set("BotResponse_Conversation", vm.chat);
                  vm.new_update_response(i);
                });
            } else if (
              response.data.responses[i].intent == "create_appointment"
            ) {
              let today_date = new Date();
              axios
                .post(api_calls.schedule_appointment_url(), {
                  companyname: vm.companyname,
                  companyid: vm.companyid,
                  Date:
                    today_date.getFullYear() +
                    "-" +
                    (today_date.getMonth() < 9
                      ? "0" + (today_date.getMonth() + 1)
                      : today_date.getMonth() + 1) +
                    "-" +
                    today_date.getDate(), // Month object document it
                  // Date: start_time,
                })
                .then((response) => {
                  // console.log(response.data);
                  // this.time_slots = this.full_time_slots;
                  // if (response.data.Slot != undefined) {
                  //   if (response.data.Slot.length > 0) {
                  //     let index;
                  //     for (var i in response.data.Slot) {
                  //       index = this.time_slots.indexOf(response.data.Slot[i]);
                  //       if (index != -1) {
                  //         this.time_slots.splice(index, 1);
                  //       }
                  //     }
                  //   } else {
                  //   }
                  // }
                })
                .catch((e) => {
                  console.log(e);
                });
            } else {
              vm.send_request_json(response.data);
            }
          } 
          else if (
            response.data.responses[i].intent == "re_order_products_action"
          ) {
            // vm.send_shopify_customer_id();
            let msg = {
              conversation_only: true,
              time:
                i == response.data.responses.length - 1
                  ? vm.generate_time()
                  : null,
            ask_feedback: Boolean(response.data.responses[i].ask_feedback),
            };
            msg.receiving = true;
            msg.fetch_shopify_details = true;
            msg.is_refund = false;
            msg.return_shopify_email = true;
            msg.received =  "Please login with your credentials for better experience :)";
            msg.metadata = {
               entity: response.data.responses[i].entity,
              text: response.data.responses[i].text 
              }
            vm.chat.push(msg)
            // vm.send_shopify_customer_id(null,false,response.data.responses[i]);
          } 
           else if (
            response.data.responses[i].intent == "support_subscription_data"
          ) {
            // vm.send_shopify_customer_id();
            vm.support_subscription_data();
          } else if (response.data.responses[i].intent == "product_by_date") {
              vm.is_typing_indicator_on = true;
              let cutoff = new Date;
              var current_date_time = moment(cutoff).format("YYYY-MM-DD HH:mm:ss")
              
              let form_payload = JSON.stringify({
                usr_msg: response.data.responses[i].usr_msg,
                current_user_date: current_date_time
              });
              
              axios
                .post(api_calls.chatbot_response_cense(), {
                  license_key: vm.$session.get("UserInformation").license_key,
                  token: vm.bot_response_token_value,
                  username: vm.$session.get("UserInformation").email,
                  token: vm.bot_response_token_value,
                  role: vm.$session.get("UserInformation").role,
                  refreshed_or_closed: vm.refreshed_or_closed,
                  chat: `/product_by_date${form_payload}`,
                  source: "Web",
                })
                .then((response) => {
                  vm.response_handling(response);
                });
          } else if (
            Boolean(response.data.responses[i].return_intent) == true
          ) {
            this.is_typing_indicator_on = true;
            axios
              .post(api_calls.chatbot_response_cense(), {
                license_key: vm.$session.get("UserInformation").license_key,
                token: vm.bot_response_token_value,
                username: vm.$session.get("UserInformation").email,
                token: vm.bot_response_token_value,
                role: vm.$session.get("UserInformation").role,
                refreshed_or_closed: vm.refreshed_or_closed,
                chat: "/" + response.data.responses[i].intent,
                source: "Web",
              })
              .then((response) => {
                vm.handle_response(response);
              });
          } else if (
            vm.companyid == "3x5ive99534" &&
            response.data.responses[i].intent != undefined &&
            response.data.responses[i].intent == "confusion"
          ) {
            vm.confusion_message("/need_help");
          } else if (response.data.responses[i].buttons != undefined &&
            response.data.responses[i].buttons.length > 0) {
            vm.load_buttons(response.data.responses[i], i, type);
          } else if (Boolean(response.data.responses[i].custom) && response.data.responses[i].custom.type) {
            // CHange  the condition here
            if (
              response.data.responses[i].custom.type != undefined &&
              response.data.responses[i].custom.type == "multiselect_dropdown"
            ) {
              vm.multiselect_load(response.data.responses[i], i);
            } else if (
              response.data.responses[i].custom.type != undefined &&
              response.data.responses[i].custom.type == "table"
            ) {
              vm.load_table(response.data.responses[i], i);
            } else if (
              response.data.responses[i].custom.type != undefined &&
              response.data.responses[i].custom.type == "retail"
            ) {
              vm.display_products_chat(response.data.responses[i], i, type);
            } else if (response.data.responses[i].custom.show_text_area) {
              vm.load_text_area(response.data.responses[i], i);
            } else if (response.data.responses[i].custom.buttons != undefined) {
              vm.load_buttons(response.data.responses[i].custom, i, type);
            }
          } else if (
            Boolean(response.data.responses[i].messaging_platforms) &&
            response.data.responses[i].messaging_platforms.length > 0
          ) {
            var msg = {
              // conversation_only: true,
              time:
                i == response.data.responses.length - 1
                  ? vm.generate_time()
                  : null,
              ask_feedback: Boolean(response.data.responses[i].ask_feedback),
              show_messaging_platforms: true,
              // receiving: true,
              // received:"Please feel free to reachout to us at : " + response.data.responses[i].contact_us_email  + vm.contact_us_phone_number(response.data.responses[i].contact_us_phone_number) +" or drop us a message",
              messaging_platforms_data:
                response.data.responses[i].messaging_platforms,
            };
            vm.chat.push(msg);
          } else if (Boolean(response.data.responses[i].is_preview_banner)) {
            vm.display_banner(response.data.responses, i);
          } else if (Boolean(response.data.responses[i].is_display_banner)) {
            vm.display_banner(response.data.responses, i);
          }else {
            var msg = {
              conversation_only: true,
              time:
                i == response.data.responses.length - 1
                  ? vm.generate_time()
                  : null,
              ask_feedback: Boolean(response.data.responses[i].ask_feedback),
            };
            if (response.data.responses.length == 0) {
              msg.received = "Sorry we are not getting your question.";
              msg.receiving = true;
            }else if(response.data.responses[i].template === "utter_default"){
                msg.receiving = true;
                msg.received = response.data.responses[i].message.split('{email}').join(vm.contact_help_email);
                vm.chat.push(msg);
            }else if (
              response.data.responses[i].text != undefined &&
              vm.url_match_regex.test(response.data.responses[i].text)
            ) {
              vm.display_file_chat(response.data.responses[i].text);
            } else if (response.data.responses[i].get_company_details === "True" && response.data.responses[i].intent === "cense_support_ticket"){

               let c_id = vm.return_document_cookies('company_id');
               let c_name = vm.return_document_cookies('company_name');
               let c_email = vm.return_document_cookies('company_email');
                axios
              .post(api_calls.chatbot_response_cense(), {
                license_key: vm.$session.get("UserInformation").license_key,
                token: vm.bot_response_token_value,
                username: vm.$session.get("UserInformation").email,
                token: vm.bot_response_token_value,
                role: vm.$session.get("UserInformation").role,
                refreshed_or_closed: vm.refreshed_or_closed,
                chat:JSON.stringify({company_id : c_id,
                      company_name : c_name,
                      email : c_email,
                }),
                source: "Web",
              })
              .then((response) => {
                vm.response_handling(response);
              });
            }  
            else if (
              response.data.responses[i].text != undefined &&
              !response.data.responses[i].text.includes(
                "Download your manifest here"
              )
            ) {
              msg.received = response.data.responses[i].text;
              msg.receiving = true;
              msg.image = response.data.responses[i].img;
              msg.image = response.data.responses[i].image;
              msg.videos = response.data.responses[i].video || false;
              msg.order_status = response.data.responses[i].order_status;
              msg.is_order_status =
                response.data.responses[i].is_order_status || false;
              msg.offers = response.data.responses[i].offers || false;
              msg.fetch_shopify_details =
                response.data.responses[i].fetch_shopify_details || false;
              msg.order_items = response.data.responses[i].order_items;
              msg.shopify_fetch_customer_id_for_offers =
                response.data.responses[i]
                  .shopify_fetch_customer_id_for_offers || false;
              // if (msg.shopify_fetch_customer_id_for_offers === true) {
              //   vm.shopify_check_customer_logged_in();
              //   return true;
              // }
              if(msg.offers.length < 1){
                msg.offers = false;
                msg.received = "Sorry we do not have any offers currently, please check back later."
              }
              vm.chat.push(msg);
              vm.new_update_response(i);
            } else if (response.data.responses[i].intent == "chat_support") {
              vm.start_live_chat();
            } else if (
              response.data.responses[i].text != undefined &&
              (response.data.responses[i].text.includes(
                "Download your manifest here"
              ) ||
                response.data.responses[i].text.includes(/.pdf/))
            ) {
              vm.display_file_chat(response.data.responses[i]);
            } else if (
              Boolean(response.data.responses[i].products) &&
              (response.data.responses[i].products.length > 0 ||
                Object.keys(response.data.responses[i].products).length)
            ) {
              vm.display_products_chat(response.data.responses[i], i, type);
            } else if (response.data.responses[i].is_refund == "True") {
              vm.load_refunds(response.data.responses[i]);
            } else if (
              response.data.responses[i].shopify_fetch_customer_id === true
            ) {
              vm.shopify_check_customer_logged_in();
            }else if(response.data.responses[i].image != undefined){
              msg.image = response.data.responses[i].image;
              msg.receiving = true;
              vm.chat.push(msg);
              vm.new_update_response(i);
            }else if(response.data.responses[i].video != undefined){
              msg.videos = response.data.responses[i].video || false;;
              msg.receiving = true;
              vm.chat.push(msg);
              vm.new_update_response(i);
            }
          }
          if (i < response.data.responses.length - 1) {
            i += 1;
            vm.is_typing_indicator_on = true;
            // delay =
            //   response.data.responses[i].text != undefined &&
            //   response.data.responses[i].text.length > 10
            //     ? 2000
            //     : 500;
            delay = 500;
            handle_response();
          }
        }, delay);
      }
    },
    display_banner(response, i){
      var vm = this;
      var position_1 = response[i].banner_content_position[0]['id'];
      var position_2 = response[i].banner_content_position[1]['id'];
      var position_3 = response[i].banner_content_position[2]['id'];
      var is_data_position_1 = response[i][position_1];
      var is_data_position_2 = response[i][position_2];
      var is_data_position_3 = response[i][position_3];
      if(Boolean(is_data_position_1)){
        var msg = {
          conversation_only: true,
          time:
            (i == response.length - 1) && !(Boolean(is_data_position_2) || (Boolean(is_data_position_3)))
              ? vm.generate_time()
              : null,
          ask_feedback: Boolean(response[i].ask_feedback),
          banner_img_link: response[i].banner_img_link,
        };
        msg.show_bot_img = true;
        msg['show_'+ position_1] = true;
        msg[position_1] = is_data_position_1;
        vm.chat.push(msg);
        vm.new_update_response(i);
        if(Boolean(is_data_position_2)){
          var msg = {
            conversation_only: true,
            time:
              (i == response.length - 1) && !(Boolean(is_data_position_3))
                ? vm.generate_time()
                : null,
            ask_feedback: Boolean(response[i].ask_feedback),
            banner_img_link: response[i].banner_img_link,
          };
          msg.show_bot_img = false;
          msg['show_'+ position_2] = true;
          msg[position_2] = is_data_position_2;
          vm.chat.push(msg);
          vm.new_update_response(i);
        }
        if(Boolean(is_data_position_3)){
          var msg = {
            conversation_only: true,
            time:
              i == response.length - 1
                ? vm.generate_time()
                : null,
            ask_feedback: Boolean(response[i].ask_feedback),
            banner_img_link: response[i].banner_img_link,
          };
          msg.show_bot_img = false;
          msg['show_'+ position_3] = true;
          msg[position_3] = is_data_position_3;
          vm.chat.push(msg);
          vm.new_update_response(i);
        }
      }else if(Boolean(is_data_position_2)){
        var msg = {
          conversation_only: true,
          time:
            (i == response.length - 1) && !(Boolean(is_data_position_3))
              ? vm.generate_time()
              : null,
          ask_feedback: Boolean(response[i].ask_feedback),
          banner_img_link: response[i].banner_img_link,
        };
        msg.show_bot_img = true;
        msg['show_'+ position_2] = true;
        msg[position_2] = is_data_position_2;
        vm.chat.push(msg);
        vm.new_update_response(i);
        if(Boolean(is_data_position_3)){
          var msg = {
            conversation_only: true,
            time:
              i == response.length - 1
                ? vm.generate_time()
                : null,
            ask_feedback: Boolean(response[i].ask_feedback),
            banner_img_link: response[i].banner_img_link,
          };
          msg.show_bot_img = false;
          msg['show_'+ position_3] = true;
          msg[position_3] = is_data_position_3;
          vm.chat.push(msg);
          vm.new_update_response(i);
        }
      }else if(Boolean(is_data_position_3)){
        var msg = {
          conversation_only: true,
          time:
            i == response.length - 1
              ? vm.generate_time()
              : null,
          ask_feedback: Boolean(response[i].ask_feedback),
          banner_img_link: response[i].banner_img_link,
        };
        msg.show_bot_img = true;
        msg['show_'+ position_3] = true;
        msg[position_3] = is_data_position_3;
        vm.chat.push(msg);
        vm.new_update_response(i);
      }
    },
    push_msg(responses, response) {
      var index = 0;
      var vm = this;
      var delay = 50;
      // push_chat(response[index], delay);
      // function push_chat(msg, time_delay) {
        for(let i = 0; i < response.length; i++) {
          setTimeout(() => {
          // while (i < response.length) {
          // setTimeout(() => {
            var msg = response[i];
            vm.is_typing_indicator_on = true;
            // setTimeout(() => {
              vm.is_typing_indicator_on = false;
              if (responses.data.responses[i].buttons != undefined && Boolean(responses.data.responses[i].buttons.length > 0)) {
                vm.load_buttons(
                  responses.data.responses[i],
                  "is_button",
                  3000,
                  true
                );
              } else {
                  vm.chat.push({
                    conversation_only: true,
                    receiving: true,
                    received: msg.text,
                    offers: msg.offers || false,
                    time:
                      i == response.length - 1 ? vm.generate_time() : undefined,
                  });
              }
              if (this.greeting_buttons_position == i) {
                  if (vm.is_retail_bot) vm.load_chatbot_integration_details();
              }
            }, i  * 1050);
              $(".time").last().css("display", "none");
              setTimeout(() => {
                $(".time").last().css("display", "block");
                if (i < response.length - 1) {
                  // i += 1;
                  // delay = 500;
                  // push_chat(response[index], delay);
                } else {
                  vm.welcome_message_not_yet_received = false;
                }
              }, 500);
              // setTimeout(() => {
              // }, 1000);
              // setTimeout(() => {
                // i +=1;
            // }
              // }, 400);
            // }, time_delay);
            // }, i* 500);
          }
        setTimeout(() => {
          vm.demo_retail_question();
        }, delay);
      // }
    },  
    confusion_message(msg_string) {
      axios
        .post(api_calls.chatbot_response_cense(), {
          chat: msg_string,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
          license_key: this.$session.get("UserInformation").license_key,
          data: "",
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: false,
        })
        .then((response) => {
          this.response_handling(response);
        });
    },
    display_products_chat(message, index, type) {
      var msg = {
        conversation_only: true,
        time: this.generate_time(),
      };
      if (message.products.is_products_list) {
        msg.is_products_list = message.products.is_products_list;
        msg.products_list = message.products.products_list;
        if (message.products.products_list.length === 0) {
          msg.received = "Sorry, we could not find what you searched for";
          msg.receiving = true;
        }
        // setTimeout(() => {
          if(Boolean(message.products.text) === true){
            msg.received = message.products.text;
            msg.receiving = true;
          }
          this.product_out_of_stock_list = [];

          if (this.retail_web_framework == 'shopify') {
            msg.products_list.forEach((product) => {
            for (let i = 0; i < product.variations.length; i++){
              this.product_list.push({
                product_id: product.variations[i].id,
                product_title: product.title,
                variant_title: product.variations[i].variant_title,
                variant_id: product.variations[i].id,
                stock_status: product.variations[i].stock_status || "instock",
                back_in_stock: false,
                productImage: product.variations[i].img_url == null ? product.img_url : product.variations[i].img_url,
                onlineStoreURL: product.variations[i].permalink
              })
            }
            });
          }else if(this.retail_web_framework == 'woocommerce'){
            msg.products_list.forEach((product) => {
            if (product.variations && product.variations.length > 0){
              for (let i = 0; i < product.variations.length; i++) {
                  this.product_list.push({
                    product_id: product.id,
                    product_title: product.title,
                    variant_title: product.variations[i].variant_title,
                    variant_id: product.variations[i].id,
                    stock_status: product.variations[i].stock_status || "instock",
                    back_in_stock: false,
                    productImage: product.variations[i].img_url == null ? product.img_url : product.variations[i].img_url,
                    onlineStoreURL: product.permalink
                  })
              }
            }else{
              this.product_list.push({
                product_id: product.id,
                product_title: product.title,
                variant_title: null,
                variant_id: null,
                stock_status: product.stock_status || "instock",
                back_in_stock: false,
                productImage: product.img_url,
                onlineStoreURL: product.permalink
              })
            }
            });
          }else if(this.retail_web_framework == 'magento'){
            msg.products_list.forEach((product) => {
              if (product.variations && product.variations.length > 0){
                for (let i = 0; i < product.variations.length; i++) {
                  this.product_list.push({
                    product_id: product.id,
                    product_title: product.title,
                    variant_title: product.variations[i].variant_title,
                    variant_id: product.variations[i].id,
                    stock_status: product.stock_status || "instock",
                    back_in_stock: false,
                    productImage: product.variations[i].img_url == null ? product.img_url : product.variations[i].img_url,
                    onlineStoreURL: product.variations[i].permalink
                  })
                }
              }else{
                this.product_list.push({
                  product_id: product.id,
                  product_title: product.title,
                  variant_title: null,
                  variant_id: null,
                  stock_status: product.stock_status || "instock",
                  back_in_stock: false,
                  productImage: product.img_url,
                  onlineStoreURL: product.permalink
                })
              }
            });
          }
          for (var i in msg.products_list){
            msg.products_list[i].order_qty = 1;
            msg.products_list[i].buy_qty = 1;
            if (msg.products_list[i].variations && msg.products_list[i].variations.length > 0){
              msg.products_list[i].id = msg.products_list[i].variations[0].id;
              msg.products_list[i].img_url = (msg.products_list[i].variations[0].img_url === null) ? msg.products_list[i].img_url : msg.products_list[i].variations[0].img_url;
              msg.products_list[i].permalink = msg.products_list[i].variations[0].permalink;
              msg.products_list[i].variant_title = msg.products_list[i].variations[0].variant_title;
              msg.products_list[i].stock_quantity = msg.products_list[i].variations[0].stock_quantity;
              msg.products_list[i].stock_status = msg.products_list[i].variations[0].stock_status;
              msg.products_list[i].price = msg.products_list[i].variations[0].price;
              msg.products_list[i].regular_price = msg.products_list[i].variations[0].regular_price;
            }
          }
          msg.new_products = true;
          this.show_custom_cart = true;
          var newlist = this.product_list.filter(
            (product) => product["stock_status"] === "outofstock"
          );

          msg.product_out_of_stock_list = newlist;
          if (
            msg.product_out_of_stock_list.length > 0 && !this.display_products
          ) {
              msg.product_out_of_stock = true;
          }
          this.display_products = false;
        // }, 2000);
        if (type === "display_success_toastr") {
          setTimeout(() => {
            swal({
              text:
                "Testing Completed Successfully! Please Proceed to the next step.",
              toast: true,
              showCancelButton: false,
              showConfirmButton: false,
              type: "success",
              timer: 5000,
              timerProgressBar: true,
            });
          }, 1200);
        }
      // }, 30);
      } else if (message.products.length) {
        msg.isproduct = true;
        msg.elements = message;
      }
      this.chat.push(msg);
      // this.$session.set("BotResponse_Conversation", this.chat);
      this.new_update_response(index);
      this.product_list = [];
    },
    display_file_chat(message) {
      var msg = {
        conversation_only: true,
        time: this.generate_time(),
      };
      let temp = message.split("Download your manifest here ");
      let url = message.match(this.url_match_regex)[0];
      msg.url = message.includes("Download your manifest here ")
        ? temp[1]
        : url;
      msg.receiving = false;
      msg.file_name = url
        .split(/^.*[\\\/]/)[1]
        .split("/")
        .pop()
        .split("?")[0];
      this.chat.push(msg);
      // this.$session.set("BotResponse_Conversation", this.chat);
      this.update_scrollbar("upto_end", "response");
    },
    generate_order_details(order) {},
    async adddropdownvalue(value) {
      this.selected_indication = value;
      if (value.length > 0) {
        this.to_send = "";
        this.res = {};
        for (let i = 0; i < this.selected_indication.length; i++) {
          let parsedJson = JSON.parse(
            `{${this.selected_indication[i].value.split("{")[1]}`
          );
          if (i == 0) {
            this.to_send = this.selected_indication[i].title;
          } else {
            this.to_send =
              this.to_send + ", " + this.selected_indication[i].title;
          }
          if (this.res[Object.keys(parsedJson)[0].toString()] == undefined) {
            this.res[Object.keys(parsedJson)[0].toString()] = Object.values(
              parsedJson
            )[0].toString();
          } else {
            this.res[Object.keys(parsedJson)[0].toString()] =
              this.res[Object.keys(parsedJson)[0].toString()] +
              "," +
              Object.values(parsedJson)[0].toString();
          }
        }
        this.button_fill();
      } else {
        this.to_send = "";
        this.res = {};
      }
      this.button_fill();
    },
    button_fill() {
      if (this.to_send == "") {
        document.querySelector("#send_button").classList.remove("filled");
      } else if (this.to_send != "") {
        if (this.live_chat_on) {
          this.channel.push("started_typing");
          this.stop_typing(this);
        }
        document.querySelector("#send_button").classList.add("filled");
      }
    },
    stop_typing: debounce(function (vm) {
      vm.channel.push("stopped_typing");
    }, 1000),
    scroll_down() {
      if (
        document.querySelector(".chat-body").scrollHeight -
          document.querySelector(".chat-body").scrollTop <=
        document.querySelector(".chat-body").clientHeight
      ) {
        this.to_scroll = false;
      } else {
        this.to_scroll = true;
      }
    },
    load_buttons(message, index, type , greeting_button) {
      if (type === "display_success_toastr") {
        swal({
          text: "Some error occurred while testing.",
          toast: true,
          showCancelButton: false,
          showConfirmButton: false,
          type: "error",
          timer: 5000,
        });
        var msg = {
          conversation_only: true,
          time: this.generate_time(),
          ask_feedback: false,
          received:
            "Some error occurred while testing. Please try by refreshing the browser! If the issue persists, please contact system admin.",
          receiving: true,
        };
        this.chat.push(msg);
        return;
      }
      var msg = {
        conversation_only: true,
        buttons_list: [],
        button_prefix: message.prefix,
        receiving: true,
        received: message.text,
        time: null,
      };
      if(Boolean(greeting_button)){
       msg.greeting_button = false
      }else{
        msg.custom_buttons = false
      }
      if (message.buttons.length == 3) {
        if (
          message.buttons[0].title == "Exchange Rate" &&
          message.buttons[1].title == "Track My Parcel" &&
          message.buttons[2].title == "Call Helpdesk"
        ) {
          msg.removable = false;
        }
      }
      if (
        message.text == "Would you like to share your name and number?" &&
        this.isexchange
      ) {
        $("#response_bot_text").prop("disabled", true);
      }
      for (var i in message.buttons) {
        if (msg.button_prefix != null) {
          msg.buttons_list.push({
            title: message.buttons[i].title,
            value: msg.button_prefix + message.buttons[i].value,
          });
        } else {
          msg.buttons_list.push({
            title: message.buttons[i].title,
            value: message.buttons[i].value,
          });
        }
        if (
          msg.buttons_list[i].title == "No" &&
          message.text != "Can I help you with anything else?" &&
          this.companyid == "clinicaltrials81352"
        ) {
          msg.buttons_list[i].value = "isdisabled";
        }
      }
      // setTimeout(() => {
        var chatIndex = this.chat.push(msg);
        if (index == "is_button" || index == 0) {
          setTimeout(() => {
            if (
              $(".chat-body").children().last().height() /
                $(".chat-body").height() <
              0.5
            ) {
              this.animate_chat_body_scroll(1, 1500);
            } else {
              this.animate_chat_body_scroll(50, 1500, true);
            }
          }, 1000);
        } else {
          this.scroll_down();
        }
        if(Boolean(greeting_button)){
          this.chat[chatIndex - 1].greeting_button = true;
        }else{
          this.chat[chatIndex - 1].custom_buttons = true;
        }
        // this.$session.set("BotResponse_Conversation", this.chat);
        setTimeout(() => {
          this.chat[chatIndex - 1].time = this.generate_time();
        }, 500);
      // }, 500);
    },
    multiselect_load(message, index) {
      var msg = {
        conversation_only: true,
        multiselect_values: message.custom.values,
        placeholder: message.custom.placeholder,
        is_multiselect: true,
        value_mapping: [],
        receiving: true,
        received: message.text,
        disabled: false,
        time: this.generate_time(),
      };
      this.chat.push(msg);
    },
    load_table(message, index) {
      let msg = {
        conversation_only: true,
        col_list: Object.keys(message.custom.values[0]),
        table_value: message.custom.values,
        receiving: true,
        received: message.text,
        is_table: true,
        time: this.generate_time(),
      };

      setTimeout(() => {
        this.chat.push(msg);
        if (index == 0) {
          setTimeout(() => {
            if (
              $(".chat-body").children().last().height() /
                $(".chat-body").height() <
              0.5
            ) {
              this.animate_chat_body_scroll(1, 1500);
            } else {
              this.animate_chat_body_scroll(0.7, 1500);
            }
          }, 1000);
        } else {
          this.animate_chat_body_scroll(100, 1500, true);
          this.scroll_down();
        }
      }, 2500);
    },
    load_text_area(message, index) {
      let msg = {
        conversation_only: true,
        receiving: true,
        received: message.text,
        show_text_area: true,
        disabled: false,
        time: this.generate_time(),
      };

      setTimeout(() => {
        this.chat.push(msg);
        if (index == 0) {
          setTimeout(() => {
            if (
              $(".chat-body").children().last().height() /
                $(".chat-body").height() <
              0.5
            ) {
              this.animate_chat_body_scroll(1, 1500);
            } else {
              this.animate_chat_body_scroll(0.7, 1500);
            }
          }, 1000);
        } else {
          this.animate_chat_body_scroll(100, 1500, true);

          this.scroll_down();
        }
      }, 2500);
    },
    start_live_chat() {
      // var msg = {};
      // msg.receiving = true;
      // msg.received =
      //   "I am connecting you to one of our support agents. Please wait for a while.";
      // msg.conversation_only = true;
      // msg.time = this.generate_time();
      // this.update_scrollbar("upto_end", "response");
      // this.chat.push(msg);
      // this.chat.push({
      //   receiving: true,
      //   received: "What's your name?",
      //   conversation_only: true,
      //   time: this.generate_time(),
      // });
      // this.new_update_response(0);
      // this.scroll_down();
      this.chat_socket = new Socket(
        process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT,
        {
          params: {
            username: this.$session.get("UserInformation").email,
            token: this.$session.get("UserInformation").tokens,
            role: this.$session.get("UserInformation").role,
          },
        }
      );
      this.chat_socket.connect();
      this.support_channel = this.chat_socket.channel(
        "companies:" + this.$session.get("UserInformation").company_name
      );
      this.support_channel.join();
      const vm = this;
      this.support_channel.push("customer_wants_presence");
      this.support_channel.on("customer_gets_presence", (res) => {
        console.log("customer_gets_presence res", res);
        if (Boolean(res[vm.companyname]) === true) {
          var company_presence = res[vm.companyname]["metas"];
          // console.log(company_presence);
          let self_user_index = company_presence
            .map(function (e) {
              return e.user_info.username;
            })
            .indexOf(vm.$session.get("UserInformation").email);
          if (self_user_index !== -1) {
            company_presence.splice(self_user_index, 1);
          }
          let present_role_list = [];
          company_presence.filter((each) =>
            present_role_list.push(each.user_info.role)
          );
          let unique_role_list = present_role_list.filter(
            (x, i, a) => a.indexOf(x) == i
          );
          if (
            unique_role_list.includes("Admin") ||
            unique_role_list.includes("support agent")
          ) {
            vm.is_support_agent_present = true;
          } else {
            vm.is_support_agent_present = false;
            console.log("coming here not a support a agent");
          }
        } else {
          vm.is_support_agent_present = false;
        }
        vm.connect_support_agent();
        // console.log(res)
      });

      // presence.onSync((res) => {
      // console.log(res)
      // })
      // axios.get(api_calls.chat_group_api()).then((response) => {
      //   this.chat_group_name = response.data.chat_group_name;
      //   this.live_chat_token = response.data.token;
      //   this.live_chat_on = true;
      //   this.chat_socket = new Socket(
      //     process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT,
      //     {
      //       params: {
      //         company: this.$session.get("UserInformation").company_name,
      //         chat_group_name: this.chat_group_name,
      //         token: this.live_chat_token,
      //       },
      //     }
      //   );
      //   this.chat_socket.connect();
      //   this.channel = this.chat_socket.channel(
      //     "customers_groups:" + this.chat_group_name
      //   );
      //   this.channel.join();
      //   this.channel.push("customer_needs_support_agent");
      //   this.channel.on("new_chat_message", (res) => {
      //     if (res.sender != "customer") {
      //       this.chat.push({
      //         receiving: true,
      //         received: res.message,
      //         time: this.generate_time(),
      //         conversation_only: true,
      //       });
      //       setTimeout(() => {
      //         this.scroll_down();
      //         if (
      //           $(".chat-body").children().last().height() /
      //             $(".chat-body").height() <
      //           0.5
      //         ) {
      //           this.animate_chat_body_scroll(1, 1500);
      //         } else if (
      //           $(".receiver").last().parent().height() /
      //             $(".chat-body").height() >
      //             0.5 &&
      //           $(".receiver").last().parent().height() /
      //             $(".chat-body").height() <
      //             0.6
      //         ) {
      //           this.animate_chat_body_scroll(0.9, 1500);
      //         } else {
      //           this.animate_chat_body_scroll(0.75, 1500);
      //         }
      //       }, 1000);
      //       if (
      //         $(".chat-body").height() - $(".chat-body").prop("scrollHeight") !=
      //         0
      //       ) {
      //         this.scroll_down();
      //       }
      //     }
      //   });
      //   this.channel.on("stopped_chat", (res) => {
      //     this.chat.push({
      //       conversation_only: true,
      //       receiving: true,
      //       received: "Support agent " + res.message,
      //       time: this.generate_time(),
      //     });
      //     this.live_chat_on = false;
      //     this.update_scrollbar("upto_end", "response");
      //   });
      //   this.channel.on("started_typing", (res) => {
      //     this.is_agent_typing = true;
      //     this.is_typing_indicator_on = true;
      //   });
      //   this.channel.on("stopped_typing", (res) => {
      //     this.is_agent_typing = false;
      //     this.is_typing_indicator_on = false;
      //   });
      // });
    },
    connect_support_agent() {
      var vm = this;
      this.support_channel.leave();
      this.chat_socket.disconnect();
      this.chat_socket = null;
      if (this.is_support_agent_present === true) {
        var msg = {};
        msg.receiving = true;
        msg.received =
          "I am connecting you to one of our support agents. Please wait for a while.";
        msg.conversation_only = true;
        msg.time = this.generate_time();
        this.update_scrollbar("upto_end", "response");
        this.chat.push(msg);
        this.chat.push({
          receiving: true,
          received: "What's your name?",
          conversation_only: true,
          time: this.generate_time(),
        });
        this.new_update_response(0);
        this.scroll_down();
        axios.get(api_calls.chat_group_api()).then((response) => {
          this.chat_group_name = response.data.chat_group_name;
          this.live_chat_token = response.data.token;
          this.live_chat_on = true;
          this.chat_socket = new Socket(
            process.env.VUE_APP_LIVE_CHAT_WEBSOCKET_ENDPOINT,
            {
              params: {
                company: this.$session.get("UserInformation").company_name,
                chat_group_name: this.chat_group_name,
                token: this.live_chat_token,
              },
            }
          );
          this.chat_socket.connect();
          this.channel = this.chat_socket.channel(
            "customers_groups:" + this.chat_group_name
          );
          this.channel.join();
          this.channel.push("customer_needs_support_agent");
          
          setInterval(function () {
            vm.channel.push("customer_group_presence");
          }, 2000);
          setInterval(function () {
            vm.channel.push("customer_group_self_presence");
          }, 2000);
          this.channel.on("customer_group_self_presence", (res) => {
            console.log("CUSTOMER GROUP PRESENCE", res);
          });
          this.channel.on("new_chat_message", (res) => {

            if (res.sender != "customer") {
              this.chat.push({
                receiving: true,
                received: res.message,
                time: this.generate_time(),
                conversation_only: true,
              });
              setTimeout(() => {
                this.scroll_down();
                if (
                  $(".chat-body").children().last().height() /
                    $(".chat-body").height() <
                  0.5
                ) {
                  this.animate_chat_body_scroll(1, 1500);
                } else if (
                  $(".receiver").last().parent().height() /
                    $(".chat-body").height() >
                    0.5 &&
                  $(".receiver").last().parent().height() /
                    $(".chat-body").height() <
                    0.6
                ) {
                  this.animate_chat_body_scroll(0.9, 1500);
                } else {
                  this.animate_chat_body_scroll(0.75, 1500);
                }
              }, 1000);
              if (
                $(".chat-body").height() -
                  $(".chat-body").prop("scrollHeight") !=
                0
              ) {
                this.scroll_down();
              }
            }
          });
          this.channel.on("stopped_chat", (res) => {
            this.chat.push({
              conversation_only: true,
              receiving: true,
              received: "Support agent " + res.message,
              time: this.generate_time(),
            });
            this.live_chat_on = false;
            this.channel.leave();
            this.live_chat_token = null;
            this.chat_group_name = null;
            this.user_name = "";
            this.chat_socket.disconnect();
            this.update_scrollbar("upto_end", "response");
          });
          this.channel.on("started_typing", (res) => {
            this.is_agent_typing = true;
            this.is_typing_indicator_on = true;
          });
          this.channel.on("stopped_typing", (res) => {
            this.is_agent_typing = false;
            this.is_typing_indicator_on = false;
          });
        });
      } else {
        this.support_subscription_data();
      }
    },
    submit_custom_form() {
      if (document.querySelector("#details_form") != null) {
        var element = document.querySelector("#details_form");
        element.addEventListener("submit", (event) => {
          event.preventDefault();
          // actual logic, e.g. validate the form
          var queryString = $("#details_form").serializeArray();
          if (this.form_payload == null) {
            this.form_payload = {};
            for (var i in queryString) {
              this.form_payload[queryString[i].name] = queryString[i].value;
            }
            axios
              .post(api_calls.bot_user_data(), {
                license_key: this.$session.get("UserInformation").license_key,
                data: this.form_payload,
                token: this.bot_response_token_value,
                username: this.$session.get("UserInformation").email,
                source: "Web",
                token: this.bot_response_token_value,
                role: this.$session.get("UserInformation").role,
              })
              .then((response) => {
                if (response.data == "Bot User Data Saved Successfully") {
                  $("#details_form :input").prop("disabled", true);
                  $("#details_form :button").prop("disabled", true);
                  this.update_scrollbar("upto_end", "response");
                  axios
                    .post(api_calls.chatbot_response_cense(), {
                      chat: "/details_form",
                      token: this.bot_response_token_value,
                      username: this.$session.get("UserInformation").email,
                      source: "Web",
                      license_key: this.$session.get("UserInformation")
                        .license_key,
                      Details: JSON.stringify(this.form_payload),
                      role: this.$session.get("UserInformation").role,
                      refreshed_or_closed: false,
                    })
                    .then((resp) => {
                      this.response_handling(resp);
                      this.animate_chat_body_scroll(1, 1000);
                    });
                }
              })
              .catch((e) => {
                console.log(e);
              });
          }
        });
      }
    },
    update_scrollbar(type, msgType, iswelcome, delay_value) {
      var scroll_delay = iswelcome == "is_welcome" ? delay_value : 2000;
      this.is_typing_indicator_on = true;
      if (msgType == "response") {
        setTimeout(() => {
          this.is_typing_indicator_on = false;
        }, scroll_delay);
      } else if (msgType == "sender") {
        this.animate_chat_body_scroll(1, 750);
      }
      if (msgType == "response") {
        if (type == "upto_end") {
          setTimeout(() => {
            if (
              $(".chat-body").prop("scrollTop") <
              $(".chat-body").prop("scrollHeight")
            ) {
              if (
                $(".receiver").last().parent().height() /
                  $(".chat-body").height() >
                0.5
              ) {
                this.animate_chat_body_scroll(0.75, 1500);
                this.scroll_down();
              }
            } else if (
              $(".receiver").last().parent().height() /
                $(".chat-body").height() <
              0.5
            ) {
              this.animate_chat_body_scroll(1, scroll_delay);
            }
          }, scroll_delay);
        } else {
          setTimeout(() => {
            document.querySelector(".chat-body").scrollTop =
              document.querySelector(".chat-body").scrollHeight -
              document.querySelector(".chat-body").lastChild.scrollHeight;
          }, 1000);
        }
      }
    },
    new_update_response(index) {
      if (index == 0) {
        setTimeout(() => {
          this.scroll_down();
          if (
            $(".chat-body").children().last().height() /
              $(".chat-body").height() <
            0.5
          ) {
            this.animate_chat_body_scroll(1, 1500);
          } else if (
            $(".receiver").last().parent().height() / $(".chat-body").height() >
              0.5 &&
            $(".receiver").last().parent().height() / $(".chat-body").height() <
              0.6
          ) {
            this.animate_chat_body_scroll(1, 1500);
          } else {
            this.animate_chat_body_scroll(1, 1500);
          }
        }, 1000);
      }
      if (
        $(".chat-body").height() - $(".chat-body").prop("scrollHeight") !=
        0
      ) {
        this.scroll_down();
      }
      if (
        $(".chat-body").height() - $(".chat-body").prop("scrollHeight") ===
        0
      ) {
        this.to_scroll = false;
      }
    },
    animate_chat_body_scroll(scale, delay, offset) {
      if (Boolean(offset)) {
        $(".chat-body").animate(
          {
            scrollTop: $(".chat-body").prop("scrollTop") + scale,
          },
          delay
        );
      } else {
        $(".chat-body").animate(
          {
            scrollTop: scale * $(".chat-body").prop("scrollHeight"),
          },
          delay
        );
      }
    },
    add_bot_unanswered_question(index, method) {
      axios
        .put(
          api_calls.get_unanswered_url(),
          {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            bot_answer: this.chat[index].received,
            user_query: this.chat[index - 1].sent,
            feedback: method ? "like" : "dislike",
            username: this.$session.get("UserInformation").email,
            companyid: this.$session.get("UserInformation").company_id,
            companyname: this.$session.get("UserInformation").company_name,
          },
          {
            headers: {
              Authorization: `Bearer ${this.$session.get("at")}`,
            },
          }
        )
        .then(() => {
          this.chat[index].ask_feedback = false;
        })
        .catch(() => {});
    },
    load_refunds() {
      let msg = {
        conversation_only: true,
        is_refund: true,
        receiving: true,
        received: this.retail_order_retreival_only_email_required
          ? "Please enter email to fetch your orders."
          : "Please login to fetch your recent orders",
        time: this.generate_time(),
      };

      setTimeout(() => {
        let latestChatIndex = this.chat.push(msg);
        latestChatIndex -= 1;
        this.chat[latestChatIndex].fetch_shopify_details = true;
        this.scroll_down();
      }, 1000);
    },
    view_order_details(chatIndex, orderIndex, orderLineItems, orderRefunds) {
      this.chat[chatIndex].refund_selected_items = [];
      this.chat[chatIndex].shopify_reason_for_refund_list = null;
      this.chat[chatIndex].shopify_reason_for_refund = null;
      this.chat[chatIndex].refund_order_view_details = Object(
        this.chat[chatIndex].refund_orders_list[orderIndex]
      );
      this.chat[chatIndex].refund_order_view_details.line_items = orderLineItems.map(
        (lineItem) => {
          let lineItemNode = lineItem;
          lineItemNode.selected_quantity = this.retail_web_framework == "magento" ? lineItem.qty_ordered : lineItem.quantity;
          lineItemNode.already_refunded_qty = this.retail_web_framework == "magento" ? lineItem.qty_refunded : 0;
          lineItemNode.qty_available_for_refund = this.retail_web_framework == "magento" ? lineItem.qty_ordered : lineItem.quantity;
          lineItemNode.product_id = lineItem.product_id;
          lineItemNode.variant_id = this.retail_web_framework == "magento" ? lineItem.sku : lineItem.variant_id;
          return lineItemNode;
        }
      );
      if (Boolean(orderRefunds) === true){
        orderRefunds = orderRefunds.map(lineItem=>{ return lineItem.refund_line_items[0]});
        var AlreadyRefundedQty = [];
        orderRefunds.reduce(function(res, value) {
          if (!res[value.line_item_id]) {
            res[value.line_item_id] = { line_item_id: value.line_item_id, quantity: 0 };
            AlreadyRefundedQty.push(res[value.line_item_id])
          }
          res[value.line_item_id].quantity += value.quantity;
          return res;
        }, {});
        let temp = this.chat[chatIndex].refund_order_view_details.line_items;
        this.chat[chatIndex].refund_order_view_details.line_items = temp.map(lineItem=>{
            let lineItemNode = lineItem;
            for(var i in AlreadyRefundedQty){
                if (lineItem.id == AlreadyRefundedQty[i].line_item_id){
                    lineItemNode.already_refunded_qty = AlreadyRefundedQty[i]['quantity'];
                    lineItemNode.qty_available_for_refund = (lineItem.quantity)-(AlreadyRefundedQty[i]['quantity']);
                    lineItemNode.selected_quantity = (lineItem.quantity)-(AlreadyRefundedQty[i]['quantity']);
                    lineItemNode.product_id = lineItem.product_id;
                    lineItemNode.variant_id = this.retail_web_framework == "magento" ? lineItem.sku : lineItem.variant_id;
                }
            };
        return lineItemNode;
        });
      }
      this.$set(
            this.chat, chatIndex,
            this.chat[chatIndex]
          );
    },
    refresh_or_remove_order_details(chatIndex, val) {
      if (val == "remove") {
        this.chat[chatIndex].refund_order_view_details = {};
      }
      this.$set(
            this.chat, chatIndex,
            this.chat[chatIndex]
          );
    },
    load_customer_orders(ordersData, index, order_type) {
      // this.chat[index].received = `Order ${orderName}`;
      this.is_typing_indicator_on = true;
      if (order_type === "refund") {
        this.chat[index].received = "Fetching your orders ...";
        this.chat[index].refund_orders_list = ordersData.map((order) => {
          let orderObject = order;
          orderObject.created_at = moment(orderObject.created_at, [
            "YYYY-MM-DDTh:m:sZ",
          ]).format("Do MMM YYYY");
          orderObject.name = this.retail_web_framework == "shopify" ? orderObject.name : orderObject.id;
          orderObject.processedAt = moment(orderObject.created_at, [
            "YYYY-MM-DDThh:mm:ssZ",
          ]).format("Do MMM YYYY");
            // cur_node.fulfillmentStatus = cur_node.fulfillment_status;
          orderObject.fulfillment_status =
            Boolean(orderObject.fulfillment_status) === true
              ? orderObject.fulfillment_status
              : "Unfulfilled";
          // Set only first character to uppercase while remaining characters set to lowercase
          orderObject.fulfillment_status =
          orderObject.fulfillment_status.charAt(0).toUpperCase() +
          orderObject.fulfillment_status.slice(1).toLowerCase();

          if(this.retail_web_framework != "shopify") {
            for (let i = 0; i < orderObject.order_notes.length; i++){
              orderObject.order_notes[i].date_created = moment(orderObject.order_notes[i].date_created, [
            "YYYY-MM-DDThh:mm:ssZ",
            ]).format("Do MMM YYYY HH:mm a")
            }
          }
          return orderObject;
        });
        if (this.chat[index].refund_orders_list.length === 0) {
          this.chat[index].received = "There are no orders to be displayed";
        } else {
          this.chat[index].received =
            "Select the order that you wish to return";
        }
        // this.refund_order_view_details = {};
        this.chat[index].refund_order_view_details = {};
        this.chat[index].refund_selected_items = [];
        this.chat[index].shopify_reason_for_refund_list = null;
        this.chat[index].shopify_reason_for_refund = null;
        this.chat[index].conversation_only = false;
        this.chat[index].conversation_only = true;
      } else if (order_type === "all_orders") {
        let orders_data = ordersData,
          complete_orders_data = [];
        for (let i = 0; i < orders_data.length; i++) {
          var cur_node = orders_data[i];
          cur_node.processedAt = moment(cur_node.created_at, [
            "YYYY-MM-DDThh:mm:ssZ",
          ]).format("Do MMM YYYY");
          // cur_node.fulfillmentStatus = cur_node.fulfillment_status;
          cur_node.fulfillment_status =
            Boolean(cur_node.fulfillment_status) === true
              ? cur_node.fulfillment_status
              : "Unfulfilled";
          // // Set only first character to uppercase while remaining characters set to lowercase
          cur_node.fulfillment_status =
            cur_node.fulfillment_status.charAt(0).toUpperCase() +
            cur_node.fulfillment_status.slice(1).toLowerCase();
          if(this.retail_web_framework != "shopify") {
            for (let i = 0; i < cur_node.order_notes.length; i++){
              cur_node.order_notes[i].date_created = moment(cur_node.order_notes[i].date_created, [
            "YYYY-MM-DDThh:mm:ssZ",
            ]).format("Do MMM YYYY HH:mm a")
            }
          }
          complete_orders_data.push({
            name: this.retail_web_framework == "shopify" ? cur_node.name : cur_node.id,
            processed_date: cur_node.processedAt,
            fulfillment_status: cur_node.fulfillment_status,
            status_url: cur_node.order_status_url,
            order_notes: this.retail_web_framework == "shopify" ? null : cur_node.order_notes,
          });
        }
        this.chat[index].show_all_orders_list = true;
        this.chat[index].all_orders_list = complete_orders_data;
        if (this.chat[index].all_orders_list.length === 0) {
          this.chat[index].received = "There are no orders to be displayed";
          this.chat[index].show_all_orders_list = false;
        }else {
          this.chat[index].received =
          "Please Find Below Your Latest Orders:";
        }
        this.chat[index].recent_orders_list = complete_orders_data;
        setTimeout(() => {
          this.chat[index].conversation_only = true;
        }, 500);
      }
      this.is_typing_indicator_on = false;
    },
    submit_refund_request(refund_order_view_details, index) {
      if (
        this.chat[index].shopify_reason_for_refund_list === null
      ) {
        this.show_shopify_reason_for_refund_error = true;
        return
      } 
      if(        
        this.chat[index].shopify_reason_for_refund_list === 'Others'
      ){
        if (this.chat[index].shopify_reason_for_refund === null ||
          this.chat[index].shopify_reason_for_refund === "")
          {
            this.show_shopify_reason_for_refund_error = true;
            return
          }
      }else{
        this.chat[index].shopify_reason_for_refund = this.chat[index].shopify_reason_for_refund_list;
      } 
      // else {
        this.show_shopify_reason_for_refund_error = false;
        let items_to_refund = refund_order_view_details.line_items.filter((lineItem) => {
          if (this.retail_web_framework == 'magento') {
            return this.chat[index].refund_selected_items.includes(lineItem.product_id);
          } else {
            return this.chat[index].refund_selected_items.includes(lineItem.id);
          }
        });
        for (let i = 0; i <items_to_refund.length; i++){
          if(items_to_refund[i].selected_quantity === null ||
            Boolean(items_to_refund[i].selected_quantity) === false){
             swal({
              text: "Please enter the product quantity in numeric only",
              toast: true,
              position: "top-end",
              type: "warning",
              showConfirmButton: false,
              timer: 5000,
            });
            return;
          }
        }
        let refund_payload_string = JSON.stringify({
          orderId: refund_order_view_details.id,
          order_name: refund_order_view_details.name,
          customer_id: this.shopify_customer_id,
          fulfillment_status: refund_order_view_details.fulfillment_status,
          payment_status: refund_order_view_details.payment_status,
          currency: this.retail_shop_currency,
          lineItems: items_to_refund.map((item) => {
            return {
              line_item_id: this.retail_web_framework == 'magento' ? item.product_id : item.id,
              quantity: item.selected_quantity,
              product_id: item.product_id,
              variant_id: item.variant_id,
            };
          }),
          refundReason: this.chat[index].shopify_reason_for_refund,
        });
        let refund_intent = `/process_refund_request${refund_payload_string}`;
        let refund_object = {
          title: "Proceed",
          value: refund_intent,
        };
        // console.log(refund_intent);
        this.send_message("is_button", refund_object);
        this.chat[index].refund_order_view_details = {};
        this.chat[index].refund_selected_items = [];
        this.chat[index].shopify_reason_for_refund_list = null;
        this.chat[index].shopify_reason_for_refund = null;
        this.chat.splice(index, 1);
      // }
    },
    shopify_form_focus(index) {
      if (
        this.chat[index].received ===
        "We are sorry, your credentials are invalid. Please try again :)"
      ) {
        this.chat[index].received = "Please login with your credentials for better experience :)";
      }
    },
    shopify_create_customer_token(index, isRefund) {
      this.is_typing_indicator_on = true;
      isRefund = isRefund || false;
      if (this.chat[index].return_shopify_email === true && !isRefund) {
        this.send_shopify_customer_id(index, true);
        return;
      }
      let shop_endpoint = this.shopify_retail_shop_name + ".myshopify.com";
      let queryString = $("#shopify_login_form").serializeArray();
      let form_payload = {};
      form_payload[
        "shopify_is_only_email"
      ] = this.retail_order_retreival_only_email_required;
      form_payload['email'] = this.chat[index].customer_email_id;
      form_payload['password'] = this.chat[index].customer_password;
      // for (var i in queryString) {
      //   form_payload[queryString[i].name] = this.chat[index].customer_email_id;
      // }
      form_payload = JSON.stringify(form_payload);
      axios
        .post(api_calls.chatbot_response_cense(), {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
          chat: `/shopify_create_customer_token${form_payload}`,
          token: this.bot_response_token_value,
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: this.refreshed_or_closed,
        })
        .then(({ data }) => {
          // console.log(data);
          // if (Boolean(data.responses[0].Data.accessToken)) {
          //   let customerToken = data.responses[0].Data.accessToken;
          //   let tokenExpiry = data.responses[0].Data.expiresAt;
          //   this.$session.set("shopify_customer_token", customerToken);
          //   this.$session.set("shopify_customer_token_expiry", tokenExpiry);
          //   this.shopify_fetch_orders(customerToken, index, isRefund);
          // } else {
          //   this.chat[index].received =
          //     "We are sorry, your credentials are invalid. Please try again :)";
          // }
          if (data.responses[0].token_type === "customer_token") {
            if (Boolean(data.responses[0].Data)) {
              if (this.retail_web_framework == "shopify"){
                let customerToken = data.responses[0].Data.accessToken;
                let tokenExpiry = data.responses[0].Data.expiresAt;
                this.$session.set("shopify_customer_token", customerToken);
                this.$session.set("shopify_customer_token_expiry", tokenExpiry);
                this.shopify_fetch_orders(
                  customerToken,
                  index,
                  isRefund,
                  "shopify_customer_token"
                );
              } else if(this.retail_web_framework == "woocommerce"){
                let customerToken = data.responses[0].customer_data.customer_email;
                let tokenExpiry = data.responses[0].Data.expiresAt;
                let customerId = data.responses[0].customer_data.customer_id;
                this.shopify_customer_id = customerId;
                this.$session.set("shopify_customer_token", customerToken);
                this.$session.set("shopify_customer_token_expiry", tokenExpiry);
                this.$session.set("shopify_customer_id", customerId);
                this.shopify_fetch_orders(
                  customerToken,
                  index,
                  isRefund,
                  "shopify_customer_token"
                );
              } else if(this.retail_web_framework == "magento"){
                let customerToken = data.responses[0].customer_data.customer_email;
                let tokenExpiry = data.responses[0].Data.expiresAt;
                let customerId = data.responses[0].customer_data.customer_id;
                this.shopify_customer_id = customerId;
                this.$session.set("shopify_customer_token", customerToken);
                this.$session.set("shopify_customer_token_expiry", tokenExpiry);
                this.$session.set("shopify_customer_id", customerId);
                this.shopify_fetch_orders(
                  customerToken,
                  index,
                  isRefund,
                  "shopify_customer_token"
                );
              }
            } else {
              this.chat[index].received =
                "We are sorry, your credentials are invalid. Please try again :)";
              this.is_typing_indicator_on = false;  
            }
          } else if (data.responses[0].token_type === "customer_id") {
            // if (Boolean(data.responses[0].customer_id)) {
              if (this.retail_web_framework == "shopify"){
                let customerId = data.responses[0].customer_id;
                let customerEmail = data.responses[0].customer_email;
                this.shopify_customer_id = customerId;
                this.$session.set("shopify_customer_id", customerId);
                this.$session.set("shopify_customer_token", customerEmail);
                this.shopify_fetch_orders(
                  customerId,
                  index,
                  isRefund,
                  "shopify_customer_id"
                );
              } else if(this.retail_web_framework == "woocommerce"){
                let customerId = data.responses[0].customer_id;
                let customerEmail = data.responses[0].customer_email;
                this.$session.set("shopify_customer_id", customerId);
                this.$session.set("shopify_customer_token", customerEmail);
                this.shopify_fetch_orders(
                  customerId,
                  index,
                  isRefund,
                  "shopify_customer_id"
                );
              } else if(this.retail_web_framework == "magento"){
                let customerId = data.responses[0].customer_id;
                let customerEmail = data.responses[0].customer_email;
                this.$session.set("shopify_customer_id", customerId);
                this.$session.set("shopify_customer_token", customerEmail);
                this.shopify_fetch_orders(
                  customerId,
                  index,
                  isRefund,
                  "shopify_customer_id"
                );
              }
            // } 
            else {
              this.chat[index].received =
                "We are sorry, could not find any records with this email. Please try again :)";
              this.is_typing_indicator_on = false;
            }
          } else {
            this.chat[index].received =
              "We are sorry, your credentials are invalid. Please try again :)";
            this.is_typing_indicator_on = false;
          }
          // this.chat.splice(index, 1);
        });
    },
    shopify_fetch_customer_id(customerAccessToken, index, token_type) {
      let shop_endpoint = this.shopify_retail_shop_name + ".myshopify.com";
      this.is_typing_indicator_on = true;
      if (!Boolean(this.chat[index].refund_orders_list)) {
        if (token_type === "shopify_customer_token") {
          let stringified_customer_payload = JSON.stringify({
            customer_access_token: customerAccessToken, //shopify access token == email for woocommerce
          });
          axios
            .post(api_calls.chatbot_response_cense(), {
              license_key: this.$session.get("UserInformation").license_key,
              token: this.bot_response_token_value,
              username: this.$session.get("UserInformation").email,
              source: "Web",
              chat: `/shopify_get_customer_id_and_orders${stringified_customer_payload}`,
              token: this.bot_response_token_value,
              role: this.$session.get("UserInformation").role,
              refreshed_or_closed: this.refreshed_or_closed,
            })
            .then(({ data }) => {
              if (Boolean(data.responses[0].custom)) {
                this.load_customer_orders(
                  data.responses[0].custom.orders_list,
                  index,
                  "refund"
                );
                // this.shopify_customer_id = data.responses[0].custom.customer_id;
              } else {
                this.chat[index].received =
                  "Some Error Occurred. Please Try Again";
                this.is_typing_indicator_on = false;
              }
              //   let customerId = atob(data.data.customer.id);
              //   this.shopify_customer_id = customerId.slice(
              //     customerId.lastIndexOf("/") + 1
              //   );
              //   let stringified_customer_payload = JSON.stringify({
              //     customerId: this.shopify_customer_id,
              //   });
              //   this.chat[index].received = "Fetching your order details ...";
              //   axios
              //     .post(api_calls.chatbot_response_cense(), {
              //       license_key: this.$session.get("UserInformation").license_key,
              //       token: this.bot_response_token_value,
              //       username: this.$session.get("UserInformation").email,
              //       source: "Web",
              //       chat: `/retrieve_customer_orders${stringified_customer_payload}`,
              //       token: this.bot_response_token_value,
              //       role: this.$session.get("UserInformation").role,
              //       refreshed_or_closed: this.refreshed_or_closed,
              //     })
              //     .then((response) => {
              //       this.load_customer_orders(
              //         response.data.responses[0].custom.orders_list,
              //         index
              //       );
              //     })
              //     .catch((e) => {
              //       console.log(e);
              //       this.update_scrollbar("upto_end", "response");
              //     });
            });
        } else if (token_type == "shopify_customer_id") {
          let stringified_customer_payload = JSON.stringify({
            customerId: this.shopify_customer_id,
          });
          this.chat[index].received = "Fetching your order details ...";
          axios
            .post(api_calls.chatbot_response_cense(), {
              license_key: this.$session.get("UserInformation").license_key,
              token: this.bot_response_token_value,
              username: this.$session.get("UserInformation").email,
              source: "Web",
              chat: `/retrieve_customer_orders${stringified_customer_payload}`,
              token: this.bot_response_token_value,
              role: this.$session.get("UserInformation").role,
              refreshed_or_closed: this.refreshed_or_closed,
            })
            .then((response) => {
              this.load_customer_orders(
                response.data.responses[0].custom.orders_list,
                index,
                "refund"
              );
            })
            .catch((e) => {
              this.is_typing_indicator_on = false;
              console.log(e);
              this.update_scrollbar("upto_end", "response");
            });
        }
      }
    },
    shopify_fetch_orders(customerAccessToken, index, isRefund, token_type) {
      this.is_typing_indicator_on = true;
      isRefund = isRefund || false;
      this.chat[index].conversation_only = false;
      let shop_endpoint = this.shopify_retail_shop_name + ".myshopify.com";
      if (token_type === "shopify_customer_token") {
        let stringified_customer_payload = JSON.stringify({
          customer_access_token: customerAccessToken, //woocommerce customer email
        });
        axios
          .post(api_calls.chatbot_response_cense(), {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: `/shopify_get_customer_orders${stringified_customer_payload}`,
            token: this.bot_response_token_value,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: this.refreshed_or_closed,
          })
          .then(({ data }) => {
            this.is_typing_indicator_on = false;
            try {
              let customerId = atob(data.responses[0].data.customer.id);
              this.shopify_customer_id = customerId.slice(
                customerId.lastIndexOf("/") + 1
              );
              this.$session.set("shopify_customer_id", this.shopify_customer_id);
            } catch (e) {}
            
            if (this.retail_web_framework == "shopify"){
              let ordersData = data.responses[0].data.customer.orders.edges;
              if (typeof index == "number" && ordersData.length > 0) {
                // ordersData = ordersData[0].node;
                // let orderName = ordersData.name;
                // let orderStatusUrl = ordersData.statusUrl;
                // let orderProcessingDate = moment(ordersData.processedAt, [
                //   "YYYY-MM-DDThh:mm:ssZ",
                // ]).format("Do MMM YYYY");
                if (isRefund) {
                  this.shopify_fetch_customer_id(
                    customerAccessToken,
                    index,
                    "shopify_customer_token"
                  );
                } else {
                  this.is_typing_indicator_on = false;
                  //   let orderFulfillmentStatus = ordersData.fulfillmentStatus.replace(
                  //     "_",
                  //     " "
                  //   );
                  //   let successfulOrderFulfillments =
                  //     ordersData.successfulFulfillments;
                  //   // Set only first character to uppercase while remaining characters set to lowercase
                  //   orderFulfillmentStatus =
                  //     orderFulfillmentStatus.charAt(0).toUpperCase() +
                  //     orderFulfillmentStatus.slice(1).toLowerCase();

                  //   let orderDetailsMsg = `Here's the status of your recent order:<br>
                  // Order - <a href="${orderStatusUrl}" target="_blank">#${orderName}</a><br>
                  // Order Processed On: ${orderProcessingDate}<br>
                  // Fulfillment Status: ${orderFulfillmentStatus}<br>`;
                  //   if (orderFulfillmentStatus == "FULFILLED") {
                  //     successfulOrderFulfillments = successfulOrderFulfillments[0];
                  //     orderDetailsMsg += `You can track your order here<a href="${successfulOrderFulfillments.trackingInfo.url}" data-copy-content="${successfulOrderFulfillments.trackingInfo.number}">
                  //   ${successfulOrderFulfillments.trackingInfo.number}</a><i class="fa fa-clipboard ml-2" aria-hidden="true" data-copy-content="${successfulOrderFulfillments.trackingInfo.number}"></i><br>`;
                  //   }
                  //   this.chat[index].received = orderDetailsMsg;
                  let orders_data = data.responses[0].data.customer.orders.edges,
                    complete_orders_data = [];
                  for (let i = 0; i < orders_data.length; i++) {
                    var cur_node = orders_data[i].node;
                    cur_node.processedAt = moment(cur_node.processedAt, [
                      "YYYY-MM-DDThh:mm:ssZ",
                    ]).format("Do MMM YYYY");
                    cur_node.fulfillmentStatus = cur_node.fulfillmentStatus.replace(
                      "_",
                      " "
                    );
                    // Set only first character to uppercase while remaining characters set to lowercase
                    cur_node.fulfillmentStatus =
                      cur_node.fulfillmentStatus.charAt(0).toUpperCase() +
                      cur_node.fulfillmentStatus.slice(1).toLowerCase();
                    complete_orders_data.push({
                      name: cur_node.name,
                      processed_date: cur_node.processedAt,
                      fulfillment_status: cur_node.fulfillmentStatus,
                      status_url: cur_node.statusUrl,
                    });
                  }
                  this.chat[index].show_all_orders_list = true;
                  this.chat[index].all_orders_list = complete_orders_data;
                  this.chat[index].received =
                    "Please Find Below Your Latest Orders:";
                    
                  this.chat[index].recent_orders_list =
                    data.responses[0].data.customer.orders.edges;
                } 
              }
              setTimeout(() => {
                this.chat[index].conversation_only = true;
              }, 500);
            } else if (this.retail_web_framework == "woocommerce"){
              if (isRefund) {
                  this.load_customer_orders(
                    data.responses[0].data.customer.orders,
                    index,
                    isRefund ? "refund" : "all_orders"
                  );
                }else{
                  this.is_typing_indicator_on = false;
              let orders_data = data.responses[0].data.customer.orders,
                complete_orders_data = [];
              for (let i = 0; i < orders_data.length; i++) {
                var cur_node = orders_data[i];
                cur_node.processedAt = moment(cur_node.created_at, [
                  "YYYY-MM-DDThh:mm:ssZ",
                ]).format("Do MMM YYYY");
                cur_node.fulfillment_status =
                Boolean(cur_node.fulfillment_status) === true
                  ? cur_node.fulfillment_status
                  : "Unfulfilled";
                // Set only first character to uppercase while remaining characters set to lowercase
                cur_node.fulfillment_status =
                  cur_node.fulfillment_status.charAt(0).toUpperCase() +
                  cur_node.fulfillment_status.slice(1).toLowerCase();
                for (let i = 0; i < cur_node.order_notes.length; i++){
                  cur_node.order_notes[i].date_created = moment(cur_node.order_notes[i].date_created, [
                "YYYY-MM-DDThh:mm:ssZ",
                ]).format("Do MMM YYYY HH:mm a")
                }
                complete_orders_data.push({
                  name: cur_node.id,
                  processed_date: cur_node.processedAt,
                  fulfillment_status: cur_node.fulfillment_status,
                  status_url: cur_node.order_status_url,
                  order_notes: cur_node.order_notes
                });
              }
              this.chat[index].show_all_orders_list = true;
              this.chat[index].all_orders_list = complete_orders_data;
              this.chat[index].received =
                "Please Find Below Your Latest Orders:";
              this.chat[index].show_all_orders_list = true;
              this.chat[index].recent_orders_list = complete_orders_data;
                }
              setTimeout(() => {
                this.chat[index].conversation_only = true;
              }, 500);
            } else if(this.retail_web_framework == "magento"){
              if (isRefund) {
                  this.load_customer_orders(
                    data.responses[0].data.customer.orders,
                    index,
                    isRefund ? "refund" : "all_orders"
                  );
                }else{
                  this.is_typing_indicator_on = false;
              let orders_data = data.responses[0].data.customer.orders,
                complete_orders_data = [];
              for (let i = 0; i < orders_data.length; i++) {
                var cur_node = orders_data[i];
                cur_node.processedAt = moment(cur_node.created_at, [
                  "YYYY-MM-DDThh:mm:ssZ",
                ]).format("Do MMM YYYY");
                cur_node.fulfillment_status =
                Boolean(cur_node.fulfillment_status) === true
                  ? cur_node.fulfillment_status
                  : "Unfulfilled";
                // Set only first character to uppercase while remaining characters set to lowercase
                cur_node.fulfillment_status =
                  cur_node.fulfillment_status.charAt(0).toUpperCase() +
                  cur_node.fulfillment_status.slice(1).toLowerCase();
                for (let i = 0; i < cur_node.order_notes.length; i++){
                  cur_node.order_notes[i].date_created = moment(cur_node.order_notes[i].date_created, [
                "YYYY-MM-DDThh:mm:ssZ",
                ]).format("Do MMM YYYY HH:mm a")
                }
                complete_orders_data.push({
                  name: cur_node.id,
                  processed_date: cur_node.processedAt,
                  fulfillment_status: cur_node.fulfillment_status,
                  status_url: cur_node.order_status_url,
                  order_notes: cur_node.order_notes
                });
              }
              this.chat[index].show_all_orders_list = true;
              this.chat[index].all_orders_list = complete_orders_data;
              this.chat[index].received =
                "Please Find Below Your Latest Orders:";
              this.chat[index].show_all_orders_list = true;
              this.chat[index].recent_orders_list = complete_orders_data;
                }
              setTimeout(() => {
                this.chat[index].conversation_only = true;
              }, 500);
            }
          });
      } else if (token_type === "shopify_customer_id") {
        if(Boolean(this.shopify_customer_id) === false){
          this.shopify_customer_id = this.$session.get("shopify_customer_id");
        }
        var shopify_customer_email = this.$session.get("shopify_customer_token");
        let stringified_customer_payload = JSON.stringify({
          customerId: this.shopify_customer_id,
          email: shopify_customer_email
        });
        this.chat[index].received = "Fetching your order details ...";
        axios
          .post(api_calls.chatbot_response_cense(), {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: `/retrieve_customer_orders${stringified_customer_payload}`,
            token: this.bot_response_token_value,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: this.refreshed_or_closed,
          })
          .then((response) => {
            if (response.data.responses[0].custom.orders_list.length == 0 && this.retail_order_retreival_only_email_required){
              this.is_typing_indicator_on = false;
              this.chat[index].conversation_only = true;
              this.chat[index].received = "There are no orders to be displayed for the given Email or Phone number";
              this.shopify_customer_id = null;
            }else{
              this.load_customer_orders(
              response.data.responses[0].custom.orders_list,
              index,
              isRefund ? "refund" : "all_orders"
            );
            }
          })
          .catch((e) => {
            this.is_typing_indicator_on = false;
            console.log(e);
            this.update_scrollbar("upto_end", "response");
          });
      }
    },
    shopify_is_token_valid(index, isRefund) {
      isRefund = isRefund || false;
      if (this.retail_web_framework == "shopify"){
        if (
        (this.chat[index].fetch_shopify_details &&
          !Boolean(this.chat[index].is_refund) &&
          !Boolean(this.chat[index].recent_orders_list)) ||
        (this.chat[index].fetch_shopify_details &&
          Boolean(this.chat[index].is_refund) &&
          !Boolean(this.chat[index].refund_orders_list)) ||
        (this.chat[index].fetch_shopify_details &&
          Boolean(this.chat[index].return_shopify_email))
        ) {
          if (this.retail_order_retreival_only_email_required) {
            if (Boolean(this.shopify_customer_id)) {
              let customerToken = this.$session.get("shopify_customer_token");
              if (this.chat[index].is_refund) {
                this.shopify_fetch_customer_id(
                  customerToken,
                  index,
                  "shopify_customer_id"
                );
              }
              else if (this.chat[index].return_shopify_email) {
                this.send_shopify_customer_id(index, false);
              }
              else {
                this.shopify_fetch_orders(
                  customerToken,
                  index,
                  isRefund,
                  "shopify_customer_id"
                );
              }
              return true;
            }
            return false;
          } else {
            let shopify_store_cid = this.get_shopify_store_window_customer_id();
            if (Boolean(shopify_store_cid) === false) {
              return false;
            } else {
              // let cutoff = this.$session.get("shopify_customer_token_expiry");
              // cutoff = moment(cutoff, ["YYYY-MM-DDThh:mm:ssZ"]);
              // if (moment().isBefore(cutoff)) {


                // let shopify_store_cid = this.get_shopify_store_window_customer_id();
                // let shopify_store_cid = 5302001893447; //hardcoded: remove after testing
                if(shopify_store_cid === null || shopify_store_cid == undefined || shopify_store_cid == ""){
                  return false;
                } else {
                  this.shopify_customer_id = shopify_store_cid;
                }
                let customerToken = this.$session.get("shopify_customer_token");
                if (this.chat[index].is_refund) {
                  this.shopify_fetch_customer_id(
                    customerToken,
                    index,
                    "shopify_customer_id"
                  );
                }
                else if (this.chat[index].return_shopify_email) {
                  this.send_shopify_customer_id(index, false);
                }
                else {
                  this.shopify_fetch_orders(
                    customerToken,
                    index,
                    isRefund,
                    "shopify_customer_id"
                  );
                }
                return true;
              // } else {
              //   return false;
              // }
            }
          }
        } else {
          return true;
        }
      } else if(this.retail_web_framework == "woocommerce"){
        if (
        (this.chat[index].fetch_shopify_details &&
          !Boolean(this.chat[index].is_refund) &&
          !Boolean(this.chat[index].recent_orders_list)) ||
        (this.chat[index].fetch_shopify_details &&
          Boolean(this.chat[index].is_refund) &&
          !Boolean(this.chat[index].refund_orders_list)) ||
        (this.chat[index].fetch_shopify_details &&
          Boolean(this.chat[index].return_shopify_email))
        ) {
        if (this.retail_order_retreival_only_email_required) {
          this.shopify_customer_id = this.$session.get("shopify_customer_id");
          if (Boolean(this.shopify_customer_id)) {
              let customerToken = this.$session.get("shopify_customer_id");
              this.shopify_fetch_orders(
                      customerToken,
                      index,
                      isRefund,
                      "shopify_customer_id"
                    );
              return true 
          }else {
            return false;
          }
        }else {
          let woocommerce_store_login_detail = this.get_woocommerce_store_window_customer_email();
            if (Boolean(woocommerce_store_login_detail) == false) {
              return false;
            } else {
                this.$session.set("shopify_customer_id", woocommerce_store_login_detail[0]);
                this.$session.set("shopify_customer_token", woocommerce_store_login_detail[1])
                if (this.chat[index].is_refund) {
                  this.shopify_fetch_customer_id(woocommerce_store_login_detail[0], index, "shopify_customer_id");
                } else {
                  this.shopify_fetch_orders(woocommerce_store_login_detail[0], index, isRefund, "shopify_customer_id");
                }
                return true;
            }
          // if (!this.$session.has("shopify_customer_token_expiry")) {
          //     return false;
          //   } else {
          //     let cutoff = this.$session.get("shopify_customer_token_expiry");
          //     cutoff = moment(cutoff, ["YYYY-MM-DDThh:mm:ssZ"]);
          //     let current_time = new Date(cutoff);
          //     if (moment().isBefore(current_time)) {
          //       let customerToken = this.$session.get("shopify_customer_token");
          //       this.shopify_fetch_orders(
          //           customerToken,
          //           index,
          //           isRefund,
          //           "shopify_customer_token"
          //         );
          //       return true;            
          //     }else {
          //       return false;
          //     }
          //   }
        }
        }else {
          return true;
        }
      } else if(this.retail_web_framework == "magento"){
        if (
        (this.chat[index].fetch_shopify_details &&
          !Boolean(this.chat[index].is_refund) &&
          !Boolean(this.chat[index].recent_orders_list)) ||
        (this.chat[index].fetch_shopify_details &&
          Boolean(this.chat[index].is_refund) &&
          !Boolean(this.chat[index].refund_orders_list)) ||
        (this.chat[index].fetch_shopify_details &&
          Boolean(this.chat[index].return_shopify_email))
        ) {
        if (this.retail_order_retreival_only_email_required) {
          this.shopify_customer_id = this.$session.get("shopify_customer_id");
          if (Boolean(this.shopify_customer_id)) {
              let customerToken = this.$session.get("shopify_customer_id");
              this.shopify_fetch_orders(
                      customerToken,
                      index,
                      isRefund,
                      "shopify_customer_id"
                    );
              return true 
          }else {
            return false;
          }
        }else {
          let magento_store_login_detail = this.get_magento_store_window_customer_email();
            if (Boolean(magento_store_login_detail) == false) {
              return false;
            } else {
                this.$session.set("shopify_customer_id", magento_store_login_detail[0]);
                this.$session.set("shopify_customer_token", magento_store_login_detail[1])
                if (this.chat[index].is_refund) {
                  this.shopify_fetch_customer_id(magento_store_login_detail[0], index, "shopify_customer_id");
                } else {
                  this.shopify_fetch_orders(magento_store_login_detail[0], index, isRefund, "shopify_customer_id");
                }
                return true;
            }
          // if (!this.$session.has("shopify_customer_token_expiry")) {
          //     return false;
          //   } else {
          //     let cutoff = this.$session.get("shopify_customer_token_expiry");
          //     cutoff = moment(cutoff, ["YYYY-MM-DDThh:mm:ssZ"]);
          //     let current_time = new Date(cutoff);
          //     if (moment().isBefore(current_time)) {
          //       let customerToken = this.$session.get("shopify_customer_token");
          //       this.shopify_fetch_orders(
          //           customerToken,
          //           index,
          //           isRefund,
          //           "shopify_customer_token"
          //         );
          //       return true;            
          //     }else {
          //       return false;
          //     }
          //   }
        }
        }else {
          return true;
        }
      }
    },
    initialize_shopify_ui() {
      if (
        window.Shopify ||
        this.is_retail_bot ||
        this.companyid == "censeretail49140"
      ) {
        var client = ShopifyBuy.buildClient({
          domain: window.Shopify
            ? window.Shopify.shop
            : this.shopify_retail_shop_name + ".myshopify.com",
          storefrontAccessToken: this.retail_shop_storefront_token,
        });
        this.shopify_ui = ShopifyBuy.UI.init(client);
        // if (this.$session.get("IsPortalMaintainence") === false) {
        this.shopify_ui.createComponent("cart", {
          node: document.getElementById("cartDiv"),
          toggles: [{ node: document.getElementById("toggle") }],
          moneyFormat: this.retail_shop_currency + " {{money_with_currency}}",
          options: {
            toggle: {
              sticky: false,
            },
            popup: false,
          },
        });
        // }
      }
    },
    initialize_shopify_buttons(product_id, index, variant_id) {
      try {
          this.shopify_ui
          .createComponent("product", {
            id: product_id,
            variantId: variant_id,
            moneyFormat: this.retail_shop_currency + " {{money_with_currency}}",
            options: {
              product: {
                contents: {
                  options: true,
                  quantity: true,
                  quantityIncrement: true,
                  quantityDecrement: true,
                  variantTitle: true,
                  // buttonWithQuantity: false,
                },
                styles: {
                  quantity: {
                    display: "flex",
                    "justify-content": "center",
                  },
                },
              },
            },
            node: document.getElementById(`product_${product_id}_${index}`),
          })
          .then((response) => {
            this.check_no_products();
            for (var i in this.product_list) {
              if (product_id == this.product_list[i].product_id) {
                this.product_list[i].availableForSale =
                  response.viewData.availableForSale;
                this.product_list[i].productImage = response.cachedImage.src;
                this.product_list[i].onlineStoreURL = response.onlineStoreURL;
              }
            }
          });
      } catch (e) {
        var msg = {
          conversation_only: true,
          time: this.generate_time(),
          ask_feedback: false,
          received:
            "Some error occurred while testing. Please try by refreshing the browser! If the issue persists, please contact system admin.",
          receiving: true,
        };
        this.chat.push(msg);
      }
    },
    demo_retail_question() {
      if (this.is_retail_bot && this.isCalledFromSetup) {
        axios
          .post(
            api_calls.template_synonyms(),
            {
              company_id: this.companyid,
              company_name: this.companyname,
              is_get_product_list: true,
            },
            {
              headers: {
                Authorization: `Bearer ${this.$session.get("at")}`,
              },
            }
          )
          .then(({ data }) => {
            this.spinnerOn = false;
            if (data.status === "Success") {
              let product_names_list = data.product_names_list;
              let item =
                product_names_list[
                  Math.floor(Math.random() * product_names_list.length)
                ];
              this.to_send = `Please show me ${item}`;
              swal({
                text:
                  "Testing of Bot in Progress, Searching for a product from your Store!",
                toast: true,
                showCancelButton: false,
                showConfirmButton: false,
                type: "info",
                timer: 5000,
              });
              setTimeout(() => {
                // $("#send_btn").click()
                this.chat.push({
                  conversation_only: true,
                  sending: true,
                  sent: this.to_send,
                  time: this.generate_time(),
                });
                // this.$session.set("BotResponse_Conversation", this.chat);
                this.update_scrollbar("upto_end", "sender");
                axios
                  .post(api_calls.chatbot_response_cense(), {
                    chat: this.to_send,
                    token: this.bot_response_token_value,
                    username: this.$session.get("UserInformation").email,
                    source: "Web",
                    license_key: this.$session.get("UserInformation")
                      .license_key,
                    role: this.$session.get("UserInformation").role,
                    refreshed_or_closed: this.refreshed_or_closed,
                  })
                  .then((response) => {
                    // response.data = {
                    //   responses: [
                    //     {
                    //       buttons: [
                    //         { title: "Call Support", value: "/call_support" },
                    //         { title: "Live Chat", value: "/live_chat" },
                    //       ],
                    //       intent: "confusion",
                    //       text: "Sorry I am not getting your question",
                    //     },
                    //   ],
                    // };

                    this.response_handling(response, "display_success_toastr");
                    // swal({
                    //   text: "Testing Completed Successfully! Please Proceed to the next step.",
                    //   toast: true,
                    //   showCancelButton: false,
                    //   showConfirmButton: false,
                    //   type: "success",
                    //   timer: 5000,
                    //   timerProgressBar: true,
                    // })
                  });
                this.to_send = "";
              }, 3200);
            }
          })
          .catch((e) => {
            this.spinnerOn = false;
            // console.log(e);
            // swal({
            //   text: "Testing Finished.Some Error Occurred, Please Try Again",
            //   toast: true,
            //   showCancelButton: false,
            //   showConfirmButton: false,
            //   type: "error",
            //   timer: 2000,
            //   timerProgressBar: true,
            // })
            var msg = {
              conversation_only: true,
              time: this.generate_time(),
              ask_feedback: false,
              received:
                "Some error occurred while testing. Please try by refreshing the browser! If the issue persists, please contact system admin.",
              receiving: true,
            };
            this.chat.push(msg);
          });
      }
    },
    shopify_check_customer_logged_in() {
      let customer_data = {
        is_customer_logged_in: false,
        customer_id: null,
      };

      if (Boolean(this.shopify_customer_id)) {
        customer_data.is_customer_logged_in = true;
        customer_data.customer_id = this.shopify_customer_id;
      }
      let stringified_customer_payload = JSON.stringify({
        customer_data,
      });
      this.is_typing_indicator_on = true;
      axios
        .post(api_calls.chatbot_response_cense(), {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          source: "Web",
          chat: `/shopify_retreive_customer_specific_offers${stringified_customer_payload}`,
          token: this.bot_response_token_value,
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: this.refreshed_or_closed,
        })
        .then((response) => {
          this.response_handling(response, null);
        })
        .catch((e) => {
          console.log(e);
          this.update_scrollbar("upto_end", "response");
        });
    },
    send_shopify_customer_id(index, is_login, metadata) {
      // debugger;
      // console.log("send_shopify_customer_clg");
      // is_login = false;
      if (is_login === true) {
        let queryString = $("#shopify_login_form").serializeArray();
        let form_payload = {};
        form_payload[
          "shopify_is_only_email"
        ] = this.retail_order_retreival_only_email_required;
        form_payload[
          "text"
        ] = this.chat[index].metadata.text;
        form_payload[
          "entity"
        ] = this.chat[index].metadata.entity;
        for (var i in queryString) {
          form_payload[queryString[i].name] = this.chat[index].customer_email_id;
        }
        form_payload = JSON.stringify(form_payload);
        axios
          .post(api_calls.chatbot_response_cense(), {
            license_key: this.$session.get("UserInformation").license_key,
            token: this.bot_response_token_value,
            username: this.$session.get("UserInformation").email,
            source: "Web",
            chat: `/re_order_products_action${form_payload}`,
            token: this.bot_response_token_value,
            role: this.$session.get("UserInformation").role,
            refreshed_or_closed: this.refreshed_or_closed,
          })
          .then((response) => {
            this.chat[index].received = "";
            this.chat[index].fetch_shopify_details = false;
            this.chat.splice(index,1);
            this.response_handling(response)
          })
          .catch((err) => {
            console.log("Error :>> ", err);
          });
      } else {
        // let form_payload = {
        //   email:'ashish.i@codearray.tech',
        //   password: "",
        //   shopify_is_only_email: false,
        //   text: this.chat[index].metadata.text,
        //   entity : this.chat[index].metadata.entity
        // };
        // form_payload = JSON.stringify(form_payload);
        // axios
        //   .post(api_calls.chatbot_response_cense(), {
        //     license_key: this.$session.get("UserInformation").license_key,
        //     token: this.bot_response_token_value,
        //     username: this.$session.get("UserInformation").email,
        //     source: "Web",
        //     chat: `/re_order_products_action${form_payload}`,
        //     token: this.bot_response_token_value,
        //     role: this.$session.get("UserInformation").role,
        //     refreshed_or_closed: this.refreshed_or_closed,
        //   })
        //   .then((response) => {
        //     console.log(response.data);
        //     console.log(this);
        //     this.response_handling(response)
        //   })
        //   .catch((err) => {
        //     console.log("Error :>> ", err);
        //   });
      }
    },
    open_messaging_framework_integration(url) {
      var link = document.createElement("a");
      link.href = url;
      // link.setAttribute("download", file_name);
      link.setAttribute("target", "_blank");
      document.body.appendChild(link);
      link.click();
      link.remove();
    },
    support_subscription_data() {
      axios
        .post(api_calls.chatbot_response_cense(), {
          license_key: this.$session.get("UserInformation").license_key,
          token: this.bot_response_token_value,
          username: this.$session.get("UserInformation").email,
          token: this.bot_response_token_value,
          role: this.$session.get("UserInformation").role,
          refreshed_or_closed: this.refreshed_or_closed,
          chat: "/support_subscription_data",
          source: "Web",
        })
        .then((response) => {
          this.response_handling(response);
        });
    },
    check_no_products() {
      let products_div = document.getElementById('products_list_div');
      let display_none_count = 0;
      for (let i = 0; i<products_div.children.length; i++){
        if(products_div.children[i].style.display === "none"){
          display_none_count +=1;
        }
      }
      if(display_none_count === products_div.children.length) {
        var msg = {
          conversation_only: true,
          time: this.generate_time(),
          received : "Sorry, we could not find any products. Please try rephrasing to search a different product!",
          receiving : true
        };
        this.chat.push(msg);
      }
    },
    get_magento_store_window_customer_email(){
      try {
        let curr = JSON.parse(this.user_data.magento_customer_data);
        if (Boolean(curr.id) == true && Boolean(curr.email) == true) {
          var customer = [curr.id, curr.email]
          return customer;
        }
      } catch(e) { }
      return null;
    },
    get_woocommerce_store_window_customer_email(){
      try {
        let curr = this.user_data.woo_current_user;
        if (curr.ID !== 0 && curr.allcaps.customer == true) {
          var customer = [curr.data.ID, curr.data.user_email]
          return customer;
        }
      } catch(e) { }
      return null;
    },
    get_shopify_store_window_customer_id(){
      try {
      let curr = window.ShopifyAnalytics.meta.page.customerId;
      if (curr !== undefined && curr !== null && curr !== "") {
        return curr;
      }
      } catch(e) { }
      try {
        let curr = window.meta.page.customerId;
        if (curr !== undefined && curr !== null && curr !== "") {
          return curr;
        }
      } catch (e) { }    
      try {
        let curr = _st.cid;
        if (curr !== undefined && curr !== null && curr !== "") {
          return curr;
        }
      } catch (e) { }
      return null;
    },
    no_orders_to_be_shown(index){
      this.chat[index].received = "It seems you have no orders right now!"
    },
    change_chat_text_to_login_redirect(index){
      this.chat[index].received = '<p style="width:auto;margin-bottom:0;"> Please login on the store by clicking <a title="This feature is only available on the store website."class="bot-response-style" style="cursor: not-allowed;" href="javascript: void(0)"> here </a></p>';
    },
    return_document_cookies(name) {
      // const value = `; ${document.cookie}`;
      // const parts = value.split(`; ${name}=`);
      // if (parts.length === 2) return parts.pop().split(';').shift();
      let cookie = {};
      document.cookie.split(';').forEach(function(el) {
      let [k,v] = el.split('=');
      cookie[k.trim()] = v;
    })
    return cookie[name];
    },
    available_qty(stock_qty, id){
      if (this.addtoCartdata.length != 0){
        for (var i in this.addtoCartdata) {
          if (this.addtoCartdata[i].id === id){
            let res = stock_qty - this.addtoCartdata[i].order_qty;
            return (res == 0) ? "reached" : res;
          }
        }
        return stock_qty
      } else{
        return stock_qty;
      }
    }
  },
};
"},null]}