{"remainingRequest":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Webhook.vue?vue&type=template&id=27598e59&scoped=true&","dependencies":[{"path":"/home/vimalesh/CENSE/chatbot-portal/src/portal/Chatbot/Dashboard/ConversationalFlow/Webhook.vue","mtime":1645594423479},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vimalesh/CENSE/chatbot-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiBjbGFzcz0ic3Bpbm5lciIgaWQ9InNwaW5uZXIiIHYtc2hvdz0ic3Bpbm5lck9uIj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJjYXJkIGRhc2gtY2FyZCIgc3R5bGU9ImJvcmRlcjogbm9uZTsiPgogICAgPGRpdgogICAgICBjbGFzcz0iY2FyZC1oZWFkZXIgcHgtMCBkLWJsb2NrIGQtc20tZmxleCBmbGV4LXdyYXAganVzdGlmeS1jb250ZW50LWJldHdlZW4iCiAgICA+CiAgICAgIDxoNCBjbGFzcz0ibWItc20tMCI+V2ViaG9vayBTZXR1cDwvaDQ+CiAgICAgIDwhLS0gPHA+ClNwZWNpZnkgdGhlIHJlcXVlc3QgVVJMIGZvciBhbiBleHRlcm5hbCBBUEkgeW91IHdhbnQgdG8gYmUgYWJsZSB0byBpbnZva2UgZnJvbSBkaWFsb2cgbm9kZXMuIFdlIHdpbGwgY2FsbCB0aGlzIFVSTCB3aGVuIGNvbmZpZ3VyZWQgdG8gZG8gc28gZnJvbSBhIGRpYWxvZyBub2RlLgogICAgPC9wPiAtLT4KICAgICAgPGRpdiBjbGFzcz0iY2FyZC1hY3QgZC1mbGV4IGZsZXgtd3JhcCI+CiAgICAgICAgPGlucHV0CiAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIHNlYXJjaC1iYXIiCiAgICAgICAgICBpZD0ic2VhcmNoX2Jhcl9pZCIKICAgICAgICAgIHBsYWNlaG9sZGVyPSJTZWFyY2ggaGVyZSIKICAgICAgICAgIHYtbW9kZWw9InNlYXJjaF9uYW1lIgogICAgICAgIC8+CiAgICAgICAgPGEKICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgIHYtaWY9ImlzVmlzaWJsZVNlYXJjaENsZWFyIgogICAgICAgICAgY2xhc3M9ImJ0biBiZy10cmFuc3BhcmVudCBtdC1hdXRvIG1iLWF1dG8gcHktMCIKICAgICAgICAgIEBjbGljaz0iY2xlYXJfc2VhcmNoX25hbWUiCiAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IC00MHB4OyB6LWluZGV4OiAxMCIKICAgICAgICA+CiAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9jbG9zZS1pY24ucG5nIiBhbHQgLz4KICAgICAgICA8L2E+CiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIKICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICBAY2xpY2s9ImlzRWRpdFdlYmhvb2sgPyB2ZXJpZnlfY2hhbmdlcygpIDogc2VhcmNoX3dlYmhvb2siCiAgICAgICAgICBpZD0ic2VhcmNoX2J0bl9pZCIKICAgICAgICA+CiAgICAgICAgICA8c3ZnCiAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiCiAgICAgICAgICAgIHdpZHRoPSIxNCIKICAgICAgICAgICAgaGVpZ2h0PSIxNCIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBkPSJNMTMuODA5MDExMzI3MTAwMDcxLDEyLjk2NTUwNTQzNTYwMTQ3MiBMOS4zMDkxMDAxMjExNzgyMyw4LjQ5MzMwNjY0ODU0MTk5IEMxMC4wMDczOTIwNzk1ODY1ODQsNy41OTYxMTE1ODk2MDU1MjEgMTAuMzg1MTI4MTc2MTk0NTgsNi40OTkxNTcxNzAxMzgxMDYgMTAuMzg1MTI4MTc2MTk0NTgsNS4zNDUzNzQ2NTY3MjY1MzIgYzAsLTEuMzgxMDk0ODg5MTg4MTgwMiAtMC41NDIzNDU4NjM0Nzg0NTE0LC0yLjY3NjA4NjYwNTczMzcwNSAtMS41MjMwNzM1MjcxNDg3NDksLTMuNjUyNDk2NTgzNTAxNDA4MyBjLTAuOTgwNzI3NjYzNjcwMjk3NiwtMC45NzY0MDk5Nzc3Njc3MDMzIC0yLjI4NzIwOTM5MjMwNTI4OSwtMS41MTM2OTM3NzUwNTc4Njg1IC0zLjY3NTEyOTYzNzE4MTQ1MjYsLTEuNTEzNjkzNzc1MDU3ODY4NSBzLTIuNjk0NDAxOTczNTExMTU0NCwwLjUzOTAwNTg2MDc0MzAxNzggLTMuNjc1MTI5NjM3MTgxNDUyNiwxLjUxMzY5Mzc3NTA1Nzg2ODUgQzAuNTI5MzM0OTc2NjI0NTE3OSwyLjY2NzU2NTk4NzUzOTk3NSAtMC4wMTEyNzgxNTI0NjU4MjAzMTYsMy45NjQyNzk3Njc1MzgzNTc2IC0wLjAxMTI3ODE1MjQ2NTgyMDMxNiw1LjM0NTM3NDY1NjcyNjUzMiBjMCwxLjM3OTM3MjgyNTczNTMyNzMgMC41NDIzNDU4NjM0Nzg0NTE0LDIuNjc3ODA4NjY5MTg2NTU3NSAxLjUyMzA3MzUyNzE0ODc0OSwzLjY1MjQ5NjU4MzUwMTQwODMgQzIuNDkyNTIzMDM4MzUzMjIyLDkuOTc0MjgxMjE3OTk1NjQ4IDMuNzk3MjcyMDMyNjAwMTA0NCwxMC41MTE1NjUwMTUyODU4MSA1LjE4NjkyNTAxMTg2NDM4LDEwLjUxMTU2NTAxNTI4NTgxIGMxLjE2MDkzMjA0MDAzMzc0NSwwIDIuMjYyOTUxMTEwODcxNzQ3NSwtMC4zNzU0MDk4MzI3MjE5NzQzNyAzLjE2NTcwNTcyNzA3NzA5MiwtMS4wNjc2NzkzNDA3Njg5MTcxIGw0LjQ5OTkxMTIwNTkyMTg0NCw0LjQ3MDQ3NjcyMzYwNjYyOCBhMC4xNDIwODQyMTk4MjUwMjU3LDAuMTQxMjA5MjAzMTMzOTUzNjMgMCAwIDAgMC4yMDA5OTcxODkwMjA3NjgwNSwwIGwwLjc1NTQ3MjE5MzIxNTk5MDQsLTAuNzQ5MDk3NjAxOTkxMDk1NSBhMC4xNDIwODQyMTk4MjUwMjU3LDAuMTQxMjA5MjAzMTMzOTUzNjMgMCAwIDAgMCwtMC4xOTk3NTkzNjA1MzA5NTkwNSB6TTcuOTMxNTc2MjgyNjMwNzI4LDguMDczMTIzMTY2MDQ1ODM2IEM3LjE5Njg5NjkwMjA3MjA1OCw4LjgwMTU1NjAwNjYwMjY5IDYuMjIzMTAwMTc1OTU0MjA1NSw5LjIwMjc5Njc5MTExNzQ2IDUuMTg2OTI1MDExODY0MzgsOS4yMDI3OTY3OTExMTc0NiBzLTIuMDA5OTcxODkwMjA3Njc3NSwtMC40MDEyNDA3ODQ1MTQ3NzA2IC0yLjc0NDY1MTI3MDc2NjM0NywtMS4xMjk2NzM2MjUwNzE2Mjg2IEMxLjcwOTMyNzA5NDkyNzQ3OCw3LjM0Mjk2ODI2MjAzNjEyMSAxLjMwNTU5OTk4MjQ5NzgzNzUsNi4zNzUxNjg2MDE1MzI2OCAxLjMwNTU5OTk4MjQ5NzgzNzUsNS4zNDUzNzQ2NTY3MjY1MzIgczAuNDAzNzI3MTEyNDI5NjQ1OCwtMS45OTkzMTU2Njg3NjI0NCAxLjEzNjY3Mzc1ODYwMDIwMzYsLTIuNzI3NzQ4NTA5MzE5Mjk4IEMzLjE3Njk1MzEyMTY1NjcwMjYsMS44ODkxOTMzMDY4NTAzODE3IDQuMTUwNzQ5ODQ3Nzc0NTYyLDEuNDg3OTUyNTIyMzM1NjA2NyA1LjE4NjkyNTAxMTg2NDM4LDEuNDg3OTUyNTIyMzM1NjA2NyBzMi4wMTE3MDQ2MjQ1OTU3ODg0LDAuMzk5NTE4NzIxMDYxOTE3NSAyLjc0NDY1MTI3MDc2NjM0NywxLjEyOTY3MzYyNTA3MTYyODYgUzkuMDY4MjUwMDQxMjMwOTMsNC4zMTU1ODA3MTE5MjAzODUgOS4wNjgyNTAwNDEyMzA5Myw1LjM0NTM3NDY1NjcyNjUzMiBzLTAuNDAzNzI3MTEyNDI5NjQ1OCwxLjk5OTMxNTY2ODc2MjQ0IC0xLjEzNjY3Mzc1ODYwMDIwMzYsMi43Mjc3NDg1MDkzMTkyOTggeiIKICAgICAgICAgICAgICBmaWxsPSIjZmZmIgogICAgICAgICAgICAvPgogICAgICAgICAgPC9zdmc+CiAgICAgICAgPC9hPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgY2xhc3M9ImRhcmtibHVlLWJ0biIKICAgICAgICAgIGlkPSJhZGRfZW50aXR5X2J0biIKICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjd2ViaG9va21vZGFsIgogICAgICAgICAgdGl0bGU9IkFkZCBuZXcgV2ViaG9vayIKICAgICAgICA+CiAgICAgICAgICA8c3ZnCiAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgd2lkdGg9IjE0IgogICAgICAgICAgICBoZWlnaHQ9IjEzLjk5NyIKICAgICAgICAgICAgdmlld0JveD0iMCAwIDE0IDEzLjk5NyIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBpZD0iVW5pb25fMTMiCiAgICAgICAgICAgICAgZGF0YS1uYW1lPSJVbmlvbiAxMyIKICAgICAgICAgICAgICBkPSJNLTEyNjg0LDIwNTh2LTVoLTVhMSwxLDAsMCwxLTEtMSwxLDEsMCwwLDEsMS0xaDV2LTVhMSwxLDAsMCwxLDEtMSwxLDEsMCwwLDEsMSwxdjVoNWExLDEsMCwwLDEsMSwxLDEsMSwwLDAsMS0xLDFoLTV2NWExLDEsMCwwLDEtMSwxQTEsMSwwLDAsMS0xMjY4NCwyMDU4WiIKICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMjY5MC4wMDEgLTIwNDUuMDAyKSIKICAgICAgICAgICAgICBmaWxsPSIjZmZmIgogICAgICAgICAgICAvPgogICAgICAgICAgPC9zdmc+CiAgICAgICAgICBBZGQgV2ViaG9vawogICAgICAgIDwvYT4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgY2xhc3M9InJlZC1idG4iCiAgICAgICAgICBAY2xpY2s9ImRlbGV0ZV9zZWxlY3RlZCIKICAgICAgICAgIGlkPSJkZWxldGVfZW50aXR5X2lkIgogICAgICAgID4KICAgICAgICAgIDxzdmcKICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICB3aWR0aD0iMTQiCiAgICAgICAgICAgIGhlaWdodD0iMTQiCiAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNCAxNCIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBkPSJNOC4zNzUsM3YuNzc4SDRWNS4zMzNoLjg3NVYxNS40NDRBMS42NjEsMS42NjEsMCwwLDAsNi42MjUsMTdoOC43NWExLjY2MSwxLjY2MSwwLDAsMCwxLjc1LTEuNTU2VjUuMzMzSDE4VjMuNzc4SDEzLjYyNVYzSDguMzc1TTYuNjI1LDUuMzMzaDguNzVWMTUuNDQ0SDYuNjI1VjUuMzMzbTEuNzUsMS41NTZ2N2gxLjc1di03SDguMzc1bTMuNSwwdjdoMS43NXYtN1oiCiAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTQgLTMpIgogICAgICAgICAgICAgIGZpbGw9IiNmZmYiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIERlbGV0ZQogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBweC0wIHB0LTAiIGlkPSJwYWdlIj4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGQtZmxleCBweC0wIiB2LWlmPSIhbm9fd2ViaG9va3NfcHJlc2VudCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgcGwtMCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1ib3giPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1yZXNwb25zaXZlIj4KICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tY2hlY2sgY2hlY2tib3ggY2hlY2tib3gtc3VjY2VzcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1jaGVjay1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jaGVjay1pbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJzZWxlY3RhbGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9InNlbGVjdGVkX3dlYmhvb2soJ2FsbCcpIgogICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InRleHQtbGVmdCI+V2ViaG9va3M8L3RoPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iih3ZWJob29rLCBpbmRleCkgaW4gd2ViaG9va3NfbGlzdCIKICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9ImNoZWNrX2N1cnJlbnRfd2ViaG9vayhpbmRleCkiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWNoZWNrIGNoZWNrYm94LXN1Y2Nlc3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jaGVjay1sYWJlbCBjaGVja2JveCBjaGVja2JveC1zdWNjZXNzIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jaGVjay1pbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSInd2ViaG9va19jaGVja2JveF8nICsgaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSJzZWxlY3RlZF93ZWJob29rKHdlYmhvb2suaWQpIgogICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImljbiI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImlzRWRpdFdlYmhvb2sgPyB2ZXJpZnlfY2hhbmdlcygpIDogc2hvd193ZWJob29rKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT0id2ViaG9vay5uYW1lIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHdlYmhvb2submFtZSB9fQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTggcHItMCI+CiAgICAgICAgICA8ZGl2IHN0eWxlPSJib3JkZXI6IDFweCBzb2xpZCAjZGJlMmU4Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJjb2xvcjogIzQxNDE0MSIgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICA8aDQ+PHAgY2xhc3M9Im10LTIgbWItMCI+V2ViaG9vayBEZXRhaWxzPC9wPjwvaDQ+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICBAY2xpY2s9ImVkaXRfd2ViaG9va19kZXRhaWxzIgogICAgICAgICAgICAgICAgICB2LWh0bWw9InBlbmNpbF9zdmciCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtbC1hdXRvIG1yLTIgbXQtMiIKICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsiCiAgICAgICAgICAgICAgICAgIHRpdGxlPSJFZGl0IgogICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxcmVtIj4KICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1iLTIiPldlYmhvb2sgTmFtZTwvaDU+CiAgICAgICAgICAgICAgPGRpdiB2LWlmPSIhaXNFZGl0V2ViaG9vayIgc3R5bGU9InBhZGRpbmctbGVmdDogMjBweCI+CiAgICAgICAgICAgICAgICA8cD57eyBjdXJyZW50X3NlbGVjdGVkX3dlYmhvb2submFtZSB9fTwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IHYtZWxzZS1pZj0iaXNFZGl0V2ViaG9vayI+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW0iCiAgICAgICAgICAgICAgICAgIGFsaWduPSJyaWdodCIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIHdlYmhvb2sgbmFtZSIKICAgICAgICAgICAgICAgICAgaWQ9ImVudGVyX3dlYmhvb2tfZWRpdF9pZCIKICAgICAgICAgICAgICAgICAgdi1vbjprZXl1cD0iY2hlY2tfd2ViaG9va19uYW1lX2VkaXQiCiAgICAgICAgICAgICAgICAgIEBrZXlkb3duPSJ3ZWJob29rX25hbWVfY2hlY2tfc3BlY2lhbF9jaGFyYWN0ZXJzKCRldmVudCkiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9IndlYmhvb2tfbmFtZSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICB2LXNob3c9IndlYmhvb2tfYWxyZWFkeV9leGlzdHMiIAogICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHJlZCIKICAgICAgICAgICAgICAgICAgPkFuIFdlYmhvb2sgd2l0aCB0aGlzIG5hbWUgYWxyZWFkeSBleGlzdHMuPC9zcGFuCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtYi0yIj5VUkw8L2g1PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0iIWlzRWRpdFdlYmhvb2siIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDIwcHgiPgogICAgICAgICAgICAgICAgPHA+e3sgY3VycmVudF9zZWxlY3RlZF93ZWJob29rLnVybCB9fTwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IHYtZWxzZT4KICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ3ZWJob29rX3VybCIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW0iCiAgICAgICAgICAgICAgICAgIHRpdGxlPSJZb3VyIGFwcCBVUkwgZm9yIHdlYmhvb2sgcmVxdWVzdCAoZXguIGh0dHBzOi8vdXMtc291dGguZnVuY3Rpb25zLmNsb3VkLmlibS5jb20vYXBpL3YxL3dlYi9teWFwcC9IZWxsb1dvcmxkLmpzb24pIgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iWW91ciBhcHAgVVJMIGZvciB3ZWJob29rIHJlcXVlc3QgKGV4LiBodHRwczovL3VzLXNvdXRoLmZ1bmN0aW9ucy5jbG91ZC5pYm0uY29tL2FwaS92MS93ZWIvbXlhcHAvSGVsbG9Xb3JsZC5qc29uKSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgPGRpdiB2LWlmPSIhaXNFZGl0V2ViaG9vayI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1iLTIiPkhUVFAgTWV0aG9kIDo8L2g1PgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icGwtMyIgc3R5bGU9InBhZGRpbmctdG9wOiAycHg7Ij4KICAgICAgICAgICAgICAgICAgICB7eyBjdXJyZW50X3NlbGVjdGVkX3dlYmhvb2suaHR0cF9tZXRob2QgfX0KICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiB2LWVsc2U+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTIiPlNldCBIVFRQIE1ldGhvZDwvaDY+CiAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJodHRwX21ldGhvZCIKICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAyMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW0iCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJTZWxlY3QgcmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc291cmNlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihvcHRpb24sIGluZGV4KSBpbiBodHRwX21ldGhvZF90eXBlcyIKICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICA6dmFsdWU9Im9wdGlvbiIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIHt7IG9wdGlvbiB9fQogICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1pZj0iIWlzRWRpdFdlYmhvb2siPgogICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJjdXJyZW50X3NlbGVjdGVkX3dlYmhvb2tfaGVhZGVycyI+CiAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1iLTQiPkhlYWRlcnM8L2g1PgogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSIgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrIj4KICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgIDx0ciBzdHlsZT0iYm9yZGVyOiAxcHgiPgogICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlPSJjb2wiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5IZWFkZXIgbmFtZTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBzY29wZT0iY29sIgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+SGVhZGVyIHZhbHVlPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoaGVhZGVyLCBpbmRleCkgaW4gY3VycmVudF9zZWxlY3RlZF93ZWJob29rLmhlYWRlcnMiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJsaXN0LWdyb3VwIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJvcmRlcjogMXB4IgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx0ZAogICAgICAgICAgICAgICAgICAgICAgICBzY29wZT0icm93IgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGhlYWRlci5uYW1lIH19CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3sgaGVhZGVyLnZhbHVlIH19CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiB2LWlmPSJpc0VkaXRXZWJob29rIj4KICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1iLTQiPkhlYWRlcnM8L2g1PgogICAgICAgICAgICAgICAgPGhyIHN0eWxlPSJtYXJnaW46IDEwcHggMHB4IiAvPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IG1iLTEiIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNSI+SGVhZGVyIG5hbWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPkhlYWRlciB2YWx1ZTwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8aHIgc3R5bGU9Im1hcmdpbjogMTBweCAwcHgiIC8+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJjb2wtc20tMTIgcC0wIGQtZmxleCBmb3JtLWdyb3VwIgogICAgICAgICAgICAgICAgICB2LWZvcj0iKGhlYWRlciwgaW5kZXgpIGluIGhlYWRlcnMiCiAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNSBwLTAiPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaGVhZGVyLm5hbWUiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJTZWxlY3QgcmVzcG9uc2UiCiAgICAgICAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NvdXJjZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIob3B0aW9uLCBpbmRleCkgaW4gaGVhZGVyX25hbWVzIgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJvcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IG9wdGlvbiB9fQogICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNSBwLTAgcGwtMyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMC4zNzVyZW0gMC41cmVtIgogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIHZhbHVlIgogICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImhlYWRlci52YWx1ZSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEiIHN0eWxlPSJwYWRkaW5nLXRvcDogMTBweCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDogcmlnaHQ7IGN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAxNHB4IgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9faGVhZGVyc19saXN0KCdyZW1vdmUnLCBpbmRleCkiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXV0ZWQiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkRlbGV0ZSBTbG90IgogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEiCiAgICAgICAgICAgICAgICAgICAgICAgID4mI3hmMDBkOzwvaQogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICB2LWlmPSJoZWFkZXIubmFtZSA9PSAnQXV0aG9yaXphdGlvbiciCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbC1zbS0xIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nLXRvcDogMTBweCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTRweCIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdXRlZCIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjYXV0aG9yaXphdGlvbm1vZGFsIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxpIHRpdGxlPSJDdXN0b21pemUgU2xvdCIgY2xhc3M9ImZhcyBmYS1jb2ciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGkgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIgY2xhc3M9ImZhIj4mI3hmMDBkOzwvaT4gLS0+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPGg2IHN0eWxlPSJwYWRkaW5nLXRvcDogNXB4OyBtYXJnaW4tYm90dG9tOiA0cHgiPgogICAgICAgICAgICAgICAgICAgIEFkZCBIZWFkZXIKICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhZGRfcmVzcG9uc2VfYnV0dG9uIG1sLTIiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQKICAgICAgICAgICAgICAgICAgICAgICAgdXJsKCdAcG9ydGFsL2Fzc2V0cy9pbWcvcGx1cy5wbmcnKSAwJSAwJSBuby1yZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3g7CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkX3RvX2hlYWRlcnNfbGlzdCgnYWRkJykiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhc2gtbW9kYWwiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCBjYXJkLWFjdCB0ZXh0LXJpZ2h0IG10LTAgcHktMCBib3JkZXItdG9wLTAiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlZGl0X3dlYmhvb2tfZGV0YWlscyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBDYW5jZWwKICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGFya2JsdWUtYnRuIgogICAgICAgICAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zYXZlIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzYXZlX3dlYmhvb2soKSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBTYXZlCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiB2LWVsc2U+CiAgICAgICAgPHAgY2xhc3M9InRleHQtY2VudGVyIiBzdHlsZT0icGFkZGluZy10b3A6IDUwcHg7Ij4KICAgICAgICAgIDxzdHJvbmc+CiAgICAgICAgICAgIFlvdSBjdXJyZW50bHkgaGF2ZSBObyBXZWJob29rcyBBZGRlZC4gUGxlYXNlIGFkZCB0bwogICAgICAgICAgICBjb250aW51ZS48L3N0cm9uZwogICAgICAgICAgPgogICAgICAgIDwvcD4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYKICAgICAgICBjbGFzcz0icGFnaW4tdGFibGUiCiAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6IDIlIgogICAgICAgIHYtc2hvdz0id2ViaG9va3NfbGlzdC5sZW5ndGggPiAwIgogICAgICA+CiAgICAgICAgPG5hdiBhcmlhLWxhYmVsPSJQYWdlIG5hdmlnYXRpb24gZXhhbXBsZSI+CiAgICAgICAgICA8dWwgY2xhc3M9InBhZ2luYXRpb24ganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0icGFnZS1pdGVtIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImlzRWRpdFdlYmhvb2sgPyB2ZXJpZnlfY2hhbmdlcygpIDogcGFnZV9yZXF1aXJlKHBhZ2Vfbm8gLSAxKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjguNjY3IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1LjIwNCIKICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDguNjY3IDE1LjIwNCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGcKICAgICAgICAgICAgICAgICAgICBpZD0iYXJyb3ctcG9pbnQtdG8tbGVmdCIKICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMDUuODA2IDE1LjIwNCkgcm90YXRlKDE4MCkiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgaWQ9IlBhdGhfMTEzNiIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbmFtZT0iUGF0aCAxMTM2IgogICAgICAgICAgICAgICAgICAgICAgZD0iTTEwNS40OTMsOC4zNTRsLTYuNTM3LDYuNTM3YTEuMDY1LDEuMDY1LDAsMSwxLTEuNTA2LTEuNTA2TDEwMy4yMzUsNy42LDk3LjQ1LDEuODE3QTEuMDY1LDEuMDY1LDAsMCwxLDk4Ljk1Ni4zMTJsNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwwLDEsMCwxLjUwNVoiCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDApIgogICAgICAgICAgICAgICAgICAgICAgZmlsbD0iIzk0OTlhZSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaQogICAgICAgICAgICAgIDpjbGFzcz0iJ3BhZ2UtaXRlbSAnICsgcGFnaW5hdGlvbl9jbGFzcyhwYWdlbm8pIgogICAgICAgICAgICAgIHYtZm9yPSJwYWdlbm8gaW4gcGFnZV9hcnJheSIKICAgICAgICAgICAgICA6a2V5PSJwYWdlbm8iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgdi1pZj0icGFnZW5vID09ICcuLi5zJyB8fCBwYWdlbm8gPT0gJy4uLmwnIgogICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImlzRWRpdFdlYmhvb2sgPyB2ZXJpZnlfY2hhbmdlcygpIDogcGFnZV9yZXF1aXJlKHBhZ2VubykiCiAgICAgICAgICAgICAgICA+Li4uPC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICB2LWlmPSJwYWdlbm8gIT0gJy4uLnMnICYmIHBhZ2VubyAhPSAnLi4ubCciCiAgICAgICAgICAgICAgICBjbGFzcz0icGFnZS1saW5rIgogICAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICAgIEBjbGljaz0iaXNFZGl0V2ViaG9vayA/IHZlcmlmeV9jaGFuZ2VzKCkgOiBwYWdlX3JlcXVpcmUocGFnZW5vKSIKICAgICAgICAgICAgICAgID57eyBwYWdlbm8gfX08L2EKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0icGFnZS1pdGVtIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9InBhZ2UtbGluayIKICAgICAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgICAgICBAY2xpY2s9ImlzRWRpdFdlYmhvb2sgPyB2ZXJpZnlfY2hhbmdlcygpIDogcGFnZV9yZXF1aXJlKHBhZ2Vfbm8gKyAxKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3ZnCiAgICAgICAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjguNjY3IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE1LjIwNCIKICAgICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDguNjY3IDE1LjIwNCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGcKICAgICAgICAgICAgICAgICAgICBpZD0iYXJyb3ctcG9pbnQtdG8tcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTk3LjEzOSAwKSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICBpZD0iUGF0aF8xMTM2IgogICAgICAgICAgICAgICAgICAgICAgZGF0YS1uYW1lPSJQYXRoIDExMzYiCiAgICAgICAgICAgICAgICAgICAgICBkPSJNMTA1LjQ5Myw4LjM1NGwtNi41MzcsNi41MzdhMS4wNjUsMS4wNjUsMCwxLDEtMS41MDYtMS41MDZMMTAzLjIzNSw3LjYsOTcuNDUsMS44MTdBMS4wNjUsMS4wNjUsMCwwLDEsOTguOTU2LjMxMmw2LjUzNyw2LjUzN2ExLjA2NSwxLjA2NSwwLDAsMSwwLDEuNTA1WiIKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAgMCkiCiAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjOTQ5OWFlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9uYXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdgogICAgY2xhc3M9Im1vZGFsIGZhZGUiCiAgICBpZD0id2ViaG9va21vZGFsIgogICAgdGFiaW5kZXg9Ii0xIgogICAgcm9sZT0iZGlhbG9nIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJleGFtcGxlTW9kYWxMYWJlbCIKICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgZGF0YS1iYWNrZHJvcD0ic3RhdGljIgogICAgZGF0YS1rZXlib2FyZD0iZmFsc2UiCiAgPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIiByb2xlPSJkb2N1bWVudCI+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQgcC0yIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgPGg0PldlYmhvb2sgRGV0YWlsczwvaDQ+CiAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgIEBjbGljaz0iZW1wdHlfdmFyaWFibGUoKSIKICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgICAgPgogICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGg2IGNsYXNzPSJtYi0yIj5FbnRlciBXZWJob29rIE5hbWU8L2g2PgogICAgICAgICAgPGlucHV0CiAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgIHYtbW9kZWw9IndlYmhvb2tfbmFtZSIKICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW0iCiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciB3ZWJob29rIG5hbWUiCiAgICAgICAgICAgIGlkPSJlbnRlcl93ZWJob29rX2lkIgogICAgICAgICAgICB2LW9uOmtleXVwPSJjaGVja193ZWJob29rX25hbWUiCiAgICAgICAgICAgIEBrZXlkb3duPSJ3ZWJob29rX25hbWVfY2hlY2tfc3BlY2lhbF9jaGFyYWN0ZXJzKCRldmVudCkiCiAgICAgICAgICAvPgogICAgICAgICAgPHNwYW4KICAgICAgICAgICAgdi1zaG93PSJ3ZWJob29rX2FscmVhZHlfZXhpc3RzIiAKICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiByZWQiCiAgICAgICAgICAgID5BbiBXZWJob29rIHdpdGggdGhpcyBuYW1lIGFscmVhZHkgZXhpc3RzLjwvc3BhbgogICAgICAgICAgPgogICAgICAgICAgPGJyIC8+CiAgICAgICAgICA8aDYgY2xhc3M9Im1iLTIiPlVSTDwvaDY+CiAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgdi1tb2RlbD0id2ViaG9va191cmwiCiAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtIgogICAgICAgICAgICB0aXRsZT0iWW91ciBhcHAgVVJMIGZvciB3ZWJob29rIHJlcXVlc3QgKGV4LiBodHRwczovL3VzLXNvdXRoLmZ1bmN0aW9ucy5jbG91ZC5pYm0uY29tL2FwaS92MS93ZWIvbXlhcHAvSGVsbG9Xb3JsZC5qc29uKSIKICAgICAgICAgICAgcGxhY2Vob2xkZXI9IllvdXIgYXBwIFVSTCBmb3Igd2ViaG9vayByZXF1ZXN0IChleC4gaHR0cHM6Ly91cy1zb3V0aC5mdW5jdGlvbnMuY2xvdWQuaWJtLmNvbS9hcGkvdjEvd2ViL215YXBwL0hlbGxvV29ybGQuanNvbikiCiAgICAgICAgICAvPgogICAgICAgICAgPGJyIC8+CiAgICAgICAgICA8aDYgY2xhc3M9Im1iLTIiPlNldCBIVFRQIE1ldGhvZDwvaDY+CiAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICB2LW1vZGVsPSJodHRwX21ldGhvZCIKICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJTZWxlY3QgcmVzcG9uc2UiCiAgICAgICAgICAgIGlkPSJyZXNfbl9pbnRfc291cmNlIgogICAgICAgICAgPgogICAgICAgICAgICA8b3B0aW9uCiAgICAgICAgICAgICAgdi1mb3I9IihvcHRpb24sIGluZGV4KSBpbiBodHRwX21ldGhvZF90eXBlcyIKICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICA6dmFsdWU9Im9wdGlvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIHt7IG9wdGlvbiB9fQogICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgPGJyIC8+CiAgICAgICAgICA8aDYgY2xhc3M9Im1iLTQiPkhlYWRlcnM8L2g2PgogICAgICAgICAgPHA+CiAgICAgICAgICAgIEFkZCBIVFRQIGhlYWRlcnMgZm9yIGF1dGhvcml6YXRpb24gb3IgYW55IG90aGVyIHBhcmFtZXRlcnMKICAgICAgICAgICAgcmVxdWlyZWQgZm9yIGludm9raW5nIHRoZSB3ZWJob29rLgogICAgICAgICAgPC9wPgogICAgICAgICAgPGRpdj4KICAgICAgICAgICAgPGhyIHN0eWxlPSJtYXJnaW46IDEwcHggMHB4IiAvPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggbWItMSIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPkhlYWRlciBuYW1lPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPkhlYWRlciB2YWx1ZTwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGhyIHN0eWxlPSJtYXJnaW46IDEwcHggMHB4IiAvPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9ImNvbC1zbS0xMiBwLTAgZC1mbGV4IGZvcm0tZ3JvdXAiCiAgICAgICAgICAgICAgdi1mb3I9IihoZWFkZXIsIGluZGV4KSBpbiBoZWFkZXJzIgogICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUgcC0wIj4KICAgICAgICAgICAgICAgIDxzZWxlY3QKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImhlYWRlci5uYW1lIgogICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IHBhZGRpbmc6IDAuMzc1cmVtIDAuNXJlbSIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlbGVjdCByZXNwb25zZSIKICAgICAgICAgICAgICAgICAgaWQ9InJlc19uX2ludF9zb3VyY2UiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKG9wdGlvbiwgaW5kZXgpIGluIGhlYWRlcl9uYW1lcyIKICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICA6dmFsdWU9Im9wdGlvbiIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIHt7IG9wdGlvbiB9fQogICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS01IHAtMCBwbC0zIj4KICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXRhZyIKICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwLjM3NXJlbSAwLjVyZW0iCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciB2YWx1ZSIKICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaGVhZGVyLnZhbHVlIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMSIgc3R5bGU9InBhZGRpbmctdG9wOiAxMHB4Ij4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDogcmlnaHQ7IGN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAxNHB4IgogICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZF90b19oZWFkZXJzX2xpc3QoJ3JlbW92ZScsIGluZGV4KSIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im11dGVkIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iRGVsZXRlIFNsb3QiIHN0eWxlPSJmb250LXNpemU6IDE2cHgiIGNsYXNzPSJmYSIKICAgICAgICAgICAgICAgICAgICA+JiN4ZjAwZDs8L2kKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIHYtaWY9ImhlYWRlci5uYW1lID09ICdBdXRob3JpemF0aW9uJyIKICAgICAgICAgICAgICAgIGNsYXNzPSJjb2wtc20tMSIKICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nLXRvcDogMTBweCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTRweCIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im11dGVkIgogICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjYXV0aG9yaXphdGlvbm1vZGFsIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSB0aXRsZT0iQ3VzdG9taXplIFNsb3QiIGNsYXNzPSJmYXMgZmEtY29nIj48L2k+CiAgICAgICAgICAgICAgICAgIDwhLS0gPGkgc3R5bGU9ImZvbnQtc2l6ZTogMTZweCIgY2xhc3M9ImZhIj4mI3hmMDBkOzwvaT4gLS0+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgIDxoNiBzdHlsZT0icGFkZGluZy10b3A6IDVweDsgbWFyZ2luLWJvdHRvbTogNHB4Ij5BZGQgSGVhZGVyPC9oNj4KICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICBjbGFzcz0iYWRkX3Jlc3BvbnNlX2J1dHRvbiBtbC0yIgogICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCB1cmwoJ0Bwb3J0YWwvYXNzZXRzL2ltZy9wbHVzLnBuZycpCiAgICAgICAgICAgICAgICAgICAgMCUgMCUgbm8tcmVwZWF0IHBhZGRpbmctYm94OwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRfdG9faGVhZGVyc19saXN0KCdhZGQnKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltZy9ibGFja19wbHVzLnBuZyIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImRhc2gtbW9kYWwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCBjYXJkLWFjdCB0ZXh0LXJpZ2h0IG10LTAgcHktMCBib3JkZXItdG9wLTAiPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgICAgQGNsaWNrPSJlbXB0eV92YXJpYWJsZSgpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIENhbmNlbAogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICBpZD0icmVzX25faW50X3NhdmUiCiAgICAgICAgICAgICAgICBAY2xpY2s9InNhdmVfd2ViaG9vaygpIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIFNhdmUKICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2CiAgICBjbGFzcz0ibW9kYWwgZmFkZSIKICAgIGlkPSJhdXRob3JpemF0aW9ubW9kYWwiCiAgICB0YWJpbmRleD0iLTEiCiAgICByb2xlPSJkaWFsb2ciCiAgICBhcmlhLWxhYmVsbGVkYnk9ImV4YW1wbGVNb2RhbExhYmVsIgogICAgYXJpYS1oaWRkZW49InRydWUiCiAgICBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiCiAgICBkYXRhLWtleWJvYXJkPSJmYWxzZSIKICA+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCBwLTIiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8aDU+QmFzaWMgQXV0aG9yaXphdGlvbjwvaDU+CiAgICAgICAgICA8YnIgLz4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIHN0eWxlPSJ3aWR0aDogMTAwcHgiPgogICAgICAgICAgICA8aDY+VXNlciBuYW1lPC9oNj4KICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICB2LW1vZGVsPSJhdXRoX3VzZXJuYW1lIgogICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtdGFnIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciB1c2VyIG5hbWUiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIHN0eWxlPSJ3aWR0aDogMTAwcHgiPgogICAgICAgICAgICA8aDY+UGFzc3dvcmQ8L2g2PgogICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgIHYtbW9kZWw9ImF1dGhfcGFzc3dvcmQiCiAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC10YWciCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIHBhc3N3b3JkIgogICAgICAgICAgICAvPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImRhc2gtbW9kYWwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4td3JhcCBjYXJkLWFjdCB0ZXh0LXJpZ2h0IG10LTAgcHktMCBib3JkZXItdG9wLTAiPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpbmsiCiAgICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIENhbmNlbAogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIGNsYXNzPSJkYXJrYmx1ZS1idG4iCiAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIFNhdmUKICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}